{"version":3,"file":"static/js/main.2c087cf0.js","mappings":"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","sources":["../node_modules/react-dom/cjs/react-dom-client.production.js","../node_modules/react-dom/cjs/react-dom.production.js","../node_modules/react-dom/client.js","../node_modules/react-dom/index.js","../node_modules/react-router/node_modules/cookie/src/index.ts","../node_modules/react/cjs/react-jsx-runtime.production.js","../node_modules/react/cjs/react.production.js","../node_modules/react/index.js","../node_modules/react/jsx-runtime.js","../node_modules/scheduler/cjs/scheduler.production.js","../node_modules/scheduler/index.js","../webpack/bootstrap","../webpack/runtime/publicPath","../node_modules/qrcode.react/lib/esm/index.js","components/generateQRCode.js","components/database.js","../node_modules/react-router/dist/development/chunk-IR6S3I6Y.mjs","static/3 f1 cars.svg","components/cards.js","components/profile.js","components/profileV2.js","App.js","index.js"],"sourcesContent":["/**\n * @license React\n * react-dom-client.production.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/*\n Modernizr 3.0.0pre (Custom Build) | MIT\n*/\n\"use strict\";\nvar Scheduler = require(\"scheduler\"),\n  React = require(\"react\"),\n  ReactDOM = require(\"react-dom\");\nfunction formatProdErrorMessage(code) {\n  var url = \"https://react.dev/errors/\" + code;\n  if (1 < arguments.length) {\n    url += \"?args[]=\" + encodeURIComponent(arguments[1]);\n    for (var i = 2; i < arguments.length; i++)\n      url += \"&args[]=\" + encodeURIComponent(arguments[i]);\n  }\n  return (\n    \"Minified React error #\" +\n    code +\n    \"; visit \" +\n    url +\n    \" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\"\n  );\n}\nfunction isValidContainer(node) {\n  return !(\n    !node ||\n    (1 !== node.nodeType && 9 !== node.nodeType && 11 !== node.nodeType)\n  );\n}\nvar REACT_LEGACY_ELEMENT_TYPE = Symbol.for(\"react.element\"),\n  REACT_ELEMENT_TYPE = Symbol.for(\"react.transitional.element\"),\n  REACT_PORTAL_TYPE = Symbol.for(\"react.portal\"),\n  REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\"),\n  REACT_STRICT_MODE_TYPE = Symbol.for(\"react.strict_mode\"),\n  REACT_PROFILER_TYPE = Symbol.for(\"react.profiler\"),\n  REACT_PROVIDER_TYPE = Symbol.for(\"react.provider\"),\n  REACT_CONSUMER_TYPE = Symbol.for(\"react.consumer\"),\n  REACT_CONTEXT_TYPE = Symbol.for(\"react.context\"),\n  REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\"),\n  REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\"),\n  REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\"),\n  REACT_MEMO_TYPE = Symbol.for(\"react.memo\"),\n  REACT_LAZY_TYPE = Symbol.for(\"react.lazy\");\nSymbol.for(\"react.scope\");\nSymbol.for(\"react.debug_trace_mode\");\nvar REACT_OFFSCREEN_TYPE = Symbol.for(\"react.offscreen\");\nSymbol.for(\"react.legacy_hidden\");\nSymbol.for(\"react.tracing_marker\");\nvar REACT_MEMO_CACHE_SENTINEL = Symbol.for(\"react.memo_cache_sentinel\"),\n  MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nfunction getIteratorFn(maybeIterable) {\n  if (null === maybeIterable || \"object\" !== typeof maybeIterable) return null;\n  maybeIterable =\n    (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||\n    maybeIterable[\"@@iterator\"];\n  return \"function\" === typeof maybeIterable ? maybeIterable : null;\n}\nvar REACT_CLIENT_REFERENCE = Symbol.for(\"react.client.reference\");\nfunction getComponentNameFromType(type) {\n  if (null == type) return null;\n  if (\"function\" === typeof type)\n    return type.$$typeof === REACT_CLIENT_REFERENCE\n      ? null\n      : type.displayName || type.name || null;\n  if (\"string\" === typeof type) return type;\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return \"Fragment\";\n    case REACT_PORTAL_TYPE:\n      return \"Portal\";\n    case REACT_PROFILER_TYPE:\n      return \"Profiler\";\n    case REACT_STRICT_MODE_TYPE:\n      return \"StrictMode\";\n    case REACT_SUSPENSE_TYPE:\n      return \"Suspense\";\n    case REACT_SUSPENSE_LIST_TYPE:\n      return \"SuspenseList\";\n  }\n  if (\"object\" === typeof type)\n    switch (type.$$typeof) {\n      case REACT_CONTEXT_TYPE:\n        return (type.displayName || \"Context\") + \".Provider\";\n      case REACT_CONSUMER_TYPE:\n        return (type._context.displayName || \"Context\") + \".Consumer\";\n      case REACT_FORWARD_REF_TYPE:\n        var innerType = type.render;\n        type = type.displayName;\n        type ||\n          ((type = innerType.displayName || innerType.name || \"\"),\n          (type = \"\" !== type ? \"ForwardRef(\" + type + \")\" : \"ForwardRef\"));\n        return type;\n      case REACT_MEMO_TYPE:\n        return (\n          (innerType = type.displayName || null),\n          null !== innerType\n            ? innerType\n            : getComponentNameFromType(type.type) || \"Memo\"\n        );\n      case REACT_LAZY_TYPE:\n        innerType = type._payload;\n        type = type._init;\n        try {\n          return getComponentNameFromType(type(innerType));\n        } catch (x) {}\n    }\n  return null;\n}\nvar ReactSharedInternals =\n    React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,\n  assign = Object.assign,\n  prefix,\n  suffix;\nfunction describeBuiltInComponentFrame(name) {\n  if (void 0 === prefix)\n    try {\n      throw Error();\n    } catch (x) {\n      var match = x.stack.trim().match(/\\n( *(at )?)/);\n      prefix = (match && match[1]) || \"\";\n      suffix =\n        -1 < x.stack.indexOf(\"\\n    at\")\n          ? \" (<anonymous>)\"\n          : -1 < x.stack.indexOf(\"@\")\n            ? \"@unknown:0:0\"\n            : \"\";\n    }\n  return \"\\n\" + prefix + name + suffix;\n}\nvar reentry = !1;\nfunction describeNativeComponentFrame(fn, construct) {\n  if (!fn || reentry) return \"\";\n  reentry = !0;\n  var previousPrepareStackTrace = Error.prepareStackTrace;\n  Error.prepareStackTrace = void 0;\n  try {\n    var RunInRootFrame = {\n      DetermineComponentFrameRoot: function () {\n        try {\n          if (construct) {\n            var Fake = function () {\n              throw Error();\n            };\n            Object.defineProperty(Fake.prototype, \"props\", {\n              set: function () {\n                throw Error();\n              }\n            });\n            if (\"object\" === typeof Reflect && Reflect.construct) {\n              try {\n                Reflect.construct(Fake, []);\n              } catch (x) {\n                var control = x;\n              }\n              Reflect.construct(fn, [], Fake);\n            } else {\n              try {\n                Fake.call();\n              } catch (x$0) {\n                control = x$0;\n              }\n              fn.call(Fake.prototype);\n            }\n          } else {\n            try {\n              throw Error();\n            } catch (x$1) {\n              control = x$1;\n            }\n            (Fake = fn()) &&\n              \"function\" === typeof Fake.catch &&\n              Fake.catch(function () {});\n          }\n        } catch (sample) {\n          if (sample && control && \"string\" === typeof sample.stack)\n            return [sample.stack, control.stack];\n        }\n        return [null, null];\n      }\n    };\n    RunInRootFrame.DetermineComponentFrameRoot.displayName =\n      \"DetermineComponentFrameRoot\";\n    var namePropDescriptor = Object.getOwnPropertyDescriptor(\n      RunInRootFrame.DetermineComponentFrameRoot,\n      \"name\"\n    );\n    namePropDescriptor &&\n      namePropDescriptor.configurable &&\n      Object.defineProperty(\n        RunInRootFrame.DetermineComponentFrameRoot,\n        \"name\",\n        { value: \"DetermineComponentFrameRoot\" }\n      );\n    var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(),\n      sampleStack = _RunInRootFrame$Deter[0],\n      controlStack = _RunInRootFrame$Deter[1];\n    if (sampleStack && controlStack) {\n      var sampleLines = sampleStack.split(\"\\n\"),\n        controlLines = controlStack.split(\"\\n\");\n      for (\n        namePropDescriptor = RunInRootFrame = 0;\n        RunInRootFrame < sampleLines.length &&\n        !sampleLines[RunInRootFrame].includes(\"DetermineComponentFrameRoot\");\n\n      )\n        RunInRootFrame++;\n      for (\n        ;\n        namePropDescriptor < controlLines.length &&\n        !controlLines[namePropDescriptor].includes(\n          \"DetermineComponentFrameRoot\"\n        );\n\n      )\n        namePropDescriptor++;\n      if (\n        RunInRootFrame === sampleLines.length ||\n        namePropDescriptor === controlLines.length\n      )\n        for (\n          RunInRootFrame = sampleLines.length - 1,\n            namePropDescriptor = controlLines.length - 1;\n          1 <= RunInRootFrame &&\n          0 <= namePropDescriptor &&\n          sampleLines[RunInRootFrame] !== controlLines[namePropDescriptor];\n\n        )\n          namePropDescriptor--;\n      for (\n        ;\n        1 <= RunInRootFrame && 0 <= namePropDescriptor;\n        RunInRootFrame--, namePropDescriptor--\n      )\n        if (sampleLines[RunInRootFrame] !== controlLines[namePropDescriptor]) {\n          if (1 !== RunInRootFrame || 1 !== namePropDescriptor) {\n            do\n              if (\n                (RunInRootFrame--,\n                namePropDescriptor--,\n                0 > namePropDescriptor ||\n                  sampleLines[RunInRootFrame] !==\n                    controlLines[namePropDescriptor])\n              ) {\n                var frame =\n                  \"\\n\" +\n                  sampleLines[RunInRootFrame].replace(\" at new \", \" at \");\n                fn.displayName &&\n                  frame.includes(\"<anonymous>\") &&\n                  (frame = frame.replace(\"<anonymous>\", fn.displayName));\n                return frame;\n              }\n            while (1 <= RunInRootFrame && 0 <= namePropDescriptor);\n          }\n          break;\n        }\n    }\n  } finally {\n    (reentry = !1), (Error.prepareStackTrace = previousPrepareStackTrace);\n  }\n  return (previousPrepareStackTrace = fn ? fn.displayName || fn.name : \"\")\n    ? describeBuiltInComponentFrame(previousPrepareStackTrace)\n    : \"\";\n}\nfunction describeFiber(fiber) {\n  switch (fiber.tag) {\n    case 26:\n    case 27:\n    case 5:\n      return describeBuiltInComponentFrame(fiber.type);\n    case 16:\n      return describeBuiltInComponentFrame(\"Lazy\");\n    case 13:\n      return describeBuiltInComponentFrame(\"Suspense\");\n    case 19:\n      return describeBuiltInComponentFrame(\"SuspenseList\");\n    case 0:\n    case 15:\n      return (fiber = describeNativeComponentFrame(fiber.type, !1)), fiber;\n    case 11:\n      return (\n        (fiber = describeNativeComponentFrame(fiber.type.render, !1)), fiber\n      );\n    case 1:\n      return (fiber = describeNativeComponentFrame(fiber.type, !0)), fiber;\n    default:\n      return \"\";\n  }\n}\nfunction getStackByFiberInDevAndProd(workInProgress) {\n  try {\n    var info = \"\";\n    do\n      (info += describeFiber(workInProgress)),\n        (workInProgress = workInProgress.return);\n    while (workInProgress);\n    return info;\n  } catch (x) {\n    return \"\\nError generating stack: \" + x.message + \"\\n\" + x.stack;\n  }\n}\nfunction getNearestMountedFiber(fiber) {\n  var node = fiber,\n    nearestMounted = fiber;\n  if (fiber.alternate) for (; node.return; ) node = node.return;\n  else {\n    fiber = node;\n    do\n      (node = fiber),\n        0 !== (node.flags & 4098) && (nearestMounted = node.return),\n        (fiber = node.return);\n    while (fiber);\n  }\n  return 3 === node.tag ? nearestMounted : null;\n}\nfunction getSuspenseInstanceFromFiber(fiber) {\n  if (13 === fiber.tag) {\n    var suspenseState = fiber.memoizedState;\n    null === suspenseState &&\n      ((fiber = fiber.alternate),\n      null !== fiber && (suspenseState = fiber.memoizedState));\n    if (null !== suspenseState) return suspenseState.dehydrated;\n  }\n  return null;\n}\nfunction assertIsMounted(fiber) {\n  if (getNearestMountedFiber(fiber) !== fiber)\n    throw Error(formatProdErrorMessage(188));\n}\nfunction findCurrentFiberUsingSlowPath(fiber) {\n  var alternate = fiber.alternate;\n  if (!alternate) {\n    alternate = getNearestMountedFiber(fiber);\n    if (null === alternate) throw Error(formatProdErrorMessage(188));\n    return alternate !== fiber ? null : fiber;\n  }\n  for (var a = fiber, b = alternate; ; ) {\n    var parentA = a.return;\n    if (null === parentA) break;\n    var parentB = parentA.alternate;\n    if (null === parentB) {\n      b = parentA.return;\n      if (null !== b) {\n        a = b;\n        continue;\n      }\n      break;\n    }\n    if (parentA.child === parentB.child) {\n      for (parentB = parentA.child; parentB; ) {\n        if (parentB === a) return assertIsMounted(parentA), fiber;\n        if (parentB === b) return assertIsMounted(parentA), alternate;\n        parentB = parentB.sibling;\n      }\n      throw Error(formatProdErrorMessage(188));\n    }\n    if (a.return !== b.return) (a = parentA), (b = parentB);\n    else {\n      for (var didFindChild = !1, child$2 = parentA.child; child$2; ) {\n        if (child$2 === a) {\n          didFindChild = !0;\n          a = parentA;\n          b = parentB;\n          break;\n        }\n        if (child$2 === b) {\n          didFindChild = !0;\n          b = parentA;\n          a = parentB;\n          break;\n        }\n        child$2 = child$2.sibling;\n      }\n      if (!didFindChild) {\n        for (child$2 = parentB.child; child$2; ) {\n          if (child$2 === a) {\n            didFindChild = !0;\n            a = parentB;\n            b = parentA;\n            break;\n          }\n          if (child$2 === b) {\n            didFindChild = !0;\n            b = parentB;\n            a = parentA;\n            break;\n          }\n          child$2 = child$2.sibling;\n        }\n        if (!didFindChild) throw Error(formatProdErrorMessage(189));\n      }\n    }\n    if (a.alternate !== b) throw Error(formatProdErrorMessage(190));\n  }\n  if (3 !== a.tag) throw Error(formatProdErrorMessage(188));\n  return a.stateNode.current === a ? fiber : alternate;\n}\nfunction findCurrentHostFiberImpl(node) {\n  var tag = node.tag;\n  if (5 === tag || 26 === tag || 27 === tag || 6 === tag) return node;\n  for (node = node.child; null !== node; ) {\n    tag = findCurrentHostFiberImpl(node);\n    if (null !== tag) return tag;\n    node = node.sibling;\n  }\n  return null;\n}\nvar isArrayImpl = Array.isArray,\n  ReactDOMSharedInternals =\n    ReactDOM.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,\n  sharedNotPendingObject = {\n    pending: !1,\n    data: null,\n    method: null,\n    action: null\n  },\n  valueStack = [],\n  index = -1;\nfunction createCursor(defaultValue) {\n  return { current: defaultValue };\n}\nfunction pop(cursor) {\n  0 > index ||\n    ((cursor.current = valueStack[index]), (valueStack[index] = null), index--);\n}\nfunction push(cursor, value) {\n  index++;\n  valueStack[index] = cursor.current;\n  cursor.current = value;\n}\nvar contextStackCursor = createCursor(null),\n  contextFiberStackCursor = createCursor(null),\n  rootInstanceStackCursor = createCursor(null),\n  hostTransitionProviderCursor = createCursor(null);\nfunction pushHostContainer(fiber, nextRootInstance) {\n  push(rootInstanceStackCursor, nextRootInstance);\n  push(contextFiberStackCursor, fiber);\n  push(contextStackCursor, null);\n  fiber = nextRootInstance.nodeType;\n  switch (fiber) {\n    case 9:\n    case 11:\n      nextRootInstance = (nextRootInstance = nextRootInstance.documentElement)\n        ? (nextRootInstance = nextRootInstance.namespaceURI)\n          ? getOwnHostContext(nextRootInstance)\n          : 0\n        : 0;\n      break;\n    default:\n      if (\n        ((fiber = 8 === fiber ? nextRootInstance.parentNode : nextRootInstance),\n        (nextRootInstance = fiber.tagName),\n        (fiber = fiber.namespaceURI))\n      )\n        (fiber = getOwnHostContext(fiber)),\n          (nextRootInstance = getChildHostContextProd(fiber, nextRootInstance));\n      else\n        switch (nextRootInstance) {\n          case \"svg\":\n            nextRootInstance = 1;\n            break;\n          case \"math\":\n            nextRootInstance = 2;\n            break;\n          default:\n            nextRootInstance = 0;\n        }\n  }\n  pop(contextStackCursor);\n  push(contextStackCursor, nextRootInstance);\n}\nfunction popHostContainer() {\n  pop(contextStackCursor);\n  pop(contextFiberStackCursor);\n  pop(rootInstanceStackCursor);\n}\nfunction pushHostContext(fiber) {\n  null !== fiber.memoizedState && push(hostTransitionProviderCursor, fiber);\n  var context = contextStackCursor.current;\n  var JSCompiler_inline_result = getChildHostContextProd(context, fiber.type);\n  context !== JSCompiler_inline_result &&\n    (push(contextFiberStackCursor, fiber),\n    push(contextStackCursor, JSCompiler_inline_result));\n}\nfunction popHostContext(fiber) {\n  contextFiberStackCursor.current === fiber &&\n    (pop(contextStackCursor), pop(contextFiberStackCursor));\n  hostTransitionProviderCursor.current === fiber &&\n    (pop(hostTransitionProviderCursor),\n    (HostTransitionContext._currentValue = sharedNotPendingObject));\n}\nvar hasOwnProperty = Object.prototype.hasOwnProperty,\n  scheduleCallback$3 = Scheduler.unstable_scheduleCallback,\n  cancelCallback$1 = Scheduler.unstable_cancelCallback,\n  shouldYield = Scheduler.unstable_shouldYield,\n  requestPaint = Scheduler.unstable_requestPaint,\n  now = Scheduler.unstable_now,\n  getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel,\n  ImmediatePriority = Scheduler.unstable_ImmediatePriority,\n  UserBlockingPriority = Scheduler.unstable_UserBlockingPriority,\n  NormalPriority$1 = Scheduler.unstable_NormalPriority,\n  LowPriority = Scheduler.unstable_LowPriority,\n  IdlePriority = Scheduler.unstable_IdlePriority,\n  log$1 = Scheduler.log,\n  unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue,\n  rendererID = null,\n  injectedHook = null;\nfunction onCommitRoot(root) {\n  if (injectedHook && \"function\" === typeof injectedHook.onCommitFiberRoot)\n    try {\n      injectedHook.onCommitFiberRoot(\n        rendererID,\n        root,\n        void 0,\n        128 === (root.current.flags & 128)\n      );\n    } catch (err) {}\n}\nfunction setIsStrictModeForDevtools(newIsStrictMode) {\n  \"function\" === typeof log$1 && unstable_setDisableYieldValue(newIsStrictMode);\n  if (injectedHook && \"function\" === typeof injectedHook.setStrictMode)\n    try {\n      injectedHook.setStrictMode(rendererID, newIsStrictMode);\n    } catch (err) {}\n}\nvar clz32 = Math.clz32 ? Math.clz32 : clz32Fallback,\n  log = Math.log,\n  LN2 = Math.LN2;\nfunction clz32Fallback(x) {\n  x >>>= 0;\n  return 0 === x ? 32 : (31 - ((log(x) / LN2) | 0)) | 0;\n}\nvar nextTransitionLane = 128,\n  nextRetryLane = 4194304;\nfunction getHighestPriorityLanes(lanes) {\n  var pendingSyncLanes = lanes & 42;\n  if (0 !== pendingSyncLanes) return pendingSyncLanes;\n  switch (lanes & -lanes) {\n    case 1:\n      return 1;\n    case 2:\n      return 2;\n    case 4:\n      return 4;\n    case 8:\n      return 8;\n    case 16:\n      return 16;\n    case 32:\n      return 32;\n    case 64:\n      return 64;\n    case 128:\n    case 256:\n    case 512:\n    case 1024:\n    case 2048:\n    case 4096:\n    case 8192:\n    case 16384:\n    case 32768:\n    case 65536:\n    case 131072:\n    case 262144:\n    case 524288:\n    case 1048576:\n    case 2097152:\n      return lanes & 4194176;\n    case 4194304:\n    case 8388608:\n    case 16777216:\n    case 33554432:\n      return lanes & 62914560;\n    case 67108864:\n      return 67108864;\n    case 134217728:\n      return 134217728;\n    case 268435456:\n      return 268435456;\n    case 536870912:\n      return 536870912;\n    case 1073741824:\n      return 0;\n    default:\n      return lanes;\n  }\n}\nfunction getNextLanes(root, wipLanes) {\n  var pendingLanes = root.pendingLanes;\n  if (0 === pendingLanes) return 0;\n  var nextLanes = 0,\n    suspendedLanes = root.suspendedLanes,\n    pingedLanes = root.pingedLanes,\n    warmLanes = root.warmLanes;\n  root = 0 !== root.finishedLanes;\n  var nonIdlePendingLanes = pendingLanes & 134217727;\n  0 !== nonIdlePendingLanes\n    ? ((pendingLanes = nonIdlePendingLanes & ~suspendedLanes),\n      0 !== pendingLanes\n        ? (nextLanes = getHighestPriorityLanes(pendingLanes))\n        : ((pingedLanes &= nonIdlePendingLanes),\n          0 !== pingedLanes\n            ? (nextLanes = getHighestPriorityLanes(pingedLanes))\n            : root ||\n              ((warmLanes = nonIdlePendingLanes & ~warmLanes),\n              0 !== warmLanes &&\n                (nextLanes = getHighestPriorityLanes(warmLanes)))))\n    : ((nonIdlePendingLanes = pendingLanes & ~suspendedLanes),\n      0 !== nonIdlePendingLanes\n        ? (nextLanes = getHighestPriorityLanes(nonIdlePendingLanes))\n        : 0 !== pingedLanes\n          ? (nextLanes = getHighestPriorityLanes(pingedLanes))\n          : root ||\n            ((warmLanes = pendingLanes & ~warmLanes),\n            0 !== warmLanes &&\n              (nextLanes = getHighestPriorityLanes(warmLanes))));\n  return 0 === nextLanes\n    ? 0\n    : 0 !== wipLanes &&\n        wipLanes !== nextLanes &&\n        0 === (wipLanes & suspendedLanes) &&\n        ((suspendedLanes = nextLanes & -nextLanes),\n        (warmLanes = wipLanes & -wipLanes),\n        suspendedLanes >= warmLanes ||\n          (32 === suspendedLanes && 0 !== (warmLanes & 4194176)))\n      ? wipLanes\n      : nextLanes;\n}\nfunction checkIfRootIsPrerendering(root, renderLanes) {\n  return (\n    0 ===\n    (root.pendingLanes &\n      ~(root.suspendedLanes & ~root.pingedLanes) &\n      renderLanes)\n  );\n}\nfunction computeExpirationTime(lane, currentTime) {\n  switch (lane) {\n    case 1:\n    case 2:\n    case 4:\n    case 8:\n      return currentTime + 250;\n    case 16:\n    case 32:\n    case 64:\n    case 128:\n    case 256:\n    case 512:\n    case 1024:\n    case 2048:\n    case 4096:\n    case 8192:\n    case 16384:\n    case 32768:\n    case 65536:\n    case 131072:\n    case 262144:\n    case 524288:\n    case 1048576:\n    case 2097152:\n      return currentTime + 5e3;\n    case 4194304:\n    case 8388608:\n    case 16777216:\n    case 33554432:\n      return -1;\n    case 67108864:\n    case 134217728:\n    case 268435456:\n    case 536870912:\n    case 1073741824:\n      return -1;\n    default:\n      return -1;\n  }\n}\nfunction claimNextTransitionLane() {\n  var lane = nextTransitionLane;\n  nextTransitionLane <<= 1;\n  0 === (nextTransitionLane & 4194176) && (nextTransitionLane = 128);\n  return lane;\n}\nfunction claimNextRetryLane() {\n  var lane = nextRetryLane;\n  nextRetryLane <<= 1;\n  0 === (nextRetryLane & 62914560) && (nextRetryLane = 4194304);\n  return lane;\n}\nfunction createLaneMap(initial) {\n  for (var laneMap = [], i = 0; 31 > i; i++) laneMap.push(initial);\n  return laneMap;\n}\nfunction markRootUpdated$1(root, updateLane) {\n  root.pendingLanes |= updateLane;\n  268435456 !== updateLane &&\n    ((root.suspendedLanes = 0), (root.pingedLanes = 0), (root.warmLanes = 0));\n}\nfunction markRootFinished(\n  root,\n  finishedLanes,\n  remainingLanes,\n  spawnedLane,\n  updatedLanes,\n  suspendedRetryLanes\n) {\n  var previouslyPendingLanes = root.pendingLanes;\n  root.pendingLanes = remainingLanes;\n  root.suspendedLanes = 0;\n  root.pingedLanes = 0;\n  root.warmLanes = 0;\n  root.expiredLanes &= remainingLanes;\n  root.entangledLanes &= remainingLanes;\n  root.errorRecoveryDisabledLanes &= remainingLanes;\n  root.shellSuspendCounter = 0;\n  var entanglements = root.entanglements,\n    expirationTimes = root.expirationTimes,\n    hiddenUpdates = root.hiddenUpdates;\n  for (\n    remainingLanes = previouslyPendingLanes & ~remainingLanes;\n    0 < remainingLanes;\n\n  ) {\n    var index$7 = 31 - clz32(remainingLanes),\n      lane = 1 << index$7;\n    entanglements[index$7] = 0;\n    expirationTimes[index$7] = -1;\n    var hiddenUpdatesForLane = hiddenUpdates[index$7];\n    if (null !== hiddenUpdatesForLane)\n      for (\n        hiddenUpdates[index$7] = null, index$7 = 0;\n        index$7 < hiddenUpdatesForLane.length;\n        index$7++\n      ) {\n        var update = hiddenUpdatesForLane[index$7];\n        null !== update && (update.lane &= -536870913);\n      }\n    remainingLanes &= ~lane;\n  }\n  0 !== spawnedLane && markSpawnedDeferredLane(root, spawnedLane, 0);\n  0 !== suspendedRetryLanes &&\n    0 === updatedLanes &&\n    0 !== root.tag &&\n    (root.suspendedLanes |=\n      suspendedRetryLanes & ~(previouslyPendingLanes & ~finishedLanes));\n}\nfunction markSpawnedDeferredLane(root, spawnedLane, entangledLanes) {\n  root.pendingLanes |= spawnedLane;\n  root.suspendedLanes &= ~spawnedLane;\n  var spawnedLaneIndex = 31 - clz32(spawnedLane);\n  root.entangledLanes |= spawnedLane;\n  root.entanglements[spawnedLaneIndex] =\n    root.entanglements[spawnedLaneIndex] |\n    1073741824 |\n    (entangledLanes & 4194218);\n}\nfunction markRootEntangled(root, entangledLanes) {\n  var rootEntangledLanes = (root.entangledLanes |= entangledLanes);\n  for (root = root.entanglements; rootEntangledLanes; ) {\n    var index$8 = 31 - clz32(rootEntangledLanes),\n      lane = 1 << index$8;\n    (lane & entangledLanes) | (root[index$8] & entangledLanes) &&\n      (root[index$8] |= entangledLanes);\n    rootEntangledLanes &= ~lane;\n  }\n}\nfunction lanesToEventPriority(lanes) {\n  lanes &= -lanes;\n  return 2 < lanes\n    ? 8 < lanes\n      ? 0 !== (lanes & 134217727)\n        ? 32\n        : 268435456\n      : 8\n    : 2;\n}\nfunction resolveUpdatePriority() {\n  var updatePriority = ReactDOMSharedInternals.p;\n  if (0 !== updatePriority) return updatePriority;\n  updatePriority = window.event;\n  return void 0 === updatePriority ? 32 : getEventPriority(updatePriority.type);\n}\nfunction runWithPriority(priority, fn) {\n  var previousPriority = ReactDOMSharedInternals.p;\n  try {\n    return (ReactDOMSharedInternals.p = priority), fn();\n  } finally {\n    ReactDOMSharedInternals.p = previousPriority;\n  }\n}\nvar randomKey = Math.random().toString(36).slice(2),\n  internalInstanceKey = \"__reactFiber$\" + randomKey,\n  internalPropsKey = \"__reactProps$\" + randomKey,\n  internalContainerInstanceKey = \"__reactContainer$\" + randomKey,\n  internalEventHandlersKey = \"__reactEvents$\" + randomKey,\n  internalEventHandlerListenersKey = \"__reactListeners$\" + randomKey,\n  internalEventHandlesSetKey = \"__reactHandles$\" + randomKey,\n  internalRootNodeResourcesKey = \"__reactResources$\" + randomKey,\n  internalHoistableMarker = \"__reactMarker$\" + randomKey;\nfunction detachDeletedInstance(node) {\n  delete node[internalInstanceKey];\n  delete node[internalPropsKey];\n  delete node[internalEventHandlersKey];\n  delete node[internalEventHandlerListenersKey];\n  delete node[internalEventHandlesSetKey];\n}\nfunction getClosestInstanceFromNode(targetNode) {\n  var targetInst = targetNode[internalInstanceKey];\n  if (targetInst) return targetInst;\n  for (var parentNode = targetNode.parentNode; parentNode; ) {\n    if (\n      (targetInst =\n        parentNode[internalContainerInstanceKey] ||\n        parentNode[internalInstanceKey])\n    ) {\n      parentNode = targetInst.alternate;\n      if (\n        null !== targetInst.child ||\n        (null !== parentNode && null !== parentNode.child)\n      )\n        for (\n          targetNode = getParentSuspenseInstance(targetNode);\n          null !== targetNode;\n\n        ) {\n          if ((parentNode = targetNode[internalInstanceKey])) return parentNode;\n          targetNode = getParentSuspenseInstance(targetNode);\n        }\n      return targetInst;\n    }\n    targetNode = parentNode;\n    parentNode = targetNode.parentNode;\n  }\n  return null;\n}\nfunction getInstanceFromNode(node) {\n  if (\n    (node = node[internalInstanceKey] || node[internalContainerInstanceKey])\n  ) {\n    var tag = node.tag;\n    if (\n      5 === tag ||\n      6 === tag ||\n      13 === tag ||\n      26 === tag ||\n      27 === tag ||\n      3 === tag\n    )\n      return node;\n  }\n  return null;\n}\nfunction getNodeFromInstance(inst) {\n  var tag = inst.tag;\n  if (5 === tag || 26 === tag || 27 === tag || 6 === tag) return inst.stateNode;\n  throw Error(formatProdErrorMessage(33));\n}\nfunction getResourcesFromRoot(root) {\n  var resources = root[internalRootNodeResourcesKey];\n  resources ||\n    (resources = root[internalRootNodeResourcesKey] =\n      { hoistableStyles: new Map(), hoistableScripts: new Map() });\n  return resources;\n}\nfunction markNodeAsHoistable(node) {\n  node[internalHoistableMarker] = !0;\n}\nvar allNativeEvents = new Set(),\n  registrationNameDependencies = {};\nfunction registerTwoPhaseEvent(registrationName, dependencies) {\n  registerDirectEvent(registrationName, dependencies);\n  registerDirectEvent(registrationName + \"Capture\", dependencies);\n}\nfunction registerDirectEvent(registrationName, dependencies) {\n  registrationNameDependencies[registrationName] = dependencies;\n  for (\n    registrationName = 0;\n    registrationName < dependencies.length;\n    registrationName++\n  )\n    allNativeEvents.add(dependencies[registrationName]);\n}\nvar canUseDOM = !(\n    \"undefined\" === typeof window ||\n    \"undefined\" === typeof window.document ||\n    \"undefined\" === typeof window.document.createElement\n  ),\n  VALID_ATTRIBUTE_NAME_REGEX = RegExp(\n    \"^[:A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD][:A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD\\\\-.0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040]*$\"\n  ),\n  illegalAttributeNameCache = {},\n  validatedAttributeNameCache = {};\nfunction isAttributeNameSafe(attributeName) {\n  if (hasOwnProperty.call(validatedAttributeNameCache, attributeName))\n    return !0;\n  if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) return !1;\n  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName))\n    return (validatedAttributeNameCache[attributeName] = !0);\n  illegalAttributeNameCache[attributeName] = !0;\n  return !1;\n}\nfunction setValueForAttribute(node, name, value) {\n  if (isAttributeNameSafe(name))\n    if (null === value) node.removeAttribute(name);\n    else {\n      switch (typeof value) {\n        case \"undefined\":\n        case \"function\":\n        case \"symbol\":\n          node.removeAttribute(name);\n          return;\n        case \"boolean\":\n          var prefix$10 = name.toLowerCase().slice(0, 5);\n          if (\"data-\" !== prefix$10 && \"aria-\" !== prefix$10) {\n            node.removeAttribute(name);\n            return;\n          }\n      }\n      node.setAttribute(name, \"\" + value);\n    }\n}\nfunction setValueForKnownAttribute(node, name, value) {\n  if (null === value) node.removeAttribute(name);\n  else {\n    switch (typeof value) {\n      case \"undefined\":\n      case \"function\":\n      case \"symbol\":\n      case \"boolean\":\n        node.removeAttribute(name);\n        return;\n    }\n    node.setAttribute(name, \"\" + value);\n  }\n}\nfunction setValueForNamespacedAttribute(node, namespace, name, value) {\n  if (null === value) node.removeAttribute(name);\n  else {\n    switch (typeof value) {\n      case \"undefined\":\n      case \"function\":\n      case \"symbol\":\n      case \"boolean\":\n        node.removeAttribute(name);\n        return;\n    }\n    node.setAttributeNS(namespace, name, \"\" + value);\n  }\n}\nfunction getToStringValue(value) {\n  switch (typeof value) {\n    case \"bigint\":\n    case \"boolean\":\n    case \"number\":\n    case \"string\":\n    case \"undefined\":\n      return value;\n    case \"object\":\n      return value;\n    default:\n      return \"\";\n  }\n}\nfunction isCheckable(elem) {\n  var type = elem.type;\n  return (\n    (elem = elem.nodeName) &&\n    \"input\" === elem.toLowerCase() &&\n    (\"checkbox\" === type || \"radio\" === type)\n  );\n}\nfunction trackValueOnNode(node) {\n  var valueField = isCheckable(node) ? \"checked\" : \"value\",\n    descriptor = Object.getOwnPropertyDescriptor(\n      node.constructor.prototype,\n      valueField\n    ),\n    currentValue = \"\" + node[valueField];\n  if (\n    !node.hasOwnProperty(valueField) &&\n    \"undefined\" !== typeof descriptor &&\n    \"function\" === typeof descriptor.get &&\n    \"function\" === typeof descriptor.set\n  ) {\n    var get = descriptor.get,\n      set = descriptor.set;\n    Object.defineProperty(node, valueField, {\n      configurable: !0,\n      get: function () {\n        return get.call(this);\n      },\n      set: function (value) {\n        currentValue = \"\" + value;\n        set.call(this, value);\n      }\n    });\n    Object.defineProperty(node, valueField, {\n      enumerable: descriptor.enumerable\n    });\n    return {\n      getValue: function () {\n        return currentValue;\n      },\n      setValue: function (value) {\n        currentValue = \"\" + value;\n      },\n      stopTracking: function () {\n        node._valueTracker = null;\n        delete node[valueField];\n      }\n    };\n  }\n}\nfunction track(node) {\n  node._valueTracker || (node._valueTracker = trackValueOnNode(node));\n}\nfunction updateValueIfChanged(node) {\n  if (!node) return !1;\n  var tracker = node._valueTracker;\n  if (!tracker) return !0;\n  var lastValue = tracker.getValue();\n  var value = \"\";\n  node &&\n    (value = isCheckable(node)\n      ? node.checked\n        ? \"true\"\n        : \"false\"\n      : node.value);\n  node = value;\n  return node !== lastValue ? (tracker.setValue(node), !0) : !1;\n}\nfunction getActiveElement(doc) {\n  doc = doc || (\"undefined\" !== typeof document ? document : void 0);\n  if (\"undefined\" === typeof doc) return null;\n  try {\n    return doc.activeElement || doc.body;\n  } catch (e) {\n    return doc.body;\n  }\n}\nvar escapeSelectorAttributeValueInsideDoubleQuotesRegex = /[\\n\"\\\\]/g;\nfunction escapeSelectorAttributeValueInsideDoubleQuotes(value) {\n  return value.replace(\n    escapeSelectorAttributeValueInsideDoubleQuotesRegex,\n    function (ch) {\n      return \"\\\\\" + ch.charCodeAt(0).toString(16) + \" \";\n    }\n  );\n}\nfunction updateInput(\n  element,\n  value,\n  defaultValue,\n  lastDefaultValue,\n  checked,\n  defaultChecked,\n  type,\n  name\n) {\n  element.name = \"\";\n  null != type &&\n  \"function\" !== typeof type &&\n  \"symbol\" !== typeof type &&\n  \"boolean\" !== typeof type\n    ? (element.type = type)\n    : element.removeAttribute(\"type\");\n  if (null != value)\n    if (\"number\" === type) {\n      if ((0 === value && \"\" === element.value) || element.value != value)\n        element.value = \"\" + getToStringValue(value);\n    } else\n      element.value !== \"\" + getToStringValue(value) &&\n        (element.value = \"\" + getToStringValue(value));\n  else\n    (\"submit\" !== type && \"reset\" !== type) || element.removeAttribute(\"value\");\n  null != value\n    ? setDefaultValue(element, type, getToStringValue(value))\n    : null != defaultValue\n      ? setDefaultValue(element, type, getToStringValue(defaultValue))\n      : null != lastDefaultValue && element.removeAttribute(\"value\");\n  null == checked &&\n    null != defaultChecked &&\n    (element.defaultChecked = !!defaultChecked);\n  null != checked &&\n    (element.checked =\n      checked && \"function\" !== typeof checked && \"symbol\" !== typeof checked);\n  null != name &&\n  \"function\" !== typeof name &&\n  \"symbol\" !== typeof name &&\n  \"boolean\" !== typeof name\n    ? (element.name = \"\" + getToStringValue(name))\n    : element.removeAttribute(\"name\");\n}\nfunction initInput(\n  element,\n  value,\n  defaultValue,\n  checked,\n  defaultChecked,\n  type,\n  name,\n  isHydrating\n) {\n  null != type &&\n    \"function\" !== typeof type &&\n    \"symbol\" !== typeof type &&\n    \"boolean\" !== typeof type &&\n    (element.type = type);\n  if (null != value || null != defaultValue) {\n    if (\n      !(\n        (\"submit\" !== type && \"reset\" !== type) ||\n        (void 0 !== value && null !== value)\n      )\n    )\n      return;\n    defaultValue =\n      null != defaultValue ? \"\" + getToStringValue(defaultValue) : \"\";\n    value = null != value ? \"\" + getToStringValue(value) : defaultValue;\n    isHydrating || value === element.value || (element.value = value);\n    element.defaultValue = value;\n  }\n  checked = null != checked ? checked : defaultChecked;\n  checked =\n    \"function\" !== typeof checked && \"symbol\" !== typeof checked && !!checked;\n  element.checked = isHydrating ? element.checked : !!checked;\n  element.defaultChecked = !!checked;\n  null != name &&\n    \"function\" !== typeof name &&\n    \"symbol\" !== typeof name &&\n    \"boolean\" !== typeof name &&\n    (element.name = name);\n}\nfunction setDefaultValue(node, type, value) {\n  (\"number\" === type && getActiveElement(node.ownerDocument) === node) ||\n    node.defaultValue === \"\" + value ||\n    (node.defaultValue = \"\" + value);\n}\nfunction updateOptions(node, multiple, propValue, setDefaultSelected) {\n  node = node.options;\n  if (multiple) {\n    multiple = {};\n    for (var i = 0; i < propValue.length; i++)\n      multiple[\"$\" + propValue[i]] = !0;\n    for (propValue = 0; propValue < node.length; propValue++)\n      (i = multiple.hasOwnProperty(\"$\" + node[propValue].value)),\n        node[propValue].selected !== i && (node[propValue].selected = i),\n        i && setDefaultSelected && (node[propValue].defaultSelected = !0);\n  } else {\n    propValue = \"\" + getToStringValue(propValue);\n    multiple = null;\n    for (i = 0; i < node.length; i++) {\n      if (node[i].value === propValue) {\n        node[i].selected = !0;\n        setDefaultSelected && (node[i].defaultSelected = !0);\n        return;\n      }\n      null !== multiple || node[i].disabled || (multiple = node[i]);\n    }\n    null !== multiple && (multiple.selected = !0);\n  }\n}\nfunction updateTextarea(element, value, defaultValue) {\n  if (\n    null != value &&\n    ((value = \"\" + getToStringValue(value)),\n    value !== element.value && (element.value = value),\n    null == defaultValue)\n  ) {\n    element.defaultValue !== value && (element.defaultValue = value);\n    return;\n  }\n  element.defaultValue =\n    null != defaultValue ? \"\" + getToStringValue(defaultValue) : \"\";\n}\nfunction initTextarea(element, value, defaultValue, children) {\n  if (null == value) {\n    if (null != children) {\n      if (null != defaultValue) throw Error(formatProdErrorMessage(92));\n      if (isArrayImpl(children)) {\n        if (1 < children.length) throw Error(formatProdErrorMessage(93));\n        children = children[0];\n      }\n      defaultValue = children;\n    }\n    null == defaultValue && (defaultValue = \"\");\n    value = defaultValue;\n  }\n  defaultValue = getToStringValue(value);\n  element.defaultValue = defaultValue;\n  children = element.textContent;\n  children === defaultValue &&\n    \"\" !== children &&\n    null !== children &&\n    (element.value = children);\n}\nfunction setTextContent(node, text) {\n  if (text) {\n    var firstChild = node.firstChild;\n    if (\n      firstChild &&\n      firstChild === node.lastChild &&\n      3 === firstChild.nodeType\n    ) {\n      firstChild.nodeValue = text;\n      return;\n    }\n  }\n  node.textContent = text;\n}\nvar unitlessNumbers = new Set(\n  \"animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp\".split(\n    \" \"\n  )\n);\nfunction setValueForStyle(style, styleName, value) {\n  var isCustomProperty = 0 === styleName.indexOf(\"--\");\n  null == value || \"boolean\" === typeof value || \"\" === value\n    ? isCustomProperty\n      ? style.setProperty(styleName, \"\")\n      : \"float\" === styleName\n        ? (style.cssFloat = \"\")\n        : (style[styleName] = \"\")\n    : isCustomProperty\n      ? style.setProperty(styleName, value)\n      : \"number\" !== typeof value ||\n          0 === value ||\n          unitlessNumbers.has(styleName)\n        ? \"float\" === styleName\n          ? (style.cssFloat = value)\n          : (style[styleName] = (\"\" + value).trim())\n        : (style[styleName] = value + \"px\");\n}\nfunction setValueForStyles(node, styles, prevStyles) {\n  if (null != styles && \"object\" !== typeof styles)\n    throw Error(formatProdErrorMessage(62));\n  node = node.style;\n  if (null != prevStyles) {\n    for (var styleName in prevStyles)\n      !prevStyles.hasOwnProperty(styleName) ||\n        (null != styles && styles.hasOwnProperty(styleName)) ||\n        (0 === styleName.indexOf(\"--\")\n          ? node.setProperty(styleName, \"\")\n          : \"float\" === styleName\n            ? (node.cssFloat = \"\")\n            : (node[styleName] = \"\"));\n    for (var styleName$16 in styles)\n      (styleName = styles[styleName$16]),\n        styles.hasOwnProperty(styleName$16) &&\n          prevStyles[styleName$16] !== styleName &&\n          setValueForStyle(node, styleName$16, styleName);\n  } else\n    for (var styleName$17 in styles)\n      styles.hasOwnProperty(styleName$17) &&\n        setValueForStyle(node, styleName$17, styles[styleName$17]);\n}\nfunction isCustomElement(tagName) {\n  if (-1 === tagName.indexOf(\"-\")) return !1;\n  switch (tagName) {\n    case \"annotation-xml\":\n    case \"color-profile\":\n    case \"font-face\":\n    case \"font-face-src\":\n    case \"font-face-uri\":\n    case \"font-face-format\":\n    case \"font-face-name\":\n    case \"missing-glyph\":\n      return !1;\n    default:\n      return !0;\n  }\n}\nvar aliases = new Map([\n    [\"acceptCharset\", \"accept-charset\"],\n    [\"htmlFor\", \"for\"],\n    [\"httpEquiv\", \"http-equiv\"],\n    [\"crossOrigin\", \"crossorigin\"],\n    [\"accentHeight\", \"accent-height\"],\n    [\"alignmentBaseline\", \"alignment-baseline\"],\n    [\"arabicForm\", \"arabic-form\"],\n    [\"baselineShift\", \"baseline-shift\"],\n    [\"capHeight\", \"cap-height\"],\n    [\"clipPath\", \"clip-path\"],\n    [\"clipRule\", \"clip-rule\"],\n    [\"colorInterpolation\", \"color-interpolation\"],\n    [\"colorInterpolationFilters\", \"color-interpolation-filters\"],\n    [\"colorProfile\", \"color-profile\"],\n    [\"colorRendering\", \"color-rendering\"],\n    [\"dominantBaseline\", \"dominant-baseline\"],\n    [\"enableBackground\", \"enable-background\"],\n    [\"fillOpacity\", \"fill-opacity\"],\n    [\"fillRule\", \"fill-rule\"],\n    [\"floodColor\", \"flood-color\"],\n    [\"floodOpacity\", \"flood-opacity\"],\n    [\"fontFamily\", \"font-family\"],\n    [\"fontSize\", \"font-size\"],\n    [\"fontSizeAdjust\", \"font-size-adjust\"],\n    [\"fontStretch\", \"font-stretch\"],\n    [\"fontStyle\", \"font-style\"],\n    [\"fontVariant\", \"font-variant\"],\n    [\"fontWeight\", \"font-weight\"],\n    [\"glyphName\", \"glyph-name\"],\n    [\"glyphOrientationHorizontal\", \"glyph-orientation-horizontal\"],\n    [\"glyphOrientationVertical\", \"glyph-orientation-vertical\"],\n    [\"horizAdvX\", \"horiz-adv-x\"],\n    [\"horizOriginX\", \"horiz-origin-x\"],\n    [\"imageRendering\", \"image-rendering\"],\n    [\"letterSpacing\", \"letter-spacing\"],\n    [\"lightingColor\", \"lighting-color\"],\n    [\"markerEnd\", \"marker-end\"],\n    [\"markerMid\", \"marker-mid\"],\n    [\"markerStart\", \"marker-start\"],\n    [\"overlinePosition\", \"overline-position\"],\n    [\"overlineThickness\", \"overline-thickness\"],\n    [\"paintOrder\", \"paint-order\"],\n    [\"panose-1\", \"panose-1\"],\n    [\"pointerEvents\", \"pointer-events\"],\n    [\"renderingIntent\", \"rendering-intent\"],\n    [\"shapeRendering\", \"shape-rendering\"],\n    [\"stopColor\", \"stop-color\"],\n    [\"stopOpacity\", \"stop-opacity\"],\n    [\"strikethroughPosition\", \"strikethrough-position\"],\n    [\"strikethroughThickness\", \"strikethrough-thickness\"],\n    [\"strokeDasharray\", \"stroke-dasharray\"],\n    [\"strokeDashoffset\", \"stroke-dashoffset\"],\n    [\"strokeLinecap\", \"stroke-linecap\"],\n    [\"strokeLinejoin\", \"stroke-linejoin\"],\n    [\"strokeMiterlimit\", \"stroke-miterlimit\"],\n    [\"strokeOpacity\", \"stroke-opacity\"],\n    [\"strokeWidth\", \"stroke-width\"],\n    [\"textAnchor\", \"text-anchor\"],\n    [\"textDecoration\", \"text-decoration\"],\n    [\"textRendering\", \"text-rendering\"],\n    [\"transformOrigin\", \"transform-origin\"],\n    [\"underlinePosition\", \"underline-position\"],\n    [\"underlineThickness\", \"underline-thickness\"],\n    [\"unicodeBidi\", \"unicode-bidi\"],\n    [\"unicodeRange\", \"unicode-range\"],\n    [\"unitsPerEm\", \"units-per-em\"],\n    [\"vAlphabetic\", \"v-alphabetic\"],\n    [\"vHanging\", \"v-hanging\"],\n    [\"vIdeographic\", \"v-ideographic\"],\n    [\"vMathematical\", \"v-mathematical\"],\n    [\"vectorEffect\", \"vector-effect\"],\n    [\"vertAdvY\", \"vert-adv-y\"],\n    [\"vertOriginX\", \"vert-origin-x\"],\n    [\"vertOriginY\", \"vert-origin-y\"],\n    [\"wordSpacing\", \"word-spacing\"],\n    [\"writingMode\", \"writing-mode\"],\n    [\"xmlnsXlink\", \"xmlns:xlink\"],\n    [\"xHeight\", \"x-height\"]\n  ]),\n  isJavaScriptProtocol =\n    /^[\\u0000-\\u001F ]*j[\\r\\n\\t]*a[\\r\\n\\t]*v[\\r\\n\\t]*a[\\r\\n\\t]*s[\\r\\n\\t]*c[\\r\\n\\t]*r[\\r\\n\\t]*i[\\r\\n\\t]*p[\\r\\n\\t]*t[\\r\\n\\t]*:/i;\nfunction sanitizeURL(url) {\n  return isJavaScriptProtocol.test(\"\" + url)\n    ? \"javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')\"\n    : url;\n}\nvar currentReplayingEvent = null;\nfunction getEventTarget(nativeEvent) {\n  nativeEvent = nativeEvent.target || nativeEvent.srcElement || window;\n  nativeEvent.correspondingUseElement &&\n    (nativeEvent = nativeEvent.correspondingUseElement);\n  return 3 === nativeEvent.nodeType ? nativeEvent.parentNode : nativeEvent;\n}\nvar restoreTarget = null,\n  restoreQueue = null;\nfunction restoreStateOfTarget(target) {\n  var internalInstance = getInstanceFromNode(target);\n  if (internalInstance && (target = internalInstance.stateNode)) {\n    var props = target[internalPropsKey] || null;\n    a: switch (((target = internalInstance.stateNode), internalInstance.type)) {\n      case \"input\":\n        updateInput(\n          target,\n          props.value,\n          props.defaultValue,\n          props.defaultValue,\n          props.checked,\n          props.defaultChecked,\n          props.type,\n          props.name\n        );\n        internalInstance = props.name;\n        if (\"radio\" === props.type && null != internalInstance) {\n          for (props = target; props.parentNode; ) props = props.parentNode;\n          props = props.querySelectorAll(\n            'input[name=\"' +\n              escapeSelectorAttributeValueInsideDoubleQuotes(\n                \"\" + internalInstance\n              ) +\n              '\"][type=\"radio\"]'\n          );\n          for (\n            internalInstance = 0;\n            internalInstance < props.length;\n            internalInstance++\n          ) {\n            var otherNode = props[internalInstance];\n            if (otherNode !== target && otherNode.form === target.form) {\n              var otherProps = otherNode[internalPropsKey] || null;\n              if (!otherProps) throw Error(formatProdErrorMessage(90));\n              updateInput(\n                otherNode,\n                otherProps.value,\n                otherProps.defaultValue,\n                otherProps.defaultValue,\n                otherProps.checked,\n                otherProps.defaultChecked,\n                otherProps.type,\n                otherProps.name\n              );\n            }\n          }\n          for (\n            internalInstance = 0;\n            internalInstance < props.length;\n            internalInstance++\n          )\n            (otherNode = props[internalInstance]),\n              otherNode.form === target.form && updateValueIfChanged(otherNode);\n        }\n        break a;\n      case \"textarea\":\n        updateTextarea(target, props.value, props.defaultValue);\n        break a;\n      case \"select\":\n        (internalInstance = props.value),\n          null != internalInstance &&\n            updateOptions(target, !!props.multiple, internalInstance, !1);\n    }\n  }\n}\nvar isInsideEventHandler = !1;\nfunction batchedUpdates$1(fn, a, b) {\n  if (isInsideEventHandler) return fn(a, b);\n  isInsideEventHandler = !0;\n  try {\n    var JSCompiler_inline_result = fn(a);\n    return JSCompiler_inline_result;\n  } finally {\n    if (\n      ((isInsideEventHandler = !1),\n      null !== restoreTarget || null !== restoreQueue)\n    )\n      if (\n        (flushSyncWork$1(),\n        restoreTarget &&\n          ((a = restoreTarget),\n          (fn = restoreQueue),\n          (restoreQueue = restoreTarget = null),\n          restoreStateOfTarget(a),\n          fn))\n      )\n        for (a = 0; a < fn.length; a++) restoreStateOfTarget(fn[a]);\n  }\n}\nfunction getListener(inst, registrationName) {\n  var stateNode = inst.stateNode;\n  if (null === stateNode) return null;\n  var props = stateNode[internalPropsKey] || null;\n  if (null === props) return null;\n  stateNode = props[registrationName];\n  a: switch (registrationName) {\n    case \"onClick\":\n    case \"onClickCapture\":\n    case \"onDoubleClick\":\n    case \"onDoubleClickCapture\":\n    case \"onMouseDown\":\n    case \"onMouseDownCapture\":\n    case \"onMouseMove\":\n    case \"onMouseMoveCapture\":\n    case \"onMouseUp\":\n    case \"onMouseUpCapture\":\n    case \"onMouseEnter\":\n      (props = !props.disabled) ||\n        ((inst = inst.type),\n        (props = !(\n          \"button\" === inst ||\n          \"input\" === inst ||\n          \"select\" === inst ||\n          \"textarea\" === inst\n        )));\n      inst = !props;\n      break a;\n    default:\n      inst = !1;\n  }\n  if (inst) return null;\n  if (stateNode && \"function\" !== typeof stateNode)\n    throw Error(\n      formatProdErrorMessage(231, registrationName, typeof stateNode)\n    );\n  return stateNode;\n}\nvar passiveBrowserEventsSupported = !1;\nif (canUseDOM)\n  try {\n    var options = {};\n    Object.defineProperty(options, \"passive\", {\n      get: function () {\n        passiveBrowserEventsSupported = !0;\n      }\n    });\n    window.addEventListener(\"test\", options, options);\n    window.removeEventListener(\"test\", options, options);\n  } catch (e) {\n    passiveBrowserEventsSupported = !1;\n  }\nvar root = null,\n  startText = null,\n  fallbackText = null;\nfunction getData() {\n  if (fallbackText) return fallbackText;\n  var start,\n    startValue = startText,\n    startLength = startValue.length,\n    end,\n    endValue = \"value\" in root ? root.value : root.textContent,\n    endLength = endValue.length;\n  for (\n    start = 0;\n    start < startLength && startValue[start] === endValue[start];\n    start++\n  );\n  var minEnd = startLength - start;\n  for (\n    end = 1;\n    end <= minEnd &&\n    startValue[startLength - end] === endValue[endLength - end];\n    end++\n  );\n  return (fallbackText = endValue.slice(start, 1 < end ? 1 - end : void 0));\n}\nfunction getEventCharCode(nativeEvent) {\n  var keyCode = nativeEvent.keyCode;\n  \"charCode\" in nativeEvent\n    ? ((nativeEvent = nativeEvent.charCode),\n      0 === nativeEvent && 13 === keyCode && (nativeEvent = 13))\n    : (nativeEvent = keyCode);\n  10 === nativeEvent && (nativeEvent = 13);\n  return 32 <= nativeEvent || 13 === nativeEvent ? nativeEvent : 0;\n}\nfunction functionThatReturnsTrue() {\n  return !0;\n}\nfunction functionThatReturnsFalse() {\n  return !1;\n}\nfunction createSyntheticEvent(Interface) {\n  function SyntheticBaseEvent(\n    reactName,\n    reactEventType,\n    targetInst,\n    nativeEvent,\n    nativeEventTarget\n  ) {\n    this._reactName = reactName;\n    this._targetInst = targetInst;\n    this.type = reactEventType;\n    this.nativeEvent = nativeEvent;\n    this.target = nativeEventTarget;\n    this.currentTarget = null;\n    for (var propName in Interface)\n      Interface.hasOwnProperty(propName) &&\n        ((reactName = Interface[propName]),\n        (this[propName] = reactName\n          ? reactName(nativeEvent)\n          : nativeEvent[propName]));\n    this.isDefaultPrevented = (\n      null != nativeEvent.defaultPrevented\n        ? nativeEvent.defaultPrevented\n        : !1 === nativeEvent.returnValue\n    )\n      ? functionThatReturnsTrue\n      : functionThatReturnsFalse;\n    this.isPropagationStopped = functionThatReturnsFalse;\n    return this;\n  }\n  assign(SyntheticBaseEvent.prototype, {\n    preventDefault: function () {\n      this.defaultPrevented = !0;\n      var event = this.nativeEvent;\n      event &&\n        (event.preventDefault\n          ? event.preventDefault()\n          : \"unknown\" !== typeof event.returnValue && (event.returnValue = !1),\n        (this.isDefaultPrevented = functionThatReturnsTrue));\n    },\n    stopPropagation: function () {\n      var event = this.nativeEvent;\n      event &&\n        (event.stopPropagation\n          ? event.stopPropagation()\n          : \"unknown\" !== typeof event.cancelBubble &&\n            (event.cancelBubble = !0),\n        (this.isPropagationStopped = functionThatReturnsTrue));\n    },\n    persist: function () {},\n    isPersistent: functionThatReturnsTrue\n  });\n  return SyntheticBaseEvent;\n}\nvar EventInterface = {\n    eventPhase: 0,\n    bubbles: 0,\n    cancelable: 0,\n    timeStamp: function (event) {\n      return event.timeStamp || Date.now();\n    },\n    defaultPrevented: 0,\n    isTrusted: 0\n  },\n  SyntheticEvent = createSyntheticEvent(EventInterface),\n  UIEventInterface = assign({}, EventInterface, { view: 0, detail: 0 }),\n  SyntheticUIEvent = createSyntheticEvent(UIEventInterface),\n  lastMovementX,\n  lastMovementY,\n  lastMouseEvent,\n  MouseEventInterface = assign({}, UIEventInterface, {\n    screenX: 0,\n    screenY: 0,\n    clientX: 0,\n    clientY: 0,\n    pageX: 0,\n    pageY: 0,\n    ctrlKey: 0,\n    shiftKey: 0,\n    altKey: 0,\n    metaKey: 0,\n    getModifierState: getEventModifierState,\n    button: 0,\n    buttons: 0,\n    relatedTarget: function (event) {\n      return void 0 === event.relatedTarget\n        ? event.fromElement === event.srcElement\n          ? event.toElement\n          : event.fromElement\n        : event.relatedTarget;\n    },\n    movementX: function (event) {\n      if (\"movementX\" in event) return event.movementX;\n      event !== lastMouseEvent &&\n        (lastMouseEvent && \"mousemove\" === event.type\n          ? ((lastMovementX = event.screenX - lastMouseEvent.screenX),\n            (lastMovementY = event.screenY - lastMouseEvent.screenY))\n          : (lastMovementY = lastMovementX = 0),\n        (lastMouseEvent = event));\n      return lastMovementX;\n    },\n    movementY: function (event) {\n      return \"movementY\" in event ? event.movementY : lastMovementY;\n    }\n  }),\n  SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface),\n  DragEventInterface = assign({}, MouseEventInterface, { dataTransfer: 0 }),\n  SyntheticDragEvent = createSyntheticEvent(DragEventInterface),\n  FocusEventInterface = assign({}, UIEventInterface, { relatedTarget: 0 }),\n  SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface),\n  AnimationEventInterface = assign({}, EventInterface, {\n    animationName: 0,\n    elapsedTime: 0,\n    pseudoElement: 0\n  }),\n  SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface),\n  ClipboardEventInterface = assign({}, EventInterface, {\n    clipboardData: function (event) {\n      return \"clipboardData\" in event\n        ? event.clipboardData\n        : window.clipboardData;\n    }\n  }),\n  SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface),\n  CompositionEventInterface = assign({}, EventInterface, { data: 0 }),\n  SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface),\n  normalizeKey = {\n    Esc: \"Escape\",\n    Spacebar: \" \",\n    Left: \"ArrowLeft\",\n    Up: \"ArrowUp\",\n    Right: \"ArrowRight\",\n    Down: \"ArrowDown\",\n    Del: \"Delete\",\n    Win: \"OS\",\n    Menu: \"ContextMenu\",\n    Apps: \"ContextMenu\",\n    Scroll: \"ScrollLock\",\n    MozPrintableKey: \"Unidentified\"\n  },\n  translateToKey = {\n    8: \"Backspace\",\n    9: \"Tab\",\n    12: \"Clear\",\n    13: \"Enter\",\n    16: \"Shift\",\n    17: \"Control\",\n    18: \"Alt\",\n    19: \"Pause\",\n    20: \"CapsLock\",\n    27: \"Escape\",\n    32: \" \",\n    33: \"PageUp\",\n    34: \"PageDown\",\n    35: \"End\",\n    36: \"Home\",\n    37: \"ArrowLeft\",\n    38: \"ArrowUp\",\n    39: \"ArrowRight\",\n    40: \"ArrowDown\",\n    45: \"Insert\",\n    46: \"Delete\",\n    112: \"F1\",\n    113: \"F2\",\n    114: \"F3\",\n    115: \"F4\",\n    116: \"F5\",\n    117: \"F6\",\n    118: \"F7\",\n    119: \"F8\",\n    120: \"F9\",\n    121: \"F10\",\n    122: \"F11\",\n    123: \"F12\",\n    144: \"NumLock\",\n    145: \"ScrollLock\",\n    224: \"Meta\"\n  },\n  modifierKeyToProp = {\n    Alt: \"altKey\",\n    Control: \"ctrlKey\",\n    Meta: \"metaKey\",\n    Shift: \"shiftKey\"\n  };\nfunction modifierStateGetter(keyArg) {\n  var nativeEvent = this.nativeEvent;\n  return nativeEvent.getModifierState\n    ? nativeEvent.getModifierState(keyArg)\n    : (keyArg = modifierKeyToProp[keyArg])\n      ? !!nativeEvent[keyArg]\n      : !1;\n}\nfunction getEventModifierState() {\n  return modifierStateGetter;\n}\nvar KeyboardEventInterface = assign({}, UIEventInterface, {\n    key: function (nativeEvent) {\n      if (nativeEvent.key) {\n        var key = normalizeKey[nativeEvent.key] || nativeEvent.key;\n        if (\"Unidentified\" !== key) return key;\n      }\n      return \"keypress\" === nativeEvent.type\n        ? ((nativeEvent = getEventCharCode(nativeEvent)),\n          13 === nativeEvent ? \"Enter\" : String.fromCharCode(nativeEvent))\n        : \"keydown\" === nativeEvent.type || \"keyup\" === nativeEvent.type\n          ? translateToKey[nativeEvent.keyCode] || \"Unidentified\"\n          : \"\";\n    },\n    code: 0,\n    location: 0,\n    ctrlKey: 0,\n    shiftKey: 0,\n    altKey: 0,\n    metaKey: 0,\n    repeat: 0,\n    locale: 0,\n    getModifierState: getEventModifierState,\n    charCode: function (event) {\n      return \"keypress\" === event.type ? getEventCharCode(event) : 0;\n    },\n    keyCode: function (event) {\n      return \"keydown\" === event.type || \"keyup\" === event.type\n        ? event.keyCode\n        : 0;\n    },\n    which: function (event) {\n      return \"keypress\" === event.type\n        ? getEventCharCode(event)\n        : \"keydown\" === event.type || \"keyup\" === event.type\n          ? event.keyCode\n          : 0;\n    }\n  }),\n  SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface),\n  PointerEventInterface = assign({}, MouseEventInterface, {\n    pointerId: 0,\n    width: 0,\n    height: 0,\n    pressure: 0,\n    tangentialPressure: 0,\n    tiltX: 0,\n    tiltY: 0,\n    twist: 0,\n    pointerType: 0,\n    isPrimary: 0\n  }),\n  SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface),\n  TouchEventInterface = assign({}, UIEventInterface, {\n    touches: 0,\n    targetTouches: 0,\n    changedTouches: 0,\n    altKey: 0,\n    metaKey: 0,\n    ctrlKey: 0,\n    shiftKey: 0,\n    getModifierState: getEventModifierState\n  }),\n  SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface),\n  TransitionEventInterface = assign({}, EventInterface, {\n    propertyName: 0,\n    elapsedTime: 0,\n    pseudoElement: 0\n  }),\n  SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface),\n  WheelEventInterface = assign({}, MouseEventInterface, {\n    deltaX: function (event) {\n      return \"deltaX\" in event\n        ? event.deltaX\n        : \"wheelDeltaX\" in event\n          ? -event.wheelDeltaX\n          : 0;\n    },\n    deltaY: function (event) {\n      return \"deltaY\" in event\n        ? event.deltaY\n        : \"wheelDeltaY\" in event\n          ? -event.wheelDeltaY\n          : \"wheelDelta\" in event\n            ? -event.wheelDelta\n            : 0;\n    },\n    deltaZ: 0,\n    deltaMode: 0\n  }),\n  SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface),\n  ToggleEventInterface = assign({}, EventInterface, {\n    newState: 0,\n    oldState: 0\n  }),\n  SyntheticToggleEvent = createSyntheticEvent(ToggleEventInterface),\n  END_KEYCODES = [9, 13, 27, 32],\n  canUseCompositionEvent = canUseDOM && \"CompositionEvent\" in window,\n  documentMode = null;\ncanUseDOM &&\n  \"documentMode\" in document &&\n  (documentMode = document.documentMode);\nvar canUseTextInputEvent = canUseDOM && \"TextEvent\" in window && !documentMode,\n  useFallbackCompositionData =\n    canUseDOM &&\n    (!canUseCompositionEvent ||\n      (documentMode && 8 < documentMode && 11 >= documentMode)),\n  SPACEBAR_CHAR = String.fromCharCode(32),\n  hasSpaceKeypress = !1;\nfunction isFallbackCompositionEnd(domEventName, nativeEvent) {\n  switch (domEventName) {\n    case \"keyup\":\n      return -1 !== END_KEYCODES.indexOf(nativeEvent.keyCode);\n    case \"keydown\":\n      return 229 !== nativeEvent.keyCode;\n    case \"keypress\":\n    case \"mousedown\":\n    case \"focusout\":\n      return !0;\n    default:\n      return !1;\n  }\n}\nfunction getDataFromCustomEvent(nativeEvent) {\n  nativeEvent = nativeEvent.detail;\n  return \"object\" === typeof nativeEvent && \"data\" in nativeEvent\n    ? nativeEvent.data\n    : null;\n}\nvar isComposing = !1;\nfunction getNativeBeforeInputChars(domEventName, nativeEvent) {\n  switch (domEventName) {\n    case \"compositionend\":\n      return getDataFromCustomEvent(nativeEvent);\n    case \"keypress\":\n      if (32 !== nativeEvent.which) return null;\n      hasSpaceKeypress = !0;\n      return SPACEBAR_CHAR;\n    case \"textInput\":\n      return (\n        (domEventName = nativeEvent.data),\n        domEventName === SPACEBAR_CHAR && hasSpaceKeypress ? null : domEventName\n      );\n    default:\n      return null;\n  }\n}\nfunction getFallbackBeforeInputChars(domEventName, nativeEvent) {\n  if (isComposing)\n    return \"compositionend\" === domEventName ||\n      (!canUseCompositionEvent &&\n        isFallbackCompositionEnd(domEventName, nativeEvent))\n      ? ((domEventName = getData()),\n        (fallbackText = startText = root = null),\n        (isComposing = !1),\n        domEventName)\n      : null;\n  switch (domEventName) {\n    case \"paste\":\n      return null;\n    case \"keypress\":\n      if (\n        !(nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) ||\n        (nativeEvent.ctrlKey && nativeEvent.altKey)\n      ) {\n        if (nativeEvent.char && 1 < nativeEvent.char.length)\n          return nativeEvent.char;\n        if (nativeEvent.which) return String.fromCharCode(nativeEvent.which);\n      }\n      return null;\n    case \"compositionend\":\n      return useFallbackCompositionData && \"ko\" !== nativeEvent.locale\n        ? null\n        : nativeEvent.data;\n    default:\n      return null;\n  }\n}\nvar supportedInputTypes = {\n  color: !0,\n  date: !0,\n  datetime: !0,\n  \"datetime-local\": !0,\n  email: !0,\n  month: !0,\n  number: !0,\n  password: !0,\n  range: !0,\n  search: !0,\n  tel: !0,\n  text: !0,\n  time: !0,\n  url: !0,\n  week: !0\n};\nfunction isTextInputElement(elem) {\n  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();\n  return \"input\" === nodeName\n    ? !!supportedInputTypes[elem.type]\n    : \"textarea\" === nodeName\n      ? !0\n      : !1;\n}\nfunction createAndAccumulateChangeEvent(\n  dispatchQueue,\n  inst,\n  nativeEvent,\n  target\n) {\n  restoreTarget\n    ? restoreQueue\n      ? restoreQueue.push(target)\n      : (restoreQueue = [target])\n    : (restoreTarget = target);\n  inst = accumulateTwoPhaseListeners(inst, \"onChange\");\n  0 < inst.length &&\n    ((nativeEvent = new SyntheticEvent(\n      \"onChange\",\n      \"change\",\n      null,\n      nativeEvent,\n      target\n    )),\n    dispatchQueue.push({ event: nativeEvent, listeners: inst }));\n}\nvar activeElement$1 = null,\n  activeElementInst$1 = null;\nfunction runEventInBatch(dispatchQueue) {\n  processDispatchQueue(dispatchQueue, 0);\n}\nfunction getInstIfValueChanged(targetInst) {\n  var targetNode = getNodeFromInstance(targetInst);\n  if (updateValueIfChanged(targetNode)) return targetInst;\n}\nfunction getTargetInstForChangeEvent(domEventName, targetInst) {\n  if (\"change\" === domEventName) return targetInst;\n}\nvar isInputEventSupported = !1;\nif (canUseDOM) {\n  var JSCompiler_inline_result$jscomp$283;\n  if (canUseDOM) {\n    var isSupported$jscomp$inline_418 = \"oninput\" in document;\n    if (!isSupported$jscomp$inline_418) {\n      var element$jscomp$inline_419 = document.createElement(\"div\");\n      element$jscomp$inline_419.setAttribute(\"oninput\", \"return;\");\n      isSupported$jscomp$inline_418 =\n        \"function\" === typeof element$jscomp$inline_419.oninput;\n    }\n    JSCompiler_inline_result$jscomp$283 = isSupported$jscomp$inline_418;\n  } else JSCompiler_inline_result$jscomp$283 = !1;\n  isInputEventSupported =\n    JSCompiler_inline_result$jscomp$283 &&\n    (!document.documentMode || 9 < document.documentMode);\n}\nfunction stopWatchingForValueChange() {\n  activeElement$1 &&\n    (activeElement$1.detachEvent(\"onpropertychange\", handlePropertyChange),\n    (activeElementInst$1 = activeElement$1 = null));\n}\nfunction handlePropertyChange(nativeEvent) {\n  if (\n    \"value\" === nativeEvent.propertyName &&\n    getInstIfValueChanged(activeElementInst$1)\n  ) {\n    var dispatchQueue = [];\n    createAndAccumulateChangeEvent(\n      dispatchQueue,\n      activeElementInst$1,\n      nativeEvent,\n      getEventTarget(nativeEvent)\n    );\n    batchedUpdates$1(runEventInBatch, dispatchQueue);\n  }\n}\nfunction handleEventsForInputEventPolyfill(domEventName, target, targetInst) {\n  \"focusin\" === domEventName\n    ? (stopWatchingForValueChange(),\n      (activeElement$1 = target),\n      (activeElementInst$1 = targetInst),\n      activeElement$1.attachEvent(\"onpropertychange\", handlePropertyChange))\n    : \"focusout\" === domEventName && stopWatchingForValueChange();\n}\nfunction getTargetInstForInputEventPolyfill(domEventName) {\n  if (\n    \"selectionchange\" === domEventName ||\n    \"keyup\" === domEventName ||\n    \"keydown\" === domEventName\n  )\n    return getInstIfValueChanged(activeElementInst$1);\n}\nfunction getTargetInstForClickEvent(domEventName, targetInst) {\n  if (\"click\" === domEventName) return getInstIfValueChanged(targetInst);\n}\nfunction getTargetInstForInputOrChangeEvent(domEventName, targetInst) {\n  if (\"input\" === domEventName || \"change\" === domEventName)\n    return getInstIfValueChanged(targetInst);\n}\nfunction is(x, y) {\n  return (x === y && (0 !== x || 1 / x === 1 / y)) || (x !== x && y !== y);\n}\nvar objectIs = \"function\" === typeof Object.is ? Object.is : is;\nfunction shallowEqual(objA, objB) {\n  if (objectIs(objA, objB)) return !0;\n  if (\n    \"object\" !== typeof objA ||\n    null === objA ||\n    \"object\" !== typeof objB ||\n    null === objB\n  )\n    return !1;\n  var keysA = Object.keys(objA),\n    keysB = Object.keys(objB);\n  if (keysA.length !== keysB.length) return !1;\n  for (keysB = 0; keysB < keysA.length; keysB++) {\n    var currentKey = keysA[keysB];\n    if (\n      !hasOwnProperty.call(objB, currentKey) ||\n      !objectIs(objA[currentKey], objB[currentKey])\n    )\n      return !1;\n  }\n  return !0;\n}\nfunction getLeafNode(node) {\n  for (; node && node.firstChild; ) node = node.firstChild;\n  return node;\n}\nfunction getNodeForCharacterOffset(root, offset) {\n  var node = getLeafNode(root);\n  root = 0;\n  for (var nodeEnd; node; ) {\n    if (3 === node.nodeType) {\n      nodeEnd = root + node.textContent.length;\n      if (root <= offset && nodeEnd >= offset)\n        return { node: node, offset: offset - root };\n      root = nodeEnd;\n    }\n    a: {\n      for (; node; ) {\n        if (node.nextSibling) {\n          node = node.nextSibling;\n          break a;\n        }\n        node = node.parentNode;\n      }\n      node = void 0;\n    }\n    node = getLeafNode(node);\n  }\n}\nfunction containsNode(outerNode, innerNode) {\n  return outerNode && innerNode\n    ? outerNode === innerNode\n      ? !0\n      : outerNode && 3 === outerNode.nodeType\n        ? !1\n        : innerNode && 3 === innerNode.nodeType\n          ? containsNode(outerNode, innerNode.parentNode)\n          : \"contains\" in outerNode\n            ? outerNode.contains(innerNode)\n            : outerNode.compareDocumentPosition\n              ? !!(outerNode.compareDocumentPosition(innerNode) & 16)\n              : !1\n    : !1;\n}\nfunction getActiveElementDeep(containerInfo) {\n  containerInfo =\n    null != containerInfo &&\n    null != containerInfo.ownerDocument &&\n    null != containerInfo.ownerDocument.defaultView\n      ? containerInfo.ownerDocument.defaultView\n      : window;\n  for (\n    var element = getActiveElement(containerInfo.document);\n    element instanceof containerInfo.HTMLIFrameElement;\n\n  ) {\n    try {\n      var JSCompiler_inline_result =\n        \"string\" === typeof element.contentWindow.location.href;\n    } catch (err) {\n      JSCompiler_inline_result = !1;\n    }\n    if (JSCompiler_inline_result) containerInfo = element.contentWindow;\n    else break;\n    element = getActiveElement(containerInfo.document);\n  }\n  return element;\n}\nfunction hasSelectionCapabilities(elem) {\n  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();\n  return (\n    nodeName &&\n    ((\"input\" === nodeName &&\n      (\"text\" === elem.type ||\n        \"search\" === elem.type ||\n        \"tel\" === elem.type ||\n        \"url\" === elem.type ||\n        \"password\" === elem.type)) ||\n      \"textarea\" === nodeName ||\n      \"true\" === elem.contentEditable)\n  );\n}\nfunction restoreSelection(priorSelectionInformation, containerInfo) {\n  var curFocusedElem = getActiveElementDeep(containerInfo);\n  containerInfo = priorSelectionInformation.focusedElem;\n  var priorSelectionRange = priorSelectionInformation.selectionRange;\n  if (\n    curFocusedElem !== containerInfo &&\n    containerInfo &&\n    containerInfo.ownerDocument &&\n    containsNode(containerInfo.ownerDocument.documentElement, containerInfo)\n  ) {\n    if (null !== priorSelectionRange && hasSelectionCapabilities(containerInfo))\n      if (\n        ((priorSelectionInformation = priorSelectionRange.start),\n        (curFocusedElem = priorSelectionRange.end),\n        void 0 === curFocusedElem &&\n          (curFocusedElem = priorSelectionInformation),\n        \"selectionStart\" in containerInfo)\n      )\n        (containerInfo.selectionStart = priorSelectionInformation),\n          (containerInfo.selectionEnd = Math.min(\n            curFocusedElem,\n            containerInfo.value.length\n          ));\n      else if (\n        ((curFocusedElem =\n          ((priorSelectionInformation =\n            containerInfo.ownerDocument || document) &&\n            priorSelectionInformation.defaultView) ||\n          window),\n        curFocusedElem.getSelection)\n      ) {\n        curFocusedElem = curFocusedElem.getSelection();\n        var length = containerInfo.textContent.length,\n          start = Math.min(priorSelectionRange.start, length);\n        priorSelectionRange =\n          void 0 === priorSelectionRange.end\n            ? start\n            : Math.min(priorSelectionRange.end, length);\n        !curFocusedElem.extend &&\n          start > priorSelectionRange &&\n          ((length = priorSelectionRange),\n          (priorSelectionRange = start),\n          (start = length));\n        length = getNodeForCharacterOffset(containerInfo, start);\n        var endMarker = getNodeForCharacterOffset(\n          containerInfo,\n          priorSelectionRange\n        );\n        length &&\n          endMarker &&\n          (1 !== curFocusedElem.rangeCount ||\n            curFocusedElem.anchorNode !== length.node ||\n            curFocusedElem.anchorOffset !== length.offset ||\n            curFocusedElem.focusNode !== endMarker.node ||\n            curFocusedElem.focusOffset !== endMarker.offset) &&\n          ((priorSelectionInformation =\n            priorSelectionInformation.createRange()),\n          priorSelectionInformation.setStart(length.node, length.offset),\n          curFocusedElem.removeAllRanges(),\n          start > priorSelectionRange\n            ? (curFocusedElem.addRange(priorSelectionInformation),\n              curFocusedElem.extend(endMarker.node, endMarker.offset))\n            : (priorSelectionInformation.setEnd(\n                endMarker.node,\n                endMarker.offset\n              ),\n              curFocusedElem.addRange(priorSelectionInformation)));\n      }\n    priorSelectionInformation = [];\n    for (\n      curFocusedElem = containerInfo;\n      (curFocusedElem = curFocusedElem.parentNode);\n\n    )\n      1 === curFocusedElem.nodeType &&\n        priorSelectionInformation.push({\n          element: curFocusedElem,\n          left: curFocusedElem.scrollLeft,\n          top: curFocusedElem.scrollTop\n        });\n    \"function\" === typeof containerInfo.focus && containerInfo.focus();\n    for (\n      containerInfo = 0;\n      containerInfo < priorSelectionInformation.length;\n      containerInfo++\n    )\n      (curFocusedElem = priorSelectionInformation[containerInfo]),\n        (curFocusedElem.element.scrollLeft = curFocusedElem.left),\n        (curFocusedElem.element.scrollTop = curFocusedElem.top);\n  }\n}\nvar skipSelectionChangeEvent =\n    canUseDOM && \"documentMode\" in document && 11 >= document.documentMode,\n  activeElement = null,\n  activeElementInst = null,\n  lastSelection = null,\n  mouseDown = !1;\nfunction constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {\n  var doc =\n    nativeEventTarget.window === nativeEventTarget\n      ? nativeEventTarget.document\n      : 9 === nativeEventTarget.nodeType\n        ? nativeEventTarget\n        : nativeEventTarget.ownerDocument;\n  mouseDown ||\n    null == activeElement ||\n    activeElement !== getActiveElement(doc) ||\n    ((doc = activeElement),\n    \"selectionStart\" in doc && hasSelectionCapabilities(doc)\n      ? (doc = { start: doc.selectionStart, end: doc.selectionEnd })\n      : ((doc = (\n          (doc.ownerDocument && doc.ownerDocument.defaultView) ||\n          window\n        ).getSelection()),\n        (doc = {\n          anchorNode: doc.anchorNode,\n          anchorOffset: doc.anchorOffset,\n          focusNode: doc.focusNode,\n          focusOffset: doc.focusOffset\n        })),\n    (lastSelection && shallowEqual(lastSelection, doc)) ||\n      ((lastSelection = doc),\n      (doc = accumulateTwoPhaseListeners(activeElementInst, \"onSelect\")),\n      0 < doc.length &&\n        ((nativeEvent = new SyntheticEvent(\n          \"onSelect\",\n          \"select\",\n          null,\n          nativeEvent,\n          nativeEventTarget\n        )),\n        dispatchQueue.push({ event: nativeEvent, listeners: doc }),\n        (nativeEvent.target = activeElement))));\n}\nfunction makePrefixMap(styleProp, eventName) {\n  var prefixes = {};\n  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();\n  prefixes[\"Webkit\" + styleProp] = \"webkit\" + eventName;\n  prefixes[\"Moz\" + styleProp] = \"moz\" + eventName;\n  return prefixes;\n}\nvar vendorPrefixes = {\n    animationend: makePrefixMap(\"Animation\", \"AnimationEnd\"),\n    animationiteration: makePrefixMap(\"Animation\", \"AnimationIteration\"),\n    animationstart: makePrefixMap(\"Animation\", \"AnimationStart\"),\n    transitionrun: makePrefixMap(\"Transition\", \"TransitionRun\"),\n    transitionstart: makePrefixMap(\"Transition\", \"TransitionStart\"),\n    transitioncancel: makePrefixMap(\"Transition\", \"TransitionCancel\"),\n    transitionend: makePrefixMap(\"Transition\", \"TransitionEnd\")\n  },\n  prefixedEventNames = {},\n  style = {};\ncanUseDOM &&\n  ((style = document.createElement(\"div\").style),\n  \"AnimationEvent\" in window ||\n    (delete vendorPrefixes.animationend.animation,\n    delete vendorPrefixes.animationiteration.animation,\n    delete vendorPrefixes.animationstart.animation),\n  \"TransitionEvent\" in window ||\n    delete vendorPrefixes.transitionend.transition);\nfunction getVendorPrefixedEventName(eventName) {\n  if (prefixedEventNames[eventName]) return prefixedEventNames[eventName];\n  if (!vendorPrefixes[eventName]) return eventName;\n  var prefixMap = vendorPrefixes[eventName],\n    styleProp;\n  for (styleProp in prefixMap)\n    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style)\n      return (prefixedEventNames[eventName] = prefixMap[styleProp]);\n  return eventName;\n}\nvar ANIMATION_END = getVendorPrefixedEventName(\"animationend\"),\n  ANIMATION_ITERATION = getVendorPrefixedEventName(\"animationiteration\"),\n  ANIMATION_START = getVendorPrefixedEventName(\"animationstart\"),\n  TRANSITION_RUN = getVendorPrefixedEventName(\"transitionrun\"),\n  TRANSITION_START = getVendorPrefixedEventName(\"transitionstart\"),\n  TRANSITION_CANCEL = getVendorPrefixedEventName(\"transitioncancel\"),\n  TRANSITION_END = getVendorPrefixedEventName(\"transitionend\"),\n  topLevelEventsToReactNames = new Map(),\n  simpleEventPluginEvents =\n    \"abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll scrollEnd toggle touchMove waiting wheel\".split(\n      \" \"\n    );\nfunction registerSimpleEvent(domEventName, reactName) {\n  topLevelEventsToReactNames.set(domEventName, reactName);\n  registerTwoPhaseEvent(reactName, [domEventName]);\n}\nvar concurrentQueues = [],\n  concurrentQueuesIndex = 0,\n  concurrentlyUpdatedLanes = 0;\nfunction finishQueueingConcurrentUpdates() {\n  for (\n    var endIndex = concurrentQueuesIndex,\n      i = (concurrentlyUpdatedLanes = concurrentQueuesIndex = 0);\n    i < endIndex;\n\n  ) {\n    var fiber = concurrentQueues[i];\n    concurrentQueues[i++] = null;\n    var queue = concurrentQueues[i];\n    concurrentQueues[i++] = null;\n    var update = concurrentQueues[i];\n    concurrentQueues[i++] = null;\n    var lane = concurrentQueues[i];\n    concurrentQueues[i++] = null;\n    if (null !== queue && null !== update) {\n      var pending = queue.pending;\n      null === pending\n        ? (update.next = update)\n        : ((update.next = pending.next), (pending.next = update));\n      queue.pending = update;\n    }\n    0 !== lane && markUpdateLaneFromFiberToRoot(fiber, update, lane);\n  }\n}\nfunction enqueueUpdate$1(fiber, queue, update, lane) {\n  concurrentQueues[concurrentQueuesIndex++] = fiber;\n  concurrentQueues[concurrentQueuesIndex++] = queue;\n  concurrentQueues[concurrentQueuesIndex++] = update;\n  concurrentQueues[concurrentQueuesIndex++] = lane;\n  concurrentlyUpdatedLanes |= lane;\n  fiber.lanes |= lane;\n  fiber = fiber.alternate;\n  null !== fiber && (fiber.lanes |= lane);\n}\nfunction enqueueConcurrentHookUpdate(fiber, queue, update, lane) {\n  enqueueUpdate$1(fiber, queue, update, lane);\n  return getRootForUpdatedFiber(fiber);\n}\nfunction enqueueConcurrentRenderForLane(fiber, lane) {\n  enqueueUpdate$1(fiber, null, null, lane);\n  return getRootForUpdatedFiber(fiber);\n}\nfunction markUpdateLaneFromFiberToRoot(sourceFiber, update, lane) {\n  sourceFiber.lanes |= lane;\n  var alternate = sourceFiber.alternate;\n  null !== alternate && (alternate.lanes |= lane);\n  for (var isHidden = !1, parent = sourceFiber.return; null !== parent; )\n    (parent.childLanes |= lane),\n      (alternate = parent.alternate),\n      null !== alternate && (alternate.childLanes |= lane),\n      22 === parent.tag &&\n        ((sourceFiber = parent.stateNode),\n        null === sourceFiber || sourceFiber._visibility & 1 || (isHidden = !0)),\n      (sourceFiber = parent),\n      (parent = parent.return);\n  isHidden &&\n    null !== update &&\n    3 === sourceFiber.tag &&\n    ((parent = sourceFiber.stateNode),\n    (isHidden = 31 - clz32(lane)),\n    (parent = parent.hiddenUpdates),\n    (sourceFiber = parent[isHidden]),\n    null === sourceFiber\n      ? (parent[isHidden] = [update])\n      : sourceFiber.push(update),\n    (update.lane = lane | 536870912));\n}\nfunction getRootForUpdatedFiber(sourceFiber) {\n  if (50 < nestedUpdateCount)\n    throw (\n      ((nestedUpdateCount = 0),\n      (rootWithNestedUpdates = null),\n      Error(formatProdErrorMessage(185)))\n    );\n  for (var parent = sourceFiber.return; null !== parent; )\n    (sourceFiber = parent), (parent = sourceFiber.return);\n  return 3 === sourceFiber.tag ? sourceFiber.stateNode : null;\n}\nvar emptyContextObject = {},\n  CapturedStacks = new WeakMap();\nfunction createCapturedValueAtFiber(value, source) {\n  if (\"object\" === typeof value && null !== value) {\n    var existing = CapturedStacks.get(value);\n    if (void 0 !== existing) return existing;\n    source = {\n      value: value,\n      source: source,\n      stack: getStackByFiberInDevAndProd(source)\n    };\n    CapturedStacks.set(value, source);\n    return source;\n  }\n  return {\n    value: value,\n    source: source,\n    stack: getStackByFiberInDevAndProd(source)\n  };\n}\nvar forkStack = [],\n  forkStackIndex = 0,\n  treeForkProvider = null,\n  treeForkCount = 0,\n  idStack = [],\n  idStackIndex = 0,\n  treeContextProvider = null,\n  treeContextId = 1,\n  treeContextOverflow = \"\";\nfunction pushTreeFork(workInProgress, totalChildren) {\n  forkStack[forkStackIndex++] = treeForkCount;\n  forkStack[forkStackIndex++] = treeForkProvider;\n  treeForkProvider = workInProgress;\n  treeForkCount = totalChildren;\n}\nfunction pushTreeId(workInProgress, totalChildren, index) {\n  idStack[idStackIndex++] = treeContextId;\n  idStack[idStackIndex++] = treeContextOverflow;\n  idStack[idStackIndex++] = treeContextProvider;\n  treeContextProvider = workInProgress;\n  var baseIdWithLeadingBit = treeContextId;\n  workInProgress = treeContextOverflow;\n  var baseLength = 32 - clz32(baseIdWithLeadingBit) - 1;\n  baseIdWithLeadingBit &= ~(1 << baseLength);\n  index += 1;\n  var length = 32 - clz32(totalChildren) + baseLength;\n  if (30 < length) {\n    var numberOfOverflowBits = baseLength - (baseLength % 5);\n    length = (\n      baseIdWithLeadingBit &\n      ((1 << numberOfOverflowBits) - 1)\n    ).toString(32);\n    baseIdWithLeadingBit >>= numberOfOverflowBits;\n    baseLength -= numberOfOverflowBits;\n    treeContextId =\n      (1 << (32 - clz32(totalChildren) + baseLength)) |\n      (index << baseLength) |\n      baseIdWithLeadingBit;\n    treeContextOverflow = length + workInProgress;\n  } else\n    (treeContextId =\n      (1 << length) | (index << baseLength) | baseIdWithLeadingBit),\n      (treeContextOverflow = workInProgress);\n}\nfunction pushMaterializedTreeId(workInProgress) {\n  null !== workInProgress.return &&\n    (pushTreeFork(workInProgress, 1), pushTreeId(workInProgress, 1, 0));\n}\nfunction popTreeContext(workInProgress) {\n  for (; workInProgress === treeForkProvider; )\n    (treeForkProvider = forkStack[--forkStackIndex]),\n      (forkStack[forkStackIndex] = null),\n      (treeForkCount = forkStack[--forkStackIndex]),\n      (forkStack[forkStackIndex] = null);\n  for (; workInProgress === treeContextProvider; )\n    (treeContextProvider = idStack[--idStackIndex]),\n      (idStack[idStackIndex] = null),\n      (treeContextOverflow = idStack[--idStackIndex]),\n      (idStack[idStackIndex] = null),\n      (treeContextId = idStack[--idStackIndex]),\n      (idStack[idStackIndex] = null);\n}\nvar hydrationParentFiber = null,\n  nextHydratableInstance = null,\n  isHydrating = !1,\n  hydrationErrors = null,\n  rootOrSingletonContext = !1,\n  HydrationMismatchException = Error(formatProdErrorMessage(519));\nfunction throwOnHydrationMismatch(fiber) {\n  var error = Error(formatProdErrorMessage(418, \"\"));\n  queueHydrationError(createCapturedValueAtFiber(error, fiber));\n  throw HydrationMismatchException;\n}\nfunction prepareToHydrateHostInstance(fiber) {\n  var instance = fiber.stateNode,\n    type = fiber.type,\n    props = fiber.memoizedProps;\n  instance[internalInstanceKey] = fiber;\n  instance[internalPropsKey] = props;\n  switch (type) {\n    case \"dialog\":\n      listenToNonDelegatedEvent(\"cancel\", instance);\n      listenToNonDelegatedEvent(\"close\", instance);\n      break;\n    case \"iframe\":\n    case \"object\":\n    case \"embed\":\n      listenToNonDelegatedEvent(\"load\", instance);\n      break;\n    case \"video\":\n    case \"audio\":\n      for (type = 0; type < mediaEventTypes.length; type++)\n        listenToNonDelegatedEvent(mediaEventTypes[type], instance);\n      break;\n    case \"source\":\n      listenToNonDelegatedEvent(\"error\", instance);\n      break;\n    case \"img\":\n    case \"image\":\n    case \"link\":\n      listenToNonDelegatedEvent(\"error\", instance);\n      listenToNonDelegatedEvent(\"load\", instance);\n      break;\n    case \"details\":\n      listenToNonDelegatedEvent(\"toggle\", instance);\n      break;\n    case \"input\":\n      listenToNonDelegatedEvent(\"invalid\", instance);\n      initInput(\n        instance,\n        props.value,\n        props.defaultValue,\n        props.checked,\n        props.defaultChecked,\n        props.type,\n        props.name,\n        !0\n      );\n      track(instance);\n      break;\n    case \"select\":\n      listenToNonDelegatedEvent(\"invalid\", instance);\n      break;\n    case \"textarea\":\n      listenToNonDelegatedEvent(\"invalid\", instance),\n        initTextarea(instance, props.value, props.defaultValue, props.children),\n        track(instance);\n  }\n  type = props.children;\n  (\"string\" !== typeof type &&\n    \"number\" !== typeof type &&\n    \"bigint\" !== typeof type) ||\n  instance.textContent === \"\" + type ||\n  !0 === props.suppressHydrationWarning ||\n  checkForUnmatchedText(instance.textContent, type)\n    ? (null != props.popover &&\n        (listenToNonDelegatedEvent(\"beforetoggle\", instance),\n        listenToNonDelegatedEvent(\"toggle\", instance)),\n      null != props.onScroll && listenToNonDelegatedEvent(\"scroll\", instance),\n      null != props.onScrollEnd &&\n        listenToNonDelegatedEvent(\"scrollend\", instance),\n      null != props.onClick && (instance.onclick = noop$1),\n      (instance = !0))\n    : (instance = !1);\n  instance || throwOnHydrationMismatch(fiber);\n}\nfunction popToNextHostParent(fiber) {\n  for (hydrationParentFiber = fiber.return; hydrationParentFiber; )\n    switch (hydrationParentFiber.tag) {\n      case 3:\n      case 27:\n        rootOrSingletonContext = !0;\n        return;\n      case 5:\n      case 13:\n        rootOrSingletonContext = !1;\n        return;\n      default:\n        hydrationParentFiber = hydrationParentFiber.return;\n    }\n}\nfunction popHydrationState(fiber) {\n  if (fiber !== hydrationParentFiber) return !1;\n  if (!isHydrating) return popToNextHostParent(fiber), (isHydrating = !0), !1;\n  var shouldClear = !1,\n    JSCompiler_temp;\n  if ((JSCompiler_temp = 3 !== fiber.tag && 27 !== fiber.tag)) {\n    if ((JSCompiler_temp = 5 === fiber.tag))\n      (JSCompiler_temp = fiber.type),\n        (JSCompiler_temp =\n          !(\"form\" !== JSCompiler_temp && \"button\" !== JSCompiler_temp) ||\n          shouldSetTextContent(fiber.type, fiber.memoizedProps));\n    JSCompiler_temp = !JSCompiler_temp;\n  }\n  JSCompiler_temp && (shouldClear = !0);\n  shouldClear && nextHydratableInstance && throwOnHydrationMismatch(fiber);\n  popToNextHostParent(fiber);\n  if (13 === fiber.tag) {\n    fiber = fiber.memoizedState;\n    fiber = null !== fiber ? fiber.dehydrated : null;\n    if (!fiber) throw Error(formatProdErrorMessage(317));\n    a: {\n      fiber = fiber.nextSibling;\n      for (shouldClear = 0; fiber; ) {\n        if (8 === fiber.nodeType)\n          if (((JSCompiler_temp = fiber.data), \"/$\" === JSCompiler_temp)) {\n            if (0 === shouldClear) {\n              nextHydratableInstance = getNextHydratable(fiber.nextSibling);\n              break a;\n            }\n            shouldClear--;\n          } else\n            (\"$\" !== JSCompiler_temp &&\n              \"$!\" !== JSCompiler_temp &&\n              \"$?\" !== JSCompiler_temp) ||\n              shouldClear++;\n        fiber = fiber.nextSibling;\n      }\n      nextHydratableInstance = null;\n    }\n  } else\n    nextHydratableInstance = hydrationParentFiber\n      ? getNextHydratable(fiber.stateNode.nextSibling)\n      : null;\n  return !0;\n}\nfunction resetHydrationState() {\n  nextHydratableInstance = hydrationParentFiber = null;\n  isHydrating = !1;\n}\nfunction queueHydrationError(error) {\n  null === hydrationErrors\n    ? (hydrationErrors = [error])\n    : hydrationErrors.push(error);\n}\nvar SuspenseException = Error(formatProdErrorMessage(460)),\n  SuspenseyCommitException = Error(formatProdErrorMessage(474)),\n  noopSuspenseyCommitThenable = { then: function () {} };\nfunction isThenableResolved(thenable) {\n  thenable = thenable.status;\n  return \"fulfilled\" === thenable || \"rejected\" === thenable;\n}\nfunction noop$3() {}\nfunction trackUsedThenable(thenableState, thenable, index) {\n  index = thenableState[index];\n  void 0 === index\n    ? thenableState.push(thenable)\n    : index !== thenable && (thenable.then(noop$3, noop$3), (thenable = index));\n  switch (thenable.status) {\n    case \"fulfilled\":\n      return thenable.value;\n    case \"rejected\":\n      thenableState = thenable.reason;\n      if (thenableState === SuspenseException)\n        throw Error(formatProdErrorMessage(483));\n      throw thenableState;\n    default:\n      if (\"string\" === typeof thenable.status) thenable.then(noop$3, noop$3);\n      else {\n        thenableState = workInProgressRoot;\n        if (null !== thenableState && 100 < thenableState.shellSuspendCounter)\n          throw Error(formatProdErrorMessage(482));\n        thenableState = thenable;\n        thenableState.status = \"pending\";\n        thenableState.then(\n          function (fulfilledValue) {\n            if (\"pending\" === thenable.status) {\n              var fulfilledThenable = thenable;\n              fulfilledThenable.status = \"fulfilled\";\n              fulfilledThenable.value = fulfilledValue;\n            }\n          },\n          function (error) {\n            if (\"pending\" === thenable.status) {\n              var rejectedThenable = thenable;\n              rejectedThenable.status = \"rejected\";\n              rejectedThenable.reason = error;\n            }\n          }\n        );\n      }\n      switch (thenable.status) {\n        case \"fulfilled\":\n          return thenable.value;\n        case \"rejected\":\n          thenableState = thenable.reason;\n          if (thenableState === SuspenseException)\n            throw Error(formatProdErrorMessage(483));\n          throw thenableState;\n      }\n      suspendedThenable = thenable;\n      throw SuspenseException;\n  }\n}\nvar suspendedThenable = null;\nfunction getSuspendedThenable() {\n  if (null === suspendedThenable) throw Error(formatProdErrorMessage(459));\n  var thenable = suspendedThenable;\n  suspendedThenable = null;\n  return thenable;\n}\nvar thenableState$1 = null,\n  thenableIndexCounter$1 = 0;\nfunction unwrapThenable(thenable) {\n  var index = thenableIndexCounter$1;\n  thenableIndexCounter$1 += 1;\n  null === thenableState$1 && (thenableState$1 = []);\n  return trackUsedThenable(thenableState$1, thenable, index);\n}\nfunction coerceRef(workInProgress, element) {\n  element = element.props.ref;\n  workInProgress.ref = void 0 !== element ? element : null;\n}\nfunction throwOnInvalidObjectType(returnFiber, newChild) {\n  if (newChild.$$typeof === REACT_LEGACY_ELEMENT_TYPE)\n    throw Error(formatProdErrorMessage(525));\n  returnFiber = Object.prototype.toString.call(newChild);\n  throw Error(\n    formatProdErrorMessage(\n      31,\n      \"[object Object]\" === returnFiber\n        ? \"object with keys {\" + Object.keys(newChild).join(\", \") + \"}\"\n        : returnFiber\n    )\n  );\n}\nfunction resolveLazy(lazyType) {\n  var init = lazyType._init;\n  return init(lazyType._payload);\n}\nfunction createChildReconciler(shouldTrackSideEffects) {\n  function deleteChild(returnFiber, childToDelete) {\n    if (shouldTrackSideEffects) {\n      var deletions = returnFiber.deletions;\n      null === deletions\n        ? ((returnFiber.deletions = [childToDelete]), (returnFiber.flags |= 16))\n        : deletions.push(childToDelete);\n    }\n  }\n  function deleteRemainingChildren(returnFiber, currentFirstChild) {\n    if (!shouldTrackSideEffects) return null;\n    for (; null !== currentFirstChild; )\n      deleteChild(returnFiber, currentFirstChild),\n        (currentFirstChild = currentFirstChild.sibling);\n    return null;\n  }\n  function mapRemainingChildren(currentFirstChild) {\n    for (var existingChildren = new Map(); null !== currentFirstChild; )\n      null !== currentFirstChild.key\n        ? existingChildren.set(currentFirstChild.key, currentFirstChild)\n        : existingChildren.set(currentFirstChild.index, currentFirstChild),\n        (currentFirstChild = currentFirstChild.sibling);\n    return existingChildren;\n  }\n  function useFiber(fiber, pendingProps) {\n    fiber = createWorkInProgress(fiber, pendingProps);\n    fiber.index = 0;\n    fiber.sibling = null;\n    return fiber;\n  }\n  function placeChild(newFiber, lastPlacedIndex, newIndex) {\n    newFiber.index = newIndex;\n    if (!shouldTrackSideEffects)\n      return (newFiber.flags |= 1048576), lastPlacedIndex;\n    newIndex = newFiber.alternate;\n    if (null !== newIndex)\n      return (\n        (newIndex = newIndex.index),\n        newIndex < lastPlacedIndex\n          ? ((newFiber.flags |= 33554434), lastPlacedIndex)\n          : newIndex\n      );\n    newFiber.flags |= 33554434;\n    return lastPlacedIndex;\n  }\n  function placeSingleChild(newFiber) {\n    shouldTrackSideEffects &&\n      null === newFiber.alternate &&\n      (newFiber.flags |= 33554434);\n    return newFiber;\n  }\n  function updateTextNode(returnFiber, current, textContent, lanes) {\n    if (null === current || 6 !== current.tag)\n      return (\n        (current = createFiberFromText(textContent, returnFiber.mode, lanes)),\n        (current.return = returnFiber),\n        current\n      );\n    current = useFiber(current, textContent);\n    current.return = returnFiber;\n    return current;\n  }\n  function updateElement(returnFiber, current, element, lanes) {\n    var elementType = element.type;\n    if (elementType === REACT_FRAGMENT_TYPE)\n      return updateFragment(\n        returnFiber,\n        current,\n        element.props.children,\n        lanes,\n        element.key\n      );\n    if (\n      null !== current &&\n      (current.elementType === elementType ||\n        (\"object\" === typeof elementType &&\n          null !== elementType &&\n          elementType.$$typeof === REACT_LAZY_TYPE &&\n          resolveLazy(elementType) === current.type))\n    )\n      return (\n        (current = useFiber(current, element.props)),\n        coerceRef(current, element),\n        (current.return = returnFiber),\n        current\n      );\n    current = createFiberFromTypeAndProps(\n      element.type,\n      element.key,\n      element.props,\n      null,\n      returnFiber.mode,\n      lanes\n    );\n    coerceRef(current, element);\n    current.return = returnFiber;\n    return current;\n  }\n  function updatePortal(returnFiber, current, portal, lanes) {\n    if (\n      null === current ||\n      4 !== current.tag ||\n      current.stateNode.containerInfo !== portal.containerInfo ||\n      current.stateNode.implementation !== portal.implementation\n    )\n      return (\n        (current = createFiberFromPortal(portal, returnFiber.mode, lanes)),\n        (current.return = returnFiber),\n        current\n      );\n    current = useFiber(current, portal.children || []);\n    current.return = returnFiber;\n    return current;\n  }\n  function updateFragment(returnFiber, current, fragment, lanes, key) {\n    if (null === current || 7 !== current.tag)\n      return (\n        (current = createFiberFromFragment(\n          fragment,\n          returnFiber.mode,\n          lanes,\n          key\n        )),\n        (current.return = returnFiber),\n        current\n      );\n    current = useFiber(current, fragment);\n    current.return = returnFiber;\n    return current;\n  }\n  function createChild(returnFiber, newChild, lanes) {\n    if (\n      (\"string\" === typeof newChild && \"\" !== newChild) ||\n      \"number\" === typeof newChild ||\n      \"bigint\" === typeof newChild\n    )\n      return (\n        (newChild = createFiberFromText(\n          \"\" + newChild,\n          returnFiber.mode,\n          lanes\n        )),\n        (newChild.return = returnFiber),\n        newChild\n      );\n    if (\"object\" === typeof newChild && null !== newChild) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n          return (\n            (lanes = createFiberFromTypeAndProps(\n              newChild.type,\n              newChild.key,\n              newChild.props,\n              null,\n              returnFiber.mode,\n              lanes\n            )),\n            coerceRef(lanes, newChild),\n            (lanes.return = returnFiber),\n            lanes\n          );\n        case REACT_PORTAL_TYPE:\n          return (\n            (newChild = createFiberFromPortal(\n              newChild,\n              returnFiber.mode,\n              lanes\n            )),\n            (newChild.return = returnFiber),\n            newChild\n          );\n        case REACT_LAZY_TYPE:\n          var init = newChild._init;\n          newChild = init(newChild._payload);\n          return createChild(returnFiber, newChild, lanes);\n      }\n      if (isArrayImpl(newChild) || getIteratorFn(newChild))\n        return (\n          (newChild = createFiberFromFragment(\n            newChild,\n            returnFiber.mode,\n            lanes,\n            null\n          )),\n          (newChild.return = returnFiber),\n          newChild\n        );\n      if (\"function\" === typeof newChild.then)\n        return createChild(returnFiber, unwrapThenable(newChild), lanes);\n      if (newChild.$$typeof === REACT_CONTEXT_TYPE)\n        return createChild(\n          returnFiber,\n          readContextDuringReconciliation(returnFiber, newChild),\n          lanes\n        );\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n    return null;\n  }\n  function updateSlot(returnFiber, oldFiber, newChild, lanes) {\n    var key = null !== oldFiber ? oldFiber.key : null;\n    if (\n      (\"string\" === typeof newChild && \"\" !== newChild) ||\n      \"number\" === typeof newChild ||\n      \"bigint\" === typeof newChild\n    )\n      return null !== key\n        ? null\n        : updateTextNode(returnFiber, oldFiber, \"\" + newChild, lanes);\n    if (\"object\" === typeof newChild && null !== newChild) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n          return newChild.key === key\n            ? updateElement(returnFiber, oldFiber, newChild, lanes)\n            : null;\n        case REACT_PORTAL_TYPE:\n          return newChild.key === key\n            ? updatePortal(returnFiber, oldFiber, newChild, lanes)\n            : null;\n        case REACT_LAZY_TYPE:\n          return (\n            (key = newChild._init),\n            (newChild = key(newChild._payload)),\n            updateSlot(returnFiber, oldFiber, newChild, lanes)\n          );\n      }\n      if (isArrayImpl(newChild) || getIteratorFn(newChild))\n        return null !== key\n          ? null\n          : updateFragment(returnFiber, oldFiber, newChild, lanes, null);\n      if (\"function\" === typeof newChild.then)\n        return updateSlot(\n          returnFiber,\n          oldFiber,\n          unwrapThenable(newChild),\n          lanes\n        );\n      if (newChild.$$typeof === REACT_CONTEXT_TYPE)\n        return updateSlot(\n          returnFiber,\n          oldFiber,\n          readContextDuringReconciliation(returnFiber, newChild),\n          lanes\n        );\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n    return null;\n  }\n  function updateFromMap(\n    existingChildren,\n    returnFiber,\n    newIdx,\n    newChild,\n    lanes\n  ) {\n    if (\n      (\"string\" === typeof newChild && \"\" !== newChild) ||\n      \"number\" === typeof newChild ||\n      \"bigint\" === typeof newChild\n    )\n      return (\n        (existingChildren = existingChildren.get(newIdx) || null),\n        updateTextNode(returnFiber, existingChildren, \"\" + newChild, lanes)\n      );\n    if (\"object\" === typeof newChild && null !== newChild) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n          return (\n            (existingChildren =\n              existingChildren.get(\n                null === newChild.key ? newIdx : newChild.key\n              ) || null),\n            updateElement(returnFiber, existingChildren, newChild, lanes)\n          );\n        case REACT_PORTAL_TYPE:\n          return (\n            (existingChildren =\n              existingChildren.get(\n                null === newChild.key ? newIdx : newChild.key\n              ) || null),\n            updatePortal(returnFiber, existingChildren, newChild, lanes)\n          );\n        case REACT_LAZY_TYPE:\n          var init = newChild._init;\n          newChild = init(newChild._payload);\n          return updateFromMap(\n            existingChildren,\n            returnFiber,\n            newIdx,\n            newChild,\n            lanes\n          );\n      }\n      if (isArrayImpl(newChild) || getIteratorFn(newChild))\n        return (\n          (existingChildren = existingChildren.get(newIdx) || null),\n          updateFragment(returnFiber, existingChildren, newChild, lanes, null)\n        );\n      if (\"function\" === typeof newChild.then)\n        return updateFromMap(\n          existingChildren,\n          returnFiber,\n          newIdx,\n          unwrapThenable(newChild),\n          lanes\n        );\n      if (newChild.$$typeof === REACT_CONTEXT_TYPE)\n        return updateFromMap(\n          existingChildren,\n          returnFiber,\n          newIdx,\n          readContextDuringReconciliation(returnFiber, newChild),\n          lanes\n        );\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n    return null;\n  }\n  function reconcileChildrenArray(\n    returnFiber,\n    currentFirstChild,\n    newChildren,\n    lanes\n  ) {\n    for (\n      var resultingFirstChild = null,\n        previousNewFiber = null,\n        oldFiber = currentFirstChild,\n        newIdx = (currentFirstChild = 0),\n        nextOldFiber = null;\n      null !== oldFiber && newIdx < newChildren.length;\n      newIdx++\n    ) {\n      oldFiber.index > newIdx\n        ? ((nextOldFiber = oldFiber), (oldFiber = null))\n        : (nextOldFiber = oldFiber.sibling);\n      var newFiber = updateSlot(\n        returnFiber,\n        oldFiber,\n        newChildren[newIdx],\n        lanes\n      );\n      if (null === newFiber) {\n        null === oldFiber && (oldFiber = nextOldFiber);\n        break;\n      }\n      shouldTrackSideEffects &&\n        oldFiber &&\n        null === newFiber.alternate &&\n        deleteChild(returnFiber, oldFiber);\n      currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);\n      null === previousNewFiber\n        ? (resultingFirstChild = newFiber)\n        : (previousNewFiber.sibling = newFiber);\n      previousNewFiber = newFiber;\n      oldFiber = nextOldFiber;\n    }\n    if (newIdx === newChildren.length)\n      return (\n        deleteRemainingChildren(returnFiber, oldFiber),\n        isHydrating && pushTreeFork(returnFiber, newIdx),\n        resultingFirstChild\n      );\n    if (null === oldFiber) {\n      for (; newIdx < newChildren.length; newIdx++)\n        (oldFiber = createChild(returnFiber, newChildren[newIdx], lanes)),\n          null !== oldFiber &&\n            ((currentFirstChild = placeChild(\n              oldFiber,\n              currentFirstChild,\n              newIdx\n            )),\n            null === previousNewFiber\n              ? (resultingFirstChild = oldFiber)\n              : (previousNewFiber.sibling = oldFiber),\n            (previousNewFiber = oldFiber));\n      isHydrating && pushTreeFork(returnFiber, newIdx);\n      return resultingFirstChild;\n    }\n    for (\n      oldFiber = mapRemainingChildren(oldFiber);\n      newIdx < newChildren.length;\n      newIdx++\n    )\n      (nextOldFiber = updateFromMap(\n        oldFiber,\n        returnFiber,\n        newIdx,\n        newChildren[newIdx],\n        lanes\n      )),\n        null !== nextOldFiber &&\n          (shouldTrackSideEffects &&\n            null !== nextOldFiber.alternate &&\n            oldFiber.delete(\n              null === nextOldFiber.key ? newIdx : nextOldFiber.key\n            ),\n          (currentFirstChild = placeChild(\n            nextOldFiber,\n            currentFirstChild,\n            newIdx\n          )),\n          null === previousNewFiber\n            ? (resultingFirstChild = nextOldFiber)\n            : (previousNewFiber.sibling = nextOldFiber),\n          (previousNewFiber = nextOldFiber));\n    shouldTrackSideEffects &&\n      oldFiber.forEach(function (child) {\n        return deleteChild(returnFiber, child);\n      });\n    isHydrating && pushTreeFork(returnFiber, newIdx);\n    return resultingFirstChild;\n  }\n  function reconcileChildrenIterator(\n    returnFiber,\n    currentFirstChild,\n    newChildren,\n    lanes\n  ) {\n    if (null == newChildren) throw Error(formatProdErrorMessage(151));\n    for (\n      var resultingFirstChild = null,\n        previousNewFiber = null,\n        oldFiber = currentFirstChild,\n        newIdx = (currentFirstChild = 0),\n        nextOldFiber = null,\n        step = newChildren.next();\n      null !== oldFiber && !step.done;\n      newIdx++, step = newChildren.next()\n    ) {\n      oldFiber.index > newIdx\n        ? ((nextOldFiber = oldFiber), (oldFiber = null))\n        : (nextOldFiber = oldFiber.sibling);\n      var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);\n      if (null === newFiber) {\n        null === oldFiber && (oldFiber = nextOldFiber);\n        break;\n      }\n      shouldTrackSideEffects &&\n        oldFiber &&\n        null === newFiber.alternate &&\n        deleteChild(returnFiber, oldFiber);\n      currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);\n      null === previousNewFiber\n        ? (resultingFirstChild = newFiber)\n        : (previousNewFiber.sibling = newFiber);\n      previousNewFiber = newFiber;\n      oldFiber = nextOldFiber;\n    }\n    if (step.done)\n      return (\n        deleteRemainingChildren(returnFiber, oldFiber),\n        isHydrating && pushTreeFork(returnFiber, newIdx),\n        resultingFirstChild\n      );\n    if (null === oldFiber) {\n      for (; !step.done; newIdx++, step = newChildren.next())\n        (step = createChild(returnFiber, step.value, lanes)),\n          null !== step &&\n            ((currentFirstChild = placeChild(step, currentFirstChild, newIdx)),\n            null === previousNewFiber\n              ? (resultingFirstChild = step)\n              : (previousNewFiber.sibling = step),\n            (previousNewFiber = step));\n      isHydrating && pushTreeFork(returnFiber, newIdx);\n      return resultingFirstChild;\n    }\n    for (\n      oldFiber = mapRemainingChildren(oldFiber);\n      !step.done;\n      newIdx++, step = newChildren.next()\n    )\n      (step = updateFromMap(oldFiber, returnFiber, newIdx, step.value, lanes)),\n        null !== step &&\n          (shouldTrackSideEffects &&\n            null !== step.alternate &&\n            oldFiber.delete(null === step.key ? newIdx : step.key),\n          (currentFirstChild = placeChild(step, currentFirstChild, newIdx)),\n          null === previousNewFiber\n            ? (resultingFirstChild = step)\n            : (previousNewFiber.sibling = step),\n          (previousNewFiber = step));\n    shouldTrackSideEffects &&\n      oldFiber.forEach(function (child) {\n        return deleteChild(returnFiber, child);\n      });\n    isHydrating && pushTreeFork(returnFiber, newIdx);\n    return resultingFirstChild;\n  }\n  function reconcileChildFibersImpl(\n    returnFiber,\n    currentFirstChild,\n    newChild,\n    lanes\n  ) {\n    \"object\" === typeof newChild &&\n      null !== newChild &&\n      newChild.type === REACT_FRAGMENT_TYPE &&\n      null === newChild.key &&\n      (newChild = newChild.props.children);\n    if (\"object\" === typeof newChild && null !== newChild) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n          a: {\n            for (var key = newChild.key; null !== currentFirstChild; ) {\n              if (currentFirstChild.key === key) {\n                key = newChild.type;\n                if (key === REACT_FRAGMENT_TYPE) {\n                  if (7 === currentFirstChild.tag) {\n                    deleteRemainingChildren(\n                      returnFiber,\n                      currentFirstChild.sibling\n                    );\n                    lanes = useFiber(\n                      currentFirstChild,\n                      newChild.props.children\n                    );\n                    lanes.return = returnFiber;\n                    returnFiber = lanes;\n                    break a;\n                  }\n                } else if (\n                  currentFirstChild.elementType === key ||\n                  (\"object\" === typeof key &&\n                    null !== key &&\n                    key.$$typeof === REACT_LAZY_TYPE &&\n                    resolveLazy(key) === currentFirstChild.type)\n                ) {\n                  deleteRemainingChildren(\n                    returnFiber,\n                    currentFirstChild.sibling\n                  );\n                  lanes = useFiber(currentFirstChild, newChild.props);\n                  coerceRef(lanes, newChild);\n                  lanes.return = returnFiber;\n                  returnFiber = lanes;\n                  break a;\n                }\n                deleteRemainingChildren(returnFiber, currentFirstChild);\n                break;\n              } else deleteChild(returnFiber, currentFirstChild);\n              currentFirstChild = currentFirstChild.sibling;\n            }\n            newChild.type === REACT_FRAGMENT_TYPE\n              ? ((lanes = createFiberFromFragment(\n                  newChild.props.children,\n                  returnFiber.mode,\n                  lanes,\n                  newChild.key\n                )),\n                (lanes.return = returnFiber),\n                (returnFiber = lanes))\n              : ((lanes = createFiberFromTypeAndProps(\n                  newChild.type,\n                  newChild.key,\n                  newChild.props,\n                  null,\n                  returnFiber.mode,\n                  lanes\n                )),\n                coerceRef(lanes, newChild),\n                (lanes.return = returnFiber),\n                (returnFiber = lanes));\n          }\n          return placeSingleChild(returnFiber);\n        case REACT_PORTAL_TYPE:\n          a: {\n            for (key = newChild.key; null !== currentFirstChild; ) {\n              if (currentFirstChild.key === key)\n                if (\n                  4 === currentFirstChild.tag &&\n                  currentFirstChild.stateNode.containerInfo ===\n                    newChild.containerInfo &&\n                  currentFirstChild.stateNode.implementation ===\n                    newChild.implementation\n                ) {\n                  deleteRemainingChildren(\n                    returnFiber,\n                    currentFirstChild.sibling\n                  );\n                  lanes = useFiber(currentFirstChild, newChild.children || []);\n                  lanes.return = returnFiber;\n                  returnFiber = lanes;\n                  break a;\n                } else {\n                  deleteRemainingChildren(returnFiber, currentFirstChild);\n                  break;\n                }\n              else deleteChild(returnFiber, currentFirstChild);\n              currentFirstChild = currentFirstChild.sibling;\n            }\n            lanes = createFiberFromPortal(newChild, returnFiber.mode, lanes);\n            lanes.return = returnFiber;\n            returnFiber = lanes;\n          }\n          return placeSingleChild(returnFiber);\n        case REACT_LAZY_TYPE:\n          return (\n            (key = newChild._init),\n            (newChild = key(newChild._payload)),\n            reconcileChildFibersImpl(\n              returnFiber,\n              currentFirstChild,\n              newChild,\n              lanes\n            )\n          );\n      }\n      if (isArrayImpl(newChild))\n        return reconcileChildrenArray(\n          returnFiber,\n          currentFirstChild,\n          newChild,\n          lanes\n        );\n      if (getIteratorFn(newChild)) {\n        key = getIteratorFn(newChild);\n        if (\"function\" !== typeof key) throw Error(formatProdErrorMessage(150));\n        newChild = key.call(newChild);\n        return reconcileChildrenIterator(\n          returnFiber,\n          currentFirstChild,\n          newChild,\n          lanes\n        );\n      }\n      if (\"function\" === typeof newChild.then)\n        return reconcileChildFibersImpl(\n          returnFiber,\n          currentFirstChild,\n          unwrapThenable(newChild),\n          lanes\n        );\n      if (newChild.$$typeof === REACT_CONTEXT_TYPE)\n        return reconcileChildFibersImpl(\n          returnFiber,\n          currentFirstChild,\n          readContextDuringReconciliation(returnFiber, newChild),\n          lanes\n        );\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n    return (\"string\" === typeof newChild && \"\" !== newChild) ||\n      \"number\" === typeof newChild ||\n      \"bigint\" === typeof newChild\n      ? ((newChild = \"\" + newChild),\n        null !== currentFirstChild && 6 === currentFirstChild.tag\n          ? (deleteRemainingChildren(returnFiber, currentFirstChild.sibling),\n            (lanes = useFiber(currentFirstChild, newChild)),\n            (lanes.return = returnFiber),\n            (returnFiber = lanes))\n          : (deleteRemainingChildren(returnFiber, currentFirstChild),\n            (lanes = createFiberFromText(newChild, returnFiber.mode, lanes)),\n            (lanes.return = returnFiber),\n            (returnFiber = lanes)),\n        placeSingleChild(returnFiber))\n      : deleteRemainingChildren(returnFiber, currentFirstChild);\n  }\n  return function (returnFiber, currentFirstChild, newChild, lanes) {\n    try {\n      thenableIndexCounter$1 = 0;\n      var firstChildFiber = reconcileChildFibersImpl(\n        returnFiber,\n        currentFirstChild,\n        newChild,\n        lanes\n      );\n      thenableState$1 = null;\n      return firstChildFiber;\n    } catch (x) {\n      if (x === SuspenseException) throw x;\n      var fiber = createFiberImplClass(29, x, null, returnFiber.mode);\n      fiber.lanes = lanes;\n      fiber.return = returnFiber;\n      return fiber;\n    } finally {\n    }\n  };\n}\nvar reconcileChildFibers = createChildReconciler(!0),\n  mountChildFibers = createChildReconciler(!1),\n  currentTreeHiddenStackCursor = createCursor(null),\n  prevEntangledRenderLanesCursor = createCursor(0);\nfunction pushHiddenContext(fiber, context) {\n  fiber = entangledRenderLanes;\n  push(prevEntangledRenderLanesCursor, fiber);\n  push(currentTreeHiddenStackCursor, context);\n  entangledRenderLanes = fiber | context.baseLanes;\n}\nfunction reuseHiddenContextOnStack() {\n  push(prevEntangledRenderLanesCursor, entangledRenderLanes);\n  push(currentTreeHiddenStackCursor, currentTreeHiddenStackCursor.current);\n}\nfunction popHiddenContext() {\n  entangledRenderLanes = prevEntangledRenderLanesCursor.current;\n  pop(currentTreeHiddenStackCursor);\n  pop(prevEntangledRenderLanesCursor);\n}\nvar suspenseHandlerStackCursor = createCursor(null),\n  shellBoundary = null;\nfunction pushPrimaryTreeSuspenseHandler(handler) {\n  var current = handler.alternate;\n  push(suspenseStackCursor, suspenseStackCursor.current & 1);\n  push(suspenseHandlerStackCursor, handler);\n  null === shellBoundary &&\n    (null === current || null !== currentTreeHiddenStackCursor.current\n      ? (shellBoundary = handler)\n      : null !== current.memoizedState && (shellBoundary = handler));\n}\nfunction pushOffscreenSuspenseHandler(fiber) {\n  if (22 === fiber.tag) {\n    if (\n      (push(suspenseStackCursor, suspenseStackCursor.current),\n      push(suspenseHandlerStackCursor, fiber),\n      null === shellBoundary)\n    ) {\n      var current = fiber.alternate;\n      null !== current &&\n        null !== current.memoizedState &&\n        (shellBoundary = fiber);\n    }\n  } else reuseSuspenseHandlerOnStack(fiber);\n}\nfunction reuseSuspenseHandlerOnStack() {\n  push(suspenseStackCursor, suspenseStackCursor.current);\n  push(suspenseHandlerStackCursor, suspenseHandlerStackCursor.current);\n}\nfunction popSuspenseHandler(fiber) {\n  pop(suspenseHandlerStackCursor);\n  shellBoundary === fiber && (shellBoundary = null);\n  pop(suspenseStackCursor);\n}\nvar suspenseStackCursor = createCursor(0);\nfunction findFirstSuspended(row) {\n  for (var node = row; null !== node; ) {\n    if (13 === node.tag) {\n      var state = node.memoizedState;\n      if (\n        null !== state &&\n        ((state = state.dehydrated),\n        null === state || \"$?\" === state.data || \"$!\" === state.data)\n      )\n        return node;\n    } else if (19 === node.tag && void 0 !== node.memoizedProps.revealOrder) {\n      if (0 !== (node.flags & 128)) return node;\n    } else if (null !== node.child) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n    if (node === row) break;\n    for (; null === node.sibling; ) {\n      if (null === node.return || node.return === row) return null;\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n  return null;\n}\nvar AbortControllerLocal =\n    \"undefined\" !== typeof AbortController\n      ? AbortController\n      : function () {\n          var listeners = [],\n            signal = (this.signal = {\n              aborted: !1,\n              addEventListener: function (type, listener) {\n                listeners.push(listener);\n              }\n            });\n          this.abort = function () {\n            signal.aborted = !0;\n            listeners.forEach(function (listener) {\n              return listener();\n            });\n          };\n        },\n  scheduleCallback$2 = Scheduler.unstable_scheduleCallback,\n  NormalPriority = Scheduler.unstable_NormalPriority,\n  CacheContext = {\n    $$typeof: REACT_CONTEXT_TYPE,\n    Consumer: null,\n    Provider: null,\n    _currentValue: null,\n    _currentValue2: null,\n    _threadCount: 0\n  };\nfunction createCache() {\n  return {\n    controller: new AbortControllerLocal(),\n    data: new Map(),\n    refCount: 0\n  };\n}\nfunction releaseCache(cache) {\n  cache.refCount--;\n  0 === cache.refCount &&\n    scheduleCallback$2(NormalPriority, function () {\n      cache.controller.abort();\n    });\n}\nvar currentEntangledListeners = null,\n  currentEntangledPendingCount = 0,\n  currentEntangledLane = 0,\n  currentEntangledActionThenable = null;\nfunction entangleAsyncAction(transition, thenable) {\n  if (null === currentEntangledListeners) {\n    var entangledListeners = (currentEntangledListeners = []);\n    currentEntangledPendingCount = 0;\n    currentEntangledLane = requestTransitionLane();\n    currentEntangledActionThenable = {\n      status: \"pending\",\n      value: void 0,\n      then: function (resolve) {\n        entangledListeners.push(resolve);\n      }\n    };\n  }\n  currentEntangledPendingCount++;\n  thenable.then(pingEngtangledActionScope, pingEngtangledActionScope);\n  return thenable;\n}\nfunction pingEngtangledActionScope() {\n  if (\n    0 === --currentEntangledPendingCount &&\n    null !== currentEntangledListeners\n  ) {\n    null !== currentEntangledActionThenable &&\n      (currentEntangledActionThenable.status = \"fulfilled\");\n    var listeners = currentEntangledListeners;\n    currentEntangledListeners = null;\n    currentEntangledLane = 0;\n    currentEntangledActionThenable = null;\n    for (var i = 0; i < listeners.length; i++) (0, listeners[i])();\n  }\n}\nfunction chainThenableValue(thenable, result) {\n  var listeners = [],\n    thenableWithOverride = {\n      status: \"pending\",\n      value: null,\n      reason: null,\n      then: function (resolve) {\n        listeners.push(resolve);\n      }\n    };\n  thenable.then(\n    function () {\n      thenableWithOverride.status = \"fulfilled\";\n      thenableWithOverride.value = result;\n      for (var i = 0; i < listeners.length; i++) (0, listeners[i])(result);\n    },\n    function (error) {\n      thenableWithOverride.status = \"rejected\";\n      thenableWithOverride.reason = error;\n      for (error = 0; error < listeners.length; error++)\n        (0, listeners[error])(void 0);\n    }\n  );\n  return thenableWithOverride;\n}\nvar prevOnStartTransitionFinish = ReactSharedInternals.S;\nReactSharedInternals.S = function (transition, returnValue) {\n  \"object\" === typeof returnValue &&\n    null !== returnValue &&\n    \"function\" === typeof returnValue.then &&\n    entangleAsyncAction(transition, returnValue);\n  null !== prevOnStartTransitionFinish &&\n    prevOnStartTransitionFinish(transition, returnValue);\n};\nvar resumedCache = createCursor(null);\nfunction peekCacheFromPool() {\n  var cacheResumedFromPreviousRender = resumedCache.current;\n  return null !== cacheResumedFromPreviousRender\n    ? cacheResumedFromPreviousRender\n    : workInProgressRoot.pooledCache;\n}\nfunction pushTransition(offscreenWorkInProgress, prevCachePool) {\n  null === prevCachePool\n    ? push(resumedCache, resumedCache.current)\n    : push(resumedCache, prevCachePool.pool);\n}\nfunction getSuspendedCache() {\n  var cacheFromPool = peekCacheFromPool();\n  return null === cacheFromPool\n    ? null\n    : { parent: CacheContext._currentValue, pool: cacheFromPool };\n}\nvar renderLanes = 0,\n  currentlyRenderingFiber$1 = null,\n  currentHook = null,\n  workInProgressHook = null,\n  didScheduleRenderPhaseUpdate = !1,\n  didScheduleRenderPhaseUpdateDuringThisPass = !1,\n  shouldDoubleInvokeUserFnsInHooksDEV = !1,\n  localIdCounter = 0,\n  thenableIndexCounter = 0,\n  thenableState = null,\n  globalClientIdCounter = 0;\nfunction throwInvalidHookError() {\n  throw Error(formatProdErrorMessage(321));\n}\nfunction areHookInputsEqual(nextDeps, prevDeps) {\n  if (null === prevDeps) return !1;\n  for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++)\n    if (!objectIs(nextDeps[i], prevDeps[i])) return !1;\n  return !0;\n}\nfunction renderWithHooks(\n  current,\n  workInProgress,\n  Component,\n  props,\n  secondArg,\n  nextRenderLanes\n) {\n  renderLanes = nextRenderLanes;\n  currentlyRenderingFiber$1 = workInProgress;\n  workInProgress.memoizedState = null;\n  workInProgress.updateQueue = null;\n  workInProgress.lanes = 0;\n  ReactSharedInternals.H =\n    null === current || null === current.memoizedState\n      ? HooksDispatcherOnMount\n      : HooksDispatcherOnUpdate;\n  shouldDoubleInvokeUserFnsInHooksDEV = !1;\n  nextRenderLanes = Component(props, secondArg);\n  shouldDoubleInvokeUserFnsInHooksDEV = !1;\n  didScheduleRenderPhaseUpdateDuringThisPass &&\n    (nextRenderLanes = renderWithHooksAgain(\n      workInProgress,\n      Component,\n      props,\n      secondArg\n    ));\n  finishRenderingHooks(current);\n  return nextRenderLanes;\n}\nfunction finishRenderingHooks(current) {\n  ReactSharedInternals.H = ContextOnlyDispatcher;\n  var didRenderTooFewHooks = null !== currentHook && null !== currentHook.next;\n  renderLanes = 0;\n  workInProgressHook = currentHook = currentlyRenderingFiber$1 = null;\n  didScheduleRenderPhaseUpdate = !1;\n  thenableIndexCounter = 0;\n  thenableState = null;\n  if (didRenderTooFewHooks) throw Error(formatProdErrorMessage(300));\n  null === current ||\n    didReceiveUpdate ||\n    ((current = current.dependencies),\n    null !== current &&\n      checkIfContextChanged(current) &&\n      (didReceiveUpdate = !0));\n}\nfunction renderWithHooksAgain(workInProgress, Component, props, secondArg) {\n  currentlyRenderingFiber$1 = workInProgress;\n  var numberOfReRenders = 0;\n  do {\n    didScheduleRenderPhaseUpdateDuringThisPass && (thenableState = null);\n    thenableIndexCounter = 0;\n    didScheduleRenderPhaseUpdateDuringThisPass = !1;\n    if (25 <= numberOfReRenders) throw Error(formatProdErrorMessage(301));\n    numberOfReRenders += 1;\n    workInProgressHook = currentHook = null;\n    if (null != workInProgress.updateQueue) {\n      var children = workInProgress.updateQueue;\n      children.lastEffect = null;\n      children.events = null;\n      children.stores = null;\n      null != children.memoCache && (children.memoCache.index = 0);\n    }\n    ReactSharedInternals.H = HooksDispatcherOnRerender;\n    children = Component(props, secondArg);\n  } while (didScheduleRenderPhaseUpdateDuringThisPass);\n  return children;\n}\nfunction TransitionAwareHostComponent() {\n  var dispatcher = ReactSharedInternals.H,\n    maybeThenable = dispatcher.useState()[0];\n  maybeThenable =\n    \"function\" === typeof maybeThenable.then\n      ? useThenable(maybeThenable)\n      : maybeThenable;\n  dispatcher = dispatcher.useState()[0];\n  (null !== currentHook ? currentHook.memoizedState : null) !== dispatcher &&\n    (currentlyRenderingFiber$1.flags |= 1024);\n  return maybeThenable;\n}\nfunction checkDidRenderIdHook() {\n  var didRenderIdHook = 0 !== localIdCounter;\n  localIdCounter = 0;\n  return didRenderIdHook;\n}\nfunction bailoutHooks(current, workInProgress, lanes) {\n  workInProgress.updateQueue = current.updateQueue;\n  workInProgress.flags &= -2053;\n  current.lanes &= ~lanes;\n}\nfunction resetHooksOnUnwind(workInProgress) {\n  if (didScheduleRenderPhaseUpdate) {\n    for (\n      workInProgress = workInProgress.memoizedState;\n      null !== workInProgress;\n\n    ) {\n      var queue = workInProgress.queue;\n      null !== queue && (queue.pending = null);\n      workInProgress = workInProgress.next;\n    }\n    didScheduleRenderPhaseUpdate = !1;\n  }\n  renderLanes = 0;\n  workInProgressHook = currentHook = currentlyRenderingFiber$1 = null;\n  didScheduleRenderPhaseUpdateDuringThisPass = !1;\n  thenableIndexCounter = localIdCounter = 0;\n  thenableState = null;\n}\nfunction mountWorkInProgressHook() {\n  var hook = {\n    memoizedState: null,\n    baseState: null,\n    baseQueue: null,\n    queue: null,\n    next: null\n  };\n  null === workInProgressHook\n    ? (currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook)\n    : (workInProgressHook = workInProgressHook.next = hook);\n  return workInProgressHook;\n}\nfunction updateWorkInProgressHook() {\n  if (null === currentHook) {\n    var nextCurrentHook = currentlyRenderingFiber$1.alternate;\n    nextCurrentHook =\n      null !== nextCurrentHook ? nextCurrentHook.memoizedState : null;\n  } else nextCurrentHook = currentHook.next;\n  var nextWorkInProgressHook =\n    null === workInProgressHook\n      ? currentlyRenderingFiber$1.memoizedState\n      : workInProgressHook.next;\n  if (null !== nextWorkInProgressHook)\n    (workInProgressHook = nextWorkInProgressHook),\n      (currentHook = nextCurrentHook);\n  else {\n    if (null === nextCurrentHook) {\n      if (null === currentlyRenderingFiber$1.alternate)\n        throw Error(formatProdErrorMessage(467));\n      throw Error(formatProdErrorMessage(310));\n    }\n    currentHook = nextCurrentHook;\n    nextCurrentHook = {\n      memoizedState: currentHook.memoizedState,\n      baseState: currentHook.baseState,\n      baseQueue: currentHook.baseQueue,\n      queue: currentHook.queue,\n      next: null\n    };\n    null === workInProgressHook\n      ? (currentlyRenderingFiber$1.memoizedState = workInProgressHook =\n          nextCurrentHook)\n      : (workInProgressHook = workInProgressHook.next = nextCurrentHook);\n  }\n  return workInProgressHook;\n}\nvar createFunctionComponentUpdateQueue;\ncreateFunctionComponentUpdateQueue = function () {\n  return { lastEffect: null, events: null, stores: null, memoCache: null };\n};\nfunction useThenable(thenable) {\n  var index = thenableIndexCounter;\n  thenableIndexCounter += 1;\n  null === thenableState && (thenableState = []);\n  thenable = trackUsedThenable(thenableState, thenable, index);\n  index = currentlyRenderingFiber$1;\n  null ===\n    (null === workInProgressHook\n      ? index.memoizedState\n      : workInProgressHook.next) &&\n    ((index = index.alternate),\n    (ReactSharedInternals.H =\n      null === index || null === index.memoizedState\n        ? HooksDispatcherOnMount\n        : HooksDispatcherOnUpdate));\n  return thenable;\n}\nfunction use(usable) {\n  if (null !== usable && \"object\" === typeof usable) {\n    if (\"function\" === typeof usable.then) return useThenable(usable);\n    if (usable.$$typeof === REACT_CONTEXT_TYPE) return readContext(usable);\n  }\n  throw Error(formatProdErrorMessage(438, String(usable)));\n}\nfunction useMemoCache(size) {\n  var memoCache = null,\n    updateQueue = currentlyRenderingFiber$1.updateQueue;\n  null !== updateQueue && (memoCache = updateQueue.memoCache);\n  if (null == memoCache) {\n    var current = currentlyRenderingFiber$1.alternate;\n    null !== current &&\n      ((current = current.updateQueue),\n      null !== current &&\n        ((current = current.memoCache),\n        null != current &&\n          (memoCache = {\n            data: current.data.map(function (array) {\n              return array.slice();\n            }),\n            index: 0\n          })));\n  }\n  null == memoCache && (memoCache = { data: [], index: 0 });\n  null === updateQueue &&\n    ((updateQueue = createFunctionComponentUpdateQueue()),\n    (currentlyRenderingFiber$1.updateQueue = updateQueue));\n  updateQueue.memoCache = memoCache;\n  updateQueue = memoCache.data[memoCache.index];\n  if (void 0 === updateQueue)\n    for (\n      updateQueue = memoCache.data[memoCache.index] = Array(size), current = 0;\n      current < size;\n      current++\n    )\n      updateQueue[current] = REACT_MEMO_CACHE_SENTINEL;\n  memoCache.index++;\n  return updateQueue;\n}\nfunction basicStateReducer(state, action) {\n  return \"function\" === typeof action ? action(state) : action;\n}\nfunction updateReducer(reducer) {\n  var hook = updateWorkInProgressHook();\n  return updateReducerImpl(hook, currentHook, reducer);\n}\nfunction updateReducerImpl(hook, current, reducer) {\n  var queue = hook.queue;\n  if (null === queue) throw Error(formatProdErrorMessage(311));\n  queue.lastRenderedReducer = reducer;\n  var baseQueue = hook.baseQueue,\n    pendingQueue = queue.pending;\n  if (null !== pendingQueue) {\n    if (null !== baseQueue) {\n      var baseFirst = baseQueue.next;\n      baseQueue.next = pendingQueue.next;\n      pendingQueue.next = baseFirst;\n    }\n    current.baseQueue = baseQueue = pendingQueue;\n    queue.pending = null;\n  }\n  pendingQueue = hook.baseState;\n  if (null === baseQueue) hook.memoizedState = pendingQueue;\n  else {\n    current = baseQueue.next;\n    var newBaseQueueFirst = (baseFirst = null),\n      newBaseQueueLast = null,\n      update = current,\n      didReadFromEntangledAsyncAction$54 = !1;\n    do {\n      var updateLane = update.lane & -536870913;\n      if (\n        updateLane !== update.lane\n          ? (workInProgressRootRenderLanes & updateLane) === updateLane\n          : (renderLanes & updateLane) === updateLane\n      ) {\n        var revertLane = update.revertLane;\n        if (0 === revertLane)\n          null !== newBaseQueueLast &&\n            (newBaseQueueLast = newBaseQueueLast.next =\n              {\n                lane: 0,\n                revertLane: 0,\n                action: update.action,\n                hasEagerState: update.hasEagerState,\n                eagerState: update.eagerState,\n                next: null\n              }),\n            updateLane === currentEntangledLane &&\n              (didReadFromEntangledAsyncAction$54 = !0);\n        else if ((renderLanes & revertLane) === revertLane) {\n          update = update.next;\n          revertLane === currentEntangledLane &&\n            (didReadFromEntangledAsyncAction$54 = !0);\n          continue;\n        } else\n          (updateLane = {\n            lane: 0,\n            revertLane: update.revertLane,\n            action: update.action,\n            hasEagerState: update.hasEagerState,\n            eagerState: update.eagerState,\n            next: null\n          }),\n            null === newBaseQueueLast\n              ? ((newBaseQueueFirst = newBaseQueueLast = updateLane),\n                (baseFirst = pendingQueue))\n              : (newBaseQueueLast = newBaseQueueLast.next = updateLane),\n            (currentlyRenderingFiber$1.lanes |= revertLane),\n            (workInProgressRootSkippedLanes |= revertLane);\n        updateLane = update.action;\n        shouldDoubleInvokeUserFnsInHooksDEV &&\n          reducer(pendingQueue, updateLane);\n        pendingQueue = update.hasEagerState\n          ? update.eagerState\n          : reducer(pendingQueue, updateLane);\n      } else\n        (revertLane = {\n          lane: updateLane,\n          revertLane: update.revertLane,\n          action: update.action,\n          hasEagerState: update.hasEagerState,\n          eagerState: update.eagerState,\n          next: null\n        }),\n          null === newBaseQueueLast\n            ? ((newBaseQueueFirst = newBaseQueueLast = revertLane),\n              (baseFirst = pendingQueue))\n            : (newBaseQueueLast = newBaseQueueLast.next = revertLane),\n          (currentlyRenderingFiber$1.lanes |= updateLane),\n          (workInProgressRootSkippedLanes |= updateLane);\n      update = update.next;\n    } while (null !== update && update !== current);\n    null === newBaseQueueLast\n      ? (baseFirst = pendingQueue)\n      : (newBaseQueueLast.next = newBaseQueueFirst);\n    if (\n      !objectIs(pendingQueue, hook.memoizedState) &&\n      ((didReceiveUpdate = !0),\n      didReadFromEntangledAsyncAction$54 &&\n        ((reducer = currentEntangledActionThenable), null !== reducer))\n    )\n      throw reducer;\n    hook.memoizedState = pendingQueue;\n    hook.baseState = baseFirst;\n    hook.baseQueue = newBaseQueueLast;\n    queue.lastRenderedState = pendingQueue;\n  }\n  null === baseQueue && (queue.lanes = 0);\n  return [hook.memoizedState, queue.dispatch];\n}\nfunction rerenderReducer(reducer) {\n  var hook = updateWorkInProgressHook(),\n    queue = hook.queue;\n  if (null === queue) throw Error(formatProdErrorMessage(311));\n  queue.lastRenderedReducer = reducer;\n  var dispatch = queue.dispatch,\n    lastRenderPhaseUpdate = queue.pending,\n    newState = hook.memoizedState;\n  if (null !== lastRenderPhaseUpdate) {\n    queue.pending = null;\n    var update = (lastRenderPhaseUpdate = lastRenderPhaseUpdate.next);\n    do (newState = reducer(newState, update.action)), (update = update.next);\n    while (update !== lastRenderPhaseUpdate);\n    objectIs(newState, hook.memoizedState) || (didReceiveUpdate = !0);\n    hook.memoizedState = newState;\n    null === hook.baseQueue && (hook.baseState = newState);\n    queue.lastRenderedState = newState;\n  }\n  return [newState, dispatch];\n}\nfunction updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {\n  var fiber = currentlyRenderingFiber$1,\n    hook = updateWorkInProgressHook(),\n    isHydrating$jscomp$0 = isHydrating;\n  if (isHydrating$jscomp$0) {\n    if (void 0 === getServerSnapshot) throw Error(formatProdErrorMessage(407));\n    getServerSnapshot = getServerSnapshot();\n  } else getServerSnapshot = getSnapshot();\n  var snapshotChanged = !objectIs(\n    (currentHook || hook).memoizedState,\n    getServerSnapshot\n  );\n  snapshotChanged &&\n    ((hook.memoizedState = getServerSnapshot), (didReceiveUpdate = !0));\n  hook = hook.queue;\n  updateEffect(subscribeToStore.bind(null, fiber, hook, subscribe), [\n    subscribe\n  ]);\n  if (\n    hook.getSnapshot !== getSnapshot ||\n    snapshotChanged ||\n    (null !== workInProgressHook && workInProgressHook.memoizedState.tag & 1)\n  ) {\n    fiber.flags |= 2048;\n    pushEffect(\n      9,\n      updateStoreInstance.bind(\n        null,\n        fiber,\n        hook,\n        getServerSnapshot,\n        getSnapshot\n      ),\n      { destroy: void 0 },\n      null\n    );\n    if (null === workInProgressRoot) throw Error(formatProdErrorMessage(349));\n    isHydrating$jscomp$0 ||\n      0 !== (renderLanes & 60) ||\n      pushStoreConsistencyCheck(fiber, getSnapshot, getServerSnapshot);\n  }\n  return getServerSnapshot;\n}\nfunction pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {\n  fiber.flags |= 16384;\n  fiber = { getSnapshot: getSnapshot, value: renderedSnapshot };\n  getSnapshot = currentlyRenderingFiber$1.updateQueue;\n  null === getSnapshot\n    ? ((getSnapshot = createFunctionComponentUpdateQueue()),\n      (currentlyRenderingFiber$1.updateQueue = getSnapshot),\n      (getSnapshot.stores = [fiber]))\n    : ((renderedSnapshot = getSnapshot.stores),\n      null === renderedSnapshot\n        ? (getSnapshot.stores = [fiber])\n        : renderedSnapshot.push(fiber));\n}\nfunction updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {\n  inst.value = nextSnapshot;\n  inst.getSnapshot = getSnapshot;\n  checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);\n}\nfunction subscribeToStore(fiber, inst, subscribe) {\n  return subscribe(function () {\n    checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);\n  });\n}\nfunction checkIfSnapshotChanged(inst) {\n  var latestGetSnapshot = inst.getSnapshot;\n  inst = inst.value;\n  try {\n    var nextValue = latestGetSnapshot();\n    return !objectIs(inst, nextValue);\n  } catch (error) {\n    return !0;\n  }\n}\nfunction forceStoreRerender(fiber) {\n  var root = enqueueConcurrentRenderForLane(fiber, 2);\n  null !== root && scheduleUpdateOnFiber(root, fiber, 2);\n}\nfunction mountStateImpl(initialState) {\n  var hook = mountWorkInProgressHook();\n  if (\"function\" === typeof initialState) {\n    var initialStateInitializer = initialState;\n    initialState = initialStateInitializer();\n    if (shouldDoubleInvokeUserFnsInHooksDEV) {\n      setIsStrictModeForDevtools(!0);\n      try {\n        initialStateInitializer();\n      } finally {\n        setIsStrictModeForDevtools(!1);\n      }\n    }\n  }\n  hook.memoizedState = hook.baseState = initialState;\n  hook.queue = {\n    pending: null,\n    lanes: 0,\n    dispatch: null,\n    lastRenderedReducer: basicStateReducer,\n    lastRenderedState: initialState\n  };\n  return hook;\n}\nfunction updateOptimisticImpl(hook, current, passthrough, reducer) {\n  hook.baseState = passthrough;\n  return updateReducerImpl(\n    hook,\n    currentHook,\n    \"function\" === typeof reducer ? reducer : basicStateReducer\n  );\n}\nfunction dispatchActionState(\n  fiber,\n  actionQueue,\n  setPendingState,\n  setState,\n  payload\n) {\n  if (isRenderPhaseUpdate(fiber)) throw Error(formatProdErrorMessage(485));\n  fiber = actionQueue.action;\n  if (null !== fiber) {\n    var actionNode = {\n      payload: payload,\n      action: fiber,\n      next: null,\n      isTransition: !0,\n      status: \"pending\",\n      value: null,\n      reason: null,\n      listeners: [],\n      then: function (listener) {\n        actionNode.listeners.push(listener);\n      }\n    };\n    null !== ReactSharedInternals.T\n      ? setPendingState(!0)\n      : (actionNode.isTransition = !1);\n    setState(actionNode);\n    setPendingState = actionQueue.pending;\n    null === setPendingState\n      ? ((actionNode.next = actionQueue.pending = actionNode),\n        runActionStateAction(actionQueue, actionNode))\n      : ((actionNode.next = setPendingState.next),\n        (actionQueue.pending = setPendingState.next = actionNode));\n  }\n}\nfunction runActionStateAction(actionQueue, node) {\n  var action = node.action,\n    payload = node.payload,\n    prevState = actionQueue.state;\n  if (node.isTransition) {\n    var prevTransition = ReactSharedInternals.T,\n      currentTransition = {};\n    ReactSharedInternals.T = currentTransition;\n    try {\n      var returnValue = action(prevState, payload),\n        onStartTransitionFinish = ReactSharedInternals.S;\n      null !== onStartTransitionFinish &&\n        onStartTransitionFinish(currentTransition, returnValue);\n      handleActionReturnValue(actionQueue, node, returnValue);\n    } catch (error) {\n      onActionError(actionQueue, node, error);\n    } finally {\n      ReactSharedInternals.T = prevTransition;\n    }\n  } else\n    try {\n      (prevTransition = action(prevState, payload)),\n        handleActionReturnValue(actionQueue, node, prevTransition);\n    } catch (error$60) {\n      onActionError(actionQueue, node, error$60);\n    }\n}\nfunction handleActionReturnValue(actionQueue, node, returnValue) {\n  null !== returnValue &&\n  \"object\" === typeof returnValue &&\n  \"function\" === typeof returnValue.then\n    ? returnValue.then(\n        function (nextState) {\n          onActionSuccess(actionQueue, node, nextState);\n        },\n        function (error) {\n          return onActionError(actionQueue, node, error);\n        }\n      )\n    : onActionSuccess(actionQueue, node, returnValue);\n}\nfunction onActionSuccess(actionQueue, actionNode, nextState) {\n  actionNode.status = \"fulfilled\";\n  actionNode.value = nextState;\n  notifyActionListeners(actionNode);\n  actionQueue.state = nextState;\n  actionNode = actionQueue.pending;\n  null !== actionNode &&\n    ((nextState = actionNode.next),\n    nextState === actionNode\n      ? (actionQueue.pending = null)\n      : ((nextState = nextState.next),\n        (actionNode.next = nextState),\n        runActionStateAction(actionQueue, nextState)));\n}\nfunction onActionError(actionQueue, actionNode, error) {\n  var last = actionQueue.pending;\n  actionQueue.pending = null;\n  if (null !== last) {\n    last = last.next;\n    do\n      (actionNode.status = \"rejected\"),\n        (actionNode.reason = error),\n        notifyActionListeners(actionNode),\n        (actionNode = actionNode.next);\n    while (actionNode !== last);\n  }\n  actionQueue.action = null;\n}\nfunction notifyActionListeners(actionNode) {\n  actionNode = actionNode.listeners;\n  for (var i = 0; i < actionNode.length; i++) (0, actionNode[i])();\n}\nfunction actionStateReducer(oldState, newState) {\n  return newState;\n}\nfunction mountActionState(action, initialStateProp) {\n  if (isHydrating) {\n    var ssrFormState = workInProgressRoot.formState;\n    if (null !== ssrFormState) {\n      a: {\n        var JSCompiler_inline_result = currentlyRenderingFiber$1;\n        if (isHydrating) {\n          if (nextHydratableInstance) {\n            b: {\n              var JSCompiler_inline_result$jscomp$0 = nextHydratableInstance;\n              for (\n                var inRootOrSingleton = rootOrSingletonContext;\n                8 !== JSCompiler_inline_result$jscomp$0.nodeType;\n\n              ) {\n                if (!inRootOrSingleton) {\n                  JSCompiler_inline_result$jscomp$0 = null;\n                  break b;\n                }\n                JSCompiler_inline_result$jscomp$0 = getNextHydratable(\n                  JSCompiler_inline_result$jscomp$0.nextSibling\n                );\n                if (null === JSCompiler_inline_result$jscomp$0) {\n                  JSCompiler_inline_result$jscomp$0 = null;\n                  break b;\n                }\n              }\n              inRootOrSingleton = JSCompiler_inline_result$jscomp$0.data;\n              JSCompiler_inline_result$jscomp$0 =\n                \"F!\" === inRootOrSingleton || \"F\" === inRootOrSingleton\n                  ? JSCompiler_inline_result$jscomp$0\n                  : null;\n            }\n            if (JSCompiler_inline_result$jscomp$0) {\n              nextHydratableInstance = getNextHydratable(\n                JSCompiler_inline_result$jscomp$0.nextSibling\n              );\n              JSCompiler_inline_result =\n                \"F!\" === JSCompiler_inline_result$jscomp$0.data;\n              break a;\n            }\n          }\n          throwOnHydrationMismatch(JSCompiler_inline_result);\n        }\n        JSCompiler_inline_result = !1;\n      }\n      JSCompiler_inline_result && (initialStateProp = ssrFormState[0]);\n    }\n  }\n  ssrFormState = mountWorkInProgressHook();\n  ssrFormState.memoizedState = ssrFormState.baseState = initialStateProp;\n  JSCompiler_inline_result = {\n    pending: null,\n    lanes: 0,\n    dispatch: null,\n    lastRenderedReducer: actionStateReducer,\n    lastRenderedState: initialStateProp\n  };\n  ssrFormState.queue = JSCompiler_inline_result;\n  ssrFormState = dispatchSetState.bind(\n    null,\n    currentlyRenderingFiber$1,\n    JSCompiler_inline_result\n  );\n  JSCompiler_inline_result.dispatch = ssrFormState;\n  JSCompiler_inline_result = mountStateImpl(!1);\n  inRootOrSingleton = dispatchOptimisticSetState.bind(\n    null,\n    currentlyRenderingFiber$1,\n    !1,\n    JSCompiler_inline_result.queue\n  );\n  JSCompiler_inline_result = mountWorkInProgressHook();\n  JSCompiler_inline_result$jscomp$0 = {\n    state: initialStateProp,\n    dispatch: null,\n    action: action,\n    pending: null\n  };\n  JSCompiler_inline_result.queue = JSCompiler_inline_result$jscomp$0;\n  ssrFormState = dispatchActionState.bind(\n    null,\n    currentlyRenderingFiber$1,\n    JSCompiler_inline_result$jscomp$0,\n    inRootOrSingleton,\n    ssrFormState\n  );\n  JSCompiler_inline_result$jscomp$0.dispatch = ssrFormState;\n  JSCompiler_inline_result.memoizedState = action;\n  return [initialStateProp, ssrFormState, !1];\n}\nfunction updateActionState(action) {\n  var stateHook = updateWorkInProgressHook();\n  return updateActionStateImpl(stateHook, currentHook, action);\n}\nfunction updateActionStateImpl(stateHook, currentStateHook, action) {\n  currentStateHook = updateReducerImpl(\n    stateHook,\n    currentStateHook,\n    actionStateReducer\n  )[0];\n  stateHook = updateReducer(basicStateReducer)[0];\n  currentStateHook =\n    \"object\" === typeof currentStateHook &&\n    null !== currentStateHook &&\n    \"function\" === typeof currentStateHook.then\n      ? useThenable(currentStateHook)\n      : currentStateHook;\n  var actionQueueHook = updateWorkInProgressHook(),\n    actionQueue = actionQueueHook.queue,\n    dispatch = actionQueue.dispatch;\n  action !== actionQueueHook.memoizedState &&\n    ((currentlyRenderingFiber$1.flags |= 2048),\n    pushEffect(\n      9,\n      actionStateActionEffect.bind(null, actionQueue, action),\n      { destroy: void 0 },\n      null\n    ));\n  return [currentStateHook, dispatch, stateHook];\n}\nfunction actionStateActionEffect(actionQueue, action) {\n  actionQueue.action = action;\n}\nfunction rerenderActionState(action) {\n  var stateHook = updateWorkInProgressHook(),\n    currentStateHook = currentHook;\n  if (null !== currentStateHook)\n    return updateActionStateImpl(stateHook, currentStateHook, action);\n  updateWorkInProgressHook();\n  stateHook = stateHook.memoizedState;\n  currentStateHook = updateWorkInProgressHook();\n  var dispatch = currentStateHook.queue.dispatch;\n  currentStateHook.memoizedState = action;\n  return [stateHook, dispatch, !1];\n}\nfunction pushEffect(tag, create, inst, deps) {\n  tag = { tag: tag, create: create, inst: inst, deps: deps, next: null };\n  create = currentlyRenderingFiber$1.updateQueue;\n  null === create &&\n    ((create = createFunctionComponentUpdateQueue()),\n    (currentlyRenderingFiber$1.updateQueue = create));\n  inst = create.lastEffect;\n  null === inst\n    ? (create.lastEffect = tag.next = tag)\n    : ((deps = inst.next),\n      (inst.next = tag),\n      (tag.next = deps),\n      (create.lastEffect = tag));\n  return tag;\n}\nfunction updateRef() {\n  return updateWorkInProgressHook().memoizedState;\n}\nfunction mountEffectImpl(fiberFlags, hookFlags, create, deps) {\n  var hook = mountWorkInProgressHook();\n  currentlyRenderingFiber$1.flags |= fiberFlags;\n  hook.memoizedState = pushEffect(\n    1 | hookFlags,\n    create,\n    { destroy: void 0 },\n    void 0 === deps ? null : deps\n  );\n}\nfunction updateEffectImpl(fiberFlags, hookFlags, create, deps) {\n  var hook = updateWorkInProgressHook();\n  deps = void 0 === deps ? null : deps;\n  var inst = hook.memoizedState.inst;\n  null !== currentHook &&\n  null !== deps &&\n  areHookInputsEqual(deps, currentHook.memoizedState.deps)\n    ? (hook.memoizedState = pushEffect(hookFlags, create, inst, deps))\n    : ((currentlyRenderingFiber$1.flags |= fiberFlags),\n      (hook.memoizedState = pushEffect(1 | hookFlags, create, inst, deps)));\n}\nfunction mountEffect(create, deps) {\n  mountEffectImpl(8390656, 8, create, deps);\n}\nfunction updateEffect(create, deps) {\n  updateEffectImpl(2048, 8, create, deps);\n}\nfunction updateInsertionEffect(create, deps) {\n  return updateEffectImpl(4, 2, create, deps);\n}\nfunction updateLayoutEffect(create, deps) {\n  return updateEffectImpl(4, 4, create, deps);\n}\nfunction imperativeHandleEffect(create, ref) {\n  if (\"function\" === typeof ref) {\n    create = create();\n    var refCleanup = ref(create);\n    return function () {\n      \"function\" === typeof refCleanup ? refCleanup() : ref(null);\n    };\n  }\n  if (null !== ref && void 0 !== ref)\n    return (\n      (create = create()),\n      (ref.current = create),\n      function () {\n        ref.current = null;\n      }\n    );\n}\nfunction updateImperativeHandle(ref, create, deps) {\n  deps = null !== deps && void 0 !== deps ? deps.concat([ref]) : null;\n  updateEffectImpl(4, 4, imperativeHandleEffect.bind(null, create, ref), deps);\n}\nfunction mountDebugValue() {}\nfunction updateCallback(callback, deps) {\n  var hook = updateWorkInProgressHook();\n  deps = void 0 === deps ? null : deps;\n  var prevState = hook.memoizedState;\n  if (null !== deps && areHookInputsEqual(deps, prevState[1]))\n    return prevState[0];\n  hook.memoizedState = [callback, deps];\n  return callback;\n}\nfunction updateMemo(nextCreate, deps) {\n  var hook = updateWorkInProgressHook();\n  deps = void 0 === deps ? null : deps;\n  var prevState = hook.memoizedState;\n  if (null !== deps && areHookInputsEqual(deps, prevState[1]))\n    return prevState[0];\n  prevState = nextCreate();\n  if (shouldDoubleInvokeUserFnsInHooksDEV) {\n    setIsStrictModeForDevtools(!0);\n    try {\n      nextCreate();\n    } finally {\n      setIsStrictModeForDevtools(!1);\n    }\n  }\n  hook.memoizedState = [prevState, deps];\n  return prevState;\n}\nfunction mountDeferredValueImpl(hook, value, initialValue) {\n  if (void 0 === initialValue || 0 !== (renderLanes & 1073741824))\n    return (hook.memoizedState = value);\n  hook.memoizedState = initialValue;\n  hook = requestDeferredLane();\n  currentlyRenderingFiber$1.lanes |= hook;\n  workInProgressRootSkippedLanes |= hook;\n  return initialValue;\n}\nfunction updateDeferredValueImpl(hook, prevValue, value, initialValue) {\n  if (objectIs(value, prevValue)) return value;\n  if (null !== currentTreeHiddenStackCursor.current)\n    return (\n      (hook = mountDeferredValueImpl(hook, value, initialValue)),\n      objectIs(hook, prevValue) || (didReceiveUpdate = !0),\n      hook\n    );\n  if (0 === (renderLanes & 42))\n    return (didReceiveUpdate = !0), (hook.memoizedState = value);\n  hook = requestDeferredLane();\n  currentlyRenderingFiber$1.lanes |= hook;\n  workInProgressRootSkippedLanes |= hook;\n  return prevValue;\n}\nfunction startTransition(fiber, queue, pendingState, finishedState, callback) {\n  var previousPriority = ReactDOMSharedInternals.p;\n  ReactDOMSharedInternals.p =\n    0 !== previousPriority && 8 > previousPriority ? previousPriority : 8;\n  var prevTransition = ReactSharedInternals.T,\n    currentTransition = {};\n  ReactSharedInternals.T = currentTransition;\n  dispatchOptimisticSetState(fiber, !1, queue, pendingState);\n  try {\n    var returnValue = callback(),\n      onStartTransitionFinish = ReactSharedInternals.S;\n    null !== onStartTransitionFinish &&\n      onStartTransitionFinish(currentTransition, returnValue);\n    if (\n      null !== returnValue &&\n      \"object\" === typeof returnValue &&\n      \"function\" === typeof returnValue.then\n    ) {\n      var thenableForFinishedState = chainThenableValue(\n        returnValue,\n        finishedState\n      );\n      dispatchSetStateInternal(\n        fiber,\n        queue,\n        thenableForFinishedState,\n        requestUpdateLane(fiber)\n      );\n    } else\n      dispatchSetStateInternal(\n        fiber,\n        queue,\n        finishedState,\n        requestUpdateLane(fiber)\n      );\n  } catch (error) {\n    dispatchSetStateInternal(\n      fiber,\n      queue,\n      { then: function () {}, status: \"rejected\", reason: error },\n      requestUpdateLane()\n    );\n  } finally {\n    (ReactDOMSharedInternals.p = previousPriority),\n      (ReactSharedInternals.T = prevTransition);\n  }\n}\nfunction noop$2() {}\nfunction startHostTransition(formFiber, pendingState, action, formData) {\n  if (5 !== formFiber.tag) throw Error(formatProdErrorMessage(476));\n  var queue = ensureFormComponentIsStateful(formFiber).queue;\n  startTransition(\n    formFiber,\n    queue,\n    pendingState,\n    sharedNotPendingObject,\n    null === action\n      ? noop$2\n      : function () {\n          requestFormReset$1(formFiber);\n          return action(formData);\n        }\n  );\n}\nfunction ensureFormComponentIsStateful(formFiber) {\n  var existingStateHook = formFiber.memoizedState;\n  if (null !== existingStateHook) return existingStateHook;\n  existingStateHook = {\n    memoizedState: sharedNotPendingObject,\n    baseState: sharedNotPendingObject,\n    baseQueue: null,\n    queue: {\n      pending: null,\n      lanes: 0,\n      dispatch: null,\n      lastRenderedReducer: basicStateReducer,\n      lastRenderedState: sharedNotPendingObject\n    },\n    next: null\n  };\n  var initialResetState = {};\n  existingStateHook.next = {\n    memoizedState: initialResetState,\n    baseState: initialResetState,\n    baseQueue: null,\n    queue: {\n      pending: null,\n      lanes: 0,\n      dispatch: null,\n      lastRenderedReducer: basicStateReducer,\n      lastRenderedState: initialResetState\n    },\n    next: null\n  };\n  formFiber.memoizedState = existingStateHook;\n  formFiber = formFiber.alternate;\n  null !== formFiber && (formFiber.memoizedState = existingStateHook);\n  return existingStateHook;\n}\nfunction requestFormReset$1(formFiber) {\n  var resetStateQueue = ensureFormComponentIsStateful(formFiber).next.queue;\n  dispatchSetStateInternal(formFiber, resetStateQueue, {}, requestUpdateLane());\n}\nfunction useHostTransitionStatus() {\n  return readContext(HostTransitionContext);\n}\nfunction updateId() {\n  return updateWorkInProgressHook().memoizedState;\n}\nfunction updateRefresh() {\n  return updateWorkInProgressHook().memoizedState;\n}\nfunction refreshCache(fiber) {\n  for (var provider = fiber.return; null !== provider; ) {\n    switch (provider.tag) {\n      case 24:\n      case 3:\n        var lane = requestUpdateLane();\n        fiber = createUpdate(lane);\n        var root$63 = enqueueUpdate(provider, fiber, lane);\n        null !== root$63 &&\n          (scheduleUpdateOnFiber(root$63, provider, lane),\n          entangleTransitions(root$63, provider, lane));\n        provider = { cache: createCache() };\n        fiber.payload = provider;\n        return;\n    }\n    provider = provider.return;\n  }\n}\nfunction dispatchReducerAction(fiber, queue, action) {\n  var lane = requestUpdateLane();\n  action = {\n    lane: lane,\n    revertLane: 0,\n    action: action,\n    hasEagerState: !1,\n    eagerState: null,\n    next: null\n  };\n  isRenderPhaseUpdate(fiber)\n    ? enqueueRenderPhaseUpdate(queue, action)\n    : ((action = enqueueConcurrentHookUpdate(fiber, queue, action, lane)),\n      null !== action &&\n        (scheduleUpdateOnFiber(action, fiber, lane),\n        entangleTransitionUpdate(action, queue, lane)));\n}\nfunction dispatchSetState(fiber, queue, action) {\n  var lane = requestUpdateLane();\n  dispatchSetStateInternal(fiber, queue, action, lane);\n}\nfunction dispatchSetStateInternal(fiber, queue, action, lane) {\n  var update = {\n    lane: lane,\n    revertLane: 0,\n    action: action,\n    hasEagerState: !1,\n    eagerState: null,\n    next: null\n  };\n  if (isRenderPhaseUpdate(fiber)) enqueueRenderPhaseUpdate(queue, update);\n  else {\n    var alternate = fiber.alternate;\n    if (\n      0 === fiber.lanes &&\n      (null === alternate || 0 === alternate.lanes) &&\n      ((alternate = queue.lastRenderedReducer), null !== alternate)\n    )\n      try {\n        var currentState = queue.lastRenderedState,\n          eagerState = alternate(currentState, action);\n        update.hasEagerState = !0;\n        update.eagerState = eagerState;\n        if (objectIs(eagerState, currentState))\n          return (\n            enqueueUpdate$1(fiber, queue, update, 0),\n            null === workInProgressRoot && finishQueueingConcurrentUpdates(),\n            !1\n          );\n      } catch (error) {\n      } finally {\n      }\n    action = enqueueConcurrentHookUpdate(fiber, queue, update, lane);\n    if (null !== action)\n      return (\n        scheduleUpdateOnFiber(action, fiber, lane),\n        entangleTransitionUpdate(action, queue, lane),\n        !0\n      );\n  }\n  return !1;\n}\nfunction dispatchOptimisticSetState(fiber, throwIfDuringRender, queue, action) {\n  action = {\n    lane: 2,\n    revertLane: requestTransitionLane(),\n    action: action,\n    hasEagerState: !1,\n    eagerState: null,\n    next: null\n  };\n  if (isRenderPhaseUpdate(fiber)) {\n    if (throwIfDuringRender) throw Error(formatProdErrorMessage(479));\n  } else\n    (throwIfDuringRender = enqueueConcurrentHookUpdate(\n      fiber,\n      queue,\n      action,\n      2\n    )),\n      null !== throwIfDuringRender &&\n        scheduleUpdateOnFiber(throwIfDuringRender, fiber, 2);\n}\nfunction isRenderPhaseUpdate(fiber) {\n  var alternate = fiber.alternate;\n  return (\n    fiber === currentlyRenderingFiber$1 ||\n    (null !== alternate && alternate === currentlyRenderingFiber$1)\n  );\n}\nfunction enqueueRenderPhaseUpdate(queue, update) {\n  didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate =\n    !0;\n  var pending = queue.pending;\n  null === pending\n    ? (update.next = update)\n    : ((update.next = pending.next), (pending.next = update));\n  queue.pending = update;\n}\nfunction entangleTransitionUpdate(root, queue, lane) {\n  if (0 !== (lane & 4194176)) {\n    var queueLanes = queue.lanes;\n    queueLanes &= root.pendingLanes;\n    lane |= queueLanes;\n    queue.lanes = lane;\n    markRootEntangled(root, lane);\n  }\n}\nvar ContextOnlyDispatcher = {\n  readContext: readContext,\n  use: use,\n  useCallback: throwInvalidHookError,\n  useContext: throwInvalidHookError,\n  useEffect: throwInvalidHookError,\n  useImperativeHandle: throwInvalidHookError,\n  useLayoutEffect: throwInvalidHookError,\n  useInsertionEffect: throwInvalidHookError,\n  useMemo: throwInvalidHookError,\n  useReducer: throwInvalidHookError,\n  useRef: throwInvalidHookError,\n  useState: throwInvalidHookError,\n  useDebugValue: throwInvalidHookError,\n  useDeferredValue: throwInvalidHookError,\n  useTransition: throwInvalidHookError,\n  useSyncExternalStore: throwInvalidHookError,\n  useId: throwInvalidHookError\n};\nContextOnlyDispatcher.useCacheRefresh = throwInvalidHookError;\nContextOnlyDispatcher.useMemoCache = throwInvalidHookError;\nContextOnlyDispatcher.useHostTransitionStatus = throwInvalidHookError;\nContextOnlyDispatcher.useFormState = throwInvalidHookError;\nContextOnlyDispatcher.useActionState = throwInvalidHookError;\nContextOnlyDispatcher.useOptimistic = throwInvalidHookError;\nvar HooksDispatcherOnMount = {\n  readContext: readContext,\n  use: use,\n  useCallback: function (callback, deps) {\n    mountWorkInProgressHook().memoizedState = [\n      callback,\n      void 0 === deps ? null : deps\n    ];\n    return callback;\n  },\n  useContext: readContext,\n  useEffect: mountEffect,\n  useImperativeHandle: function (ref, create, deps) {\n    deps = null !== deps && void 0 !== deps ? deps.concat([ref]) : null;\n    mountEffectImpl(\n      4194308,\n      4,\n      imperativeHandleEffect.bind(null, create, ref),\n      deps\n    );\n  },\n  useLayoutEffect: function (create, deps) {\n    return mountEffectImpl(4194308, 4, create, deps);\n  },\n  useInsertionEffect: function (create, deps) {\n    mountEffectImpl(4, 2, create, deps);\n  },\n  useMemo: function (nextCreate, deps) {\n    var hook = mountWorkInProgressHook();\n    deps = void 0 === deps ? null : deps;\n    var nextValue = nextCreate();\n    if (shouldDoubleInvokeUserFnsInHooksDEV) {\n      setIsStrictModeForDevtools(!0);\n      try {\n        nextCreate();\n      } finally {\n        setIsStrictModeForDevtools(!1);\n      }\n    }\n    hook.memoizedState = [nextValue, deps];\n    return nextValue;\n  },\n  useReducer: function (reducer, initialArg, init) {\n    var hook = mountWorkInProgressHook();\n    if (void 0 !== init) {\n      var initialState = init(initialArg);\n      if (shouldDoubleInvokeUserFnsInHooksDEV) {\n        setIsStrictModeForDevtools(!0);\n        try {\n          init(initialArg);\n        } finally {\n          setIsStrictModeForDevtools(!1);\n        }\n      }\n    } else initialState = initialArg;\n    hook.memoizedState = hook.baseState = initialState;\n    reducer = {\n      pending: null,\n      lanes: 0,\n      dispatch: null,\n      lastRenderedReducer: reducer,\n      lastRenderedState: initialState\n    };\n    hook.queue = reducer;\n    reducer = reducer.dispatch = dispatchReducerAction.bind(\n      null,\n      currentlyRenderingFiber$1,\n      reducer\n    );\n    return [hook.memoizedState, reducer];\n  },\n  useRef: function (initialValue) {\n    var hook = mountWorkInProgressHook();\n    initialValue = { current: initialValue };\n    return (hook.memoizedState = initialValue);\n  },\n  useState: function (initialState) {\n    initialState = mountStateImpl(initialState);\n    var queue = initialState.queue,\n      dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);\n    queue.dispatch = dispatch;\n    return [initialState.memoizedState, dispatch];\n  },\n  useDebugValue: mountDebugValue,\n  useDeferredValue: function (value, initialValue) {\n    var hook = mountWorkInProgressHook();\n    return mountDeferredValueImpl(hook, value, initialValue);\n  },\n  useTransition: function () {\n    var stateHook = mountStateImpl(!1);\n    stateHook = startTransition.bind(\n      null,\n      currentlyRenderingFiber$1,\n      stateHook.queue,\n      !0,\n      !1\n    );\n    mountWorkInProgressHook().memoizedState = stateHook;\n    return [!1, stateHook];\n  },\n  useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n    var fiber = currentlyRenderingFiber$1,\n      hook = mountWorkInProgressHook();\n    if (isHydrating) {\n      if (void 0 === getServerSnapshot)\n        throw Error(formatProdErrorMessage(407));\n      getServerSnapshot = getServerSnapshot();\n    } else {\n      getServerSnapshot = getSnapshot();\n      if (null === workInProgressRoot) throw Error(formatProdErrorMessage(349));\n      0 !== (workInProgressRootRenderLanes & 60) ||\n        pushStoreConsistencyCheck(fiber, getSnapshot, getServerSnapshot);\n    }\n    hook.memoizedState = getServerSnapshot;\n    var inst = { value: getServerSnapshot, getSnapshot: getSnapshot };\n    hook.queue = inst;\n    mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [\n      subscribe\n    ]);\n    fiber.flags |= 2048;\n    pushEffect(\n      9,\n      updateStoreInstance.bind(\n        null,\n        fiber,\n        inst,\n        getServerSnapshot,\n        getSnapshot\n      ),\n      { destroy: void 0 },\n      null\n    );\n    return getServerSnapshot;\n  },\n  useId: function () {\n    var hook = mountWorkInProgressHook(),\n      identifierPrefix = workInProgressRoot.identifierPrefix;\n    if (isHydrating) {\n      var JSCompiler_inline_result = treeContextOverflow;\n      var idWithLeadingBit = treeContextId;\n      JSCompiler_inline_result =\n        (\n          idWithLeadingBit & ~(1 << (32 - clz32(idWithLeadingBit) - 1))\n        ).toString(32) + JSCompiler_inline_result;\n      identifierPrefix =\n        \":\" + identifierPrefix + \"R\" + JSCompiler_inline_result;\n      JSCompiler_inline_result = localIdCounter++;\n      0 < JSCompiler_inline_result &&\n        (identifierPrefix += \"H\" + JSCompiler_inline_result.toString(32));\n      identifierPrefix += \":\";\n    } else\n      (JSCompiler_inline_result = globalClientIdCounter++),\n        (identifierPrefix =\n          \":\" +\n          identifierPrefix +\n          \"r\" +\n          JSCompiler_inline_result.toString(32) +\n          \":\");\n    return (hook.memoizedState = identifierPrefix);\n  },\n  useCacheRefresh: function () {\n    return (mountWorkInProgressHook().memoizedState = refreshCache.bind(\n      null,\n      currentlyRenderingFiber$1\n    ));\n  }\n};\nHooksDispatcherOnMount.useMemoCache = useMemoCache;\nHooksDispatcherOnMount.useHostTransitionStatus = useHostTransitionStatus;\nHooksDispatcherOnMount.useFormState = mountActionState;\nHooksDispatcherOnMount.useActionState = mountActionState;\nHooksDispatcherOnMount.useOptimistic = function (passthrough) {\n  var hook = mountWorkInProgressHook();\n  hook.memoizedState = hook.baseState = passthrough;\n  var queue = {\n    pending: null,\n    lanes: 0,\n    dispatch: null,\n    lastRenderedReducer: null,\n    lastRenderedState: null\n  };\n  hook.queue = queue;\n  hook = dispatchOptimisticSetState.bind(\n    null,\n    currentlyRenderingFiber$1,\n    !0,\n    queue\n  );\n  queue.dispatch = hook;\n  return [passthrough, hook];\n};\nvar HooksDispatcherOnUpdate = {\n  readContext: readContext,\n  use: use,\n  useCallback: updateCallback,\n  useContext: readContext,\n  useEffect: updateEffect,\n  useImperativeHandle: updateImperativeHandle,\n  useInsertionEffect: updateInsertionEffect,\n  useLayoutEffect: updateLayoutEffect,\n  useMemo: updateMemo,\n  useReducer: updateReducer,\n  useRef: updateRef,\n  useState: function () {\n    return updateReducer(basicStateReducer);\n  },\n  useDebugValue: mountDebugValue,\n  useDeferredValue: function (value, initialValue) {\n    var hook = updateWorkInProgressHook();\n    return updateDeferredValueImpl(\n      hook,\n      currentHook.memoizedState,\n      value,\n      initialValue\n    );\n  },\n  useTransition: function () {\n    var booleanOrThenable = updateReducer(basicStateReducer)[0],\n      start = updateWorkInProgressHook().memoizedState;\n    return [\n      \"boolean\" === typeof booleanOrThenable\n        ? booleanOrThenable\n        : useThenable(booleanOrThenable),\n      start\n    ];\n  },\n  useSyncExternalStore: updateSyncExternalStore,\n  useId: updateId\n};\nHooksDispatcherOnUpdate.useCacheRefresh = updateRefresh;\nHooksDispatcherOnUpdate.useMemoCache = useMemoCache;\nHooksDispatcherOnUpdate.useHostTransitionStatus = useHostTransitionStatus;\nHooksDispatcherOnUpdate.useFormState = updateActionState;\nHooksDispatcherOnUpdate.useActionState = updateActionState;\nHooksDispatcherOnUpdate.useOptimistic = function (passthrough, reducer) {\n  var hook = updateWorkInProgressHook();\n  return updateOptimisticImpl(hook, currentHook, passthrough, reducer);\n};\nvar HooksDispatcherOnRerender = {\n  readContext: readContext,\n  use: use,\n  useCallback: updateCallback,\n  useContext: readContext,\n  useEffect: updateEffect,\n  useImperativeHandle: updateImperativeHandle,\n  useInsertionEffect: updateInsertionEffect,\n  useLayoutEffect: updateLayoutEffect,\n  useMemo: updateMemo,\n  useReducer: rerenderReducer,\n  useRef: updateRef,\n  useState: function () {\n    return rerenderReducer(basicStateReducer);\n  },\n  useDebugValue: mountDebugValue,\n  useDeferredValue: function (value, initialValue) {\n    var hook = updateWorkInProgressHook();\n    return null === currentHook\n      ? mountDeferredValueImpl(hook, value, initialValue)\n      : updateDeferredValueImpl(\n          hook,\n          currentHook.memoizedState,\n          value,\n          initialValue\n        );\n  },\n  useTransition: function () {\n    var booleanOrThenable = rerenderReducer(basicStateReducer)[0],\n      start = updateWorkInProgressHook().memoizedState;\n    return [\n      \"boolean\" === typeof booleanOrThenable\n        ? booleanOrThenable\n        : useThenable(booleanOrThenable),\n      start\n    ];\n  },\n  useSyncExternalStore: updateSyncExternalStore,\n  useId: updateId\n};\nHooksDispatcherOnRerender.useCacheRefresh = updateRefresh;\nHooksDispatcherOnRerender.useMemoCache = useMemoCache;\nHooksDispatcherOnRerender.useHostTransitionStatus = useHostTransitionStatus;\nHooksDispatcherOnRerender.useFormState = rerenderActionState;\nHooksDispatcherOnRerender.useActionState = rerenderActionState;\nHooksDispatcherOnRerender.useOptimistic = function (passthrough, reducer) {\n  var hook = updateWorkInProgressHook();\n  if (null !== currentHook)\n    return updateOptimisticImpl(hook, currentHook, passthrough, reducer);\n  hook.baseState = passthrough;\n  return [passthrough, hook.queue.dispatch];\n};\nfunction applyDerivedStateFromProps(\n  workInProgress,\n  ctor,\n  getDerivedStateFromProps,\n  nextProps\n) {\n  ctor = workInProgress.memoizedState;\n  getDerivedStateFromProps = getDerivedStateFromProps(nextProps, ctor);\n  getDerivedStateFromProps =\n    null === getDerivedStateFromProps || void 0 === getDerivedStateFromProps\n      ? ctor\n      : assign({}, ctor, getDerivedStateFromProps);\n  workInProgress.memoizedState = getDerivedStateFromProps;\n  0 === workInProgress.lanes &&\n    (workInProgress.updateQueue.baseState = getDerivedStateFromProps);\n}\nvar classComponentUpdater = {\n  isMounted: function (component) {\n    return (component = component._reactInternals)\n      ? getNearestMountedFiber(component) === component\n      : !1;\n  },\n  enqueueSetState: function (inst, payload, callback) {\n    inst = inst._reactInternals;\n    var lane = requestUpdateLane(),\n      update = createUpdate(lane);\n    update.payload = payload;\n    void 0 !== callback && null !== callback && (update.callback = callback);\n    payload = enqueueUpdate(inst, update, lane);\n    null !== payload &&\n      (scheduleUpdateOnFiber(payload, inst, lane),\n      entangleTransitions(payload, inst, lane));\n  },\n  enqueueReplaceState: function (inst, payload, callback) {\n    inst = inst._reactInternals;\n    var lane = requestUpdateLane(),\n      update = createUpdate(lane);\n    update.tag = 1;\n    update.payload = payload;\n    void 0 !== callback && null !== callback && (update.callback = callback);\n    payload = enqueueUpdate(inst, update, lane);\n    null !== payload &&\n      (scheduleUpdateOnFiber(payload, inst, lane),\n      entangleTransitions(payload, inst, lane));\n  },\n  enqueueForceUpdate: function (inst, callback) {\n    inst = inst._reactInternals;\n    var lane = requestUpdateLane(),\n      update = createUpdate(lane);\n    update.tag = 2;\n    void 0 !== callback && null !== callback && (update.callback = callback);\n    callback = enqueueUpdate(inst, update, lane);\n    null !== callback &&\n      (scheduleUpdateOnFiber(callback, inst, lane),\n      entangleTransitions(callback, inst, lane));\n  }\n};\nfunction checkShouldComponentUpdate(\n  workInProgress,\n  ctor,\n  oldProps,\n  newProps,\n  oldState,\n  newState,\n  nextContext\n) {\n  workInProgress = workInProgress.stateNode;\n  return \"function\" === typeof workInProgress.shouldComponentUpdate\n    ? workInProgress.shouldComponentUpdate(newProps, newState, nextContext)\n    : ctor.prototype && ctor.prototype.isPureReactComponent\n      ? !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState)\n      : !0;\n}\nfunction callComponentWillReceiveProps(\n  workInProgress,\n  instance,\n  newProps,\n  nextContext\n) {\n  workInProgress = instance.state;\n  \"function\" === typeof instance.componentWillReceiveProps &&\n    instance.componentWillReceiveProps(newProps, nextContext);\n  \"function\" === typeof instance.UNSAFE_componentWillReceiveProps &&\n    instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);\n  instance.state !== workInProgress &&\n    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n}\nfunction resolveClassComponentProps(Component, baseProps) {\n  var newProps = baseProps;\n  if (\"ref\" in baseProps) {\n    newProps = {};\n    for (var propName in baseProps)\n      \"ref\" !== propName && (newProps[propName] = baseProps[propName]);\n  }\n  if ((Component = Component.defaultProps)) {\n    newProps === baseProps && (newProps = assign({}, newProps));\n    for (var propName$67 in Component)\n      void 0 === newProps[propName$67] &&\n        (newProps[propName$67] = Component[propName$67]);\n  }\n  return newProps;\n}\nvar reportGlobalError =\n  \"function\" === typeof reportError\n    ? reportError\n    : function (error) {\n        if (\n          \"object\" === typeof window &&\n          \"function\" === typeof window.ErrorEvent\n        ) {\n          var event = new window.ErrorEvent(\"error\", {\n            bubbles: !0,\n            cancelable: !0,\n            message:\n              \"object\" === typeof error &&\n              null !== error &&\n              \"string\" === typeof error.message\n                ? String(error.message)\n                : String(error),\n            error: error\n          });\n          if (!window.dispatchEvent(event)) return;\n        } else if (\n          \"object\" === typeof process &&\n          \"function\" === typeof process.emit\n        ) {\n          process.emit(\"uncaughtException\", error);\n          return;\n        }\n        console.error(error);\n      };\nfunction defaultOnUncaughtError(error) {\n  reportGlobalError(error);\n}\nfunction defaultOnCaughtError(error) {\n  console.error(error);\n}\nfunction defaultOnRecoverableError(error) {\n  reportGlobalError(error);\n}\nfunction logUncaughtError(root, errorInfo) {\n  try {\n    var onUncaughtError = root.onUncaughtError;\n    onUncaughtError(errorInfo.value, { componentStack: errorInfo.stack });\n  } catch (e$68) {\n    setTimeout(function () {\n      throw e$68;\n    });\n  }\n}\nfunction logCaughtError(root, boundary, errorInfo) {\n  try {\n    var onCaughtError = root.onCaughtError;\n    onCaughtError(errorInfo.value, {\n      componentStack: errorInfo.stack,\n      errorBoundary: 1 === boundary.tag ? boundary.stateNode : null\n    });\n  } catch (e$69) {\n    setTimeout(function () {\n      throw e$69;\n    });\n  }\n}\nfunction createRootErrorUpdate(root, errorInfo, lane) {\n  lane = createUpdate(lane);\n  lane.tag = 3;\n  lane.payload = { element: null };\n  lane.callback = function () {\n    logUncaughtError(root, errorInfo);\n  };\n  return lane;\n}\nfunction createClassErrorUpdate(lane) {\n  lane = createUpdate(lane);\n  lane.tag = 3;\n  return lane;\n}\nfunction initializeClassErrorUpdate(update, root, fiber, errorInfo) {\n  var getDerivedStateFromError = fiber.type.getDerivedStateFromError;\n  if (\"function\" === typeof getDerivedStateFromError) {\n    var error = errorInfo.value;\n    update.payload = function () {\n      return getDerivedStateFromError(error);\n    };\n    update.callback = function () {\n      logCaughtError(root, fiber, errorInfo);\n    };\n  }\n  var inst = fiber.stateNode;\n  null !== inst &&\n    \"function\" === typeof inst.componentDidCatch &&\n    (update.callback = function () {\n      logCaughtError(root, fiber, errorInfo);\n      \"function\" !== typeof getDerivedStateFromError &&\n        (null === legacyErrorBoundariesThatAlreadyFailed\n          ? (legacyErrorBoundariesThatAlreadyFailed = new Set([this]))\n          : legacyErrorBoundariesThatAlreadyFailed.add(this));\n      var stack = errorInfo.stack;\n      this.componentDidCatch(errorInfo.value, {\n        componentStack: null !== stack ? stack : \"\"\n      });\n    });\n}\nfunction throwException(\n  root,\n  returnFiber,\n  sourceFiber,\n  value,\n  rootRenderLanes\n) {\n  sourceFiber.flags |= 32768;\n  if (\n    null !== value &&\n    \"object\" === typeof value &&\n    \"function\" === typeof value.then\n  ) {\n    returnFiber = sourceFiber.alternate;\n    null !== returnFiber &&\n      propagateParentContextChanges(\n        returnFiber,\n        sourceFiber,\n        rootRenderLanes,\n        !0\n      );\n    sourceFiber = suspenseHandlerStackCursor.current;\n    if (null !== sourceFiber) {\n      switch (sourceFiber.tag) {\n        case 13:\n          return (\n            null === shellBoundary\n              ? renderDidSuspendDelayIfPossible()\n              : null === sourceFiber.alternate &&\n                0 === workInProgressRootExitStatus &&\n                (workInProgressRootExitStatus = 3),\n            (sourceFiber.flags &= -257),\n            (sourceFiber.flags |= 65536),\n            (sourceFiber.lanes = rootRenderLanes),\n            value === noopSuspenseyCommitThenable\n              ? (sourceFiber.flags |= 16384)\n              : ((returnFiber = sourceFiber.updateQueue),\n                null === returnFiber\n                  ? (sourceFiber.updateQueue = new Set([value]))\n                  : returnFiber.add(value),\n                attachPingListener(root, value, rootRenderLanes)),\n            !1\n          );\n        case 22:\n          return (\n            (sourceFiber.flags |= 65536),\n            value === noopSuspenseyCommitThenable\n              ? (sourceFiber.flags |= 16384)\n              : ((returnFiber = sourceFiber.updateQueue),\n                null === returnFiber\n                  ? ((returnFiber = {\n                      transitions: null,\n                      markerInstances: null,\n                      retryQueue: new Set([value])\n                    }),\n                    (sourceFiber.updateQueue = returnFiber))\n                  : ((sourceFiber = returnFiber.retryQueue),\n                    null === sourceFiber\n                      ? (returnFiber.retryQueue = new Set([value]))\n                      : sourceFiber.add(value)),\n                attachPingListener(root, value, rootRenderLanes)),\n            !1\n          );\n      }\n      throw Error(formatProdErrorMessage(435, sourceFiber.tag));\n    }\n    attachPingListener(root, value, rootRenderLanes);\n    renderDidSuspendDelayIfPossible();\n    return !1;\n  }\n  if (isHydrating)\n    return (\n      (returnFiber = suspenseHandlerStackCursor.current),\n      null !== returnFiber\n        ? (0 === (returnFiber.flags & 65536) && (returnFiber.flags |= 256),\n          (returnFiber.flags |= 65536),\n          (returnFiber.lanes = rootRenderLanes),\n          value !== HydrationMismatchException &&\n            ((root = Error(formatProdErrorMessage(422), { cause: value })),\n            queueHydrationError(createCapturedValueAtFiber(root, sourceFiber))))\n        : (value !== HydrationMismatchException &&\n            ((returnFiber = Error(formatProdErrorMessage(423), {\n              cause: value\n            })),\n            queueHydrationError(\n              createCapturedValueAtFiber(returnFiber, sourceFiber)\n            )),\n          (root = root.current.alternate),\n          (root.flags |= 65536),\n          (rootRenderLanes &= -rootRenderLanes),\n          (root.lanes |= rootRenderLanes),\n          (value = createCapturedValueAtFiber(value, sourceFiber)),\n          (rootRenderLanes = createRootErrorUpdate(\n            root.stateNode,\n            value,\n            rootRenderLanes\n          )),\n          enqueueCapturedUpdate(root, rootRenderLanes),\n          4 !== workInProgressRootExitStatus &&\n            (workInProgressRootExitStatus = 2)),\n      !1\n    );\n  var wrapperError = Error(formatProdErrorMessage(520), { cause: value });\n  wrapperError = createCapturedValueAtFiber(wrapperError, sourceFiber);\n  null === workInProgressRootConcurrentErrors\n    ? (workInProgressRootConcurrentErrors = [wrapperError])\n    : workInProgressRootConcurrentErrors.push(wrapperError);\n  4 !== workInProgressRootExitStatus && (workInProgressRootExitStatus = 2);\n  if (null === returnFiber) return !0;\n  value = createCapturedValueAtFiber(value, sourceFiber);\n  sourceFiber = returnFiber;\n  do {\n    switch (sourceFiber.tag) {\n      case 3:\n        return (\n          (sourceFiber.flags |= 65536),\n          (root = rootRenderLanes & -rootRenderLanes),\n          (sourceFiber.lanes |= root),\n          (root = createRootErrorUpdate(sourceFiber.stateNode, value, root)),\n          enqueueCapturedUpdate(sourceFiber, root),\n          !1\n        );\n      case 1:\n        if (\n          ((returnFiber = sourceFiber.type),\n          (wrapperError = sourceFiber.stateNode),\n          0 === (sourceFiber.flags & 128) &&\n            (\"function\" === typeof returnFiber.getDerivedStateFromError ||\n              (null !== wrapperError &&\n                \"function\" === typeof wrapperError.componentDidCatch &&\n                (null === legacyErrorBoundariesThatAlreadyFailed ||\n                  !legacyErrorBoundariesThatAlreadyFailed.has(wrapperError)))))\n        )\n          return (\n            (sourceFiber.flags |= 65536),\n            (rootRenderLanes &= -rootRenderLanes),\n            (sourceFiber.lanes |= rootRenderLanes),\n            (rootRenderLanes = createClassErrorUpdate(rootRenderLanes)),\n            initializeClassErrorUpdate(\n              rootRenderLanes,\n              root,\n              sourceFiber,\n              value\n            ),\n            enqueueCapturedUpdate(sourceFiber, rootRenderLanes),\n            !1\n          );\n    }\n    sourceFiber = sourceFiber.return;\n  } while (null !== sourceFiber);\n  return !1;\n}\nvar SelectiveHydrationException = Error(formatProdErrorMessage(461)),\n  didReceiveUpdate = !1;\nfunction reconcileChildren(current, workInProgress, nextChildren, renderLanes) {\n  workInProgress.child =\n    null === current\n      ? mountChildFibers(workInProgress, null, nextChildren, renderLanes)\n      : reconcileChildFibers(\n          workInProgress,\n          current.child,\n          nextChildren,\n          renderLanes\n        );\n}\nfunction updateForwardRef(\n  current,\n  workInProgress,\n  Component,\n  nextProps,\n  renderLanes\n) {\n  Component = Component.render;\n  var ref = workInProgress.ref;\n  if (\"ref\" in nextProps) {\n    var propsWithoutRef = {};\n    for (var key in nextProps)\n      \"ref\" !== key && (propsWithoutRef[key] = nextProps[key]);\n  } else propsWithoutRef = nextProps;\n  prepareToReadContext(workInProgress);\n  nextProps = renderWithHooks(\n    current,\n    workInProgress,\n    Component,\n    propsWithoutRef,\n    ref,\n    renderLanes\n  );\n  key = checkDidRenderIdHook();\n  if (null !== current && !didReceiveUpdate)\n    return (\n      bailoutHooks(current, workInProgress, renderLanes),\n      bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes)\n    );\n  isHydrating && key && pushMaterializedTreeId(workInProgress);\n  workInProgress.flags |= 1;\n  reconcileChildren(current, workInProgress, nextProps, renderLanes);\n  return workInProgress.child;\n}\nfunction updateMemoComponent(\n  current,\n  workInProgress,\n  Component,\n  nextProps,\n  renderLanes\n) {\n  if (null === current) {\n    var type = Component.type;\n    if (\n      \"function\" === typeof type &&\n      !shouldConstruct(type) &&\n      void 0 === type.defaultProps &&\n      null === Component.compare\n    )\n      return (\n        (workInProgress.tag = 15),\n        (workInProgress.type = type),\n        updateSimpleMemoComponent(\n          current,\n          workInProgress,\n          type,\n          nextProps,\n          renderLanes\n        )\n      );\n    current = createFiberFromTypeAndProps(\n      Component.type,\n      null,\n      nextProps,\n      workInProgress,\n      workInProgress.mode,\n      renderLanes\n    );\n    current.ref = workInProgress.ref;\n    current.return = workInProgress;\n    return (workInProgress.child = current);\n  }\n  type = current.child;\n  if (!checkScheduledUpdateOrContext(current, renderLanes)) {\n    var prevProps = type.memoizedProps;\n    Component = Component.compare;\n    Component = null !== Component ? Component : shallowEqual;\n    if (Component(prevProps, nextProps) && current.ref === workInProgress.ref)\n      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n  workInProgress.flags |= 1;\n  current = createWorkInProgress(type, nextProps);\n  current.ref = workInProgress.ref;\n  current.return = workInProgress;\n  return (workInProgress.child = current);\n}\nfunction updateSimpleMemoComponent(\n  current,\n  workInProgress,\n  Component,\n  nextProps,\n  renderLanes\n) {\n  if (null !== current) {\n    var prevProps = current.memoizedProps;\n    if (\n      shallowEqual(prevProps, nextProps) &&\n      current.ref === workInProgress.ref\n    )\n      if (\n        ((didReceiveUpdate = !1),\n        (workInProgress.pendingProps = nextProps = prevProps),\n        checkScheduledUpdateOrContext(current, renderLanes))\n      )\n        0 !== (current.flags & 131072) && (didReceiveUpdate = !0);\n      else\n        return (\n          (workInProgress.lanes = current.lanes),\n          bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes)\n        );\n  }\n  return updateFunctionComponent(\n    current,\n    workInProgress,\n    Component,\n    nextProps,\n    renderLanes\n  );\n}\nfunction updateOffscreenComponent(current, workInProgress, renderLanes) {\n  var nextProps = workInProgress.pendingProps,\n    nextChildren = nextProps.children,\n    nextIsDetached = 0 !== (workInProgress.stateNode._pendingVisibility & 2),\n    prevState = null !== current ? current.memoizedState : null;\n  markRef(current, workInProgress);\n  if (\"hidden\" === nextProps.mode || nextIsDetached) {\n    if (0 !== (workInProgress.flags & 128)) {\n      nextProps =\n        null !== prevState ? prevState.baseLanes | renderLanes : renderLanes;\n      if (null !== current) {\n        nextChildren = workInProgress.child = current.child;\n        for (nextIsDetached = 0; null !== nextChildren; )\n          (nextIsDetached =\n            nextIsDetached | nextChildren.lanes | nextChildren.childLanes),\n            (nextChildren = nextChildren.sibling);\n        workInProgress.childLanes = nextIsDetached & ~nextProps;\n      } else (workInProgress.childLanes = 0), (workInProgress.child = null);\n      return deferHiddenOffscreenComponent(\n        current,\n        workInProgress,\n        nextProps,\n        renderLanes\n      );\n    }\n    if (0 !== (renderLanes & 536870912))\n      (workInProgress.memoizedState = { baseLanes: 0, cachePool: null }),\n        null !== current &&\n          pushTransition(\n            workInProgress,\n            null !== prevState ? prevState.cachePool : null\n          ),\n        null !== prevState\n          ? pushHiddenContext(workInProgress, prevState)\n          : reuseHiddenContextOnStack(),\n        pushOffscreenSuspenseHandler(workInProgress);\n    else\n      return (\n        (workInProgress.lanes = workInProgress.childLanes = 536870912),\n        deferHiddenOffscreenComponent(\n          current,\n          workInProgress,\n          null !== prevState ? prevState.baseLanes | renderLanes : renderLanes,\n          renderLanes\n        )\n      );\n  } else\n    null !== prevState\n      ? (pushTransition(workInProgress, prevState.cachePool),\n        pushHiddenContext(workInProgress, prevState),\n        reuseSuspenseHandlerOnStack(workInProgress),\n        (workInProgress.memoizedState = null))\n      : (null !== current && pushTransition(workInProgress, null),\n        reuseHiddenContextOnStack(),\n        reuseSuspenseHandlerOnStack(workInProgress));\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\nfunction deferHiddenOffscreenComponent(\n  current,\n  workInProgress,\n  nextBaseLanes,\n  renderLanes\n) {\n  var JSCompiler_inline_result = peekCacheFromPool();\n  JSCompiler_inline_result =\n    null === JSCompiler_inline_result\n      ? null\n      : { parent: CacheContext._currentValue, pool: JSCompiler_inline_result };\n  workInProgress.memoizedState = {\n    baseLanes: nextBaseLanes,\n    cachePool: JSCompiler_inline_result\n  };\n  null !== current && pushTransition(workInProgress, null);\n  reuseHiddenContextOnStack();\n  pushOffscreenSuspenseHandler(workInProgress);\n  null !== current &&\n    propagateParentContextChanges(current, workInProgress, renderLanes, !0);\n  return null;\n}\nfunction markRef(current, workInProgress) {\n  var ref = workInProgress.ref;\n  if (null === ref)\n    null !== current &&\n      null !== current.ref &&\n      (workInProgress.flags |= 2097664);\n  else {\n    if (\"function\" !== typeof ref && \"object\" !== typeof ref)\n      throw Error(formatProdErrorMessage(284));\n    if (null === current || current.ref !== ref)\n      workInProgress.flags |= 2097664;\n  }\n}\nfunction updateFunctionComponent(\n  current,\n  workInProgress,\n  Component,\n  nextProps,\n  renderLanes\n) {\n  prepareToReadContext(workInProgress);\n  Component = renderWithHooks(\n    current,\n    workInProgress,\n    Component,\n    nextProps,\n    void 0,\n    renderLanes\n  );\n  nextProps = checkDidRenderIdHook();\n  if (null !== current && !didReceiveUpdate)\n    return (\n      bailoutHooks(current, workInProgress, renderLanes),\n      bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes)\n    );\n  isHydrating && nextProps && pushMaterializedTreeId(workInProgress);\n  workInProgress.flags |= 1;\n  reconcileChildren(current, workInProgress, Component, renderLanes);\n  return workInProgress.child;\n}\nfunction replayFunctionComponent(\n  current,\n  workInProgress,\n  nextProps,\n  Component,\n  secondArg,\n  renderLanes\n) {\n  prepareToReadContext(workInProgress);\n  workInProgress.updateQueue = null;\n  nextProps = renderWithHooksAgain(\n    workInProgress,\n    Component,\n    nextProps,\n    secondArg\n  );\n  finishRenderingHooks(current);\n  Component = checkDidRenderIdHook();\n  if (null !== current && !didReceiveUpdate)\n    return (\n      bailoutHooks(current, workInProgress, renderLanes),\n      bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes)\n    );\n  isHydrating && Component && pushMaterializedTreeId(workInProgress);\n  workInProgress.flags |= 1;\n  reconcileChildren(current, workInProgress, nextProps, renderLanes);\n  return workInProgress.child;\n}\nfunction updateClassComponent(\n  current,\n  workInProgress,\n  Component,\n  nextProps,\n  renderLanes\n) {\n  prepareToReadContext(workInProgress);\n  if (null === workInProgress.stateNode) {\n    var context = emptyContextObject,\n      contextType = Component.contextType;\n    \"object\" === typeof contextType &&\n      null !== contextType &&\n      (context = readContext(contextType));\n    context = new Component(nextProps, context);\n    workInProgress.memoizedState =\n      null !== context.state && void 0 !== context.state ? context.state : null;\n    context.updater = classComponentUpdater;\n    workInProgress.stateNode = context;\n    context._reactInternals = workInProgress;\n    context = workInProgress.stateNode;\n    context.props = nextProps;\n    context.state = workInProgress.memoizedState;\n    context.refs = {};\n    initializeUpdateQueue(workInProgress);\n    contextType = Component.contextType;\n    context.context =\n      \"object\" === typeof contextType && null !== contextType\n        ? readContext(contextType)\n        : emptyContextObject;\n    context.state = workInProgress.memoizedState;\n    contextType = Component.getDerivedStateFromProps;\n    \"function\" === typeof contextType &&\n      (applyDerivedStateFromProps(\n        workInProgress,\n        Component,\n        contextType,\n        nextProps\n      ),\n      (context.state = workInProgress.memoizedState));\n    \"function\" === typeof Component.getDerivedStateFromProps ||\n      \"function\" === typeof context.getSnapshotBeforeUpdate ||\n      (\"function\" !== typeof context.UNSAFE_componentWillMount &&\n        \"function\" !== typeof context.componentWillMount) ||\n      ((contextType = context.state),\n      \"function\" === typeof context.componentWillMount &&\n        context.componentWillMount(),\n      \"function\" === typeof context.UNSAFE_componentWillMount &&\n        context.UNSAFE_componentWillMount(),\n      contextType !== context.state &&\n        classComponentUpdater.enqueueReplaceState(context, context.state, null),\n      processUpdateQueue(workInProgress, nextProps, context, renderLanes),\n      suspendIfUpdateReadFromEntangledAsyncAction(),\n      (context.state = workInProgress.memoizedState));\n    \"function\" === typeof context.componentDidMount &&\n      (workInProgress.flags |= 4194308);\n    nextProps = !0;\n  } else if (null === current) {\n    context = workInProgress.stateNode;\n    var unresolvedOldProps = workInProgress.memoizedProps,\n      oldProps = resolveClassComponentProps(Component, unresolvedOldProps);\n    context.props = oldProps;\n    var oldContext = context.context,\n      contextType$jscomp$0 = Component.contextType;\n    contextType = emptyContextObject;\n    \"object\" === typeof contextType$jscomp$0 &&\n      null !== contextType$jscomp$0 &&\n      (contextType = readContext(contextType$jscomp$0));\n    var getDerivedStateFromProps = Component.getDerivedStateFromProps;\n    contextType$jscomp$0 =\n      \"function\" === typeof getDerivedStateFromProps ||\n      \"function\" === typeof context.getSnapshotBeforeUpdate;\n    unresolvedOldProps = workInProgress.pendingProps !== unresolvedOldProps;\n    contextType$jscomp$0 ||\n      (\"function\" !== typeof context.UNSAFE_componentWillReceiveProps &&\n        \"function\" !== typeof context.componentWillReceiveProps) ||\n      ((unresolvedOldProps || oldContext !== contextType) &&\n        callComponentWillReceiveProps(\n          workInProgress,\n          context,\n          nextProps,\n          contextType\n        ));\n    hasForceUpdate = !1;\n    var oldState = workInProgress.memoizedState;\n    context.state = oldState;\n    processUpdateQueue(workInProgress, nextProps, context, renderLanes);\n    suspendIfUpdateReadFromEntangledAsyncAction();\n    oldContext = workInProgress.memoizedState;\n    unresolvedOldProps || oldState !== oldContext || hasForceUpdate\n      ? (\"function\" === typeof getDerivedStateFromProps &&\n          (applyDerivedStateFromProps(\n            workInProgress,\n            Component,\n            getDerivedStateFromProps,\n            nextProps\n          ),\n          (oldContext = workInProgress.memoizedState)),\n        (oldProps =\n          hasForceUpdate ||\n          checkShouldComponentUpdate(\n            workInProgress,\n            Component,\n            oldProps,\n            nextProps,\n            oldState,\n            oldContext,\n            contextType\n          ))\n          ? (contextType$jscomp$0 ||\n              (\"function\" !== typeof context.UNSAFE_componentWillMount &&\n                \"function\" !== typeof context.componentWillMount) ||\n              (\"function\" === typeof context.componentWillMount &&\n                context.componentWillMount(),\n              \"function\" === typeof context.UNSAFE_componentWillMount &&\n                context.UNSAFE_componentWillMount()),\n            \"function\" === typeof context.componentDidMount &&\n              (workInProgress.flags |= 4194308))\n          : (\"function\" === typeof context.componentDidMount &&\n              (workInProgress.flags |= 4194308),\n            (workInProgress.memoizedProps = nextProps),\n            (workInProgress.memoizedState = oldContext)),\n        (context.props = nextProps),\n        (context.state = oldContext),\n        (context.context = contextType),\n        (nextProps = oldProps))\n      : (\"function\" === typeof context.componentDidMount &&\n          (workInProgress.flags |= 4194308),\n        (nextProps = !1));\n  } else {\n    context = workInProgress.stateNode;\n    cloneUpdateQueue(current, workInProgress);\n    contextType = workInProgress.memoizedProps;\n    contextType$jscomp$0 = resolveClassComponentProps(Component, contextType);\n    context.props = contextType$jscomp$0;\n    getDerivedStateFromProps = workInProgress.pendingProps;\n    oldState = context.context;\n    oldContext = Component.contextType;\n    oldProps = emptyContextObject;\n    \"object\" === typeof oldContext &&\n      null !== oldContext &&\n      (oldProps = readContext(oldContext));\n    unresolvedOldProps = Component.getDerivedStateFromProps;\n    (oldContext =\n      \"function\" === typeof unresolvedOldProps ||\n      \"function\" === typeof context.getSnapshotBeforeUpdate) ||\n      (\"function\" !== typeof context.UNSAFE_componentWillReceiveProps &&\n        \"function\" !== typeof context.componentWillReceiveProps) ||\n      ((contextType !== getDerivedStateFromProps || oldState !== oldProps) &&\n        callComponentWillReceiveProps(\n          workInProgress,\n          context,\n          nextProps,\n          oldProps\n        ));\n    hasForceUpdate = !1;\n    oldState = workInProgress.memoizedState;\n    context.state = oldState;\n    processUpdateQueue(workInProgress, nextProps, context, renderLanes);\n    suspendIfUpdateReadFromEntangledAsyncAction();\n    var newState = workInProgress.memoizedState;\n    contextType !== getDerivedStateFromProps ||\n    oldState !== newState ||\n    hasForceUpdate ||\n    (null !== current &&\n      null !== current.dependencies &&\n      checkIfContextChanged(current.dependencies))\n      ? (\"function\" === typeof unresolvedOldProps &&\n          (applyDerivedStateFromProps(\n            workInProgress,\n            Component,\n            unresolvedOldProps,\n            nextProps\n          ),\n          (newState = workInProgress.memoizedState)),\n        (contextType$jscomp$0 =\n          hasForceUpdate ||\n          checkShouldComponentUpdate(\n            workInProgress,\n            Component,\n            contextType$jscomp$0,\n            nextProps,\n            oldState,\n            newState,\n            oldProps\n          ) ||\n          (null !== current &&\n            null !== current.dependencies &&\n            checkIfContextChanged(current.dependencies)))\n          ? (oldContext ||\n              (\"function\" !== typeof context.UNSAFE_componentWillUpdate &&\n                \"function\" !== typeof context.componentWillUpdate) ||\n              (\"function\" === typeof context.componentWillUpdate &&\n                context.componentWillUpdate(nextProps, newState, oldProps),\n              \"function\" === typeof context.UNSAFE_componentWillUpdate &&\n                context.UNSAFE_componentWillUpdate(\n                  nextProps,\n                  newState,\n                  oldProps\n                )),\n            \"function\" === typeof context.componentDidUpdate &&\n              (workInProgress.flags |= 4),\n            \"function\" === typeof context.getSnapshotBeforeUpdate &&\n              (workInProgress.flags |= 1024))\n          : (\"function\" !== typeof context.componentDidUpdate ||\n              (contextType === current.memoizedProps &&\n                oldState === current.memoizedState) ||\n              (workInProgress.flags |= 4),\n            \"function\" !== typeof context.getSnapshotBeforeUpdate ||\n              (contextType === current.memoizedProps &&\n                oldState === current.memoizedState) ||\n              (workInProgress.flags |= 1024),\n            (workInProgress.memoizedProps = nextProps),\n            (workInProgress.memoizedState = newState)),\n        (context.props = nextProps),\n        (context.state = newState),\n        (context.context = oldProps),\n        (nextProps = contextType$jscomp$0))\n      : (\"function\" !== typeof context.componentDidUpdate ||\n          (contextType === current.memoizedProps &&\n            oldState === current.memoizedState) ||\n          (workInProgress.flags |= 4),\n        \"function\" !== typeof context.getSnapshotBeforeUpdate ||\n          (contextType === current.memoizedProps &&\n            oldState === current.memoizedState) ||\n          (workInProgress.flags |= 1024),\n        (nextProps = !1));\n  }\n  context = nextProps;\n  markRef(current, workInProgress);\n  nextProps = 0 !== (workInProgress.flags & 128);\n  context || nextProps\n    ? ((context = workInProgress.stateNode),\n      (Component =\n        nextProps && \"function\" !== typeof Component.getDerivedStateFromError\n          ? null\n          : context.render()),\n      (workInProgress.flags |= 1),\n      null !== current && nextProps\n        ? ((workInProgress.child = reconcileChildFibers(\n            workInProgress,\n            current.child,\n            null,\n            renderLanes\n          )),\n          (workInProgress.child = reconcileChildFibers(\n            workInProgress,\n            null,\n            Component,\n            renderLanes\n          )))\n        : reconcileChildren(current, workInProgress, Component, renderLanes),\n      (workInProgress.memoizedState = context.state),\n      (current = workInProgress.child))\n    : (current = bailoutOnAlreadyFinishedWork(\n        current,\n        workInProgress,\n        renderLanes\n      ));\n  return current;\n}\nfunction mountHostRootWithoutHydrating(\n  current,\n  workInProgress,\n  nextChildren,\n  renderLanes\n) {\n  resetHydrationState();\n  workInProgress.flags |= 256;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\nvar SUSPENDED_MARKER = { dehydrated: null, treeContext: null, retryLane: 0 };\nfunction mountSuspenseOffscreenState(renderLanes) {\n  return { baseLanes: renderLanes, cachePool: getSuspendedCache() };\n}\nfunction getRemainingWorkInPrimaryTree(\n  current,\n  primaryTreeDidDefer,\n  renderLanes\n) {\n  current = null !== current ? current.childLanes & ~renderLanes : 0;\n  primaryTreeDidDefer && (current |= workInProgressDeferredLane);\n  return current;\n}\nfunction updateSuspenseComponent(current, workInProgress, renderLanes) {\n  var nextProps = workInProgress.pendingProps,\n    showFallback = !1,\n    didSuspend = 0 !== (workInProgress.flags & 128),\n    JSCompiler_temp;\n  (JSCompiler_temp = didSuspend) ||\n    (JSCompiler_temp =\n      null !== current && null === current.memoizedState\n        ? !1\n        : 0 !== (suspenseStackCursor.current & 2));\n  JSCompiler_temp && ((showFallback = !0), (workInProgress.flags &= -129));\n  JSCompiler_temp = 0 !== (workInProgress.flags & 32);\n  workInProgress.flags &= -33;\n  if (null === current) {\n    if (isHydrating) {\n      showFallback\n        ? pushPrimaryTreeSuspenseHandler(workInProgress)\n        : reuseSuspenseHandlerOnStack(workInProgress);\n      if (isHydrating) {\n        var nextInstance = nextHydratableInstance,\n          JSCompiler_temp$jscomp$0;\n        if ((JSCompiler_temp$jscomp$0 = nextInstance)) {\n          c: {\n            JSCompiler_temp$jscomp$0 = nextInstance;\n            for (\n              nextInstance = rootOrSingletonContext;\n              8 !== JSCompiler_temp$jscomp$0.nodeType;\n\n            ) {\n              if (!nextInstance) {\n                nextInstance = null;\n                break c;\n              }\n              JSCompiler_temp$jscomp$0 = getNextHydratable(\n                JSCompiler_temp$jscomp$0.nextSibling\n              );\n              if (null === JSCompiler_temp$jscomp$0) {\n                nextInstance = null;\n                break c;\n              }\n            }\n            nextInstance = JSCompiler_temp$jscomp$0;\n          }\n          null !== nextInstance\n            ? ((workInProgress.memoizedState = {\n                dehydrated: nextInstance,\n                treeContext:\n                  null !== treeContextProvider\n                    ? { id: treeContextId, overflow: treeContextOverflow }\n                    : null,\n                retryLane: 536870912\n              }),\n              (JSCompiler_temp$jscomp$0 = createFiberImplClass(\n                18,\n                null,\n                null,\n                0\n              )),\n              (JSCompiler_temp$jscomp$0.stateNode = nextInstance),\n              (JSCompiler_temp$jscomp$0.return = workInProgress),\n              (workInProgress.child = JSCompiler_temp$jscomp$0),\n              (hydrationParentFiber = workInProgress),\n              (nextHydratableInstance = null),\n              (JSCompiler_temp$jscomp$0 = !0))\n            : (JSCompiler_temp$jscomp$0 = !1);\n        }\n        JSCompiler_temp$jscomp$0 || throwOnHydrationMismatch(workInProgress);\n      }\n      nextInstance = workInProgress.memoizedState;\n      if (\n        null !== nextInstance &&\n        ((nextInstance = nextInstance.dehydrated), null !== nextInstance)\n      )\n        return (\n          \"$!\" === nextInstance.data\n            ? (workInProgress.lanes = 16)\n            : (workInProgress.lanes = 536870912),\n          null\n        );\n      popSuspenseHandler(workInProgress);\n    }\n    nextInstance = nextProps.children;\n    nextProps = nextProps.fallback;\n    if (showFallback)\n      return (\n        reuseSuspenseHandlerOnStack(workInProgress),\n        (showFallback = workInProgress.mode),\n        (nextInstance = mountWorkInProgressOffscreenFiber(\n          { mode: \"hidden\", children: nextInstance },\n          showFallback\n        )),\n        (nextProps = createFiberFromFragment(\n          nextProps,\n          showFallback,\n          renderLanes,\n          null\n        )),\n        (nextInstance.return = workInProgress),\n        (nextProps.return = workInProgress),\n        (nextInstance.sibling = nextProps),\n        (workInProgress.child = nextInstance),\n        (showFallback = workInProgress.child),\n        (showFallback.memoizedState = mountSuspenseOffscreenState(renderLanes)),\n        (showFallback.childLanes = getRemainingWorkInPrimaryTree(\n          current,\n          JSCompiler_temp,\n          renderLanes\n        )),\n        (workInProgress.memoizedState = SUSPENDED_MARKER),\n        nextProps\n      );\n    pushPrimaryTreeSuspenseHandler(workInProgress);\n    return mountSuspensePrimaryChildren(workInProgress, nextInstance);\n  }\n  JSCompiler_temp$jscomp$0 = current.memoizedState;\n  if (\n    null !== JSCompiler_temp$jscomp$0 &&\n    ((nextInstance = JSCompiler_temp$jscomp$0.dehydrated),\n    null !== nextInstance)\n  ) {\n    if (didSuspend)\n      workInProgress.flags & 256\n        ? (pushPrimaryTreeSuspenseHandler(workInProgress),\n          (workInProgress.flags &= -257),\n          (workInProgress = retrySuspenseComponentWithoutHydrating(\n            current,\n            workInProgress,\n            renderLanes\n          )))\n        : null !== workInProgress.memoizedState\n          ? (reuseSuspenseHandlerOnStack(workInProgress),\n            (workInProgress.child = current.child),\n            (workInProgress.flags |= 128),\n            (workInProgress = null))\n          : (reuseSuspenseHandlerOnStack(workInProgress),\n            (showFallback = nextProps.fallback),\n            (nextInstance = workInProgress.mode),\n            (nextProps = mountWorkInProgressOffscreenFiber(\n              { mode: \"visible\", children: nextProps.children },\n              nextInstance\n            )),\n            (showFallback = createFiberFromFragment(\n              showFallback,\n              nextInstance,\n              renderLanes,\n              null\n            )),\n            (showFallback.flags |= 2),\n            (nextProps.return = workInProgress),\n            (showFallback.return = workInProgress),\n            (nextProps.sibling = showFallback),\n            (workInProgress.child = nextProps),\n            reconcileChildFibers(\n              workInProgress,\n              current.child,\n              null,\n              renderLanes\n            ),\n            (nextProps = workInProgress.child),\n            (nextProps.memoizedState =\n              mountSuspenseOffscreenState(renderLanes)),\n            (nextProps.childLanes = getRemainingWorkInPrimaryTree(\n              current,\n              JSCompiler_temp,\n              renderLanes\n            )),\n            (workInProgress.memoizedState = SUSPENDED_MARKER),\n            (workInProgress = showFallback));\n    else if (\n      (pushPrimaryTreeSuspenseHandler(workInProgress),\n      \"$!\" === nextInstance.data)\n    ) {\n      JSCompiler_temp =\n        nextInstance.nextSibling && nextInstance.nextSibling.dataset;\n      if (JSCompiler_temp) var digest = JSCompiler_temp.dgst;\n      JSCompiler_temp = digest;\n      nextProps = Error(formatProdErrorMessage(419));\n      nextProps.stack = \"\";\n      nextProps.digest = JSCompiler_temp;\n      queueHydrationError({ value: nextProps, source: null, stack: null });\n      workInProgress = retrySuspenseComponentWithoutHydrating(\n        current,\n        workInProgress,\n        renderLanes\n      );\n    } else if (\n      (didReceiveUpdate ||\n        propagateParentContextChanges(current, workInProgress, renderLanes, !1),\n      (JSCompiler_temp = 0 !== (renderLanes & current.childLanes)),\n      didReceiveUpdate || JSCompiler_temp)\n    ) {\n      JSCompiler_temp = workInProgressRoot;\n      if (null !== JSCompiler_temp) {\n        nextProps = renderLanes & -renderLanes;\n        if (0 !== (nextProps & 42)) nextProps = 1;\n        else\n          switch (nextProps) {\n            case 2:\n              nextProps = 1;\n              break;\n            case 8:\n              nextProps = 4;\n              break;\n            case 32:\n              nextProps = 16;\n              break;\n            case 128:\n            case 256:\n            case 512:\n            case 1024:\n            case 2048:\n            case 4096:\n            case 8192:\n            case 16384:\n            case 32768:\n            case 65536:\n            case 131072:\n            case 262144:\n            case 524288:\n            case 1048576:\n            case 2097152:\n            case 4194304:\n            case 8388608:\n            case 16777216:\n            case 33554432:\n              nextProps = 64;\n              break;\n            case 268435456:\n              nextProps = 134217728;\n              break;\n            default:\n              nextProps = 0;\n          }\n        nextProps =\n          0 !== (nextProps & (JSCompiler_temp.suspendedLanes | renderLanes))\n            ? 0\n            : nextProps;\n        if (0 !== nextProps && nextProps !== JSCompiler_temp$jscomp$0.retryLane)\n          throw (\n            ((JSCompiler_temp$jscomp$0.retryLane = nextProps),\n            enqueueConcurrentRenderForLane(current, nextProps),\n            scheduleUpdateOnFiber(JSCompiler_temp, current, nextProps),\n            SelectiveHydrationException)\n          );\n      }\n      \"$?\" === nextInstance.data || renderDidSuspendDelayIfPossible();\n      workInProgress = retrySuspenseComponentWithoutHydrating(\n        current,\n        workInProgress,\n        renderLanes\n      );\n    } else\n      \"$?\" === nextInstance.data\n        ? ((workInProgress.flags |= 128),\n          (workInProgress.child = current.child),\n          (workInProgress = retryDehydratedSuspenseBoundary.bind(\n            null,\n            current\n          )),\n          (nextInstance._reactRetry = workInProgress),\n          (workInProgress = null))\n        : ((current = JSCompiler_temp$jscomp$0.treeContext),\n          (nextHydratableInstance = getNextHydratable(\n            nextInstance.nextSibling\n          )),\n          (hydrationParentFiber = workInProgress),\n          (isHydrating = !0),\n          (hydrationErrors = null),\n          (rootOrSingletonContext = !1),\n          null !== current &&\n            ((idStack[idStackIndex++] = treeContextId),\n            (idStack[idStackIndex++] = treeContextOverflow),\n            (idStack[idStackIndex++] = treeContextProvider),\n            (treeContextId = current.id),\n            (treeContextOverflow = current.overflow),\n            (treeContextProvider = workInProgress)),\n          (workInProgress = mountSuspensePrimaryChildren(\n            workInProgress,\n            nextProps.children\n          )),\n          (workInProgress.flags |= 4096));\n    return workInProgress;\n  }\n  if (showFallback)\n    return (\n      reuseSuspenseHandlerOnStack(workInProgress),\n      (showFallback = nextProps.fallback),\n      (nextInstance = workInProgress.mode),\n      (JSCompiler_temp$jscomp$0 = current.child),\n      (digest = JSCompiler_temp$jscomp$0.sibling),\n      (nextProps = createWorkInProgress(JSCompiler_temp$jscomp$0, {\n        mode: \"hidden\",\n        children: nextProps.children\n      })),\n      (nextProps.subtreeFlags =\n        JSCompiler_temp$jscomp$0.subtreeFlags & 31457280),\n      null !== digest\n        ? (showFallback = createWorkInProgress(digest, showFallback))\n        : ((showFallback = createFiberFromFragment(\n            showFallback,\n            nextInstance,\n            renderLanes,\n            null\n          )),\n          (showFallback.flags |= 2)),\n      (showFallback.return = workInProgress),\n      (nextProps.return = workInProgress),\n      (nextProps.sibling = showFallback),\n      (workInProgress.child = nextProps),\n      (nextProps = showFallback),\n      (showFallback = workInProgress.child),\n      (nextInstance = current.child.memoizedState),\n      null === nextInstance\n        ? (nextInstance = mountSuspenseOffscreenState(renderLanes))\n        : ((JSCompiler_temp$jscomp$0 = nextInstance.cachePool),\n          null !== JSCompiler_temp$jscomp$0\n            ? ((digest = CacheContext._currentValue),\n              (JSCompiler_temp$jscomp$0 =\n                JSCompiler_temp$jscomp$0.parent !== digest\n                  ? { parent: digest, pool: digest }\n                  : JSCompiler_temp$jscomp$0))\n            : (JSCompiler_temp$jscomp$0 = getSuspendedCache()),\n          (nextInstance = {\n            baseLanes: nextInstance.baseLanes | renderLanes,\n            cachePool: JSCompiler_temp$jscomp$0\n          })),\n      (showFallback.memoizedState = nextInstance),\n      (showFallback.childLanes = getRemainingWorkInPrimaryTree(\n        current,\n        JSCompiler_temp,\n        renderLanes\n      )),\n      (workInProgress.memoizedState = SUSPENDED_MARKER),\n      nextProps\n    );\n  pushPrimaryTreeSuspenseHandler(workInProgress);\n  renderLanes = current.child;\n  current = renderLanes.sibling;\n  renderLanes = createWorkInProgress(renderLanes, {\n    mode: \"visible\",\n    children: nextProps.children\n  });\n  renderLanes.return = workInProgress;\n  renderLanes.sibling = null;\n  null !== current &&\n    ((JSCompiler_temp = workInProgress.deletions),\n    null === JSCompiler_temp\n      ? ((workInProgress.deletions = [current]), (workInProgress.flags |= 16))\n      : JSCompiler_temp.push(current));\n  workInProgress.child = renderLanes;\n  workInProgress.memoizedState = null;\n  return renderLanes;\n}\nfunction mountSuspensePrimaryChildren(workInProgress, primaryChildren) {\n  primaryChildren = mountWorkInProgressOffscreenFiber(\n    { mode: \"visible\", children: primaryChildren },\n    workInProgress.mode\n  );\n  primaryChildren.return = workInProgress;\n  return (workInProgress.child = primaryChildren);\n}\nfunction mountWorkInProgressOffscreenFiber(offscreenProps, mode) {\n  return createFiberFromOffscreen(offscreenProps, mode, 0, null);\n}\nfunction retrySuspenseComponentWithoutHydrating(\n  current,\n  workInProgress,\n  renderLanes\n) {\n  reconcileChildFibers(workInProgress, current.child, null, renderLanes);\n  current = mountSuspensePrimaryChildren(\n    workInProgress,\n    workInProgress.pendingProps.children\n  );\n  current.flags |= 2;\n  workInProgress.memoizedState = null;\n  return current;\n}\nfunction scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {\n  fiber.lanes |= renderLanes;\n  var alternate = fiber.alternate;\n  null !== alternate && (alternate.lanes |= renderLanes);\n  scheduleContextWorkOnParentPath(fiber.return, renderLanes, propagationRoot);\n}\nfunction initSuspenseListRenderState(\n  workInProgress,\n  isBackwards,\n  tail,\n  lastContentRow,\n  tailMode\n) {\n  var renderState = workInProgress.memoizedState;\n  null === renderState\n    ? (workInProgress.memoizedState = {\n        isBackwards: isBackwards,\n        rendering: null,\n        renderingStartTime: 0,\n        last: lastContentRow,\n        tail: tail,\n        tailMode: tailMode\n      })\n    : ((renderState.isBackwards = isBackwards),\n      (renderState.rendering = null),\n      (renderState.renderingStartTime = 0),\n      (renderState.last = lastContentRow),\n      (renderState.tail = tail),\n      (renderState.tailMode = tailMode));\n}\nfunction updateSuspenseListComponent(current, workInProgress, renderLanes) {\n  var nextProps = workInProgress.pendingProps,\n    revealOrder = nextProps.revealOrder,\n    tailMode = nextProps.tail;\n  reconcileChildren(current, workInProgress, nextProps.children, renderLanes);\n  nextProps = suspenseStackCursor.current;\n  if (0 !== (nextProps & 2))\n    (nextProps = (nextProps & 1) | 2), (workInProgress.flags |= 128);\n  else {\n    if (null !== current && 0 !== (current.flags & 128))\n      a: for (current = workInProgress.child; null !== current; ) {\n        if (13 === current.tag)\n          null !== current.memoizedState &&\n            scheduleSuspenseWorkOnFiber(current, renderLanes, workInProgress);\n        else if (19 === current.tag)\n          scheduleSuspenseWorkOnFiber(current, renderLanes, workInProgress);\n        else if (null !== current.child) {\n          current.child.return = current;\n          current = current.child;\n          continue;\n        }\n        if (current === workInProgress) break a;\n        for (; null === current.sibling; ) {\n          if (null === current.return || current.return === workInProgress)\n            break a;\n          current = current.return;\n        }\n        current.sibling.return = current.return;\n        current = current.sibling;\n      }\n    nextProps &= 1;\n  }\n  push(suspenseStackCursor, nextProps);\n  switch (revealOrder) {\n    case \"forwards\":\n      renderLanes = workInProgress.child;\n      for (revealOrder = null; null !== renderLanes; )\n        (current = renderLanes.alternate),\n          null !== current &&\n            null === findFirstSuspended(current) &&\n            (revealOrder = renderLanes),\n          (renderLanes = renderLanes.sibling);\n      renderLanes = revealOrder;\n      null === renderLanes\n        ? ((revealOrder = workInProgress.child), (workInProgress.child = null))\n        : ((revealOrder = renderLanes.sibling), (renderLanes.sibling = null));\n      initSuspenseListRenderState(\n        workInProgress,\n        !1,\n        revealOrder,\n        renderLanes,\n        tailMode\n      );\n      break;\n    case \"backwards\":\n      renderLanes = null;\n      revealOrder = workInProgress.child;\n      for (workInProgress.child = null; null !== revealOrder; ) {\n        current = revealOrder.alternate;\n        if (null !== current && null === findFirstSuspended(current)) {\n          workInProgress.child = revealOrder;\n          break;\n        }\n        current = revealOrder.sibling;\n        revealOrder.sibling = renderLanes;\n        renderLanes = revealOrder;\n        revealOrder = current;\n      }\n      initSuspenseListRenderState(\n        workInProgress,\n        !0,\n        renderLanes,\n        null,\n        tailMode\n      );\n      break;\n    case \"together\":\n      initSuspenseListRenderState(workInProgress, !1, null, null, void 0);\n      break;\n    default:\n      workInProgress.memoizedState = null;\n  }\n  return workInProgress.child;\n}\nfunction bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {\n  null !== current && (workInProgress.dependencies = current.dependencies);\n  workInProgressRootSkippedLanes |= workInProgress.lanes;\n  if (0 === (renderLanes & workInProgress.childLanes))\n    if (null !== current) {\n      if (\n        (propagateParentContextChanges(\n          current,\n          workInProgress,\n          renderLanes,\n          !1\n        ),\n        0 === (renderLanes & workInProgress.childLanes))\n      )\n        return null;\n    } else return null;\n  if (null !== current && workInProgress.child !== current.child)\n    throw Error(formatProdErrorMessage(153));\n  if (null !== workInProgress.child) {\n    current = workInProgress.child;\n    renderLanes = createWorkInProgress(current, current.pendingProps);\n    workInProgress.child = renderLanes;\n    for (renderLanes.return = workInProgress; null !== current.sibling; )\n      (current = current.sibling),\n        (renderLanes = renderLanes.sibling =\n          createWorkInProgress(current, current.pendingProps)),\n        (renderLanes.return = workInProgress);\n    renderLanes.sibling = null;\n  }\n  return workInProgress.child;\n}\nfunction checkScheduledUpdateOrContext(current, renderLanes) {\n  if (0 !== (current.lanes & renderLanes)) return !0;\n  current = current.dependencies;\n  return null !== current && checkIfContextChanged(current) ? !0 : !1;\n}\nfunction attemptEarlyBailoutIfNoScheduledUpdate(\n  current,\n  workInProgress,\n  renderLanes\n) {\n  switch (workInProgress.tag) {\n    case 3:\n      pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n      pushProvider(workInProgress, CacheContext, current.memoizedState.cache);\n      resetHydrationState();\n      break;\n    case 27:\n    case 5:\n      pushHostContext(workInProgress);\n      break;\n    case 4:\n      pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n      break;\n    case 10:\n      pushProvider(\n        workInProgress,\n        workInProgress.type,\n        workInProgress.memoizedProps.value\n      );\n      break;\n    case 13:\n      var state = workInProgress.memoizedState;\n      if (null !== state) {\n        if (null !== state.dehydrated)\n          return (\n            pushPrimaryTreeSuspenseHandler(workInProgress),\n            (workInProgress.flags |= 128),\n            null\n          );\n        if (0 !== (renderLanes & workInProgress.child.childLanes))\n          return updateSuspenseComponent(current, workInProgress, renderLanes);\n        pushPrimaryTreeSuspenseHandler(workInProgress);\n        current = bailoutOnAlreadyFinishedWork(\n          current,\n          workInProgress,\n          renderLanes\n        );\n        return null !== current ? current.sibling : null;\n      }\n      pushPrimaryTreeSuspenseHandler(workInProgress);\n      break;\n    case 19:\n      var didSuspendBefore = 0 !== (current.flags & 128);\n      state = 0 !== (renderLanes & workInProgress.childLanes);\n      state ||\n        (propagateParentContextChanges(\n          current,\n          workInProgress,\n          renderLanes,\n          !1\n        ),\n        (state = 0 !== (renderLanes & workInProgress.childLanes)));\n      if (didSuspendBefore) {\n        if (state)\n          return updateSuspenseListComponent(\n            current,\n            workInProgress,\n            renderLanes\n          );\n        workInProgress.flags |= 128;\n      }\n      didSuspendBefore = workInProgress.memoizedState;\n      null !== didSuspendBefore &&\n        ((didSuspendBefore.rendering = null),\n        (didSuspendBefore.tail = null),\n        (didSuspendBefore.lastEffect = null));\n      push(suspenseStackCursor, suspenseStackCursor.current);\n      if (state) break;\n      else return null;\n    case 22:\n    case 23:\n      return (\n        (workInProgress.lanes = 0),\n        updateOffscreenComponent(current, workInProgress, renderLanes)\n      );\n    case 24:\n      pushProvider(workInProgress, CacheContext, current.memoizedState.cache);\n  }\n  return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n}\nfunction beginWork(current, workInProgress, renderLanes) {\n  if (null !== current)\n    if (current.memoizedProps !== workInProgress.pendingProps)\n      didReceiveUpdate = !0;\n    else {\n      if (\n        !checkScheduledUpdateOrContext(current, renderLanes) &&\n        0 === (workInProgress.flags & 128)\n      )\n        return (\n          (didReceiveUpdate = !1),\n          attemptEarlyBailoutIfNoScheduledUpdate(\n            current,\n            workInProgress,\n            renderLanes\n          )\n        );\n      didReceiveUpdate = 0 !== (current.flags & 131072) ? !0 : !1;\n    }\n  else\n    (didReceiveUpdate = !1),\n      isHydrating &&\n        0 !== (workInProgress.flags & 1048576) &&\n        pushTreeId(workInProgress, treeForkCount, workInProgress.index);\n  workInProgress.lanes = 0;\n  switch (workInProgress.tag) {\n    case 16:\n      a: {\n        current = workInProgress.pendingProps;\n        var lazyComponent = workInProgress.elementType,\n          init = lazyComponent._init;\n        lazyComponent = init(lazyComponent._payload);\n        workInProgress.type = lazyComponent;\n        if (\"function\" === typeof lazyComponent)\n          shouldConstruct(lazyComponent)\n            ? ((current = resolveClassComponentProps(lazyComponent, current)),\n              (workInProgress.tag = 1),\n              (workInProgress = updateClassComponent(\n                null,\n                workInProgress,\n                lazyComponent,\n                current,\n                renderLanes\n              )))\n            : ((workInProgress.tag = 0),\n              (workInProgress = updateFunctionComponent(\n                null,\n                workInProgress,\n                lazyComponent,\n                current,\n                renderLanes\n              )));\n        else {\n          if (void 0 !== lazyComponent && null !== lazyComponent)\n            if (\n              ((init = lazyComponent.$$typeof), init === REACT_FORWARD_REF_TYPE)\n            ) {\n              workInProgress.tag = 11;\n              workInProgress = updateForwardRef(\n                null,\n                workInProgress,\n                lazyComponent,\n                current,\n                renderLanes\n              );\n              break a;\n            } else if (init === REACT_MEMO_TYPE) {\n              workInProgress.tag = 14;\n              workInProgress = updateMemoComponent(\n                null,\n                workInProgress,\n                lazyComponent,\n                current,\n                renderLanes\n              );\n              break a;\n            }\n          workInProgress =\n            getComponentNameFromType(lazyComponent) || lazyComponent;\n          throw Error(formatProdErrorMessage(306, workInProgress, \"\"));\n        }\n      }\n      return workInProgress;\n    case 0:\n      return updateFunctionComponent(\n        current,\n        workInProgress,\n        workInProgress.type,\n        workInProgress.pendingProps,\n        renderLanes\n      );\n    case 1:\n      return (\n        (lazyComponent = workInProgress.type),\n        (init = resolveClassComponentProps(\n          lazyComponent,\n          workInProgress.pendingProps\n        )),\n        updateClassComponent(\n          current,\n          workInProgress,\n          lazyComponent,\n          init,\n          renderLanes\n        )\n      );\n    case 3:\n      a: {\n        pushHostContainer(\n          workInProgress,\n          workInProgress.stateNode.containerInfo\n        );\n        if (null === current) throw Error(formatProdErrorMessage(387));\n        var nextProps = workInProgress.pendingProps;\n        init = workInProgress.memoizedState;\n        lazyComponent = init.element;\n        cloneUpdateQueue(current, workInProgress);\n        processUpdateQueue(workInProgress, nextProps, null, renderLanes);\n        var nextState = workInProgress.memoizedState;\n        nextProps = nextState.cache;\n        pushProvider(workInProgress, CacheContext, nextProps);\n        nextProps !== init.cache &&\n          propagateContextChanges(\n            workInProgress,\n            [CacheContext],\n            renderLanes,\n            !0\n          );\n        suspendIfUpdateReadFromEntangledAsyncAction();\n        nextProps = nextState.element;\n        if (init.isDehydrated)\n          if (\n            ((init = {\n              element: nextProps,\n              isDehydrated: !1,\n              cache: nextState.cache\n            }),\n            (workInProgress.updateQueue.baseState = init),\n            (workInProgress.memoizedState = init),\n            workInProgress.flags & 256)\n          ) {\n            workInProgress = mountHostRootWithoutHydrating(\n              current,\n              workInProgress,\n              nextProps,\n              renderLanes\n            );\n            break a;\n          } else if (nextProps !== lazyComponent) {\n            lazyComponent = createCapturedValueAtFiber(\n              Error(formatProdErrorMessage(424)),\n              workInProgress\n            );\n            queueHydrationError(lazyComponent);\n            workInProgress = mountHostRootWithoutHydrating(\n              current,\n              workInProgress,\n              nextProps,\n              renderLanes\n            );\n            break a;\n          } else\n            for (\n              nextHydratableInstance = getNextHydratable(\n                workInProgress.stateNode.containerInfo.firstChild\n              ),\n                hydrationParentFiber = workInProgress,\n                isHydrating = !0,\n                hydrationErrors = null,\n                rootOrSingletonContext = !0,\n                renderLanes = mountChildFibers(\n                  workInProgress,\n                  null,\n                  nextProps,\n                  renderLanes\n                ),\n                workInProgress.child = renderLanes;\n              renderLanes;\n\n            )\n              (renderLanes.flags = (renderLanes.flags & -3) | 4096),\n                (renderLanes = renderLanes.sibling);\n        else {\n          resetHydrationState();\n          if (nextProps === lazyComponent) {\n            workInProgress = bailoutOnAlreadyFinishedWork(\n              current,\n              workInProgress,\n              renderLanes\n            );\n            break a;\n          }\n          reconcileChildren(current, workInProgress, nextProps, renderLanes);\n        }\n        workInProgress = workInProgress.child;\n      }\n      return workInProgress;\n    case 26:\n      return (\n        markRef(current, workInProgress),\n        null === current\n          ? (renderLanes = getResource(\n              workInProgress.type,\n              null,\n              workInProgress.pendingProps,\n              null\n            ))\n            ? (workInProgress.memoizedState = renderLanes)\n            : isHydrating ||\n              ((renderLanes = workInProgress.type),\n              (current = workInProgress.pendingProps),\n              (lazyComponent = getOwnerDocumentFromRootContainer(\n                rootInstanceStackCursor.current\n              ).createElement(renderLanes)),\n              (lazyComponent[internalInstanceKey] = workInProgress),\n              (lazyComponent[internalPropsKey] = current),\n              setInitialProperties(lazyComponent, renderLanes, current),\n              markNodeAsHoistable(lazyComponent),\n              (workInProgress.stateNode = lazyComponent))\n          : (workInProgress.memoizedState = getResource(\n              workInProgress.type,\n              current.memoizedProps,\n              workInProgress.pendingProps,\n              current.memoizedState\n            )),\n        null\n      );\n    case 27:\n      return (\n        pushHostContext(workInProgress),\n        null === current &&\n          isHydrating &&\n          ((lazyComponent = workInProgress.stateNode =\n            resolveSingletonInstance(\n              workInProgress.type,\n              workInProgress.pendingProps,\n              rootInstanceStackCursor.current\n            )),\n          (hydrationParentFiber = workInProgress),\n          (rootOrSingletonContext = !0),\n          (nextHydratableInstance = getNextHydratable(\n            lazyComponent.firstChild\n          ))),\n        (lazyComponent = workInProgress.pendingProps.children),\n        null !== current || isHydrating\n          ? reconcileChildren(\n              current,\n              workInProgress,\n              lazyComponent,\n              renderLanes\n            )\n          : (workInProgress.child = reconcileChildFibers(\n              workInProgress,\n              null,\n              lazyComponent,\n              renderLanes\n            )),\n        markRef(current, workInProgress),\n        workInProgress.child\n      );\n    case 5:\n      if (null === current && isHydrating) {\n        if ((init = lazyComponent = nextHydratableInstance))\n          (lazyComponent = canHydrateInstance(\n            lazyComponent,\n            workInProgress.type,\n            workInProgress.pendingProps,\n            rootOrSingletonContext\n          )),\n            null !== lazyComponent\n              ? ((workInProgress.stateNode = lazyComponent),\n                (hydrationParentFiber = workInProgress),\n                (nextHydratableInstance = getNextHydratable(\n                  lazyComponent.firstChild\n                )),\n                (rootOrSingletonContext = !1),\n                (init = !0))\n              : (init = !1);\n        init || throwOnHydrationMismatch(workInProgress);\n      }\n      pushHostContext(workInProgress);\n      init = workInProgress.type;\n      nextProps = workInProgress.pendingProps;\n      nextState = null !== current ? current.memoizedProps : null;\n      lazyComponent = nextProps.children;\n      shouldSetTextContent(init, nextProps)\n        ? (lazyComponent = null)\n        : null !== nextState &&\n          shouldSetTextContent(init, nextState) &&\n          (workInProgress.flags |= 32);\n      null !== workInProgress.memoizedState &&\n        ((init = renderWithHooks(\n          current,\n          workInProgress,\n          TransitionAwareHostComponent,\n          null,\n          null,\n          renderLanes\n        )),\n        (HostTransitionContext._currentValue = init));\n      markRef(current, workInProgress);\n      reconcileChildren(current, workInProgress, lazyComponent, renderLanes);\n      return workInProgress.child;\n    case 6:\n      if (null === current && isHydrating) {\n        if ((current = renderLanes = nextHydratableInstance))\n          (renderLanes = canHydrateTextInstance(\n            renderLanes,\n            workInProgress.pendingProps,\n            rootOrSingletonContext\n          )),\n            null !== renderLanes\n              ? ((workInProgress.stateNode = renderLanes),\n                (hydrationParentFiber = workInProgress),\n                (nextHydratableInstance = null),\n                (current = !0))\n              : (current = !1);\n        current || throwOnHydrationMismatch(workInProgress);\n      }\n      return null;\n    case 13:\n      return updateSuspenseComponent(current, workInProgress, renderLanes);\n    case 4:\n      return (\n        pushHostContainer(\n          workInProgress,\n          workInProgress.stateNode.containerInfo\n        ),\n        (lazyComponent = workInProgress.pendingProps),\n        null === current\n          ? (workInProgress.child = reconcileChildFibers(\n              workInProgress,\n              null,\n              lazyComponent,\n              renderLanes\n            ))\n          : reconcileChildren(\n              current,\n              workInProgress,\n              lazyComponent,\n              renderLanes\n            ),\n        workInProgress.child\n      );\n    case 11:\n      return updateForwardRef(\n        current,\n        workInProgress,\n        workInProgress.type,\n        workInProgress.pendingProps,\n        renderLanes\n      );\n    case 7:\n      return (\n        reconcileChildren(\n          current,\n          workInProgress,\n          workInProgress.pendingProps,\n          renderLanes\n        ),\n        workInProgress.child\n      );\n    case 8:\n      return (\n        reconcileChildren(\n          current,\n          workInProgress,\n          workInProgress.pendingProps.children,\n          renderLanes\n        ),\n        workInProgress.child\n      );\n    case 12:\n      return (\n        reconcileChildren(\n          current,\n          workInProgress,\n          workInProgress.pendingProps.children,\n          renderLanes\n        ),\n        workInProgress.child\n      );\n    case 10:\n      return (\n        (lazyComponent = workInProgress.pendingProps),\n        pushProvider(workInProgress, workInProgress.type, lazyComponent.value),\n        reconcileChildren(\n          current,\n          workInProgress,\n          lazyComponent.children,\n          renderLanes\n        ),\n        workInProgress.child\n      );\n    case 9:\n      return (\n        (init = workInProgress.type._context),\n        (lazyComponent = workInProgress.pendingProps.children),\n        prepareToReadContext(workInProgress),\n        (init = readContext(init)),\n        (lazyComponent = lazyComponent(init)),\n        (workInProgress.flags |= 1),\n        reconcileChildren(current, workInProgress, lazyComponent, renderLanes),\n        workInProgress.child\n      );\n    case 14:\n      return updateMemoComponent(\n        current,\n        workInProgress,\n        workInProgress.type,\n        workInProgress.pendingProps,\n        renderLanes\n      );\n    case 15:\n      return updateSimpleMemoComponent(\n        current,\n        workInProgress,\n        workInProgress.type,\n        workInProgress.pendingProps,\n        renderLanes\n      );\n    case 19:\n      return updateSuspenseListComponent(current, workInProgress, renderLanes);\n    case 22:\n      return updateOffscreenComponent(current, workInProgress, renderLanes);\n    case 24:\n      return (\n        prepareToReadContext(workInProgress),\n        (lazyComponent = readContext(CacheContext)),\n        null === current\n          ? ((init = peekCacheFromPool()),\n            null === init &&\n              ((init = workInProgressRoot),\n              (nextProps = createCache()),\n              (init.pooledCache = nextProps),\n              nextProps.refCount++,\n              null !== nextProps && (init.pooledCacheLanes |= renderLanes),\n              (init = nextProps)),\n            (workInProgress.memoizedState = {\n              parent: lazyComponent,\n              cache: init\n            }),\n            initializeUpdateQueue(workInProgress),\n            pushProvider(workInProgress, CacheContext, init))\n          : (0 !== (current.lanes & renderLanes) &&\n              (cloneUpdateQueue(current, workInProgress),\n              processUpdateQueue(workInProgress, null, null, renderLanes),\n              suspendIfUpdateReadFromEntangledAsyncAction()),\n            (init = current.memoizedState),\n            (nextProps = workInProgress.memoizedState),\n            init.parent !== lazyComponent\n              ? ((init = { parent: lazyComponent, cache: lazyComponent }),\n                (workInProgress.memoizedState = init),\n                0 === workInProgress.lanes &&\n                  (workInProgress.memoizedState =\n                    workInProgress.updateQueue.baseState =\n                      init),\n                pushProvider(workInProgress, CacheContext, lazyComponent))\n              : ((lazyComponent = nextProps.cache),\n                pushProvider(workInProgress, CacheContext, lazyComponent),\n                lazyComponent !== init.cache &&\n                  propagateContextChanges(\n                    workInProgress,\n                    [CacheContext],\n                    renderLanes,\n                    !0\n                  ))),\n        reconcileChildren(\n          current,\n          workInProgress,\n          workInProgress.pendingProps.children,\n          renderLanes\n        ),\n        workInProgress.child\n      );\n    case 29:\n      throw workInProgress.pendingProps;\n  }\n  throw Error(formatProdErrorMessage(156, workInProgress.tag));\n}\nvar valueCursor = createCursor(null),\n  currentlyRenderingFiber = null,\n  lastContextDependency = null;\nfunction pushProvider(providerFiber, context, nextValue) {\n  push(valueCursor, context._currentValue);\n  context._currentValue = nextValue;\n}\nfunction popProvider(context) {\n  context._currentValue = valueCursor.current;\n  pop(valueCursor);\n}\nfunction scheduleContextWorkOnParentPath(parent, renderLanes, propagationRoot) {\n  for (; null !== parent; ) {\n    var alternate = parent.alternate;\n    (parent.childLanes & renderLanes) !== renderLanes\n      ? ((parent.childLanes |= renderLanes),\n        null !== alternate && (alternate.childLanes |= renderLanes))\n      : null !== alternate &&\n        (alternate.childLanes & renderLanes) !== renderLanes &&\n        (alternate.childLanes |= renderLanes);\n    if (parent === propagationRoot) break;\n    parent = parent.return;\n  }\n}\nfunction propagateContextChanges(\n  workInProgress,\n  contexts,\n  renderLanes,\n  forcePropagateEntireTree\n) {\n  var fiber = workInProgress.child;\n  null !== fiber && (fiber.return = workInProgress);\n  for (; null !== fiber; ) {\n    var list = fiber.dependencies;\n    if (null !== list) {\n      var nextFiber = fiber.child;\n      list = list.firstContext;\n      a: for (; null !== list; ) {\n        var dependency = list;\n        list = fiber;\n        for (var i = 0; i < contexts.length; i++)\n          if (dependency.context === contexts[i]) {\n            list.lanes |= renderLanes;\n            dependency = list.alternate;\n            null !== dependency && (dependency.lanes |= renderLanes);\n            scheduleContextWorkOnParentPath(\n              list.return,\n              renderLanes,\n              workInProgress\n            );\n            forcePropagateEntireTree || (nextFiber = null);\n            break a;\n          }\n        list = dependency.next;\n      }\n    } else if (18 === fiber.tag) {\n      nextFiber = fiber.return;\n      if (null === nextFiber) throw Error(formatProdErrorMessage(341));\n      nextFiber.lanes |= renderLanes;\n      list = nextFiber.alternate;\n      null !== list && (list.lanes |= renderLanes);\n      scheduleContextWorkOnParentPath(nextFiber, renderLanes, workInProgress);\n      nextFiber = null;\n    } else nextFiber = fiber.child;\n    if (null !== nextFiber) nextFiber.return = fiber;\n    else\n      for (nextFiber = fiber; null !== nextFiber; ) {\n        if (nextFiber === workInProgress) {\n          nextFiber = null;\n          break;\n        }\n        fiber = nextFiber.sibling;\n        if (null !== fiber) {\n          fiber.return = nextFiber.return;\n          nextFiber = fiber;\n          break;\n        }\n        nextFiber = nextFiber.return;\n      }\n    fiber = nextFiber;\n  }\n}\nfunction propagateParentContextChanges(\n  current,\n  workInProgress,\n  renderLanes,\n  forcePropagateEntireTree\n) {\n  current = null;\n  for (\n    var parent = workInProgress, isInsidePropagationBailout = !1;\n    null !== parent;\n\n  ) {\n    if (!isInsidePropagationBailout)\n      if (0 !== (parent.flags & 524288)) isInsidePropagationBailout = !0;\n      else if (0 !== (parent.flags & 262144)) break;\n    if (10 === parent.tag) {\n      var currentParent = parent.alternate;\n      if (null === currentParent) throw Error(formatProdErrorMessage(387));\n      currentParent = currentParent.memoizedProps;\n      if (null !== currentParent) {\n        var context = parent.type;\n        objectIs(parent.pendingProps.value, currentParent.value) ||\n          (null !== current ? current.push(context) : (current = [context]));\n      }\n    } else if (parent === hostTransitionProviderCursor.current) {\n      currentParent = parent.alternate;\n      if (null === currentParent) throw Error(formatProdErrorMessage(387));\n      currentParent.memoizedState.memoizedState !==\n        parent.memoizedState.memoizedState &&\n        (null !== current\n          ? current.push(HostTransitionContext)\n          : (current = [HostTransitionContext]));\n    }\n    parent = parent.return;\n  }\n  null !== current &&\n    propagateContextChanges(\n      workInProgress,\n      current,\n      renderLanes,\n      forcePropagateEntireTree\n    );\n  workInProgress.flags |= 262144;\n}\nfunction checkIfContextChanged(currentDependencies) {\n  for (\n    currentDependencies = currentDependencies.firstContext;\n    null !== currentDependencies;\n\n  ) {\n    if (\n      !objectIs(\n        currentDependencies.context._currentValue,\n        currentDependencies.memoizedValue\n      )\n    )\n      return !0;\n    currentDependencies = currentDependencies.next;\n  }\n  return !1;\n}\nfunction prepareToReadContext(workInProgress) {\n  currentlyRenderingFiber = workInProgress;\n  lastContextDependency = null;\n  workInProgress = workInProgress.dependencies;\n  null !== workInProgress && (workInProgress.firstContext = null);\n}\nfunction readContext(context) {\n  return readContextForConsumer(currentlyRenderingFiber, context);\n}\nfunction readContextDuringReconciliation(consumer, context) {\n  null === currentlyRenderingFiber && prepareToReadContext(consumer);\n  return readContextForConsumer(consumer, context);\n}\nfunction readContextForConsumer(consumer, context) {\n  var value = context._currentValue;\n  context = { context: context, memoizedValue: value, next: null };\n  if (null === lastContextDependency) {\n    if (null === consumer) throw Error(formatProdErrorMessage(308));\n    lastContextDependency = context;\n    consumer.dependencies = { lanes: 0, firstContext: context };\n    consumer.flags |= 524288;\n  } else lastContextDependency = lastContextDependency.next = context;\n  return value;\n}\nvar hasForceUpdate = !1;\nfunction initializeUpdateQueue(fiber) {\n  fiber.updateQueue = {\n    baseState: fiber.memoizedState,\n    firstBaseUpdate: null,\n    lastBaseUpdate: null,\n    shared: { pending: null, lanes: 0, hiddenCallbacks: null },\n    callbacks: null\n  };\n}\nfunction cloneUpdateQueue(current, workInProgress) {\n  current = current.updateQueue;\n  workInProgress.updateQueue === current &&\n    (workInProgress.updateQueue = {\n      baseState: current.baseState,\n      firstBaseUpdate: current.firstBaseUpdate,\n      lastBaseUpdate: current.lastBaseUpdate,\n      shared: current.shared,\n      callbacks: null\n    });\n}\nfunction createUpdate(lane) {\n  return { lane: lane, tag: 0, payload: null, callback: null, next: null };\n}\nfunction enqueueUpdate(fiber, update, lane) {\n  var updateQueue = fiber.updateQueue;\n  if (null === updateQueue) return null;\n  updateQueue = updateQueue.shared;\n  if (0 !== (executionContext & 2)) {\n    var pending = updateQueue.pending;\n    null === pending\n      ? (update.next = update)\n      : ((update.next = pending.next), (pending.next = update));\n    updateQueue.pending = update;\n    update = getRootForUpdatedFiber(fiber);\n    markUpdateLaneFromFiberToRoot(fiber, null, lane);\n    return update;\n  }\n  enqueueUpdate$1(fiber, updateQueue, update, lane);\n  return getRootForUpdatedFiber(fiber);\n}\nfunction entangleTransitions(root, fiber, lane) {\n  fiber = fiber.updateQueue;\n  if (null !== fiber && ((fiber = fiber.shared), 0 !== (lane & 4194176))) {\n    var queueLanes = fiber.lanes;\n    queueLanes &= root.pendingLanes;\n    lane |= queueLanes;\n    fiber.lanes = lane;\n    markRootEntangled(root, lane);\n  }\n}\nfunction enqueueCapturedUpdate(workInProgress, capturedUpdate) {\n  var queue = workInProgress.updateQueue,\n    current = workInProgress.alternate;\n  if (\n    null !== current &&\n    ((current = current.updateQueue), queue === current)\n  ) {\n    var newFirst = null,\n      newLast = null;\n    queue = queue.firstBaseUpdate;\n    if (null !== queue) {\n      do {\n        var clone = {\n          lane: queue.lane,\n          tag: queue.tag,\n          payload: queue.payload,\n          callback: null,\n          next: null\n        };\n        null === newLast\n          ? (newFirst = newLast = clone)\n          : (newLast = newLast.next = clone);\n        queue = queue.next;\n      } while (null !== queue);\n      null === newLast\n        ? (newFirst = newLast = capturedUpdate)\n        : (newLast = newLast.next = capturedUpdate);\n    } else newFirst = newLast = capturedUpdate;\n    queue = {\n      baseState: current.baseState,\n      firstBaseUpdate: newFirst,\n      lastBaseUpdate: newLast,\n      shared: current.shared,\n      callbacks: current.callbacks\n    };\n    workInProgress.updateQueue = queue;\n    return;\n  }\n  workInProgress = queue.lastBaseUpdate;\n  null === workInProgress\n    ? (queue.firstBaseUpdate = capturedUpdate)\n    : (workInProgress.next = capturedUpdate);\n  queue.lastBaseUpdate = capturedUpdate;\n}\nvar didReadFromEntangledAsyncAction = !1;\nfunction suspendIfUpdateReadFromEntangledAsyncAction() {\n  if (didReadFromEntangledAsyncAction) {\n    var entangledActionThenable = currentEntangledActionThenable;\n    if (null !== entangledActionThenable) throw entangledActionThenable;\n  }\n}\nfunction processUpdateQueue(\n  workInProgress$jscomp$0,\n  props,\n  instance$jscomp$0,\n  renderLanes\n) {\n  didReadFromEntangledAsyncAction = !1;\n  var queue = workInProgress$jscomp$0.updateQueue;\n  hasForceUpdate = !1;\n  var firstBaseUpdate = queue.firstBaseUpdate,\n    lastBaseUpdate = queue.lastBaseUpdate,\n    pendingQueue = queue.shared.pending;\n  if (null !== pendingQueue) {\n    queue.shared.pending = null;\n    var lastPendingUpdate = pendingQueue,\n      firstPendingUpdate = lastPendingUpdate.next;\n    lastPendingUpdate.next = null;\n    null === lastBaseUpdate\n      ? (firstBaseUpdate = firstPendingUpdate)\n      : (lastBaseUpdate.next = firstPendingUpdate);\n    lastBaseUpdate = lastPendingUpdate;\n    var current = workInProgress$jscomp$0.alternate;\n    null !== current &&\n      ((current = current.updateQueue),\n      (pendingQueue = current.lastBaseUpdate),\n      pendingQueue !== lastBaseUpdate &&\n        (null === pendingQueue\n          ? (current.firstBaseUpdate = firstPendingUpdate)\n          : (pendingQueue.next = firstPendingUpdate),\n        (current.lastBaseUpdate = lastPendingUpdate)));\n  }\n  if (null !== firstBaseUpdate) {\n    var newState = queue.baseState;\n    lastBaseUpdate = 0;\n    current = firstPendingUpdate = lastPendingUpdate = null;\n    pendingQueue = firstBaseUpdate;\n    do {\n      var updateLane = pendingQueue.lane & -536870913,\n        isHiddenUpdate = updateLane !== pendingQueue.lane;\n      if (\n        isHiddenUpdate\n          ? (workInProgressRootRenderLanes & updateLane) === updateLane\n          : (renderLanes & updateLane) === updateLane\n      ) {\n        0 !== updateLane &&\n          updateLane === currentEntangledLane &&\n          (didReadFromEntangledAsyncAction = !0);\n        null !== current &&\n          (current = current.next =\n            {\n              lane: 0,\n              tag: pendingQueue.tag,\n              payload: pendingQueue.payload,\n              callback: null,\n              next: null\n            });\n        a: {\n          var workInProgress = workInProgress$jscomp$0,\n            update = pendingQueue;\n          updateLane = props;\n          var instance = instance$jscomp$0;\n          switch (update.tag) {\n            case 1:\n              workInProgress = update.payload;\n              if (\"function\" === typeof workInProgress) {\n                newState = workInProgress.call(instance, newState, updateLane);\n                break a;\n              }\n              newState = workInProgress;\n              break a;\n            case 3:\n              workInProgress.flags = (workInProgress.flags & -65537) | 128;\n            case 0:\n              workInProgress = update.payload;\n              updateLane =\n                \"function\" === typeof workInProgress\n                  ? workInProgress.call(instance, newState, updateLane)\n                  : workInProgress;\n              if (null === updateLane || void 0 === updateLane) break a;\n              newState = assign({}, newState, updateLane);\n              break a;\n            case 2:\n              hasForceUpdate = !0;\n          }\n        }\n        updateLane = pendingQueue.callback;\n        null !== updateLane &&\n          ((workInProgress$jscomp$0.flags |= 64),\n          isHiddenUpdate && (workInProgress$jscomp$0.flags |= 8192),\n          (isHiddenUpdate = queue.callbacks),\n          null === isHiddenUpdate\n            ? (queue.callbacks = [updateLane])\n            : isHiddenUpdate.push(updateLane));\n      } else\n        (isHiddenUpdate = {\n          lane: updateLane,\n          tag: pendingQueue.tag,\n          payload: pendingQueue.payload,\n          callback: pendingQueue.callback,\n          next: null\n        }),\n          null === current\n            ? ((firstPendingUpdate = current = isHiddenUpdate),\n              (lastPendingUpdate = newState))\n            : (current = current.next = isHiddenUpdate),\n          (lastBaseUpdate |= updateLane);\n      pendingQueue = pendingQueue.next;\n      if (null === pendingQueue)\n        if (((pendingQueue = queue.shared.pending), null === pendingQueue))\n          break;\n        else\n          (isHiddenUpdate = pendingQueue),\n            (pendingQueue = isHiddenUpdate.next),\n            (isHiddenUpdate.next = null),\n            (queue.lastBaseUpdate = isHiddenUpdate),\n            (queue.shared.pending = null);\n    } while (1);\n    null === current && (lastPendingUpdate = newState);\n    queue.baseState = lastPendingUpdate;\n    queue.firstBaseUpdate = firstPendingUpdate;\n    queue.lastBaseUpdate = current;\n    null === firstBaseUpdate && (queue.shared.lanes = 0);\n    workInProgressRootSkippedLanes |= lastBaseUpdate;\n    workInProgress$jscomp$0.lanes = lastBaseUpdate;\n    workInProgress$jscomp$0.memoizedState = newState;\n  }\n}\nfunction callCallback(callback, context) {\n  if (\"function\" !== typeof callback)\n    throw Error(formatProdErrorMessage(191, callback));\n  callback.call(context);\n}\nfunction commitCallbacks(updateQueue, context) {\n  var callbacks = updateQueue.callbacks;\n  if (null !== callbacks)\n    for (\n      updateQueue.callbacks = null, updateQueue = 0;\n      updateQueue < callbacks.length;\n      updateQueue++\n    )\n      callCallback(callbacks[updateQueue], context);\n}\nfunction commitHookEffectListMount(flags, finishedWork) {\n  try {\n    var updateQueue = finishedWork.updateQueue,\n      lastEffect = null !== updateQueue ? updateQueue.lastEffect : null;\n    if (null !== lastEffect) {\n      var firstEffect = lastEffect.next;\n      updateQueue = firstEffect;\n      do {\n        if ((updateQueue.tag & flags) === flags) {\n          lastEffect = void 0;\n          var create = updateQueue.create,\n            inst = updateQueue.inst;\n          lastEffect = create();\n          inst.destroy = lastEffect;\n        }\n        updateQueue = updateQueue.next;\n      } while (updateQueue !== firstEffect);\n    }\n  } catch (error) {\n    captureCommitPhaseError(finishedWork, finishedWork.return, error);\n  }\n}\nfunction commitHookEffectListUnmount(\n  flags,\n  finishedWork,\n  nearestMountedAncestor$jscomp$0\n) {\n  try {\n    var updateQueue = finishedWork.updateQueue,\n      lastEffect = null !== updateQueue ? updateQueue.lastEffect : null;\n    if (null !== lastEffect) {\n      var firstEffect = lastEffect.next;\n      updateQueue = firstEffect;\n      do {\n        if ((updateQueue.tag & flags) === flags) {\n          var inst = updateQueue.inst,\n            destroy = inst.destroy;\n          if (void 0 !== destroy) {\n            inst.destroy = void 0;\n            lastEffect = finishedWork;\n            var nearestMountedAncestor = nearestMountedAncestor$jscomp$0;\n            try {\n              destroy();\n            } catch (error) {\n              captureCommitPhaseError(\n                lastEffect,\n                nearestMountedAncestor,\n                error\n              );\n            }\n          }\n        }\n        updateQueue = updateQueue.next;\n      } while (updateQueue !== firstEffect);\n    }\n  } catch (error) {\n    captureCommitPhaseError(finishedWork, finishedWork.return, error);\n  }\n}\nfunction commitClassCallbacks(finishedWork) {\n  var updateQueue = finishedWork.updateQueue;\n  if (null !== updateQueue) {\n    var instance = finishedWork.stateNode;\n    try {\n      commitCallbacks(updateQueue, instance);\n    } catch (error) {\n      captureCommitPhaseError(finishedWork, finishedWork.return, error);\n    }\n  }\n}\nfunction safelyCallComponentWillUnmount(\n  current,\n  nearestMountedAncestor,\n  instance\n) {\n  instance.props = resolveClassComponentProps(\n    current.type,\n    current.memoizedProps\n  );\n  instance.state = current.memoizedState;\n  try {\n    instance.componentWillUnmount();\n  } catch (error) {\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n}\nfunction safelyAttachRef(current, nearestMountedAncestor) {\n  try {\n    var ref = current.ref;\n    if (null !== ref) {\n      var instance = current.stateNode;\n      switch (current.tag) {\n        case 26:\n        case 27:\n        case 5:\n          var instanceToUse = instance;\n          break;\n        default:\n          instanceToUse = instance;\n      }\n      \"function\" === typeof ref\n        ? (current.refCleanup = ref(instanceToUse))\n        : (ref.current = instanceToUse);\n    }\n  } catch (error) {\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n}\nfunction safelyDetachRef(current, nearestMountedAncestor) {\n  var ref = current.ref,\n    refCleanup = current.refCleanup;\n  if (null !== ref)\n    if (\"function\" === typeof refCleanup)\n      try {\n        refCleanup();\n      } catch (error) {\n        captureCommitPhaseError(current, nearestMountedAncestor, error);\n      } finally {\n        (current.refCleanup = null),\n          (current = current.alternate),\n          null != current && (current.refCleanup = null);\n      }\n    else if (\"function\" === typeof ref)\n      try {\n        ref(null);\n      } catch (error$112) {\n        captureCommitPhaseError(current, nearestMountedAncestor, error$112);\n      }\n    else ref.current = null;\n}\nfunction commitHostMount(finishedWork) {\n  var type = finishedWork.type,\n    props = finishedWork.memoizedProps,\n    instance = finishedWork.stateNode;\n  try {\n    a: switch (type) {\n      case \"button\":\n      case \"input\":\n      case \"select\":\n      case \"textarea\":\n        props.autoFocus && instance.focus();\n        break a;\n      case \"img\":\n        props.src\n          ? (instance.src = props.src)\n          : props.srcSet && (instance.srcset = props.srcSet);\n    }\n  } catch (error) {\n    captureCommitPhaseError(finishedWork, finishedWork.return, error);\n  }\n}\nfunction commitHostUpdate(finishedWork, newProps, oldProps) {\n  try {\n    var domElement = finishedWork.stateNode;\n    updateProperties(domElement, finishedWork.type, oldProps, newProps);\n    domElement[internalPropsKey] = newProps;\n  } catch (error) {\n    captureCommitPhaseError(finishedWork, finishedWork.return, error);\n  }\n}\nfunction isHostParent(fiber) {\n  return (\n    5 === fiber.tag ||\n    3 === fiber.tag ||\n    26 === fiber.tag ||\n    27 === fiber.tag ||\n    4 === fiber.tag\n  );\n}\nfunction getHostSibling(fiber) {\n  a: for (;;) {\n    for (; null === fiber.sibling; ) {\n      if (null === fiber.return || isHostParent(fiber.return)) return null;\n      fiber = fiber.return;\n    }\n    fiber.sibling.return = fiber.return;\n    for (\n      fiber = fiber.sibling;\n      5 !== fiber.tag &&\n      6 !== fiber.tag &&\n      27 !== fiber.tag &&\n      18 !== fiber.tag;\n\n    ) {\n      if (fiber.flags & 2) continue a;\n      if (null === fiber.child || 4 === fiber.tag) continue a;\n      else (fiber.child.return = fiber), (fiber = fiber.child);\n    }\n    if (!(fiber.flags & 2)) return fiber.stateNode;\n  }\n}\nfunction insertOrAppendPlacementNodeIntoContainer(node, before, parent) {\n  var tag = node.tag;\n  if (5 === tag || 6 === tag)\n    (node = node.stateNode),\n      before\n        ? 8 === parent.nodeType\n          ? parent.parentNode.insertBefore(node, before)\n          : parent.insertBefore(node, before)\n        : (8 === parent.nodeType\n            ? ((before = parent.parentNode), before.insertBefore(node, parent))\n            : ((before = parent), before.appendChild(node)),\n          (parent = parent._reactRootContainer),\n          (null !== parent && void 0 !== parent) ||\n            null !== before.onclick ||\n            (before.onclick = noop$1));\n  else if (4 !== tag && 27 !== tag && ((node = node.child), null !== node))\n    for (\n      insertOrAppendPlacementNodeIntoContainer(node, before, parent),\n        node = node.sibling;\n      null !== node;\n\n    )\n      insertOrAppendPlacementNodeIntoContainer(node, before, parent),\n        (node = node.sibling);\n}\nfunction insertOrAppendPlacementNode(node, before, parent) {\n  var tag = node.tag;\n  if (5 === tag || 6 === tag)\n    (node = node.stateNode),\n      before ? parent.insertBefore(node, before) : parent.appendChild(node);\n  else if (4 !== tag && 27 !== tag && ((node = node.child), null !== node))\n    for (\n      insertOrAppendPlacementNode(node, before, parent), node = node.sibling;\n      null !== node;\n\n    )\n      insertOrAppendPlacementNode(node, before, parent), (node = node.sibling);\n}\nvar offscreenSubtreeIsHidden = !1,\n  offscreenSubtreeWasHidden = !1,\n  needsFormReset = !1,\n  PossiblyWeakSet = \"function\" === typeof WeakSet ? WeakSet : Set,\n  nextEffect = null,\n  shouldFireAfterActiveInstanceBlur = !1;\nfunction commitBeforeMutationEffects(root, firstChild) {\n  root = root.containerInfo;\n  eventsEnabled = _enabled;\n  root = getActiveElementDeep(root);\n  if (hasSelectionCapabilities(root)) {\n    if (\"selectionStart\" in root)\n      var JSCompiler_temp = {\n        start: root.selectionStart,\n        end: root.selectionEnd\n      };\n    else\n      a: {\n        JSCompiler_temp =\n          ((JSCompiler_temp = root.ownerDocument) &&\n            JSCompiler_temp.defaultView) ||\n          window;\n        var selection =\n          JSCompiler_temp.getSelection && JSCompiler_temp.getSelection();\n        if (selection && 0 !== selection.rangeCount) {\n          JSCompiler_temp = selection.anchorNode;\n          var anchorOffset = selection.anchorOffset,\n            focusNode = selection.focusNode;\n          selection = selection.focusOffset;\n          try {\n            JSCompiler_temp.nodeType, focusNode.nodeType;\n          } catch (e$20) {\n            JSCompiler_temp = null;\n            break a;\n          }\n          var length = 0,\n            start = -1,\n            end = -1,\n            indexWithinAnchor = 0,\n            indexWithinFocus = 0,\n            node = root,\n            parentNode = null;\n          b: for (;;) {\n            for (var next; ; ) {\n              node !== JSCompiler_temp ||\n                (0 !== anchorOffset && 3 !== node.nodeType) ||\n                (start = length + anchorOffset);\n              node !== focusNode ||\n                (0 !== selection && 3 !== node.nodeType) ||\n                (end = length + selection);\n              3 === node.nodeType && (length += node.nodeValue.length);\n              if (null === (next = node.firstChild)) break;\n              parentNode = node;\n              node = next;\n            }\n            for (;;) {\n              if (node === root) break b;\n              parentNode === JSCompiler_temp &&\n                ++indexWithinAnchor === anchorOffset &&\n                (start = length);\n              parentNode === focusNode &&\n                ++indexWithinFocus === selection &&\n                (end = length);\n              if (null !== (next = node.nextSibling)) break;\n              node = parentNode;\n              parentNode = node.parentNode;\n            }\n            node = next;\n          }\n          JSCompiler_temp =\n            -1 === start || -1 === end ? null : { start: start, end: end };\n        } else JSCompiler_temp = null;\n      }\n    JSCompiler_temp = JSCompiler_temp || { start: 0, end: 0 };\n  } else JSCompiler_temp = null;\n  selectionInformation = { focusedElem: root, selectionRange: JSCompiler_temp };\n  _enabled = !1;\n  for (nextEffect = firstChild; null !== nextEffect; )\n    if (\n      ((firstChild = nextEffect),\n      (root = firstChild.child),\n      0 !== (firstChild.subtreeFlags & 1028) && null !== root)\n    )\n      (root.return = firstChild), (nextEffect = root);\n    else\n      for (; null !== nextEffect; ) {\n        firstChild = nextEffect;\n        focusNode = firstChild.alternate;\n        root = firstChild.flags;\n        switch (firstChild.tag) {\n          case 0:\n            break;\n          case 11:\n          case 15:\n            break;\n          case 1:\n            if (0 !== (root & 1024) && null !== focusNode) {\n              root = void 0;\n              JSCompiler_temp = firstChild;\n              anchorOffset = focusNode.memoizedProps;\n              focusNode = focusNode.memoizedState;\n              selection = JSCompiler_temp.stateNode;\n              try {\n                var resolvedPrevProps = resolveClassComponentProps(\n                  JSCompiler_temp.type,\n                  anchorOffset,\n                  JSCompiler_temp.elementType === JSCompiler_temp.type\n                );\n                root = selection.getSnapshotBeforeUpdate(\n                  resolvedPrevProps,\n                  focusNode\n                );\n                selection.__reactInternalSnapshotBeforeUpdate = root;\n              } catch (error) {\n                captureCommitPhaseError(\n                  JSCompiler_temp,\n                  JSCompiler_temp.return,\n                  error\n                );\n              }\n            }\n            break;\n          case 3:\n            if (0 !== (root & 1024))\n              if (\n                ((root = firstChild.stateNode.containerInfo),\n                (JSCompiler_temp = root.nodeType),\n                9 === JSCompiler_temp)\n              )\n                clearContainerSparingly(root);\n              else if (1 === JSCompiler_temp)\n                switch (root.nodeName) {\n                  case \"HEAD\":\n                  case \"HTML\":\n                  case \"BODY\":\n                    clearContainerSparingly(root);\n                    break;\n                  default:\n                    root.textContent = \"\";\n                }\n            break;\n          case 5:\n          case 26:\n          case 27:\n          case 6:\n          case 4:\n          case 17:\n            break;\n          default:\n            if (0 !== (root & 1024)) throw Error(formatProdErrorMessage(163));\n        }\n        root = firstChild.sibling;\n        if (null !== root) {\n          root.return = firstChild.return;\n          nextEffect = root;\n          break;\n        }\n        nextEffect = firstChild.return;\n      }\n  resolvedPrevProps = shouldFireAfterActiveInstanceBlur;\n  shouldFireAfterActiveInstanceBlur = !1;\n  return resolvedPrevProps;\n}\nfunction commitLayoutEffectOnFiber(finishedRoot, current, finishedWork) {\n  var flags = finishedWork.flags;\n  switch (finishedWork.tag) {\n    case 0:\n    case 11:\n    case 15:\n      recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n      flags & 4 && commitHookEffectListMount(5, finishedWork);\n      break;\n    case 1:\n      recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n      if (flags & 4)\n        if (((finishedRoot = finishedWork.stateNode), null === current))\n          try {\n            finishedRoot.componentDidMount();\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        else {\n          var prevProps = resolveClassComponentProps(\n            finishedWork.type,\n            current.memoizedProps\n          );\n          current = current.memoizedState;\n          try {\n            finishedRoot.componentDidUpdate(\n              prevProps,\n              current,\n              finishedRoot.__reactInternalSnapshotBeforeUpdate\n            );\n          } catch (error$111) {\n            captureCommitPhaseError(\n              finishedWork,\n              finishedWork.return,\n              error$111\n            );\n          }\n        }\n      flags & 64 && commitClassCallbacks(finishedWork);\n      flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);\n      break;\n    case 3:\n      recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n      if (flags & 64 && ((flags = finishedWork.updateQueue), null !== flags)) {\n        finishedRoot = null;\n        if (null !== finishedWork.child)\n          switch (finishedWork.child.tag) {\n            case 27:\n            case 5:\n              finishedRoot = finishedWork.child.stateNode;\n              break;\n            case 1:\n              finishedRoot = finishedWork.child.stateNode;\n          }\n        try {\n          commitCallbacks(flags, finishedRoot);\n        } catch (error) {\n          captureCommitPhaseError(finishedWork, finishedWork.return, error);\n        }\n      }\n      break;\n    case 26:\n      recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n      flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);\n      break;\n    case 27:\n    case 5:\n      recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n      null === current && flags & 4 && commitHostMount(finishedWork);\n      flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);\n      break;\n    case 12:\n      recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n      break;\n    case 13:\n      recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n      flags & 4 && commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);\n      break;\n    case 22:\n      prevProps =\n        null !== finishedWork.memoizedState || offscreenSubtreeIsHidden;\n      if (!prevProps) {\n        current =\n          (null !== current && null !== current.memoizedState) ||\n          offscreenSubtreeWasHidden;\n        var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden,\n          prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\n        offscreenSubtreeIsHidden = prevProps;\n        (offscreenSubtreeWasHidden = current) && !prevOffscreenSubtreeWasHidden\n          ? recursivelyTraverseReappearLayoutEffects(\n              finishedRoot,\n              finishedWork,\n              0 !== (finishedWork.subtreeFlags & 8772)\n            )\n          : recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n        offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;\n        offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n      }\n      flags & 512 &&\n        (\"manual\" === finishedWork.memoizedProps.mode\n          ? safelyAttachRef(finishedWork, finishedWork.return)\n          : safelyDetachRef(finishedWork, finishedWork.return));\n      break;\n    default:\n      recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n  }\n}\nfunction detachFiberAfterEffects(fiber) {\n  var alternate = fiber.alternate;\n  null !== alternate &&\n    ((fiber.alternate = null), detachFiberAfterEffects(alternate));\n  fiber.child = null;\n  fiber.deletions = null;\n  fiber.sibling = null;\n  5 === fiber.tag &&\n    ((alternate = fiber.stateNode),\n    null !== alternate && detachDeletedInstance(alternate));\n  fiber.stateNode = null;\n  fiber.return = null;\n  fiber.dependencies = null;\n  fiber.memoizedProps = null;\n  fiber.memoizedState = null;\n  fiber.pendingProps = null;\n  fiber.stateNode = null;\n  fiber.updateQueue = null;\n}\nvar hostParent = null,\n  hostParentIsContainer = !1;\nfunction recursivelyTraverseDeletionEffects(\n  finishedRoot,\n  nearestMountedAncestor,\n  parent\n) {\n  for (parent = parent.child; null !== parent; )\n    commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, parent),\n      (parent = parent.sibling);\n}\nfunction commitDeletionEffectsOnFiber(\n  finishedRoot,\n  nearestMountedAncestor,\n  deletedFiber\n) {\n  if (injectedHook && \"function\" === typeof injectedHook.onCommitFiberUnmount)\n    try {\n      injectedHook.onCommitFiberUnmount(rendererID, deletedFiber);\n    } catch (err) {}\n  switch (deletedFiber.tag) {\n    case 26:\n      offscreenSubtreeWasHidden ||\n        safelyDetachRef(deletedFiber, nearestMountedAncestor);\n      recursivelyTraverseDeletionEffects(\n        finishedRoot,\n        nearestMountedAncestor,\n        deletedFiber\n      );\n      deletedFiber.memoizedState\n        ? deletedFiber.memoizedState.count--\n        : deletedFiber.stateNode &&\n          ((deletedFiber = deletedFiber.stateNode),\n          deletedFiber.parentNode.removeChild(deletedFiber));\n      break;\n    case 27:\n      offscreenSubtreeWasHidden ||\n        safelyDetachRef(deletedFiber, nearestMountedAncestor);\n      var prevHostParent = hostParent,\n        prevHostParentIsContainer = hostParentIsContainer;\n      hostParent = deletedFiber.stateNode;\n      recursivelyTraverseDeletionEffects(\n        finishedRoot,\n        nearestMountedAncestor,\n        deletedFiber\n      );\n      deletedFiber = deletedFiber.stateNode;\n      for (\n        nearestMountedAncestor = deletedFiber.attributes;\n        nearestMountedAncestor.length;\n\n      )\n        deletedFiber.removeAttributeNode(nearestMountedAncestor[0]);\n      detachDeletedInstance(deletedFiber);\n      hostParent = prevHostParent;\n      hostParentIsContainer = prevHostParentIsContainer;\n      break;\n    case 5:\n      offscreenSubtreeWasHidden ||\n        safelyDetachRef(deletedFiber, nearestMountedAncestor);\n    case 6:\n      prevHostParentIsContainer = hostParent;\n      var prevHostParentIsContainer$119 = hostParentIsContainer;\n      hostParent = null;\n      recursivelyTraverseDeletionEffects(\n        finishedRoot,\n        nearestMountedAncestor,\n        deletedFiber\n      );\n      hostParent = prevHostParentIsContainer;\n      hostParentIsContainer = prevHostParentIsContainer$119;\n      if (null !== hostParent)\n        if (hostParentIsContainer)\n          try {\n            (finishedRoot = hostParent),\n              (prevHostParent = deletedFiber.stateNode),\n              8 === finishedRoot.nodeType\n                ? finishedRoot.parentNode.removeChild(prevHostParent)\n                : finishedRoot.removeChild(prevHostParent);\n          } catch (error) {\n            captureCommitPhaseError(\n              deletedFiber,\n              nearestMountedAncestor,\n              error\n            );\n          }\n        else\n          try {\n            hostParent.removeChild(deletedFiber.stateNode);\n          } catch (error) {\n            captureCommitPhaseError(\n              deletedFiber,\n              nearestMountedAncestor,\n              error\n            );\n          }\n      break;\n    case 18:\n      null !== hostParent &&\n        (hostParentIsContainer\n          ? ((nearestMountedAncestor = hostParent),\n            (deletedFiber = deletedFiber.stateNode),\n            8 === nearestMountedAncestor.nodeType\n              ? clearSuspenseBoundary(\n                  nearestMountedAncestor.parentNode,\n                  deletedFiber\n                )\n              : 1 === nearestMountedAncestor.nodeType &&\n                clearSuspenseBoundary(nearestMountedAncestor, deletedFiber),\n            retryIfBlockedOn(nearestMountedAncestor))\n          : clearSuspenseBoundary(hostParent, deletedFiber.stateNode));\n      break;\n    case 4:\n      prevHostParent = hostParent;\n      prevHostParentIsContainer = hostParentIsContainer;\n      hostParent = deletedFiber.stateNode.containerInfo;\n      hostParentIsContainer = !0;\n      recursivelyTraverseDeletionEffects(\n        finishedRoot,\n        nearestMountedAncestor,\n        deletedFiber\n      );\n      hostParent = prevHostParent;\n      hostParentIsContainer = prevHostParentIsContainer;\n      break;\n    case 0:\n    case 11:\n    case 14:\n    case 15:\n      offscreenSubtreeWasHidden ||\n        commitHookEffectListUnmount(2, deletedFiber, nearestMountedAncestor);\n      offscreenSubtreeWasHidden ||\n        commitHookEffectListUnmount(4, deletedFiber, nearestMountedAncestor);\n      recursivelyTraverseDeletionEffects(\n        finishedRoot,\n        nearestMountedAncestor,\n        deletedFiber\n      );\n      break;\n    case 1:\n      offscreenSubtreeWasHidden ||\n        (safelyDetachRef(deletedFiber, nearestMountedAncestor),\n        (prevHostParent = deletedFiber.stateNode),\n        \"function\" === typeof prevHostParent.componentWillUnmount &&\n          safelyCallComponentWillUnmount(\n            deletedFiber,\n            nearestMountedAncestor,\n            prevHostParent\n          ));\n      recursivelyTraverseDeletionEffects(\n        finishedRoot,\n        nearestMountedAncestor,\n        deletedFiber\n      );\n      break;\n    case 21:\n      recursivelyTraverseDeletionEffects(\n        finishedRoot,\n        nearestMountedAncestor,\n        deletedFiber\n      );\n      break;\n    case 22:\n      offscreenSubtreeWasHidden ||\n        safelyDetachRef(deletedFiber, nearestMountedAncestor);\n      offscreenSubtreeWasHidden =\n        (prevHostParent = offscreenSubtreeWasHidden) ||\n        null !== deletedFiber.memoizedState;\n      recursivelyTraverseDeletionEffects(\n        finishedRoot,\n        nearestMountedAncestor,\n        deletedFiber\n      );\n      offscreenSubtreeWasHidden = prevHostParent;\n      break;\n    default:\n      recursivelyTraverseDeletionEffects(\n        finishedRoot,\n        nearestMountedAncestor,\n        deletedFiber\n      );\n  }\n}\nfunction commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {\n  if (\n    null === finishedWork.memoizedState &&\n    ((finishedRoot = finishedWork.alternate),\n    null !== finishedRoot &&\n      ((finishedRoot = finishedRoot.memoizedState),\n      null !== finishedRoot &&\n        ((finishedRoot = finishedRoot.dehydrated), null !== finishedRoot)))\n  )\n    try {\n      retryIfBlockedOn(finishedRoot);\n    } catch (error) {\n      captureCommitPhaseError(finishedWork, finishedWork.return, error);\n    }\n}\nfunction getRetryCache(finishedWork) {\n  switch (finishedWork.tag) {\n    case 13:\n    case 19:\n      var retryCache = finishedWork.stateNode;\n      null === retryCache &&\n        (retryCache = finishedWork.stateNode = new PossiblyWeakSet());\n      return retryCache;\n    case 22:\n      return (\n        (finishedWork = finishedWork.stateNode),\n        (retryCache = finishedWork._retryCache),\n        null === retryCache &&\n          (retryCache = finishedWork._retryCache = new PossiblyWeakSet()),\n        retryCache\n      );\n    default:\n      throw Error(formatProdErrorMessage(435, finishedWork.tag));\n  }\n}\nfunction attachSuspenseRetryListeners(finishedWork, wakeables) {\n  var retryCache = getRetryCache(finishedWork);\n  wakeables.forEach(function (wakeable) {\n    var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);\n    retryCache.has(wakeable) ||\n      (retryCache.add(wakeable), wakeable.then(retry, retry));\n  });\n}\nfunction recursivelyTraverseMutationEffects(root$jscomp$0, parentFiber) {\n  var deletions = parentFiber.deletions;\n  if (null !== deletions)\n    for (var i = 0; i < deletions.length; i++) {\n      var childToDelete = deletions[i],\n        root = root$jscomp$0,\n        returnFiber = parentFiber,\n        parent = returnFiber;\n      a: for (; null !== parent; ) {\n        switch (parent.tag) {\n          case 27:\n          case 5:\n            hostParent = parent.stateNode;\n            hostParentIsContainer = !1;\n            break a;\n          case 3:\n            hostParent = parent.stateNode.containerInfo;\n            hostParentIsContainer = !0;\n            break a;\n          case 4:\n            hostParent = parent.stateNode.containerInfo;\n            hostParentIsContainer = !0;\n            break a;\n        }\n        parent = parent.return;\n      }\n      if (null === hostParent) throw Error(formatProdErrorMessage(160));\n      commitDeletionEffectsOnFiber(root, returnFiber, childToDelete);\n      hostParent = null;\n      hostParentIsContainer = !1;\n      root = childToDelete.alternate;\n      null !== root && (root.return = null);\n      childToDelete.return = null;\n    }\n  if (parentFiber.subtreeFlags & 13878)\n    for (parentFiber = parentFiber.child; null !== parentFiber; )\n      commitMutationEffectsOnFiber(parentFiber, root$jscomp$0),\n        (parentFiber = parentFiber.sibling);\n}\nvar currentHoistableRoot = null;\nfunction commitMutationEffectsOnFiber(finishedWork, root) {\n  var current = finishedWork.alternate,\n    flags = finishedWork.flags;\n  switch (finishedWork.tag) {\n    case 0:\n    case 11:\n    case 14:\n    case 15:\n      recursivelyTraverseMutationEffects(root, finishedWork);\n      commitReconciliationEffects(finishedWork);\n      flags & 4 &&\n        (commitHookEffectListUnmount(3, finishedWork, finishedWork.return),\n        commitHookEffectListMount(3, finishedWork),\n        commitHookEffectListUnmount(5, finishedWork, finishedWork.return));\n      break;\n    case 1:\n      recursivelyTraverseMutationEffects(root, finishedWork);\n      commitReconciliationEffects(finishedWork);\n      flags & 512 &&\n        (offscreenSubtreeWasHidden ||\n          null === current ||\n          safelyDetachRef(current, current.return));\n      flags & 64 &&\n        offscreenSubtreeIsHidden &&\n        ((finishedWork = finishedWork.updateQueue),\n        null !== finishedWork &&\n          ((flags = finishedWork.callbacks),\n          null !== flags &&\n            ((current = finishedWork.shared.hiddenCallbacks),\n            (finishedWork.shared.hiddenCallbacks =\n              null === current ? flags : current.concat(flags)))));\n      break;\n    case 26:\n      var hoistableRoot = currentHoistableRoot;\n      recursivelyTraverseMutationEffects(root, finishedWork);\n      commitReconciliationEffects(finishedWork);\n      flags & 512 &&\n        (offscreenSubtreeWasHidden ||\n          null === current ||\n          safelyDetachRef(current, current.return));\n      if (flags & 4) {\n        var currentResource = null !== current ? current.memoizedState : null;\n        flags = finishedWork.memoizedState;\n        if (null === current)\n          if (null === flags)\n            if (null === finishedWork.stateNode) {\n              a: {\n                flags = finishedWork.type;\n                current = finishedWork.memoizedProps;\n                hoistableRoot = hoistableRoot.ownerDocument || hoistableRoot;\n                b: switch (flags) {\n                  case \"title\":\n                    currentResource =\n                      hoistableRoot.getElementsByTagName(\"title\")[0];\n                    if (\n                      !currentResource ||\n                      currentResource[internalHoistableMarker] ||\n                      currentResource[internalInstanceKey] ||\n                      \"http://www.w3.org/2000/svg\" ===\n                        currentResource.namespaceURI ||\n                      currentResource.hasAttribute(\"itemprop\")\n                    )\n                      (currentResource = hoistableRoot.createElement(flags)),\n                        hoistableRoot.head.insertBefore(\n                          currentResource,\n                          hoistableRoot.querySelector(\"head > title\")\n                        );\n                    setInitialProperties(currentResource, flags, current);\n                    currentResource[internalInstanceKey] = finishedWork;\n                    markNodeAsHoistable(currentResource);\n                    flags = currentResource;\n                    break a;\n                  case \"link\":\n                    var maybeNodes = getHydratableHoistableCache(\n                      \"link\",\n                      \"href\",\n                      hoistableRoot\n                    ).get(flags + (current.href || \"\"));\n                    if (maybeNodes)\n                      for (var i = 0; i < maybeNodes.length; i++)\n                        if (\n                          ((currentResource = maybeNodes[i]),\n                          currentResource.getAttribute(\"href\") ===\n                            (null == current.href ? null : current.href) &&\n                            currentResource.getAttribute(\"rel\") ===\n                              (null == current.rel ? null : current.rel) &&\n                            currentResource.getAttribute(\"title\") ===\n                              (null == current.title ? null : current.title) &&\n                            currentResource.getAttribute(\"crossorigin\") ===\n                              (null == current.crossOrigin\n                                ? null\n                                : current.crossOrigin))\n                        ) {\n                          maybeNodes.splice(i, 1);\n                          break b;\n                        }\n                    currentResource = hoistableRoot.createElement(flags);\n                    setInitialProperties(currentResource, flags, current);\n                    hoistableRoot.head.appendChild(currentResource);\n                    break;\n                  case \"meta\":\n                    if (\n                      (maybeNodes = getHydratableHoistableCache(\n                        \"meta\",\n                        \"content\",\n                        hoistableRoot\n                      ).get(flags + (current.content || \"\")))\n                    )\n                      for (i = 0; i < maybeNodes.length; i++)\n                        if (\n                          ((currentResource = maybeNodes[i]),\n                          currentResource.getAttribute(\"content\") ===\n                            (null == current.content\n                              ? null\n                              : \"\" + current.content) &&\n                            currentResource.getAttribute(\"name\") ===\n                              (null == current.name ? null : current.name) &&\n                            currentResource.getAttribute(\"property\") ===\n                              (null == current.property\n                                ? null\n                                : current.property) &&\n                            currentResource.getAttribute(\"http-equiv\") ===\n                              (null == current.httpEquiv\n                                ? null\n                                : current.httpEquiv) &&\n                            currentResource.getAttribute(\"charset\") ===\n                              (null == current.charSet\n                                ? null\n                                : current.charSet))\n                        ) {\n                          maybeNodes.splice(i, 1);\n                          break b;\n                        }\n                    currentResource = hoistableRoot.createElement(flags);\n                    setInitialProperties(currentResource, flags, current);\n                    hoistableRoot.head.appendChild(currentResource);\n                    break;\n                  default:\n                    throw Error(formatProdErrorMessage(468, flags));\n                }\n                currentResource[internalInstanceKey] = finishedWork;\n                markNodeAsHoistable(currentResource);\n                flags = currentResource;\n              }\n              finishedWork.stateNode = flags;\n            } else\n              mountHoistable(\n                hoistableRoot,\n                finishedWork.type,\n                finishedWork.stateNode\n              );\n          else\n            finishedWork.stateNode = acquireResource(\n              hoistableRoot,\n              flags,\n              finishedWork.memoizedProps\n            );\n        else\n          currentResource !== flags\n            ? (null === currentResource\n                ? null !== current.stateNode &&\n                  ((current = current.stateNode),\n                  current.parentNode.removeChild(current))\n                : currentResource.count--,\n              null === flags\n                ? mountHoistable(\n                    hoistableRoot,\n                    finishedWork.type,\n                    finishedWork.stateNode\n                  )\n                : acquireResource(\n                    hoistableRoot,\n                    flags,\n                    finishedWork.memoizedProps\n                  ))\n            : null === flags &&\n              null !== finishedWork.stateNode &&\n              commitHostUpdate(\n                finishedWork,\n                finishedWork.memoizedProps,\n                current.memoizedProps\n              );\n      }\n      break;\n    case 27:\n      if (flags & 4 && null === finishedWork.alternate) {\n        hoistableRoot = finishedWork.stateNode;\n        currentResource = finishedWork.memoizedProps;\n        try {\n          for (var node = hoistableRoot.firstChild; node; ) {\n            var nextNode = node.nextSibling,\n              nodeName = node.nodeName;\n            node[internalHoistableMarker] ||\n              \"HEAD\" === nodeName ||\n              \"BODY\" === nodeName ||\n              \"SCRIPT\" === nodeName ||\n              \"STYLE\" === nodeName ||\n              (\"LINK\" === nodeName &&\n                \"stylesheet\" === node.rel.toLowerCase()) ||\n              hoistableRoot.removeChild(node);\n            node = nextNode;\n          }\n          for (\n            var type = finishedWork.type, attributes = hoistableRoot.attributes;\n            attributes.length;\n\n          )\n            hoistableRoot.removeAttributeNode(attributes[0]);\n          setInitialProperties(hoistableRoot, type, currentResource);\n          hoistableRoot[internalInstanceKey] = finishedWork;\n          hoistableRoot[internalPropsKey] = currentResource;\n        } catch (error) {\n          captureCommitPhaseError(finishedWork, finishedWork.return, error);\n        }\n      }\n    case 5:\n      recursivelyTraverseMutationEffects(root, finishedWork);\n      commitReconciliationEffects(finishedWork);\n      flags & 512 &&\n        (offscreenSubtreeWasHidden ||\n          null === current ||\n          safelyDetachRef(current, current.return));\n      if (finishedWork.flags & 32) {\n        hoistableRoot = finishedWork.stateNode;\n        try {\n          setTextContent(hoistableRoot, \"\");\n        } catch (error) {\n          captureCommitPhaseError(finishedWork, finishedWork.return, error);\n        }\n      }\n      flags & 4 &&\n        null != finishedWork.stateNode &&\n        ((hoistableRoot = finishedWork.memoizedProps),\n        commitHostUpdate(\n          finishedWork,\n          hoistableRoot,\n          null !== current ? current.memoizedProps : hoistableRoot\n        ));\n      flags & 1024 && (needsFormReset = !0);\n      break;\n    case 6:\n      recursivelyTraverseMutationEffects(root, finishedWork);\n      commitReconciliationEffects(finishedWork);\n      if (flags & 4) {\n        if (null === finishedWork.stateNode)\n          throw Error(formatProdErrorMessage(162));\n        flags = finishedWork.memoizedProps;\n        current = finishedWork.stateNode;\n        try {\n          current.nodeValue = flags;\n        } catch (error) {\n          captureCommitPhaseError(finishedWork, finishedWork.return, error);\n        }\n      }\n      break;\n    case 3:\n      tagCaches = null;\n      hoistableRoot = currentHoistableRoot;\n      currentHoistableRoot = getHoistableRoot(root.containerInfo);\n      recursivelyTraverseMutationEffects(root, finishedWork);\n      currentHoistableRoot = hoistableRoot;\n      commitReconciliationEffects(finishedWork);\n      if (flags & 4 && null !== current && current.memoizedState.isDehydrated)\n        try {\n          retryIfBlockedOn(root.containerInfo);\n        } catch (error) {\n          captureCommitPhaseError(finishedWork, finishedWork.return, error);\n        }\n      needsFormReset &&\n        ((needsFormReset = !1), recursivelyResetForms(finishedWork));\n      break;\n    case 4:\n      flags = currentHoistableRoot;\n      currentHoistableRoot = getHoistableRoot(\n        finishedWork.stateNode.containerInfo\n      );\n      recursivelyTraverseMutationEffects(root, finishedWork);\n      commitReconciliationEffects(finishedWork);\n      currentHoistableRoot = flags;\n      break;\n    case 12:\n      recursivelyTraverseMutationEffects(root, finishedWork);\n      commitReconciliationEffects(finishedWork);\n      break;\n    case 13:\n      recursivelyTraverseMutationEffects(root, finishedWork);\n      commitReconciliationEffects(finishedWork);\n      finishedWork.child.flags & 8192 &&\n        (null !== finishedWork.memoizedState) !==\n          (null !== current && null !== current.memoizedState) &&\n        (globalMostRecentFallbackTime = now());\n      flags & 4 &&\n        ((flags = finishedWork.updateQueue),\n        null !== flags &&\n          ((finishedWork.updateQueue = null),\n          attachSuspenseRetryListeners(finishedWork, flags)));\n      break;\n    case 22:\n      flags & 512 &&\n        (offscreenSubtreeWasHidden ||\n          null === current ||\n          safelyDetachRef(current, current.return));\n      node = null !== finishedWork.memoizedState;\n      nextNode = null !== current && null !== current.memoizedState;\n      nodeName = offscreenSubtreeIsHidden;\n      type = offscreenSubtreeWasHidden;\n      offscreenSubtreeIsHidden = nodeName || node;\n      offscreenSubtreeWasHidden = type || nextNode;\n      recursivelyTraverseMutationEffects(root, finishedWork);\n      offscreenSubtreeWasHidden = type;\n      offscreenSubtreeIsHidden = nodeName;\n      commitReconciliationEffects(finishedWork);\n      root = finishedWork.stateNode;\n      root._current = finishedWork;\n      root._visibility &= -3;\n      root._visibility |= root._pendingVisibility & 2;\n      if (\n        flags & 8192 &&\n        ((root._visibility = node\n          ? root._visibility & -2\n          : root._visibility | 1),\n        node &&\n          ((root = offscreenSubtreeIsHidden || offscreenSubtreeWasHidden),\n          null === current ||\n            nextNode ||\n            root ||\n            recursivelyTraverseDisappearLayoutEffects(finishedWork)),\n        null === finishedWork.memoizedProps ||\n          \"manual\" !== finishedWork.memoizedProps.mode)\n      )\n        a: for (current = null, root = finishedWork; ; ) {\n          if (5 === root.tag || 26 === root.tag || 27 === root.tag) {\n            if (null === current) {\n              nextNode = current = root;\n              try {\n                if (((hoistableRoot = nextNode.stateNode), node))\n                  (currentResource = hoistableRoot.style),\n                    \"function\" === typeof currentResource.setProperty\n                      ? currentResource.setProperty(\n                          \"display\",\n                          \"none\",\n                          \"important\"\n                        )\n                      : (currentResource.display = \"none\");\n                else {\n                  maybeNodes = nextNode.stateNode;\n                  i = nextNode.memoizedProps.style;\n                  var display =\n                    void 0 !== i && null !== i && i.hasOwnProperty(\"display\")\n                      ? i.display\n                      : null;\n                  maybeNodes.style.display =\n                    null == display || \"boolean\" === typeof display\n                      ? \"\"\n                      : (\"\" + display).trim();\n                }\n              } catch (error) {\n                captureCommitPhaseError(nextNode, nextNode.return, error);\n              }\n            }\n          } else if (6 === root.tag) {\n            if (null === current) {\n              nextNode = root;\n              try {\n                nextNode.stateNode.nodeValue = node\n                  ? \"\"\n                  : nextNode.memoizedProps;\n              } catch (error) {\n                captureCommitPhaseError(nextNode, nextNode.return, error);\n              }\n            }\n          } else if (\n            ((22 !== root.tag && 23 !== root.tag) ||\n              null === root.memoizedState ||\n              root === finishedWork) &&\n            null !== root.child\n          ) {\n            root.child.return = root;\n            root = root.child;\n            continue;\n          }\n          if (root === finishedWork) break a;\n          for (; null === root.sibling; ) {\n            if (null === root.return || root.return === finishedWork) break a;\n            current === root && (current = null);\n            root = root.return;\n          }\n          current === root && (current = null);\n          root.sibling.return = root.return;\n          root = root.sibling;\n        }\n      flags & 4 &&\n        ((flags = finishedWork.updateQueue),\n        null !== flags &&\n          ((current = flags.retryQueue),\n          null !== current &&\n            ((flags.retryQueue = null),\n            attachSuspenseRetryListeners(finishedWork, current))));\n      break;\n    case 19:\n      recursivelyTraverseMutationEffects(root, finishedWork);\n      commitReconciliationEffects(finishedWork);\n      flags & 4 &&\n        ((flags = finishedWork.updateQueue),\n        null !== flags &&\n          ((finishedWork.updateQueue = null),\n          attachSuspenseRetryListeners(finishedWork, flags)));\n      break;\n    case 21:\n      break;\n    default:\n      recursivelyTraverseMutationEffects(root, finishedWork),\n        commitReconciliationEffects(finishedWork);\n  }\n}\nfunction commitReconciliationEffects(finishedWork) {\n  var flags = finishedWork.flags;\n  if (flags & 2) {\n    try {\n      if (27 !== finishedWork.tag) {\n        a: {\n          for (var parent = finishedWork.return; null !== parent; ) {\n            if (isHostParent(parent)) {\n              var JSCompiler_inline_result = parent;\n              break a;\n            }\n            parent = parent.return;\n          }\n          throw Error(formatProdErrorMessage(160));\n        }\n        switch (JSCompiler_inline_result.tag) {\n          case 27:\n            var parent$jscomp$0 = JSCompiler_inline_result.stateNode,\n              before = getHostSibling(finishedWork);\n            insertOrAppendPlacementNode(finishedWork, before, parent$jscomp$0);\n            break;\n          case 5:\n            var parent$113 = JSCompiler_inline_result.stateNode;\n            JSCompiler_inline_result.flags & 32 &&\n              (setTextContent(parent$113, \"\"),\n              (JSCompiler_inline_result.flags &= -33));\n            var before$114 = getHostSibling(finishedWork);\n            insertOrAppendPlacementNode(finishedWork, before$114, parent$113);\n            break;\n          case 3:\n          case 4:\n            var parent$115 = JSCompiler_inline_result.stateNode.containerInfo,\n              before$116 = getHostSibling(finishedWork);\n            insertOrAppendPlacementNodeIntoContainer(\n              finishedWork,\n              before$116,\n              parent$115\n            );\n            break;\n          default:\n            throw Error(formatProdErrorMessage(161));\n        }\n      }\n    } catch (error) {\n      captureCommitPhaseError(finishedWork, finishedWork.return, error);\n    }\n    finishedWork.flags &= -3;\n  }\n  flags & 4096 && (finishedWork.flags &= -4097);\n}\nfunction recursivelyResetForms(parentFiber) {\n  if (parentFiber.subtreeFlags & 1024)\n    for (parentFiber = parentFiber.child; null !== parentFiber; ) {\n      var fiber = parentFiber;\n      recursivelyResetForms(fiber);\n      5 === fiber.tag && fiber.flags & 1024 && fiber.stateNode.reset();\n      parentFiber = parentFiber.sibling;\n    }\n}\nfunction recursivelyTraverseLayoutEffects(root, parentFiber) {\n  if (parentFiber.subtreeFlags & 8772)\n    for (parentFiber = parentFiber.child; null !== parentFiber; )\n      commitLayoutEffectOnFiber(root, parentFiber.alternate, parentFiber),\n        (parentFiber = parentFiber.sibling);\n}\nfunction recursivelyTraverseDisappearLayoutEffects(parentFiber) {\n  for (parentFiber = parentFiber.child; null !== parentFiber; ) {\n    var finishedWork = parentFiber;\n    switch (finishedWork.tag) {\n      case 0:\n      case 11:\n      case 14:\n      case 15:\n        commitHookEffectListUnmount(4, finishedWork, finishedWork.return);\n        recursivelyTraverseDisappearLayoutEffects(finishedWork);\n        break;\n      case 1:\n        safelyDetachRef(finishedWork, finishedWork.return);\n        var instance = finishedWork.stateNode;\n        \"function\" === typeof instance.componentWillUnmount &&\n          safelyCallComponentWillUnmount(\n            finishedWork,\n            finishedWork.return,\n            instance\n          );\n        recursivelyTraverseDisappearLayoutEffects(finishedWork);\n        break;\n      case 26:\n      case 27:\n      case 5:\n        safelyDetachRef(finishedWork, finishedWork.return);\n        recursivelyTraverseDisappearLayoutEffects(finishedWork);\n        break;\n      case 22:\n        safelyDetachRef(finishedWork, finishedWork.return);\n        null === finishedWork.memoizedState &&\n          recursivelyTraverseDisappearLayoutEffects(finishedWork);\n        break;\n      default:\n        recursivelyTraverseDisappearLayoutEffects(finishedWork);\n    }\n    parentFiber = parentFiber.sibling;\n  }\n}\nfunction recursivelyTraverseReappearLayoutEffects(\n  finishedRoot$jscomp$0,\n  parentFiber,\n  includeWorkInProgressEffects\n) {\n  includeWorkInProgressEffects =\n    includeWorkInProgressEffects && 0 !== (parentFiber.subtreeFlags & 8772);\n  for (parentFiber = parentFiber.child; null !== parentFiber; ) {\n    var current = parentFiber.alternate,\n      finishedRoot = finishedRoot$jscomp$0,\n      finishedWork = parentFiber,\n      flags = finishedWork.flags;\n    switch (finishedWork.tag) {\n      case 0:\n      case 11:\n      case 15:\n        recursivelyTraverseReappearLayoutEffects(\n          finishedRoot,\n          finishedWork,\n          includeWorkInProgressEffects\n        );\n        commitHookEffectListMount(4, finishedWork);\n        break;\n      case 1:\n        recursivelyTraverseReappearLayoutEffects(\n          finishedRoot,\n          finishedWork,\n          includeWorkInProgressEffects\n        );\n        current = finishedWork;\n        finishedRoot = current.stateNode;\n        if (\"function\" === typeof finishedRoot.componentDidMount)\n          try {\n            finishedRoot.componentDidMount();\n          } catch (error) {\n            captureCommitPhaseError(current, current.return, error);\n          }\n        current = finishedWork;\n        finishedRoot = current.updateQueue;\n        if (null !== finishedRoot) {\n          var instance = current.stateNode;\n          try {\n            var hiddenCallbacks = finishedRoot.shared.hiddenCallbacks;\n            if (null !== hiddenCallbacks)\n              for (\n                finishedRoot.shared.hiddenCallbacks = null, finishedRoot = 0;\n                finishedRoot < hiddenCallbacks.length;\n                finishedRoot++\n              )\n                callCallback(hiddenCallbacks[finishedRoot], instance);\n          } catch (error) {\n            captureCommitPhaseError(current, current.return, error);\n          }\n        }\n        includeWorkInProgressEffects &&\n          flags & 64 &&\n          commitClassCallbacks(finishedWork);\n        safelyAttachRef(finishedWork, finishedWork.return);\n        break;\n      case 26:\n      case 27:\n      case 5:\n        recursivelyTraverseReappearLayoutEffects(\n          finishedRoot,\n          finishedWork,\n          includeWorkInProgressEffects\n        );\n        includeWorkInProgressEffects &&\n          null === current &&\n          flags & 4 &&\n          commitHostMount(finishedWork);\n        safelyAttachRef(finishedWork, finishedWork.return);\n        break;\n      case 12:\n        recursivelyTraverseReappearLayoutEffects(\n          finishedRoot,\n          finishedWork,\n          includeWorkInProgressEffects\n        );\n        break;\n      case 13:\n        recursivelyTraverseReappearLayoutEffects(\n          finishedRoot,\n          finishedWork,\n          includeWorkInProgressEffects\n        );\n        includeWorkInProgressEffects &&\n          flags & 4 &&\n          commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);\n        break;\n      case 22:\n        null === finishedWork.memoizedState &&\n          recursivelyTraverseReappearLayoutEffects(\n            finishedRoot,\n            finishedWork,\n            includeWorkInProgressEffects\n          );\n        safelyAttachRef(finishedWork, finishedWork.return);\n        break;\n      default:\n        recursivelyTraverseReappearLayoutEffects(\n          finishedRoot,\n          finishedWork,\n          includeWorkInProgressEffects\n        );\n    }\n    parentFiber = parentFiber.sibling;\n  }\n}\nfunction commitOffscreenPassiveMountEffects(current, finishedWork) {\n  var previousCache = null;\n  null !== current &&\n    null !== current.memoizedState &&\n    null !== current.memoizedState.cachePool &&\n    (previousCache = current.memoizedState.cachePool.pool);\n  current = null;\n  null !== finishedWork.memoizedState &&\n    null !== finishedWork.memoizedState.cachePool &&\n    (current = finishedWork.memoizedState.cachePool.pool);\n  current !== previousCache &&\n    (null != current && current.refCount++,\n    null != previousCache && releaseCache(previousCache));\n}\nfunction commitCachePassiveMountEffect(current, finishedWork) {\n  current = null;\n  null !== finishedWork.alternate &&\n    (current = finishedWork.alternate.memoizedState.cache);\n  finishedWork = finishedWork.memoizedState.cache;\n  finishedWork !== current &&\n    (finishedWork.refCount++, null != current && releaseCache(current));\n}\nfunction recursivelyTraversePassiveMountEffects(\n  root,\n  parentFiber,\n  committedLanes,\n  committedTransitions\n) {\n  if (parentFiber.subtreeFlags & 10256)\n    for (parentFiber = parentFiber.child; null !== parentFiber; )\n      commitPassiveMountOnFiber(\n        root,\n        parentFiber,\n        committedLanes,\n        committedTransitions\n      ),\n        (parentFiber = parentFiber.sibling);\n}\nfunction commitPassiveMountOnFiber(\n  finishedRoot,\n  finishedWork,\n  committedLanes,\n  committedTransitions\n) {\n  var flags = finishedWork.flags;\n  switch (finishedWork.tag) {\n    case 0:\n    case 11:\n    case 15:\n      recursivelyTraversePassiveMountEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n        committedTransitions\n      );\n      flags & 2048 && commitHookEffectListMount(9, finishedWork);\n      break;\n    case 3:\n      recursivelyTraversePassiveMountEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n        committedTransitions\n      );\n      flags & 2048 &&\n        ((finishedRoot = null),\n        null !== finishedWork.alternate &&\n          (finishedRoot = finishedWork.alternate.memoizedState.cache),\n        (finishedWork = finishedWork.memoizedState.cache),\n        finishedWork !== finishedRoot &&\n          (finishedWork.refCount++,\n          null != finishedRoot && releaseCache(finishedRoot)));\n      break;\n    case 12:\n      if (flags & 2048) {\n        recursivelyTraversePassiveMountEffects(\n          finishedRoot,\n          finishedWork,\n          committedLanes,\n          committedTransitions\n        );\n        finishedRoot = finishedWork.stateNode;\n        try {\n          var _finishedWork$memoize2 = finishedWork.memoizedProps,\n            id = _finishedWork$memoize2.id,\n            onPostCommit = _finishedWork$memoize2.onPostCommit;\n          \"function\" === typeof onPostCommit &&\n            onPostCommit(\n              id,\n              null === finishedWork.alternate ? \"mount\" : \"update\",\n              finishedRoot.passiveEffectDuration,\n              -0\n            );\n        } catch (error) {\n          captureCommitPhaseError(finishedWork, finishedWork.return, error);\n        }\n      } else\n        recursivelyTraversePassiveMountEffects(\n          finishedRoot,\n          finishedWork,\n          committedLanes,\n          committedTransitions\n        );\n      break;\n    case 23:\n      break;\n    case 22:\n      _finishedWork$memoize2 = finishedWork.stateNode;\n      null !== finishedWork.memoizedState\n        ? _finishedWork$memoize2._visibility & 4\n          ? recursivelyTraversePassiveMountEffects(\n              finishedRoot,\n              finishedWork,\n              committedLanes,\n              committedTransitions\n            )\n          : recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork)\n        : _finishedWork$memoize2._visibility & 4\n          ? recursivelyTraversePassiveMountEffects(\n              finishedRoot,\n              finishedWork,\n              committedLanes,\n              committedTransitions\n            )\n          : ((_finishedWork$memoize2._visibility |= 4),\n            recursivelyTraverseReconnectPassiveEffects(\n              finishedRoot,\n              finishedWork,\n              committedLanes,\n              committedTransitions,\n              0 !== (finishedWork.subtreeFlags & 10256)\n            ));\n      flags & 2048 &&\n        commitOffscreenPassiveMountEffects(\n          finishedWork.alternate,\n          finishedWork\n        );\n      break;\n    case 24:\n      recursivelyTraversePassiveMountEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n        committedTransitions\n      );\n      flags & 2048 &&\n        commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);\n      break;\n    default:\n      recursivelyTraversePassiveMountEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n        committedTransitions\n      );\n  }\n}\nfunction recursivelyTraverseReconnectPassiveEffects(\n  finishedRoot$jscomp$0,\n  parentFiber,\n  committedLanes$jscomp$0,\n  committedTransitions$jscomp$0,\n  includeWorkInProgressEffects\n) {\n  includeWorkInProgressEffects =\n    includeWorkInProgressEffects && 0 !== (parentFiber.subtreeFlags & 10256);\n  for (parentFiber = parentFiber.child; null !== parentFiber; ) {\n    var finishedRoot = finishedRoot$jscomp$0,\n      finishedWork = parentFiber,\n      committedLanes = committedLanes$jscomp$0,\n      committedTransitions = committedTransitions$jscomp$0,\n      flags = finishedWork.flags;\n    switch (finishedWork.tag) {\n      case 0:\n      case 11:\n      case 15:\n        recursivelyTraverseReconnectPassiveEffects(\n          finishedRoot,\n          finishedWork,\n          committedLanes,\n          committedTransitions,\n          includeWorkInProgressEffects\n        );\n        commitHookEffectListMount(8, finishedWork);\n        break;\n      case 23:\n        break;\n      case 22:\n        var instance = finishedWork.stateNode;\n        null !== finishedWork.memoizedState\n          ? instance._visibility & 4\n            ? recursivelyTraverseReconnectPassiveEffects(\n                finishedRoot,\n                finishedWork,\n                committedLanes,\n                committedTransitions,\n                includeWorkInProgressEffects\n              )\n            : recursivelyTraverseAtomicPassiveEffects(\n                finishedRoot,\n                finishedWork\n              )\n          : ((instance._visibility |= 4),\n            recursivelyTraverseReconnectPassiveEffects(\n              finishedRoot,\n              finishedWork,\n              committedLanes,\n              committedTransitions,\n              includeWorkInProgressEffects\n            ));\n        includeWorkInProgressEffects &&\n          flags & 2048 &&\n          commitOffscreenPassiveMountEffects(\n            finishedWork.alternate,\n            finishedWork\n          );\n        break;\n      case 24:\n        recursivelyTraverseReconnectPassiveEffects(\n          finishedRoot,\n          finishedWork,\n          committedLanes,\n          committedTransitions,\n          includeWorkInProgressEffects\n        );\n        includeWorkInProgressEffects &&\n          flags & 2048 &&\n          commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);\n        break;\n      default:\n        recursivelyTraverseReconnectPassiveEffects(\n          finishedRoot,\n          finishedWork,\n          committedLanes,\n          committedTransitions,\n          includeWorkInProgressEffects\n        );\n    }\n    parentFiber = parentFiber.sibling;\n  }\n}\nfunction recursivelyTraverseAtomicPassiveEffects(\n  finishedRoot$jscomp$0,\n  parentFiber\n) {\n  if (parentFiber.subtreeFlags & 10256)\n    for (parentFiber = parentFiber.child; null !== parentFiber; ) {\n      var finishedRoot = finishedRoot$jscomp$0,\n        finishedWork = parentFiber,\n        flags = finishedWork.flags;\n      switch (finishedWork.tag) {\n        case 22:\n          recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);\n          flags & 2048 &&\n            commitOffscreenPassiveMountEffects(\n              finishedWork.alternate,\n              finishedWork\n            );\n          break;\n        case 24:\n          recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);\n          flags & 2048 &&\n            commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);\n          break;\n        default:\n          recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);\n      }\n      parentFiber = parentFiber.sibling;\n    }\n}\nvar suspenseyCommitFlag = 8192;\nfunction recursivelyAccumulateSuspenseyCommit(parentFiber) {\n  if (parentFiber.subtreeFlags & suspenseyCommitFlag)\n    for (parentFiber = parentFiber.child; null !== parentFiber; )\n      accumulateSuspenseyCommitOnFiber(parentFiber),\n        (parentFiber = parentFiber.sibling);\n}\nfunction accumulateSuspenseyCommitOnFiber(fiber) {\n  switch (fiber.tag) {\n    case 26:\n      recursivelyAccumulateSuspenseyCommit(fiber);\n      fiber.flags & suspenseyCommitFlag &&\n        null !== fiber.memoizedState &&\n        suspendResource(\n          currentHoistableRoot,\n          fiber.memoizedState,\n          fiber.memoizedProps\n        );\n      break;\n    case 5:\n      recursivelyAccumulateSuspenseyCommit(fiber);\n      break;\n    case 3:\n    case 4:\n      var previousHoistableRoot = currentHoistableRoot;\n      currentHoistableRoot = getHoistableRoot(fiber.stateNode.containerInfo);\n      recursivelyAccumulateSuspenseyCommit(fiber);\n      currentHoistableRoot = previousHoistableRoot;\n      break;\n    case 22:\n      null === fiber.memoizedState &&\n        ((previousHoistableRoot = fiber.alternate),\n        null !== previousHoistableRoot &&\n        null !== previousHoistableRoot.memoizedState\n          ? ((previousHoistableRoot = suspenseyCommitFlag),\n            (suspenseyCommitFlag = 16777216),\n            recursivelyAccumulateSuspenseyCommit(fiber),\n            (suspenseyCommitFlag = previousHoistableRoot))\n          : recursivelyAccumulateSuspenseyCommit(fiber));\n      break;\n    default:\n      recursivelyAccumulateSuspenseyCommit(fiber);\n  }\n}\nfunction detachAlternateSiblings(parentFiber) {\n  var previousFiber = parentFiber.alternate;\n  if (\n    null !== previousFiber &&\n    ((parentFiber = previousFiber.child), null !== parentFiber)\n  ) {\n    previousFiber.child = null;\n    do\n      (previousFiber = parentFiber.sibling),\n        (parentFiber.sibling = null),\n        (parentFiber = previousFiber);\n    while (null !== parentFiber);\n  }\n}\nfunction recursivelyTraversePassiveUnmountEffects(parentFiber) {\n  var deletions = parentFiber.deletions;\n  if (0 !== (parentFiber.flags & 16)) {\n    if (null !== deletions)\n      for (var i = 0; i < deletions.length; i++) {\n        var childToDelete = deletions[i];\n        nextEffect = childToDelete;\n        commitPassiveUnmountEffectsInsideOfDeletedTree_begin(\n          childToDelete,\n          parentFiber\n        );\n      }\n    detachAlternateSiblings(parentFiber);\n  }\n  if (parentFiber.subtreeFlags & 10256)\n    for (parentFiber = parentFiber.child; null !== parentFiber; )\n      commitPassiveUnmountOnFiber(parentFiber),\n        (parentFiber = parentFiber.sibling);\n}\nfunction commitPassiveUnmountOnFiber(finishedWork) {\n  switch (finishedWork.tag) {\n    case 0:\n    case 11:\n    case 15:\n      recursivelyTraversePassiveUnmountEffects(finishedWork);\n      finishedWork.flags & 2048 &&\n        commitHookEffectListUnmount(9, finishedWork, finishedWork.return);\n      break;\n    case 3:\n      recursivelyTraversePassiveUnmountEffects(finishedWork);\n      break;\n    case 12:\n      recursivelyTraversePassiveUnmountEffects(finishedWork);\n      break;\n    case 22:\n      var instance = finishedWork.stateNode;\n      null !== finishedWork.memoizedState &&\n      instance._visibility & 4 &&\n      (null === finishedWork.return || 13 !== finishedWork.return.tag)\n        ? ((instance._visibility &= -5),\n          recursivelyTraverseDisconnectPassiveEffects(finishedWork))\n        : recursivelyTraversePassiveUnmountEffects(finishedWork);\n      break;\n    default:\n      recursivelyTraversePassiveUnmountEffects(finishedWork);\n  }\n}\nfunction recursivelyTraverseDisconnectPassiveEffects(parentFiber) {\n  var deletions = parentFiber.deletions;\n  if (0 !== (parentFiber.flags & 16)) {\n    if (null !== deletions)\n      for (var i = 0; i < deletions.length; i++) {\n        var childToDelete = deletions[i];\n        nextEffect = childToDelete;\n        commitPassiveUnmountEffectsInsideOfDeletedTree_begin(\n          childToDelete,\n          parentFiber\n        );\n      }\n    detachAlternateSiblings(parentFiber);\n  }\n  for (parentFiber = parentFiber.child; null !== parentFiber; ) {\n    deletions = parentFiber;\n    switch (deletions.tag) {\n      case 0:\n      case 11:\n      case 15:\n        commitHookEffectListUnmount(8, deletions, deletions.return);\n        recursivelyTraverseDisconnectPassiveEffects(deletions);\n        break;\n      case 22:\n        i = deletions.stateNode;\n        i._visibility & 4 &&\n          ((i._visibility &= -5),\n          recursivelyTraverseDisconnectPassiveEffects(deletions));\n        break;\n      default:\n        recursivelyTraverseDisconnectPassiveEffects(deletions);\n    }\n    parentFiber = parentFiber.sibling;\n  }\n}\nfunction commitPassiveUnmountEffectsInsideOfDeletedTree_begin(\n  deletedSubtreeRoot,\n  nearestMountedAncestor\n) {\n  for (; null !== nextEffect; ) {\n    var fiber = nextEffect;\n    switch (fiber.tag) {\n      case 0:\n      case 11:\n      case 15:\n        commitHookEffectListUnmount(8, fiber, nearestMountedAncestor);\n        break;\n      case 23:\n      case 22:\n        if (\n          null !== fiber.memoizedState &&\n          null !== fiber.memoizedState.cachePool\n        ) {\n          var cache = fiber.memoizedState.cachePool.pool;\n          null != cache && cache.refCount++;\n        }\n        break;\n      case 24:\n        releaseCache(fiber.memoizedState.cache);\n    }\n    cache = fiber.child;\n    if (null !== cache) (cache.return = fiber), (nextEffect = cache);\n    else\n      a: for (fiber = deletedSubtreeRoot; null !== nextEffect; ) {\n        cache = nextEffect;\n        var sibling = cache.sibling,\n          returnFiber = cache.return;\n        detachFiberAfterEffects(cache);\n        if (cache === fiber) {\n          nextEffect = null;\n          break a;\n        }\n        if (null !== sibling) {\n          sibling.return = returnFiber;\n          nextEffect = sibling;\n          break a;\n        }\n        nextEffect = returnFiber;\n      }\n  }\n}\nfunction FiberNode(tag, pendingProps, key, mode) {\n  this.tag = tag;\n  this.key = key;\n  this.sibling =\n    this.child =\n    this.return =\n    this.stateNode =\n    this.type =\n    this.elementType =\n      null;\n  this.index = 0;\n  this.refCleanup = this.ref = null;\n  this.pendingProps = pendingProps;\n  this.dependencies =\n    this.memoizedState =\n    this.updateQueue =\n    this.memoizedProps =\n      null;\n  this.mode = mode;\n  this.subtreeFlags = this.flags = 0;\n  this.deletions = null;\n  this.childLanes = this.lanes = 0;\n  this.alternate = null;\n}\nfunction createFiberImplClass(tag, pendingProps, key, mode) {\n  return new FiberNode(tag, pendingProps, key, mode);\n}\nfunction shouldConstruct(Component) {\n  Component = Component.prototype;\n  return !(!Component || !Component.isReactComponent);\n}\nfunction createWorkInProgress(current, pendingProps) {\n  var workInProgress = current.alternate;\n  null === workInProgress\n    ? ((workInProgress = createFiberImplClass(\n        current.tag,\n        pendingProps,\n        current.key,\n        current.mode\n      )),\n      (workInProgress.elementType = current.elementType),\n      (workInProgress.type = current.type),\n      (workInProgress.stateNode = current.stateNode),\n      (workInProgress.alternate = current),\n      (current.alternate = workInProgress))\n    : ((workInProgress.pendingProps = pendingProps),\n      (workInProgress.type = current.type),\n      (workInProgress.flags = 0),\n      (workInProgress.subtreeFlags = 0),\n      (workInProgress.deletions = null));\n  workInProgress.flags = current.flags & 31457280;\n  workInProgress.childLanes = current.childLanes;\n  workInProgress.lanes = current.lanes;\n  workInProgress.child = current.child;\n  workInProgress.memoizedProps = current.memoizedProps;\n  workInProgress.memoizedState = current.memoizedState;\n  workInProgress.updateQueue = current.updateQueue;\n  pendingProps = current.dependencies;\n  workInProgress.dependencies =\n    null === pendingProps\n      ? null\n      : { lanes: pendingProps.lanes, firstContext: pendingProps.firstContext };\n  workInProgress.sibling = current.sibling;\n  workInProgress.index = current.index;\n  workInProgress.ref = current.ref;\n  workInProgress.refCleanup = current.refCleanup;\n  return workInProgress;\n}\nfunction resetWorkInProgress(workInProgress, renderLanes) {\n  workInProgress.flags &= 31457282;\n  var current = workInProgress.alternate;\n  null === current\n    ? ((workInProgress.childLanes = 0),\n      (workInProgress.lanes = renderLanes),\n      (workInProgress.child = null),\n      (workInProgress.subtreeFlags = 0),\n      (workInProgress.memoizedProps = null),\n      (workInProgress.memoizedState = null),\n      (workInProgress.updateQueue = null),\n      (workInProgress.dependencies = null),\n      (workInProgress.stateNode = null))\n    : ((workInProgress.childLanes = current.childLanes),\n      (workInProgress.lanes = current.lanes),\n      (workInProgress.child = current.child),\n      (workInProgress.subtreeFlags = 0),\n      (workInProgress.deletions = null),\n      (workInProgress.memoizedProps = current.memoizedProps),\n      (workInProgress.memoizedState = current.memoizedState),\n      (workInProgress.updateQueue = current.updateQueue),\n      (workInProgress.type = current.type),\n      (renderLanes = current.dependencies),\n      (workInProgress.dependencies =\n        null === renderLanes\n          ? null\n          : {\n              lanes: renderLanes.lanes,\n              firstContext: renderLanes.firstContext\n            }));\n  return workInProgress;\n}\nfunction createFiberFromTypeAndProps(\n  type,\n  key,\n  pendingProps,\n  owner,\n  mode,\n  lanes\n) {\n  var fiberTag = 0;\n  owner = type;\n  if (\"function\" === typeof type) shouldConstruct(type) && (fiberTag = 1);\n  else if (\"string\" === typeof type)\n    fiberTag = isHostHoistableType(\n      type,\n      pendingProps,\n      contextStackCursor.current\n    )\n      ? 26\n      : \"html\" === type || \"head\" === type || \"body\" === type\n        ? 27\n        : 5;\n  else\n    a: switch (type) {\n      case REACT_FRAGMENT_TYPE:\n        return createFiberFromFragment(pendingProps.children, mode, lanes, key);\n      case REACT_STRICT_MODE_TYPE:\n        fiberTag = 8;\n        mode |= 24;\n        break;\n      case REACT_PROFILER_TYPE:\n        return (\n          (type = createFiberImplClass(12, pendingProps, key, mode | 2)),\n          (type.elementType = REACT_PROFILER_TYPE),\n          (type.lanes = lanes),\n          type\n        );\n      case REACT_SUSPENSE_TYPE:\n        return (\n          (type = createFiberImplClass(13, pendingProps, key, mode)),\n          (type.elementType = REACT_SUSPENSE_TYPE),\n          (type.lanes = lanes),\n          type\n        );\n      case REACT_SUSPENSE_LIST_TYPE:\n        return (\n          (type = createFiberImplClass(19, pendingProps, key, mode)),\n          (type.elementType = REACT_SUSPENSE_LIST_TYPE),\n          (type.lanes = lanes),\n          type\n        );\n      case REACT_OFFSCREEN_TYPE:\n        return createFiberFromOffscreen(pendingProps, mode, lanes, key);\n      default:\n        if (\"object\" === typeof type && null !== type)\n          switch (type.$$typeof) {\n            case REACT_PROVIDER_TYPE:\n            case REACT_CONTEXT_TYPE:\n              fiberTag = 10;\n              break a;\n            case REACT_CONSUMER_TYPE:\n              fiberTag = 9;\n              break a;\n            case REACT_FORWARD_REF_TYPE:\n              fiberTag = 11;\n              break a;\n            case REACT_MEMO_TYPE:\n              fiberTag = 14;\n              break a;\n            case REACT_LAZY_TYPE:\n              fiberTag = 16;\n              owner = null;\n              break a;\n          }\n        fiberTag = 29;\n        pendingProps = Error(\n          formatProdErrorMessage(130, null === type ? \"null\" : typeof type, \"\")\n        );\n        owner = null;\n    }\n  key = createFiberImplClass(fiberTag, pendingProps, key, mode);\n  key.elementType = type;\n  key.type = owner;\n  key.lanes = lanes;\n  return key;\n}\nfunction createFiberFromFragment(elements, mode, lanes, key) {\n  elements = createFiberImplClass(7, elements, key, mode);\n  elements.lanes = lanes;\n  return elements;\n}\nfunction createFiberFromOffscreen(pendingProps, mode, lanes, key) {\n  pendingProps = createFiberImplClass(22, pendingProps, key, mode);\n  pendingProps.elementType = REACT_OFFSCREEN_TYPE;\n  pendingProps.lanes = lanes;\n  var primaryChildInstance = {\n    _visibility: 1,\n    _pendingVisibility: 1,\n    _pendingMarkers: null,\n    _retryCache: null,\n    _transitions: null,\n    _current: null,\n    detach: function () {\n      var fiber = primaryChildInstance._current;\n      if (null === fiber) throw Error(formatProdErrorMessage(456));\n      if (0 === (primaryChildInstance._pendingVisibility & 2)) {\n        var root = enqueueConcurrentRenderForLane(fiber, 2);\n        null !== root &&\n          ((primaryChildInstance._pendingVisibility |= 2),\n          scheduleUpdateOnFiber(root, fiber, 2));\n      }\n    },\n    attach: function () {\n      var fiber = primaryChildInstance._current;\n      if (null === fiber) throw Error(formatProdErrorMessage(456));\n      if (0 !== (primaryChildInstance._pendingVisibility & 2)) {\n        var root = enqueueConcurrentRenderForLane(fiber, 2);\n        null !== root &&\n          ((primaryChildInstance._pendingVisibility &= -3),\n          scheduleUpdateOnFiber(root, fiber, 2));\n      }\n    }\n  };\n  pendingProps.stateNode = primaryChildInstance;\n  return pendingProps;\n}\nfunction createFiberFromText(content, mode, lanes) {\n  content = createFiberImplClass(6, content, null, mode);\n  content.lanes = lanes;\n  return content;\n}\nfunction createFiberFromPortal(portal, mode, lanes) {\n  mode = createFiberImplClass(\n    4,\n    null !== portal.children ? portal.children : [],\n    portal.key,\n    mode\n  );\n  mode.lanes = lanes;\n  mode.stateNode = {\n    containerInfo: portal.containerInfo,\n    pendingChildren: null,\n    implementation: portal.implementation\n  };\n  return mode;\n}\nfunction markUpdate(workInProgress) {\n  workInProgress.flags |= 4;\n}\nfunction preloadResourceAndSuspendIfNeeded(workInProgress, resource) {\n  if (\"stylesheet\" !== resource.type || 0 !== (resource.state.loading & 4))\n    workInProgress.flags &= -16777217;\n  else if (((workInProgress.flags |= 16777216), !preloadResource(resource))) {\n    resource = suspenseHandlerStackCursor.current;\n    if (\n      null !== resource &&\n      ((workInProgressRootRenderLanes & 4194176) ===\n      workInProgressRootRenderLanes\n        ? null !== shellBoundary\n        : ((workInProgressRootRenderLanes & 62914560) !==\n            workInProgressRootRenderLanes &&\n            0 === (workInProgressRootRenderLanes & 536870912)) ||\n          resource !== shellBoundary)\n    )\n      throw (\n        ((suspendedThenable = noopSuspenseyCommitThenable),\n        SuspenseyCommitException)\n      );\n    workInProgress.flags |= 8192;\n  }\n}\nfunction scheduleRetryEffect(workInProgress, retryQueue) {\n  null !== retryQueue && (workInProgress.flags |= 4);\n  workInProgress.flags & 16384 &&\n    ((retryQueue =\n      22 !== workInProgress.tag ? claimNextRetryLane() : 536870912),\n    (workInProgress.lanes |= retryQueue),\n    (workInProgressSuspendedRetryLanes |= retryQueue));\n}\nfunction cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {\n  if (!isHydrating)\n    switch (renderState.tailMode) {\n      case \"hidden\":\n        hasRenderedATailFallback = renderState.tail;\n        for (var lastTailNode = null; null !== hasRenderedATailFallback; )\n          null !== hasRenderedATailFallback.alternate &&\n            (lastTailNode = hasRenderedATailFallback),\n            (hasRenderedATailFallback = hasRenderedATailFallback.sibling);\n        null === lastTailNode\n          ? (renderState.tail = null)\n          : (lastTailNode.sibling = null);\n        break;\n      case \"collapsed\":\n        lastTailNode = renderState.tail;\n        for (var lastTailNode$131 = null; null !== lastTailNode; )\n          null !== lastTailNode.alternate && (lastTailNode$131 = lastTailNode),\n            (lastTailNode = lastTailNode.sibling);\n        null === lastTailNode$131\n          ? hasRenderedATailFallback || null === renderState.tail\n            ? (renderState.tail = null)\n            : (renderState.tail.sibling = null)\n          : (lastTailNode$131.sibling = null);\n    }\n}\nfunction bubbleProperties(completedWork) {\n  var didBailout =\n      null !== completedWork.alternate &&\n      completedWork.alternate.child === completedWork.child,\n    newChildLanes = 0,\n    subtreeFlags = 0;\n  if (didBailout)\n    for (var child$132 = completedWork.child; null !== child$132; )\n      (newChildLanes |= child$132.lanes | child$132.childLanes),\n        (subtreeFlags |= child$132.subtreeFlags & 31457280),\n        (subtreeFlags |= child$132.flags & 31457280),\n        (child$132.return = completedWork),\n        (child$132 = child$132.sibling);\n  else\n    for (child$132 = completedWork.child; null !== child$132; )\n      (newChildLanes |= child$132.lanes | child$132.childLanes),\n        (subtreeFlags |= child$132.subtreeFlags),\n        (subtreeFlags |= child$132.flags),\n        (child$132.return = completedWork),\n        (child$132 = child$132.sibling);\n  completedWork.subtreeFlags |= subtreeFlags;\n  completedWork.childLanes = newChildLanes;\n  return didBailout;\n}\nfunction completeWork(current, workInProgress, renderLanes) {\n  var newProps = workInProgress.pendingProps;\n  popTreeContext(workInProgress);\n  switch (workInProgress.tag) {\n    case 16:\n    case 15:\n    case 0:\n    case 11:\n    case 7:\n    case 8:\n    case 12:\n    case 9:\n    case 14:\n      return bubbleProperties(workInProgress), null;\n    case 1:\n      return bubbleProperties(workInProgress), null;\n    case 3:\n      renderLanes = workInProgress.stateNode;\n      newProps = null;\n      null !== current && (newProps = current.memoizedState.cache);\n      workInProgress.memoizedState.cache !== newProps &&\n        (workInProgress.flags |= 2048);\n      popProvider(CacheContext);\n      popHostContainer();\n      renderLanes.pendingContext &&\n        ((renderLanes.context = renderLanes.pendingContext),\n        (renderLanes.pendingContext = null));\n      if (null === current || null === current.child)\n        popHydrationState(workInProgress)\n          ? markUpdate(workInProgress)\n          : null === current ||\n            (current.memoizedState.isDehydrated &&\n              0 === (workInProgress.flags & 256)) ||\n            ((workInProgress.flags |= 1024),\n            null !== hydrationErrors &&\n              (queueRecoverableErrors(hydrationErrors),\n              (hydrationErrors = null)));\n      bubbleProperties(workInProgress);\n      return null;\n    case 26:\n      return (\n        (renderLanes = workInProgress.memoizedState),\n        null === current\n          ? (markUpdate(workInProgress),\n            null !== renderLanes\n              ? (bubbleProperties(workInProgress),\n                preloadResourceAndSuspendIfNeeded(workInProgress, renderLanes))\n              : (bubbleProperties(workInProgress),\n                (workInProgress.flags &= -16777217)))\n          : renderLanes\n            ? renderLanes !== current.memoizedState\n              ? (markUpdate(workInProgress),\n                bubbleProperties(workInProgress),\n                preloadResourceAndSuspendIfNeeded(workInProgress, renderLanes))\n              : (bubbleProperties(workInProgress),\n                (workInProgress.flags &= -16777217))\n            : (current.memoizedProps !== newProps && markUpdate(workInProgress),\n              bubbleProperties(workInProgress),\n              (workInProgress.flags &= -16777217)),\n        null\n      );\n    case 27:\n      popHostContext(workInProgress);\n      renderLanes = rootInstanceStackCursor.current;\n      var type = workInProgress.type;\n      if (null !== current && null != workInProgress.stateNode)\n        current.memoizedProps !== newProps && markUpdate(workInProgress);\n      else {\n        if (!newProps) {\n          if (null === workInProgress.stateNode)\n            throw Error(formatProdErrorMessage(166));\n          bubbleProperties(workInProgress);\n          return null;\n        }\n        current = contextStackCursor.current;\n        popHydrationState(workInProgress)\n          ? prepareToHydrateHostInstance(workInProgress, current)\n          : ((current = resolveSingletonInstance(type, newProps, renderLanes)),\n            (workInProgress.stateNode = current),\n            markUpdate(workInProgress));\n      }\n      bubbleProperties(workInProgress);\n      return null;\n    case 5:\n      popHostContext(workInProgress);\n      renderLanes = workInProgress.type;\n      if (null !== current && null != workInProgress.stateNode)\n        current.memoizedProps !== newProps && markUpdate(workInProgress);\n      else {\n        if (!newProps) {\n          if (null === workInProgress.stateNode)\n            throw Error(formatProdErrorMessage(166));\n          bubbleProperties(workInProgress);\n          return null;\n        }\n        current = contextStackCursor.current;\n        if (popHydrationState(workInProgress))\n          prepareToHydrateHostInstance(workInProgress, current);\n        else {\n          type = getOwnerDocumentFromRootContainer(\n            rootInstanceStackCursor.current\n          );\n          switch (current) {\n            case 1:\n              current = type.createElementNS(\n                \"http://www.w3.org/2000/svg\",\n                renderLanes\n              );\n              break;\n            case 2:\n              current = type.createElementNS(\n                \"http://www.w3.org/1998/Math/MathML\",\n                renderLanes\n              );\n              break;\n            default:\n              switch (renderLanes) {\n                case \"svg\":\n                  current = type.createElementNS(\n                    \"http://www.w3.org/2000/svg\",\n                    renderLanes\n                  );\n                  break;\n                case \"math\":\n                  current = type.createElementNS(\n                    \"http://www.w3.org/1998/Math/MathML\",\n                    renderLanes\n                  );\n                  break;\n                case \"script\":\n                  current = type.createElement(\"div\");\n                  current.innerHTML = \"<script>\\x3c/script>\";\n                  current = current.removeChild(current.firstChild);\n                  break;\n                case \"select\":\n                  current =\n                    \"string\" === typeof newProps.is\n                      ? type.createElement(\"select\", { is: newProps.is })\n                      : type.createElement(\"select\");\n                  newProps.multiple\n                    ? (current.multiple = !0)\n                    : newProps.size && (current.size = newProps.size);\n                  break;\n                default:\n                  current =\n                    \"string\" === typeof newProps.is\n                      ? type.createElement(renderLanes, { is: newProps.is })\n                      : type.createElement(renderLanes);\n              }\n          }\n          current[internalInstanceKey] = workInProgress;\n          current[internalPropsKey] = newProps;\n          a: for (type = workInProgress.child; null !== type; ) {\n            if (5 === type.tag || 6 === type.tag)\n              current.appendChild(type.stateNode);\n            else if (4 !== type.tag && 27 !== type.tag && null !== type.child) {\n              type.child.return = type;\n              type = type.child;\n              continue;\n            }\n            if (type === workInProgress) break a;\n            for (; null === type.sibling; ) {\n              if (null === type.return || type.return === workInProgress)\n                break a;\n              type = type.return;\n            }\n            type.sibling.return = type.return;\n            type = type.sibling;\n          }\n          workInProgress.stateNode = current;\n          a: switch (\n            (setInitialProperties(current, renderLanes, newProps), renderLanes)\n          ) {\n            case \"button\":\n            case \"input\":\n            case \"select\":\n            case \"textarea\":\n              current = !!newProps.autoFocus;\n              break a;\n            case \"img\":\n              current = !0;\n              break a;\n            default:\n              current = !1;\n          }\n          current && markUpdate(workInProgress);\n        }\n      }\n      bubbleProperties(workInProgress);\n      workInProgress.flags &= -16777217;\n      return null;\n    case 6:\n      if (current && null != workInProgress.stateNode)\n        current.memoizedProps !== newProps && markUpdate(workInProgress);\n      else {\n        if (\"string\" !== typeof newProps && null === workInProgress.stateNode)\n          throw Error(formatProdErrorMessage(166));\n        current = rootInstanceStackCursor.current;\n        if (popHydrationState(workInProgress)) {\n          current = workInProgress.stateNode;\n          renderLanes = workInProgress.memoizedProps;\n          newProps = null;\n          type = hydrationParentFiber;\n          if (null !== type)\n            switch (type.tag) {\n              case 27:\n              case 5:\n                newProps = type.memoizedProps;\n            }\n          current[internalInstanceKey] = workInProgress;\n          current =\n            current.nodeValue === renderLanes ||\n            (null !== newProps && !0 === newProps.suppressHydrationWarning) ||\n            checkForUnmatchedText(current.nodeValue, renderLanes)\n              ? !0\n              : !1;\n          current || throwOnHydrationMismatch(workInProgress);\n        } else\n          (current =\n            getOwnerDocumentFromRootContainer(current).createTextNode(\n              newProps\n            )),\n            (current[internalInstanceKey] = workInProgress),\n            (workInProgress.stateNode = current);\n      }\n      bubbleProperties(workInProgress);\n      return null;\n    case 13:\n      newProps = workInProgress.memoizedState;\n      if (\n        null === current ||\n        (null !== current.memoizedState &&\n          null !== current.memoizedState.dehydrated)\n      ) {\n        type = popHydrationState(workInProgress);\n        if (null !== newProps && null !== newProps.dehydrated) {\n          if (null === current) {\n            if (!type) throw Error(formatProdErrorMessage(318));\n            type = workInProgress.memoizedState;\n            type = null !== type ? type.dehydrated : null;\n            if (!type) throw Error(formatProdErrorMessage(317));\n            type[internalInstanceKey] = workInProgress;\n          } else\n            resetHydrationState(),\n              0 === (workInProgress.flags & 128) &&\n                (workInProgress.memoizedState = null),\n              (workInProgress.flags |= 4);\n          bubbleProperties(workInProgress);\n          type = !1;\n        } else\n          null !== hydrationErrors &&\n            (queueRecoverableErrors(hydrationErrors), (hydrationErrors = null)),\n            (type = !0);\n        if (!type) {\n          if (workInProgress.flags & 256)\n            return popSuspenseHandler(workInProgress), workInProgress;\n          popSuspenseHandler(workInProgress);\n          return null;\n        }\n      }\n      popSuspenseHandler(workInProgress);\n      if (0 !== (workInProgress.flags & 128))\n        return (workInProgress.lanes = renderLanes), workInProgress;\n      renderLanes = null !== newProps;\n      current = null !== current && null !== current.memoizedState;\n      if (renderLanes) {\n        newProps = workInProgress.child;\n        type = null;\n        null !== newProps.alternate &&\n          null !== newProps.alternate.memoizedState &&\n          null !== newProps.alternate.memoizedState.cachePool &&\n          (type = newProps.alternate.memoizedState.cachePool.pool);\n        var cache$144 = null;\n        null !== newProps.memoizedState &&\n          null !== newProps.memoizedState.cachePool &&\n          (cache$144 = newProps.memoizedState.cachePool.pool);\n        cache$144 !== type && (newProps.flags |= 2048);\n      }\n      renderLanes !== current &&\n        renderLanes &&\n        (workInProgress.child.flags |= 8192);\n      scheduleRetryEffect(workInProgress, workInProgress.updateQueue);\n      bubbleProperties(workInProgress);\n      return null;\n    case 4:\n      return (\n        popHostContainer(),\n        null === current &&\n          listenToAllSupportedEvents(workInProgress.stateNode.containerInfo),\n        bubbleProperties(workInProgress),\n        null\n      );\n    case 10:\n      return (\n        popProvider(workInProgress.type), bubbleProperties(workInProgress), null\n      );\n    case 19:\n      pop(suspenseStackCursor);\n      type = workInProgress.memoizedState;\n      if (null === type) return bubbleProperties(workInProgress), null;\n      newProps = 0 !== (workInProgress.flags & 128);\n      cache$144 = type.rendering;\n      if (null === cache$144)\n        if (newProps) cutOffTailIfNeeded(type, !1);\n        else {\n          if (\n            0 !== workInProgressRootExitStatus ||\n            (null !== current && 0 !== (current.flags & 128))\n          )\n            for (current = workInProgress.child; null !== current; ) {\n              cache$144 = findFirstSuspended(current);\n              if (null !== cache$144) {\n                workInProgress.flags |= 128;\n                cutOffTailIfNeeded(type, !1);\n                current = cache$144.updateQueue;\n                workInProgress.updateQueue = current;\n                scheduleRetryEffect(workInProgress, current);\n                workInProgress.subtreeFlags = 0;\n                current = renderLanes;\n                for (renderLanes = workInProgress.child; null !== renderLanes; )\n                  resetWorkInProgress(renderLanes, current),\n                    (renderLanes = renderLanes.sibling);\n                push(\n                  suspenseStackCursor,\n                  (suspenseStackCursor.current & 1) | 2\n                );\n                return workInProgress.child;\n              }\n              current = current.sibling;\n            }\n          null !== type.tail &&\n            now() > workInProgressRootRenderTargetTime &&\n            ((workInProgress.flags |= 128),\n            (newProps = !0),\n            cutOffTailIfNeeded(type, !1),\n            (workInProgress.lanes = 4194304));\n        }\n      else {\n        if (!newProps)\n          if (((current = findFirstSuspended(cache$144)), null !== current)) {\n            if (\n              ((workInProgress.flags |= 128),\n              (newProps = !0),\n              (current = current.updateQueue),\n              (workInProgress.updateQueue = current),\n              scheduleRetryEffect(workInProgress, current),\n              cutOffTailIfNeeded(type, !0),\n              null === type.tail &&\n                \"hidden\" === type.tailMode &&\n                !cache$144.alternate &&\n                !isHydrating)\n            )\n              return bubbleProperties(workInProgress), null;\n          } else\n            2 * now() - type.renderingStartTime >\n              workInProgressRootRenderTargetTime &&\n              536870912 !== renderLanes &&\n              ((workInProgress.flags |= 128),\n              (newProps = !0),\n              cutOffTailIfNeeded(type, !1),\n              (workInProgress.lanes = 4194304));\n        type.isBackwards\n          ? ((cache$144.sibling = workInProgress.child),\n            (workInProgress.child = cache$144))\n          : ((current = type.last),\n            null !== current\n              ? (current.sibling = cache$144)\n              : (workInProgress.child = cache$144),\n            (type.last = cache$144));\n      }\n      if (null !== type.tail)\n        return (\n          (workInProgress = type.tail),\n          (type.rendering = workInProgress),\n          (type.tail = workInProgress.sibling),\n          (type.renderingStartTime = now()),\n          (workInProgress.sibling = null),\n          (current = suspenseStackCursor.current),\n          push(suspenseStackCursor, newProps ? (current & 1) | 2 : current & 1),\n          workInProgress\n        );\n      bubbleProperties(workInProgress);\n      return null;\n    case 22:\n    case 23:\n      return (\n        popSuspenseHandler(workInProgress),\n        popHiddenContext(),\n        (newProps = null !== workInProgress.memoizedState),\n        null !== current\n          ? (null !== current.memoizedState) !== newProps &&\n            (workInProgress.flags |= 8192)\n          : newProps && (workInProgress.flags |= 8192),\n        newProps\n          ? 0 !== (renderLanes & 536870912) &&\n            0 === (workInProgress.flags & 128) &&\n            (bubbleProperties(workInProgress),\n            workInProgress.subtreeFlags & 6 && (workInProgress.flags |= 8192))\n          : bubbleProperties(workInProgress),\n        (renderLanes = workInProgress.updateQueue),\n        null !== renderLanes &&\n          scheduleRetryEffect(workInProgress, renderLanes.retryQueue),\n        (renderLanes = null),\n        null !== current &&\n          null !== current.memoizedState &&\n          null !== current.memoizedState.cachePool &&\n          (renderLanes = current.memoizedState.cachePool.pool),\n        (newProps = null),\n        null !== workInProgress.memoizedState &&\n          null !== workInProgress.memoizedState.cachePool &&\n          (newProps = workInProgress.memoizedState.cachePool.pool),\n        newProps !== renderLanes && (workInProgress.flags |= 2048),\n        null !== current && pop(resumedCache),\n        null\n      );\n    case 24:\n      return (\n        (renderLanes = null),\n        null !== current && (renderLanes = current.memoizedState.cache),\n        workInProgress.memoizedState.cache !== renderLanes &&\n          (workInProgress.flags |= 2048),\n        popProvider(CacheContext),\n        bubbleProperties(workInProgress),\n        null\n      );\n    case 25:\n      return null;\n  }\n  throw Error(formatProdErrorMessage(156, workInProgress.tag));\n}\nfunction unwindWork(current, workInProgress) {\n  popTreeContext(workInProgress);\n  switch (workInProgress.tag) {\n    case 1:\n      return (\n        (current = workInProgress.flags),\n        current & 65536\n          ? ((workInProgress.flags = (current & -65537) | 128), workInProgress)\n          : null\n      );\n    case 3:\n      return (\n        popProvider(CacheContext),\n        popHostContainer(),\n        (current = workInProgress.flags),\n        0 !== (current & 65536) && 0 === (current & 128)\n          ? ((workInProgress.flags = (current & -65537) | 128), workInProgress)\n          : null\n      );\n    case 26:\n    case 27:\n    case 5:\n      return popHostContext(workInProgress), null;\n    case 13:\n      popSuspenseHandler(workInProgress);\n      current = workInProgress.memoizedState;\n      if (null !== current && null !== current.dehydrated) {\n        if (null === workInProgress.alternate)\n          throw Error(formatProdErrorMessage(340));\n        resetHydrationState();\n      }\n      current = workInProgress.flags;\n      return current & 65536\n        ? ((workInProgress.flags = (current & -65537) | 128), workInProgress)\n        : null;\n    case 19:\n      return pop(suspenseStackCursor), null;\n    case 4:\n      return popHostContainer(), null;\n    case 10:\n      return popProvider(workInProgress.type), null;\n    case 22:\n    case 23:\n      return (\n        popSuspenseHandler(workInProgress),\n        popHiddenContext(),\n        null !== current && pop(resumedCache),\n        (current = workInProgress.flags),\n        current & 65536\n          ? ((workInProgress.flags = (current & -65537) | 128), workInProgress)\n          : null\n      );\n    case 24:\n      return popProvider(CacheContext), null;\n    case 25:\n      return null;\n    default:\n      return null;\n  }\n}\nfunction unwindInterruptedWork(current, interruptedWork) {\n  popTreeContext(interruptedWork);\n  switch (interruptedWork.tag) {\n    case 3:\n      popProvider(CacheContext);\n      popHostContainer();\n      break;\n    case 26:\n    case 27:\n    case 5:\n      popHostContext(interruptedWork);\n      break;\n    case 4:\n      popHostContainer();\n      break;\n    case 13:\n      popSuspenseHandler(interruptedWork);\n      break;\n    case 19:\n      pop(suspenseStackCursor);\n      break;\n    case 10:\n      popProvider(interruptedWork.type);\n      break;\n    case 22:\n    case 23:\n      popSuspenseHandler(interruptedWork);\n      popHiddenContext();\n      null !== current && pop(resumedCache);\n      break;\n    case 24:\n      popProvider(CacheContext);\n  }\n}\nvar DefaultAsyncDispatcher = {\n    getCacheForType: function (resourceType) {\n      var cache = readContext(CacheContext),\n        cacheForType = cache.data.get(resourceType);\n      void 0 === cacheForType &&\n        ((cacheForType = resourceType()),\n        cache.data.set(resourceType, cacheForType));\n      return cacheForType;\n    }\n  },\n  PossiblyWeakMap = \"function\" === typeof WeakMap ? WeakMap : Map,\n  executionContext = 0,\n  workInProgressRoot = null,\n  workInProgress = null,\n  workInProgressRootRenderLanes = 0,\n  workInProgressSuspendedReason = 0,\n  workInProgressThrownValue = null,\n  workInProgressRootDidSkipSuspendedSiblings = !1,\n  workInProgressRootIsPrerendering = !1,\n  workInProgressRootDidAttachPingListener = !1,\n  entangledRenderLanes = 0,\n  workInProgressRootExitStatus = 0,\n  workInProgressRootSkippedLanes = 0,\n  workInProgressRootInterleavedUpdatedLanes = 0,\n  workInProgressRootPingedLanes = 0,\n  workInProgressDeferredLane = 0,\n  workInProgressSuspendedRetryLanes = 0,\n  workInProgressRootConcurrentErrors = null,\n  workInProgressRootRecoverableErrors = null,\n  workInProgressRootDidIncludeRecursiveRenderUpdate = !1,\n  globalMostRecentFallbackTime = 0,\n  workInProgressRootRenderTargetTime = Infinity,\n  workInProgressTransitions = null,\n  legacyErrorBoundariesThatAlreadyFailed = null,\n  rootDoesHavePassiveEffects = !1,\n  rootWithPendingPassiveEffects = null,\n  pendingPassiveEffectsLanes = 0,\n  pendingPassiveEffectsRemainingLanes = 0,\n  pendingPassiveTransitions = null,\n  nestedUpdateCount = 0,\n  rootWithNestedUpdates = null;\nfunction requestUpdateLane() {\n  if (0 !== (executionContext & 2) && 0 !== workInProgressRootRenderLanes)\n    return workInProgressRootRenderLanes & -workInProgressRootRenderLanes;\n  if (null !== ReactSharedInternals.T) {\n    var actionScopeLane = currentEntangledLane;\n    return 0 !== actionScopeLane ? actionScopeLane : requestTransitionLane();\n  }\n  return resolveUpdatePriority();\n}\nfunction requestDeferredLane() {\n  0 === workInProgressDeferredLane &&\n    (workInProgressDeferredLane =\n      0 === (workInProgressRootRenderLanes & 536870912) || isHydrating\n        ? claimNextTransitionLane()\n        : 536870912);\n  var suspenseHandler = suspenseHandlerStackCursor.current;\n  null !== suspenseHandler && (suspenseHandler.flags |= 32);\n  return workInProgressDeferredLane;\n}\nfunction scheduleUpdateOnFiber(root, fiber, lane) {\n  if (\n    (root === workInProgressRoot && 2 === workInProgressSuspendedReason) ||\n    null !== root.cancelPendingCommit\n  )\n    prepareFreshStack(root, 0),\n      markRootSuspended(\n        root,\n        workInProgressRootRenderLanes,\n        workInProgressDeferredLane,\n        !1\n      );\n  markRootUpdated$1(root, lane);\n  if (0 === (executionContext & 2) || root !== workInProgressRoot)\n    root === workInProgressRoot &&\n      (0 === (executionContext & 2) &&\n        (workInProgressRootInterleavedUpdatedLanes |= lane),\n      4 === workInProgressRootExitStatus &&\n        markRootSuspended(\n          root,\n          workInProgressRootRenderLanes,\n          workInProgressDeferredLane,\n          !1\n        )),\n      ensureRootIsScheduled(root);\n}\nfunction performWorkOnRoot(root$jscomp$0, lanes, forceSync) {\n  if (0 !== (executionContext & 6)) throw Error(formatProdErrorMessage(327));\n  var shouldTimeSlice =\n      (!forceSync &&\n        0 === (lanes & 60) &&\n        0 === (lanes & root$jscomp$0.expiredLanes)) ||\n      checkIfRootIsPrerendering(root$jscomp$0, lanes),\n    exitStatus = shouldTimeSlice\n      ? renderRootConcurrent(root$jscomp$0, lanes)\n      : renderRootSync(root$jscomp$0, lanes, !0),\n    renderWasConcurrent = shouldTimeSlice;\n  do {\n    if (0 === exitStatus) {\n      workInProgressRootIsPrerendering &&\n        !shouldTimeSlice &&\n        markRootSuspended(root$jscomp$0, lanes, 0, !1);\n      break;\n    } else if (6 === exitStatus)\n      markRootSuspended(\n        root$jscomp$0,\n        lanes,\n        0,\n        !workInProgressRootDidSkipSuspendedSiblings\n      );\n    else {\n      forceSync = root$jscomp$0.current.alternate;\n      if (\n        renderWasConcurrent &&\n        !isRenderConsistentWithExternalStores(forceSync)\n      ) {\n        exitStatus = renderRootSync(root$jscomp$0, lanes, !1);\n        renderWasConcurrent = !1;\n        continue;\n      }\n      if (2 === exitStatus) {\n        renderWasConcurrent = lanes;\n        if (root$jscomp$0.errorRecoveryDisabledLanes & renderWasConcurrent)\n          var JSCompiler_inline_result = 0;\n        else\n          (JSCompiler_inline_result = root$jscomp$0.pendingLanes & -536870913),\n            (JSCompiler_inline_result =\n              0 !== JSCompiler_inline_result\n                ? JSCompiler_inline_result\n                : JSCompiler_inline_result & 536870912\n                  ? 536870912\n                  : 0);\n        if (0 !== JSCompiler_inline_result) {\n          lanes = JSCompiler_inline_result;\n          a: {\n            var root = root$jscomp$0;\n            exitStatus = workInProgressRootConcurrentErrors;\n            var wasRootDehydrated = root.current.memoizedState.isDehydrated;\n            wasRootDehydrated &&\n              (prepareFreshStack(root, JSCompiler_inline_result).flags |= 256);\n            JSCompiler_inline_result = renderRootSync(\n              root,\n              JSCompiler_inline_result,\n              !1\n            );\n            if (2 !== JSCompiler_inline_result) {\n              if (\n                workInProgressRootDidAttachPingListener &&\n                !wasRootDehydrated\n              ) {\n                root.errorRecoveryDisabledLanes |= renderWasConcurrent;\n                workInProgressRootInterleavedUpdatedLanes |=\n                  renderWasConcurrent;\n                exitStatus = 4;\n                break a;\n              }\n              renderWasConcurrent = workInProgressRootRecoverableErrors;\n              workInProgressRootRecoverableErrors = exitStatus;\n              null !== renderWasConcurrent &&\n                queueRecoverableErrors(renderWasConcurrent);\n            }\n            exitStatus = JSCompiler_inline_result;\n          }\n          renderWasConcurrent = !1;\n          if (2 !== exitStatus) continue;\n        }\n      }\n      if (1 === exitStatus) {\n        prepareFreshStack(root$jscomp$0, 0);\n        markRootSuspended(root$jscomp$0, lanes, 0, !0);\n        break;\n      }\n      a: {\n        shouldTimeSlice = root$jscomp$0;\n        switch (exitStatus) {\n          case 0:\n          case 1:\n            throw Error(formatProdErrorMessage(345));\n          case 4:\n            if ((lanes & 4194176) === lanes) {\n              markRootSuspended(\n                shouldTimeSlice,\n                lanes,\n                workInProgressDeferredLane,\n                !workInProgressRootDidSkipSuspendedSiblings\n              );\n              break a;\n            }\n            break;\n          case 2:\n            workInProgressRootRecoverableErrors = null;\n            break;\n          case 3:\n          case 5:\n            break;\n          default:\n            throw Error(formatProdErrorMessage(329));\n        }\n        shouldTimeSlice.finishedWork = forceSync;\n        shouldTimeSlice.finishedLanes = lanes;\n        if (\n          (lanes & 62914560) === lanes &&\n          ((renderWasConcurrent = globalMostRecentFallbackTime + 300 - now()),\n          10 < renderWasConcurrent)\n        ) {\n          markRootSuspended(\n            shouldTimeSlice,\n            lanes,\n            workInProgressDeferredLane,\n            !workInProgressRootDidSkipSuspendedSiblings\n          );\n          if (0 !== getNextLanes(shouldTimeSlice, 0)) break a;\n          shouldTimeSlice.timeoutHandle = scheduleTimeout(\n            commitRootWhenReady.bind(\n              null,\n              shouldTimeSlice,\n              forceSync,\n              workInProgressRootRecoverableErrors,\n              workInProgressTransitions,\n              workInProgressRootDidIncludeRecursiveRenderUpdate,\n              lanes,\n              workInProgressDeferredLane,\n              workInProgressRootInterleavedUpdatedLanes,\n              workInProgressSuspendedRetryLanes,\n              workInProgressRootDidSkipSuspendedSiblings,\n              2,\n              -0,\n              0\n            ),\n            renderWasConcurrent\n          );\n          break a;\n        }\n        commitRootWhenReady(\n          shouldTimeSlice,\n          forceSync,\n          workInProgressRootRecoverableErrors,\n          workInProgressTransitions,\n          workInProgressRootDidIncludeRecursiveRenderUpdate,\n          lanes,\n          workInProgressDeferredLane,\n          workInProgressRootInterleavedUpdatedLanes,\n          workInProgressSuspendedRetryLanes,\n          workInProgressRootDidSkipSuspendedSiblings,\n          0,\n          -0,\n          0\n        );\n      }\n    }\n    break;\n  } while (1);\n  ensureRootIsScheduled(root$jscomp$0);\n}\nfunction queueRecoverableErrors(errors) {\n  null === workInProgressRootRecoverableErrors\n    ? (workInProgressRootRecoverableErrors = errors)\n    : workInProgressRootRecoverableErrors.push.apply(\n        workInProgressRootRecoverableErrors,\n        errors\n      );\n}\nfunction commitRootWhenReady(\n  root,\n  finishedWork,\n  recoverableErrors,\n  transitions,\n  didIncludeRenderPhaseUpdate,\n  lanes,\n  spawnedLane,\n  updatedLanes,\n  suspendedRetryLanes,\n  didSkipSuspendedSiblings,\n  suspendedCommitReason,\n  completedRenderStartTime,\n  completedRenderEndTime\n) {\n  var subtreeFlags = finishedWork.subtreeFlags;\n  if (subtreeFlags & 8192 || 16785408 === (subtreeFlags & 16785408))\n    if (\n      ((suspendedState = { stylesheets: null, count: 0, unsuspend: noop }),\n      accumulateSuspenseyCommitOnFiber(finishedWork),\n      (finishedWork = waitForCommitToBeReady()),\n      null !== finishedWork)\n    ) {\n      root.cancelPendingCommit = finishedWork(\n        commitRoot.bind(\n          null,\n          root,\n          recoverableErrors,\n          transitions,\n          didIncludeRenderPhaseUpdate,\n          spawnedLane,\n          updatedLanes,\n          suspendedRetryLanes,\n          1,\n          completedRenderStartTime,\n          completedRenderEndTime\n        )\n      );\n      markRootSuspended(root, lanes, spawnedLane, !didSkipSuspendedSiblings);\n      return;\n    }\n  commitRoot(\n    root,\n    recoverableErrors,\n    transitions,\n    didIncludeRenderPhaseUpdate,\n    spawnedLane,\n    updatedLanes,\n    suspendedRetryLanes,\n    suspendedCommitReason,\n    completedRenderStartTime,\n    completedRenderEndTime\n  );\n}\nfunction isRenderConsistentWithExternalStores(finishedWork) {\n  for (var node = finishedWork; ; ) {\n    var tag = node.tag;\n    if (\n      (0 === tag || 11 === tag || 15 === tag) &&\n      node.flags & 16384 &&\n      ((tag = node.updateQueue),\n      null !== tag && ((tag = tag.stores), null !== tag))\n    )\n      for (var i = 0; i < tag.length; i++) {\n        var check = tag[i],\n          getSnapshot = check.getSnapshot;\n        check = check.value;\n        try {\n          if (!objectIs(getSnapshot(), check)) return !1;\n        } catch (error) {\n          return !1;\n        }\n      }\n    tag = node.child;\n    if (node.subtreeFlags & 16384 && null !== tag)\n      (tag.return = node), (node = tag);\n    else {\n      if (node === finishedWork) break;\n      for (; null === node.sibling; ) {\n        if (null === node.return || node.return === finishedWork) return !0;\n        node = node.return;\n      }\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  }\n  return !0;\n}\nfunction markRootSuspended(\n  root,\n  suspendedLanes,\n  spawnedLane,\n  didAttemptEntireTree\n) {\n  suspendedLanes &= ~workInProgressRootPingedLanes;\n  suspendedLanes &= ~workInProgressRootInterleavedUpdatedLanes;\n  root.suspendedLanes |= suspendedLanes;\n  root.pingedLanes &= ~suspendedLanes;\n  didAttemptEntireTree && (root.warmLanes |= suspendedLanes);\n  didAttemptEntireTree = root.expirationTimes;\n  for (var lanes = suspendedLanes; 0 < lanes; ) {\n    var index$6 = 31 - clz32(lanes),\n      lane = 1 << index$6;\n    didAttemptEntireTree[index$6] = -1;\n    lanes &= ~lane;\n  }\n  0 !== spawnedLane &&\n    markSpawnedDeferredLane(root, spawnedLane, suspendedLanes);\n}\nfunction flushSyncWork$1() {\n  return 0 === (executionContext & 6)\n    ? (flushSyncWorkAcrossRoots_impl(0, !1), !1)\n    : !0;\n}\nfunction resetWorkInProgressStack() {\n  if (null !== workInProgress) {\n    if (0 === workInProgressSuspendedReason)\n      var interruptedWork = workInProgress.return;\n    else\n      (interruptedWork = workInProgress),\n        (lastContextDependency = currentlyRenderingFiber = null),\n        resetHooksOnUnwind(interruptedWork),\n        (thenableState$1 = null),\n        (thenableIndexCounter$1 = 0),\n        (interruptedWork = workInProgress);\n    for (; null !== interruptedWork; )\n      unwindInterruptedWork(interruptedWork.alternate, interruptedWork),\n        (interruptedWork = interruptedWork.return);\n    workInProgress = null;\n  }\n}\nfunction prepareFreshStack(root, lanes) {\n  root.finishedWork = null;\n  root.finishedLanes = 0;\n  var timeoutHandle = root.timeoutHandle;\n  -1 !== timeoutHandle &&\n    ((root.timeoutHandle = -1), cancelTimeout(timeoutHandle));\n  timeoutHandle = root.cancelPendingCommit;\n  null !== timeoutHandle &&\n    ((root.cancelPendingCommit = null), timeoutHandle());\n  resetWorkInProgressStack();\n  workInProgressRoot = root;\n  workInProgress = timeoutHandle = createWorkInProgress(root.current, null);\n  workInProgressRootRenderLanes = lanes;\n  workInProgressSuspendedReason = 0;\n  workInProgressThrownValue = null;\n  workInProgressRootDidSkipSuspendedSiblings = !1;\n  workInProgressRootIsPrerendering = checkIfRootIsPrerendering(root, lanes);\n  workInProgressRootDidAttachPingListener = !1;\n  workInProgressSuspendedRetryLanes =\n    workInProgressDeferredLane =\n    workInProgressRootPingedLanes =\n    workInProgressRootInterleavedUpdatedLanes =\n    workInProgressRootSkippedLanes =\n    workInProgressRootExitStatus =\n      0;\n  workInProgressRootRecoverableErrors = workInProgressRootConcurrentErrors =\n    null;\n  workInProgressRootDidIncludeRecursiveRenderUpdate = !1;\n  0 !== (lanes & 8) && (lanes |= lanes & 32);\n  var allEntangledLanes = root.entangledLanes;\n  if (0 !== allEntangledLanes)\n    for (\n      root = root.entanglements, allEntangledLanes &= lanes;\n      0 < allEntangledLanes;\n\n    ) {\n      var index$4 = 31 - clz32(allEntangledLanes),\n        lane = 1 << index$4;\n      lanes |= root[index$4];\n      allEntangledLanes &= ~lane;\n    }\n  entangledRenderLanes = lanes;\n  finishQueueingConcurrentUpdates();\n  return timeoutHandle;\n}\nfunction handleThrow(root, thrownValue) {\n  currentlyRenderingFiber$1 = null;\n  ReactSharedInternals.H = ContextOnlyDispatcher;\n  thrownValue === SuspenseException\n    ? ((thrownValue = getSuspendedThenable()),\n      (workInProgressSuspendedReason = 3))\n    : thrownValue === SuspenseyCommitException\n      ? ((thrownValue = getSuspendedThenable()),\n        (workInProgressSuspendedReason = 4))\n      : (workInProgressSuspendedReason =\n          thrownValue === SelectiveHydrationException\n            ? 8\n            : null !== thrownValue &&\n                \"object\" === typeof thrownValue &&\n                \"function\" === typeof thrownValue.then\n              ? 6\n              : 1);\n  workInProgressThrownValue = thrownValue;\n  null === workInProgress &&\n    ((workInProgressRootExitStatus = 1),\n    logUncaughtError(\n      root,\n      createCapturedValueAtFiber(thrownValue, root.current)\n    ));\n}\nfunction pushDispatcher() {\n  var prevDispatcher = ReactSharedInternals.H;\n  ReactSharedInternals.H = ContextOnlyDispatcher;\n  return null === prevDispatcher ? ContextOnlyDispatcher : prevDispatcher;\n}\nfunction pushAsyncDispatcher() {\n  var prevAsyncDispatcher = ReactSharedInternals.A;\n  ReactSharedInternals.A = DefaultAsyncDispatcher;\n  return prevAsyncDispatcher;\n}\nfunction renderDidSuspendDelayIfPossible() {\n  workInProgressRootExitStatus = 4;\n  workInProgressRootDidSkipSuspendedSiblings ||\n    ((workInProgressRootRenderLanes & 4194176) !==\n      workInProgressRootRenderLanes &&\n      null !== suspenseHandlerStackCursor.current) ||\n    (workInProgressRootIsPrerendering = !0);\n  (0 === (workInProgressRootSkippedLanes & 134217727) &&\n    0 === (workInProgressRootInterleavedUpdatedLanes & 134217727)) ||\n    null === workInProgressRoot ||\n    markRootSuspended(\n      workInProgressRoot,\n      workInProgressRootRenderLanes,\n      workInProgressDeferredLane,\n      !1\n    );\n}\nfunction renderRootSync(root, lanes, shouldYieldForPrerendering) {\n  var prevExecutionContext = executionContext;\n  executionContext |= 2;\n  var prevDispatcher = pushDispatcher(),\n    prevAsyncDispatcher = pushAsyncDispatcher();\n  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes)\n    (workInProgressTransitions = null), prepareFreshStack(root, lanes);\n  lanes = !1;\n  var exitStatus = workInProgressRootExitStatus;\n  a: do\n    try {\n      if (0 !== workInProgressSuspendedReason && null !== workInProgress) {\n        var unitOfWork = workInProgress,\n          thrownValue = workInProgressThrownValue;\n        switch (workInProgressSuspendedReason) {\n          case 8:\n            resetWorkInProgressStack();\n            exitStatus = 6;\n            break a;\n          case 3:\n          case 2:\n          case 6:\n            null === suspenseHandlerStackCursor.current && (lanes = !0);\n            var reason = workInProgressSuspendedReason;\n            workInProgressSuspendedReason = 0;\n            workInProgressThrownValue = null;\n            throwAndUnwindWorkLoop(root, unitOfWork, thrownValue, reason);\n            if (\n              shouldYieldForPrerendering &&\n              workInProgressRootIsPrerendering\n            ) {\n              exitStatus = 0;\n              break a;\n            }\n            break;\n          default:\n            (reason = workInProgressSuspendedReason),\n              (workInProgressSuspendedReason = 0),\n              (workInProgressThrownValue = null),\n              throwAndUnwindWorkLoop(root, unitOfWork, thrownValue, reason);\n        }\n      }\n      workLoopSync();\n      exitStatus = workInProgressRootExitStatus;\n      break;\n    } catch (thrownValue$164) {\n      handleThrow(root, thrownValue$164);\n    }\n  while (1);\n  lanes && root.shellSuspendCounter++;\n  lastContextDependency = currentlyRenderingFiber = null;\n  executionContext = prevExecutionContext;\n  ReactSharedInternals.H = prevDispatcher;\n  ReactSharedInternals.A = prevAsyncDispatcher;\n  null === workInProgress &&\n    ((workInProgressRoot = null),\n    (workInProgressRootRenderLanes = 0),\n    finishQueueingConcurrentUpdates());\n  return exitStatus;\n}\nfunction workLoopSync() {\n  for (; null !== workInProgress; ) performUnitOfWork(workInProgress);\n}\nfunction renderRootConcurrent(root, lanes) {\n  var prevExecutionContext = executionContext;\n  executionContext |= 2;\n  var prevDispatcher = pushDispatcher(),\n    prevAsyncDispatcher = pushAsyncDispatcher();\n  workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes\n    ? ((workInProgressTransitions = null),\n      (workInProgressRootRenderTargetTime = now() + 500),\n      prepareFreshStack(root, lanes))\n    : (workInProgressRootIsPrerendering = checkIfRootIsPrerendering(\n        root,\n        lanes\n      ));\n  a: do\n    try {\n      if (0 !== workInProgressSuspendedReason && null !== workInProgress) {\n        lanes = workInProgress;\n        var thrownValue = workInProgressThrownValue;\n        b: switch (workInProgressSuspendedReason) {\n          case 1:\n            workInProgressSuspendedReason = 0;\n            workInProgressThrownValue = null;\n            throwAndUnwindWorkLoop(root, lanes, thrownValue, 1);\n            break;\n          case 2:\n            if (isThenableResolved(thrownValue)) {\n              workInProgressSuspendedReason = 0;\n              workInProgressThrownValue = null;\n              replaySuspendedUnitOfWork(lanes);\n              break;\n            }\n            lanes = function () {\n              2 === workInProgressSuspendedReason &&\n                workInProgressRoot === root &&\n                (workInProgressSuspendedReason = 7);\n              ensureRootIsScheduled(root);\n            };\n            thrownValue.then(lanes, lanes);\n            break a;\n          case 3:\n            workInProgressSuspendedReason = 7;\n            break a;\n          case 4:\n            workInProgressSuspendedReason = 5;\n            break a;\n          case 7:\n            isThenableResolved(thrownValue)\n              ? ((workInProgressSuspendedReason = 0),\n                (workInProgressThrownValue = null),\n                replaySuspendedUnitOfWork(lanes))\n              : ((workInProgressSuspendedReason = 0),\n                (workInProgressThrownValue = null),\n                throwAndUnwindWorkLoop(root, lanes, thrownValue, 7));\n            break;\n          case 5:\n            var resource = null;\n            switch (workInProgress.tag) {\n              case 26:\n                resource = workInProgress.memoizedState;\n              case 5:\n              case 27:\n                var hostFiber = workInProgress;\n                if (resource ? preloadResource(resource) : 1) {\n                  workInProgressSuspendedReason = 0;\n                  workInProgressThrownValue = null;\n                  var sibling = hostFiber.sibling;\n                  if (null !== sibling) workInProgress = sibling;\n                  else {\n                    var returnFiber = hostFiber.return;\n                    null !== returnFiber\n                      ? ((workInProgress = returnFiber),\n                        completeUnitOfWork(returnFiber))\n                      : (workInProgress = null);\n                  }\n                  break b;\n                }\n            }\n            workInProgressSuspendedReason = 0;\n            workInProgressThrownValue = null;\n            throwAndUnwindWorkLoop(root, lanes, thrownValue, 5);\n            break;\n          case 6:\n            workInProgressSuspendedReason = 0;\n            workInProgressThrownValue = null;\n            throwAndUnwindWorkLoop(root, lanes, thrownValue, 6);\n            break;\n          case 8:\n            resetWorkInProgressStack();\n            workInProgressRootExitStatus = 6;\n            break a;\n          default:\n            throw Error(formatProdErrorMessage(462));\n        }\n      }\n      workLoopConcurrent();\n      break;\n    } catch (thrownValue$166) {\n      handleThrow(root, thrownValue$166);\n    }\n  while (1);\n  lastContextDependency = currentlyRenderingFiber = null;\n  ReactSharedInternals.H = prevDispatcher;\n  ReactSharedInternals.A = prevAsyncDispatcher;\n  executionContext = prevExecutionContext;\n  if (null !== workInProgress) return 0;\n  workInProgressRoot = null;\n  workInProgressRootRenderLanes = 0;\n  finishQueueingConcurrentUpdates();\n  return workInProgressRootExitStatus;\n}\nfunction workLoopConcurrent() {\n  for (; null !== workInProgress && !shouldYield(); )\n    performUnitOfWork(workInProgress);\n}\nfunction performUnitOfWork(unitOfWork) {\n  var next = beginWork(unitOfWork.alternate, unitOfWork, entangledRenderLanes);\n  unitOfWork.memoizedProps = unitOfWork.pendingProps;\n  null === next ? completeUnitOfWork(unitOfWork) : (workInProgress = next);\n}\nfunction replaySuspendedUnitOfWork(unitOfWork) {\n  var next = unitOfWork;\n  var current = next.alternate;\n  switch (next.tag) {\n    case 15:\n    case 0:\n      next = replayFunctionComponent(\n        current,\n        next,\n        next.pendingProps,\n        next.type,\n        void 0,\n        workInProgressRootRenderLanes\n      );\n      break;\n    case 11:\n      next = replayFunctionComponent(\n        current,\n        next,\n        next.pendingProps,\n        next.type.render,\n        next.ref,\n        workInProgressRootRenderLanes\n      );\n      break;\n    case 5:\n      resetHooksOnUnwind(next);\n    default:\n      unwindInterruptedWork(current, next),\n        (next = workInProgress =\n          resetWorkInProgress(next, entangledRenderLanes)),\n        (next = beginWork(current, next, entangledRenderLanes));\n  }\n  unitOfWork.memoizedProps = unitOfWork.pendingProps;\n  null === next ? completeUnitOfWork(unitOfWork) : (workInProgress = next);\n}\nfunction throwAndUnwindWorkLoop(\n  root,\n  unitOfWork,\n  thrownValue,\n  suspendedReason\n) {\n  lastContextDependency = currentlyRenderingFiber = null;\n  resetHooksOnUnwind(unitOfWork);\n  thenableState$1 = null;\n  thenableIndexCounter$1 = 0;\n  var returnFiber = unitOfWork.return;\n  try {\n    if (\n      throwException(\n        root,\n        returnFiber,\n        unitOfWork,\n        thrownValue,\n        workInProgressRootRenderLanes\n      )\n    ) {\n      workInProgressRootExitStatus = 1;\n      logUncaughtError(\n        root,\n        createCapturedValueAtFiber(thrownValue, root.current)\n      );\n      workInProgress = null;\n      return;\n    }\n  } catch (error) {\n    if (null !== returnFiber) throw ((workInProgress = returnFiber), error);\n    workInProgressRootExitStatus = 1;\n    logUncaughtError(\n      root,\n      createCapturedValueAtFiber(thrownValue, root.current)\n    );\n    workInProgress = null;\n    return;\n  }\n  if (unitOfWork.flags & 32768) {\n    if (isHydrating || 1 === suspendedReason) root = !0;\n    else if (\n      workInProgressRootIsPrerendering ||\n      0 !== (workInProgressRootRenderLanes & 536870912)\n    )\n      root = !1;\n    else if (\n      ((workInProgressRootDidSkipSuspendedSiblings = root = !0),\n      2 === suspendedReason || 3 === suspendedReason || 6 === suspendedReason)\n    )\n      (suspendedReason = suspenseHandlerStackCursor.current),\n        null !== suspendedReason &&\n          13 === suspendedReason.tag &&\n          (suspendedReason.flags |= 16384);\n    unwindUnitOfWork(unitOfWork, root);\n  } else completeUnitOfWork(unitOfWork);\n}\nfunction completeUnitOfWork(unitOfWork) {\n  var completedWork = unitOfWork;\n  do {\n    if (0 !== (completedWork.flags & 32768)) {\n      unwindUnitOfWork(\n        completedWork,\n        workInProgressRootDidSkipSuspendedSiblings\n      );\n      return;\n    }\n    unitOfWork = completedWork.return;\n    var next = completeWork(\n      completedWork.alternate,\n      completedWork,\n      entangledRenderLanes\n    );\n    if (null !== next) {\n      workInProgress = next;\n      return;\n    }\n    completedWork = completedWork.sibling;\n    if (null !== completedWork) {\n      workInProgress = completedWork;\n      return;\n    }\n    workInProgress = completedWork = unitOfWork;\n  } while (null !== completedWork);\n  0 === workInProgressRootExitStatus && (workInProgressRootExitStatus = 5);\n}\nfunction unwindUnitOfWork(unitOfWork, skipSiblings) {\n  do {\n    var next = unwindWork(unitOfWork.alternate, unitOfWork);\n    if (null !== next) {\n      next.flags &= 32767;\n      workInProgress = next;\n      return;\n    }\n    next = unitOfWork.return;\n    null !== next &&\n      ((next.flags |= 32768), (next.subtreeFlags = 0), (next.deletions = null));\n    if (\n      !skipSiblings &&\n      ((unitOfWork = unitOfWork.sibling), null !== unitOfWork)\n    ) {\n      workInProgress = unitOfWork;\n      return;\n    }\n    workInProgress = unitOfWork = next;\n  } while (null !== unitOfWork);\n  workInProgressRootExitStatus = 6;\n  workInProgress = null;\n}\nfunction commitRoot(\n  root,\n  recoverableErrors,\n  transitions,\n  didIncludeRenderPhaseUpdate,\n  spawnedLane,\n  updatedLanes,\n  suspendedRetryLanes,\n  suspendedCommitReason,\n  completedRenderStartTime,\n  completedRenderEndTime\n) {\n  var prevTransition = ReactSharedInternals.T,\n    previousUpdateLanePriority = ReactDOMSharedInternals.p;\n  try {\n    (ReactDOMSharedInternals.p = 2),\n      (ReactSharedInternals.T = null),\n      commitRootImpl(\n        root,\n        recoverableErrors,\n        transitions,\n        didIncludeRenderPhaseUpdate,\n        previousUpdateLanePriority,\n        spawnedLane,\n        updatedLanes,\n        suspendedRetryLanes,\n        suspendedCommitReason,\n        completedRenderStartTime,\n        completedRenderEndTime\n      );\n  } finally {\n    (ReactSharedInternals.T = prevTransition),\n      (ReactDOMSharedInternals.p = previousUpdateLanePriority);\n  }\n}\nfunction commitRootImpl(\n  root,\n  recoverableErrors,\n  transitions,\n  didIncludeRenderPhaseUpdate,\n  renderPriorityLevel,\n  spawnedLane,\n  updatedLanes,\n  suspendedRetryLanes\n) {\n  do flushPassiveEffects();\n  while (null !== rootWithPendingPassiveEffects);\n  if (0 !== (executionContext & 6)) throw Error(formatProdErrorMessage(327));\n  var finishedWork = root.finishedWork;\n  didIncludeRenderPhaseUpdate = root.finishedLanes;\n  if (null === finishedWork) return null;\n  root.finishedWork = null;\n  root.finishedLanes = 0;\n  if (finishedWork === root.current) throw Error(formatProdErrorMessage(177));\n  root.callbackNode = null;\n  root.callbackPriority = 0;\n  root.cancelPendingCommit = null;\n  var remainingLanes = finishedWork.lanes | finishedWork.childLanes;\n  remainingLanes |= concurrentlyUpdatedLanes;\n  markRootFinished(\n    root,\n    didIncludeRenderPhaseUpdate,\n    remainingLanes,\n    spawnedLane,\n    updatedLanes,\n    suspendedRetryLanes\n  );\n  root === workInProgressRoot &&\n    ((workInProgress = workInProgressRoot = null),\n    (workInProgressRootRenderLanes = 0));\n  (0 === (finishedWork.subtreeFlags & 10256) &&\n    0 === (finishedWork.flags & 10256)) ||\n    rootDoesHavePassiveEffects ||\n    ((rootDoesHavePassiveEffects = !0),\n    (pendingPassiveEffectsRemainingLanes = remainingLanes),\n    (pendingPassiveTransitions = transitions),\n    scheduleCallback$1(NormalPriority$1, function () {\n      flushPassiveEffects(!0);\n      return null;\n    }));\n  transitions = 0 !== (finishedWork.flags & 15990);\n  0 !== (finishedWork.subtreeFlags & 15990) || transitions\n    ? ((transitions = ReactSharedInternals.T),\n      (ReactSharedInternals.T = null),\n      (spawnedLane = ReactDOMSharedInternals.p),\n      (ReactDOMSharedInternals.p = 2),\n      (updatedLanes = executionContext),\n      (executionContext |= 4),\n      commitBeforeMutationEffects(root, finishedWork),\n      commitMutationEffectsOnFiber(finishedWork, root),\n      restoreSelection(selectionInformation, root.containerInfo),\n      (_enabled = !!eventsEnabled),\n      (selectionInformation = eventsEnabled = null),\n      (root.current = finishedWork),\n      commitLayoutEffectOnFiber(root, finishedWork.alternate, finishedWork),\n      requestPaint(),\n      (executionContext = updatedLanes),\n      (ReactDOMSharedInternals.p = spawnedLane),\n      (ReactSharedInternals.T = transitions))\n    : (root.current = finishedWork);\n  rootDoesHavePassiveEffects\n    ? ((rootDoesHavePassiveEffects = !1),\n      (rootWithPendingPassiveEffects = root),\n      (pendingPassiveEffectsLanes = didIncludeRenderPhaseUpdate))\n    : releaseRootPooledCache(root, remainingLanes);\n  remainingLanes = root.pendingLanes;\n  0 === remainingLanes && (legacyErrorBoundariesThatAlreadyFailed = null);\n  onCommitRoot(finishedWork.stateNode, renderPriorityLevel);\n  ensureRootIsScheduled(root);\n  if (null !== recoverableErrors)\n    for (\n      renderPriorityLevel = root.onRecoverableError, finishedWork = 0;\n      finishedWork < recoverableErrors.length;\n      finishedWork++\n    )\n      (remainingLanes = recoverableErrors[finishedWork]),\n        renderPriorityLevel(remainingLanes.value, {\n          componentStack: remainingLanes.stack\n        });\n  0 !== (pendingPassiveEffectsLanes & 3) && flushPassiveEffects();\n  remainingLanes = root.pendingLanes;\n  0 !== (didIncludeRenderPhaseUpdate & 4194218) && 0 !== (remainingLanes & 42)\n    ? root === rootWithNestedUpdates\n      ? nestedUpdateCount++\n      : ((nestedUpdateCount = 0), (rootWithNestedUpdates = root))\n    : (nestedUpdateCount = 0);\n  flushSyncWorkAcrossRoots_impl(0, !1);\n  return null;\n}\nfunction releaseRootPooledCache(root, remainingLanes) {\n  0 === (root.pooledCacheLanes &= remainingLanes) &&\n    ((remainingLanes = root.pooledCache),\n    null != remainingLanes &&\n      ((root.pooledCache = null), releaseCache(remainingLanes)));\n}\nfunction flushPassiveEffects() {\n  if (null !== rootWithPendingPassiveEffects) {\n    var root$170 = rootWithPendingPassiveEffects,\n      remainingLanes = pendingPassiveEffectsRemainingLanes;\n    pendingPassiveEffectsRemainingLanes = 0;\n    var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes),\n      prevTransition = ReactSharedInternals.T,\n      previousPriority = ReactDOMSharedInternals.p;\n    try {\n      ReactDOMSharedInternals.p = 32 > renderPriority ? 32 : renderPriority;\n      ReactSharedInternals.T = null;\n      if (null === rootWithPendingPassiveEffects)\n        var JSCompiler_inline_result = !1;\n      else {\n        renderPriority = pendingPassiveTransitions;\n        pendingPassiveTransitions = null;\n        var root = rootWithPendingPassiveEffects,\n          lanes = pendingPassiveEffectsLanes;\n        rootWithPendingPassiveEffects = null;\n        pendingPassiveEffectsLanes = 0;\n        if (0 !== (executionContext & 6))\n          throw Error(formatProdErrorMessage(331));\n        var prevExecutionContext = executionContext;\n        executionContext |= 4;\n        commitPassiveUnmountOnFiber(root.current);\n        commitPassiveMountOnFiber(root, root.current, lanes, renderPriority);\n        executionContext = prevExecutionContext;\n        flushSyncWorkAcrossRoots_impl(0, !1);\n        if (\n          injectedHook &&\n          \"function\" === typeof injectedHook.onPostCommitFiberRoot\n        )\n          try {\n            injectedHook.onPostCommitFiberRoot(rendererID, root);\n          } catch (err) {}\n        JSCompiler_inline_result = !0;\n      }\n      return JSCompiler_inline_result;\n    } finally {\n      (ReactDOMSharedInternals.p = previousPriority),\n        (ReactSharedInternals.T = prevTransition),\n        releaseRootPooledCache(root$170, remainingLanes);\n    }\n  }\n  return !1;\n}\nfunction captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {\n  sourceFiber = createCapturedValueAtFiber(error, sourceFiber);\n  sourceFiber = createRootErrorUpdate(rootFiber.stateNode, sourceFiber, 2);\n  rootFiber = enqueueUpdate(rootFiber, sourceFiber, 2);\n  null !== rootFiber &&\n    (markRootUpdated$1(rootFiber, 2), ensureRootIsScheduled(rootFiber));\n}\nfunction captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error) {\n  if (3 === sourceFiber.tag)\n    captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);\n  else\n    for (; null !== nearestMountedAncestor; ) {\n      if (3 === nearestMountedAncestor.tag) {\n        captureCommitPhaseErrorOnRoot(\n          nearestMountedAncestor,\n          sourceFiber,\n          error\n        );\n        break;\n      } else if (1 === nearestMountedAncestor.tag) {\n        var instance = nearestMountedAncestor.stateNode;\n        if (\n          \"function\" ===\n            typeof nearestMountedAncestor.type.getDerivedStateFromError ||\n          (\"function\" === typeof instance.componentDidCatch &&\n            (null === legacyErrorBoundariesThatAlreadyFailed ||\n              !legacyErrorBoundariesThatAlreadyFailed.has(instance)))\n        ) {\n          sourceFiber = createCapturedValueAtFiber(error, sourceFiber);\n          error = createClassErrorUpdate(2);\n          instance = enqueueUpdate(nearestMountedAncestor, error, 2);\n          null !== instance &&\n            (initializeClassErrorUpdate(\n              error,\n              instance,\n              nearestMountedAncestor,\n              sourceFiber\n            ),\n            markRootUpdated$1(instance, 2),\n            ensureRootIsScheduled(instance));\n          break;\n        }\n      }\n      nearestMountedAncestor = nearestMountedAncestor.return;\n    }\n}\nfunction attachPingListener(root, wakeable, lanes) {\n  var pingCache = root.pingCache;\n  if (null === pingCache) {\n    pingCache = root.pingCache = new PossiblyWeakMap();\n    var threadIDs = new Set();\n    pingCache.set(wakeable, threadIDs);\n  } else\n    (threadIDs = pingCache.get(wakeable)),\n      void 0 === threadIDs &&\n        ((threadIDs = new Set()), pingCache.set(wakeable, threadIDs));\n  threadIDs.has(lanes) ||\n    ((workInProgressRootDidAttachPingListener = !0),\n    threadIDs.add(lanes),\n    (root = pingSuspendedRoot.bind(null, root, wakeable, lanes)),\n    wakeable.then(root, root));\n}\nfunction pingSuspendedRoot(root, wakeable, pingedLanes) {\n  var pingCache = root.pingCache;\n  null !== pingCache && pingCache.delete(wakeable);\n  root.pingedLanes |= root.suspendedLanes & pingedLanes;\n  root.warmLanes &= ~pingedLanes;\n  workInProgressRoot === root &&\n    (workInProgressRootRenderLanes & pingedLanes) === pingedLanes &&\n    (4 === workInProgressRootExitStatus ||\n    (3 === workInProgressRootExitStatus &&\n      (workInProgressRootRenderLanes & 62914560) ===\n        workInProgressRootRenderLanes &&\n      300 > now() - globalMostRecentFallbackTime)\n      ? 0 === (executionContext & 2) && prepareFreshStack(root, 0)\n      : (workInProgressRootPingedLanes |= pingedLanes),\n    workInProgressSuspendedRetryLanes === workInProgressRootRenderLanes &&\n      (workInProgressSuspendedRetryLanes = 0));\n  ensureRootIsScheduled(root);\n}\nfunction retryTimedOutBoundary(boundaryFiber, retryLane) {\n  0 === retryLane && (retryLane = claimNextRetryLane());\n  boundaryFiber = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);\n  null !== boundaryFiber &&\n    (markRootUpdated$1(boundaryFiber, retryLane),\n    ensureRootIsScheduled(boundaryFiber));\n}\nfunction retryDehydratedSuspenseBoundary(boundaryFiber) {\n  var suspenseState = boundaryFiber.memoizedState,\n    retryLane = 0;\n  null !== suspenseState && (retryLane = suspenseState.retryLane);\n  retryTimedOutBoundary(boundaryFiber, retryLane);\n}\nfunction resolveRetryWakeable(boundaryFiber, wakeable) {\n  var retryLane = 0;\n  switch (boundaryFiber.tag) {\n    case 13:\n      var retryCache = boundaryFiber.stateNode;\n      var suspenseState = boundaryFiber.memoizedState;\n      null !== suspenseState && (retryLane = suspenseState.retryLane);\n      break;\n    case 19:\n      retryCache = boundaryFiber.stateNode;\n      break;\n    case 22:\n      retryCache = boundaryFiber.stateNode._retryCache;\n      break;\n    default:\n      throw Error(formatProdErrorMessage(314));\n  }\n  null !== retryCache && retryCache.delete(wakeable);\n  retryTimedOutBoundary(boundaryFiber, retryLane);\n}\nfunction scheduleCallback$1(priorityLevel, callback) {\n  return scheduleCallback$3(priorityLevel, callback);\n}\nvar firstScheduledRoot = null,\n  lastScheduledRoot = null,\n  didScheduleMicrotask = !1,\n  mightHavePendingSyncWork = !1,\n  isFlushingWork = !1,\n  currentEventTransitionLane = 0;\nfunction ensureRootIsScheduled(root) {\n  root !== lastScheduledRoot &&\n    null === root.next &&\n    (null === lastScheduledRoot\n      ? (firstScheduledRoot = lastScheduledRoot = root)\n      : (lastScheduledRoot = lastScheduledRoot.next = root));\n  mightHavePendingSyncWork = !0;\n  didScheduleMicrotask ||\n    ((didScheduleMicrotask = !0),\n    scheduleImmediateTask(processRootScheduleInMicrotask));\n}\nfunction flushSyncWorkAcrossRoots_impl(syncTransitionLanes, onlyLegacy) {\n  if (!isFlushingWork && mightHavePendingSyncWork) {\n    isFlushingWork = !0;\n    do {\n      var didPerformSomeWork = !1;\n      for (var root$172 = firstScheduledRoot; null !== root$172; ) {\n        if (!onlyLegacy)\n          if (0 !== syncTransitionLanes) {\n            var pendingLanes = root$172.pendingLanes;\n            if (0 === pendingLanes) var JSCompiler_inline_result = 0;\n            else {\n              var suspendedLanes = root$172.suspendedLanes,\n                pingedLanes = root$172.pingedLanes;\n              JSCompiler_inline_result =\n                (1 << (31 - clz32(42 | syncTransitionLanes) + 1)) - 1;\n              JSCompiler_inline_result &=\n                pendingLanes & ~(suspendedLanes & ~pingedLanes);\n              JSCompiler_inline_result =\n                JSCompiler_inline_result & 201326677\n                  ? (JSCompiler_inline_result & 201326677) | 1\n                  : JSCompiler_inline_result\n                    ? JSCompiler_inline_result | 2\n                    : 0;\n            }\n            0 !== JSCompiler_inline_result &&\n              ((didPerformSomeWork = !0),\n              performSyncWorkOnRoot(root$172, JSCompiler_inline_result));\n          } else\n            (JSCompiler_inline_result = workInProgressRootRenderLanes),\n              (JSCompiler_inline_result = getNextLanes(\n                root$172,\n                root$172 === workInProgressRoot ? JSCompiler_inline_result : 0\n              )),\n              0 === (JSCompiler_inline_result & 3) ||\n                checkIfRootIsPrerendering(root$172, JSCompiler_inline_result) ||\n                ((didPerformSomeWork = !0),\n                performSyncWorkOnRoot(root$172, JSCompiler_inline_result));\n        root$172 = root$172.next;\n      }\n    } while (didPerformSomeWork);\n    isFlushingWork = !1;\n  }\n}\nfunction processRootScheduleInMicrotask() {\n  mightHavePendingSyncWork = didScheduleMicrotask = !1;\n  var syncTransitionLanes = 0;\n  0 !== currentEventTransitionLane &&\n    (shouldAttemptEagerTransition() &&\n      (syncTransitionLanes = currentEventTransitionLane),\n    (currentEventTransitionLane = 0));\n  for (\n    var currentTime = now(), prev = null, root = firstScheduledRoot;\n    null !== root;\n\n  ) {\n    var next = root.next,\n      nextLanes = scheduleTaskForRootDuringMicrotask(root, currentTime);\n    if (0 === nextLanes)\n      (root.next = null),\n        null === prev ? (firstScheduledRoot = next) : (prev.next = next),\n        null === next && (lastScheduledRoot = prev);\n    else if (\n      ((prev = root), 0 !== syncTransitionLanes || 0 !== (nextLanes & 3))\n    )\n      mightHavePendingSyncWork = !0;\n    root = next;\n  }\n  flushSyncWorkAcrossRoots_impl(syncTransitionLanes, !1);\n}\nfunction scheduleTaskForRootDuringMicrotask(root, currentTime) {\n  for (\n    var suspendedLanes = root.suspendedLanes,\n      pingedLanes = root.pingedLanes,\n      expirationTimes = root.expirationTimes,\n      lanes = root.pendingLanes & -62914561;\n    0 < lanes;\n\n  ) {\n    var index$5 = 31 - clz32(lanes),\n      lane = 1 << index$5,\n      expirationTime = expirationTimes[index$5];\n    if (-1 === expirationTime) {\n      if (0 === (lane & suspendedLanes) || 0 !== (lane & pingedLanes))\n        expirationTimes[index$5] = computeExpirationTime(lane, currentTime);\n    } else expirationTime <= currentTime && (root.expiredLanes |= lane);\n    lanes &= ~lane;\n  }\n  currentTime = workInProgressRoot;\n  suspendedLanes = workInProgressRootRenderLanes;\n  suspendedLanes = getNextLanes(\n    root,\n    root === currentTime ? suspendedLanes : 0\n  );\n  pingedLanes = root.callbackNode;\n  if (\n    0 === suspendedLanes ||\n    (root === currentTime && 2 === workInProgressSuspendedReason) ||\n    null !== root.cancelPendingCommit\n  )\n    return (\n      null !== pingedLanes &&\n        null !== pingedLanes &&\n        cancelCallback$1(pingedLanes),\n      (root.callbackNode = null),\n      (root.callbackPriority = 0)\n    );\n  if (\n    0 === (suspendedLanes & 3) ||\n    checkIfRootIsPrerendering(root, suspendedLanes)\n  ) {\n    currentTime = suspendedLanes & -suspendedLanes;\n    if (currentTime === root.callbackPriority) return currentTime;\n    null !== pingedLanes && cancelCallback$1(pingedLanes);\n    switch (lanesToEventPriority(suspendedLanes)) {\n      case 2:\n      case 8:\n        suspendedLanes = UserBlockingPriority;\n        break;\n      case 32:\n        suspendedLanes = NormalPriority$1;\n        break;\n      case 268435456:\n        suspendedLanes = IdlePriority;\n        break;\n      default:\n        suspendedLanes = NormalPriority$1;\n    }\n    pingedLanes = performWorkOnRootViaSchedulerTask.bind(null, root);\n    suspendedLanes = scheduleCallback$3(suspendedLanes, pingedLanes);\n    root.callbackPriority = currentTime;\n    root.callbackNode = suspendedLanes;\n    return currentTime;\n  }\n  null !== pingedLanes && null !== pingedLanes && cancelCallback$1(pingedLanes);\n  root.callbackPriority = 2;\n  root.callbackNode = null;\n  return 2;\n}\nfunction performWorkOnRootViaSchedulerTask(root, didTimeout) {\n  var originalCallbackNode = root.callbackNode;\n  if (flushPassiveEffects() && root.callbackNode !== originalCallbackNode)\n    return null;\n  var workInProgressRootRenderLanes$jscomp$0 = workInProgressRootRenderLanes;\n  workInProgressRootRenderLanes$jscomp$0 = getNextLanes(\n    root,\n    root === workInProgressRoot ? workInProgressRootRenderLanes$jscomp$0 : 0\n  );\n  if (0 === workInProgressRootRenderLanes$jscomp$0) return null;\n  performWorkOnRoot(root, workInProgressRootRenderLanes$jscomp$0, didTimeout);\n  scheduleTaskForRootDuringMicrotask(root, now());\n  return null != root.callbackNode && root.callbackNode === originalCallbackNode\n    ? performWorkOnRootViaSchedulerTask.bind(null, root)\n    : null;\n}\nfunction performSyncWorkOnRoot(root, lanes) {\n  if (flushPassiveEffects()) return null;\n  performWorkOnRoot(root, lanes, !0);\n}\nfunction scheduleImmediateTask(cb) {\n  scheduleMicrotask(function () {\n    0 !== (executionContext & 6)\n      ? scheduleCallback$3(ImmediatePriority, cb)\n      : cb();\n  });\n}\nfunction requestTransitionLane() {\n  0 === currentEventTransitionLane &&\n    (currentEventTransitionLane = claimNextTransitionLane());\n  return currentEventTransitionLane;\n}\nfunction coerceFormActionProp(actionProp) {\n  return null == actionProp ||\n    \"symbol\" === typeof actionProp ||\n    \"boolean\" === typeof actionProp\n    ? null\n    : \"function\" === typeof actionProp\n      ? actionProp\n      : sanitizeURL(\"\" + actionProp);\n}\nfunction createFormDataWithSubmitter(form, submitter) {\n  var temp = submitter.ownerDocument.createElement(\"input\");\n  temp.name = submitter.name;\n  temp.value = submitter.value;\n  form.id && temp.setAttribute(\"form\", form.id);\n  submitter.parentNode.insertBefore(temp, submitter);\n  form = new FormData(form);\n  temp.parentNode.removeChild(temp);\n  return form;\n}\nfunction extractEvents$1(\n  dispatchQueue,\n  domEventName,\n  maybeTargetInst,\n  nativeEvent,\n  nativeEventTarget\n) {\n  if (\n    \"submit\" === domEventName &&\n    maybeTargetInst &&\n    maybeTargetInst.stateNode === nativeEventTarget\n  ) {\n    var action = coerceFormActionProp(\n        (nativeEventTarget[internalPropsKey] || null).action\n      ),\n      submitter = nativeEvent.submitter;\n    submitter &&\n      ((domEventName = (domEventName = submitter[internalPropsKey] || null)\n        ? coerceFormActionProp(domEventName.formAction)\n        : submitter.getAttribute(\"formAction\")),\n      null !== domEventName && ((action = domEventName), (submitter = null)));\n    var event = new SyntheticEvent(\n      \"action\",\n      \"action\",\n      null,\n      nativeEvent,\n      nativeEventTarget\n    );\n    dispatchQueue.push({\n      event: event,\n      listeners: [\n        {\n          instance: null,\n          listener: function () {\n            if (nativeEvent.defaultPrevented) {\n              if (0 !== currentEventTransitionLane) {\n                var formData = submitter\n                  ? createFormDataWithSubmitter(nativeEventTarget, submitter)\n                  : new FormData(nativeEventTarget);\n                startHostTransition(\n                  maybeTargetInst,\n                  {\n                    pending: !0,\n                    data: formData,\n                    method: nativeEventTarget.method,\n                    action: action\n                  },\n                  null,\n                  formData\n                );\n              }\n            } else\n              \"function\" === typeof action &&\n                (event.preventDefault(),\n                (formData = submitter\n                  ? createFormDataWithSubmitter(nativeEventTarget, submitter)\n                  : new FormData(nativeEventTarget)),\n                startHostTransition(\n                  maybeTargetInst,\n                  {\n                    pending: !0,\n                    data: formData,\n                    method: nativeEventTarget.method,\n                    action: action\n                  },\n                  action,\n                  formData\n                ));\n          },\n          currentTarget: nativeEventTarget\n        }\n      ]\n    });\n  }\n}\nfor (\n  var i$jscomp$inline_1439 = 0;\n  i$jscomp$inline_1439 < simpleEventPluginEvents.length;\n  i$jscomp$inline_1439++\n) {\n  var eventName$jscomp$inline_1440 =\n      simpleEventPluginEvents[i$jscomp$inline_1439],\n    domEventName$jscomp$inline_1441 =\n      eventName$jscomp$inline_1440.toLowerCase(),\n    capitalizedEvent$jscomp$inline_1442 =\n      eventName$jscomp$inline_1440[0].toUpperCase() +\n      eventName$jscomp$inline_1440.slice(1);\n  registerSimpleEvent(\n    domEventName$jscomp$inline_1441,\n    \"on\" + capitalizedEvent$jscomp$inline_1442\n  );\n}\nregisterSimpleEvent(ANIMATION_END, \"onAnimationEnd\");\nregisterSimpleEvent(ANIMATION_ITERATION, \"onAnimationIteration\");\nregisterSimpleEvent(ANIMATION_START, \"onAnimationStart\");\nregisterSimpleEvent(\"dblclick\", \"onDoubleClick\");\nregisterSimpleEvent(\"focusin\", \"onFocus\");\nregisterSimpleEvent(\"focusout\", \"onBlur\");\nregisterSimpleEvent(TRANSITION_RUN, \"onTransitionRun\");\nregisterSimpleEvent(TRANSITION_START, \"onTransitionStart\");\nregisterSimpleEvent(TRANSITION_CANCEL, \"onTransitionCancel\");\nregisterSimpleEvent(TRANSITION_END, \"onTransitionEnd\");\nregisterDirectEvent(\"onMouseEnter\", [\"mouseout\", \"mouseover\"]);\nregisterDirectEvent(\"onMouseLeave\", [\"mouseout\", \"mouseover\"]);\nregisterDirectEvent(\"onPointerEnter\", [\"pointerout\", \"pointerover\"]);\nregisterDirectEvent(\"onPointerLeave\", [\"pointerout\", \"pointerover\"]);\nregisterTwoPhaseEvent(\n  \"onChange\",\n  \"change click focusin focusout input keydown keyup selectionchange\".split(\" \")\n);\nregisterTwoPhaseEvent(\n  \"onSelect\",\n  \"focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange\".split(\n    \" \"\n  )\n);\nregisterTwoPhaseEvent(\"onBeforeInput\", [\n  \"compositionend\",\n  \"keypress\",\n  \"textInput\",\n  \"paste\"\n]);\nregisterTwoPhaseEvent(\n  \"onCompositionEnd\",\n  \"compositionend focusout keydown keypress keyup mousedown\".split(\" \")\n);\nregisterTwoPhaseEvent(\n  \"onCompositionStart\",\n  \"compositionstart focusout keydown keypress keyup mousedown\".split(\" \")\n);\nregisterTwoPhaseEvent(\n  \"onCompositionUpdate\",\n  \"compositionupdate focusout keydown keypress keyup mousedown\".split(\" \")\n);\nvar mediaEventTypes =\n    \"abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting\".split(\n      \" \"\n    ),\n  nonDelegatedEvents = new Set(\n    \"beforetoggle cancel close invalid load scroll scrollend toggle\"\n      .split(\" \")\n      .concat(mediaEventTypes)\n  );\nfunction processDispatchQueue(dispatchQueue, eventSystemFlags) {\n  eventSystemFlags = 0 !== (eventSystemFlags & 4);\n  for (var i = 0; i < dispatchQueue.length; i++) {\n    var _dispatchQueue$i = dispatchQueue[i],\n      event = _dispatchQueue$i.event;\n    _dispatchQueue$i = _dispatchQueue$i.listeners;\n    a: {\n      var previousInstance = void 0;\n      if (eventSystemFlags)\n        for (\n          var i$jscomp$0 = _dispatchQueue$i.length - 1;\n          0 <= i$jscomp$0;\n          i$jscomp$0--\n        ) {\n          var _dispatchListeners$i = _dispatchQueue$i[i$jscomp$0],\n            instance = _dispatchListeners$i.instance,\n            currentTarget = _dispatchListeners$i.currentTarget;\n          _dispatchListeners$i = _dispatchListeners$i.listener;\n          if (instance !== previousInstance && event.isPropagationStopped())\n            break a;\n          previousInstance = _dispatchListeners$i;\n          event.currentTarget = currentTarget;\n          try {\n            previousInstance(event);\n          } catch (error) {\n            reportGlobalError(error);\n          }\n          event.currentTarget = null;\n          previousInstance = instance;\n        }\n      else\n        for (\n          i$jscomp$0 = 0;\n          i$jscomp$0 < _dispatchQueue$i.length;\n          i$jscomp$0++\n        ) {\n          _dispatchListeners$i = _dispatchQueue$i[i$jscomp$0];\n          instance = _dispatchListeners$i.instance;\n          currentTarget = _dispatchListeners$i.currentTarget;\n          _dispatchListeners$i = _dispatchListeners$i.listener;\n          if (instance !== previousInstance && event.isPropagationStopped())\n            break a;\n          previousInstance = _dispatchListeners$i;\n          event.currentTarget = currentTarget;\n          try {\n            previousInstance(event);\n          } catch (error) {\n            reportGlobalError(error);\n          }\n          event.currentTarget = null;\n          previousInstance = instance;\n        }\n    }\n  }\n}\nfunction listenToNonDelegatedEvent(domEventName, targetElement) {\n  var JSCompiler_inline_result = targetElement[internalEventHandlersKey];\n  void 0 === JSCompiler_inline_result &&\n    (JSCompiler_inline_result = targetElement[internalEventHandlersKey] =\n      new Set());\n  var listenerSetKey = domEventName + \"__bubble\";\n  JSCompiler_inline_result.has(listenerSetKey) ||\n    (addTrappedEventListener(targetElement, domEventName, 2, !1),\n    JSCompiler_inline_result.add(listenerSetKey));\n}\nfunction listenToNativeEvent(domEventName, isCapturePhaseListener, target) {\n  var eventSystemFlags = 0;\n  isCapturePhaseListener && (eventSystemFlags |= 4);\n  addTrappedEventListener(\n    target,\n    domEventName,\n    eventSystemFlags,\n    isCapturePhaseListener\n  );\n}\nvar listeningMarker = \"_reactListening\" + Math.random().toString(36).slice(2);\nfunction listenToAllSupportedEvents(rootContainerElement) {\n  if (!rootContainerElement[listeningMarker]) {\n    rootContainerElement[listeningMarker] = !0;\n    allNativeEvents.forEach(function (domEventName) {\n      \"selectionchange\" !== domEventName &&\n        (nonDelegatedEvents.has(domEventName) ||\n          listenToNativeEvent(domEventName, !1, rootContainerElement),\n        listenToNativeEvent(domEventName, !0, rootContainerElement));\n    });\n    var ownerDocument =\n      9 === rootContainerElement.nodeType\n        ? rootContainerElement\n        : rootContainerElement.ownerDocument;\n    null === ownerDocument ||\n      ownerDocument[listeningMarker] ||\n      ((ownerDocument[listeningMarker] = !0),\n      listenToNativeEvent(\"selectionchange\", !1, ownerDocument));\n  }\n}\nfunction addTrappedEventListener(\n  targetContainer,\n  domEventName,\n  eventSystemFlags,\n  isCapturePhaseListener\n) {\n  switch (getEventPriority(domEventName)) {\n    case 2:\n      var listenerWrapper = dispatchDiscreteEvent;\n      break;\n    case 8:\n      listenerWrapper = dispatchContinuousEvent;\n      break;\n    default:\n      listenerWrapper = dispatchEvent;\n  }\n  eventSystemFlags = listenerWrapper.bind(\n    null,\n    domEventName,\n    eventSystemFlags,\n    targetContainer\n  );\n  listenerWrapper = void 0;\n  !passiveBrowserEventsSupported ||\n    (\"touchstart\" !== domEventName &&\n      \"touchmove\" !== domEventName &&\n      \"wheel\" !== domEventName) ||\n    (listenerWrapper = !0);\n  isCapturePhaseListener\n    ? void 0 !== listenerWrapper\n      ? targetContainer.addEventListener(domEventName, eventSystemFlags, {\n          capture: !0,\n          passive: listenerWrapper\n        })\n      : targetContainer.addEventListener(domEventName, eventSystemFlags, !0)\n    : void 0 !== listenerWrapper\n      ? targetContainer.addEventListener(domEventName, eventSystemFlags, {\n          passive: listenerWrapper\n        })\n      : targetContainer.addEventListener(domEventName, eventSystemFlags, !1);\n}\nfunction dispatchEventForPluginEventSystem(\n  domEventName,\n  eventSystemFlags,\n  nativeEvent,\n  targetInst$jscomp$0,\n  targetContainer\n) {\n  var ancestorInst = targetInst$jscomp$0;\n  if (\n    0 === (eventSystemFlags & 1) &&\n    0 === (eventSystemFlags & 2) &&\n    null !== targetInst$jscomp$0\n  )\n    a: for (;;) {\n      if (null === targetInst$jscomp$0) return;\n      var nodeTag = targetInst$jscomp$0.tag;\n      if (3 === nodeTag || 4 === nodeTag) {\n        var container = targetInst$jscomp$0.stateNode.containerInfo;\n        if (\n          container === targetContainer ||\n          (8 === container.nodeType && container.parentNode === targetContainer)\n        )\n          break;\n        if (4 === nodeTag)\n          for (nodeTag = targetInst$jscomp$0.return; null !== nodeTag; ) {\n            var grandTag = nodeTag.tag;\n            if (3 === grandTag || 4 === grandTag)\n              if (\n                ((grandTag = nodeTag.stateNode.containerInfo),\n                grandTag === targetContainer ||\n                  (8 === grandTag.nodeType &&\n                    grandTag.parentNode === targetContainer))\n              )\n                return;\n            nodeTag = nodeTag.return;\n          }\n        for (; null !== container; ) {\n          nodeTag = getClosestInstanceFromNode(container);\n          if (null === nodeTag) return;\n          grandTag = nodeTag.tag;\n          if (\n            5 === grandTag ||\n            6 === grandTag ||\n            26 === grandTag ||\n            27 === grandTag\n          ) {\n            targetInst$jscomp$0 = ancestorInst = nodeTag;\n            continue a;\n          }\n          container = container.parentNode;\n        }\n      }\n      targetInst$jscomp$0 = targetInst$jscomp$0.return;\n    }\n  batchedUpdates$1(function () {\n    var targetInst = ancestorInst,\n      nativeEventTarget = getEventTarget(nativeEvent),\n      dispatchQueue = [];\n    a: {\n      var reactName = topLevelEventsToReactNames.get(domEventName);\n      if (void 0 !== reactName) {\n        var SyntheticEventCtor = SyntheticEvent,\n          reactEventType = domEventName;\n        switch (domEventName) {\n          case \"keypress\":\n            if (0 === getEventCharCode(nativeEvent)) break a;\n          case \"keydown\":\n          case \"keyup\":\n            SyntheticEventCtor = SyntheticKeyboardEvent;\n            break;\n          case \"focusin\":\n            reactEventType = \"focus\";\n            SyntheticEventCtor = SyntheticFocusEvent;\n            break;\n          case \"focusout\":\n            reactEventType = \"blur\";\n            SyntheticEventCtor = SyntheticFocusEvent;\n            break;\n          case \"beforeblur\":\n          case \"afterblur\":\n            SyntheticEventCtor = SyntheticFocusEvent;\n            break;\n          case \"click\":\n            if (2 === nativeEvent.button) break a;\n          case \"auxclick\":\n          case \"dblclick\":\n          case \"mousedown\":\n          case \"mousemove\":\n          case \"mouseup\":\n          case \"mouseout\":\n          case \"mouseover\":\n          case \"contextmenu\":\n            SyntheticEventCtor = SyntheticMouseEvent;\n            break;\n          case \"drag\":\n          case \"dragend\":\n          case \"dragenter\":\n          case \"dragexit\":\n          case \"dragleave\":\n          case \"dragover\":\n          case \"dragstart\":\n          case \"drop\":\n            SyntheticEventCtor = SyntheticDragEvent;\n            break;\n          case \"touchcancel\":\n          case \"touchend\":\n          case \"touchmove\":\n          case \"touchstart\":\n            SyntheticEventCtor = SyntheticTouchEvent;\n            break;\n          case ANIMATION_END:\n          case ANIMATION_ITERATION:\n          case ANIMATION_START:\n            SyntheticEventCtor = SyntheticAnimationEvent;\n            break;\n          case TRANSITION_END:\n            SyntheticEventCtor = SyntheticTransitionEvent;\n            break;\n          case \"scroll\":\n          case \"scrollend\":\n            SyntheticEventCtor = SyntheticUIEvent;\n            break;\n          case \"wheel\":\n            SyntheticEventCtor = SyntheticWheelEvent;\n            break;\n          case \"copy\":\n          case \"cut\":\n          case \"paste\":\n            SyntheticEventCtor = SyntheticClipboardEvent;\n            break;\n          case \"gotpointercapture\":\n          case \"lostpointercapture\":\n          case \"pointercancel\":\n          case \"pointerdown\":\n          case \"pointermove\":\n          case \"pointerout\":\n          case \"pointerover\":\n          case \"pointerup\":\n            SyntheticEventCtor = SyntheticPointerEvent;\n            break;\n          case \"toggle\":\n          case \"beforetoggle\":\n            SyntheticEventCtor = SyntheticToggleEvent;\n        }\n        var inCapturePhase = 0 !== (eventSystemFlags & 4),\n          accumulateTargetOnly =\n            !inCapturePhase &&\n            (\"scroll\" === domEventName || \"scrollend\" === domEventName),\n          reactEventName = inCapturePhase\n            ? null !== reactName\n              ? reactName + \"Capture\"\n              : null\n            : reactName;\n        inCapturePhase = [];\n        for (\n          var instance = targetInst, lastHostComponent;\n          null !== instance;\n\n        ) {\n          var _instance = instance;\n          lastHostComponent = _instance.stateNode;\n          _instance = _instance.tag;\n          (5 !== _instance && 26 !== _instance && 27 !== _instance) ||\n            null === lastHostComponent ||\n            null === reactEventName ||\n            ((_instance = getListener(instance, reactEventName)),\n            null != _instance &&\n              inCapturePhase.push(\n                createDispatchListener(instance, _instance, lastHostComponent)\n              ));\n          if (accumulateTargetOnly) break;\n          instance = instance.return;\n        }\n        0 < inCapturePhase.length &&\n          ((reactName = new SyntheticEventCtor(\n            reactName,\n            reactEventType,\n            null,\n            nativeEvent,\n            nativeEventTarget\n          )),\n          dispatchQueue.push({ event: reactName, listeners: inCapturePhase }));\n      }\n    }\n    if (0 === (eventSystemFlags & 7)) {\n      a: {\n        reactName =\n          \"mouseover\" === domEventName || \"pointerover\" === domEventName;\n        SyntheticEventCtor =\n          \"mouseout\" === domEventName || \"pointerout\" === domEventName;\n        if (\n          reactName &&\n          nativeEvent !== currentReplayingEvent &&\n          (reactEventType =\n            nativeEvent.relatedTarget || nativeEvent.fromElement) &&\n          (getClosestInstanceFromNode(reactEventType) ||\n            reactEventType[internalContainerInstanceKey])\n        )\n          break a;\n        if (SyntheticEventCtor || reactName) {\n          reactName =\n            nativeEventTarget.window === nativeEventTarget\n              ? nativeEventTarget\n              : (reactName = nativeEventTarget.ownerDocument)\n                ? reactName.defaultView || reactName.parentWindow\n                : window;\n          if (SyntheticEventCtor) {\n            if (\n              ((reactEventType =\n                nativeEvent.relatedTarget || nativeEvent.toElement),\n              (SyntheticEventCtor = targetInst),\n              (reactEventType = reactEventType\n                ? getClosestInstanceFromNode(reactEventType)\n                : null),\n              null !== reactEventType &&\n                ((accumulateTargetOnly =\n                  getNearestMountedFiber(reactEventType)),\n                (inCapturePhase = reactEventType.tag),\n                reactEventType !== accumulateTargetOnly ||\n                  (5 !== inCapturePhase &&\n                    27 !== inCapturePhase &&\n                    6 !== inCapturePhase)))\n            )\n              reactEventType = null;\n          } else (SyntheticEventCtor = null), (reactEventType = targetInst);\n          if (SyntheticEventCtor !== reactEventType) {\n            inCapturePhase = SyntheticMouseEvent;\n            _instance = \"onMouseLeave\";\n            reactEventName = \"onMouseEnter\";\n            instance = \"mouse\";\n            if (\"pointerout\" === domEventName || \"pointerover\" === domEventName)\n              (inCapturePhase = SyntheticPointerEvent),\n                (_instance = \"onPointerLeave\"),\n                (reactEventName = \"onPointerEnter\"),\n                (instance = \"pointer\");\n            accumulateTargetOnly =\n              null == SyntheticEventCtor\n                ? reactName\n                : getNodeFromInstance(SyntheticEventCtor);\n            lastHostComponent =\n              null == reactEventType\n                ? reactName\n                : getNodeFromInstance(reactEventType);\n            reactName = new inCapturePhase(\n              _instance,\n              instance + \"leave\",\n              SyntheticEventCtor,\n              nativeEvent,\n              nativeEventTarget\n            );\n            reactName.target = accumulateTargetOnly;\n            reactName.relatedTarget = lastHostComponent;\n            _instance = null;\n            getClosestInstanceFromNode(nativeEventTarget) === targetInst &&\n              ((inCapturePhase = new inCapturePhase(\n                reactEventName,\n                instance + \"enter\",\n                reactEventType,\n                nativeEvent,\n                nativeEventTarget\n              )),\n              (inCapturePhase.target = lastHostComponent),\n              (inCapturePhase.relatedTarget = accumulateTargetOnly),\n              (_instance = inCapturePhase));\n            accumulateTargetOnly = _instance;\n            if (SyntheticEventCtor && reactEventType)\n              b: {\n                inCapturePhase = SyntheticEventCtor;\n                reactEventName = reactEventType;\n                instance = 0;\n                for (\n                  lastHostComponent = inCapturePhase;\n                  lastHostComponent;\n                  lastHostComponent = getParent(lastHostComponent)\n                )\n                  instance++;\n                lastHostComponent = 0;\n                for (\n                  _instance = reactEventName;\n                  _instance;\n                  _instance = getParent(_instance)\n                )\n                  lastHostComponent++;\n                for (; 0 < instance - lastHostComponent; )\n                  (inCapturePhase = getParent(inCapturePhase)), instance--;\n                for (; 0 < lastHostComponent - instance; )\n                  (reactEventName = getParent(reactEventName)),\n                    lastHostComponent--;\n                for (; instance--; ) {\n                  if (\n                    inCapturePhase === reactEventName ||\n                    (null !== reactEventName &&\n                      inCapturePhase === reactEventName.alternate)\n                  )\n                    break b;\n                  inCapturePhase = getParent(inCapturePhase);\n                  reactEventName = getParent(reactEventName);\n                }\n                inCapturePhase = null;\n              }\n            else inCapturePhase = null;\n            null !== SyntheticEventCtor &&\n              accumulateEnterLeaveListenersForEvent(\n                dispatchQueue,\n                reactName,\n                SyntheticEventCtor,\n                inCapturePhase,\n                !1\n              );\n            null !== reactEventType &&\n              null !== accumulateTargetOnly &&\n              accumulateEnterLeaveListenersForEvent(\n                dispatchQueue,\n                accumulateTargetOnly,\n                reactEventType,\n                inCapturePhase,\n                !0\n              );\n          }\n        }\n      }\n      a: {\n        reactName = targetInst ? getNodeFromInstance(targetInst) : window;\n        SyntheticEventCtor =\n          reactName.nodeName && reactName.nodeName.toLowerCase();\n        if (\n          \"select\" === SyntheticEventCtor ||\n          (\"input\" === SyntheticEventCtor && \"file\" === reactName.type)\n        )\n          var getTargetInstFunc = getTargetInstForChangeEvent;\n        else if (isTextInputElement(reactName))\n          if (isInputEventSupported)\n            getTargetInstFunc = getTargetInstForInputOrChangeEvent;\n          else {\n            getTargetInstFunc = getTargetInstForInputEventPolyfill;\n            var handleEventFunc = handleEventsForInputEventPolyfill;\n          }\n        else\n          (SyntheticEventCtor = reactName.nodeName),\n            !SyntheticEventCtor ||\n            \"input\" !== SyntheticEventCtor.toLowerCase() ||\n            (\"checkbox\" !== reactName.type && \"radio\" !== reactName.type)\n              ? targetInst &&\n                isCustomElement(targetInst.elementType) &&\n                (getTargetInstFunc = getTargetInstForChangeEvent)\n              : (getTargetInstFunc = getTargetInstForClickEvent);\n        if (\n          getTargetInstFunc &&\n          (getTargetInstFunc = getTargetInstFunc(domEventName, targetInst))\n        ) {\n          createAndAccumulateChangeEvent(\n            dispatchQueue,\n            getTargetInstFunc,\n            nativeEvent,\n            nativeEventTarget\n          );\n          break a;\n        }\n        handleEventFunc && handleEventFunc(domEventName, reactName, targetInst);\n        \"focusout\" === domEventName &&\n          targetInst &&\n          \"number\" === reactName.type &&\n          null != targetInst.memoizedProps.value &&\n          setDefaultValue(reactName, \"number\", reactName.value);\n      }\n      handleEventFunc = targetInst ? getNodeFromInstance(targetInst) : window;\n      switch (domEventName) {\n        case \"focusin\":\n          if (\n            isTextInputElement(handleEventFunc) ||\n            \"true\" === handleEventFunc.contentEditable\n          )\n            (activeElement = handleEventFunc),\n              (activeElementInst = targetInst),\n              (lastSelection = null);\n          break;\n        case \"focusout\":\n          lastSelection = activeElementInst = activeElement = null;\n          break;\n        case \"mousedown\":\n          mouseDown = !0;\n          break;\n        case \"contextmenu\":\n        case \"mouseup\":\n        case \"dragend\":\n          mouseDown = !1;\n          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);\n          break;\n        case \"selectionchange\":\n          if (skipSelectionChangeEvent) break;\n        case \"keydown\":\n        case \"keyup\":\n          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);\n      }\n      var fallbackData;\n      if (canUseCompositionEvent)\n        b: {\n          switch (domEventName) {\n            case \"compositionstart\":\n              var eventType = \"onCompositionStart\";\n              break b;\n            case \"compositionend\":\n              eventType = \"onCompositionEnd\";\n              break b;\n            case \"compositionupdate\":\n              eventType = \"onCompositionUpdate\";\n              break b;\n          }\n          eventType = void 0;\n        }\n      else\n        isComposing\n          ? isFallbackCompositionEnd(domEventName, nativeEvent) &&\n            (eventType = \"onCompositionEnd\")\n          : \"keydown\" === domEventName &&\n            229 === nativeEvent.keyCode &&\n            (eventType = \"onCompositionStart\");\n      eventType &&\n        (useFallbackCompositionData &&\n          \"ko\" !== nativeEvent.locale &&\n          (isComposing || \"onCompositionStart\" !== eventType\n            ? \"onCompositionEnd\" === eventType &&\n              isComposing &&\n              (fallbackData = getData())\n            : ((root = nativeEventTarget),\n              (startText = \"value\" in root ? root.value : root.textContent),\n              (isComposing = !0))),\n        (handleEventFunc = accumulateTwoPhaseListeners(targetInst, eventType)),\n        0 < handleEventFunc.length &&\n          ((eventType = new SyntheticCompositionEvent(\n            eventType,\n            domEventName,\n            null,\n            nativeEvent,\n            nativeEventTarget\n          )),\n          dispatchQueue.push({ event: eventType, listeners: handleEventFunc }),\n          fallbackData\n            ? (eventType.data = fallbackData)\n            : ((fallbackData = getDataFromCustomEvent(nativeEvent)),\n              null !== fallbackData && (eventType.data = fallbackData))));\n      if (\n        (fallbackData = canUseTextInputEvent\n          ? getNativeBeforeInputChars(domEventName, nativeEvent)\n          : getFallbackBeforeInputChars(domEventName, nativeEvent))\n      )\n        (eventType = accumulateTwoPhaseListeners(targetInst, \"onBeforeInput\")),\n          0 < eventType.length &&\n            ((handleEventFunc = new SyntheticCompositionEvent(\n              \"onBeforeInput\",\n              \"beforeinput\",\n              null,\n              nativeEvent,\n              nativeEventTarget\n            )),\n            dispatchQueue.push({\n              event: handleEventFunc,\n              listeners: eventType\n            }),\n            (handleEventFunc.data = fallbackData));\n      extractEvents$1(\n        dispatchQueue,\n        domEventName,\n        targetInst,\n        nativeEvent,\n        nativeEventTarget\n      );\n    }\n    processDispatchQueue(dispatchQueue, eventSystemFlags);\n  });\n}\nfunction createDispatchListener(instance, listener, currentTarget) {\n  return {\n    instance: instance,\n    listener: listener,\n    currentTarget: currentTarget\n  };\n}\nfunction accumulateTwoPhaseListeners(targetFiber, reactName) {\n  for (\n    var captureName = reactName + \"Capture\", listeners = [];\n    null !== targetFiber;\n\n  ) {\n    var _instance2 = targetFiber,\n      stateNode = _instance2.stateNode;\n    _instance2 = _instance2.tag;\n    (5 !== _instance2 && 26 !== _instance2 && 27 !== _instance2) ||\n      null === stateNode ||\n      ((_instance2 = getListener(targetFiber, captureName)),\n      null != _instance2 &&\n        listeners.unshift(\n          createDispatchListener(targetFiber, _instance2, stateNode)\n        ),\n      (_instance2 = getListener(targetFiber, reactName)),\n      null != _instance2 &&\n        listeners.push(\n          createDispatchListener(targetFiber, _instance2, stateNode)\n        ));\n    targetFiber = targetFiber.return;\n  }\n  return listeners;\n}\nfunction getParent(inst) {\n  if (null === inst) return null;\n  do inst = inst.return;\n  while (inst && 5 !== inst.tag && 27 !== inst.tag);\n  return inst ? inst : null;\n}\nfunction accumulateEnterLeaveListenersForEvent(\n  dispatchQueue,\n  event,\n  target,\n  common,\n  inCapturePhase\n) {\n  for (\n    var registrationName = event._reactName, listeners = [];\n    null !== target && target !== common;\n\n  ) {\n    var _instance3 = target,\n      alternate = _instance3.alternate,\n      stateNode = _instance3.stateNode;\n    _instance3 = _instance3.tag;\n    if (null !== alternate && alternate === common) break;\n    (5 !== _instance3 && 26 !== _instance3 && 27 !== _instance3) ||\n      null === stateNode ||\n      ((alternate = stateNode),\n      inCapturePhase\n        ? ((stateNode = getListener(target, registrationName)),\n          null != stateNode &&\n            listeners.unshift(\n              createDispatchListener(target, stateNode, alternate)\n            ))\n        : inCapturePhase ||\n          ((stateNode = getListener(target, registrationName)),\n          null != stateNode &&\n            listeners.push(\n              createDispatchListener(target, stateNode, alternate)\n            )));\n    target = target.return;\n  }\n  0 !== listeners.length &&\n    dispatchQueue.push({ event: event, listeners: listeners });\n}\nvar NORMALIZE_NEWLINES_REGEX = /\\r\\n?/g,\n  NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\\u0000|\\uFFFD/g;\nfunction normalizeMarkupForTextOrAttribute(markup) {\n  return (\"string\" === typeof markup ? markup : \"\" + markup)\n    .replace(NORMALIZE_NEWLINES_REGEX, \"\\n\")\n    .replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, \"\");\n}\nfunction checkForUnmatchedText(serverText, clientText) {\n  clientText = normalizeMarkupForTextOrAttribute(clientText);\n  return normalizeMarkupForTextOrAttribute(serverText) === clientText ? !0 : !1;\n}\nfunction noop$1() {}\nfunction setProp(domElement, tag, key, value, props, prevValue) {\n  switch (key) {\n    case \"children\":\n      \"string\" === typeof value\n        ? \"body\" === tag ||\n          (\"textarea\" === tag && \"\" === value) ||\n          setTextContent(domElement, value)\n        : (\"number\" === typeof value || \"bigint\" === typeof value) &&\n          \"body\" !== tag &&\n          setTextContent(domElement, \"\" + value);\n      break;\n    case \"className\":\n      setValueForKnownAttribute(domElement, \"class\", value);\n      break;\n    case \"tabIndex\":\n      setValueForKnownAttribute(domElement, \"tabindex\", value);\n      break;\n    case \"dir\":\n    case \"role\":\n    case \"viewBox\":\n    case \"width\":\n    case \"height\":\n      setValueForKnownAttribute(domElement, key, value);\n      break;\n    case \"style\":\n      setValueForStyles(domElement, value, prevValue);\n      break;\n    case \"data\":\n      if (\"object\" !== tag) {\n        setValueForKnownAttribute(domElement, \"data\", value);\n        break;\n      }\n    case \"src\":\n    case \"href\":\n      if (\"\" === value && (\"a\" !== tag || \"href\" !== key)) {\n        domElement.removeAttribute(key);\n        break;\n      }\n      if (\n        null == value ||\n        \"function\" === typeof value ||\n        \"symbol\" === typeof value ||\n        \"boolean\" === typeof value\n      ) {\n        domElement.removeAttribute(key);\n        break;\n      }\n      value = sanitizeURL(\"\" + value);\n      domElement.setAttribute(key, value);\n      break;\n    case \"action\":\n    case \"formAction\":\n      if (\"function\" === typeof value) {\n        domElement.setAttribute(\n          key,\n          \"javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')\"\n        );\n        break;\n      } else\n        \"function\" === typeof prevValue &&\n          (\"formAction\" === key\n            ? (\"input\" !== tag &&\n                setProp(domElement, tag, \"name\", props.name, props, null),\n              setProp(\n                domElement,\n                tag,\n                \"formEncType\",\n                props.formEncType,\n                props,\n                null\n              ),\n              setProp(\n                domElement,\n                tag,\n                \"formMethod\",\n                props.formMethod,\n                props,\n                null\n              ),\n              setProp(\n                domElement,\n                tag,\n                \"formTarget\",\n                props.formTarget,\n                props,\n                null\n              ))\n            : (setProp(domElement, tag, \"encType\", props.encType, props, null),\n              setProp(domElement, tag, \"method\", props.method, props, null),\n              setProp(domElement, tag, \"target\", props.target, props, null)));\n      if (\n        null == value ||\n        \"symbol\" === typeof value ||\n        \"boolean\" === typeof value\n      ) {\n        domElement.removeAttribute(key);\n        break;\n      }\n      value = sanitizeURL(\"\" + value);\n      domElement.setAttribute(key, value);\n      break;\n    case \"onClick\":\n      null != value && (domElement.onclick = noop$1);\n      break;\n    case \"onScroll\":\n      null != value && listenToNonDelegatedEvent(\"scroll\", domElement);\n      break;\n    case \"onScrollEnd\":\n      null != value && listenToNonDelegatedEvent(\"scrollend\", domElement);\n      break;\n    case \"dangerouslySetInnerHTML\":\n      if (null != value) {\n        if (\"object\" !== typeof value || !(\"__html\" in value))\n          throw Error(formatProdErrorMessage(61));\n        key = value.__html;\n        if (null != key) {\n          if (null != props.children) throw Error(formatProdErrorMessage(60));\n          domElement.innerHTML = key;\n        }\n      }\n      break;\n    case \"multiple\":\n      domElement.multiple =\n        value && \"function\" !== typeof value && \"symbol\" !== typeof value;\n      break;\n    case \"muted\":\n      domElement.muted =\n        value && \"function\" !== typeof value && \"symbol\" !== typeof value;\n      break;\n    case \"suppressContentEditableWarning\":\n    case \"suppressHydrationWarning\":\n    case \"defaultValue\":\n    case \"defaultChecked\":\n    case \"innerHTML\":\n    case \"ref\":\n      break;\n    case \"autoFocus\":\n      break;\n    case \"xlinkHref\":\n      if (\n        null == value ||\n        \"function\" === typeof value ||\n        \"boolean\" === typeof value ||\n        \"symbol\" === typeof value\n      ) {\n        domElement.removeAttribute(\"xlink:href\");\n        break;\n      }\n      key = sanitizeURL(\"\" + value);\n      domElement.setAttributeNS(\n        \"http://www.w3.org/1999/xlink\",\n        \"xlink:href\",\n        key\n      );\n      break;\n    case \"contentEditable\":\n    case \"spellCheck\":\n    case \"draggable\":\n    case \"value\":\n    case \"autoReverse\":\n    case \"externalResourcesRequired\":\n    case \"focusable\":\n    case \"preserveAlpha\":\n      null != value && \"function\" !== typeof value && \"symbol\" !== typeof value\n        ? domElement.setAttribute(key, \"\" + value)\n        : domElement.removeAttribute(key);\n      break;\n    case \"inert\":\n    case \"allowFullScreen\":\n    case \"async\":\n    case \"autoPlay\":\n    case \"controls\":\n    case \"default\":\n    case \"defer\":\n    case \"disabled\":\n    case \"disablePictureInPicture\":\n    case \"disableRemotePlayback\":\n    case \"formNoValidate\":\n    case \"hidden\":\n    case \"loop\":\n    case \"noModule\":\n    case \"noValidate\":\n    case \"open\":\n    case \"playsInline\":\n    case \"readOnly\":\n    case \"required\":\n    case \"reversed\":\n    case \"scoped\":\n    case \"seamless\":\n    case \"itemScope\":\n      value && \"function\" !== typeof value && \"symbol\" !== typeof value\n        ? domElement.setAttribute(key, \"\")\n        : domElement.removeAttribute(key);\n      break;\n    case \"capture\":\n    case \"download\":\n      !0 === value\n        ? domElement.setAttribute(key, \"\")\n        : !1 !== value &&\n            null != value &&\n            \"function\" !== typeof value &&\n            \"symbol\" !== typeof value\n          ? domElement.setAttribute(key, value)\n          : domElement.removeAttribute(key);\n      break;\n    case \"cols\":\n    case \"rows\":\n    case \"size\":\n    case \"span\":\n      null != value &&\n      \"function\" !== typeof value &&\n      \"symbol\" !== typeof value &&\n      !isNaN(value) &&\n      1 <= value\n        ? domElement.setAttribute(key, value)\n        : domElement.removeAttribute(key);\n      break;\n    case \"rowSpan\":\n    case \"start\":\n      null == value ||\n      \"function\" === typeof value ||\n      \"symbol\" === typeof value ||\n      isNaN(value)\n        ? domElement.removeAttribute(key)\n        : domElement.setAttribute(key, value);\n      break;\n    case \"popover\":\n      listenToNonDelegatedEvent(\"beforetoggle\", domElement);\n      listenToNonDelegatedEvent(\"toggle\", domElement);\n      setValueForAttribute(domElement, \"popover\", value);\n      break;\n    case \"xlinkActuate\":\n      setValueForNamespacedAttribute(\n        domElement,\n        \"http://www.w3.org/1999/xlink\",\n        \"xlink:actuate\",\n        value\n      );\n      break;\n    case \"xlinkArcrole\":\n      setValueForNamespacedAttribute(\n        domElement,\n        \"http://www.w3.org/1999/xlink\",\n        \"xlink:arcrole\",\n        value\n      );\n      break;\n    case \"xlinkRole\":\n      setValueForNamespacedAttribute(\n        domElement,\n        \"http://www.w3.org/1999/xlink\",\n        \"xlink:role\",\n        value\n      );\n      break;\n    case \"xlinkShow\":\n      setValueForNamespacedAttribute(\n        domElement,\n        \"http://www.w3.org/1999/xlink\",\n        \"xlink:show\",\n        value\n      );\n      break;\n    case \"xlinkTitle\":\n      setValueForNamespacedAttribute(\n        domElement,\n        \"http://www.w3.org/1999/xlink\",\n        \"xlink:title\",\n        value\n      );\n      break;\n    case \"xlinkType\":\n      setValueForNamespacedAttribute(\n        domElement,\n        \"http://www.w3.org/1999/xlink\",\n        \"xlink:type\",\n        value\n      );\n      break;\n    case \"xmlBase\":\n      setValueForNamespacedAttribute(\n        domElement,\n        \"http://www.w3.org/XML/1998/namespace\",\n        \"xml:base\",\n        value\n      );\n      break;\n    case \"xmlLang\":\n      setValueForNamespacedAttribute(\n        domElement,\n        \"http://www.w3.org/XML/1998/namespace\",\n        \"xml:lang\",\n        value\n      );\n      break;\n    case \"xmlSpace\":\n      setValueForNamespacedAttribute(\n        domElement,\n        \"http://www.w3.org/XML/1998/namespace\",\n        \"xml:space\",\n        value\n      );\n      break;\n    case \"is\":\n      setValueForAttribute(domElement, \"is\", value);\n      break;\n    case \"innerText\":\n    case \"textContent\":\n      break;\n    default:\n      if (\n        !(2 < key.length) ||\n        (\"o\" !== key[0] && \"O\" !== key[0]) ||\n        (\"n\" !== key[1] && \"N\" !== key[1])\n      )\n        (key = aliases.get(key) || key),\n          setValueForAttribute(domElement, key, value);\n  }\n}\nfunction setPropOnCustomElement(domElement, tag, key, value, props, prevValue) {\n  switch (key) {\n    case \"style\":\n      setValueForStyles(domElement, value, prevValue);\n      break;\n    case \"dangerouslySetInnerHTML\":\n      if (null != value) {\n        if (\"object\" !== typeof value || !(\"__html\" in value))\n          throw Error(formatProdErrorMessage(61));\n        key = value.__html;\n        if (null != key) {\n          if (null != props.children) throw Error(formatProdErrorMessage(60));\n          domElement.innerHTML = key;\n        }\n      }\n      break;\n    case \"children\":\n      \"string\" === typeof value\n        ? setTextContent(domElement, value)\n        : (\"number\" === typeof value || \"bigint\" === typeof value) &&\n          setTextContent(domElement, \"\" + value);\n      break;\n    case \"onScroll\":\n      null != value && listenToNonDelegatedEvent(\"scroll\", domElement);\n      break;\n    case \"onScrollEnd\":\n      null != value && listenToNonDelegatedEvent(\"scrollend\", domElement);\n      break;\n    case \"onClick\":\n      null != value && (domElement.onclick = noop$1);\n      break;\n    case \"suppressContentEditableWarning\":\n    case \"suppressHydrationWarning\":\n    case \"innerHTML\":\n    case \"ref\":\n      break;\n    case \"innerText\":\n    case \"textContent\":\n      break;\n    default:\n      if (!registrationNameDependencies.hasOwnProperty(key))\n        a: {\n          if (\n            \"o\" === key[0] &&\n            \"n\" === key[1] &&\n            ((props = key.endsWith(\"Capture\")),\n            (tag = key.slice(2, props ? key.length - 7 : void 0)),\n            (prevValue = domElement[internalPropsKey] || null),\n            (prevValue = null != prevValue ? prevValue[key] : null),\n            \"function\" === typeof prevValue &&\n              domElement.removeEventListener(tag, prevValue, props),\n            \"function\" === typeof value)\n          ) {\n            \"function\" !== typeof prevValue &&\n              null !== prevValue &&\n              (key in domElement\n                ? (domElement[key] = null)\n                : domElement.hasAttribute(key) &&\n                  domElement.removeAttribute(key));\n            domElement.addEventListener(tag, value, props);\n            break a;\n          }\n          key in domElement\n            ? (domElement[key] = value)\n            : !0 === value\n              ? domElement.setAttribute(key, \"\")\n              : setValueForAttribute(domElement, key, value);\n        }\n  }\n}\nfunction setInitialProperties(domElement, tag, props) {\n  switch (tag) {\n    case \"div\":\n    case \"span\":\n    case \"svg\":\n    case \"path\":\n    case \"a\":\n    case \"g\":\n    case \"p\":\n    case \"li\":\n      break;\n    case \"img\":\n      listenToNonDelegatedEvent(\"error\", domElement);\n      listenToNonDelegatedEvent(\"load\", domElement);\n      var hasSrc = !1,\n        hasSrcSet = !1,\n        propKey;\n      for (propKey in props)\n        if (props.hasOwnProperty(propKey)) {\n          var propValue = props[propKey];\n          if (null != propValue)\n            switch (propKey) {\n              case \"src\":\n                hasSrc = !0;\n                break;\n              case \"srcSet\":\n                hasSrcSet = !0;\n                break;\n              case \"children\":\n              case \"dangerouslySetInnerHTML\":\n                throw Error(formatProdErrorMessage(137, tag));\n              default:\n                setProp(domElement, tag, propKey, propValue, props, null);\n            }\n        }\n      hasSrcSet &&\n        setProp(domElement, tag, \"srcSet\", props.srcSet, props, null);\n      hasSrc && setProp(domElement, tag, \"src\", props.src, props, null);\n      return;\n    case \"input\":\n      listenToNonDelegatedEvent(\"invalid\", domElement);\n      var defaultValue = (propKey = propValue = hasSrcSet = null),\n        checked = null,\n        defaultChecked = null;\n      for (hasSrc in props)\n        if (props.hasOwnProperty(hasSrc)) {\n          var propValue$186 = props[hasSrc];\n          if (null != propValue$186)\n            switch (hasSrc) {\n              case \"name\":\n                hasSrcSet = propValue$186;\n                break;\n              case \"type\":\n                propValue = propValue$186;\n                break;\n              case \"checked\":\n                checked = propValue$186;\n                break;\n              case \"defaultChecked\":\n                defaultChecked = propValue$186;\n                break;\n              case \"value\":\n                propKey = propValue$186;\n                break;\n              case \"defaultValue\":\n                defaultValue = propValue$186;\n                break;\n              case \"children\":\n              case \"dangerouslySetInnerHTML\":\n                if (null != propValue$186)\n                  throw Error(formatProdErrorMessage(137, tag));\n                break;\n              default:\n                setProp(domElement, tag, hasSrc, propValue$186, props, null);\n            }\n        }\n      initInput(\n        domElement,\n        propKey,\n        defaultValue,\n        checked,\n        defaultChecked,\n        propValue,\n        hasSrcSet,\n        !1\n      );\n      track(domElement);\n      return;\n    case \"select\":\n      listenToNonDelegatedEvent(\"invalid\", domElement);\n      hasSrc = propValue = propKey = null;\n      for (hasSrcSet in props)\n        if (\n          props.hasOwnProperty(hasSrcSet) &&\n          ((defaultValue = props[hasSrcSet]), null != defaultValue)\n        )\n          switch (hasSrcSet) {\n            case \"value\":\n              propKey = defaultValue;\n              break;\n            case \"defaultValue\":\n              propValue = defaultValue;\n              break;\n            case \"multiple\":\n              hasSrc = defaultValue;\n            default:\n              setProp(domElement, tag, hasSrcSet, defaultValue, props, null);\n          }\n      tag = propKey;\n      props = propValue;\n      domElement.multiple = !!hasSrc;\n      null != tag\n        ? updateOptions(domElement, !!hasSrc, tag, !1)\n        : null != props && updateOptions(domElement, !!hasSrc, props, !0);\n      return;\n    case \"textarea\":\n      listenToNonDelegatedEvent(\"invalid\", domElement);\n      propKey = hasSrcSet = hasSrc = null;\n      for (propValue in props)\n        if (\n          props.hasOwnProperty(propValue) &&\n          ((defaultValue = props[propValue]), null != defaultValue)\n        )\n          switch (propValue) {\n            case \"value\":\n              hasSrc = defaultValue;\n              break;\n            case \"defaultValue\":\n              hasSrcSet = defaultValue;\n              break;\n            case \"children\":\n              propKey = defaultValue;\n              break;\n            case \"dangerouslySetInnerHTML\":\n              if (null != defaultValue) throw Error(formatProdErrorMessage(91));\n              break;\n            default:\n              setProp(domElement, tag, propValue, defaultValue, props, null);\n          }\n      initTextarea(domElement, hasSrc, hasSrcSet, propKey);\n      track(domElement);\n      return;\n    case \"option\":\n      for (checked in props)\n        if (\n          props.hasOwnProperty(checked) &&\n          ((hasSrc = props[checked]), null != hasSrc)\n        )\n          switch (checked) {\n            case \"selected\":\n              domElement.selected =\n                hasSrc &&\n                \"function\" !== typeof hasSrc &&\n                \"symbol\" !== typeof hasSrc;\n              break;\n            default:\n              setProp(domElement, tag, checked, hasSrc, props, null);\n          }\n      return;\n    case \"dialog\":\n      listenToNonDelegatedEvent(\"cancel\", domElement);\n      listenToNonDelegatedEvent(\"close\", domElement);\n      break;\n    case \"iframe\":\n    case \"object\":\n      listenToNonDelegatedEvent(\"load\", domElement);\n      break;\n    case \"video\":\n    case \"audio\":\n      for (hasSrc = 0; hasSrc < mediaEventTypes.length; hasSrc++)\n        listenToNonDelegatedEvent(mediaEventTypes[hasSrc], domElement);\n      break;\n    case \"image\":\n      listenToNonDelegatedEvent(\"error\", domElement);\n      listenToNonDelegatedEvent(\"load\", domElement);\n      break;\n    case \"details\":\n      listenToNonDelegatedEvent(\"toggle\", domElement);\n      break;\n    case \"embed\":\n    case \"source\":\n    case \"link\":\n      listenToNonDelegatedEvent(\"error\", domElement),\n        listenToNonDelegatedEvent(\"load\", domElement);\n    case \"area\":\n    case \"base\":\n    case \"br\":\n    case \"col\":\n    case \"hr\":\n    case \"keygen\":\n    case \"meta\":\n    case \"param\":\n    case \"track\":\n    case \"wbr\":\n    case \"menuitem\":\n      for (defaultChecked in props)\n        if (\n          props.hasOwnProperty(defaultChecked) &&\n          ((hasSrc = props[defaultChecked]), null != hasSrc)\n        )\n          switch (defaultChecked) {\n            case \"children\":\n            case \"dangerouslySetInnerHTML\":\n              throw Error(formatProdErrorMessage(137, tag));\n            default:\n              setProp(domElement, tag, defaultChecked, hasSrc, props, null);\n          }\n      return;\n    default:\n      if (isCustomElement(tag)) {\n        for (propValue$186 in props)\n          props.hasOwnProperty(propValue$186) &&\n            ((hasSrc = props[propValue$186]),\n            void 0 !== hasSrc &&\n              setPropOnCustomElement(\n                domElement,\n                tag,\n                propValue$186,\n                hasSrc,\n                props,\n                void 0\n              ));\n        return;\n      }\n  }\n  for (defaultValue in props)\n    props.hasOwnProperty(defaultValue) &&\n      ((hasSrc = props[defaultValue]),\n      null != hasSrc &&\n        setProp(domElement, tag, defaultValue, hasSrc, props, null));\n}\nfunction updateProperties(domElement, tag, lastProps, nextProps) {\n  switch (tag) {\n    case \"div\":\n    case \"span\":\n    case \"svg\":\n    case \"path\":\n    case \"a\":\n    case \"g\":\n    case \"p\":\n    case \"li\":\n      break;\n    case \"input\":\n      var name = null,\n        type = null,\n        value = null,\n        defaultValue = null,\n        lastDefaultValue = null,\n        checked = null,\n        defaultChecked = null;\n      for (propKey in lastProps) {\n        var lastProp = lastProps[propKey];\n        if (lastProps.hasOwnProperty(propKey) && null != lastProp)\n          switch (propKey) {\n            case \"checked\":\n              break;\n            case \"value\":\n              break;\n            case \"defaultValue\":\n              lastDefaultValue = lastProp;\n            default:\n              nextProps.hasOwnProperty(propKey) ||\n                setProp(domElement, tag, propKey, null, nextProps, lastProp);\n          }\n      }\n      for (var propKey$203 in nextProps) {\n        var propKey = nextProps[propKey$203];\n        lastProp = lastProps[propKey$203];\n        if (\n          nextProps.hasOwnProperty(propKey$203) &&\n          (null != propKey || null != lastProp)\n        )\n          switch (propKey$203) {\n            case \"type\":\n              type = propKey;\n              break;\n            case \"name\":\n              name = propKey;\n              break;\n            case \"checked\":\n              checked = propKey;\n              break;\n            case \"defaultChecked\":\n              defaultChecked = propKey;\n              break;\n            case \"value\":\n              value = propKey;\n              break;\n            case \"defaultValue\":\n              defaultValue = propKey;\n              break;\n            case \"children\":\n            case \"dangerouslySetInnerHTML\":\n              if (null != propKey)\n                throw Error(formatProdErrorMessage(137, tag));\n              break;\n            default:\n              propKey !== lastProp &&\n                setProp(\n                  domElement,\n                  tag,\n                  propKey$203,\n                  propKey,\n                  nextProps,\n                  lastProp\n                );\n          }\n      }\n      updateInput(\n        domElement,\n        value,\n        defaultValue,\n        lastDefaultValue,\n        checked,\n        defaultChecked,\n        type,\n        name\n      );\n      return;\n    case \"select\":\n      propKey = value = defaultValue = propKey$203 = null;\n      for (type in lastProps)\n        if (\n          ((lastDefaultValue = lastProps[type]),\n          lastProps.hasOwnProperty(type) && null != lastDefaultValue)\n        )\n          switch (type) {\n            case \"value\":\n              break;\n            case \"multiple\":\n              propKey = lastDefaultValue;\n            default:\n              nextProps.hasOwnProperty(type) ||\n                setProp(\n                  domElement,\n                  tag,\n                  type,\n                  null,\n                  nextProps,\n                  lastDefaultValue\n                );\n          }\n      for (name in nextProps)\n        if (\n          ((type = nextProps[name]),\n          (lastDefaultValue = lastProps[name]),\n          nextProps.hasOwnProperty(name) &&\n            (null != type || null != lastDefaultValue))\n        )\n          switch (name) {\n            case \"value\":\n              propKey$203 = type;\n              break;\n            case \"defaultValue\":\n              defaultValue = type;\n              break;\n            case \"multiple\":\n              value = type;\n            default:\n              type !== lastDefaultValue &&\n                setProp(\n                  domElement,\n                  tag,\n                  name,\n                  type,\n                  nextProps,\n                  lastDefaultValue\n                );\n          }\n      tag = defaultValue;\n      lastProps = value;\n      nextProps = propKey;\n      null != propKey$203\n        ? updateOptions(domElement, !!lastProps, propKey$203, !1)\n        : !!nextProps !== !!lastProps &&\n          (null != tag\n            ? updateOptions(domElement, !!lastProps, tag, !0)\n            : updateOptions(domElement, !!lastProps, lastProps ? [] : \"\", !1));\n      return;\n    case \"textarea\":\n      propKey = propKey$203 = null;\n      for (defaultValue in lastProps)\n        if (\n          ((name = lastProps[defaultValue]),\n          lastProps.hasOwnProperty(defaultValue) &&\n            null != name &&\n            !nextProps.hasOwnProperty(defaultValue))\n        )\n          switch (defaultValue) {\n            case \"value\":\n              break;\n            case \"children\":\n              break;\n            default:\n              setProp(domElement, tag, defaultValue, null, nextProps, name);\n          }\n      for (value in nextProps)\n        if (\n          ((name = nextProps[value]),\n          (type = lastProps[value]),\n          nextProps.hasOwnProperty(value) && (null != name || null != type))\n        )\n          switch (value) {\n            case \"value\":\n              propKey$203 = name;\n              break;\n            case \"defaultValue\":\n              propKey = name;\n              break;\n            case \"children\":\n              break;\n            case \"dangerouslySetInnerHTML\":\n              if (null != name) throw Error(formatProdErrorMessage(91));\n              break;\n            default:\n              name !== type &&\n                setProp(domElement, tag, value, name, nextProps, type);\n          }\n      updateTextarea(domElement, propKey$203, propKey);\n      return;\n    case \"option\":\n      for (var propKey$219 in lastProps)\n        if (\n          ((propKey$203 = lastProps[propKey$219]),\n          lastProps.hasOwnProperty(propKey$219) &&\n            null != propKey$203 &&\n            !nextProps.hasOwnProperty(propKey$219))\n        )\n          switch (propKey$219) {\n            case \"selected\":\n              domElement.selected = !1;\n              break;\n            default:\n              setProp(\n                domElement,\n                tag,\n                propKey$219,\n                null,\n                nextProps,\n                propKey$203\n              );\n          }\n      for (lastDefaultValue in nextProps)\n        if (\n          ((propKey$203 = nextProps[lastDefaultValue]),\n          (propKey = lastProps[lastDefaultValue]),\n          nextProps.hasOwnProperty(lastDefaultValue) &&\n            propKey$203 !== propKey &&\n            (null != propKey$203 || null != propKey))\n        )\n          switch (lastDefaultValue) {\n            case \"selected\":\n              domElement.selected =\n                propKey$203 &&\n                \"function\" !== typeof propKey$203 &&\n                \"symbol\" !== typeof propKey$203;\n              break;\n            default:\n              setProp(\n                domElement,\n                tag,\n                lastDefaultValue,\n                propKey$203,\n                nextProps,\n                propKey\n              );\n          }\n      return;\n    case \"img\":\n    case \"link\":\n    case \"area\":\n    case \"base\":\n    case \"br\":\n    case \"col\":\n    case \"embed\":\n    case \"hr\":\n    case \"keygen\":\n    case \"meta\":\n    case \"param\":\n    case \"source\":\n    case \"track\":\n    case \"wbr\":\n    case \"menuitem\":\n      for (var propKey$224 in lastProps)\n        (propKey$203 = lastProps[propKey$224]),\n          lastProps.hasOwnProperty(propKey$224) &&\n            null != propKey$203 &&\n            !nextProps.hasOwnProperty(propKey$224) &&\n            setProp(domElement, tag, propKey$224, null, nextProps, propKey$203);\n      for (checked in nextProps)\n        if (\n          ((propKey$203 = nextProps[checked]),\n          (propKey = lastProps[checked]),\n          nextProps.hasOwnProperty(checked) &&\n            propKey$203 !== propKey &&\n            (null != propKey$203 || null != propKey))\n        )\n          switch (checked) {\n            case \"children\":\n            case \"dangerouslySetInnerHTML\":\n              if (null != propKey$203)\n                throw Error(formatProdErrorMessage(137, tag));\n              break;\n            default:\n              setProp(\n                domElement,\n                tag,\n                checked,\n                propKey$203,\n                nextProps,\n                propKey\n              );\n          }\n      return;\n    default:\n      if (isCustomElement(tag)) {\n        for (var propKey$229 in lastProps)\n          (propKey$203 = lastProps[propKey$229]),\n            lastProps.hasOwnProperty(propKey$229) &&\n              void 0 !== propKey$203 &&\n              !nextProps.hasOwnProperty(propKey$229) &&\n              setPropOnCustomElement(\n                domElement,\n                tag,\n                propKey$229,\n                void 0,\n                nextProps,\n                propKey$203\n              );\n        for (defaultChecked in nextProps)\n          (propKey$203 = nextProps[defaultChecked]),\n            (propKey = lastProps[defaultChecked]),\n            !nextProps.hasOwnProperty(defaultChecked) ||\n              propKey$203 === propKey ||\n              (void 0 === propKey$203 && void 0 === propKey) ||\n              setPropOnCustomElement(\n                domElement,\n                tag,\n                defaultChecked,\n                propKey$203,\n                nextProps,\n                propKey\n              );\n        return;\n      }\n  }\n  for (var propKey$234 in lastProps)\n    (propKey$203 = lastProps[propKey$234]),\n      lastProps.hasOwnProperty(propKey$234) &&\n        null != propKey$203 &&\n        !nextProps.hasOwnProperty(propKey$234) &&\n        setProp(domElement, tag, propKey$234, null, nextProps, propKey$203);\n  for (lastProp in nextProps)\n    (propKey$203 = nextProps[lastProp]),\n      (propKey = lastProps[lastProp]),\n      !nextProps.hasOwnProperty(lastProp) ||\n        propKey$203 === propKey ||\n        (null == propKey$203 && null == propKey) ||\n        setProp(domElement, tag, lastProp, propKey$203, nextProps, propKey);\n}\nvar eventsEnabled = null,\n  selectionInformation = null;\nfunction getOwnerDocumentFromRootContainer(rootContainerElement) {\n  return 9 === rootContainerElement.nodeType\n    ? rootContainerElement\n    : rootContainerElement.ownerDocument;\n}\nfunction getOwnHostContext(namespaceURI) {\n  switch (namespaceURI) {\n    case \"http://www.w3.org/2000/svg\":\n      return 1;\n    case \"http://www.w3.org/1998/Math/MathML\":\n      return 2;\n    default:\n      return 0;\n  }\n}\nfunction getChildHostContextProd(parentNamespace, type) {\n  if (0 === parentNamespace)\n    switch (type) {\n      case \"svg\":\n        return 1;\n      case \"math\":\n        return 2;\n      default:\n        return 0;\n    }\n  return 1 === parentNamespace && \"foreignObject\" === type\n    ? 0\n    : parentNamespace;\n}\nfunction shouldSetTextContent(type, props) {\n  return (\n    \"textarea\" === type ||\n    \"noscript\" === type ||\n    \"string\" === typeof props.children ||\n    \"number\" === typeof props.children ||\n    \"bigint\" === typeof props.children ||\n    (\"object\" === typeof props.dangerouslySetInnerHTML &&\n      null !== props.dangerouslySetInnerHTML &&\n      null != props.dangerouslySetInnerHTML.__html)\n  );\n}\nvar currentPopstateTransitionEvent = null;\nfunction shouldAttemptEagerTransition() {\n  var event = window.event;\n  if (event && \"popstate\" === event.type) {\n    if (event === currentPopstateTransitionEvent) return !1;\n    currentPopstateTransitionEvent = event;\n    return !0;\n  }\n  currentPopstateTransitionEvent = null;\n  return !1;\n}\nvar scheduleTimeout = \"function\" === typeof setTimeout ? setTimeout : void 0,\n  cancelTimeout = \"function\" === typeof clearTimeout ? clearTimeout : void 0,\n  localPromise = \"function\" === typeof Promise ? Promise : void 0,\n  scheduleMicrotask =\n    \"function\" === typeof queueMicrotask\n      ? queueMicrotask\n      : \"undefined\" !== typeof localPromise\n        ? function (callback) {\n            return localPromise\n              .resolve(null)\n              .then(callback)\n              .catch(handleErrorInNextTick);\n          }\n        : scheduleTimeout;\nfunction handleErrorInNextTick(error) {\n  setTimeout(function () {\n    throw error;\n  });\n}\nfunction clearSuspenseBoundary(parentInstance, suspenseInstance) {\n  var node = suspenseInstance,\n    depth = 0;\n  do {\n    var nextNode = node.nextSibling;\n    parentInstance.removeChild(node);\n    if (nextNode && 8 === nextNode.nodeType)\n      if (((node = nextNode.data), \"/$\" === node)) {\n        if (0 === depth) {\n          parentInstance.removeChild(nextNode);\n          retryIfBlockedOn(suspenseInstance);\n          return;\n        }\n        depth--;\n      } else (\"$\" !== node && \"$?\" !== node && \"$!\" !== node) || depth++;\n    node = nextNode;\n  } while (node);\n  retryIfBlockedOn(suspenseInstance);\n}\nfunction clearContainerSparingly(container) {\n  var nextNode = container.firstChild;\n  nextNode && 10 === nextNode.nodeType && (nextNode = nextNode.nextSibling);\n  for (; nextNode; ) {\n    var node = nextNode;\n    nextNode = nextNode.nextSibling;\n    switch (node.nodeName) {\n      case \"HTML\":\n      case \"HEAD\":\n      case \"BODY\":\n        clearContainerSparingly(node);\n        detachDeletedInstance(node);\n        continue;\n      case \"SCRIPT\":\n      case \"STYLE\":\n        continue;\n      case \"LINK\":\n        if (\"stylesheet\" === node.rel.toLowerCase()) continue;\n    }\n    container.removeChild(node);\n  }\n}\nfunction canHydrateInstance(instance, type, props, inRootOrSingleton) {\n  for (; 1 === instance.nodeType; ) {\n    var anyProps = props;\n    if (instance.nodeName.toLowerCase() !== type.toLowerCase()) {\n      if (\n        !inRootOrSingleton &&\n        (\"INPUT\" !== instance.nodeName || \"hidden\" !== instance.type)\n      )\n        break;\n    } else if (!inRootOrSingleton)\n      if (\"input\" === type && \"hidden\" === instance.type) {\n        var name = null == anyProps.name ? null : \"\" + anyProps.name;\n        if (\n          \"hidden\" === anyProps.type &&\n          instance.getAttribute(\"name\") === name\n        )\n          return instance;\n      } else return instance;\n    else if (!instance[internalHoistableMarker])\n      switch (type) {\n        case \"meta\":\n          if (!instance.hasAttribute(\"itemprop\")) break;\n          return instance;\n        case \"link\":\n          name = instance.getAttribute(\"rel\");\n          if (\"stylesheet\" === name && instance.hasAttribute(\"data-precedence\"))\n            break;\n          else if (\n            name !== anyProps.rel ||\n            instance.getAttribute(\"href\") !==\n              (null == anyProps.href ? null : anyProps.href) ||\n            instance.getAttribute(\"crossorigin\") !==\n              (null == anyProps.crossOrigin ? null : anyProps.crossOrigin) ||\n            instance.getAttribute(\"title\") !==\n              (null == anyProps.title ? null : anyProps.title)\n          )\n            break;\n          return instance;\n        case \"style\":\n          if (instance.hasAttribute(\"data-precedence\")) break;\n          return instance;\n        case \"script\":\n          name = instance.getAttribute(\"src\");\n          if (\n            (name !== (null == anyProps.src ? null : anyProps.src) ||\n              instance.getAttribute(\"type\") !==\n                (null == anyProps.type ? null : anyProps.type) ||\n              instance.getAttribute(\"crossorigin\") !==\n                (null == anyProps.crossOrigin ? null : anyProps.crossOrigin)) &&\n            name &&\n            instance.hasAttribute(\"async\") &&\n            !instance.hasAttribute(\"itemprop\")\n          )\n            break;\n          return instance;\n        default:\n          return instance;\n      }\n    instance = getNextHydratable(instance.nextSibling);\n    if (null === instance) break;\n  }\n  return null;\n}\nfunction canHydrateTextInstance(instance, text, inRootOrSingleton) {\n  if (\"\" === text) return null;\n  for (; 3 !== instance.nodeType; ) {\n    if (\n      (1 !== instance.nodeType ||\n        \"INPUT\" !== instance.nodeName ||\n        \"hidden\" !== instance.type) &&\n      !inRootOrSingleton\n    )\n      return null;\n    instance = getNextHydratable(instance.nextSibling);\n    if (null === instance) return null;\n  }\n  return instance;\n}\nfunction getNextHydratable(node) {\n  for (; null != node; node = node.nextSibling) {\n    var nodeType = node.nodeType;\n    if (1 === nodeType || 3 === nodeType) break;\n    if (8 === nodeType) {\n      nodeType = node.data;\n      if (\n        \"$\" === nodeType ||\n        \"$!\" === nodeType ||\n        \"$?\" === nodeType ||\n        \"F!\" === nodeType ||\n        \"F\" === nodeType\n      )\n        break;\n      if (\"/$\" === nodeType) return null;\n    }\n  }\n  return node;\n}\nfunction getParentSuspenseInstance(targetInstance) {\n  targetInstance = targetInstance.previousSibling;\n  for (var depth = 0; targetInstance; ) {\n    if (8 === targetInstance.nodeType) {\n      var data = targetInstance.data;\n      if (\"$\" === data || \"$!\" === data || \"$?\" === data) {\n        if (0 === depth) return targetInstance;\n        depth--;\n      } else \"/$\" === data && depth++;\n    }\n    targetInstance = targetInstance.previousSibling;\n  }\n  return null;\n}\nfunction resolveSingletonInstance(type, props, rootContainerInstance) {\n  props = getOwnerDocumentFromRootContainer(rootContainerInstance);\n  switch (type) {\n    case \"html\":\n      type = props.documentElement;\n      if (!type) throw Error(formatProdErrorMessage(452));\n      return type;\n    case \"head\":\n      type = props.head;\n      if (!type) throw Error(formatProdErrorMessage(453));\n      return type;\n    case \"body\":\n      type = props.body;\n      if (!type) throw Error(formatProdErrorMessage(454));\n      return type;\n    default:\n      throw Error(formatProdErrorMessage(451));\n  }\n}\nvar preloadPropsMap = new Map(),\n  preconnectsSet = new Set();\nfunction getHoistableRoot(container) {\n  return \"function\" === typeof container.getRootNode\n    ? container.getRootNode()\n    : container.ownerDocument;\n}\nvar previousDispatcher = ReactDOMSharedInternals.d;\nReactDOMSharedInternals.d = {\n  f: flushSyncWork,\n  r: requestFormReset,\n  D: prefetchDNS,\n  C: preconnect,\n  L: preload,\n  m: preloadModule,\n  X: preinitScript,\n  S: preinitStyle,\n  M: preinitModuleScript\n};\nfunction flushSyncWork() {\n  var previousWasRendering = previousDispatcher.f(),\n    wasRendering = flushSyncWork$1();\n  return previousWasRendering || wasRendering;\n}\nfunction requestFormReset(form) {\n  var formInst = getInstanceFromNode(form);\n  null !== formInst && 5 === formInst.tag && \"form\" === formInst.type\n    ? requestFormReset$1(formInst)\n    : previousDispatcher.r(form);\n}\nvar globalDocument = \"undefined\" === typeof document ? null : document;\nfunction preconnectAs(rel, href, crossOrigin) {\n  var ownerDocument = globalDocument;\n  if (ownerDocument && \"string\" === typeof href && href) {\n    var limitedEscapedHref =\n      escapeSelectorAttributeValueInsideDoubleQuotes(href);\n    limitedEscapedHref =\n      'link[rel=\"' + rel + '\"][href=\"' + limitedEscapedHref + '\"]';\n    \"string\" === typeof crossOrigin &&\n      (limitedEscapedHref += '[crossorigin=\"' + crossOrigin + '\"]');\n    preconnectsSet.has(limitedEscapedHref) ||\n      (preconnectsSet.add(limitedEscapedHref),\n      (rel = { rel: rel, crossOrigin: crossOrigin, href: href }),\n      null === ownerDocument.querySelector(limitedEscapedHref) &&\n        ((href = ownerDocument.createElement(\"link\")),\n        setInitialProperties(href, \"link\", rel),\n        markNodeAsHoistable(href),\n        ownerDocument.head.appendChild(href)));\n  }\n}\nfunction prefetchDNS(href) {\n  previousDispatcher.D(href);\n  preconnectAs(\"dns-prefetch\", href, null);\n}\nfunction preconnect(href, crossOrigin) {\n  previousDispatcher.C(href, crossOrigin);\n  preconnectAs(\"preconnect\", href, crossOrigin);\n}\nfunction preload(href, as, options) {\n  previousDispatcher.L(href, as, options);\n  var ownerDocument = globalDocument;\n  if (ownerDocument && href && as) {\n    var preloadSelector =\n      'link[rel=\"preload\"][as=\"' +\n      escapeSelectorAttributeValueInsideDoubleQuotes(as) +\n      '\"]';\n    \"image\" === as\n      ? options && options.imageSrcSet\n        ? ((preloadSelector +=\n            '[imagesrcset=\"' +\n            escapeSelectorAttributeValueInsideDoubleQuotes(\n              options.imageSrcSet\n            ) +\n            '\"]'),\n          \"string\" === typeof options.imageSizes &&\n            (preloadSelector +=\n              '[imagesizes=\"' +\n              escapeSelectorAttributeValueInsideDoubleQuotes(\n                options.imageSizes\n              ) +\n              '\"]'))\n        : (preloadSelector +=\n            '[href=\"' +\n            escapeSelectorAttributeValueInsideDoubleQuotes(href) +\n            '\"]')\n      : (preloadSelector +=\n          '[href=\"' +\n          escapeSelectorAttributeValueInsideDoubleQuotes(href) +\n          '\"]');\n    var key = preloadSelector;\n    switch (as) {\n      case \"style\":\n        key = getStyleKey(href);\n        break;\n      case \"script\":\n        key = getScriptKey(href);\n    }\n    preloadPropsMap.has(key) ||\n      ((href = assign(\n        {\n          rel: \"preload\",\n          href:\n            \"image\" === as && options && options.imageSrcSet ? void 0 : href,\n          as: as\n        },\n        options\n      )),\n      preloadPropsMap.set(key, href),\n      null !== ownerDocument.querySelector(preloadSelector) ||\n        (\"style\" === as &&\n          ownerDocument.querySelector(getStylesheetSelectorFromKey(key))) ||\n        (\"script\" === as &&\n          ownerDocument.querySelector(getScriptSelectorFromKey(key))) ||\n        ((as = ownerDocument.createElement(\"link\")),\n        setInitialProperties(as, \"link\", href),\n        markNodeAsHoistable(as),\n        ownerDocument.head.appendChild(as)));\n  }\n}\nfunction preloadModule(href, options) {\n  previousDispatcher.m(href, options);\n  var ownerDocument = globalDocument;\n  if (ownerDocument && href) {\n    var as = options && \"string\" === typeof options.as ? options.as : \"script\",\n      preloadSelector =\n        'link[rel=\"modulepreload\"][as=\"' +\n        escapeSelectorAttributeValueInsideDoubleQuotes(as) +\n        '\"][href=\"' +\n        escapeSelectorAttributeValueInsideDoubleQuotes(href) +\n        '\"]',\n      key = preloadSelector;\n    switch (as) {\n      case \"audioworklet\":\n      case \"paintworklet\":\n      case \"serviceworker\":\n      case \"sharedworker\":\n      case \"worker\":\n      case \"script\":\n        key = getScriptKey(href);\n    }\n    if (\n      !preloadPropsMap.has(key) &&\n      ((href = assign({ rel: \"modulepreload\", href: href }, options)),\n      preloadPropsMap.set(key, href),\n      null === ownerDocument.querySelector(preloadSelector))\n    ) {\n      switch (as) {\n        case \"audioworklet\":\n        case \"paintworklet\":\n        case \"serviceworker\":\n        case \"sharedworker\":\n        case \"worker\":\n        case \"script\":\n          if (ownerDocument.querySelector(getScriptSelectorFromKey(key)))\n            return;\n      }\n      as = ownerDocument.createElement(\"link\");\n      setInitialProperties(as, \"link\", href);\n      markNodeAsHoistable(as);\n      ownerDocument.head.appendChild(as);\n    }\n  }\n}\nfunction preinitStyle(href, precedence, options) {\n  previousDispatcher.S(href, precedence, options);\n  var ownerDocument = globalDocument;\n  if (ownerDocument && href) {\n    var styles = getResourcesFromRoot(ownerDocument).hoistableStyles,\n      key = getStyleKey(href);\n    precedence = precedence || \"default\";\n    var resource = styles.get(key);\n    if (!resource) {\n      var state = { loading: 0, preload: null };\n      if (\n        (resource = ownerDocument.querySelector(\n          getStylesheetSelectorFromKey(key)\n        ))\n      )\n        state.loading = 5;\n      else {\n        href = assign(\n          { rel: \"stylesheet\", href: href, \"data-precedence\": precedence },\n          options\n        );\n        (options = preloadPropsMap.get(key)) &&\n          adoptPreloadPropsForStylesheet(href, options);\n        var link = (resource = ownerDocument.createElement(\"link\"));\n        markNodeAsHoistable(link);\n        setInitialProperties(link, \"link\", href);\n        link._p = new Promise(function (resolve, reject) {\n          link.onload = resolve;\n          link.onerror = reject;\n        });\n        link.addEventListener(\"load\", function () {\n          state.loading |= 1;\n        });\n        link.addEventListener(\"error\", function () {\n          state.loading |= 2;\n        });\n        state.loading |= 4;\n        insertStylesheet(resource, precedence, ownerDocument);\n      }\n      resource = {\n        type: \"stylesheet\",\n        instance: resource,\n        count: 1,\n        state: state\n      };\n      styles.set(key, resource);\n    }\n  }\n}\nfunction preinitScript(src, options) {\n  previousDispatcher.X(src, options);\n  var ownerDocument = globalDocument;\n  if (ownerDocument && src) {\n    var scripts = getResourcesFromRoot(ownerDocument).hoistableScripts,\n      key = getScriptKey(src),\n      resource = scripts.get(key);\n    resource ||\n      ((resource = ownerDocument.querySelector(getScriptSelectorFromKey(key))),\n      resource ||\n        ((src = assign({ src: src, async: !0 }, options)),\n        (options = preloadPropsMap.get(key)) &&\n          adoptPreloadPropsForScript(src, options),\n        (resource = ownerDocument.createElement(\"script\")),\n        markNodeAsHoistable(resource),\n        setInitialProperties(resource, \"link\", src),\n        ownerDocument.head.appendChild(resource)),\n      (resource = {\n        type: \"script\",\n        instance: resource,\n        count: 1,\n        state: null\n      }),\n      scripts.set(key, resource));\n  }\n}\nfunction preinitModuleScript(src, options) {\n  previousDispatcher.M(src, options);\n  var ownerDocument = globalDocument;\n  if (ownerDocument && src) {\n    var scripts = getResourcesFromRoot(ownerDocument).hoistableScripts,\n      key = getScriptKey(src),\n      resource = scripts.get(key);\n    resource ||\n      ((resource = ownerDocument.querySelector(getScriptSelectorFromKey(key))),\n      resource ||\n        ((src = assign({ src: src, async: !0, type: \"module\" }, options)),\n        (options = preloadPropsMap.get(key)) &&\n          adoptPreloadPropsForScript(src, options),\n        (resource = ownerDocument.createElement(\"script\")),\n        markNodeAsHoistable(resource),\n        setInitialProperties(resource, \"link\", src),\n        ownerDocument.head.appendChild(resource)),\n      (resource = {\n        type: \"script\",\n        instance: resource,\n        count: 1,\n        state: null\n      }),\n      scripts.set(key, resource));\n  }\n}\nfunction getResource(type, currentProps, pendingProps, currentResource) {\n  var JSCompiler_inline_result = (JSCompiler_inline_result =\n    rootInstanceStackCursor.current)\n    ? getHoistableRoot(JSCompiler_inline_result)\n    : null;\n  if (!JSCompiler_inline_result) throw Error(formatProdErrorMessage(446));\n  switch (type) {\n    case \"meta\":\n    case \"title\":\n      return null;\n    case \"style\":\n      return \"string\" === typeof pendingProps.precedence &&\n        \"string\" === typeof pendingProps.href\n        ? ((currentProps = getStyleKey(pendingProps.href)),\n          (pendingProps = getResourcesFromRoot(\n            JSCompiler_inline_result\n          ).hoistableStyles),\n          (currentResource = pendingProps.get(currentProps)),\n          currentResource ||\n            ((currentResource = {\n              type: \"style\",\n              instance: null,\n              count: 0,\n              state: null\n            }),\n            pendingProps.set(currentProps, currentResource)),\n          currentResource)\n        : { type: \"void\", instance: null, count: 0, state: null };\n    case \"link\":\n      if (\n        \"stylesheet\" === pendingProps.rel &&\n        \"string\" === typeof pendingProps.href &&\n        \"string\" === typeof pendingProps.precedence\n      ) {\n        type = getStyleKey(pendingProps.href);\n        var styles$242 = getResourcesFromRoot(\n            JSCompiler_inline_result\n          ).hoistableStyles,\n          resource$243 = styles$242.get(type);\n        resource$243 ||\n          ((JSCompiler_inline_result =\n            JSCompiler_inline_result.ownerDocument || JSCompiler_inline_result),\n          (resource$243 = {\n            type: \"stylesheet\",\n            instance: null,\n            count: 0,\n            state: { loading: 0, preload: null }\n          }),\n          styles$242.set(type, resource$243),\n          (styles$242 = JSCompiler_inline_result.querySelector(\n            getStylesheetSelectorFromKey(type)\n          )) &&\n            !styles$242._p &&\n            ((resource$243.instance = styles$242),\n            (resource$243.state.loading = 5)),\n          preloadPropsMap.has(type) ||\n            ((pendingProps = {\n              rel: \"preload\",\n              as: \"style\",\n              href: pendingProps.href,\n              crossOrigin: pendingProps.crossOrigin,\n              integrity: pendingProps.integrity,\n              media: pendingProps.media,\n              hrefLang: pendingProps.hrefLang,\n              referrerPolicy: pendingProps.referrerPolicy\n            }),\n            preloadPropsMap.set(type, pendingProps),\n            styles$242 ||\n              preloadStylesheet(\n                JSCompiler_inline_result,\n                type,\n                pendingProps,\n                resource$243.state\n              )));\n        if (currentProps && null === currentResource)\n          throw Error(formatProdErrorMessage(528, \"\"));\n        return resource$243;\n      }\n      if (currentProps && null !== currentResource)\n        throw Error(formatProdErrorMessage(529, \"\"));\n      return null;\n    case \"script\":\n      return (\n        (currentProps = pendingProps.async),\n        (pendingProps = pendingProps.src),\n        \"string\" === typeof pendingProps &&\n        currentProps &&\n        \"function\" !== typeof currentProps &&\n        \"symbol\" !== typeof currentProps\n          ? ((currentProps = getScriptKey(pendingProps)),\n            (pendingProps = getResourcesFromRoot(\n              JSCompiler_inline_result\n            ).hoistableScripts),\n            (currentResource = pendingProps.get(currentProps)),\n            currentResource ||\n              ((currentResource = {\n                type: \"script\",\n                instance: null,\n                count: 0,\n                state: null\n              }),\n              pendingProps.set(currentProps, currentResource)),\n            currentResource)\n          : { type: \"void\", instance: null, count: 0, state: null }\n      );\n    default:\n      throw Error(formatProdErrorMessage(444, type));\n  }\n}\nfunction getStyleKey(href) {\n  return 'href=\"' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '\"';\n}\nfunction getStylesheetSelectorFromKey(key) {\n  return 'link[rel=\"stylesheet\"][' + key + \"]\";\n}\nfunction stylesheetPropsFromRawProps(rawProps) {\n  return assign({}, rawProps, {\n    \"data-precedence\": rawProps.precedence,\n    precedence: null\n  });\n}\nfunction preloadStylesheet(ownerDocument, key, preloadProps, state) {\n  ownerDocument.querySelector('link[rel=\"preload\"][as=\"style\"][' + key + \"]\")\n    ? (state.loading = 1)\n    : ((key = ownerDocument.createElement(\"link\")),\n      (state.preload = key),\n      key.addEventListener(\"load\", function () {\n        return (state.loading |= 1);\n      }),\n      key.addEventListener(\"error\", function () {\n        return (state.loading |= 2);\n      }),\n      setInitialProperties(key, \"link\", preloadProps),\n      markNodeAsHoistable(key),\n      ownerDocument.head.appendChild(key));\n}\nfunction getScriptKey(src) {\n  return '[src=\"' + escapeSelectorAttributeValueInsideDoubleQuotes(src) + '\"]';\n}\nfunction getScriptSelectorFromKey(key) {\n  return \"script[async]\" + key;\n}\nfunction acquireResource(hoistableRoot, resource, props) {\n  resource.count++;\n  if (null === resource.instance)\n    switch (resource.type) {\n      case \"style\":\n        var instance = hoistableRoot.querySelector(\n          'style[data-href~=\"' +\n            escapeSelectorAttributeValueInsideDoubleQuotes(props.href) +\n            '\"]'\n        );\n        if (instance)\n          return (\n            (resource.instance = instance),\n            markNodeAsHoistable(instance),\n            instance\n          );\n        var styleProps = assign({}, props, {\n          \"data-href\": props.href,\n          \"data-precedence\": props.precedence,\n          href: null,\n          precedence: null\n        });\n        instance = (hoistableRoot.ownerDocument || hoistableRoot).createElement(\n          \"style\"\n        );\n        markNodeAsHoistable(instance);\n        setInitialProperties(instance, \"style\", styleProps);\n        insertStylesheet(instance, props.precedence, hoistableRoot);\n        return (resource.instance = instance);\n      case \"stylesheet\":\n        styleProps = getStyleKey(props.href);\n        var instance$248 = hoistableRoot.querySelector(\n          getStylesheetSelectorFromKey(styleProps)\n        );\n        if (instance$248)\n          return (\n            (resource.state.loading |= 4),\n            (resource.instance = instance$248),\n            markNodeAsHoistable(instance$248),\n            instance$248\n          );\n        instance = stylesheetPropsFromRawProps(props);\n        (styleProps = preloadPropsMap.get(styleProps)) &&\n          adoptPreloadPropsForStylesheet(instance, styleProps);\n        instance$248 = (\n          hoistableRoot.ownerDocument || hoistableRoot\n        ).createElement(\"link\");\n        markNodeAsHoistable(instance$248);\n        var linkInstance = instance$248;\n        linkInstance._p = new Promise(function (resolve, reject) {\n          linkInstance.onload = resolve;\n          linkInstance.onerror = reject;\n        });\n        setInitialProperties(instance$248, \"link\", instance);\n        resource.state.loading |= 4;\n        insertStylesheet(instance$248, props.precedence, hoistableRoot);\n        return (resource.instance = instance$248);\n      case \"script\":\n        instance$248 = getScriptKey(props.src);\n        if (\n          (styleProps = hoistableRoot.querySelector(\n            getScriptSelectorFromKey(instance$248)\n          ))\n        )\n          return (\n            (resource.instance = styleProps),\n            markNodeAsHoistable(styleProps),\n            styleProps\n          );\n        instance = props;\n        if ((styleProps = preloadPropsMap.get(instance$248)))\n          (instance = assign({}, props)),\n            adoptPreloadPropsForScript(instance, styleProps);\n        hoistableRoot = hoistableRoot.ownerDocument || hoistableRoot;\n        styleProps = hoistableRoot.createElement(\"script\");\n        markNodeAsHoistable(styleProps);\n        setInitialProperties(styleProps, \"link\", instance);\n        hoistableRoot.head.appendChild(styleProps);\n        return (resource.instance = styleProps);\n      case \"void\":\n        return null;\n      default:\n        throw Error(formatProdErrorMessage(443, resource.type));\n    }\n  else\n    \"stylesheet\" === resource.type &&\n      0 === (resource.state.loading & 4) &&\n      ((instance = resource.instance),\n      (resource.state.loading |= 4),\n      insertStylesheet(instance, props.precedence, hoistableRoot));\n  return resource.instance;\n}\nfunction insertStylesheet(instance, precedence, root) {\n  for (\n    var nodes = root.querySelectorAll(\n        'link[rel=\"stylesheet\"][data-precedence],style[data-precedence]'\n      ),\n      last = nodes.length ? nodes[nodes.length - 1] : null,\n      prior = last,\n      i = 0;\n    i < nodes.length;\n    i++\n  ) {\n    var node = nodes[i];\n    if (node.dataset.precedence === precedence) prior = node;\n    else if (prior !== last) break;\n  }\n  prior\n    ? prior.parentNode.insertBefore(instance, prior.nextSibling)\n    : ((precedence = 9 === root.nodeType ? root.head : root),\n      precedence.insertBefore(instance, precedence.firstChild));\n}\nfunction adoptPreloadPropsForStylesheet(stylesheetProps, preloadProps) {\n  null == stylesheetProps.crossOrigin &&\n    (stylesheetProps.crossOrigin = preloadProps.crossOrigin);\n  null == stylesheetProps.referrerPolicy &&\n    (stylesheetProps.referrerPolicy = preloadProps.referrerPolicy);\n  null == stylesheetProps.title && (stylesheetProps.title = preloadProps.title);\n}\nfunction adoptPreloadPropsForScript(scriptProps, preloadProps) {\n  null == scriptProps.crossOrigin &&\n    (scriptProps.crossOrigin = preloadProps.crossOrigin);\n  null == scriptProps.referrerPolicy &&\n    (scriptProps.referrerPolicy = preloadProps.referrerPolicy);\n  null == scriptProps.integrity &&\n    (scriptProps.integrity = preloadProps.integrity);\n}\nvar tagCaches = null;\nfunction getHydratableHoistableCache(type, keyAttribute, ownerDocument) {\n  if (null === tagCaches) {\n    var cache = new Map();\n    var caches = (tagCaches = new Map());\n    caches.set(ownerDocument, cache);\n  } else\n    (caches = tagCaches),\n      (cache = caches.get(ownerDocument)),\n      cache || ((cache = new Map()), caches.set(ownerDocument, cache));\n  if (cache.has(type)) return cache;\n  cache.set(type, null);\n  ownerDocument = ownerDocument.getElementsByTagName(type);\n  for (caches = 0; caches < ownerDocument.length; caches++) {\n    var node = ownerDocument[caches];\n    if (\n      !(\n        node[internalHoistableMarker] ||\n        node[internalInstanceKey] ||\n        (\"link\" === type && \"stylesheet\" === node.getAttribute(\"rel\"))\n      ) &&\n      \"http://www.w3.org/2000/svg\" !== node.namespaceURI\n    ) {\n      var nodeKey = node.getAttribute(keyAttribute) || \"\";\n      nodeKey = type + nodeKey;\n      var existing = cache.get(nodeKey);\n      existing ? existing.push(node) : cache.set(nodeKey, [node]);\n    }\n  }\n  return cache;\n}\nfunction mountHoistable(hoistableRoot, type, instance) {\n  hoistableRoot = hoistableRoot.ownerDocument || hoistableRoot;\n  hoistableRoot.head.insertBefore(\n    instance,\n    \"title\" === type ? hoistableRoot.querySelector(\"head > title\") : null\n  );\n}\nfunction isHostHoistableType(type, props, hostContext) {\n  if (1 === hostContext || null != props.itemProp) return !1;\n  switch (type) {\n    case \"meta\":\n    case \"title\":\n      return !0;\n    case \"style\":\n      if (\n        \"string\" !== typeof props.precedence ||\n        \"string\" !== typeof props.href ||\n        \"\" === props.href\n      )\n        break;\n      return !0;\n    case \"link\":\n      if (\n        \"string\" !== typeof props.rel ||\n        \"string\" !== typeof props.href ||\n        \"\" === props.href ||\n        props.onLoad ||\n        props.onError\n      )\n        break;\n      switch (props.rel) {\n        case \"stylesheet\":\n          return (\n            (type = props.disabled),\n            \"string\" === typeof props.precedence && null == type\n          );\n        default:\n          return !0;\n      }\n    case \"script\":\n      if (\n        props.async &&\n        \"function\" !== typeof props.async &&\n        \"symbol\" !== typeof props.async &&\n        !props.onLoad &&\n        !props.onError &&\n        props.src &&\n        \"string\" === typeof props.src\n      )\n        return !0;\n  }\n  return !1;\n}\nfunction preloadResource(resource) {\n  return \"stylesheet\" === resource.type && 0 === (resource.state.loading & 3)\n    ? !1\n    : !0;\n}\nvar suspendedState = null;\nfunction noop() {}\nfunction suspendResource(hoistableRoot, resource, props) {\n  if (null === suspendedState) throw Error(formatProdErrorMessage(475));\n  var state = suspendedState;\n  if (\n    \"stylesheet\" === resource.type &&\n    (\"string\" !== typeof props.media ||\n      !1 !== matchMedia(props.media).matches) &&\n    0 === (resource.state.loading & 4)\n  ) {\n    if (null === resource.instance) {\n      var key = getStyleKey(props.href),\n        instance = hoistableRoot.querySelector(\n          getStylesheetSelectorFromKey(key)\n        );\n      if (instance) {\n        hoistableRoot = instance._p;\n        null !== hoistableRoot &&\n          \"object\" === typeof hoistableRoot &&\n          \"function\" === typeof hoistableRoot.then &&\n          (state.count++,\n          (state = onUnsuspend.bind(state)),\n          hoistableRoot.then(state, state));\n        resource.state.loading |= 4;\n        resource.instance = instance;\n        markNodeAsHoistable(instance);\n        return;\n      }\n      instance = hoistableRoot.ownerDocument || hoistableRoot;\n      props = stylesheetPropsFromRawProps(props);\n      (key = preloadPropsMap.get(key)) &&\n        adoptPreloadPropsForStylesheet(props, key);\n      instance = instance.createElement(\"link\");\n      markNodeAsHoistable(instance);\n      var linkInstance = instance;\n      linkInstance._p = new Promise(function (resolve, reject) {\n        linkInstance.onload = resolve;\n        linkInstance.onerror = reject;\n      });\n      setInitialProperties(instance, \"link\", props);\n      resource.instance = instance;\n    }\n    null === state.stylesheets && (state.stylesheets = new Map());\n    state.stylesheets.set(resource, hoistableRoot);\n    (hoistableRoot = resource.state.preload) &&\n      0 === (resource.state.loading & 3) &&\n      (state.count++,\n      (resource = onUnsuspend.bind(state)),\n      hoistableRoot.addEventListener(\"load\", resource),\n      hoistableRoot.addEventListener(\"error\", resource));\n  }\n}\nfunction waitForCommitToBeReady() {\n  if (null === suspendedState) throw Error(formatProdErrorMessage(475));\n  var state = suspendedState;\n  state.stylesheets &&\n    0 === state.count &&\n    insertSuspendedStylesheets(state, state.stylesheets);\n  return 0 < state.count\n    ? function (commit) {\n        var stylesheetTimer = setTimeout(function () {\n          state.stylesheets &&\n            insertSuspendedStylesheets(state, state.stylesheets);\n          if (state.unsuspend) {\n            var unsuspend = state.unsuspend;\n            state.unsuspend = null;\n            unsuspend();\n          }\n        }, 6e4);\n        state.unsuspend = commit;\n        return function () {\n          state.unsuspend = null;\n          clearTimeout(stylesheetTimer);\n        };\n      }\n    : null;\n}\nfunction onUnsuspend() {\n  this.count--;\n  if (0 === this.count)\n    if (this.stylesheets) insertSuspendedStylesheets(this, this.stylesheets);\n    else if (this.unsuspend) {\n      var unsuspend = this.unsuspend;\n      this.unsuspend = null;\n      unsuspend();\n    }\n}\nvar precedencesByRoot = null;\nfunction insertSuspendedStylesheets(state, resources) {\n  state.stylesheets = null;\n  null !== state.unsuspend &&\n    (state.count++,\n    (precedencesByRoot = new Map()),\n    resources.forEach(insertStylesheetIntoRoot, state),\n    (precedencesByRoot = null),\n    onUnsuspend.call(state));\n}\nfunction insertStylesheetIntoRoot(root, resource) {\n  if (!(resource.state.loading & 4)) {\n    var precedences = precedencesByRoot.get(root);\n    if (precedences) var last = precedences.get(null);\n    else {\n      precedences = new Map();\n      precedencesByRoot.set(root, precedences);\n      for (\n        var nodes = root.querySelectorAll(\n            \"link[data-precedence],style[data-precedence]\"\n          ),\n          i = 0;\n        i < nodes.length;\n        i++\n      ) {\n        var node = nodes[i];\n        if (\n          \"LINK\" === node.nodeName ||\n          \"not all\" !== node.getAttribute(\"media\")\n        )\n          precedences.set(node.dataset.precedence, node), (last = node);\n      }\n      last && precedences.set(null, last);\n    }\n    nodes = resource.instance;\n    node = nodes.getAttribute(\"data-precedence\");\n    i = precedences.get(node) || last;\n    i === last && precedences.set(null, nodes);\n    precedences.set(node, nodes);\n    this.count++;\n    last = onUnsuspend.bind(this);\n    nodes.addEventListener(\"load\", last);\n    nodes.addEventListener(\"error\", last);\n    i\n      ? i.parentNode.insertBefore(nodes, i.nextSibling)\n      : ((root = 9 === root.nodeType ? root.head : root),\n        root.insertBefore(nodes, root.firstChild));\n    resource.state.loading |= 4;\n  }\n}\nvar HostTransitionContext = {\n  $$typeof: REACT_CONTEXT_TYPE,\n  Provider: null,\n  Consumer: null,\n  _currentValue: sharedNotPendingObject,\n  _currentValue2: sharedNotPendingObject,\n  _threadCount: 0\n};\nfunction FiberRootNode(\n  containerInfo,\n  tag,\n  hydrate,\n  identifierPrefix,\n  onUncaughtError,\n  onCaughtError,\n  onRecoverableError,\n  formState\n) {\n  this.tag = 1;\n  this.containerInfo = containerInfo;\n  this.finishedWork =\n    this.pingCache =\n    this.current =\n    this.pendingChildren =\n      null;\n  this.timeoutHandle = -1;\n  this.callbackNode =\n    this.next =\n    this.pendingContext =\n    this.context =\n    this.cancelPendingCommit =\n      null;\n  this.callbackPriority = 0;\n  this.expirationTimes = createLaneMap(-1);\n  this.entangledLanes =\n    this.shellSuspendCounter =\n    this.errorRecoveryDisabledLanes =\n    this.finishedLanes =\n    this.expiredLanes =\n    this.warmLanes =\n    this.pingedLanes =\n    this.suspendedLanes =\n    this.pendingLanes =\n      0;\n  this.entanglements = createLaneMap(0);\n  this.hiddenUpdates = createLaneMap(null);\n  this.identifierPrefix = identifierPrefix;\n  this.onUncaughtError = onUncaughtError;\n  this.onCaughtError = onCaughtError;\n  this.onRecoverableError = onRecoverableError;\n  this.pooledCache = null;\n  this.pooledCacheLanes = 0;\n  this.formState = formState;\n  this.incompleteTransitions = new Map();\n}\nfunction createFiberRoot(\n  containerInfo,\n  tag,\n  hydrate,\n  initialChildren,\n  hydrationCallbacks,\n  isStrictMode,\n  identifierPrefix,\n  onUncaughtError,\n  onCaughtError,\n  onRecoverableError,\n  transitionCallbacks,\n  formState\n) {\n  containerInfo = new FiberRootNode(\n    containerInfo,\n    tag,\n    hydrate,\n    identifierPrefix,\n    onUncaughtError,\n    onCaughtError,\n    onRecoverableError,\n    formState\n  );\n  tag = 1;\n  !0 === isStrictMode && (tag |= 24);\n  isStrictMode = createFiberImplClass(3, null, null, tag);\n  containerInfo.current = isStrictMode;\n  isStrictMode.stateNode = containerInfo;\n  tag = createCache();\n  tag.refCount++;\n  containerInfo.pooledCache = tag;\n  tag.refCount++;\n  isStrictMode.memoizedState = {\n    element: initialChildren,\n    isDehydrated: hydrate,\n    cache: tag\n  };\n  initializeUpdateQueue(isStrictMode);\n  return containerInfo;\n}\nfunction getContextForSubtree(parentComponent) {\n  if (!parentComponent) return emptyContextObject;\n  parentComponent = emptyContextObject;\n  return parentComponent;\n}\nfunction updateContainerImpl(\n  rootFiber,\n  lane,\n  element,\n  container,\n  parentComponent,\n  callback\n) {\n  parentComponent = getContextForSubtree(parentComponent);\n  null === container.context\n    ? (container.context = parentComponent)\n    : (container.pendingContext = parentComponent);\n  container = createUpdate(lane);\n  container.payload = { element: element };\n  callback = void 0 === callback ? null : callback;\n  null !== callback && (container.callback = callback);\n  element = enqueueUpdate(rootFiber, container, lane);\n  null !== element &&\n    (scheduleUpdateOnFiber(element, rootFiber, lane),\n    entangleTransitions(element, rootFiber, lane));\n}\nfunction markRetryLaneImpl(fiber, retryLane) {\n  fiber = fiber.memoizedState;\n  if (null !== fiber && null !== fiber.dehydrated) {\n    var a = fiber.retryLane;\n    fiber.retryLane = 0 !== a && a < retryLane ? a : retryLane;\n  }\n}\nfunction markRetryLaneIfNotHydrated(fiber, retryLane) {\n  markRetryLaneImpl(fiber, retryLane);\n  (fiber = fiber.alternate) && markRetryLaneImpl(fiber, retryLane);\n}\nfunction attemptContinuousHydration(fiber) {\n  if (13 === fiber.tag) {\n    var root = enqueueConcurrentRenderForLane(fiber, 67108864);\n    null !== root && scheduleUpdateOnFiber(root, fiber, 67108864);\n    markRetryLaneIfNotHydrated(fiber, 67108864);\n  }\n}\nvar _enabled = !0;\nfunction dispatchDiscreteEvent(\n  domEventName,\n  eventSystemFlags,\n  container,\n  nativeEvent\n) {\n  var prevTransition = ReactSharedInternals.T;\n  ReactSharedInternals.T = null;\n  var previousPriority = ReactDOMSharedInternals.p;\n  try {\n    (ReactDOMSharedInternals.p = 2),\n      dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);\n  } finally {\n    (ReactDOMSharedInternals.p = previousPriority),\n      (ReactSharedInternals.T = prevTransition);\n  }\n}\nfunction dispatchContinuousEvent(\n  domEventName,\n  eventSystemFlags,\n  container,\n  nativeEvent\n) {\n  var prevTransition = ReactSharedInternals.T;\n  ReactSharedInternals.T = null;\n  var previousPriority = ReactDOMSharedInternals.p;\n  try {\n    (ReactDOMSharedInternals.p = 8),\n      dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);\n  } finally {\n    (ReactDOMSharedInternals.p = previousPriority),\n      (ReactSharedInternals.T = prevTransition);\n  }\n}\nfunction dispatchEvent(\n  domEventName,\n  eventSystemFlags,\n  targetContainer,\n  nativeEvent\n) {\n  if (_enabled) {\n    var blockedOn = findInstanceBlockingEvent(nativeEvent);\n    if (null === blockedOn)\n      dispatchEventForPluginEventSystem(\n        domEventName,\n        eventSystemFlags,\n        nativeEvent,\n        return_targetInst,\n        targetContainer\n      ),\n        clearIfContinuousEvent(domEventName, nativeEvent);\n    else if (\n      queueIfContinuousEvent(\n        blockedOn,\n        domEventName,\n        eventSystemFlags,\n        targetContainer,\n        nativeEvent\n      )\n    )\n      nativeEvent.stopPropagation();\n    else if (\n      (clearIfContinuousEvent(domEventName, nativeEvent),\n      eventSystemFlags & 4 &&\n        -1 < discreteReplayableEvents.indexOf(domEventName))\n    ) {\n      for (; null !== blockedOn; ) {\n        var fiber = getInstanceFromNode(blockedOn);\n        if (null !== fiber)\n          switch (fiber.tag) {\n            case 3:\n              fiber = fiber.stateNode;\n              if (fiber.current.memoizedState.isDehydrated) {\n                var lanes = getHighestPriorityLanes(fiber.pendingLanes);\n                if (0 !== lanes) {\n                  var root = fiber;\n                  root.pendingLanes |= 2;\n                  for (root.entangledLanes |= 2; lanes; ) {\n                    var lane = 1 << (31 - clz32(lanes));\n                    root.entanglements[1] |= lane;\n                    lanes &= ~lane;\n                  }\n                  ensureRootIsScheduled(fiber);\n                  0 === (executionContext & 6) &&\n                    ((workInProgressRootRenderTargetTime = now() + 500),\n                    flushSyncWorkAcrossRoots_impl(0, !1));\n                }\n              }\n              break;\n            case 13:\n              (root = enqueueConcurrentRenderForLane(fiber, 2)),\n                null !== root && scheduleUpdateOnFiber(root, fiber, 2),\n                flushSyncWork$1(),\n                markRetryLaneIfNotHydrated(fiber, 2);\n          }\n        fiber = findInstanceBlockingEvent(nativeEvent);\n        null === fiber &&\n          dispatchEventForPluginEventSystem(\n            domEventName,\n            eventSystemFlags,\n            nativeEvent,\n            return_targetInst,\n            targetContainer\n          );\n        if (fiber === blockedOn) break;\n        blockedOn = fiber;\n      }\n      null !== blockedOn && nativeEvent.stopPropagation();\n    } else\n      dispatchEventForPluginEventSystem(\n        domEventName,\n        eventSystemFlags,\n        nativeEvent,\n        null,\n        targetContainer\n      );\n  }\n}\nfunction findInstanceBlockingEvent(nativeEvent) {\n  nativeEvent = getEventTarget(nativeEvent);\n  return findInstanceBlockingTarget(nativeEvent);\n}\nvar return_targetInst = null;\nfunction findInstanceBlockingTarget(targetNode) {\n  return_targetInst = null;\n  targetNode = getClosestInstanceFromNode(targetNode);\n  if (null !== targetNode) {\n    var nearestMounted = getNearestMountedFiber(targetNode);\n    if (null === nearestMounted) targetNode = null;\n    else {\n      var tag = nearestMounted.tag;\n      if (13 === tag) {\n        targetNode = getSuspenseInstanceFromFiber(nearestMounted);\n        if (null !== targetNode) return targetNode;\n        targetNode = null;\n      } else if (3 === tag) {\n        if (nearestMounted.stateNode.current.memoizedState.isDehydrated)\n          return 3 === nearestMounted.tag\n            ? nearestMounted.stateNode.containerInfo\n            : null;\n        targetNode = null;\n      } else nearestMounted !== targetNode && (targetNode = null);\n    }\n  }\n  return_targetInst = targetNode;\n  return null;\n}\nfunction getEventPriority(domEventName) {\n  switch (domEventName) {\n    case \"beforetoggle\":\n    case \"cancel\":\n    case \"click\":\n    case \"close\":\n    case \"contextmenu\":\n    case \"copy\":\n    case \"cut\":\n    case \"auxclick\":\n    case \"dblclick\":\n    case \"dragend\":\n    case \"dragstart\":\n    case \"drop\":\n    case \"focusin\":\n    case \"focusout\":\n    case \"input\":\n    case \"invalid\":\n    case \"keydown\":\n    case \"keypress\":\n    case \"keyup\":\n    case \"mousedown\":\n    case \"mouseup\":\n    case \"paste\":\n    case \"pause\":\n    case \"play\":\n    case \"pointercancel\":\n    case \"pointerdown\":\n    case \"pointerup\":\n    case \"ratechange\":\n    case \"reset\":\n    case \"resize\":\n    case \"seeked\":\n    case \"submit\":\n    case \"toggle\":\n    case \"touchcancel\":\n    case \"touchend\":\n    case \"touchstart\":\n    case \"volumechange\":\n    case \"change\":\n    case \"selectionchange\":\n    case \"textInput\":\n    case \"compositionstart\":\n    case \"compositionend\":\n    case \"compositionupdate\":\n    case \"beforeblur\":\n    case \"afterblur\":\n    case \"beforeinput\":\n    case \"blur\":\n    case \"fullscreenchange\":\n    case \"focus\":\n    case \"hashchange\":\n    case \"popstate\":\n    case \"select\":\n    case \"selectstart\":\n      return 2;\n    case \"drag\":\n    case \"dragenter\":\n    case \"dragexit\":\n    case \"dragleave\":\n    case \"dragover\":\n    case \"mousemove\":\n    case \"mouseout\":\n    case \"mouseover\":\n    case \"pointermove\":\n    case \"pointerout\":\n    case \"pointerover\":\n    case \"scroll\":\n    case \"touchmove\":\n    case \"wheel\":\n    case \"mouseenter\":\n    case \"mouseleave\":\n    case \"pointerenter\":\n    case \"pointerleave\":\n      return 8;\n    case \"message\":\n      switch (getCurrentPriorityLevel()) {\n        case ImmediatePriority:\n          return 2;\n        case UserBlockingPriority:\n          return 8;\n        case NormalPriority$1:\n        case LowPriority:\n          return 32;\n        case IdlePriority:\n          return 268435456;\n        default:\n          return 32;\n      }\n    default:\n      return 32;\n  }\n}\nvar hasScheduledReplayAttempt = !1,\n  queuedFocus = null,\n  queuedDrag = null,\n  queuedMouse = null,\n  queuedPointers = new Map(),\n  queuedPointerCaptures = new Map(),\n  queuedExplicitHydrationTargets = [],\n  discreteReplayableEvents =\n    \"mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset\".split(\n      \" \"\n    );\nfunction clearIfContinuousEvent(domEventName, nativeEvent) {\n  switch (domEventName) {\n    case \"focusin\":\n    case \"focusout\":\n      queuedFocus = null;\n      break;\n    case \"dragenter\":\n    case \"dragleave\":\n      queuedDrag = null;\n      break;\n    case \"mouseover\":\n    case \"mouseout\":\n      queuedMouse = null;\n      break;\n    case \"pointerover\":\n    case \"pointerout\":\n      queuedPointers.delete(nativeEvent.pointerId);\n      break;\n    case \"gotpointercapture\":\n    case \"lostpointercapture\":\n      queuedPointerCaptures.delete(nativeEvent.pointerId);\n  }\n}\nfunction accumulateOrCreateContinuousQueuedReplayableEvent(\n  existingQueuedEvent,\n  blockedOn,\n  domEventName,\n  eventSystemFlags,\n  targetContainer,\n  nativeEvent\n) {\n  if (\n    null === existingQueuedEvent ||\n    existingQueuedEvent.nativeEvent !== nativeEvent\n  )\n    return (\n      (existingQueuedEvent = {\n        blockedOn: blockedOn,\n        domEventName: domEventName,\n        eventSystemFlags: eventSystemFlags,\n        nativeEvent: nativeEvent,\n        targetContainers: [targetContainer]\n      }),\n      null !== blockedOn &&\n        ((blockedOn = getInstanceFromNode(blockedOn)),\n        null !== blockedOn && attemptContinuousHydration(blockedOn)),\n      existingQueuedEvent\n    );\n  existingQueuedEvent.eventSystemFlags |= eventSystemFlags;\n  blockedOn = existingQueuedEvent.targetContainers;\n  null !== targetContainer &&\n    -1 === blockedOn.indexOf(targetContainer) &&\n    blockedOn.push(targetContainer);\n  return existingQueuedEvent;\n}\nfunction queueIfContinuousEvent(\n  blockedOn,\n  domEventName,\n  eventSystemFlags,\n  targetContainer,\n  nativeEvent\n) {\n  switch (domEventName) {\n    case \"focusin\":\n      return (\n        (queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(\n          queuedFocus,\n          blockedOn,\n          domEventName,\n          eventSystemFlags,\n          targetContainer,\n          nativeEvent\n        )),\n        !0\n      );\n    case \"dragenter\":\n      return (\n        (queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(\n          queuedDrag,\n          blockedOn,\n          domEventName,\n          eventSystemFlags,\n          targetContainer,\n          nativeEvent\n        )),\n        !0\n      );\n    case \"mouseover\":\n      return (\n        (queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(\n          queuedMouse,\n          blockedOn,\n          domEventName,\n          eventSystemFlags,\n          targetContainer,\n          nativeEvent\n        )),\n        !0\n      );\n    case \"pointerover\":\n      var pointerId = nativeEvent.pointerId;\n      queuedPointers.set(\n        pointerId,\n        accumulateOrCreateContinuousQueuedReplayableEvent(\n          queuedPointers.get(pointerId) || null,\n          blockedOn,\n          domEventName,\n          eventSystemFlags,\n          targetContainer,\n          nativeEvent\n        )\n      );\n      return !0;\n    case \"gotpointercapture\":\n      return (\n        (pointerId = nativeEvent.pointerId),\n        queuedPointerCaptures.set(\n          pointerId,\n          accumulateOrCreateContinuousQueuedReplayableEvent(\n            queuedPointerCaptures.get(pointerId) || null,\n            blockedOn,\n            domEventName,\n            eventSystemFlags,\n            targetContainer,\n            nativeEvent\n          )\n        ),\n        !0\n      );\n  }\n  return !1;\n}\nfunction attemptExplicitHydrationTarget(queuedTarget) {\n  var targetInst = getClosestInstanceFromNode(queuedTarget.target);\n  if (null !== targetInst) {\n    var nearestMounted = getNearestMountedFiber(targetInst);\n    if (null !== nearestMounted)\n      if (((targetInst = nearestMounted.tag), 13 === targetInst)) {\n        if (\n          ((targetInst = getSuspenseInstanceFromFiber(nearestMounted)),\n          null !== targetInst)\n        ) {\n          queuedTarget.blockedOn = targetInst;\n          runWithPriority(queuedTarget.priority, function () {\n            if (13 === nearestMounted.tag) {\n              var lane = requestUpdateLane(),\n                root = enqueueConcurrentRenderForLane(nearestMounted, lane);\n              null !== root &&\n                scheduleUpdateOnFiber(root, nearestMounted, lane);\n              markRetryLaneIfNotHydrated(nearestMounted, lane);\n            }\n          });\n          return;\n        }\n      } else if (\n        3 === targetInst &&\n        nearestMounted.stateNode.current.memoizedState.isDehydrated\n      ) {\n        queuedTarget.blockedOn =\n          3 === nearestMounted.tag\n            ? nearestMounted.stateNode.containerInfo\n            : null;\n        return;\n      }\n  }\n  queuedTarget.blockedOn = null;\n}\nfunction attemptReplayContinuousQueuedEvent(queuedEvent) {\n  if (null !== queuedEvent.blockedOn) return !1;\n  for (\n    var targetContainers = queuedEvent.targetContainers;\n    0 < targetContainers.length;\n\n  ) {\n    var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.nativeEvent);\n    if (null === nextBlockedOn) {\n      nextBlockedOn = queuedEvent.nativeEvent;\n      var nativeEventClone = new nextBlockedOn.constructor(\n        nextBlockedOn.type,\n        nextBlockedOn\n      );\n      currentReplayingEvent = nativeEventClone;\n      nextBlockedOn.target.dispatchEvent(nativeEventClone);\n      currentReplayingEvent = null;\n    } else\n      return (\n        (targetContainers = getInstanceFromNode(nextBlockedOn)),\n        null !== targetContainers &&\n          attemptContinuousHydration(targetContainers),\n        (queuedEvent.blockedOn = nextBlockedOn),\n        !1\n      );\n    targetContainers.shift();\n  }\n  return !0;\n}\nfunction attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {\n  attemptReplayContinuousQueuedEvent(queuedEvent) && map.delete(key);\n}\nfunction replayUnblockedEvents() {\n  hasScheduledReplayAttempt = !1;\n  null !== queuedFocus &&\n    attemptReplayContinuousQueuedEvent(queuedFocus) &&\n    (queuedFocus = null);\n  null !== queuedDrag &&\n    attemptReplayContinuousQueuedEvent(queuedDrag) &&\n    (queuedDrag = null);\n  null !== queuedMouse &&\n    attemptReplayContinuousQueuedEvent(queuedMouse) &&\n    (queuedMouse = null);\n  queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);\n  queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);\n}\nfunction scheduleCallbackIfUnblocked(queuedEvent, unblocked) {\n  queuedEvent.blockedOn === unblocked &&\n    ((queuedEvent.blockedOn = null),\n    hasScheduledReplayAttempt ||\n      ((hasScheduledReplayAttempt = !0),\n      Scheduler.unstable_scheduleCallback(\n        Scheduler.unstable_NormalPriority,\n        replayUnblockedEvents\n      )));\n}\nvar lastScheduledReplayQueue = null;\nfunction scheduleReplayQueueIfNeeded(formReplayingQueue) {\n  lastScheduledReplayQueue !== formReplayingQueue &&\n    ((lastScheduledReplayQueue = formReplayingQueue),\n    Scheduler.unstable_scheduleCallback(\n      Scheduler.unstable_NormalPriority,\n      function () {\n        lastScheduledReplayQueue === formReplayingQueue &&\n          (lastScheduledReplayQueue = null);\n        for (var i = 0; i < formReplayingQueue.length; i += 3) {\n          var form = formReplayingQueue[i],\n            submitterOrAction = formReplayingQueue[i + 1],\n            formData = formReplayingQueue[i + 2];\n          if (\"function\" !== typeof submitterOrAction)\n            if (null === findInstanceBlockingTarget(submitterOrAction || form))\n              continue;\n            else break;\n          var formInst = getInstanceFromNode(form);\n          null !== formInst &&\n            (formReplayingQueue.splice(i, 3),\n            (i -= 3),\n            startHostTransition(\n              formInst,\n              {\n                pending: !0,\n                data: formData,\n                method: form.method,\n                action: submitterOrAction\n              },\n              submitterOrAction,\n              formData\n            ));\n        }\n      }\n    ));\n}\nfunction retryIfBlockedOn(unblocked) {\n  function unblock(queuedEvent) {\n    return scheduleCallbackIfUnblocked(queuedEvent, unblocked);\n  }\n  null !== queuedFocus && scheduleCallbackIfUnblocked(queuedFocus, unblocked);\n  null !== queuedDrag && scheduleCallbackIfUnblocked(queuedDrag, unblocked);\n  null !== queuedMouse && scheduleCallbackIfUnblocked(queuedMouse, unblocked);\n  queuedPointers.forEach(unblock);\n  queuedPointerCaptures.forEach(unblock);\n  for (var i = 0; i < queuedExplicitHydrationTargets.length; i++) {\n    var queuedTarget = queuedExplicitHydrationTargets[i];\n    queuedTarget.blockedOn === unblocked && (queuedTarget.blockedOn = null);\n  }\n  for (\n    ;\n    0 < queuedExplicitHydrationTargets.length &&\n    ((i = queuedExplicitHydrationTargets[0]), null === i.blockedOn);\n\n  )\n    attemptExplicitHydrationTarget(i),\n      null === i.blockedOn && queuedExplicitHydrationTargets.shift();\n  i = (unblocked.ownerDocument || unblocked).$$reactFormReplay;\n  if (null != i)\n    for (queuedTarget = 0; queuedTarget < i.length; queuedTarget += 3) {\n      var form = i[queuedTarget],\n        submitterOrAction = i[queuedTarget + 1],\n        formProps = form[internalPropsKey] || null;\n      if (\"function\" === typeof submitterOrAction)\n        formProps || scheduleReplayQueueIfNeeded(i);\n      else if (formProps) {\n        var action = null;\n        if (submitterOrAction && submitterOrAction.hasAttribute(\"formAction\"))\n          if (\n            ((form = submitterOrAction),\n            (formProps = submitterOrAction[internalPropsKey] || null))\n          )\n            action = formProps.formAction;\n          else {\n            if (null !== findInstanceBlockingTarget(form)) continue;\n          }\n        else action = formProps.action;\n        \"function\" === typeof action\n          ? (i[queuedTarget + 1] = action)\n          : (i.splice(queuedTarget, 3), (queuedTarget -= 3));\n        scheduleReplayQueueIfNeeded(i);\n      }\n    }\n}\nfunction ReactDOMRoot(internalRoot) {\n  this._internalRoot = internalRoot;\n}\nReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render =\n  function (children) {\n    var root = this._internalRoot;\n    if (null === root) throw Error(formatProdErrorMessage(409));\n    var current = root.current,\n      lane = requestUpdateLane();\n    updateContainerImpl(current, lane, children, root, null, null);\n  };\nReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount =\n  function () {\n    var root = this._internalRoot;\n    if (null !== root) {\n      this._internalRoot = null;\n      var container = root.containerInfo;\n      0 === root.tag && flushPassiveEffects();\n      updateContainerImpl(root.current, 2, null, root, null, null);\n      flushSyncWork$1();\n      container[internalContainerInstanceKey] = null;\n    }\n  };\nfunction ReactDOMHydrationRoot(internalRoot) {\n  this._internalRoot = internalRoot;\n}\nReactDOMHydrationRoot.prototype.unstable_scheduleHydration = function (target) {\n  if (target) {\n    var updatePriority = resolveUpdatePriority();\n    target = { blockedOn: null, target: target, priority: updatePriority };\n    for (\n      var i = 0;\n      i < queuedExplicitHydrationTargets.length &&\n      0 !== updatePriority &&\n      updatePriority < queuedExplicitHydrationTargets[i].priority;\n      i++\n    );\n    queuedExplicitHydrationTargets.splice(i, 0, target);\n    0 === i && attemptExplicitHydrationTarget(target);\n  }\n};\nvar isomorphicReactPackageVersion$jscomp$inline_1686 = React.version;\nif (\n  \"19.0.0\" !==\n  isomorphicReactPackageVersion$jscomp$inline_1686\n)\n  throw Error(\n    formatProdErrorMessage(\n      527,\n      isomorphicReactPackageVersion$jscomp$inline_1686,\n      \"19.0.0\"\n    )\n  );\nReactDOMSharedInternals.findDOMNode = function (componentOrElement) {\n  var fiber = componentOrElement._reactInternals;\n  if (void 0 === fiber) {\n    if (\"function\" === typeof componentOrElement.render)\n      throw Error(formatProdErrorMessage(188));\n    componentOrElement = Object.keys(componentOrElement).join(\",\");\n    throw Error(formatProdErrorMessage(268, componentOrElement));\n  }\n  componentOrElement = findCurrentFiberUsingSlowPath(fiber);\n  componentOrElement =\n    null !== componentOrElement\n      ? findCurrentHostFiberImpl(componentOrElement)\n      : null;\n  componentOrElement =\n    null === componentOrElement ? null : componentOrElement.stateNode;\n  return componentOrElement;\n};\nvar internals$jscomp$inline_2165 = {\n  bundleType: 0,\n  version: \"19.0.0\",\n  rendererPackageName: \"react-dom\",\n  currentDispatcherRef: ReactSharedInternals,\n  findFiberByHostInstance: getClosestInstanceFromNode,\n  reconcilerVersion: \"19.0.0\"\n};\nif (\"undefined\" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {\n  var hook$jscomp$inline_2166 = __REACT_DEVTOOLS_GLOBAL_HOOK__;\n  if (\n    !hook$jscomp$inline_2166.isDisabled &&\n    hook$jscomp$inline_2166.supportsFiber\n  )\n    try {\n      (rendererID = hook$jscomp$inline_2166.inject(\n        internals$jscomp$inline_2165\n      )),\n        (injectedHook = hook$jscomp$inline_2166);\n    } catch (err) {}\n}\nexports.createRoot = function (container, options) {\n  if (!isValidContainer(container)) throw Error(formatProdErrorMessage(299));\n  var isStrictMode = !1,\n    identifierPrefix = \"\",\n    onUncaughtError = defaultOnUncaughtError,\n    onCaughtError = defaultOnCaughtError,\n    onRecoverableError = defaultOnRecoverableError,\n    transitionCallbacks = null;\n  null !== options &&\n    void 0 !== options &&\n    (!0 === options.unstable_strictMode && (isStrictMode = !0),\n    void 0 !== options.identifierPrefix &&\n      (identifierPrefix = options.identifierPrefix),\n    void 0 !== options.onUncaughtError &&\n      (onUncaughtError = options.onUncaughtError),\n    void 0 !== options.onCaughtError && (onCaughtError = options.onCaughtError),\n    void 0 !== options.onRecoverableError &&\n      (onRecoverableError = options.onRecoverableError),\n    void 0 !== options.unstable_transitionCallbacks &&\n      (transitionCallbacks = options.unstable_transitionCallbacks));\n  options = createFiberRoot(\n    container,\n    1,\n    !1,\n    null,\n    null,\n    isStrictMode,\n    identifierPrefix,\n    onUncaughtError,\n    onCaughtError,\n    onRecoverableError,\n    transitionCallbacks,\n    null\n  );\n  container[internalContainerInstanceKey] = options.current;\n  listenToAllSupportedEvents(\n    8 === container.nodeType ? container.parentNode : container\n  );\n  return new ReactDOMRoot(options);\n};\nexports.hydrateRoot = function (container, initialChildren, options) {\n  if (!isValidContainer(container)) throw Error(formatProdErrorMessage(299));\n  var isStrictMode = !1,\n    identifierPrefix = \"\",\n    onUncaughtError = defaultOnUncaughtError,\n    onCaughtError = defaultOnCaughtError,\n    onRecoverableError = defaultOnRecoverableError,\n    transitionCallbacks = null,\n    formState = null;\n  null !== options &&\n    void 0 !== options &&\n    (!0 === options.unstable_strictMode && (isStrictMode = !0),\n    void 0 !== options.identifierPrefix &&\n      (identifierPrefix = options.identifierPrefix),\n    void 0 !== options.onUncaughtError &&\n      (onUncaughtError = options.onUncaughtError),\n    void 0 !== options.onCaughtError && (onCaughtError = options.onCaughtError),\n    void 0 !== options.onRecoverableError &&\n      (onRecoverableError = options.onRecoverableError),\n    void 0 !== options.unstable_transitionCallbacks &&\n      (transitionCallbacks = options.unstable_transitionCallbacks),\n    void 0 !== options.formState && (formState = options.formState));\n  initialChildren = createFiberRoot(\n    container,\n    1,\n    !0,\n    initialChildren,\n    null != options ? options : null,\n    isStrictMode,\n    identifierPrefix,\n    onUncaughtError,\n    onCaughtError,\n    onRecoverableError,\n    transitionCallbacks,\n    formState\n  );\n  initialChildren.context = getContextForSubtree(null);\n  options = initialChildren.current;\n  isStrictMode = requestUpdateLane();\n  identifierPrefix = createUpdate(isStrictMode);\n  identifierPrefix.callback = null;\n  enqueueUpdate(options, identifierPrefix, isStrictMode);\n  initialChildren.current.lanes = isStrictMode;\n  markRootUpdated$1(initialChildren, isStrictMode);\n  ensureRootIsScheduled(initialChildren);\n  container[internalContainerInstanceKey] = initialChildren.current;\n  listenToAllSupportedEvents(container);\n  return new ReactDOMHydrationRoot(initialChildren);\n};\nexports.version = \"19.0.0\";\n","/**\n * @license React\n * react-dom.production.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\"use strict\";\nvar React = require(\"react\");\nfunction formatProdErrorMessage(code) {\n  var url = \"https://react.dev/errors/\" + code;\n  if (1 < arguments.length) {\n    url += \"?args[]=\" + encodeURIComponent(arguments[1]);\n    for (var i = 2; i < arguments.length; i++)\n      url += \"&args[]=\" + encodeURIComponent(arguments[i]);\n  }\n  return (\n    \"Minified React error #\" +\n    code +\n    \"; visit \" +\n    url +\n    \" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\"\n  );\n}\nfunction noop() {}\nvar Internals = {\n    d: {\n      f: noop,\n      r: function () {\n        throw Error(formatProdErrorMessage(522));\n      },\n      D: noop,\n      C: noop,\n      L: noop,\n      m: noop,\n      X: noop,\n      S: noop,\n      M: noop\n    },\n    p: 0,\n    findDOMNode: null\n  },\n  REACT_PORTAL_TYPE = Symbol.for(\"react.portal\");\nfunction createPortal$1(children, containerInfo, implementation) {\n  var key =\n    3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;\n  return {\n    $$typeof: REACT_PORTAL_TYPE,\n    key: null == key ? null : \"\" + key,\n    children: children,\n    containerInfo: containerInfo,\n    implementation: implementation\n  };\n}\nvar ReactSharedInternals =\n  React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;\nfunction getCrossOriginStringAs(as, input) {\n  if (\"font\" === as) return \"\";\n  if (\"string\" === typeof input)\n    return \"use-credentials\" === input ? input : \"\";\n}\nexports.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE =\n  Internals;\nexports.createPortal = function (children, container) {\n  var key =\n    2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;\n  if (\n    !container ||\n    (1 !== container.nodeType &&\n      9 !== container.nodeType &&\n      11 !== container.nodeType)\n  )\n    throw Error(formatProdErrorMessage(299));\n  return createPortal$1(children, container, null, key);\n};\nexports.flushSync = function (fn) {\n  var previousTransition = ReactSharedInternals.T,\n    previousUpdatePriority = Internals.p;\n  try {\n    if (((ReactSharedInternals.T = null), (Internals.p = 2), fn)) return fn();\n  } finally {\n    (ReactSharedInternals.T = previousTransition),\n      (Internals.p = previousUpdatePriority),\n      Internals.d.f();\n  }\n};\nexports.preconnect = function (href, options) {\n  \"string\" === typeof href &&\n    (options\n      ? ((options = options.crossOrigin),\n        (options =\n          \"string\" === typeof options\n            ? \"use-credentials\" === options\n              ? options\n              : \"\"\n            : void 0))\n      : (options = null),\n    Internals.d.C(href, options));\n};\nexports.prefetchDNS = function (href) {\n  \"string\" === typeof href && Internals.d.D(href);\n};\nexports.preinit = function (href, options) {\n  if (\"string\" === typeof href && options && \"string\" === typeof options.as) {\n    var as = options.as,\n      crossOrigin = getCrossOriginStringAs(as, options.crossOrigin),\n      integrity =\n        \"string\" === typeof options.integrity ? options.integrity : void 0,\n      fetchPriority =\n        \"string\" === typeof options.fetchPriority\n          ? options.fetchPriority\n          : void 0;\n    \"style\" === as\n      ? Internals.d.S(\n          href,\n          \"string\" === typeof options.precedence ? options.precedence : void 0,\n          {\n            crossOrigin: crossOrigin,\n            integrity: integrity,\n            fetchPriority: fetchPriority\n          }\n        )\n      : \"script\" === as &&\n        Internals.d.X(href, {\n          crossOrigin: crossOrigin,\n          integrity: integrity,\n          fetchPriority: fetchPriority,\n          nonce: \"string\" === typeof options.nonce ? options.nonce : void 0\n        });\n  }\n};\nexports.preinitModule = function (href, options) {\n  if (\"string\" === typeof href)\n    if (\"object\" === typeof options && null !== options) {\n      if (null == options.as || \"script\" === options.as) {\n        var crossOrigin = getCrossOriginStringAs(\n          options.as,\n          options.crossOrigin\n        );\n        Internals.d.M(href, {\n          crossOrigin: crossOrigin,\n          integrity:\n            \"string\" === typeof options.integrity ? options.integrity : void 0,\n          nonce: \"string\" === typeof options.nonce ? options.nonce : void 0\n        });\n      }\n    } else null == options && Internals.d.M(href);\n};\nexports.preload = function (href, options) {\n  if (\n    \"string\" === typeof href &&\n    \"object\" === typeof options &&\n    null !== options &&\n    \"string\" === typeof options.as\n  ) {\n    var as = options.as,\n      crossOrigin = getCrossOriginStringAs(as, options.crossOrigin);\n    Internals.d.L(href, as, {\n      crossOrigin: crossOrigin,\n      integrity:\n        \"string\" === typeof options.integrity ? options.integrity : void 0,\n      nonce: \"string\" === typeof options.nonce ? options.nonce : void 0,\n      type: \"string\" === typeof options.type ? options.type : void 0,\n      fetchPriority:\n        \"string\" === typeof options.fetchPriority\n          ? options.fetchPriority\n          : void 0,\n      referrerPolicy:\n        \"string\" === typeof options.referrerPolicy\n          ? options.referrerPolicy\n          : void 0,\n      imageSrcSet:\n        \"string\" === typeof options.imageSrcSet ? options.imageSrcSet : void 0,\n      imageSizes:\n        \"string\" === typeof options.imageSizes ? options.imageSizes : void 0,\n      media: \"string\" === typeof options.media ? options.media : void 0\n    });\n  }\n};\nexports.preloadModule = function (href, options) {\n  if (\"string\" === typeof href)\n    if (options) {\n      var crossOrigin = getCrossOriginStringAs(options.as, options.crossOrigin);\n      Internals.d.m(href, {\n        as:\n          \"string\" === typeof options.as && \"script\" !== options.as\n            ? options.as\n            : void 0,\n        crossOrigin: crossOrigin,\n        integrity:\n          \"string\" === typeof options.integrity ? options.integrity : void 0\n      });\n    } else Internals.d.m(href);\n};\nexports.requestFormReset = function (form) {\n  Internals.d.r(form);\n};\nexports.unstable_batchedUpdates = function (fn, a) {\n  return fn(a);\n};\nexports.useFormState = function (action, initialState, permalink) {\n  return ReactSharedInternals.H.useFormState(action, initialState, permalink);\n};\nexports.useFormStatus = function () {\n  return ReactSharedInternals.H.useHostTransitionStatus();\n};\nexports.version = \"19.0.0\";\n","'use strict';\n\nfunction checkDCE() {\n  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n  if (\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'\n  ) {\n    return;\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    // This branch is unreachable because this function is only called\n    // in production, but the condition is true only in development.\n    // Therefore if the branch is still here, dead code elimination wasn't\n    // properly applied.\n    // Don't change the message. React DevTools relies on it. Also make sure\n    // this message doesn't occur elsewhere in this function, or it will cause\n    // a false positive.\n    throw new Error('^_^');\n  }\n  try {\n    // Verify that the code above has been dead code eliminated (DCE'd).\n    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);\n  } catch (err) {\n    // DevTools shouldn't crash React, no matter what.\n    // We should still report in case we break this code.\n    console.error(err);\n  }\n}\n\nif (process.env.NODE_ENV === 'production') {\n  // DCE check should happen before ReactDOM bundle executes so that\n  // DevTools can report bad minification during injection.\n  checkDCE();\n  module.exports = require('./cjs/react-dom-client.production.js');\n} else {\n  module.exports = require('./cjs/react-dom-client.development.js');\n}\n","'use strict';\n\nfunction checkDCE() {\n  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n  if (\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'\n  ) {\n    return;\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    // This branch is unreachable because this function is only called\n    // in production, but the condition is true only in development.\n    // Therefore if the branch is still here, dead code elimination wasn't\n    // properly applied.\n    // Don't change the message. React DevTools relies on it. Also make sure\n    // this message doesn't occur elsewhere in this function, or it will cause\n    // a false positive.\n    throw new Error('^_^');\n  }\n  try {\n    // Verify that the code above has been dead code eliminated (DCE'd).\n    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);\n  } catch (err) {\n    // DevTools shouldn't crash React, no matter what.\n    // We should still report in case we break this code.\n    console.error(err);\n  }\n}\n\nif (process.env.NODE_ENV === 'production') {\n  // DCE check should happen before ReactDOM bundle executes so that\n  // DevTools can report bad minification during injection.\n  checkDCE();\n  module.exports = require('./cjs/react-dom.production.js');\n} else {\n  module.exports = require('./cjs/react-dom.development.js');\n}\n","/**\n * RegExp to match cookie-name in RFC 6265 sec 4.1.1\n * This refers out to the obsoleted definition of token in RFC 2616 sec 2.2\n * which has been replaced by the token definition in RFC 7230 appendix B.\n *\n * cookie-name       = token\n * token             = 1*tchar\n * tchar             = \"!\" / \"#\" / \"$\" / \"%\" / \"&\" / \"'\" /\n *                     \"*\" / \"+\" / \"-\" / \".\" / \"^\" / \"_\" /\n *                     \"`\" / \"|\" / \"~\" / DIGIT / ALPHA\n *\n * Note: Allowing more characters - https://github.com/jshttp/cookie/issues/191\n * Allow same range as cookie value, except `=`, which delimits end of name.\n */\nconst cookieNameRegExp = /^[\\u0021-\\u003A\\u003C\\u003E-\\u007E]+$/;\n\n/**\n * RegExp to match cookie-value in RFC 6265 sec 4.1.1\n *\n * cookie-value      = *cookie-octet / ( DQUOTE *cookie-octet DQUOTE )\n * cookie-octet      = %x21 / %x23-2B / %x2D-3A / %x3C-5B / %x5D-7E\n *                     ; US-ASCII characters excluding CTLs,\n *                     ; whitespace DQUOTE, comma, semicolon,\n *                     ; and backslash\n *\n * Allowing more characters: https://github.com/jshttp/cookie/issues/191\n * Comma, backslash, and DQUOTE are not part of the parsing algorithm.\n */\nconst cookieValueRegExp = /^[\\u0021-\\u003A\\u003C-\\u007E]*$/;\n\n/**\n * RegExp to match domain-value in RFC 6265 sec 4.1.1\n *\n * domain-value      = <subdomain>\n *                     ; defined in [RFC1034], Section 3.5, as\n *                     ; enhanced by [RFC1123], Section 2.1\n * <subdomain>       = <label> | <subdomain> \".\" <label>\n * <label>           = <let-dig> [ [ <ldh-str> ] <let-dig> ]\n *                     Labels must be 63 characters or less.\n *                     'let-dig' not 'letter' in the first char, per RFC1123\n * <ldh-str>         = <let-dig-hyp> | <let-dig-hyp> <ldh-str>\n * <let-dig-hyp>     = <let-dig> | \"-\"\n * <let-dig>         = <letter> | <digit>\n * <letter>          = any one of the 52 alphabetic characters A through Z in\n *                     upper case and a through z in lower case\n * <digit>           = any one of the ten digits 0 through 9\n *\n * Keep support for leading dot: https://github.com/jshttp/cookie/issues/173\n *\n * > (Note that a leading %x2E (\".\"), if present, is ignored even though that\n * character is not permitted, but a trailing %x2E (\".\"), if present, will\n * cause the user agent to ignore the attribute.)\n */\nconst domainValueRegExp =\n  /^([.]?[a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?)([.][a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?)*$/i;\n\n/**\n * RegExp to match path-value in RFC 6265 sec 4.1.1\n *\n * path-value        = <any CHAR except CTLs or \";\">\n * CHAR              = %x01-7F\n *                     ; defined in RFC 5234 appendix B.1\n */\nconst pathValueRegExp = /^[\\u0020-\\u003A\\u003D-\\u007E]*$/;\n\nconst __toString = Object.prototype.toString;\n\nconst NullObject = /* @__PURE__ */ (() => {\n  const C = function () {};\n  C.prototype = Object.create(null);\n  return C;\n})() as unknown as { new (): any };\n\n/**\n * Parse options.\n */\nexport interface ParseOptions {\n  /**\n   * Specifies a function that will be used to decode a [cookie-value](https://datatracker.ietf.org/doc/html/rfc6265#section-4.1.1).\n   * Since the value of a cookie has a limited character set (and must be a simple string), this function can be used to decode\n   * a previously-encoded cookie value into a JavaScript string.\n   *\n   * The default function is the global `decodeURIComponent`, wrapped in a `try..catch`. If an error\n   * is thrown it will return the cookie's original value. If you provide your own encode/decode\n   * scheme you must ensure errors are appropriately handled.\n   *\n   * @default decode\n   */\n  decode?: (str: string) => string | undefined;\n}\n\n/**\n * Parse a cookie header.\n *\n * Parse the given cookie header string into an object\n * The object has the various cookies as keys(names) => values\n */\nexport function parse(\n  str: string,\n  options?: ParseOptions,\n): Record<string, string | undefined> {\n  const obj: Record<string, string | undefined> = new NullObject();\n  const len = str.length;\n  // RFC 6265 sec 4.1.1, RFC 2616 2.2 defines a cookie name consists of one char minimum, plus '='.\n  if (len < 2) return obj;\n\n  const dec = options?.decode || decode;\n  let index = 0;\n\n  do {\n    const eqIdx = str.indexOf(\"=\", index);\n    if (eqIdx === -1) break; // No more cookie pairs.\n\n    const colonIdx = str.indexOf(\";\", index);\n    const endIdx = colonIdx === -1 ? len : colonIdx;\n\n    if (eqIdx > endIdx) {\n      // backtrack on prior semicolon\n      index = str.lastIndexOf(\";\", eqIdx - 1) + 1;\n      continue;\n    }\n\n    const keyStartIdx = startIndex(str, index, eqIdx);\n    const keyEndIdx = endIndex(str, eqIdx, keyStartIdx);\n    const key = str.slice(keyStartIdx, keyEndIdx);\n\n    // only assign once\n    if (obj[key] === undefined) {\n      let valStartIdx = startIndex(str, eqIdx + 1, endIdx);\n      let valEndIdx = endIndex(str, endIdx, valStartIdx);\n\n      const value = dec(str.slice(valStartIdx, valEndIdx));\n      obj[key] = value;\n    }\n\n    index = endIdx + 1;\n  } while (index < len);\n\n  return obj;\n}\n\nfunction startIndex(str: string, index: number, max: number) {\n  do {\n    const code = str.charCodeAt(index);\n    if (code !== 0x20 /*   */ && code !== 0x09 /* \\t */) return index;\n  } while (++index < max);\n  return max;\n}\n\nfunction endIndex(str: string, index: number, min: number) {\n  while (index > min) {\n    const code = str.charCodeAt(--index);\n    if (code !== 0x20 /*   */ && code !== 0x09 /* \\t */) return index + 1;\n  }\n  return min;\n}\n\n/**\n * Serialize options.\n */\nexport interface SerializeOptions {\n  /**\n   * Specifies a function that will be used to encode a [cookie-value](https://datatracker.ietf.org/doc/html/rfc6265#section-4.1.1).\n   * Since value of a cookie has a limited character set (and must be a simple string), this function can be used to encode\n   * a value into a string suited for a cookie's value, and should mirror `decode` when parsing.\n   *\n   * @default encodeURIComponent\n   */\n  encode?: (str: string) => string;\n  /**\n   * Specifies the `number` (in seconds) to be the value for the [`Max-Age` `Set-Cookie` attribute](https://tools.ietf.org/html/rfc6265#section-5.2.2).\n   *\n   * The [cookie storage model specification](https://tools.ietf.org/html/rfc6265#section-5.3) states that if both `expires` and\n   * `maxAge` are set, then `maxAge` takes precedence, but it is possible not all clients by obey this,\n   * so if both are set, they should point to the same date and time.\n   */\n  maxAge?: number;\n  /**\n   * Specifies the `Date` object to be the value for the [`Expires` `Set-Cookie` attribute](https://tools.ietf.org/html/rfc6265#section-5.2.1).\n   * When no expiration is set clients consider this a \"non-persistent cookie\" and delete it the current session is over.\n   *\n   * The [cookie storage model specification](https://tools.ietf.org/html/rfc6265#section-5.3) states that if both `expires` and\n   * `maxAge` are set, then `maxAge` takes precedence, but it is possible not all clients by obey this,\n   * so if both are set, they should point to the same date and time.\n   */\n  expires?: Date;\n  /**\n   * Specifies the value for the [`Domain` `Set-Cookie` attribute](https://tools.ietf.org/html/rfc6265#section-5.2.3).\n   * When no domain is set clients consider the cookie to apply to the current domain only.\n   */\n  domain?: string;\n  /**\n   * Specifies the value for the [`Path` `Set-Cookie` attribute](https://tools.ietf.org/html/rfc6265#section-5.2.4).\n   * When no path is set, the path is considered the [\"default path\"](https://tools.ietf.org/html/rfc6265#section-5.1.4).\n   */\n  path?: string;\n  /**\n   * Enables the [`HttpOnly` `Set-Cookie` attribute](https://tools.ietf.org/html/rfc6265#section-5.2.6).\n   * When enabled, clients will not allow client-side JavaScript to see the cookie in `document.cookie`.\n   */\n  httpOnly?: boolean;\n  /**\n   * Enables the [`Secure` `Set-Cookie` attribute](https://tools.ietf.org/html/rfc6265#section-5.2.5).\n   * When enabled, clients will only send the cookie back if the browser has a HTTPS connection.\n   */\n  secure?: boolean;\n  /**\n   * Enables the [`Partitioned` `Set-Cookie` attribute](https://tools.ietf.org/html/draft-cutler-httpbis-partitioned-cookies/).\n   * When enabled, clients will only send the cookie back when the current domain _and_ top-level domain matches.\n   *\n   * This is an attribute that has not yet been fully standardized, and may change in the future.\n   * This also means clients may ignore this attribute until they understand it. More information\n   * about can be found in [the proposal](https://github.com/privacycg/CHIPS).\n   */\n  partitioned?: boolean;\n  /**\n   * Specifies the value for the [`Priority` `Set-Cookie` attribute](https://tools.ietf.org/html/draft-west-cookie-priority-00#section-4.1).\n   *\n   * - `'low'` will set the `Priority` attribute to `Low`.\n   * - `'medium'` will set the `Priority` attribute to `Medium`, the default priority when not set.\n   * - `'high'` will set the `Priority` attribute to `High`.\n   *\n   * More information about priority levels can be found in [the specification](https://tools.ietf.org/html/draft-west-cookie-priority-00#section-4.1).\n   */\n  priority?: \"low\" | \"medium\" | \"high\";\n  /**\n   * Specifies the value for the [`SameSite` `Set-Cookie` attribute](https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-09#section-5.4.7).\n   *\n   * - `true` will set the `SameSite` attribute to `Strict` for strict same site enforcement.\n   * - `'lax'` will set the `SameSite` attribute to `Lax` for lax same site enforcement.\n   * - `'none'` will set the `SameSite` attribute to `None` for an explicit cross-site cookie.\n   * - `'strict'` will set the `SameSite` attribute to `Strict` for strict same site enforcement.\n   *\n   * More information about enforcement levels can be found in [the specification](https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-09#section-5.4.7).\n   */\n  sameSite?: boolean | \"lax\" | \"strict\" | \"none\";\n}\n\n/**\n * Serialize data into a cookie header.\n *\n * Serialize a name value pair into a cookie string suitable for\n * http headers. An optional options object specifies cookie parameters.\n *\n * serialize('foo', 'bar', { httpOnly: true })\n *   => \"foo=bar; httpOnly\"\n */\nexport function serialize(\n  name: string,\n  val: string,\n  options?: SerializeOptions,\n): string {\n  const enc = options?.encode || encodeURIComponent;\n\n  if (!cookieNameRegExp.test(name)) {\n    throw new TypeError(`argument name is invalid: ${name}`);\n  }\n\n  const value = enc(val);\n\n  if (!cookieValueRegExp.test(value)) {\n    throw new TypeError(`argument val is invalid: ${val}`);\n  }\n\n  let str = name + \"=\" + value;\n  if (!options) return str;\n\n  if (options.maxAge !== undefined) {\n    if (!Number.isInteger(options.maxAge)) {\n      throw new TypeError(`option maxAge is invalid: ${options.maxAge}`);\n    }\n\n    str += \"; Max-Age=\" + options.maxAge;\n  }\n\n  if (options.domain) {\n    if (!domainValueRegExp.test(options.domain)) {\n      throw new TypeError(`option domain is invalid: ${options.domain}`);\n    }\n\n    str += \"; Domain=\" + options.domain;\n  }\n\n  if (options.path) {\n    if (!pathValueRegExp.test(options.path)) {\n      throw new TypeError(`option path is invalid: ${options.path}`);\n    }\n\n    str += \"; Path=\" + options.path;\n  }\n\n  if (options.expires) {\n    if (\n      !isDate(options.expires) ||\n      !Number.isFinite(options.expires.valueOf())\n    ) {\n      throw new TypeError(`option expires is invalid: ${options.expires}`);\n    }\n\n    str += \"; Expires=\" + options.expires.toUTCString();\n  }\n\n  if (options.httpOnly) {\n    str += \"; HttpOnly\";\n  }\n\n  if (options.secure) {\n    str += \"; Secure\";\n  }\n\n  if (options.partitioned) {\n    str += \"; Partitioned\";\n  }\n\n  if (options.priority) {\n    const priority =\n      typeof options.priority === \"string\"\n        ? options.priority.toLowerCase()\n        : undefined;\n    switch (priority) {\n      case \"low\":\n        str += \"; Priority=Low\";\n        break;\n      case \"medium\":\n        str += \"; Priority=Medium\";\n        break;\n      case \"high\":\n        str += \"; Priority=High\";\n        break;\n      default:\n        throw new TypeError(`option priority is invalid: ${options.priority}`);\n    }\n  }\n\n  if (options.sameSite) {\n    const sameSite =\n      typeof options.sameSite === \"string\"\n        ? options.sameSite.toLowerCase()\n        : options.sameSite;\n    switch (sameSite) {\n      case true:\n      case \"strict\":\n        str += \"; SameSite=Strict\";\n        break;\n      case \"lax\":\n        str += \"; SameSite=Lax\";\n        break;\n      case \"none\":\n        str += \"; SameSite=None\";\n        break;\n      default:\n        throw new TypeError(`option sameSite is invalid: ${options.sameSite}`);\n    }\n  }\n\n  return str;\n}\n\n/**\n * URL-decode string value. Optimized to skip native call when no %.\n */\nfunction decode(str: string): string {\n  if (str.indexOf(\"%\") === -1) return str;\n\n  try {\n    return decodeURIComponent(str);\n  } catch (e) {\n    return str;\n  }\n}\n\n/**\n * Determine if value is a Date.\n */\nfunction isDate(val: any): val is Date {\n  return __toString.call(val) === \"[object Date]\";\n}\n","/**\n * @license React\n * react-jsx-runtime.production.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\"use strict\";\nvar REACT_ELEMENT_TYPE = Symbol.for(\"react.transitional.element\"),\n  REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\");\nfunction jsxProd(type, config, maybeKey) {\n  var key = null;\n  void 0 !== maybeKey && (key = \"\" + maybeKey);\n  void 0 !== config.key && (key = \"\" + config.key);\n  if (\"key\" in config) {\n    maybeKey = {};\n    for (var propName in config)\n      \"key\" !== propName && (maybeKey[propName] = config[propName]);\n  } else maybeKey = config;\n  config = maybeKey.ref;\n  return {\n    $$typeof: REACT_ELEMENT_TYPE,\n    type: type,\n    key: key,\n    ref: void 0 !== config ? config : null,\n    props: maybeKey\n  };\n}\nexports.Fragment = REACT_FRAGMENT_TYPE;\nexports.jsx = jsxProd;\nexports.jsxs = jsxProd;\n","/**\n * @license React\n * react.production.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\"use strict\";\nvar REACT_ELEMENT_TYPE = Symbol.for(\"react.transitional.element\"),\n  REACT_PORTAL_TYPE = Symbol.for(\"react.portal\"),\n  REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\"),\n  REACT_STRICT_MODE_TYPE = Symbol.for(\"react.strict_mode\"),\n  REACT_PROFILER_TYPE = Symbol.for(\"react.profiler\"),\n  REACT_CONSUMER_TYPE = Symbol.for(\"react.consumer\"),\n  REACT_CONTEXT_TYPE = Symbol.for(\"react.context\"),\n  REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\"),\n  REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\"),\n  REACT_MEMO_TYPE = Symbol.for(\"react.memo\"),\n  REACT_LAZY_TYPE = Symbol.for(\"react.lazy\"),\n  MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nfunction getIteratorFn(maybeIterable) {\n  if (null === maybeIterable || \"object\" !== typeof maybeIterable) return null;\n  maybeIterable =\n    (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||\n    maybeIterable[\"@@iterator\"];\n  return \"function\" === typeof maybeIterable ? maybeIterable : null;\n}\nvar ReactNoopUpdateQueue = {\n    isMounted: function () {\n      return !1;\n    },\n    enqueueForceUpdate: function () {},\n    enqueueReplaceState: function () {},\n    enqueueSetState: function () {}\n  },\n  assign = Object.assign,\n  emptyObject = {};\nfunction Component(props, context, updater) {\n  this.props = props;\n  this.context = context;\n  this.refs = emptyObject;\n  this.updater = updater || ReactNoopUpdateQueue;\n}\nComponent.prototype.isReactComponent = {};\nComponent.prototype.setState = function (partialState, callback) {\n  if (\n    \"object\" !== typeof partialState &&\n    \"function\" !== typeof partialState &&\n    null != partialState\n  )\n    throw Error(\n      \"takes an object of state variables to update or a function which returns an object of state variables.\"\n    );\n  this.updater.enqueueSetState(this, partialState, callback, \"setState\");\n};\nComponent.prototype.forceUpdate = function (callback) {\n  this.updater.enqueueForceUpdate(this, callback, \"forceUpdate\");\n};\nfunction ComponentDummy() {}\nComponentDummy.prototype = Component.prototype;\nfunction PureComponent(props, context, updater) {\n  this.props = props;\n  this.context = context;\n  this.refs = emptyObject;\n  this.updater = updater || ReactNoopUpdateQueue;\n}\nvar pureComponentPrototype = (PureComponent.prototype = new ComponentDummy());\npureComponentPrototype.constructor = PureComponent;\nassign(pureComponentPrototype, Component.prototype);\npureComponentPrototype.isPureReactComponent = !0;\nvar isArrayImpl = Array.isArray,\n  ReactSharedInternals = { H: null, A: null, T: null, S: null },\n  hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction ReactElement(type, key, self, source, owner, props) {\n  self = props.ref;\n  return {\n    $$typeof: REACT_ELEMENT_TYPE,\n    type: type,\n    key: key,\n    ref: void 0 !== self ? self : null,\n    props: props\n  };\n}\nfunction cloneAndReplaceKey(oldElement, newKey) {\n  return ReactElement(\n    oldElement.type,\n    newKey,\n    void 0,\n    void 0,\n    void 0,\n    oldElement.props\n  );\n}\nfunction isValidElement(object) {\n  return (\n    \"object\" === typeof object &&\n    null !== object &&\n    object.$$typeof === REACT_ELEMENT_TYPE\n  );\n}\nfunction escape(key) {\n  var escaperLookup = { \"=\": \"=0\", \":\": \"=2\" };\n  return (\n    \"$\" +\n    key.replace(/[=:]/g, function (match) {\n      return escaperLookup[match];\n    })\n  );\n}\nvar userProvidedKeyEscapeRegex = /\\/+/g;\nfunction getElementKey(element, index) {\n  return \"object\" === typeof element && null !== element && null != element.key\n    ? escape(\"\" + element.key)\n    : index.toString(36);\n}\nfunction noop$1() {}\nfunction resolveThenable(thenable) {\n  switch (thenable.status) {\n    case \"fulfilled\":\n      return thenable.value;\n    case \"rejected\":\n      throw thenable.reason;\n    default:\n      switch (\n        (\"string\" === typeof thenable.status\n          ? thenable.then(noop$1, noop$1)\n          : ((thenable.status = \"pending\"),\n            thenable.then(\n              function (fulfilledValue) {\n                \"pending\" === thenable.status &&\n                  ((thenable.status = \"fulfilled\"),\n                  (thenable.value = fulfilledValue));\n              },\n              function (error) {\n                \"pending\" === thenable.status &&\n                  ((thenable.status = \"rejected\"), (thenable.reason = error));\n              }\n            )),\n        thenable.status)\n      ) {\n        case \"fulfilled\":\n          return thenable.value;\n        case \"rejected\":\n          throw thenable.reason;\n      }\n  }\n  throw thenable;\n}\nfunction mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {\n  var type = typeof children;\n  if (\"undefined\" === type || \"boolean\" === type) children = null;\n  var invokeCallback = !1;\n  if (null === children) invokeCallback = !0;\n  else\n    switch (type) {\n      case \"bigint\":\n      case \"string\":\n      case \"number\":\n        invokeCallback = !0;\n        break;\n      case \"object\":\n        switch (children.$$typeof) {\n          case REACT_ELEMENT_TYPE:\n          case REACT_PORTAL_TYPE:\n            invokeCallback = !0;\n            break;\n          case REACT_LAZY_TYPE:\n            return (\n              (invokeCallback = children._init),\n              mapIntoArray(\n                invokeCallback(children._payload),\n                array,\n                escapedPrefix,\n                nameSoFar,\n                callback\n              )\n            );\n        }\n    }\n  if (invokeCallback)\n    return (\n      (callback = callback(children)),\n      (invokeCallback =\n        \"\" === nameSoFar ? \".\" + getElementKey(children, 0) : nameSoFar),\n      isArrayImpl(callback)\n        ? ((escapedPrefix = \"\"),\n          null != invokeCallback &&\n            (escapedPrefix =\n              invokeCallback.replace(userProvidedKeyEscapeRegex, \"$&/\") + \"/\"),\n          mapIntoArray(callback, array, escapedPrefix, \"\", function (c) {\n            return c;\n          }))\n        : null != callback &&\n          (isValidElement(callback) &&\n            (callback = cloneAndReplaceKey(\n              callback,\n              escapedPrefix +\n                (null == callback.key ||\n                (children && children.key === callback.key)\n                  ? \"\"\n                  : (\"\" + callback.key).replace(\n                      userProvidedKeyEscapeRegex,\n                      \"$&/\"\n                    ) + \"/\") +\n                invokeCallback\n            )),\n          array.push(callback)),\n      1\n    );\n  invokeCallback = 0;\n  var nextNamePrefix = \"\" === nameSoFar ? \".\" : nameSoFar + \":\";\n  if (isArrayImpl(children))\n    for (var i = 0; i < children.length; i++)\n      (nameSoFar = children[i]),\n        (type = nextNamePrefix + getElementKey(nameSoFar, i)),\n        (invokeCallback += mapIntoArray(\n          nameSoFar,\n          array,\n          escapedPrefix,\n          type,\n          callback\n        ));\n  else if (((i = getIteratorFn(children)), \"function\" === typeof i))\n    for (\n      children = i.call(children), i = 0;\n      !(nameSoFar = children.next()).done;\n\n    )\n      (nameSoFar = nameSoFar.value),\n        (type = nextNamePrefix + getElementKey(nameSoFar, i++)),\n        (invokeCallback += mapIntoArray(\n          nameSoFar,\n          array,\n          escapedPrefix,\n          type,\n          callback\n        ));\n  else if (\"object\" === type) {\n    if (\"function\" === typeof children.then)\n      return mapIntoArray(\n        resolveThenable(children),\n        array,\n        escapedPrefix,\n        nameSoFar,\n        callback\n      );\n    array = String(children);\n    throw Error(\n      \"Objects are not valid as a React child (found: \" +\n        (\"[object Object]\" === array\n          ? \"object with keys {\" + Object.keys(children).join(\", \") + \"}\"\n          : array) +\n        \"). If you meant to render a collection of children, use an array instead.\"\n    );\n  }\n  return invokeCallback;\n}\nfunction mapChildren(children, func, context) {\n  if (null == children) return children;\n  var result = [],\n    count = 0;\n  mapIntoArray(children, result, \"\", \"\", function (child) {\n    return func.call(context, child, count++);\n  });\n  return result;\n}\nfunction lazyInitializer(payload) {\n  if (-1 === payload._status) {\n    var ctor = payload._result;\n    ctor = ctor();\n    ctor.then(\n      function (moduleObject) {\n        if (0 === payload._status || -1 === payload._status)\n          (payload._status = 1), (payload._result = moduleObject);\n      },\n      function (error) {\n        if (0 === payload._status || -1 === payload._status)\n          (payload._status = 2), (payload._result = error);\n      }\n    );\n    -1 === payload._status && ((payload._status = 0), (payload._result = ctor));\n  }\n  if (1 === payload._status) return payload._result.default;\n  throw payload._result;\n}\nvar reportGlobalError =\n  \"function\" === typeof reportError\n    ? reportError\n    : function (error) {\n        if (\n          \"object\" === typeof window &&\n          \"function\" === typeof window.ErrorEvent\n        ) {\n          var event = new window.ErrorEvent(\"error\", {\n            bubbles: !0,\n            cancelable: !0,\n            message:\n              \"object\" === typeof error &&\n              null !== error &&\n              \"string\" === typeof error.message\n                ? String(error.message)\n                : String(error),\n            error: error\n          });\n          if (!window.dispatchEvent(event)) return;\n        } else if (\n          \"object\" === typeof process &&\n          \"function\" === typeof process.emit\n        ) {\n          process.emit(\"uncaughtException\", error);\n          return;\n        }\n        console.error(error);\n      };\nfunction noop() {}\nexports.Children = {\n  map: mapChildren,\n  forEach: function (children, forEachFunc, forEachContext) {\n    mapChildren(\n      children,\n      function () {\n        forEachFunc.apply(this, arguments);\n      },\n      forEachContext\n    );\n  },\n  count: function (children) {\n    var n = 0;\n    mapChildren(children, function () {\n      n++;\n    });\n    return n;\n  },\n  toArray: function (children) {\n    return (\n      mapChildren(children, function (child) {\n        return child;\n      }) || []\n    );\n  },\n  only: function (children) {\n    if (!isValidElement(children))\n      throw Error(\n        \"React.Children.only expected to receive a single React element child.\"\n      );\n    return children;\n  }\n};\nexports.Component = Component;\nexports.Fragment = REACT_FRAGMENT_TYPE;\nexports.Profiler = REACT_PROFILER_TYPE;\nexports.PureComponent = PureComponent;\nexports.StrictMode = REACT_STRICT_MODE_TYPE;\nexports.Suspense = REACT_SUSPENSE_TYPE;\nexports.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE =\n  ReactSharedInternals;\nexports.act = function () {\n  throw Error(\"act(...) is not supported in production builds of React.\");\n};\nexports.cache = function (fn) {\n  return function () {\n    return fn.apply(null, arguments);\n  };\n};\nexports.cloneElement = function (element, config, children) {\n  if (null === element || void 0 === element)\n    throw Error(\n      \"The argument must be a React element, but you passed \" + element + \".\"\n    );\n  var props = assign({}, element.props),\n    key = element.key,\n    owner = void 0;\n  if (null != config)\n    for (propName in (void 0 !== config.ref && (owner = void 0),\n    void 0 !== config.key && (key = \"\" + config.key),\n    config))\n      !hasOwnProperty.call(config, propName) ||\n        \"key\" === propName ||\n        \"__self\" === propName ||\n        \"__source\" === propName ||\n        (\"ref\" === propName && void 0 === config.ref) ||\n        (props[propName] = config[propName]);\n  var propName = arguments.length - 2;\n  if (1 === propName) props.children = children;\n  else if (1 < propName) {\n    for (var childArray = Array(propName), i = 0; i < propName; i++)\n      childArray[i] = arguments[i + 2];\n    props.children = childArray;\n  }\n  return ReactElement(element.type, key, void 0, void 0, owner, props);\n};\nexports.createContext = function (defaultValue) {\n  defaultValue = {\n    $$typeof: REACT_CONTEXT_TYPE,\n    _currentValue: defaultValue,\n    _currentValue2: defaultValue,\n    _threadCount: 0,\n    Provider: null,\n    Consumer: null\n  };\n  defaultValue.Provider = defaultValue;\n  defaultValue.Consumer = {\n    $$typeof: REACT_CONSUMER_TYPE,\n    _context: defaultValue\n  };\n  return defaultValue;\n};\nexports.createElement = function (type, config, children) {\n  var propName,\n    props = {},\n    key = null;\n  if (null != config)\n    for (propName in (void 0 !== config.key && (key = \"\" + config.key), config))\n      hasOwnProperty.call(config, propName) &&\n        \"key\" !== propName &&\n        \"__self\" !== propName &&\n        \"__source\" !== propName &&\n        (props[propName] = config[propName]);\n  var childrenLength = arguments.length - 2;\n  if (1 === childrenLength) props.children = children;\n  else if (1 < childrenLength) {\n    for (var childArray = Array(childrenLength), i = 0; i < childrenLength; i++)\n      childArray[i] = arguments[i + 2];\n    props.children = childArray;\n  }\n  if (type && type.defaultProps)\n    for (propName in ((childrenLength = type.defaultProps), childrenLength))\n      void 0 === props[propName] &&\n        (props[propName] = childrenLength[propName]);\n  return ReactElement(type, key, void 0, void 0, null, props);\n};\nexports.createRef = function () {\n  return { current: null };\n};\nexports.forwardRef = function (render) {\n  return { $$typeof: REACT_FORWARD_REF_TYPE, render: render };\n};\nexports.isValidElement = isValidElement;\nexports.lazy = function (ctor) {\n  return {\n    $$typeof: REACT_LAZY_TYPE,\n    _payload: { _status: -1, _result: ctor },\n    _init: lazyInitializer\n  };\n};\nexports.memo = function (type, compare) {\n  return {\n    $$typeof: REACT_MEMO_TYPE,\n    type: type,\n    compare: void 0 === compare ? null : compare\n  };\n};\nexports.startTransition = function (scope) {\n  var prevTransition = ReactSharedInternals.T,\n    currentTransition = {};\n  ReactSharedInternals.T = currentTransition;\n  try {\n    var returnValue = scope(),\n      onStartTransitionFinish = ReactSharedInternals.S;\n    null !== onStartTransitionFinish &&\n      onStartTransitionFinish(currentTransition, returnValue);\n    \"object\" === typeof returnValue &&\n      null !== returnValue &&\n      \"function\" === typeof returnValue.then &&\n      returnValue.then(noop, reportGlobalError);\n  } catch (error) {\n    reportGlobalError(error);\n  } finally {\n    ReactSharedInternals.T = prevTransition;\n  }\n};\nexports.unstable_useCacheRefresh = function () {\n  return ReactSharedInternals.H.useCacheRefresh();\n};\nexports.use = function (usable) {\n  return ReactSharedInternals.H.use(usable);\n};\nexports.useActionState = function (action, initialState, permalink) {\n  return ReactSharedInternals.H.useActionState(action, initialState, permalink);\n};\nexports.useCallback = function (callback, deps) {\n  return ReactSharedInternals.H.useCallback(callback, deps);\n};\nexports.useContext = function (Context) {\n  return ReactSharedInternals.H.useContext(Context);\n};\nexports.useDebugValue = function () {};\nexports.useDeferredValue = function (value, initialValue) {\n  return ReactSharedInternals.H.useDeferredValue(value, initialValue);\n};\nexports.useEffect = function (create, deps) {\n  return ReactSharedInternals.H.useEffect(create, deps);\n};\nexports.useId = function () {\n  return ReactSharedInternals.H.useId();\n};\nexports.useImperativeHandle = function (ref, create, deps) {\n  return ReactSharedInternals.H.useImperativeHandle(ref, create, deps);\n};\nexports.useInsertionEffect = function (create, deps) {\n  return ReactSharedInternals.H.useInsertionEffect(create, deps);\n};\nexports.useLayoutEffect = function (create, deps) {\n  return ReactSharedInternals.H.useLayoutEffect(create, deps);\n};\nexports.useMemo = function (create, deps) {\n  return ReactSharedInternals.H.useMemo(create, deps);\n};\nexports.useOptimistic = function (passthrough, reducer) {\n  return ReactSharedInternals.H.useOptimistic(passthrough, reducer);\n};\nexports.useReducer = function (reducer, initialArg, init) {\n  return ReactSharedInternals.H.useReducer(reducer, initialArg, init);\n};\nexports.useRef = function (initialValue) {\n  return ReactSharedInternals.H.useRef(initialValue);\n};\nexports.useState = function (initialState) {\n  return ReactSharedInternals.H.useState(initialState);\n};\nexports.useSyncExternalStore = function (\n  subscribe,\n  getSnapshot,\n  getServerSnapshot\n) {\n  return ReactSharedInternals.H.useSyncExternalStore(\n    subscribe,\n    getSnapshot,\n    getServerSnapshot\n  );\n};\nexports.useTransition = function () {\n  return ReactSharedInternals.H.useTransition();\n};\nexports.version = \"19.0.0\";\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react.production.js');\n} else {\n  module.exports = require('./cjs/react.development.js');\n}\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","/**\n * @license React\n * scheduler.production.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\"use strict\";\nfunction push(heap, node) {\n  var index = heap.length;\n  heap.push(node);\n  a: for (; 0 < index; ) {\n    var parentIndex = (index - 1) >>> 1,\n      parent = heap[parentIndex];\n    if (0 < compare(parent, node))\n      (heap[parentIndex] = node), (heap[index] = parent), (index = parentIndex);\n    else break a;\n  }\n}\nfunction peek(heap) {\n  return 0 === heap.length ? null : heap[0];\n}\nfunction pop(heap) {\n  if (0 === heap.length) return null;\n  var first = heap[0],\n    last = heap.pop();\n  if (last !== first) {\n    heap[0] = last;\n    a: for (\n      var index = 0, length = heap.length, halfLength = length >>> 1;\n      index < halfLength;\n\n    ) {\n      var leftIndex = 2 * (index + 1) - 1,\n        left = heap[leftIndex],\n        rightIndex = leftIndex + 1,\n        right = heap[rightIndex];\n      if (0 > compare(left, last))\n        rightIndex < length && 0 > compare(right, left)\n          ? ((heap[index] = right),\n            (heap[rightIndex] = last),\n            (index = rightIndex))\n          : ((heap[index] = left),\n            (heap[leftIndex] = last),\n            (index = leftIndex));\n      else if (rightIndex < length && 0 > compare(right, last))\n        (heap[index] = right), (heap[rightIndex] = last), (index = rightIndex);\n      else break a;\n    }\n  }\n  return first;\n}\nfunction compare(a, b) {\n  var diff = a.sortIndex - b.sortIndex;\n  return 0 !== diff ? diff : a.id - b.id;\n}\nexports.unstable_now = void 0;\nif (\"object\" === typeof performance && \"function\" === typeof performance.now) {\n  var localPerformance = performance;\n  exports.unstable_now = function () {\n    return localPerformance.now();\n  };\n} else {\n  var localDate = Date,\n    initialTime = localDate.now();\n  exports.unstable_now = function () {\n    return localDate.now() - initialTime;\n  };\n}\nvar taskQueue = [],\n  timerQueue = [],\n  taskIdCounter = 1,\n  currentTask = null,\n  currentPriorityLevel = 3,\n  isPerformingWork = !1,\n  isHostCallbackScheduled = !1,\n  isHostTimeoutScheduled = !1,\n  localSetTimeout = \"function\" === typeof setTimeout ? setTimeout : null,\n  localClearTimeout = \"function\" === typeof clearTimeout ? clearTimeout : null,\n  localSetImmediate = \"undefined\" !== typeof setImmediate ? setImmediate : null;\nfunction advanceTimers(currentTime) {\n  for (var timer = peek(timerQueue); null !== timer; ) {\n    if (null === timer.callback) pop(timerQueue);\n    else if (timer.startTime <= currentTime)\n      pop(timerQueue),\n        (timer.sortIndex = timer.expirationTime),\n        push(taskQueue, timer);\n    else break;\n    timer = peek(timerQueue);\n  }\n}\nfunction handleTimeout(currentTime) {\n  isHostTimeoutScheduled = !1;\n  advanceTimers(currentTime);\n  if (!isHostCallbackScheduled)\n    if (null !== peek(taskQueue))\n      (isHostCallbackScheduled = !0), requestHostCallback();\n    else {\n      var firstTimer = peek(timerQueue);\n      null !== firstTimer &&\n        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n    }\n}\nvar isMessageLoopRunning = !1,\n  taskTimeoutID = -1,\n  frameInterval = 5,\n  startTime = -1;\nfunction shouldYieldToHost() {\n  return exports.unstable_now() - startTime < frameInterval ? !1 : !0;\n}\nfunction performWorkUntilDeadline() {\n  if (isMessageLoopRunning) {\n    var currentTime = exports.unstable_now();\n    startTime = currentTime;\n    var hasMoreWork = !0;\n    try {\n      a: {\n        isHostCallbackScheduled = !1;\n        isHostTimeoutScheduled &&\n          ((isHostTimeoutScheduled = !1),\n          localClearTimeout(taskTimeoutID),\n          (taskTimeoutID = -1));\n        isPerformingWork = !0;\n        var previousPriorityLevel = currentPriorityLevel;\n        try {\n          b: {\n            advanceTimers(currentTime);\n            for (\n              currentTask = peek(taskQueue);\n              null !== currentTask &&\n              !(\n                currentTask.expirationTime > currentTime && shouldYieldToHost()\n              );\n\n            ) {\n              var callback = currentTask.callback;\n              if (\"function\" === typeof callback) {\n                currentTask.callback = null;\n                currentPriorityLevel = currentTask.priorityLevel;\n                var continuationCallback = callback(\n                  currentTask.expirationTime <= currentTime\n                );\n                currentTime = exports.unstable_now();\n                if (\"function\" === typeof continuationCallback) {\n                  currentTask.callback = continuationCallback;\n                  advanceTimers(currentTime);\n                  hasMoreWork = !0;\n                  break b;\n                }\n                currentTask === peek(taskQueue) && pop(taskQueue);\n                advanceTimers(currentTime);\n              } else pop(taskQueue);\n              currentTask = peek(taskQueue);\n            }\n            if (null !== currentTask) hasMoreWork = !0;\n            else {\n              var firstTimer = peek(timerQueue);\n              null !== firstTimer &&\n                requestHostTimeout(\n                  handleTimeout,\n                  firstTimer.startTime - currentTime\n                );\n              hasMoreWork = !1;\n            }\n          }\n          break a;\n        } finally {\n          (currentTask = null),\n            (currentPriorityLevel = previousPriorityLevel),\n            (isPerformingWork = !1);\n        }\n        hasMoreWork = void 0;\n      }\n    } finally {\n      hasMoreWork\n        ? schedulePerformWorkUntilDeadline()\n        : (isMessageLoopRunning = !1);\n    }\n  }\n}\nvar schedulePerformWorkUntilDeadline;\nif (\"function\" === typeof localSetImmediate)\n  schedulePerformWorkUntilDeadline = function () {\n    localSetImmediate(performWorkUntilDeadline);\n  };\nelse if (\"undefined\" !== typeof MessageChannel) {\n  var channel = new MessageChannel(),\n    port = channel.port2;\n  channel.port1.onmessage = performWorkUntilDeadline;\n  schedulePerformWorkUntilDeadline = function () {\n    port.postMessage(null);\n  };\n} else\n  schedulePerformWorkUntilDeadline = function () {\n    localSetTimeout(performWorkUntilDeadline, 0);\n  };\nfunction requestHostCallback() {\n  isMessageLoopRunning ||\n    ((isMessageLoopRunning = !0), schedulePerformWorkUntilDeadline());\n}\nfunction requestHostTimeout(callback, ms) {\n  taskTimeoutID = localSetTimeout(function () {\n    callback(exports.unstable_now());\n  }, ms);\n}\nexports.unstable_IdlePriority = 5;\nexports.unstable_ImmediatePriority = 1;\nexports.unstable_LowPriority = 4;\nexports.unstable_NormalPriority = 3;\nexports.unstable_Profiling = null;\nexports.unstable_UserBlockingPriority = 2;\nexports.unstable_cancelCallback = function (task) {\n  task.callback = null;\n};\nexports.unstable_continueExecution = function () {\n  isHostCallbackScheduled ||\n    isPerformingWork ||\n    ((isHostCallbackScheduled = !0), requestHostCallback());\n};\nexports.unstable_forceFrameRate = function (fps) {\n  0 > fps || 125 < fps\n    ? console.error(\n        \"forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported\"\n      )\n    : (frameInterval = 0 < fps ? Math.floor(1e3 / fps) : 5);\n};\nexports.unstable_getCurrentPriorityLevel = function () {\n  return currentPriorityLevel;\n};\nexports.unstable_getFirstCallbackNode = function () {\n  return peek(taskQueue);\n};\nexports.unstable_next = function (eventHandler) {\n  switch (currentPriorityLevel) {\n    case 1:\n    case 2:\n    case 3:\n      var priorityLevel = 3;\n      break;\n    default:\n      priorityLevel = currentPriorityLevel;\n  }\n  var previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n};\nexports.unstable_pauseExecution = function () {};\nexports.unstable_requestPaint = function () {};\nexports.unstable_runWithPriority = function (priorityLevel, eventHandler) {\n  switch (priorityLevel) {\n    case 1:\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n      break;\n    default:\n      priorityLevel = 3;\n  }\n  var previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n};\nexports.unstable_scheduleCallback = function (\n  priorityLevel,\n  callback,\n  options\n) {\n  var currentTime = exports.unstable_now();\n  \"object\" === typeof options && null !== options\n    ? ((options = options.delay),\n      (options =\n        \"number\" === typeof options && 0 < options\n          ? currentTime + options\n          : currentTime))\n    : (options = currentTime);\n  switch (priorityLevel) {\n    case 1:\n      var timeout = -1;\n      break;\n    case 2:\n      timeout = 250;\n      break;\n    case 5:\n      timeout = 1073741823;\n      break;\n    case 4:\n      timeout = 1e4;\n      break;\n    default:\n      timeout = 5e3;\n  }\n  timeout = options + timeout;\n  priorityLevel = {\n    id: taskIdCounter++,\n    callback: callback,\n    priorityLevel: priorityLevel,\n    startTime: options,\n    expirationTime: timeout,\n    sortIndex: -1\n  };\n  options > currentTime\n    ? ((priorityLevel.sortIndex = options),\n      push(timerQueue, priorityLevel),\n      null === peek(taskQueue) &&\n        priorityLevel === peek(timerQueue) &&\n        (isHostTimeoutScheduled\n          ? (localClearTimeout(taskTimeoutID), (taskTimeoutID = -1))\n          : (isHostTimeoutScheduled = !0),\n        requestHostTimeout(handleTimeout, options - currentTime)))\n    : ((priorityLevel.sortIndex = timeout),\n      push(taskQueue, priorityLevel),\n      isHostCallbackScheduled ||\n        isPerformingWork ||\n        ((isHostCallbackScheduled = !0), requestHostCallback()));\n  return priorityLevel;\n};\nexports.unstable_shouldYield = shouldYieldToHost;\nexports.unstable_wrapCallback = function (callback) {\n  var parentPriorityLevel = currentPriorityLevel;\n  return function () {\n    var previousPriorityLevel = currentPriorityLevel;\n    currentPriorityLevel = parentPriorityLevel;\n    try {\n      return callback.apply(this, arguments);\n    } finally {\n      currentPriorityLevel = previousPriorityLevel;\n    }\n  };\n};\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/scheduler.production.js');\n} else {\n  module.exports = require('./cjs/scheduler.development.js');\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.p = \"/QRCode_Cards/\";","var __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\n\n// src/index.tsx\nimport React from \"react\";\n\n// src/third-party/qrcodegen/index.ts\n/**\n * @license QR Code generator library (TypeScript)\n * Copyright (c) Project Nayuki.\n * SPDX-License-Identifier: MIT\n */\nvar qrcodegen;\n((qrcodegen2) => {\n  const _QrCode = class _QrCode {\n    /*-- Constructor (low level) and fields --*/\n    // Creates a new QR Code with the given version number,\n    // error correction level, data codeword bytes, and mask number.\n    // This is a low-level API that most users should not use directly.\n    // A mid-level API is the encodeSegments() function.\n    constructor(version, errorCorrectionLevel, dataCodewords, msk) {\n      this.version = version;\n      this.errorCorrectionLevel = errorCorrectionLevel;\n      // The modules of this QR Code (false = light, true = dark).\n      // Immutable after constructor finishes. Accessed through getModule().\n      this.modules = [];\n      // Indicates function modules that are not subjected to masking. Discarded when constructor finishes.\n      this.isFunction = [];\n      if (version < _QrCode.MIN_VERSION || version > _QrCode.MAX_VERSION)\n        throw new RangeError(\"Version value out of range\");\n      if (msk < -1 || msk > 7)\n        throw new RangeError(\"Mask value out of range\");\n      this.size = version * 4 + 17;\n      let row = [];\n      for (let i = 0; i < this.size; i++)\n        row.push(false);\n      for (let i = 0; i < this.size; i++) {\n        this.modules.push(row.slice());\n        this.isFunction.push(row.slice());\n      }\n      this.drawFunctionPatterns();\n      const allCodewords = this.addEccAndInterleave(dataCodewords);\n      this.drawCodewords(allCodewords);\n      if (msk == -1) {\n        let minPenalty = 1e9;\n        for (let i = 0; i < 8; i++) {\n          this.applyMask(i);\n          this.drawFormatBits(i);\n          const penalty = this.getPenaltyScore();\n          if (penalty < minPenalty) {\n            msk = i;\n            minPenalty = penalty;\n          }\n          this.applyMask(i);\n        }\n      }\n      assert(0 <= msk && msk <= 7);\n      this.mask = msk;\n      this.applyMask(msk);\n      this.drawFormatBits(msk);\n      this.isFunction = [];\n    }\n    /*-- Static factory functions (high level) --*/\n    // Returns a QR Code representing the given Unicode text string at the given error correction level.\n    // As a conservative upper bound, this function is guaranteed to succeed for strings that have 738 or fewer\n    // Unicode code points (not UTF-16 code units) if the low error correction level is used. The smallest possible\n    // QR Code version is automatically chosen for the output. The ECC level of the result may be higher than the\n    // ecl argument if it can be done without increasing the version.\n    static encodeText(text, ecl) {\n      const segs = qrcodegen2.QrSegment.makeSegments(text);\n      return _QrCode.encodeSegments(segs, ecl);\n    }\n    // Returns a QR Code representing the given binary data at the given error correction level.\n    // This function always encodes using the binary segment mode, not any text mode. The maximum number of\n    // bytes allowed is 2953. The smallest possible QR Code version is automatically chosen for the output.\n    // The ECC level of the result may be higher than the ecl argument if it can be done without increasing the version.\n    static encodeBinary(data, ecl) {\n      const seg = qrcodegen2.QrSegment.makeBytes(data);\n      return _QrCode.encodeSegments([seg], ecl);\n    }\n    /*-- Static factory functions (mid level) --*/\n    // Returns a QR Code representing the given segments with the given encoding parameters.\n    // The smallest possible QR Code version within the given range is automatically\n    // chosen for the output. Iff boostEcl is true, then the ECC level of the result\n    // may be higher than the ecl argument if it can be done without increasing the\n    // version. The mask number is either between 0 to 7 (inclusive) to force that\n    // mask, or -1 to automatically choose an appropriate mask (which may be slow).\n    // This function allows the user to create a custom sequence of segments that switches\n    // between modes (such as alphanumeric and byte) to encode text in less space.\n    // This is a mid-level API; the high-level API is encodeText() and encodeBinary().\n    static encodeSegments(segs, ecl, minVersion = 1, maxVersion = 40, mask = -1, boostEcl = true) {\n      if (!(_QrCode.MIN_VERSION <= minVersion && minVersion <= maxVersion && maxVersion <= _QrCode.MAX_VERSION) || mask < -1 || mask > 7)\n        throw new RangeError(\"Invalid value\");\n      let version;\n      let dataUsedBits;\n      for (version = minVersion; ; version++) {\n        const dataCapacityBits2 = _QrCode.getNumDataCodewords(version, ecl) * 8;\n        const usedBits = QrSegment.getTotalBits(segs, version);\n        if (usedBits <= dataCapacityBits2) {\n          dataUsedBits = usedBits;\n          break;\n        }\n        if (version >= maxVersion)\n          throw new RangeError(\"Data too long\");\n      }\n      for (const newEcl of [_QrCode.Ecc.MEDIUM, _QrCode.Ecc.QUARTILE, _QrCode.Ecc.HIGH]) {\n        if (boostEcl && dataUsedBits <= _QrCode.getNumDataCodewords(version, newEcl) * 8)\n          ecl = newEcl;\n      }\n      let bb = [];\n      for (const seg of segs) {\n        appendBits(seg.mode.modeBits, 4, bb);\n        appendBits(seg.numChars, seg.mode.numCharCountBits(version), bb);\n        for (const b of seg.getData())\n          bb.push(b);\n      }\n      assert(bb.length == dataUsedBits);\n      const dataCapacityBits = _QrCode.getNumDataCodewords(version, ecl) * 8;\n      assert(bb.length <= dataCapacityBits);\n      appendBits(0, Math.min(4, dataCapacityBits - bb.length), bb);\n      appendBits(0, (8 - bb.length % 8) % 8, bb);\n      assert(bb.length % 8 == 0);\n      for (let padByte = 236; bb.length < dataCapacityBits; padByte ^= 236 ^ 17)\n        appendBits(padByte, 8, bb);\n      let dataCodewords = [];\n      while (dataCodewords.length * 8 < bb.length)\n        dataCodewords.push(0);\n      bb.forEach((b, i) => dataCodewords[i >>> 3] |= b << 7 - (i & 7));\n      return new _QrCode(version, ecl, dataCodewords, mask);\n    }\n    /*-- Accessor methods --*/\n    // Returns the color of the module (pixel) at the given coordinates, which is false\n    // for light or true for dark. The top left corner has the coordinates (x=0, y=0).\n    // If the given coordinates are out of bounds, then false (light) is returned.\n    getModule(x, y) {\n      return 0 <= x && x < this.size && 0 <= y && y < this.size && this.modules[y][x];\n    }\n    // Modified to expose modules for easy access\n    getModules() {\n      return this.modules;\n    }\n    /*-- Private helper methods for constructor: Drawing function modules --*/\n    // Reads this object's version field, and draws and marks all function modules.\n    drawFunctionPatterns() {\n      for (let i = 0; i < this.size; i++) {\n        this.setFunctionModule(6, i, i % 2 == 0);\n        this.setFunctionModule(i, 6, i % 2 == 0);\n      }\n      this.drawFinderPattern(3, 3);\n      this.drawFinderPattern(this.size - 4, 3);\n      this.drawFinderPattern(3, this.size - 4);\n      const alignPatPos = this.getAlignmentPatternPositions();\n      const numAlign = alignPatPos.length;\n      for (let i = 0; i < numAlign; i++) {\n        for (let j = 0; j < numAlign; j++) {\n          if (!(i == 0 && j == 0 || i == 0 && j == numAlign - 1 || i == numAlign - 1 && j == 0))\n            this.drawAlignmentPattern(alignPatPos[i], alignPatPos[j]);\n        }\n      }\n      this.drawFormatBits(0);\n      this.drawVersion();\n    }\n    // Draws two copies of the format bits (with its own error correction code)\n    // based on the given mask and this object's error correction level field.\n    drawFormatBits(mask) {\n      const data = this.errorCorrectionLevel.formatBits << 3 | mask;\n      let rem = data;\n      for (let i = 0; i < 10; i++)\n        rem = rem << 1 ^ (rem >>> 9) * 1335;\n      const bits = (data << 10 | rem) ^ 21522;\n      assert(bits >>> 15 == 0);\n      for (let i = 0; i <= 5; i++)\n        this.setFunctionModule(8, i, getBit(bits, i));\n      this.setFunctionModule(8, 7, getBit(bits, 6));\n      this.setFunctionModule(8, 8, getBit(bits, 7));\n      this.setFunctionModule(7, 8, getBit(bits, 8));\n      for (let i = 9; i < 15; i++)\n        this.setFunctionModule(14 - i, 8, getBit(bits, i));\n      for (let i = 0; i < 8; i++)\n        this.setFunctionModule(this.size - 1 - i, 8, getBit(bits, i));\n      for (let i = 8; i < 15; i++)\n        this.setFunctionModule(8, this.size - 15 + i, getBit(bits, i));\n      this.setFunctionModule(8, this.size - 8, true);\n    }\n    // Draws two copies of the version bits (with its own error correction code),\n    // based on this object's version field, iff 7 <= version <= 40.\n    drawVersion() {\n      if (this.version < 7)\n        return;\n      let rem = this.version;\n      for (let i = 0; i < 12; i++)\n        rem = rem << 1 ^ (rem >>> 11) * 7973;\n      const bits = this.version << 12 | rem;\n      assert(bits >>> 18 == 0);\n      for (let i = 0; i < 18; i++) {\n        const color = getBit(bits, i);\n        const a = this.size - 11 + i % 3;\n        const b = Math.floor(i / 3);\n        this.setFunctionModule(a, b, color);\n        this.setFunctionModule(b, a, color);\n      }\n    }\n    // Draws a 9*9 finder pattern including the border separator,\n    // with the center module at (x, y). Modules can be out of bounds.\n    drawFinderPattern(x, y) {\n      for (let dy = -4; dy <= 4; dy++) {\n        for (let dx = -4; dx <= 4; dx++) {\n          const dist = Math.max(Math.abs(dx), Math.abs(dy));\n          const xx = x + dx;\n          const yy = y + dy;\n          if (0 <= xx && xx < this.size && 0 <= yy && yy < this.size)\n            this.setFunctionModule(xx, yy, dist != 2 && dist != 4);\n        }\n      }\n    }\n    // Draws a 5*5 alignment pattern, with the center module\n    // at (x, y). All modules must be in bounds.\n    drawAlignmentPattern(x, y) {\n      for (let dy = -2; dy <= 2; dy++) {\n        for (let dx = -2; dx <= 2; dx++)\n          this.setFunctionModule(x + dx, y + dy, Math.max(Math.abs(dx), Math.abs(dy)) != 1);\n      }\n    }\n    // Sets the color of a module and marks it as a function module.\n    // Only used by the constructor. Coordinates must be in bounds.\n    setFunctionModule(x, y, isDark) {\n      this.modules[y][x] = isDark;\n      this.isFunction[y][x] = true;\n    }\n    /*-- Private helper methods for constructor: Codewords and masking --*/\n    // Returns a new byte string representing the given data with the appropriate error correction\n    // codewords appended to it, based on this object's version and error correction level.\n    addEccAndInterleave(data) {\n      const ver = this.version;\n      const ecl = this.errorCorrectionLevel;\n      if (data.length != _QrCode.getNumDataCodewords(ver, ecl))\n        throw new RangeError(\"Invalid argument\");\n      const numBlocks = _QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n      const blockEccLen = _QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver];\n      const rawCodewords = Math.floor(_QrCode.getNumRawDataModules(ver) / 8);\n      const numShortBlocks = numBlocks - rawCodewords % numBlocks;\n      const shortBlockLen = Math.floor(rawCodewords / numBlocks);\n      let blocks = [];\n      const rsDiv = _QrCode.reedSolomonComputeDivisor(blockEccLen);\n      for (let i = 0, k = 0; i < numBlocks; i++) {\n        let dat = data.slice(k, k + shortBlockLen - blockEccLen + (i < numShortBlocks ? 0 : 1));\n        k += dat.length;\n        const ecc = _QrCode.reedSolomonComputeRemainder(dat, rsDiv);\n        if (i < numShortBlocks)\n          dat.push(0);\n        blocks.push(dat.concat(ecc));\n      }\n      let result = [];\n      for (let i = 0; i < blocks[0].length; i++) {\n        blocks.forEach((block, j) => {\n          if (i != shortBlockLen - blockEccLen || j >= numShortBlocks)\n            result.push(block[i]);\n        });\n      }\n      assert(result.length == rawCodewords);\n      return result;\n    }\n    // Draws the given sequence of 8-bit codewords (data and error correction) onto the entire\n    // data area of this QR Code. Function modules need to be marked off before this is called.\n    drawCodewords(data) {\n      if (data.length != Math.floor(_QrCode.getNumRawDataModules(this.version) / 8))\n        throw new RangeError(\"Invalid argument\");\n      let i = 0;\n      for (let right = this.size - 1; right >= 1; right -= 2) {\n        if (right == 6)\n          right = 5;\n        for (let vert = 0; vert < this.size; vert++) {\n          for (let j = 0; j < 2; j++) {\n            const x = right - j;\n            const upward = (right + 1 & 2) == 0;\n            const y = upward ? this.size - 1 - vert : vert;\n            if (!this.isFunction[y][x] && i < data.length * 8) {\n              this.modules[y][x] = getBit(data[i >>> 3], 7 - (i & 7));\n              i++;\n            }\n          }\n        }\n      }\n      assert(i == data.length * 8);\n    }\n    // XORs the codeword modules in this QR Code with the given mask pattern.\n    // The function modules must be marked and the codeword bits must be drawn\n    // before masking. Due to the arithmetic of XOR, calling applyMask() with\n    // the same mask value a second time will undo the mask. A final well-formed\n    // QR Code needs exactly one (not zero, two, etc.) mask applied.\n    applyMask(mask) {\n      if (mask < 0 || mask > 7)\n        throw new RangeError(\"Mask value out of range\");\n      for (let y = 0; y < this.size; y++) {\n        for (let x = 0; x < this.size; x++) {\n          let invert;\n          switch (mask) {\n            case 0:\n              invert = (x + y) % 2 == 0;\n              break;\n            case 1:\n              invert = y % 2 == 0;\n              break;\n            case 2:\n              invert = x % 3 == 0;\n              break;\n            case 3:\n              invert = (x + y) % 3 == 0;\n              break;\n            case 4:\n              invert = (Math.floor(x / 3) + Math.floor(y / 2)) % 2 == 0;\n              break;\n            case 5:\n              invert = x * y % 2 + x * y % 3 == 0;\n              break;\n            case 6:\n              invert = (x * y % 2 + x * y % 3) % 2 == 0;\n              break;\n            case 7:\n              invert = ((x + y) % 2 + x * y % 3) % 2 == 0;\n              break;\n            default:\n              throw new Error(\"Unreachable\");\n          }\n          if (!this.isFunction[y][x] && invert)\n            this.modules[y][x] = !this.modules[y][x];\n        }\n      }\n    }\n    // Calculates and returns the penalty score based on state of this QR Code's current modules.\n    // This is used by the automatic mask choice algorithm to find the mask pattern that yields the lowest score.\n    getPenaltyScore() {\n      let result = 0;\n      for (let y = 0; y < this.size; y++) {\n        let runColor = false;\n        let runX = 0;\n        let runHistory = [0, 0, 0, 0, 0, 0, 0];\n        for (let x = 0; x < this.size; x++) {\n          if (this.modules[y][x] == runColor) {\n            runX++;\n            if (runX == 5)\n              result += _QrCode.PENALTY_N1;\n            else if (runX > 5)\n              result++;\n          } else {\n            this.finderPenaltyAddHistory(runX, runHistory);\n            if (!runColor)\n              result += this.finderPenaltyCountPatterns(runHistory) * _QrCode.PENALTY_N3;\n            runColor = this.modules[y][x];\n            runX = 1;\n          }\n        }\n        result += this.finderPenaltyTerminateAndCount(runColor, runX, runHistory) * _QrCode.PENALTY_N3;\n      }\n      for (let x = 0; x < this.size; x++) {\n        let runColor = false;\n        let runY = 0;\n        let runHistory = [0, 0, 0, 0, 0, 0, 0];\n        for (let y = 0; y < this.size; y++) {\n          if (this.modules[y][x] == runColor) {\n            runY++;\n            if (runY == 5)\n              result += _QrCode.PENALTY_N1;\n            else if (runY > 5)\n              result++;\n          } else {\n            this.finderPenaltyAddHistory(runY, runHistory);\n            if (!runColor)\n              result += this.finderPenaltyCountPatterns(runHistory) * _QrCode.PENALTY_N3;\n            runColor = this.modules[y][x];\n            runY = 1;\n          }\n        }\n        result += this.finderPenaltyTerminateAndCount(runColor, runY, runHistory) * _QrCode.PENALTY_N3;\n      }\n      for (let y = 0; y < this.size - 1; y++) {\n        for (let x = 0; x < this.size - 1; x++) {\n          const color = this.modules[y][x];\n          if (color == this.modules[y][x + 1] && color == this.modules[y + 1][x] && color == this.modules[y + 1][x + 1])\n            result += _QrCode.PENALTY_N2;\n        }\n      }\n      let dark = 0;\n      for (const row of this.modules)\n        dark = row.reduce((sum, color) => sum + (color ? 1 : 0), dark);\n      const total = this.size * this.size;\n      const k = Math.ceil(Math.abs(dark * 20 - total * 10) / total) - 1;\n      assert(0 <= k && k <= 9);\n      result += k * _QrCode.PENALTY_N4;\n      assert(0 <= result && result <= 2568888);\n      return result;\n    }\n    /*-- Private helper functions --*/\n    // Returns an ascending list of positions of alignment patterns for this version number.\n    // Each position is in the range [0,177), and are used on both the x and y axes.\n    // This could be implemented as lookup table of 40 variable-length lists of integers.\n    getAlignmentPatternPositions() {\n      if (this.version == 1)\n        return [];\n      else {\n        const numAlign = Math.floor(this.version / 7) + 2;\n        const step = this.version == 32 ? 26 : Math.ceil((this.version * 4 + 4) / (numAlign * 2 - 2)) * 2;\n        let result = [6];\n        for (let pos = this.size - 7; result.length < numAlign; pos -= step)\n          result.splice(1, 0, pos);\n        return result;\n      }\n    }\n    // Returns the number of data bits that can be stored in a QR Code of the given version number, after\n    // all function modules are excluded. This includes remainder bits, so it might not be a multiple of 8.\n    // The result is in the range [208, 29648]. This could be implemented as a 40-entry lookup table.\n    static getNumRawDataModules(ver) {\n      if (ver < _QrCode.MIN_VERSION || ver > _QrCode.MAX_VERSION)\n        throw new RangeError(\"Version number out of range\");\n      let result = (16 * ver + 128) * ver + 64;\n      if (ver >= 2) {\n        const numAlign = Math.floor(ver / 7) + 2;\n        result -= (25 * numAlign - 10) * numAlign - 55;\n        if (ver >= 7)\n          result -= 36;\n      }\n      assert(208 <= result && result <= 29648);\n      return result;\n    }\n    // Returns the number of 8-bit data (i.e. not error correction) codewords contained in any\n    // QR Code of the given version number and error correction level, with remainder bits discarded.\n    // This stateless pure function could be implemented as a (40*4)-cell lookup table.\n    static getNumDataCodewords(ver, ecl) {\n      return Math.floor(_QrCode.getNumRawDataModules(ver) / 8) - _QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver] * _QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n    }\n    // Returns a Reed-Solomon ECC generator polynomial for the given degree. This could be\n    // implemented as a lookup table over all possible parameter values, instead of as an algorithm.\n    static reedSolomonComputeDivisor(degree) {\n      if (degree < 1 || degree > 255)\n        throw new RangeError(\"Degree out of range\");\n      let result = [];\n      for (let i = 0; i < degree - 1; i++)\n        result.push(0);\n      result.push(1);\n      let root = 1;\n      for (let i = 0; i < degree; i++) {\n        for (let j = 0; j < result.length; j++) {\n          result[j] = _QrCode.reedSolomonMultiply(result[j], root);\n          if (j + 1 < result.length)\n            result[j] ^= result[j + 1];\n        }\n        root = _QrCode.reedSolomonMultiply(root, 2);\n      }\n      return result;\n    }\n    // Returns the Reed-Solomon error correction codeword for the given data and divisor polynomials.\n    static reedSolomonComputeRemainder(data, divisor) {\n      let result = divisor.map((_) => 0);\n      for (const b of data) {\n        const factor = b ^ result.shift();\n        result.push(0);\n        divisor.forEach((coef, i) => result[i] ^= _QrCode.reedSolomonMultiply(coef, factor));\n      }\n      return result;\n    }\n    // Returns the product of the two given field elements modulo GF(2^8/0x11D). The arguments and result\n    // are unsigned 8-bit integers. This could be implemented as a lookup table of 256*256 entries of uint8.\n    static reedSolomonMultiply(x, y) {\n      if (x >>> 8 != 0 || y >>> 8 != 0)\n        throw new RangeError(\"Byte out of range\");\n      let z = 0;\n      for (let i = 7; i >= 0; i--) {\n        z = z << 1 ^ (z >>> 7) * 285;\n        z ^= (y >>> i & 1) * x;\n      }\n      assert(z >>> 8 == 0);\n      return z;\n    }\n    // Can only be called immediately after a light run is added, and\n    // returns either 0, 1, or 2. A helper function for getPenaltyScore().\n    finderPenaltyCountPatterns(runHistory) {\n      const n = runHistory[1];\n      assert(n <= this.size * 3);\n      const core = n > 0 && runHistory[2] == n && runHistory[3] == n * 3 && runHistory[4] == n && runHistory[5] == n;\n      return (core && runHistory[0] >= n * 4 && runHistory[6] >= n ? 1 : 0) + (core && runHistory[6] >= n * 4 && runHistory[0] >= n ? 1 : 0);\n    }\n    // Must be called at the end of a line (row or column) of modules. A helper function for getPenaltyScore().\n    finderPenaltyTerminateAndCount(currentRunColor, currentRunLength, runHistory) {\n      if (currentRunColor) {\n        this.finderPenaltyAddHistory(currentRunLength, runHistory);\n        currentRunLength = 0;\n      }\n      currentRunLength += this.size;\n      this.finderPenaltyAddHistory(currentRunLength, runHistory);\n      return this.finderPenaltyCountPatterns(runHistory);\n    }\n    // Pushes the given value to the front and drops the last value. A helper function for getPenaltyScore().\n    finderPenaltyAddHistory(currentRunLength, runHistory) {\n      if (runHistory[0] == 0)\n        currentRunLength += this.size;\n      runHistory.pop();\n      runHistory.unshift(currentRunLength);\n    }\n  };\n  /*-- Constants and tables --*/\n  // The minimum version number supported in the QR Code Model 2 standard.\n  _QrCode.MIN_VERSION = 1;\n  // The maximum version number supported in the QR Code Model 2 standard.\n  _QrCode.MAX_VERSION = 40;\n  // For use in getPenaltyScore(), when evaluating which mask is best.\n  _QrCode.PENALTY_N1 = 3;\n  _QrCode.PENALTY_N2 = 3;\n  _QrCode.PENALTY_N3 = 40;\n  _QrCode.PENALTY_N4 = 10;\n  _QrCode.ECC_CODEWORDS_PER_BLOCK = [\n    // Version: (note that index 0 is for padding, and is set to an illegal value)\n    //0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\n    [-1, 7, 10, 15, 20, 26, 18, 20, 24, 30, 18, 20, 24, 26, 30, 22, 24, 28, 30, 28, 28, 28, 28, 30, 30, 26, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\n    // Low\n    [-1, 10, 16, 26, 18, 24, 16, 18, 22, 22, 26, 30, 22, 22, 24, 24, 28, 28, 26, 26, 26, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28],\n    // Medium\n    [-1, 13, 22, 18, 26, 18, 24, 18, 22, 20, 24, 28, 26, 24, 20, 30, 24, 28, 28, 26, 30, 28, 30, 30, 30, 30, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\n    // Quartile\n    [-1, 17, 28, 22, 16, 22, 28, 26, 26, 24, 28, 24, 28, 22, 24, 24, 30, 28, 28, 26, 28, 30, 24, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30]\n    // High\n  ];\n  _QrCode.NUM_ERROR_CORRECTION_BLOCKS = [\n    // Version: (note that index 0 is for padding, and is set to an illegal value)\n    //0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\n    [-1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 8, 8, 9, 9, 10, 12, 12, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 24, 25],\n    // Low\n    [-1, 1, 1, 1, 2, 2, 4, 4, 4, 5, 5, 5, 8, 9, 9, 10, 10, 11, 13, 14, 16, 17, 17, 18, 20, 21, 23, 25, 26, 28, 29, 31, 33, 35, 37, 38, 40, 43, 45, 47, 49],\n    // Medium\n    [-1, 1, 1, 2, 2, 4, 4, 6, 6, 8, 8, 8, 10, 12, 16, 12, 17, 16, 18, 21, 20, 23, 23, 25, 27, 29, 34, 34, 35, 38, 40, 43, 45, 48, 51, 53, 56, 59, 62, 65, 68],\n    // Quartile\n    [-1, 1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19, 21, 25, 25, 25, 34, 30, 32, 35, 37, 40, 42, 45, 48, 51, 54, 57, 60, 63, 66, 70, 74, 77, 81]\n    // High\n  ];\n  let QrCode = _QrCode;\n  qrcodegen2.QrCode = _QrCode;\n  function appendBits(val, len, bb) {\n    if (len < 0 || len > 31 || val >>> len != 0)\n      throw new RangeError(\"Value out of range\");\n    for (let i = len - 1; i >= 0; i--)\n      bb.push(val >>> i & 1);\n  }\n  function getBit(x, i) {\n    return (x >>> i & 1) != 0;\n  }\n  function assert(cond) {\n    if (!cond)\n      throw new Error(\"Assertion error\");\n  }\n  const _QrSegment = class _QrSegment {\n    /*-- Constructor (low level) and fields --*/\n    // Creates a new QR Code segment with the given attributes and data.\n    // The character count (numChars) must agree with the mode and the bit buffer length,\n    // but the constraint isn't checked. The given bit buffer is cloned and stored.\n    constructor(mode, numChars, bitData) {\n      this.mode = mode;\n      this.numChars = numChars;\n      this.bitData = bitData;\n      if (numChars < 0)\n        throw new RangeError(\"Invalid argument\");\n      this.bitData = bitData.slice();\n    }\n    /*-- Static factory functions (mid level) --*/\n    // Returns a segment representing the given binary data encoded in\n    // byte mode. All input byte arrays are acceptable. Any text string\n    // can be converted to UTF-8 bytes and encoded as a byte mode segment.\n    static makeBytes(data) {\n      let bb = [];\n      for (const b of data)\n        appendBits(b, 8, bb);\n      return new _QrSegment(_QrSegment.Mode.BYTE, data.length, bb);\n    }\n    // Returns a segment representing the given string of decimal digits encoded in numeric mode.\n    static makeNumeric(digits) {\n      if (!_QrSegment.isNumeric(digits))\n        throw new RangeError(\"String contains non-numeric characters\");\n      let bb = [];\n      for (let i = 0; i < digits.length; ) {\n        const n = Math.min(digits.length - i, 3);\n        appendBits(parseInt(digits.substring(i, i + n), 10), n * 3 + 1, bb);\n        i += n;\n      }\n      return new _QrSegment(_QrSegment.Mode.NUMERIC, digits.length, bb);\n    }\n    // Returns a segment representing the given text string encoded in alphanumeric mode.\n    // The characters allowed are: 0 to 9, A to Z (uppercase only), space,\n    // dollar, percent, asterisk, plus, hyphen, period, slash, colon.\n    static makeAlphanumeric(text) {\n      if (!_QrSegment.isAlphanumeric(text))\n        throw new RangeError(\"String contains unencodable characters in alphanumeric mode\");\n      let bb = [];\n      let i;\n      for (i = 0; i + 2 <= text.length; i += 2) {\n        let temp = _QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)) * 45;\n        temp += _QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i + 1));\n        appendBits(temp, 11, bb);\n      }\n      if (i < text.length)\n        appendBits(_QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)), 6, bb);\n      return new _QrSegment(_QrSegment.Mode.ALPHANUMERIC, text.length, bb);\n    }\n    // Returns a new mutable list of zero or more segments to represent the given Unicode text string.\n    // The result may use various segment modes and switch modes to optimize the length of the bit stream.\n    static makeSegments(text) {\n      if (text == \"\")\n        return [];\n      else if (_QrSegment.isNumeric(text))\n        return [_QrSegment.makeNumeric(text)];\n      else if (_QrSegment.isAlphanumeric(text))\n        return [_QrSegment.makeAlphanumeric(text)];\n      else\n        return [_QrSegment.makeBytes(_QrSegment.toUtf8ByteArray(text))];\n    }\n    // Returns a segment representing an Extended Channel Interpretation\n    // (ECI) designator with the given assignment value.\n    static makeEci(assignVal) {\n      let bb = [];\n      if (assignVal < 0)\n        throw new RangeError(\"ECI assignment value out of range\");\n      else if (assignVal < 1 << 7)\n        appendBits(assignVal, 8, bb);\n      else if (assignVal < 1 << 14) {\n        appendBits(2, 2, bb);\n        appendBits(assignVal, 14, bb);\n      } else if (assignVal < 1e6) {\n        appendBits(6, 3, bb);\n        appendBits(assignVal, 21, bb);\n      } else\n        throw new RangeError(\"ECI assignment value out of range\");\n      return new _QrSegment(_QrSegment.Mode.ECI, 0, bb);\n    }\n    // Tests whether the given string can be encoded as a segment in numeric mode.\n    // A string is encodable iff each character is in the range 0 to 9.\n    static isNumeric(text) {\n      return _QrSegment.NUMERIC_REGEX.test(text);\n    }\n    // Tests whether the given string can be encoded as a segment in alphanumeric mode.\n    // A string is encodable iff each character is in the following set: 0 to 9, A to Z\n    // (uppercase only), space, dollar, percent, asterisk, plus, hyphen, period, slash, colon.\n    static isAlphanumeric(text) {\n      return _QrSegment.ALPHANUMERIC_REGEX.test(text);\n    }\n    /*-- Methods --*/\n    // Returns a new copy of the data bits of this segment.\n    getData() {\n      return this.bitData.slice();\n    }\n    // (Package-private) Calculates and returns the number of bits needed to encode the given segments at\n    // the given version. The result is infinity if a segment has too many characters to fit its length field.\n    static getTotalBits(segs, version) {\n      let result = 0;\n      for (const seg of segs) {\n        const ccbits = seg.mode.numCharCountBits(version);\n        if (seg.numChars >= 1 << ccbits)\n          return Infinity;\n        result += 4 + ccbits + seg.bitData.length;\n      }\n      return result;\n    }\n    // Returns a new array of bytes representing the given string encoded in UTF-8.\n    static toUtf8ByteArray(str) {\n      str = encodeURI(str);\n      let result = [];\n      for (let i = 0; i < str.length; i++) {\n        if (str.charAt(i) != \"%\")\n          result.push(str.charCodeAt(i));\n        else {\n          result.push(parseInt(str.substring(i + 1, i + 3), 16));\n          i += 2;\n        }\n      }\n      return result;\n    }\n  };\n  /*-- Constants --*/\n  // Describes precisely all strings that are encodable in numeric mode.\n  _QrSegment.NUMERIC_REGEX = /^[0-9]*$/;\n  // Describes precisely all strings that are encodable in alphanumeric mode.\n  _QrSegment.ALPHANUMERIC_REGEX = /^[A-Z0-9 $%*+.\\/:-]*$/;\n  // The set of all legal characters in alphanumeric mode,\n  // where each character value maps to the index in the string.\n  _QrSegment.ALPHANUMERIC_CHARSET = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:\";\n  let QrSegment = _QrSegment;\n  qrcodegen2.QrSegment = _QrSegment;\n})(qrcodegen || (qrcodegen = {}));\n((qrcodegen2) => {\n  let QrCode;\n  ((QrCode2) => {\n    const _Ecc = class _Ecc {\n      // The QR Code can tolerate about 30% erroneous codewords\n      /*-- Constructor and fields --*/\n      constructor(ordinal, formatBits) {\n        this.ordinal = ordinal;\n        this.formatBits = formatBits;\n      }\n    };\n    /*-- Constants --*/\n    _Ecc.LOW = new _Ecc(0, 1);\n    // The QR Code can tolerate about  7% erroneous codewords\n    _Ecc.MEDIUM = new _Ecc(1, 0);\n    // The QR Code can tolerate about 15% erroneous codewords\n    _Ecc.QUARTILE = new _Ecc(2, 3);\n    // The QR Code can tolerate about 25% erroneous codewords\n    _Ecc.HIGH = new _Ecc(3, 2);\n    let Ecc = _Ecc;\n    QrCode2.Ecc = _Ecc;\n  })(QrCode = qrcodegen2.QrCode || (qrcodegen2.QrCode = {}));\n})(qrcodegen || (qrcodegen = {}));\n((qrcodegen2) => {\n  let QrSegment;\n  ((QrSegment2) => {\n    const _Mode = class _Mode {\n      /*-- Constructor and fields --*/\n      constructor(modeBits, numBitsCharCount) {\n        this.modeBits = modeBits;\n        this.numBitsCharCount = numBitsCharCount;\n      }\n      /*-- Method --*/\n      // (Package-private) Returns the bit width of the character count field for a segment in\n      // this mode in a QR Code at the given version number. The result is in the range [0, 16].\n      numCharCountBits(ver) {\n        return this.numBitsCharCount[Math.floor((ver + 7) / 17)];\n      }\n    };\n    /*-- Constants --*/\n    _Mode.NUMERIC = new _Mode(1, [10, 12, 14]);\n    _Mode.ALPHANUMERIC = new _Mode(2, [9, 11, 13]);\n    _Mode.BYTE = new _Mode(4, [8, 16, 16]);\n    _Mode.KANJI = new _Mode(8, [8, 10, 12]);\n    _Mode.ECI = new _Mode(7, [0, 0, 0]);\n    let Mode = _Mode;\n    QrSegment2.Mode = _Mode;\n  })(QrSegment = qrcodegen2.QrSegment || (qrcodegen2.QrSegment = {}));\n})(qrcodegen || (qrcodegen = {}));\nvar qrcodegen_default = qrcodegen;\n\n// src/index.tsx\n/**\n * @license qrcode.react\n * Copyright (c) Paul O'Shannessy\n * SPDX-License-Identifier: ISC\n */\nvar ERROR_LEVEL_MAP = {\n  L: qrcodegen_default.QrCode.Ecc.LOW,\n  M: qrcodegen_default.QrCode.Ecc.MEDIUM,\n  Q: qrcodegen_default.QrCode.Ecc.QUARTILE,\n  H: qrcodegen_default.QrCode.Ecc.HIGH\n};\nvar DEFAULT_SIZE = 128;\nvar DEFAULT_LEVEL = \"L\";\nvar DEFAULT_BGCOLOR = \"#FFFFFF\";\nvar DEFAULT_FGCOLOR = \"#000000\";\nvar DEFAULT_INCLUDEMARGIN = false;\nvar DEFAULT_MINVERSION = 1;\nvar SPEC_MARGIN_SIZE = 4;\nvar DEFAULT_MARGIN_SIZE = 0;\nvar DEFAULT_IMG_SCALE = 0.1;\nfunction generatePath(modules, margin = 0) {\n  const ops = [];\n  modules.forEach(function(row, y) {\n    let start = null;\n    row.forEach(function(cell, x) {\n      if (!cell && start !== null) {\n        ops.push(\n          `M${start + margin} ${y + margin}h${x - start}v1H${start + margin}z`\n        );\n        start = null;\n        return;\n      }\n      if (x === row.length - 1) {\n        if (!cell) {\n          return;\n        }\n        if (start === null) {\n          ops.push(`M${x + margin},${y + margin} h1v1H${x + margin}z`);\n        } else {\n          ops.push(\n            `M${start + margin},${y + margin} h${x + 1 - start}v1H${start + margin}z`\n          );\n        }\n        return;\n      }\n      if (cell && start === null) {\n        start = x;\n      }\n    });\n  });\n  return ops.join(\"\");\n}\nfunction excavateModules(modules, excavation) {\n  return modules.slice().map((row, y) => {\n    if (y < excavation.y || y >= excavation.y + excavation.h) {\n      return row;\n    }\n    return row.map((cell, x) => {\n      if (x < excavation.x || x >= excavation.x + excavation.w) {\n        return cell;\n      }\n      return false;\n    });\n  });\n}\nfunction getImageSettings(cells, size, margin, imageSettings) {\n  if (imageSettings == null) {\n    return null;\n  }\n  const numCells = cells.length + margin * 2;\n  const defaultSize = Math.floor(size * DEFAULT_IMG_SCALE);\n  const scale = numCells / size;\n  const w = (imageSettings.width || defaultSize) * scale;\n  const h = (imageSettings.height || defaultSize) * scale;\n  const x = imageSettings.x == null ? cells.length / 2 - w / 2 : imageSettings.x * scale;\n  const y = imageSettings.y == null ? cells.length / 2 - h / 2 : imageSettings.y * scale;\n  const opacity = imageSettings.opacity == null ? 1 : imageSettings.opacity;\n  let excavation = null;\n  if (imageSettings.excavate) {\n    let floorX = Math.floor(x);\n    let floorY = Math.floor(y);\n    let ceilW = Math.ceil(w + x - floorX);\n    let ceilH = Math.ceil(h + y - floorY);\n    excavation = { x: floorX, y: floorY, w: ceilW, h: ceilH };\n  }\n  const crossOrigin = imageSettings.crossOrigin;\n  return { x, y, h, w, excavation, opacity, crossOrigin };\n}\nfunction getMarginSize(includeMargin, marginSize) {\n  if (marginSize != null) {\n    return Math.max(Math.floor(marginSize), 0);\n  }\n  return includeMargin ? SPEC_MARGIN_SIZE : DEFAULT_MARGIN_SIZE;\n}\nfunction useQRCode({\n  value,\n  level,\n  minVersion,\n  includeMargin,\n  marginSize,\n  imageSettings,\n  size,\n  boostLevel\n}) {\n  let qrcode = React.useMemo(() => {\n    const values = Array.isArray(value) ? value : [value];\n    const segments = values.reduce((accum, v) => {\n      accum.push(...qrcodegen_default.QrSegment.makeSegments(v));\n      return accum;\n    }, []);\n    return qrcodegen_default.QrCode.encodeSegments(\n      segments,\n      ERROR_LEVEL_MAP[level],\n      minVersion,\n      void 0,\n      void 0,\n      boostLevel\n    );\n  }, [value, level, minVersion, boostLevel]);\n  const { cells, margin, numCells, calculatedImageSettings } = React.useMemo(() => {\n    let cells2 = qrcode.getModules();\n    const margin2 = getMarginSize(includeMargin, marginSize);\n    const numCells2 = cells2.length + margin2 * 2;\n    const calculatedImageSettings2 = getImageSettings(\n      cells2,\n      size,\n      margin2,\n      imageSettings\n    );\n    return {\n      cells: cells2,\n      margin: margin2,\n      numCells: numCells2,\n      calculatedImageSettings: calculatedImageSettings2\n    };\n  }, [qrcode, size, imageSettings, includeMargin, marginSize]);\n  return {\n    qrcode,\n    margin,\n    cells,\n    numCells,\n    calculatedImageSettings\n  };\n}\nvar SUPPORTS_PATH2D = function() {\n  try {\n    new Path2D().addPath(new Path2D());\n  } catch (e) {\n    return false;\n  }\n  return true;\n}();\nvar QRCodeCanvas = React.forwardRef(\n  function QRCodeCanvas2(props, forwardedRef) {\n    const _a = props, {\n      value,\n      size = DEFAULT_SIZE,\n      level = DEFAULT_LEVEL,\n      bgColor = DEFAULT_BGCOLOR,\n      fgColor = DEFAULT_FGCOLOR,\n      includeMargin = DEFAULT_INCLUDEMARGIN,\n      minVersion = DEFAULT_MINVERSION,\n      boostLevel,\n      marginSize,\n      imageSettings\n    } = _a, extraProps = __objRest(_a, [\n      \"value\",\n      \"size\",\n      \"level\",\n      \"bgColor\",\n      \"fgColor\",\n      \"includeMargin\",\n      \"minVersion\",\n      \"boostLevel\",\n      \"marginSize\",\n      \"imageSettings\"\n    ]);\n    const _b = extraProps, { style } = _b, otherProps = __objRest(_b, [\"style\"]);\n    const imgSrc = imageSettings == null ? void 0 : imageSettings.src;\n    const _canvas = React.useRef(null);\n    const _image = React.useRef(null);\n    const setCanvasRef = React.useCallback(\n      (node) => {\n        _canvas.current = node;\n        if (typeof forwardedRef === \"function\") {\n          forwardedRef(node);\n        } else if (forwardedRef) {\n          forwardedRef.current = node;\n        }\n      },\n      [forwardedRef]\n    );\n    const [isImgLoaded, setIsImageLoaded] = React.useState(false);\n    const { margin, cells, numCells, calculatedImageSettings } = useQRCode({\n      value,\n      level,\n      minVersion,\n      boostLevel,\n      includeMargin,\n      marginSize,\n      imageSettings,\n      size\n    });\n    React.useEffect(() => {\n      if (_canvas.current != null) {\n        const canvas = _canvas.current;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n          return;\n        }\n        let cellsToDraw = cells;\n        const image = _image.current;\n        const haveImageToRender = calculatedImageSettings != null && image !== null && image.complete && image.naturalHeight !== 0 && image.naturalWidth !== 0;\n        if (haveImageToRender) {\n          if (calculatedImageSettings.excavation != null) {\n            cellsToDraw = excavateModules(\n              cells,\n              calculatedImageSettings.excavation\n            );\n          }\n        }\n        const pixelRatio = window.devicePixelRatio || 1;\n        canvas.height = canvas.width = size * pixelRatio;\n        const scale = size / numCells * pixelRatio;\n        ctx.scale(scale, scale);\n        ctx.fillStyle = bgColor;\n        ctx.fillRect(0, 0, numCells, numCells);\n        ctx.fillStyle = fgColor;\n        if (SUPPORTS_PATH2D) {\n          ctx.fill(new Path2D(generatePath(cellsToDraw, margin)));\n        } else {\n          cells.forEach(function(row, rdx) {\n            row.forEach(function(cell, cdx) {\n              if (cell) {\n                ctx.fillRect(cdx + margin, rdx + margin, 1, 1);\n              }\n            });\n          });\n        }\n        if (calculatedImageSettings) {\n          ctx.globalAlpha = calculatedImageSettings.opacity;\n        }\n        if (haveImageToRender) {\n          ctx.drawImage(\n            image,\n            calculatedImageSettings.x + margin,\n            calculatedImageSettings.y + margin,\n            calculatedImageSettings.w,\n            calculatedImageSettings.h\n          );\n        }\n      }\n    });\n    React.useEffect(() => {\n      setIsImageLoaded(false);\n    }, [imgSrc]);\n    const canvasStyle = __spreadValues({ height: size, width: size }, style);\n    let img = null;\n    if (imgSrc != null) {\n      img = /* @__PURE__ */ React.createElement(\n        \"img\",\n        {\n          src: imgSrc,\n          key: imgSrc,\n          style: { display: \"none\" },\n          onLoad: () => {\n            setIsImageLoaded(true);\n          },\n          ref: _image,\n          crossOrigin: calculatedImageSettings == null ? void 0 : calculatedImageSettings.crossOrigin\n        }\n      );\n    }\n    return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(\n      \"canvas\",\n      __spreadValues({\n        style: canvasStyle,\n        height: size,\n        width: size,\n        ref: setCanvasRef,\n        role: \"img\"\n      }, otherProps)\n    ), img);\n  }\n);\nQRCodeCanvas.displayName = \"QRCodeCanvas\";\nvar QRCodeSVG = React.forwardRef(\n  function QRCodeSVG2(props, forwardedRef) {\n    const _a = props, {\n      value,\n      size = DEFAULT_SIZE,\n      level = DEFAULT_LEVEL,\n      bgColor = DEFAULT_BGCOLOR,\n      fgColor = DEFAULT_FGCOLOR,\n      includeMargin = DEFAULT_INCLUDEMARGIN,\n      minVersion = DEFAULT_MINVERSION,\n      boostLevel,\n      title,\n      marginSize,\n      imageSettings\n    } = _a, otherProps = __objRest(_a, [\n      \"value\",\n      \"size\",\n      \"level\",\n      \"bgColor\",\n      \"fgColor\",\n      \"includeMargin\",\n      \"minVersion\",\n      \"boostLevel\",\n      \"title\",\n      \"marginSize\",\n      \"imageSettings\"\n    ]);\n    const { margin, cells, numCells, calculatedImageSettings } = useQRCode({\n      value,\n      level,\n      minVersion,\n      boostLevel,\n      includeMargin,\n      marginSize,\n      imageSettings,\n      size\n    });\n    let cellsToDraw = cells;\n    let image = null;\n    if (imageSettings != null && calculatedImageSettings != null) {\n      if (calculatedImageSettings.excavation != null) {\n        cellsToDraw = excavateModules(\n          cells,\n          calculatedImageSettings.excavation\n        );\n      }\n      image = /* @__PURE__ */ React.createElement(\n        \"image\",\n        {\n          href: imageSettings.src,\n          height: calculatedImageSettings.h,\n          width: calculatedImageSettings.w,\n          x: calculatedImageSettings.x + margin,\n          y: calculatedImageSettings.y + margin,\n          preserveAspectRatio: \"none\",\n          opacity: calculatedImageSettings.opacity,\n          crossOrigin: calculatedImageSettings.crossOrigin\n        }\n      );\n    }\n    const fgPath = generatePath(cellsToDraw, margin);\n    return /* @__PURE__ */ React.createElement(\n      \"svg\",\n      __spreadValues({\n        height: size,\n        width: size,\n        viewBox: `0 0 ${numCells} ${numCells}`,\n        ref: forwardedRef,\n        role: \"img\"\n      }, otherProps),\n      !!title && /* @__PURE__ */ React.createElement(\"title\", null, title),\n      /* @__PURE__ */ React.createElement(\n        \"path\",\n        {\n          fill: bgColor,\n          d: `M0,0 h${numCells}v${numCells}H0z`,\n          shapeRendering: \"crispEdges\"\n        }\n      ),\n      /* @__PURE__ */ React.createElement(\"path\", { fill: fgColor, d: fgPath, shapeRendering: \"crispEdges\" }),\n      image\n    );\n  }\n);\nQRCodeSVG.displayName = \"QRCodeSVG\";\nexport {\n  QRCodeCanvas,\n  QRCodeSVG\n};\n","import React, { useState } from \"react\";\r\nimport { QRCodeCanvas } from \"qrcode.react\";\r\nimport getData from \"./database\";\r\n\r\nexport default function GenerateQRCode() {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [isValid, setIsValid] = useState(false);\r\n  const [url, setUrl] = useState(\"\");\r\n\r\n  function check() {\r\n    let present = false;\r\n    const database = getData();\r\n    database.forEach((candidate) => {\r\n      if (candidate.teamName === username) present = true;\r\n      return;\r\n    });\r\n    if (present) {\r\n      setIsValid(true);\r\n    } else {\r\n      // setIsValid(false);\r\n      alert(\"Team not found\");\r\n      return;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        style={{\r\n          fontSize: \"1.5rem\",\r\n          margin: \"8px\",\r\n          padding: \"8px\",\r\n        }}\r\n        value={username}\r\n        placeholder=\"Team Name\"\r\n        onChange={(e) => {\r\n          setUsername(e.target.value);\r\n          setIsValid(false);\r\n        }}\r\n      ></input>\r\n      <br />\r\n      <button\r\n        style={{\r\n          fontSize: \"1rem\",\r\n          padding: \"8px\",\r\n        }}\r\n        onClick={check}\r\n      >\r\n        Generate QR Code\r\n      </button>\r\n      <br />\r\n      <QRCodeCanvas\r\n        value={window.location.href + `#/profile/${username}`}\r\n        style={{ margin: \"16px\", display: isValid ? \"inline\" : \"none\" }}\r\n        bgColor=\"#313030\"\r\n        fgColor=\"#FFFFFF\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","export default function getData() {\r\n  const database = [\r\n    {\r\n      candidateName: \"Aarav Sharma\",\r\n      collegeName: \"Tech University, Mumbai\",\r\n      teamName: \"alpha\",\r\n    },\r\n    {\r\n      candidateName: \"Priya Gupta\",\r\n      collegeName: \"Tech University, Mumbai\",\r\n      teamName: \"alpha\",\r\n    },\r\n    {\r\n      candidateName: \"Vikram Singh\",\r\n      collegeName: \"Technology Institute, Chennai\",\r\n      teamName: \"alpha\",\r\n    },\r\n    {\r\n      candidateName: \"Neha Verma\",\r\n      collegeName: \"Innovation University, Kharagpur\",\r\n      teamName: \"beta\",\r\n    },\r\n    {\r\n      candidateName: \"Ravi Patel\",\r\n      collegeName: \"National College of Technology, Surat\",\r\n      teamName: \"beta\",\r\n    },\r\n    {\r\n      candidateName: \"Aditi Mehta\",\r\n      collegeName: \"Innovation University, Kharagpur\",\r\n      teamName: \"beta\",\r\n    },\r\n    {\r\n      candidateName: \"Karan Desai\",\r\n      collegeName: \"Engineering College, Roorkee\",\r\n      teamName: \"gamma\",\r\n    },\r\n    {\r\n      candidateName: \"Maya Reddy\",\r\n      collegeName: \"Engineering College, Roorkee\",\r\n      teamName: \"gamma\",\r\n    },\r\n    {\r\n      candidateName: \"Sahil Khurana\",\r\n      collegeName: \"National Technology University, Trichy\",\r\n      teamName: \"gamma\",\r\n    },\r\n    {\r\n      candidateName: \"Ritika Yadav\",\r\n      collegeName: \"Tech University, Delhi\",\r\n      teamName: \"delta\",\r\n    },\r\n    {\r\n      candidateName: \"Rajesh Kumar\",\r\n      collegeName: \"Tech University, Delhi\",\r\n      teamName: \"delta\",\r\n    },\r\n    {\r\n      candidateName: \"Deepika Rao\",\r\n      collegeName: \"Technology College, Chennai\",\r\n      teamName: \"delta\",\r\n    },\r\n    {\r\n      candidateName: \"Ajay Bansal\",\r\n      collegeName: \"National Institute of Engineering, Warangal\",\r\n      teamName: \"delta\",\r\n    },\r\n  ];\r\n\r\n  return database;\r\n}\r\n","/**\n * react-router v7.1.5\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\n\n// lib/router/history.ts\nvar Action = /* @__PURE__ */ ((Action2) => {\n  Action2[\"Pop\"] = \"POP\";\n  Action2[\"Push\"] = \"PUSH\";\n  Action2[\"Replace\"] = \"REPLACE\";\n  return Action2;\n})(Action || {});\nvar PopStateEventType = \"popstate\";\nfunction createMemoryHistory(options = {}) {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries;\n  entries = initialEntries.map(\n    (entry, index2) => createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index2 === 0 ? \"default\" : void 0\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = \"POP\" /* Pop */;\n  let listener = null;\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation() {\n    return entries[index];\n  }\n  function createMemoryLocation(to, state = null, key) {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n  function createHref2(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  let history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref: createHref2,\n    createURL(to) {\n      return new URL(createHref2(to), \"http://localhost\");\n    },\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n    push(to, state) {\n      action = \"PUSH\" /* Push */;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = \"REPLACE\" /* Replace */;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = \"POP\" /* Pop */;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\nfunction createBrowserHistory(options = {}) {\n  function createBrowserLocation(window2, globalHistory) {\n    let { pathname, search, hash } = window2.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      globalHistory.state && globalHistory.state.usr || null,\n      globalHistory.state && globalHistory.state.key || \"default\"\n    );\n  }\n  function createBrowserHref(window2, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\nfunction createHashHistory(options = {}) {\n  function createHashLocation(window2, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window2.location.hash.substring(1));\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      globalHistory.state && globalHistory.state.usr || null,\n      globalHistory.state && globalHistory.state.key || \"default\"\n    );\n  }\n  function createHashHref(window2, to) {\n    let base = window2.document.querySelector(\"base\");\n    let href = \"\";\n    if (base && base.getAttribute(\"href\")) {\n      let url = window2.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n  function validateHashLocation(location, to) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\nfunction warning(cond, message) {\n  if (!cond) {\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      throw new Error(message);\n    } catch (e) {\n    }\n  }\n}\nfunction createKey() {\n  return Math.random().toString(36).substring(2, 10);\n}\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\nfunction createLocation(current, to, state = null, key) {\n  let location = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...typeof to === \"string\" ? parsePath(to) : to,\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  };\n  return location;\n}\nfunction createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\"\n}) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\nfunction parsePath(path) {\n  let parsedPath = {};\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substring(hashIndex);\n      path = path.substring(0, hashIndex);\n    }\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substring(searchIndex);\n      path = path.substring(0, searchIndex);\n    }\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n  return parsedPath;\n}\nfunction getUrlBasedHistory(getLocation, createHref2, validateLocation, options = {}) {\n  let { window: window2 = document.defaultView, v5Compat = false } = options;\n  let globalHistory = window2.history;\n  let action = \"POP\" /* Pop */;\n  let listener = null;\n  let index = getIndex();\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n  function getIndex() {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n  function handlePop() {\n    action = \"POP\" /* Pop */;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n  function push(to, state) {\n    action = \"PUSH\" /* Push */;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      window2.location.assign(url);\n    }\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n  function replace2(to, state) {\n    action = \"REPLACE\" /* Replace */;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n  function createURL(to) {\n    let base = window2.location.origin !== \"null\" ? window2.location.origin : window2.location.href;\n    let href = typeof to === \"string\" ? to : createPath(to);\n    href = href.replace(/ $/, \"%20\");\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n  let history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window2, globalHistory);\n    },\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window2.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window2.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref2(window2, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n    push,\n    replace: replace2,\n    go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n}\n\n// lib/router/utils.ts\nvar immutableRouteKeys = /* @__PURE__ */ new Set([\n  \"lazy\",\n  \"caseSensitive\",\n  \"path\",\n  \"id\",\n  \"index\",\n  \"children\"\n]);\nfunction isIndexRoute(route) {\n  return route.index === true;\n}\nfunction convertRoutesToDataRoutes(routes, mapRouteProperties2, parentPath = [], manifest = {}) {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, String(index)];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !manifest[id],\n      `Found a route id collision on id \"${id}\".  Route id's must be globally unique within Data Router usages`\n    );\n    if (isIndexRoute(route)) {\n      let indexRoute = {\n        ...route,\n        ...mapRouteProperties2(route),\n        id\n      };\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = {\n        ...route,\n        ...mapRouteProperties2(route),\n        id,\n        children: void 0\n      };\n      manifest[id] = pathOrLayoutRoute;\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(\n          route.children,\n          mapRouteProperties2,\n          treePath,\n          manifest\n        );\n      }\n      return pathOrLayoutRoute;\n    }\n  });\n}\nfunction matchRoutes(routes, locationArg, basename = \"/\") {\n  return matchRoutesImpl(routes, locationArg, basename, false);\n}\nfunction matchRoutesImpl(routes, locationArg, basename, allowPartial) {\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n  if (pathname == null) {\n    return null;\n  }\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    let decoded = decodePath(pathname);\n    matches = matchRouteBranch(\n      branches[i],\n      decoded,\n      allowPartial\n    );\n  }\n  return matches;\n}\nfunction convertRouteMatchToUiMatch(match, loaderData) {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\nfunction flattenRoutes(routes, branches = [], parentsMeta = [], parentPath = \"\") {\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === void 0 ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path \"${parentPath}\" is not valid. An absolute child route path must start with the combined path of all its parent routes.`\n      );\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove all child routes from route path \"${path}\".`\n      );\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n    if (route.path == null && !route.index) {\n      return;\n    }\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n  routes.forEach((route, index) => {\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\nfunction explodeOptionalSegments(path) {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments;\n  let isOptional = first.endsWith(\"?\");\n  let required = first.replace(/\\?$/, \"\");\n  if (rest.length === 0) {\n    return isOptional ? [required, \"\"] : [required];\n  }\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  let result = [];\n  result.push(\n    ...restExploded.map(\n      (subpath) => subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n  return result.map(\n    (exploded) => path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\nfunction rankRouteBranches(branches) {\n  branches.sort(\n    (a, b) => a.score !== b.score ? b.score - a.score : compareIndexes(\n      a.routesMeta.map((meta) => meta.childrenIndex),\n      b.routesMeta.map((meta) => meta.childrenIndex)\n    )\n  );\n}\nvar paramRe = /^:[\\w-]+$/;\nvar dynamicSegmentValue = 3;\nvar indexRouteValue = 2;\nvar emptySegmentValue = 1;\nvar staticSegmentValue = 10;\nvar splatPenalty = -2;\nvar isSplat = (s) => s === \"*\";\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n  return segments.filter((s) => !isSplat(s)).reduce(\n    (score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue),\n    initialScore\n  );\n}\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ? (\n    // If two routes are siblings, we should try to match the earlier sibling\n    // first. This allows people to have fine-grained control over the matching\n    // behavior by simply putting routes with identical paths in the order they\n    // want them tried.\n    a[a.length - 1] - b[b.length - 1]\n  ) : (\n    // Otherwise, it doesn't really make sense to rank non-siblings by index,\n    // so they sort equally.\n    0\n  );\n}\nfunction matchRouteBranch(branch, pathname, allowPartial = false) {\n  let { routesMeta } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n    let route = meta.route;\n    if (!match && end && allowPartial && !routesMeta[routesMeta.length - 1].route.index) {\n      match = matchPath(\n        {\n          path: meta.relativePath,\n          caseSensitive: meta.caseSensitive,\n          end: false\n        },\n        remainingPathname\n      );\n    }\n    if (!match) {\n      return null;\n    }\n    Object.assign(matchedParams, match.params);\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route\n    });\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n  return matches;\n}\nfunction generatePath(originalPath, params = {}) {\n  let path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were \"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must always follow a \\`/\\` in the pattern. To get rid of this warning, please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\");\n  }\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n  const stringify = (p) => p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n  const segments = path.split(/\\/+/).map((segment, index, array) => {\n    const isLastSegment = index === array.length - 1;\n    if (isLastSegment && segment === \"*\") {\n      const star = \"*\";\n      return stringify(params[star]);\n    }\n    const keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n    if (keyMatch) {\n      const [, key, optional] = keyMatch;\n      let param = params[key];\n      invariant(optional === \"?\" || param != null, `Missing \":${key}\" param`);\n      return stringify(param);\n    }\n    return segment.replace(/\\?$/g, \"\");\n  }).filter((segment) => !!segment);\n  return prefix + segments.join(\"/\");\n}\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n  let [matcher, compiledParams] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = compiledParams.reduce(\n    (memo2, { paramName, isOptional }, index) => {\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n      }\n      const value = captureGroups[index];\n      if (isOptional && !value) {\n        memo2[paramName] = void 0;\n      } else {\n        memo2[paramName] = (value || \"\").replace(/%2F/g, \"/\");\n      }\n      return memo2;\n    },\n    {}\n  );\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\nfunction compilePath(path, caseSensitive = false, end = true) {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were \"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must always follow a \\`/\\` in the pattern. To get rid of this warning, please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n  let params = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\").replace(/^\\/*/, \"/\").replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\").replace(\n    /\\/:([\\w-]+)(\\?)?/g,\n    (_, paramName, isOptional) => {\n      params.push({ paramName, isOptional: isOptional != null });\n      return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n    }\n  );\n  if (path.endsWith(\"*\")) {\n    params.push({ paramName: \"*\" });\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" : \"(?:\\\\/(.+)|\\\\/*)$\";\n  } else if (end) {\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n  }\n  let matcher = new RegExp(regexpSource, caseSensitive ? void 0 : \"i\");\n  return [matcher, params];\n}\nfunction decodePath(value) {\n  try {\n    return value.split(\"/\").map((v) => decodeURIComponent(v).replace(/\\//g, \"%2F\")).join(\"/\");\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is a malformed URL segment. This is probably due to a bad percent encoding (${error}).`\n    );\n    return value;\n  }\n}\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    return null;\n  }\n  return pathname.slice(startIndex) || \"/\";\n}\nfunction resolvePath(to, fromPathname = \"/\") {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\nfunction getInvalidPathError(char, field, dest, path) {\n  return `Cannot include a '${char}' character in a manually specified \\`to.${field}\\` field [${JSON.stringify(\n    path\n  )}].  Please separate it out to the \\`to.${dest}\\` field. Alternatively you may provide the full path as a string in <Link to=\"...\"> and the router will parse it for you.`;\n}\nfunction getPathContributingMatches(matches) {\n  return matches.filter(\n    (match, index) => index === 0 || match.route.path && match.route.path.length > 0\n  );\n}\nfunction getResolveToMatches(matches) {\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches.map(\n    (match, idx) => idx === pathMatches.length - 1 ? match.pathname : match.pathnameBase\n  );\n}\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative = false) {\n  let to;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from;\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n      to.pathname = toSegments.join(\"/\");\n    }\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n  let path = resolvePath(to, from);\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n  return path;\n}\nvar joinPaths = (paths) => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\nvar normalizePathname = (pathname) => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\nvar normalizeSearch = (search) => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\nvar normalizeHash = (hash) => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\nvar DataWithResponseInit = class {\n  constructor(data2, init) {\n    this.type = \"DataWithResponseInit\";\n    this.data = data2;\n    this.init = init || null;\n  }\n};\nfunction data(data2, init) {\n  return new DataWithResponseInit(\n    data2,\n    typeof init === \"number\" ? { status: init } : init\n  );\n}\nvar redirect = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, { ...responseInit, headers });\n};\nvar redirectDocument = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\nvar replace = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Replace\", \"true\");\n  return response;\n};\nvar ErrorResponseImpl = class {\n  constructor(status, statusText, data2, internal = false) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data2 instanceof Error) {\n      this.data = data2.toString();\n      this.error = data2;\n    } else {\n      this.data = data2;\n    }\n  }\n};\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\n\n// lib/router/router.ts\nvar validMutationMethodsArr = [\n  \"POST\",\n  \"PUT\",\n  \"PATCH\",\n  \"DELETE\"\n];\nvar validMutationMethods = new Set(\n  validMutationMethodsArr\n);\nvar validRequestMethodsArr = [\n  \"GET\",\n  ...validMutationMethodsArr\n];\nvar validRequestMethods = new Set(validRequestMethodsArr);\nvar redirectStatusCodes = /* @__PURE__ */ new Set([301, 302, 303, 307, 308]);\nvar redirectPreserveMethodStatusCodes = /* @__PURE__ */ new Set([307, 308]);\nvar IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: void 0,\n  formMethod: void 0,\n  formAction: void 0,\n  formEncType: void 0,\n  formData: void 0,\n  json: void 0,\n  text: void 0\n};\nvar IDLE_FETCHER = {\n  state: \"idle\",\n  data: void 0,\n  formMethod: void 0,\n  formAction: void 0,\n  formEncType: void 0,\n  formData: void 0,\n  json: void 0,\n  text: void 0\n};\nvar IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: void 0,\n  reset: void 0,\n  location: void 0\n};\nvar ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nvar defaultMapRouteProperties = (route) => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary)\n});\nvar TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\nvar ResetLoaderDataSymbol = Symbol(\"ResetLoaderData\");\nfunction createRouter(init) {\n  const routerWindow = init.window ? init.window : typeof window !== \"undefined\" ? window : void 0;\n  const isBrowser2 = typeof routerWindow !== \"undefined\" && typeof routerWindow.document !== \"undefined\" && typeof routerWindow.document.createElement !== \"undefined\";\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n  let mapRouteProperties2 = init.mapRouteProperties || defaultMapRouteProperties;\n  let manifest = {};\n  let dataRoutes = convertRoutesToDataRoutes(\n    init.routes,\n    mapRouteProperties2,\n    void 0,\n    manifest\n  );\n  let inFlightDataRoutes;\n  let basename = init.basename || \"/\";\n  let dataStrategyImpl = init.dataStrategy || defaultDataStrategy;\n  let patchRoutesOnNavigationImpl = init.patchRoutesOnNavigation;\n  let future = {\n    ...init.future\n  };\n  let unlistenHistory = null;\n  let subscribers = /* @__PURE__ */ new Set();\n  let savedScrollPositions2 = null;\n  let getScrollRestorationKey2 = null;\n  let getScrollPosition = null;\n  let initialScrollRestored = init.hydrationData != null;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialMatchesIsFOW = false;\n  let initialErrors = null;\n  if (initialMatches == null && !patchRoutesOnNavigationImpl) {\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n  if (initialMatches && !init.hydrationData) {\n    let fogOfWar = checkFogOfWar(\n      initialMatches,\n      dataRoutes,\n      init.history.location.pathname\n    );\n    if (fogOfWar.active) {\n      initialMatches = null;\n    }\n  }\n  let initialized;\n  if (!initialMatches) {\n    initialized = false;\n    initialMatches = [];\n    let fogOfWar = checkFogOfWar(\n      null,\n      dataRoutes,\n      init.history.location.pathname\n    );\n    if (fogOfWar.active && fogOfWar.matches) {\n      initialMatchesIsFOW = true;\n      initialMatches = fogOfWar.matches;\n    }\n  } else if (initialMatches.some((m) => m.route.lazy)) {\n    initialized = false;\n  } else if (!initialMatches.some((m) => m.route.loader)) {\n    initialized = true;\n  } else {\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n    if (errors) {\n      let idx = initialMatches.findIndex(\n        (m) => errors[m.route.id] !== void 0\n      );\n      initialized = initialMatches.slice(0, idx + 1).every((m) => !shouldLoadRouteOnHydration(m.route, loaderData, errors));\n    } else {\n      initialized = initialMatches.every(\n        (m) => !shouldLoadRouteOnHydration(m.route, loaderData, errors)\n      );\n    }\n  }\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: /* @__PURE__ */ new Map(),\n    blockers: /* @__PURE__ */ new Map()\n  };\n  let pendingAction = \"POP\" /* Pop */;\n  let pendingPreventScrollReset = false;\n  let pendingNavigationController;\n  let pendingViewTransitionEnabled = false;\n  let appliedViewTransitions = /* @__PURE__ */ new Map();\n  let removePageHideEventListener = null;\n  let isUninterruptedRevalidation = false;\n  let isRevalidationRequired = false;\n  let cancelledFetcherLoads = /* @__PURE__ */ new Set();\n  let fetchControllers = /* @__PURE__ */ new Map();\n  let incrementingLoadId = 0;\n  let pendingNavigationLoadId = -1;\n  let fetchReloadIds = /* @__PURE__ */ new Map();\n  let fetchRedirectIds = /* @__PURE__ */ new Set();\n  let fetchLoadMatches = /* @__PURE__ */ new Map();\n  let activeFetchers = /* @__PURE__ */ new Map();\n  let fetchersQueuedForDeletion = /* @__PURE__ */ new Set();\n  let blockerFunctions = /* @__PURE__ */ new Map();\n  let unblockBlockerHistoryUpdate = void 0;\n  let pendingRevalidationDfd = null;\n  function initialize() {\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        if (unblockBlockerHistoryUpdate) {\n          unblockBlockerHistoryUpdate();\n          unblockBlockerHistoryUpdate = void 0;\n          return;\n        }\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location that was not created by @remix-run/router. This will fail silently in production. This can happen if you are navigating outside the router via `window.history.pushState`/`window.location.hash` instead of using router navigation APIs.  This can also happen if you are using createHashRouter and the user manually changes the URL.\"\n        );\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction\n        });\n        if (blockerKey && delta != null) {\n          let nextHistoryUpdatePromise = new Promise((resolve) => {\n            unblockBlockerHistoryUpdate = resolve;\n          });\n          init.history.go(delta * -1);\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey, {\n                state: \"proceeding\",\n                proceed: void 0,\n                reset: void 0,\n                location\n              });\n              nextHistoryUpdatePromise.then(() => init.history.go(delta));\n            },\n            reset() {\n              let blockers = new Map(state.blockers);\n              blockers.set(blockerKey, IDLE_BLOCKER);\n              updateState({ blockers });\n            }\n          });\n          return;\n        }\n        return startNavigation(historyAction, location);\n      }\n    );\n    if (isBrowser2) {\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () => persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () => routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n    if (!state.initialized) {\n      startNavigation(\"POP\" /* Pop */, state.location, {\n        initialHydration: true\n      });\n    }\n    return router;\n  }\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n  function updateState(newState, opts = {}) {\n    state = {\n      ...state,\n      ...newState\n    };\n    let unmountedFetchers = [];\n    let mountedFetchers = [];\n    state.fetchers.forEach((fetcher, key) => {\n      if (fetcher.state === \"idle\") {\n        if (fetchersQueuedForDeletion.has(key)) {\n          unmountedFetchers.push(key);\n        } else {\n          mountedFetchers.push(key);\n        }\n      }\n    });\n    fetchersQueuedForDeletion.forEach((key) => {\n      if (!state.fetchers.has(key) && !fetchControllers.has(key)) {\n        unmountedFetchers.push(key);\n      }\n    });\n    [...subscribers].forEach(\n      (subscriber) => subscriber(state, {\n        deletedFetchers: unmountedFetchers,\n        viewTransitionOpts: opts.viewTransitionOpts,\n        flushSync: opts.flushSync === true\n      })\n    );\n    unmountedFetchers.forEach((key) => deleteFetcher(key));\n    mountedFetchers.forEach((key) => state.fetchers.delete(key));\n  }\n  function completeNavigation(location, newState, { flushSync } = {}) {\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && location.state?._isRedirect !== true;\n    let actionData;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      actionData = state.actionData;\n    } else {\n      actionData = null;\n    }\n    let loaderData = newState.loaderData ? mergeLoaderData(\n      state.loaderData,\n      newState.loaderData,\n      newState.matches || [],\n      newState.errors\n    ) : state.loaderData;\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && location.state?._isRedirect !== true;\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = void 0;\n    }\n    if (isUninterruptedRevalidation) {\n    } else if (pendingAction === \"POP\" /* Pop */) {\n    } else if (pendingAction === \"PUSH\" /* Push */) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === \"REPLACE\" /* Replace */) {\n      init.history.replace(location, location.state);\n    }\n    let viewTransitionOpts;\n    if (pendingAction === \"POP\" /* Pop */) {\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = /* @__PURE__ */ new Set([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location\n      };\n    }\n    updateState(\n      {\n        ...newState,\n        // matches, errors, fetchers go through as-is\n        actionData,\n        loaderData,\n        historyAction: pendingAction,\n        location,\n        initialized: true,\n        navigation: IDLE_NAVIGATION,\n        revalidation: \"idle\",\n        restoreScrollPosition: getSavedScrollPosition(\n          location,\n          newState.matches || state.matches\n        ),\n        preventScrollReset,\n        blockers\n      },\n      {\n        viewTransitionOpts,\n        flushSync: flushSync === true\n      }\n    );\n    pendingAction = \"POP\" /* Pop */;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    pendingRevalidationDfd?.resolve();\n    pendingRevalidationDfd = null;\n  }\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      to,\n      opts?.fromRouteId,\n      opts?.relative\n    );\n    let { path, submission, error } = normalizeNavigateOptions(\n      false,\n      normalizedPath,\n      opts\n    );\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation)\n    };\n    let userReplace = opts && opts.replace != null ? opts.replace : void 0;\n    let historyAction = \"PUSH\" /* Push */;\n    if (userReplace === true) {\n      historyAction = \"REPLACE\" /* Replace */;\n    } else if (userReplace === false) {\n    } else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n      historyAction = \"REPLACE\" /* Replace */;\n    }\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : void 0;\n    let flushSync = (opts && opts.flushSync) === true;\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction\n    });\n    if (blockerKey) {\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey, {\n            state: \"proceeding\",\n            proceed: void 0,\n            reset: void 0,\n            location: nextLocation\n          });\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey, IDLE_BLOCKER);\n          updateState({ blockers });\n        }\n      });\n      return;\n    }\n    await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.viewTransition,\n      flushSync\n    });\n  }\n  function revalidate() {\n    if (!pendingRevalidationDfd) {\n      pendingRevalidationDfd = createDeferred();\n    }\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n    let promise = pendingRevalidationDfd.promise;\n    if (state.navigation.state === \"submitting\") {\n      return promise;\n    }\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return promise;\n    }\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      {\n        overrideNavigation: state.navigation,\n        // Proxy through any rending view transition\n        enableViewTransition: pendingViewTransitionEnabled === true\n      }\n    );\n    return promise;\n  }\n  async function startNavigation(historyAction, location, opts) {\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true;\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = opts?.initialHydration && state.matches && state.matches.length > 0 && !initialMatchesIsFOW ? (\n      // `matchRoutes()` has already been called if we're in here via `router.initialize()`\n      state.matches\n    ) : matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n    if (matches && state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n      completeNavigation(location, { matches }, { flushSync });\n      return;\n    }\n    let fogOfWar = checkFogOfWar(matches, routesToUse, location.pathname);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n    if (!matches) {\n      let { error, notFoundMatches, route } = handleNavigational404(\n        location.pathname\n      );\n      completeNavigation(\n        location,\n        {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error\n          }\n        },\n        { flushSync }\n      );\n      return;\n    }\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionResult;\n    if (opts && opts.pendingError) {\n      pendingActionResult = [\n        findNearestBoundary(matches).route.id,\n        { type: \"error\" /* error */, error: opts.pendingError }\n      ];\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      let actionResult = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        fogOfWar.active,\n        { replace: opts.replace, flushSync }\n      );\n      if (actionResult.shortCircuited) {\n        return;\n      }\n      if (actionResult.pendingActionResult) {\n        let [routeId, result] = actionResult.pendingActionResult;\n        if (isErrorResult(result) && isRouteErrorResponse(result.error) && result.error.status === 404) {\n          pendingNavigationController = null;\n          completeNavigation(location, {\n            matches: actionResult.matches,\n            loaderData: {},\n            errors: {\n              [routeId]: result.error\n            }\n          });\n          return;\n        }\n      }\n      matches = actionResult.matches || matches;\n      pendingActionResult = actionResult.pendingActionResult;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false;\n      fogOfWar.active = false;\n      request = createClientSideRequest(\n        init.history,\n        request.url,\n        request.signal\n      );\n    }\n    let {\n      shortCircuited,\n      matches: updatedMatches,\n      loaderData,\n      errors\n    } = await handleLoaders(\n      request,\n      location,\n      matches,\n      fogOfWar.active,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.fetcherSubmission,\n      opts && opts.replace,\n      opts && opts.initialHydration === true,\n      flushSync,\n      pendingActionResult\n    );\n    if (shortCircuited) {\n      return;\n    }\n    pendingNavigationController = null;\n    completeNavigation(location, {\n      matches: updatedMatches || matches,\n      ...getActionDataForCommit(pendingActionResult),\n      loaderData,\n      errors\n    });\n  }\n  async function handleAction(request, location, submission, matches, isFogOfWar, opts = {}) {\n    interruptActiveLoads();\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({ navigation }, { flushSync: opts.flushSync === true });\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        matches,\n        location.pathname,\n        request.signal\n      );\n      if (discoverResult.type === \"aborted\") {\n        return { shortCircuited: true };\n      } else if (discoverResult.type === \"error\") {\n        let boundaryId = findNearestBoundary(discoverResult.partialMatches).route.id;\n        return {\n          matches: discoverResult.partialMatches,\n          pendingActionResult: [\n            boundaryId,\n            {\n              type: \"error\" /* error */,\n              error: discoverResult.error\n            }\n          ]\n        };\n      } else if (!discoverResult.matches) {\n        let { notFoundMatches, error, route } = handleNavigational404(\n          location.pathname\n        );\n        return {\n          matches: notFoundMatches,\n          pendingActionResult: [\n            route.id,\n            {\n              type: \"error\" /* error */,\n              error\n            }\n          ]\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: \"error\" /* error */,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      let results = await callDataStrategy(\n        \"action\",\n        state,\n        request,\n        [actionMatch],\n        matches,\n        null\n      );\n      result = results[actionMatch.route.id];\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n    if (isRedirectResult(result)) {\n      let replace2;\n      if (opts && opts.replace != null) {\n        replace2 = opts.replace;\n      } else {\n        let location2 = normalizeRedirectLocation(\n          result.response.headers.get(\"Location\"),\n          new URL(request.url),\n          basename\n        );\n        replace2 = location2 === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(request, result, true, {\n        submission,\n        replace: replace2\n      });\n      return { shortCircuited: true };\n    }\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      if ((opts && opts.replace) !== true) {\n        pendingAction = \"PUSH\" /* Push */;\n      }\n      return {\n        matches,\n        pendingActionResult: [boundaryMatch.route.id, result]\n      };\n    }\n    return {\n      matches,\n      pendingActionResult: [actionMatch.route.id, result]\n    };\n  }\n  async function handleLoaders(request, location, matches, isFogOfWar, overrideNavigation, submission, fetcherSubmission, replace2, initialHydration, flushSync, pendingActionResult) {\n    let loadingNavigation = overrideNavigation || getLoadingNavigation(location, submission);\n    let activeSubmission = submission || fetcherSubmission || getSubmissionFromNavigation(loadingNavigation);\n    let shouldUpdateNavigationState = !isUninterruptedRevalidation && !initialHydration;\n    if (isFogOfWar) {\n      if (shouldUpdateNavigationState) {\n        let actionData = getUpdatedActionData(pendingActionResult);\n        updateState(\n          {\n            navigation: loadingNavigation,\n            ...actionData !== void 0 ? { actionData } : {}\n          },\n          {\n            flushSync\n          }\n        );\n      }\n      let discoverResult = await discoverRoutes(\n        matches,\n        location.pathname,\n        request.signal\n      );\n      if (discoverResult.type === \"aborted\") {\n        return { shortCircuited: true };\n      } else if (discoverResult.type === \"error\") {\n        let boundaryId = findNearestBoundary(discoverResult.partialMatches).route.id;\n        return {\n          matches: discoverResult.partialMatches,\n          loaderData: {},\n          errors: {\n            [boundaryId]: discoverResult.error\n          }\n        };\n      } else if (!discoverResult.matches) {\n        let { error, notFoundMatches, route } = handleNavigational404(\n          location.pathname\n        );\n        return {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error\n          }\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      initialHydration === true,\n      isRevalidationRequired,\n      cancelledFetcherLoads,\n      fetchersQueuedForDeletion,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      pendingActionResult\n    );\n    pendingNavigationLoadId = ++incrementingLoadId;\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers2 = markFetchRedirectsDone();\n      completeNavigation(\n        location,\n        {\n          matches,\n          loaderData: {},\n          // Commit pending error if we're short circuiting\n          errors: pendingActionResult && isErrorResult(pendingActionResult[1]) ? { [pendingActionResult[0]]: pendingActionResult[1].error } : null,\n          ...getActionDataForCommit(pendingActionResult),\n          ...updatedFetchers2 ? { fetchers: new Map(state.fetchers) } : {}\n        },\n        { flushSync }\n      );\n      return { shortCircuited: true };\n    }\n    if (shouldUpdateNavigationState) {\n      let updates = {};\n      if (!isFogOfWar) {\n        updates.navigation = loadingNavigation;\n        let actionData = getUpdatedActionData(pendingActionResult);\n        if (actionData !== void 0) {\n          updates.actionData = actionData;\n        }\n      }\n      if (revalidatingFetchers.length > 0) {\n        updates.fetchers = getUpdatedRevalidatingFetchers(revalidatingFetchers);\n      }\n      updateState(updates, { flushSync });\n    }\n    revalidatingFetchers.forEach((rf) => {\n      abortFetcher(rf.key);\n      if (rf.controller) {\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach((f) => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n    let { loaderResults, fetcherResults } = await callLoadersAndMaybeResolveData(\n      state,\n      matches,\n      matchesToLoad,\n      revalidatingFetchers,\n      request\n    );\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n    let redirect2 = findRedirect(loaderResults);\n    if (redirect2) {\n      await startRedirectNavigation(request, redirect2.result, true, {\n        replace: replace2\n      });\n      return { shortCircuited: true };\n    }\n    redirect2 = findRedirect(fetcherResults);\n    if (redirect2) {\n      fetchRedirectIds.add(redirect2.key);\n      await startRedirectNavigation(request, redirect2.result, true, {\n        replace: replace2\n      });\n      return { shortCircuited: true };\n    }\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      loaderResults,\n      pendingActionResult,\n      revalidatingFetchers,\n      fetcherResults\n    );\n    if (initialHydration && state.errors) {\n      errors = { ...state.errors, ...errors };\n    }\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n    return {\n      matches,\n      loaderData,\n      errors,\n      ...shouldUpdateFetchers ? { fetchers: new Map(state.fetchers) } : {}\n    };\n  }\n  function getUpdatedActionData(pendingActionResult) {\n    if (pendingActionResult && !isErrorResult(pendingActionResult[1])) {\n      return {\n        [pendingActionResult[0]]: pendingActionResult[1].data\n      };\n    } else if (state.actionData) {\n      if (Object.keys(state.actionData).length === 0) {\n        return null;\n      } else {\n        return state.actionData;\n      }\n    }\n  }\n  function getUpdatedRevalidatingFetchers(revalidatingFetchers) {\n    revalidatingFetchers.forEach((rf) => {\n      let fetcher = state.fetchers.get(rf.key);\n      let revalidatingFetcher = getLoadingFetcher(\n        void 0,\n        fetcher ? fetcher.data : void 0\n      );\n      state.fetchers.set(rf.key, revalidatingFetcher);\n    });\n    return new Map(state.fetchers);\n  }\n  async function fetch2(key, routeId, href, opts) {\n    abortFetcher(key);\n    let flushSync = (opts && opts.flushSync) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      href,\n      routeId,\n      opts?.relative\n    );\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n    let fogOfWar = checkFogOfWar(matches, routesToUse, normalizedPath);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: normalizedPath }),\n        { flushSync }\n      );\n      return;\n    }\n    let { path, submission, error } = normalizeNavigateOptions(\n      true,\n      normalizedPath,\n      opts\n    );\n    if (error) {\n      setFetcherError(key, routeId, error, { flushSync });\n      return;\n    }\n    let match = getTargetMatch(matches, path);\n    let preventScrollReset = (opts && opts.preventScrollReset) === true;\n    if (submission && isMutationMethod(submission.formMethod)) {\n      await handleFetcherAction(\n        key,\n        routeId,\n        path,\n        match,\n        matches,\n        fogOfWar.active,\n        flushSync,\n        preventScrollReset,\n        submission\n      );\n      return;\n    }\n    fetchLoadMatches.set(key, { routeId, path });\n    await handleFetcherLoader(\n      key,\n      routeId,\n      path,\n      match,\n      matches,\n      fogOfWar.active,\n      flushSync,\n      preventScrollReset,\n      submission\n    );\n  }\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, isFogOfWar, flushSync, preventScrollReset, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n    function detectAndHandle405Error(m) {\n      if (!m.route.action && !m.route.lazy) {\n        let error = getInternalRouterError(405, {\n          method: submission.formMethod,\n          pathname: path,\n          routeId\n        });\n        setFetcherError(key, routeId, error, { flushSync });\n        return true;\n      }\n      return false;\n    }\n    if (!isFogOfWar && detectAndHandle405Error(match)) {\n      return;\n    }\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync\n    });\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        requestMatches,\n        path,\n        fetchRequest.signal\n      );\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        setFetcherError(key, routeId, discoverResult.error, { flushSync });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(\n          key,\n          routeId,\n          getInternalRouterError(404, { pathname: path }),\n          { flushSync }\n        );\n        return;\n      } else {\n        requestMatches = discoverResult.matches;\n        match = getTargetMatch(requestMatches, path);\n        if (detectAndHandle405Error(match)) {\n          return;\n        }\n      }\n    }\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let actionResults = await callDataStrategy(\n      \"action\",\n      state,\n      fetchRequest,\n      [match],\n      requestMatches,\n      key\n    );\n    let actionResult = actionResults[match.route.id];\n    if (fetchRequest.signal.aborted) {\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n    if (fetchersQueuedForDeletion.has(key)) {\n      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {\n        updateFetcherState(key, getDoneFetcher(void 0));\n        return;\n      }\n    } else {\n      if (isRedirectResult(actionResult)) {\n        fetchControllers.delete(key);\n        if (pendingNavigationLoadId > originatingLoadId) {\n          updateFetcherState(key, getDoneFetcher(void 0));\n          return;\n        } else {\n          fetchRedirectIds.add(key);\n          updateFetcherState(key, getLoadingFetcher(submission));\n          return startRedirectNavigation(fetchRequest, actionResult, false, {\n            fetcherSubmission: submission,\n            preventScrollReset\n          });\n        }\n      }\n      if (isErrorResult(actionResult)) {\n        setFetcherError(key, routeId, actionResult.error);\n        return;\n      }\n    }\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n      nextLocation,\n      abortController.signal\n    );\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      false,\n      isRevalidationRequired,\n      cancelledFetcherLoads,\n      fetchersQueuedForDeletion,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      [match.route.id, actionResult]\n    );\n    revalidatingFetchers.filter((rf) => rf.key !== key).forEach((rf) => {\n      let staleKey = rf.key;\n      let existingFetcher2 = state.fetchers.get(staleKey);\n      let revalidatingFetcher = getLoadingFetcher(\n        void 0,\n        existingFetcher2 ? existingFetcher2.data : void 0\n      );\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      abortFetcher(staleKey);\n      if (rf.controller) {\n        fetchControllers.set(staleKey, rf.controller);\n      }\n    });\n    updateState({ fetchers: new Map(state.fetchers) });\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach((rf) => abortFetcher(rf.key));\n    abortController.signal.addEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n    let { loaderResults, fetcherResults } = await callLoadersAndMaybeResolveData(\n      state,\n      matches,\n      matchesToLoad,\n      revalidatingFetchers,\n      revalidationRequest\n    );\n    if (abortController.signal.aborted) {\n      return;\n    }\n    abortController.signal.removeEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n    let redirect2 = findRedirect(loaderResults);\n    if (redirect2) {\n      return startRedirectNavigation(\n        revalidationRequest,\n        redirect2.result,\n        false,\n        { preventScrollReset }\n      );\n    }\n    redirect2 = findRedirect(fetcherResults);\n    if (redirect2) {\n      fetchRedirectIds.add(redirect2.key);\n      return startRedirectNavigation(\n        revalidationRequest,\n        redirect2.result,\n        false,\n        { preventScrollReset }\n      );\n    }\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      loaderResults,\n      void 0,\n      revalidatingFetchers,\n      fetcherResults\n    );\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n    abortStaleFetchLoads(loadId);\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        fetchers: new Map(state.fetchers)\n      });\n      isRevalidationRequired = false;\n    }\n  }\n  async function handleFetcherLoader(key, routeId, path, match, matches, isFogOfWar, flushSync, preventScrollReset, submission) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(\n      key,\n      getLoadingFetcher(\n        submission,\n        existingFetcher ? existingFetcher.data : void 0\n      ),\n      { flushSync }\n    );\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        matches,\n        path,\n        fetchRequest.signal\n      );\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        setFetcherError(key, routeId, discoverResult.error, { flushSync });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(\n          key,\n          routeId,\n          getInternalRouterError(404, { pathname: path }),\n          { flushSync }\n        );\n        return;\n      } else {\n        matches = discoverResult.matches;\n        match = getTargetMatch(matches, path);\n      }\n    }\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let results = await callDataStrategy(\n      \"loader\",\n      state,\n      fetchRequest,\n      [match],\n      matches,\n      key\n    );\n    let result = results[match.route.id];\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n    if (fetchersQueuedForDeletion.has(key)) {\n      updateFetcherState(key, getDoneFetcher(void 0));\n      return;\n    }\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        updateFetcherState(key, getDoneFetcher(void 0));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(fetchRequest, result, false, {\n          preventScrollReset\n        });\n        return;\n      }\n    }\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n  async function startRedirectNavigation(request, redirect2, isNavigation, {\n    submission,\n    fetcherSubmission,\n    preventScrollReset,\n    replace: replace2\n  } = {}) {\n    if (redirect2.response.headers.has(\"X-Remix-Revalidate\")) {\n      isRevalidationRequired = true;\n    }\n    let location = redirect2.response.headers.get(\"Location\");\n    invariant(location, \"Expected a Location header on the redirect Response\");\n    location = normalizeRedirectLocation(\n      location,\n      new URL(request.url),\n      basename\n    );\n    let redirectLocation = createLocation(state.location, location, {\n      _isRedirect: true\n    });\n    if (isBrowser2) {\n      let isDocumentReload = false;\n      if (redirect2.response.headers.has(\"X-Remix-Reload-Document\")) {\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(location)) {\n        const url = init.history.createURL(location);\n        isDocumentReload = // Hard reload if it's an absolute URL to a new origin\n        url.origin !== routerWindow.location.origin || // Hard reload if it's an absolute URL that does not match our basename\n        stripBasename(url.pathname, basename) == null;\n      }\n      if (isDocumentReload) {\n        if (replace2) {\n          routerWindow.location.replace(location);\n        } else {\n          routerWindow.location.assign(location);\n        }\n        return;\n      }\n    }\n    pendingNavigationController = null;\n    let redirectNavigationType = replace2 === true || redirect2.response.headers.has(\"X-Remix-Replace\") ? \"REPLACE\" /* Replace */ : \"PUSH\" /* Push */;\n    let { formMethod, formAction, formEncType } = state.navigation;\n    if (!submission && !fetcherSubmission && formMethod && formAction && formEncType) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n    let activeSubmission = submission || fetcherSubmission;\n    if (redirectPreserveMethodStatusCodes.has(redirect2.response.status) && activeSubmission && isMutationMethod(activeSubmission.formMethod)) {\n      await startNavigation(redirectNavigationType, redirectLocation, {\n        submission: {\n          ...activeSubmission,\n          formAction: location\n        },\n        // Preserve these flags across redirects\n        preventScrollReset: preventScrollReset || pendingPreventScrollReset,\n        enableViewTransition: isNavigation ? pendingViewTransitionEnabled : void 0\n      });\n    } else {\n      let overrideNavigation = getLoadingNavigation(\n        redirectLocation,\n        submission\n      );\n      await startNavigation(redirectNavigationType, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve these flags across redirects\n        preventScrollReset: preventScrollReset || pendingPreventScrollReset,\n        enableViewTransition: isNavigation ? pendingViewTransitionEnabled : void 0\n      });\n    }\n  }\n  async function callDataStrategy(type, state2, request, matchesToLoad, matches, fetcherKey) {\n    let results;\n    let dataResults = {};\n    try {\n      results = await callDataStrategyImpl(\n        dataStrategyImpl,\n        type,\n        state2,\n        request,\n        matchesToLoad,\n        matches,\n        fetcherKey,\n        manifest,\n        mapRouteProperties2\n      );\n    } catch (e) {\n      matchesToLoad.forEach((m) => {\n        dataResults[m.route.id] = {\n          type: \"error\" /* error */,\n          error: e\n        };\n      });\n      return dataResults;\n    }\n    for (let [routeId, result] of Object.entries(results)) {\n      if (isRedirectDataStrategyResult(result)) {\n        let response = result.result;\n        dataResults[routeId] = {\n          type: \"redirect\" /* redirect */,\n          response: normalizeRelativeRoutingRedirectResponse(\n            response,\n            request,\n            routeId,\n            matches,\n            basename\n          )\n        };\n      } else {\n        dataResults[routeId] = await convertDataStrategyResultToDataResult(\n          result\n        );\n      }\n    }\n    return dataResults;\n  }\n  async function callLoadersAndMaybeResolveData(state2, matches, matchesToLoad, fetchersToLoad, request) {\n    let loaderResultsPromise = callDataStrategy(\n      \"loader\",\n      state2,\n      request,\n      matchesToLoad,\n      matches,\n      null\n    );\n    let fetcherResultsPromise = Promise.all(\n      fetchersToLoad.map(async (f) => {\n        if (f.matches && f.match && f.controller) {\n          let results = await callDataStrategy(\n            \"loader\",\n            state2,\n            createClientSideRequest(init.history, f.path, f.controller.signal),\n            [f.match],\n            f.matches,\n            f.key\n          );\n          let result = results[f.match.route.id];\n          return { [f.key]: result };\n        } else {\n          return Promise.resolve({\n            [f.key]: {\n              type: \"error\" /* error */,\n              error: getInternalRouterError(404, {\n                pathname: f.path\n              })\n            }\n          });\n        }\n      })\n    );\n    let loaderResults = await loaderResultsPromise;\n    let fetcherResults = (await fetcherResultsPromise).reduce(\n      (acc, r) => Object.assign(acc, r),\n      {}\n    );\n    return {\n      loaderResults,\n      fetcherResults\n    };\n  }\n  function interruptActiveLoads() {\n    isRevalidationRequired = true;\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.add(key);\n      }\n      abortFetcher(key);\n    });\n  }\n  function updateFetcherState(key, fetcher, opts = {}) {\n    state.fetchers.set(key, fetcher);\n    updateState(\n      { fetchers: new Map(state.fetchers) },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n  function setFetcherError(key, routeId, error, opts = {}) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState(\n      {\n        errors: {\n          [boundaryMatch.route.id]: error\n        },\n        fetchers: new Map(state.fetchers)\n      },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n  function getFetcher(key) {\n    activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n    if (fetchersQueuedForDeletion.has(key)) {\n      fetchersQueuedForDeletion.delete(key);\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n  function deleteFetcher(key) {\n    let fetcher = state.fetchers.get(key);\n    if (fetchControllers.has(key) && !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    fetchersQueuedForDeletion.delete(key);\n    cancelledFetcherLoads.delete(key);\n    state.fetchers.delete(key);\n  }\n  function queueFetcherForDeletion(key) {\n    let count = (activeFetchers.get(key) || 0) - 1;\n    if (count <= 0) {\n      activeFetchers.delete(key);\n      fetchersQueuedForDeletion.add(key);\n    } else {\n      activeFetchers.set(key, count);\n    }\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    if (controller) {\n      controller.abort();\n      fetchControllers.delete(key);\n    }\n  }\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n  function getBlocker(key, fn) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n    return blocker;\n  }\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n  function updateBlocker(key, newBlocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    invariant(\n      blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\",\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({ blockers });\n  }\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction\n  }) {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n    if (blocker && blocker.state === \"proceeding\") {\n      return;\n    }\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n  function handleNavigational404(pathname) {\n    let error = getInternalRouterError(404, { pathname });\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let { matches, route } = getShortCircuitMatches(routesToUse);\n    return { notFoundMatches: matches, route, error };\n  }\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions2 = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey2 = getKey || null;\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n    return () => {\n      savedScrollPositions2 = null;\n      getScrollPosition = null;\n      getScrollRestorationKey2 = null;\n    };\n  }\n  function getScrollKey(location, matches) {\n    if (getScrollRestorationKey2) {\n      let key = getScrollRestorationKey2(\n        location,\n        matches.map((m) => convertRouteMatchToUiMatch(m, state.loaderData))\n      );\n      return key || location.key;\n    }\n    return location.key;\n  }\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions2 && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions2[key] = getScrollPosition();\n    }\n  }\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions2) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions2[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n  function checkFogOfWar(matches, routesToUse, pathname) {\n    if (patchRoutesOnNavigationImpl) {\n      if (!matches) {\n        let fogMatches = matchRoutesImpl(\n          routesToUse,\n          pathname,\n          basename,\n          true\n        );\n        return { active: true, matches: fogMatches || [] };\n      } else {\n        if (Object.keys(matches[0].params).length > 0) {\n          let partialMatches = matchRoutesImpl(\n            routesToUse,\n            pathname,\n            basename,\n            true\n          );\n          return { active: true, matches: partialMatches };\n        }\n      }\n    }\n    return { active: false, matches: null };\n  }\n  async function discoverRoutes(matches, pathname, signal) {\n    if (!patchRoutesOnNavigationImpl) {\n      return { type: \"success\", matches };\n    }\n    let partialMatches = matches;\n    while (true) {\n      let isNonHMR = inFlightDataRoutes == null;\n      let routesToUse = inFlightDataRoutes || dataRoutes;\n      let localManifest = manifest;\n      try {\n        await patchRoutesOnNavigationImpl({\n          path: pathname,\n          matches: partialMatches,\n          patch: (routeId, children) => {\n            if (signal.aborted) return;\n            patchRoutesImpl(\n              routeId,\n              children,\n              routesToUse,\n              localManifest,\n              mapRouteProperties2\n            );\n          }\n        });\n      } catch (e) {\n        return { type: \"error\", error: e, partialMatches };\n      } finally {\n        if (isNonHMR && !signal.aborted) {\n          dataRoutes = [...dataRoutes];\n        }\n      }\n      if (signal.aborted) {\n        return { type: \"aborted\" };\n      }\n      let newMatches = matchRoutes(routesToUse, pathname, basename);\n      if (newMatches) {\n        return { type: \"success\", matches: newMatches };\n      }\n      let newPartialMatches = matchRoutesImpl(\n        routesToUse,\n        pathname,\n        basename,\n        true\n      );\n      if (!newPartialMatches || partialMatches.length === newPartialMatches.length && partialMatches.every(\n        (m, i) => m.route.id === newPartialMatches[i].route.id\n      )) {\n        return { type: \"success\", matches: null };\n      }\n      partialMatches = newPartialMatches;\n    }\n  }\n  function _internalSetRoutes(newRoutes) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(\n      newRoutes,\n      mapRouteProperties2,\n      void 0,\n      manifest\n    );\n  }\n  function patchRoutes(routeId, children) {\n    let isNonHMR = inFlightDataRoutes == null;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    patchRoutesImpl(\n      routeId,\n      children,\n      routesToUse,\n      manifest,\n      mapRouteProperties2\n    );\n    if (isNonHMR) {\n      dataRoutes = [...dataRoutes];\n      updateState({});\n    }\n  }\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch: fetch2,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to) => init.history.createHref(to),\n    encodeLocation: (to) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: queueFetcherForDeletion,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    patchRoutes,\n    _internalFetchControllers: fetchControllers,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes\n  };\n  return router;\n}\nfunction createStaticHandler(routes, opts) {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n  let manifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties2 = opts?.mapRouteProperties || defaultMapRouteProperties;\n  let dataRoutes = convertRoutesToDataRoutes(\n    routes,\n    mapRouteProperties2,\n    void 0,\n    manifest\n  );\n  async function query(request, {\n    requestContext,\n    skipLoaderErrorBubbling,\n    dataStrategy\n  } = {}) {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {}\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {}\n      };\n    }\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      dataStrategy || null,\n      skipLoaderErrorBubbling === true,\n      null\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n    return { location, basename, ...result };\n  }\n  async function queryRoute(request, {\n    routeId,\n    requestContext,\n    dataStrategy\n  } = {}) {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n    let match = routeId ? matches.find((m) => m.route.id === routeId) : getTargetMatch(matches, location);\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      dataStrategy || null,\n      false,\n      match\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n    let error = result.errors ? Object.values(result.errors)[0] : void 0;\n    if (error !== void 0) {\n      throw error;\n    }\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n    if (result.loaderData) {\n      return Object.values(result.loaderData)[0];\n    }\n    return void 0;\n  }\n  async function queryImpl(request, location, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch) {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n    try {\n      if (isMutationMethod(request.method)) {\n        let result2 = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          dataStrategy,\n          skipLoaderErrorBubbling,\n          routeMatch != null\n        );\n        return result2;\n      }\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        dataStrategy,\n        skipLoaderErrorBubbling,\n        routeMatch\n      );\n      return isResponse(result) ? result : {\n        ...result,\n        actionData: null,\n        actionHeaders: {}\n      };\n    } catch (e) {\n      if (isDataStrategyResult(e) && isResponse(e.result)) {\n        if (e.type === \"error\" /* error */) {\n          throw e.result;\n        }\n        return e.result;\n      }\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n  async function submit(request, matches, actionMatch, requestContext, dataStrategy, skipLoaderErrorBubbling, isRouteRequest) {\n    let result;\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: \"error\" /* error */,\n        error\n      };\n    } else {\n      let results = await callDataStrategy(\n        \"action\",\n        request,\n        [actionMatch],\n        matches,\n        isRouteRequest,\n        requestContext,\n        dataStrategy\n      );\n      result = results[actionMatch.route.id];\n      if (request.signal.aborted) {\n        throwStaticHandlerAbortedError(request, isRouteRequest);\n      }\n    }\n    if (isRedirectResult(result)) {\n      throw new Response(null, {\n        status: result.response.status,\n        headers: {\n          Location: result.response.headers.get(\"Location\")\n        }\n      });\n    }\n    if (isRouteRequest) {\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {}\n      };\n    }\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n    if (isErrorResult(result)) {\n      let boundaryMatch = skipLoaderErrorBubbling ? actionMatch : findNearestBoundary(matches, actionMatch.route.id);\n      let context2 = await loadRouteData(\n        loaderRequest,\n        matches,\n        requestContext,\n        dataStrategy,\n        skipLoaderErrorBubbling,\n        null,\n        [boundaryMatch.route.id, result]\n      );\n      return {\n        ...context2,\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : result.statusCode != null ? result.statusCode : 500,\n        actionData: null,\n        actionHeaders: {\n          ...result.headers ? { [actionMatch.route.id]: result.headers } : {}\n        }\n      };\n    }\n    let context = await loadRouteData(\n      loaderRequest,\n      matches,\n      requestContext,\n      dataStrategy,\n      skipLoaderErrorBubbling,\n      null\n    );\n    return {\n      ...context,\n      actionData: {\n        [actionMatch.route.id]: result.data\n      },\n      // action status codes take precedence over loader status codes\n      ...result.statusCode ? { statusCode: result.statusCode } : {},\n      actionHeaders: result.headers ? { [actionMatch.route.id]: result.headers } : {}\n    };\n  }\n  async function loadRouteData(request, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch, pendingActionResult) {\n    let isRouteRequest = routeMatch != null;\n    if (isRouteRequest && !routeMatch?.route.loader && !routeMatch?.route.lazy) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id\n      });\n    }\n    let requestMatches = routeMatch ? [routeMatch] : pendingActionResult && isErrorResult(pendingActionResult[1]) ? getLoaderMatchesUntilBoundary(matches, pendingActionResult[0]) : matches;\n    let matchesToLoad = requestMatches.filter(\n      (m) => m.route.loader || m.route.lazy\n    );\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors: pendingActionResult && isErrorResult(pendingActionResult[1]) ? {\n          [pendingActionResult[0]]: pendingActionResult[1].error\n        } : null,\n        statusCode: 200,\n        loaderHeaders: {}\n      };\n    }\n    let results = await callDataStrategy(\n      \"loader\",\n      request,\n      matchesToLoad,\n      matches,\n      isRouteRequest,\n      requestContext,\n      dataStrategy\n    );\n    if (request.signal.aborted) {\n      throwStaticHandlerAbortedError(request, isRouteRequest);\n    }\n    let context = processRouteLoaderData(\n      matches,\n      results,\n      pendingActionResult,\n      true,\n      skipLoaderErrorBubbling\n    );\n    let executedLoaders = new Set(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n    return {\n      ...context,\n      matches\n    };\n  }\n  async function callDataStrategy(type, request, matchesToLoad, matches, isRouteRequest, requestContext, dataStrategy) {\n    let results = await callDataStrategyImpl(\n      dataStrategy || defaultDataStrategy,\n      type,\n      null,\n      request,\n      matchesToLoad,\n      matches,\n      null,\n      manifest,\n      mapRouteProperties2,\n      requestContext\n    );\n    let dataResults = {};\n    await Promise.all(\n      matches.map(async (match) => {\n        if (!(match.route.id in results)) {\n          return;\n        }\n        let result = results[match.route.id];\n        if (isRedirectDataStrategyResult(result)) {\n          let response = result.result;\n          throw normalizeRelativeRoutingRedirectResponse(\n            response,\n            request,\n            match.route.id,\n            matches,\n            basename\n          );\n        }\n        if (isResponse(result.result) && isRouteRequest) {\n          throw result;\n        }\n        dataResults[match.route.id] = await convertDataStrategyResultToDataResult(result);\n      })\n    );\n    return dataResults;\n  }\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n}\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = {\n    ...context,\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  };\n  return newContext;\n}\nfunction throwStaticHandlerAbortedError(request, isRouteRequest) {\n  if (request.signal.reason !== void 0) {\n    throw request.signal.reason;\n  }\n  let method = isRouteRequest ? \"queryRoute\" : \"query\";\n  throw new Error(\n    `${method}() call aborted without an \\`AbortSignal.reason\\`: ${request.method} ${request.url}`\n  );\n}\nfunction isSubmissionNavigation(opts) {\n  return opts != null && (\"formData\" in opts && opts.formData != null || \"body\" in opts && opts.body !== void 0);\n}\nfunction normalizeTo(location, matches, basename, to, fromRouteId, relative) {\n  let contextualMatches;\n  let activeRouteMatch;\n  if (fromRouteId) {\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n  let path = resolveTo(\n    to ? to : \".\",\n    getResolveToMatches(contextualMatches),\n    stripBasename(location.pathname, basename) || location.pathname,\n    relative === \"path\"\n  );\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n  if ((to == null || to === \"\" || to === \".\") && activeRouteMatch) {\n    let nakedIndex = hasNakedIndexQuery(path.search);\n    if (activeRouteMatch.route.index && !nakedIndex) {\n      path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n    } else if (!activeRouteMatch.route.index && nakedIndex) {\n      let params = new URLSearchParams(path.search);\n      let indexValues = params.getAll(\"index\");\n      params.delete(\"index\");\n      indexValues.filter((v) => v).forEach((v) => params.append(\"index\", v));\n      let qs = params.toString();\n      path.search = qs ? `?${qs}` : \"\";\n    }\n  }\n  if (basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n  return createPath(path);\n}\nfunction normalizeNavigateOptions(isFetcher, path, opts) {\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod })\n    };\n  }\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, { type: \"invalid-body\" })\n  });\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = rawFormMethod.toUpperCase();\n  let formAction = stripHashFromPath(path);\n  if (opts.body !== void 0) {\n    if (opts.formEncType === \"text/plain\") {\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      let text = typeof opts.body === \"string\" ? opts.body : opts.body instanceof FormData || opts.body instanceof URLSearchParams ? (\n        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n        Array.from(opts.body.entries()).reduce(\n          (acc, [name, value]) => `${acc}${name}=${value}\n`,\n          \"\"\n        )\n      ) : String(opts.body);\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: void 0,\n          json: void 0,\n          text\n        }\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      try {\n        let json = typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: void 0,\n            json,\n            text: void 0\n          }\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n  invariant(\n    typeof FormData === \"function\",\n    \"FormData is not available in this environment\"\n  );\n  let searchParams;\n  let formData;\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n  let submission = {\n    formMethod,\n    formAction,\n    formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n    formData,\n    json: void 0,\n    text: void 0\n  };\n  if (isMutationMethod(submission.formMethod)) {\n    return { path, submission };\n  }\n  let parsedPath = parsePath(path);\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n  return { path: createPath(parsedPath), submission };\n}\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId, includeBoundary = false) {\n  let index = matches.findIndex((m) => m.route.id === boundaryId);\n  if (index >= 0) {\n    return matches.slice(0, includeBoundary ? index + 1 : index);\n  }\n  return matches;\n}\nfunction getMatchesToLoad(history, state, matches, submission, location, initialHydration, isRevalidationRequired, cancelledFetcherLoads, fetchersQueuedForDeletion, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionResult) {\n  let actionResult = pendingActionResult ? isErrorResult(pendingActionResult[1]) ? pendingActionResult[1].error : pendingActionResult[1].data : void 0;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n  let boundaryMatches = matches;\n  if (initialHydration && state.errors) {\n    boundaryMatches = getLoaderMatchesUntilBoundary(\n      matches,\n      Object.keys(state.errors)[0],\n      true\n    );\n  } else if (pendingActionResult && isErrorResult(pendingActionResult[1])) {\n    boundaryMatches = getLoaderMatchesUntilBoundary(\n      matches,\n      pendingActionResult[0]\n    );\n  }\n  let actionStatus = pendingActionResult ? pendingActionResult[1].statusCode : void 0;\n  let shouldSkipRevalidation = actionStatus && actionStatus >= 400;\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    let { route } = match;\n    if (route.lazy) {\n      return true;\n    }\n    if (route.loader == null) {\n      return false;\n    }\n    if (initialHydration) {\n      return shouldLoadRouteOnHydration(route, state.loaderData, state.errors);\n    }\n    if (isNewLoader(state.loaderData, state.matches[index], match)) {\n      return true;\n    }\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      actionStatus,\n      defaultShouldRevalidate: shouldSkipRevalidation ? false : (\n        // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n        isRevalidationRequired || currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search || // Search params affect all loaders\n        currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n      )\n    });\n  });\n  let revalidatingFetchers = [];\n  fetchLoadMatches.forEach((f, key) => {\n    if (initialHydration || !matches.some((m) => m.route.id === f.routeId) || fetchersQueuedForDeletion.has(key)) {\n      return;\n    }\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null\n      });\n      return;\n    }\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.has(key)) {\n      cancelledFetcherLoads.delete(key);\n      shouldRevalidate = true;\n    } else if (fetcher && fetcher.state !== \"idle\" && fetcher.data === void 0) {\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, {\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params,\n        ...submission,\n        actionResult,\n        actionStatus,\n        defaultShouldRevalidate: shouldSkipRevalidation ? false : isRevalidationRequired\n      });\n    }\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\nfunction shouldLoadRouteOnHydration(route, loaderData, errors) {\n  if (route.lazy) {\n    return true;\n  }\n  if (!route.loader) {\n    return false;\n  }\n  let hasData = loaderData != null && loaderData[route.id] !== void 0;\n  let hasError = errors != null && errors[route.id] !== void 0;\n  if (!hasData && hasError) {\n    return false;\n  }\n  if (typeof route.loader === \"function\" && route.loader.hydrate === true) {\n    return true;\n  }\n  return !hasData && !hasError;\n}\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew = (\n    // [a] -> [a, b]\n    !currentMatch || // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id\n  );\n  let isMissingData = !currentLoaderData.hasOwnProperty(match.route.id);\n  return isNew || isMissingData;\n}\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname || // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n  return arg.defaultShouldRevalidate;\n}\nfunction patchRoutesImpl(routeId, children, routesToUse, manifest, mapRouteProperties2) {\n  let childrenToPatch;\n  if (routeId) {\n    let route = manifest[routeId];\n    invariant(\n      route,\n      `No route found to patch children into: routeId = ${routeId}`\n    );\n    if (!route.children) {\n      route.children = [];\n    }\n    childrenToPatch = route.children;\n  } else {\n    childrenToPatch = routesToUse;\n  }\n  let uniqueChildren = children.filter(\n    (newRoute) => !childrenToPatch.some(\n      (existingRoute) => isSameRoute(newRoute, existingRoute)\n    )\n  );\n  let newRoutes = convertRoutesToDataRoutes(\n    uniqueChildren,\n    mapRouteProperties2,\n    [routeId || \"_\", \"patch\", String(childrenToPatch?.length || \"0\")],\n    manifest\n  );\n  childrenToPatch.push(...newRoutes);\n}\nfunction isSameRoute(newRoute, existingRoute) {\n  if (\"id\" in newRoute && \"id\" in existingRoute && newRoute.id === existingRoute.id) {\n    return true;\n  }\n  if (!(newRoute.index === existingRoute.index && newRoute.path === existingRoute.path && newRoute.caseSensitive === existingRoute.caseSensitive)) {\n    return false;\n  }\n  if ((!newRoute.children || newRoute.children.length === 0) && (!existingRoute.children || existingRoute.children.length === 0)) {\n    return true;\n  }\n  return newRoute.children.every(\n    (aChild, i) => existingRoute.children?.some((bChild) => isSameRoute(aChild, bChild))\n  );\n}\nasync function loadLazyRouteModule(route, mapRouteProperties2, manifest) {\n  if (!route.lazy) {\n    return;\n  }\n  let lazyRoute = await route.lazy();\n  if (!route.lazy) {\n    return;\n  }\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n  let routeUpdates = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue = routeToUpdate[lazyRouteProperty];\n    let isPropertyStaticallyDefined = staticRouteValue !== void 0 && // This property isn't static since it should always be updated based\n    // on the route updates\n    lazyRouteProperty !== \"hasErrorBoundary\";\n    warning(\n      !isPropertyStaticallyDefined,\n      `Route \"${routeToUpdate.id}\" has a static property \"${lazyRouteProperty}\" defined but its lazy function is also returning a value for this property. The lazy route property \"${lazyRouteProperty}\" will be ignored.`\n    );\n    if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n      routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n    }\n  }\n  Object.assign(routeToUpdate, routeUpdates);\n  Object.assign(routeToUpdate, {\n    // To keep things framework agnostic, we use the provided `mapRouteProperties`\n    // function to set the framework-aware properties (`element`/`hasErrorBoundary`)\n    // since the logic will differ between frameworks.\n    ...mapRouteProperties2(routeToUpdate),\n    lazy: void 0\n  });\n}\nasync function defaultDataStrategy({\n  matches\n}) {\n  let matchesToLoad = matches.filter((m) => m.shouldLoad);\n  let results = await Promise.all(matchesToLoad.map((m) => m.resolve()));\n  return results.reduce(\n    (acc, result, i) => Object.assign(acc, { [matchesToLoad[i].route.id]: result }),\n    {}\n  );\n}\nasync function callDataStrategyImpl(dataStrategyImpl, type, state, request, matchesToLoad, matches, fetcherKey, manifest, mapRouteProperties2, requestContext) {\n  let loadRouteDefinitionsPromises = matches.map(\n    (m) => m.route.lazy ? loadLazyRouteModule(m.route, mapRouteProperties2, manifest) : void 0\n  );\n  let dsMatches = matches.map((match, i) => {\n    let loadRoutePromise = loadRouteDefinitionsPromises[i];\n    let shouldLoad = matchesToLoad.some((m) => m.route.id === match.route.id);\n    let resolve = async (handlerOverride) => {\n      if (handlerOverride && request.method === \"GET\" && (match.route.lazy || match.route.loader)) {\n        shouldLoad = true;\n      }\n      return shouldLoad ? callLoaderOrAction(\n        type,\n        request,\n        match,\n        loadRoutePromise,\n        handlerOverride,\n        requestContext\n      ) : Promise.resolve({ type: \"data\" /* data */, result: void 0 });\n    };\n    return {\n      ...match,\n      shouldLoad,\n      resolve\n    };\n  });\n  let results = await dataStrategyImpl({\n    matches: dsMatches,\n    request,\n    params: matches[0].params,\n    fetcherKey,\n    context: requestContext\n  });\n  try {\n    await Promise.all(loadRouteDefinitionsPromises);\n  } catch (e) {\n  }\n  return results;\n}\nasync function callLoaderOrAction(type, request, match, loadRoutePromise, handlerOverride, staticContext) {\n  let result;\n  let onReject;\n  let runHandler = (handler) => {\n    let reject;\n    let abortPromise = new Promise((_, r) => reject = r);\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    let actualHandler = (ctx) => {\n      if (typeof handler !== \"function\") {\n        return Promise.reject(\n          new Error(\n            `You cannot call the handler for a route which defines a boolean \"${type}\" [routeId: ${match.route.id}]`\n          )\n        );\n      }\n      return handler(\n        {\n          request,\n          params: match.params,\n          context: staticContext\n        },\n        ...ctx !== void 0 ? [ctx] : []\n      );\n    };\n    let handlerPromise = (async () => {\n      try {\n        let val = await (handlerOverride ? handlerOverride((ctx) => actualHandler(ctx)) : actualHandler());\n        return { type: \"data\", result: val };\n      } catch (e) {\n        return { type: \"error\", result: e };\n      }\n    })();\n    return Promise.race([handlerPromise, abortPromise]);\n  };\n  try {\n    let handler = match.route[type];\n    if (loadRoutePromise) {\n      if (handler) {\n        let handlerError;\n        let [value] = await Promise.all([\n          // If the handler throws, don't let it immediately bubble out,\n          // since we need to let the lazy() execution finish so we know if this\n          // route has a boundary that can handle the error\n          runHandler(handler).catch((e) => {\n            handlerError = e;\n          }),\n          loadRoutePromise\n        ]);\n        if (handlerError !== void 0) {\n          throw handlerError;\n        }\n        result = value;\n      } else {\n        await loadRoutePromise;\n        handler = match.route[type];\n        if (handler) {\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id\n          });\n        } else {\n          return { type: \"data\" /* data */, result: void 0 };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n  } catch (e) {\n    return { type: \"error\" /* error */, result: e };\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n  return result;\n}\nasync function convertDataStrategyResultToDataResult(dataStrategyResult) {\n  let { result, type } = dataStrategyResult;\n  if (isResponse(result)) {\n    let data2;\n    try {\n      let contentType = result.headers.get(\"Content-Type\");\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        if (result.body == null) {\n          data2 = null;\n        } else {\n          data2 = await result.json();\n        }\n      } else {\n        data2 = await result.text();\n      }\n    } catch (e) {\n      return { type: \"error\" /* error */, error: e };\n    }\n    if (type === \"error\" /* error */) {\n      return {\n        type: \"error\" /* error */,\n        error: new ErrorResponseImpl(result.status, result.statusText, data2),\n        statusCode: result.status,\n        headers: result.headers\n      };\n    }\n    return {\n      type: \"data\" /* data */,\n      data: data2,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n  if (type === \"error\" /* error */) {\n    if (isDataWithResponseInit(result)) {\n      if (result.data instanceof Error) {\n        return {\n          type: \"error\" /* error */,\n          error: result.data,\n          statusCode: result.init?.status,\n          headers: result.init?.headers ? new Headers(result.init.headers) : void 0\n        };\n      }\n      return {\n        type: \"error\" /* error */,\n        error: new ErrorResponseImpl(\n          result.init?.status || 500,\n          void 0,\n          result.data\n        ),\n        statusCode: isRouteErrorResponse(result) ? result.status : void 0,\n        headers: result.init?.headers ? new Headers(result.init.headers) : void 0\n      };\n    }\n    return {\n      type: \"error\" /* error */,\n      error: result,\n      statusCode: isRouteErrorResponse(result) ? result.status : void 0\n    };\n  }\n  if (isDataWithResponseInit(result)) {\n    return {\n      type: \"data\" /* data */,\n      data: result.data,\n      statusCode: result.init?.status,\n      headers: result.init?.headers ? new Headers(result.init.headers) : void 0\n    };\n  }\n  return { type: \"data\" /* data */, data: result };\n}\nfunction normalizeRelativeRoutingRedirectResponse(response, request, routeId, matches, basename) {\n  let location = response.headers.get(\"Location\");\n  invariant(\n    location,\n    \"Redirects returned/thrown from loaders/actions must have a Location header\"\n  );\n  if (!ABSOLUTE_URL_REGEX.test(location)) {\n    let trimmedMatches = matches.slice(\n      0,\n      matches.findIndex((m) => m.route.id === routeId) + 1\n    );\n    location = normalizeTo(\n      new URL(request.url),\n      trimmedMatches,\n      basename,\n      location\n    );\n    response.headers.set(\"Location\", location);\n  }\n  return response;\n}\nfunction normalizeRedirectLocation(location, currentUrl, basename) {\n  if (ABSOLUTE_URL_REGEX.test(location)) {\n    let normalizedLocation = location;\n    let url = normalizedLocation.startsWith(\"//\") ? new URL(currentUrl.protocol + normalizedLocation) : new URL(normalizedLocation);\n    let isSameBasename = stripBasename(url.pathname, basename) != null;\n    if (url.origin === currentUrl.origin && isSameBasename) {\n      return url.pathname + url.search + url.hash;\n    }\n  }\n  return location;\n}\nfunction createClientSideRequest(history, location, signal, submission) {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init = { signal };\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType } = submission;\n    init.method = formMethod.toUpperCase();\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({ \"Content-Type\": formEncType });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      init.body = submission.text;\n    } else if (formEncType === \"application/x-www-form-urlencoded\" && submission.formData) {\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      init.body = submission.formData;\n    }\n  }\n  return new Request(url, init);\n}\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n  for (let [key, value] of formData.entries()) {\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n  return searchParams;\n}\nfunction convertSearchParamsToFormData(searchParams) {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\nfunction processRouteLoaderData(matches, results, pendingActionResult, isStaticHandler = false, skipLoaderErrorBubbling = false) {\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {};\n  let pendingError = pendingActionResult && isErrorResult(pendingActionResult[1]) ? pendingActionResult[1].error : void 0;\n  matches.forEach((match) => {\n    if (!(match.route.id in results)) {\n      return;\n    }\n    let id = match.route.id;\n    let result = results[id];\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      let error = result.error;\n      if (pendingError !== void 0) {\n        error = pendingError;\n        pendingError = void 0;\n      }\n      errors = errors || {};\n      if (skipLoaderErrorBubbling) {\n        errors[id] = error;\n      } else {\n        let boundaryMatch = findNearestBoundary(matches, id);\n        if (errors[boundaryMatch.route.id] == null) {\n          errors[boundaryMatch.route.id] = error;\n        }\n      }\n      if (!isStaticHandler) {\n        loaderData[id] = ResetLoaderDataSymbol;\n      }\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      loaderData[id] = result.data;\n      if (result.statusCode && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n  if (pendingError !== void 0 && pendingActionResult) {\n    errors = { [pendingActionResult[0]]: pendingError };\n    loaderData[pendingActionResult[0]] = void 0;\n  }\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\nfunction processLoaderData(state, matches, results, pendingActionResult, revalidatingFetchers, fetcherResults) {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    results,\n    pendingActionResult\n  );\n  revalidatingFetchers.forEach((rf) => {\n    let { key, match, controller } = rf;\n    let result = fetcherResults[key];\n    invariant(result, \"Did not find corresponding fetcher result\");\n    if (controller && controller.signal.aborted) {\n      return;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match?.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  });\n  return { loaderData, errors };\n}\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  let mergedLoaderData = Object.entries(newLoaderData).filter(([, v]) => v !== ResetLoaderDataSymbol).reduce((merged, [k, v]) => {\n    merged[k] = v;\n    return merged;\n  }, {});\n  for (let match of matches) {\n    let id = match.route.id;\n    if (!newLoaderData.hasOwnProperty(id) && loaderData.hasOwnProperty(id) && match.route.loader) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n    if (errors && errors.hasOwnProperty(id)) {\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\nfunction getActionDataForCommit(pendingActionResult) {\n  if (!pendingActionResult) {\n    return {};\n  }\n  return isErrorResult(pendingActionResult[1]) ? {\n    // Clear out prior actionData on errors\n    actionData: {}\n  } : {\n    actionData: {\n      [pendingActionResult[0]]: pendingActionResult[1].data\n    }\n  };\n}\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) || matches[0];\n}\nfunction getShortCircuitMatches(routes) {\n  let route = routes.length === 1 ? routes[0] : routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n    id: `__shim-error-route__`\n  };\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route\n      }\n    ],\n    route\n  };\n}\nfunction getInternalRouterError(status, {\n  pathname,\n  routeId,\n  method,\n  type,\n  message\n} = {}) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage = `You made a ${method} request to \"${pathname}\" but did not provide a \\`loader\\` for route \"${routeId}\", so there is no way to handle the request.`;\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage = `You made a ${method.toUpperCase()} request to \"${pathname}\" but did not provide an \\`action\\` for route \"${routeId}\", so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n  return new ErrorResponseImpl(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\nfunction findRedirect(results) {\n  let entries = Object.entries(results);\n  for (let i = entries.length - 1; i >= 0; i--) {\n    let [key, result] = entries[i];\n    if (isRedirectResult(result)) {\n      return { key, result };\n    }\n  }\n}\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\nfunction isHashChangeOnly(a, b) {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n  if (a.hash === \"\") {\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    return true;\n  } else if (b.hash !== \"\") {\n    return true;\n  }\n  return false;\n}\nfunction isDataStrategyResult(result) {\n  return result != null && typeof result === \"object\" && \"type\" in result && \"result\" in result && (result.type === \"data\" /* data */ || result.type === \"error\" /* error */);\n}\nfunction isRedirectDataStrategyResult(result) {\n  return isResponse(result.result) && redirectStatusCodes.has(result.result.status);\n}\nfunction isErrorResult(result) {\n  return result.type === \"error\" /* error */;\n}\nfunction isRedirectResult(result) {\n  return (result && result.type) === \"redirect\" /* redirect */;\n}\nfunction isDataWithResponseInit(value) {\n  return typeof value === \"object\" && value != null && \"type\" in value && \"data\" in value && \"init\" in value && value.type === \"DataWithResponseInit\";\n}\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\nfunction isRedirectStatusCode(statusCode) {\n  return redirectStatusCodes.has(statusCode);\n}\nfunction isRedirectResponse(result) {\n  return isResponse(result) && isRedirectStatusCode(result.status) && result.headers.has(\"Location\");\n}\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method.toUpperCase());\n}\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method.toUpperCase());\n}\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    return matches[matches.length - 1];\n  }\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\nfunction getSubmissionFromNavigation(navigation) {\n  let { formMethod, formAction, formEncType, text, formData, json } = navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: void 0,\n      json: void 0,\n      text\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: void 0,\n      text: void 0\n    };\n  } else if (json !== void 0) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: void 0,\n      json,\n      text: void 0\n    };\n  }\n}\nfunction getLoadingNavigation(location, submission) {\n  if (submission) {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text\n    };\n    return navigation;\n  } else {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: void 0,\n      formAction: void 0,\n      formEncType: void 0,\n      formData: void 0,\n      json: void 0,\n      text: void 0\n    };\n    return navigation;\n  }\n}\nfunction getSubmittingNavigation(location, submission) {\n  let navigation = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text\n  };\n  return navigation;\n}\nfunction getLoadingFetcher(submission, data2) {\n  if (submission) {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data: data2\n    };\n    return fetcher;\n  } else {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: void 0,\n      formAction: void 0,\n      formEncType: void 0,\n      formData: void 0,\n      json: void 0,\n      text: void 0,\n      data: data2\n    };\n    return fetcher;\n  }\n}\nfunction getSubmittingFetcher(submission, existingFetcher) {\n  let fetcher = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : void 0\n  };\n  return fetcher;\n}\nfunction getDoneFetcher(data2) {\n  let fetcher = {\n    state: \"idle\",\n    formMethod: void 0,\n    formAction: void 0,\n    formEncType: void 0,\n    formData: void 0,\n    json: void 0,\n    text: void 0,\n    data: data2\n  };\n  return fetcher;\n}\nfunction restoreAppliedTransitions(_window, transitions) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(\n      TRANSITIONS_STORAGE_KEY\n    );\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n  }\n}\nfunction persistAppliedTransitions(_window, transitions) {\n  if (transitions.size > 0) {\n    let json = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(\n        TRANSITIONS_STORAGE_KEY,\n        JSON.stringify(json)\n      );\n    } catch (error) {\n      warning(\n        false,\n        `Failed to save applied view transitions in sessionStorage (${error}).`\n      );\n    }\n  }\n}\nfunction createDeferred() {\n  let resolve;\n  let reject;\n  let promise = new Promise((res, rej) => {\n    resolve = async (val) => {\n      res(val);\n      try {\n        await promise;\n      } catch (e) {\n      }\n    };\n    reject = async (error) => {\n      rej(error);\n      try {\n        await promise;\n      } catch (e) {\n      }\n    };\n  });\n  return {\n    promise,\n    //@ts-ignore\n    resolve,\n    //@ts-ignore\n    reject\n  };\n}\n\n// lib/components.tsx\nimport * as React3 from \"react\";\n\n// lib/context.ts\nimport * as React from \"react\";\nvar DataRouterContext = React.createContext(null);\nDataRouterContext.displayName = \"DataRouter\";\nvar DataRouterStateContext = React.createContext(null);\nDataRouterStateContext.displayName = \"DataRouterState\";\nvar ViewTransitionContext = React.createContext({\n  isTransitioning: false\n});\nViewTransitionContext.displayName = \"ViewTransition\";\nvar FetchersContext = React.createContext(\n  /* @__PURE__ */ new Map()\n);\nFetchersContext.displayName = \"Fetchers\";\nvar AwaitContext = React.createContext(null);\nAwaitContext.displayName = \"Await\";\nvar NavigationContext = React.createContext(\n  null\n);\nNavigationContext.displayName = \"Navigation\";\nvar LocationContext = React.createContext(\n  null\n);\nLocationContext.displayName = \"Location\";\nvar RouteContext = React.createContext({\n  outlet: null,\n  matches: [],\n  isDataRoute: false\n});\nRouteContext.displayName = \"Route\";\nvar RouteErrorContext = React.createContext(null);\nRouteErrorContext.displayName = \"RouteError\";\n\n// lib/hooks.tsx\nimport * as React2 from \"react\";\nvar ENABLE_DEV_WARNINGS = true;\nfunction useHref(to, { relative } = {}) {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useHref() may be used only in the context of a <Router> component.`\n  );\n  let { basename, navigator: navigator2 } = React2.useContext(NavigationContext);\n  let { hash, pathname, search } = useResolvedPath(to, { relative });\n  let joinedPathname = pathname;\n  if (basename !== \"/\") {\n    joinedPathname = pathname === \"/\" ? basename : joinPaths([basename, pathname]);\n  }\n  return navigator2.createHref({ pathname: joinedPathname, search, hash });\n}\nfunction useInRouterContext() {\n  return React2.useContext(LocationContext) != null;\n}\nfunction useLocation() {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useLocation() may be used only in the context of a <Router> component.`\n  );\n  return React2.useContext(LocationContext).location;\n}\nfunction useNavigationType() {\n  return React2.useContext(LocationContext).navigationType;\n}\nfunction useMatch(pattern) {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useMatch() may be used only in the context of a <Router> component.`\n  );\n  let { pathname } = useLocation();\n  return React2.useMemo(\n    () => matchPath(pattern, decodePath(pathname)),\n    [pathname, pattern]\n  );\n}\nvar navigateEffectWarning = `You should call navigate() in a React.useEffect(), not when your component is first rendered.`;\nfunction useIsomorphicLayoutEffect(cb) {\n  let isStatic = React2.useContext(NavigationContext).static;\n  if (!isStatic) {\n    React2.useLayoutEffect(cb);\n  }\n}\nfunction useNavigate() {\n  let { isDataRoute } = React2.useContext(RouteContext);\n  return isDataRoute ? useNavigateStable() : useNavigateUnstable();\n}\nfunction useNavigateUnstable() {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useNavigate() may be used only in the context of a <Router> component.`\n  );\n  let dataRouterContext = React2.useContext(DataRouterContext);\n  let { basename, navigator: navigator2 } = React2.useContext(NavigationContext);\n  let { matches } = React2.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n  let routePathnamesJson = JSON.stringify(getResolveToMatches(matches));\n  let activeRef = React2.useRef(false);\n  useIsomorphicLayoutEffect(() => {\n    activeRef.current = true;\n  });\n  let navigate = React2.useCallback(\n    (to, options = {}) => {\n      warning(activeRef.current, navigateEffectWarning);\n      if (!activeRef.current) return;\n      if (typeof to === \"number\") {\n        navigator2.go(to);\n        return;\n      }\n      let path = resolveTo(\n        to,\n        JSON.parse(routePathnamesJson),\n        locationPathname,\n        options.relative === \"path\"\n      );\n      if (dataRouterContext == null && basename !== \"/\") {\n        path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n      }\n      (!!options.replace ? navigator2.replace : navigator2.push)(\n        path,\n        options.state,\n        options\n      );\n    },\n    [\n      basename,\n      navigator2,\n      routePathnamesJson,\n      locationPathname,\n      dataRouterContext\n    ]\n  );\n  return navigate;\n}\nvar OutletContext = React2.createContext(null);\nfunction useOutletContext() {\n  return React2.useContext(OutletContext);\n}\nfunction useOutlet(context) {\n  let outlet = React2.useContext(RouteContext).outlet;\n  if (outlet) {\n    return /* @__PURE__ */ React2.createElement(OutletContext.Provider, { value: context }, outlet);\n  }\n  return outlet;\n}\nfunction useParams() {\n  let { matches } = React2.useContext(RouteContext);\n  let routeMatch = matches[matches.length - 1];\n  return routeMatch ? routeMatch.params : {};\n}\nfunction useResolvedPath(to, { relative } = {}) {\n  let { matches } = React2.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n  let routePathnamesJson = JSON.stringify(getResolveToMatches(matches));\n  return React2.useMemo(\n    () => resolveTo(\n      to,\n      JSON.parse(routePathnamesJson),\n      locationPathname,\n      relative === \"path\"\n    ),\n    [to, routePathnamesJson, locationPathname, relative]\n  );\n}\nfunction useRoutes(routes, locationArg) {\n  return useRoutesImpl(routes, locationArg);\n}\nfunction useRoutesImpl(routes, locationArg, dataRouterState, future) {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useRoutes() may be used only in the context of a <Router> component.`\n  );\n  let { navigator: navigator2, static: isStatic } = React2.useContext(NavigationContext);\n  let { matches: parentMatches } = React2.useContext(RouteContext);\n  let routeMatch = parentMatches[parentMatches.length - 1];\n  let parentParams = routeMatch ? routeMatch.params : {};\n  let parentPathname = routeMatch ? routeMatch.pathname : \"/\";\n  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : \"/\";\n  let parentRoute = routeMatch && routeMatch.route;\n  if (ENABLE_DEV_WARNINGS) {\n    let parentPath = parentRoute && parentRoute.path || \"\";\n    warningOnce(\n      parentPathname,\n      !parentRoute || parentPath.endsWith(\"*\") || parentPath.endsWith(\"*?\"),\n      `You rendered descendant <Routes> (or called \\`useRoutes()\\`) at \"${parentPathname}\" (under <Route path=\"${parentPath}\">) but the parent route path has no trailing \"*\". This means if you navigate deeper, the parent won't match anymore and therefore the child routes will never render.\n\nPlease change the parent <Route path=\"${parentPath}\"> to <Route path=\"${parentPath === \"/\" ? \"*\" : `${parentPath}/*`}\">.`\n    );\n  }\n  let locationFromContext = useLocation();\n  let location;\n  if (locationArg) {\n    let parsedLocationArg = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n    invariant(\n      parentPathnameBase === \"/\" || parsedLocationArg.pathname?.startsWith(parentPathnameBase),\n      `When overriding the location using \\`<Routes location>\\` or \\`useRoutes(routes, location)\\`, the location pathname must begin with the portion of the URL pathname that was matched by all parent routes. The current pathname base is \"${parentPathnameBase}\" but pathname \"${parsedLocationArg.pathname}\" was given in the \\`location\\` prop.`\n    );\n    location = parsedLocationArg;\n  } else {\n    location = locationFromContext;\n  }\n  let pathname = location.pathname || \"/\";\n  let remainingPathname = pathname;\n  if (parentPathnameBase !== \"/\") {\n    let parentSegments = parentPathnameBase.replace(/^\\//, \"\").split(\"/\");\n    let segments = pathname.replace(/^\\//, \"\").split(\"/\");\n    remainingPathname = \"/\" + segments.slice(parentSegments.length).join(\"/\");\n  }\n  let matches = !isStatic && dataRouterState && dataRouterState.matches && dataRouterState.matches.length > 0 ? dataRouterState.matches : matchRoutes(routes, { pathname: remainingPathname });\n  if (ENABLE_DEV_WARNINGS) {\n    warning(\n      parentRoute || matches != null,\n      `No routes matched location \"${location.pathname}${location.search}${location.hash}\" `\n    );\n    warning(\n      matches == null || matches[matches.length - 1].route.element !== void 0 || matches[matches.length - 1].route.Component !== void 0 || matches[matches.length - 1].route.lazy !== void 0,\n      `Matched leaf route at location \"${location.pathname}${location.search}${location.hash}\" does not have an element or Component. This means it will render an <Outlet /> with a null value by default resulting in an \"empty\" page.`\n    );\n  }\n  let renderedMatches = _renderMatches(\n    matches && matches.map(\n      (match) => Object.assign({}, match, {\n        params: Object.assign({}, parentParams, match.params),\n        pathname: joinPaths([\n          parentPathnameBase,\n          // Re-encode pathnames that were decoded inside matchRoutes\n          navigator2.encodeLocation ? navigator2.encodeLocation(match.pathname).pathname : match.pathname\n        ]),\n        pathnameBase: match.pathnameBase === \"/\" ? parentPathnameBase : joinPaths([\n          parentPathnameBase,\n          // Re-encode pathnames that were decoded inside matchRoutes\n          navigator2.encodeLocation ? navigator2.encodeLocation(match.pathnameBase).pathname : match.pathnameBase\n        ])\n      })\n    ),\n    parentMatches,\n    dataRouterState,\n    future\n  );\n  if (locationArg && renderedMatches) {\n    return /* @__PURE__ */ React2.createElement(\n      LocationContext.Provider,\n      {\n        value: {\n          location: {\n            pathname: \"/\",\n            search: \"\",\n            hash: \"\",\n            state: null,\n            key: \"default\",\n            ...location\n          },\n          navigationType: \"POP\" /* Pop */\n        }\n      },\n      renderedMatches\n    );\n  }\n  return renderedMatches;\n}\nfunction DefaultErrorComponent() {\n  let error = useRouteError();\n  let message = isRouteErrorResponse(error) ? `${error.status} ${error.statusText}` : error instanceof Error ? error.message : JSON.stringify(error);\n  let stack = error instanceof Error ? error.stack : null;\n  let lightgrey = \"rgba(200,200,200, 0.5)\";\n  let preStyles = { padding: \"0.5rem\", backgroundColor: lightgrey };\n  let codeStyles = { padding: \"2px 4px\", backgroundColor: lightgrey };\n  let devInfo = null;\n  if (ENABLE_DEV_WARNINGS) {\n    console.error(\n      \"Error handled by React Router default ErrorBoundary:\",\n      error\n    );\n    devInfo = /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(\"p\", null, \"\\u{1F4BF} Hey developer \\u{1F44B}\"), /* @__PURE__ */ React2.createElement(\"p\", null, \"You can provide a way better UX than this when your app throws errors by providing your own \", /* @__PURE__ */ React2.createElement(\"code\", { style: codeStyles }, \"ErrorBoundary\"), \" or\", \" \", /* @__PURE__ */ React2.createElement(\"code\", { style: codeStyles }, \"errorElement\"), \" prop on your route.\"));\n  }\n  return /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(\"h2\", null, \"Unexpected Application Error!\"), /* @__PURE__ */ React2.createElement(\"h3\", { style: { fontStyle: \"italic\" } }, message), stack ? /* @__PURE__ */ React2.createElement(\"pre\", { style: preStyles }, stack) : null, devInfo);\n}\nvar defaultErrorElement = /* @__PURE__ */ React2.createElement(DefaultErrorComponent, null);\nvar RenderErrorBoundary = class extends React2.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      location: props.location,\n      revalidation: props.revalidation,\n      error: props.error\n    };\n  }\n  static getDerivedStateFromError(error) {\n    return { error };\n  }\n  static getDerivedStateFromProps(props, state) {\n    if (state.location !== props.location || state.revalidation !== \"idle\" && props.revalidation === \"idle\") {\n      return {\n        error: props.error,\n        location: props.location,\n        revalidation: props.revalidation\n      };\n    }\n    return {\n      error: props.error !== void 0 ? props.error : state.error,\n      location: state.location,\n      revalidation: props.revalidation || state.revalidation\n    };\n  }\n  componentDidCatch(error, errorInfo) {\n    console.error(\n      \"React Router caught the following error during render\",\n      error,\n      errorInfo\n    );\n  }\n  render() {\n    return this.state.error !== void 0 ? /* @__PURE__ */ React2.createElement(RouteContext.Provider, { value: this.props.routeContext }, /* @__PURE__ */ React2.createElement(\n      RouteErrorContext.Provider,\n      {\n        value: this.state.error,\n        children: this.props.component\n      }\n    )) : this.props.children;\n  }\n};\nfunction RenderedRoute({ routeContext, match, children }) {\n  let dataRouterContext = React2.useContext(DataRouterContext);\n  if (dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && (match.route.errorElement || match.route.ErrorBoundary)) {\n    dataRouterContext.staticContext._deepestRenderedBoundaryId = match.route.id;\n  }\n  return /* @__PURE__ */ React2.createElement(RouteContext.Provider, { value: routeContext }, children);\n}\nfunction _renderMatches(matches, parentMatches = [], dataRouterState = null, future = null) {\n  if (matches == null) {\n    if (!dataRouterState) {\n      return null;\n    }\n    if (dataRouterState.errors) {\n      matches = dataRouterState.matches;\n    } else if (parentMatches.length === 0 && !dataRouterState.initialized && dataRouterState.matches.length > 0) {\n      matches = dataRouterState.matches;\n    } else {\n      return null;\n    }\n  }\n  let renderedMatches = matches;\n  let errors = dataRouterState?.errors;\n  if (errors != null) {\n    let errorIndex = renderedMatches.findIndex(\n      (m) => m.route.id && errors?.[m.route.id] !== void 0\n    );\n    invariant(\n      errorIndex >= 0,\n      `Could not find a matching route for errors on route IDs: ${Object.keys(\n        errors\n      ).join(\",\")}`\n    );\n    renderedMatches = renderedMatches.slice(\n      0,\n      Math.min(renderedMatches.length, errorIndex + 1)\n    );\n  }\n  let renderFallback = false;\n  let fallbackIndex = -1;\n  if (dataRouterState) {\n    for (let i = 0; i < renderedMatches.length; i++) {\n      let match = renderedMatches[i];\n      if (match.route.HydrateFallback || match.route.hydrateFallbackElement) {\n        fallbackIndex = i;\n      }\n      if (match.route.id) {\n        let { loaderData, errors: errors2 } = dataRouterState;\n        let needsToRunLoader = match.route.loader && !loaderData.hasOwnProperty(match.route.id) && (!errors2 || errors2[match.route.id] === void 0);\n        if (match.route.lazy || needsToRunLoader) {\n          renderFallback = true;\n          if (fallbackIndex >= 0) {\n            renderedMatches = renderedMatches.slice(0, fallbackIndex + 1);\n          } else {\n            renderedMatches = [renderedMatches[0]];\n          }\n          break;\n        }\n      }\n    }\n  }\n  return renderedMatches.reduceRight((outlet, match, index) => {\n    let error;\n    let shouldRenderHydrateFallback = false;\n    let errorElement = null;\n    let hydrateFallbackElement = null;\n    if (dataRouterState) {\n      error = errors && match.route.id ? errors[match.route.id] : void 0;\n      errorElement = match.route.errorElement || defaultErrorElement;\n      if (renderFallback) {\n        if (fallbackIndex < 0 && index === 0) {\n          warningOnce(\n            \"route-fallback\",\n            false,\n            \"No `HydrateFallback` element provided to render during initial hydration\"\n          );\n          shouldRenderHydrateFallback = true;\n          hydrateFallbackElement = null;\n        } else if (fallbackIndex === index) {\n          shouldRenderHydrateFallback = true;\n          hydrateFallbackElement = match.route.hydrateFallbackElement || null;\n        }\n      }\n    }\n    let matches2 = parentMatches.concat(renderedMatches.slice(0, index + 1));\n    let getChildren = () => {\n      let children;\n      if (error) {\n        children = errorElement;\n      } else if (shouldRenderHydrateFallback) {\n        children = hydrateFallbackElement;\n      } else if (match.route.Component) {\n        children = /* @__PURE__ */ React2.createElement(match.route.Component, null);\n      } else if (match.route.element) {\n        children = match.route.element;\n      } else {\n        children = outlet;\n      }\n      return /* @__PURE__ */ React2.createElement(\n        RenderedRoute,\n        {\n          match,\n          routeContext: {\n            outlet,\n            matches: matches2,\n            isDataRoute: dataRouterState != null\n          },\n          children\n        }\n      );\n    };\n    return dataRouterState && (match.route.ErrorBoundary || match.route.errorElement || index === 0) ? /* @__PURE__ */ React2.createElement(\n      RenderErrorBoundary,\n      {\n        location: dataRouterState.location,\n        revalidation: dataRouterState.revalidation,\n        component: errorElement,\n        error,\n        children: getChildren(),\n        routeContext: { outlet: null, matches: matches2, isDataRoute: true }\n      }\n    ) : getChildren();\n  }, null);\n}\nfunction getDataRouterConsoleError(hookName) {\n  return `${hookName} must be used within a data router.  See https://reactrouter.com/en/main/routers/picking-a-router.`;\n}\nfunction useDataRouterContext(hookName) {\n  let ctx = React2.useContext(DataRouterContext);\n  invariant(ctx, getDataRouterConsoleError(hookName));\n  return ctx;\n}\nfunction useDataRouterState(hookName) {\n  let state = React2.useContext(DataRouterStateContext);\n  invariant(state, getDataRouterConsoleError(hookName));\n  return state;\n}\nfunction useRouteContext(hookName) {\n  let route = React2.useContext(RouteContext);\n  invariant(route, getDataRouterConsoleError(hookName));\n  return route;\n}\nfunction useCurrentRouteId(hookName) {\n  let route = useRouteContext(hookName);\n  let thisRoute = route.matches[route.matches.length - 1];\n  invariant(\n    thisRoute.route.id,\n    `${hookName} can only be used on routes that contain a unique \"id\"`\n  );\n  return thisRoute.route.id;\n}\nfunction useRouteId() {\n  return useCurrentRouteId(\"useRouteId\" /* UseRouteId */);\n}\nfunction useNavigation() {\n  let state = useDataRouterState(\"useNavigation\" /* UseNavigation */);\n  return state.navigation;\n}\nfunction useRevalidator() {\n  let dataRouterContext = useDataRouterContext(\"useRevalidator\" /* UseRevalidator */);\n  let state = useDataRouterState(\"useRevalidator\" /* UseRevalidator */);\n  return React2.useMemo(\n    () => ({\n      async revalidate() {\n        await dataRouterContext.router.revalidate();\n      },\n      state: state.revalidation\n    }),\n    [dataRouterContext.router, state.revalidation]\n  );\n}\nfunction useMatches() {\n  let { matches, loaderData } = useDataRouterState(\n    \"useMatches\" /* UseMatches */\n  );\n  return React2.useMemo(\n    () => matches.map((m) => convertRouteMatchToUiMatch(m, loaderData)),\n    [matches, loaderData]\n  );\n}\nfunction useLoaderData() {\n  let state = useDataRouterState(\"useLoaderData\" /* UseLoaderData */);\n  let routeId = useCurrentRouteId(\"useLoaderData\" /* UseLoaderData */);\n  return state.loaderData[routeId];\n}\nfunction useRouteLoaderData(routeId) {\n  let state = useDataRouterState(\"useRouteLoaderData\" /* UseRouteLoaderData */);\n  return state.loaderData[routeId];\n}\nfunction useActionData() {\n  let state = useDataRouterState(\"useActionData\" /* UseActionData */);\n  let routeId = useCurrentRouteId(\"useLoaderData\" /* UseLoaderData */);\n  return state.actionData ? state.actionData[routeId] : void 0;\n}\nfunction useRouteError() {\n  let error = React2.useContext(RouteErrorContext);\n  let state = useDataRouterState(\"useRouteError\" /* UseRouteError */);\n  let routeId = useCurrentRouteId(\"useRouteError\" /* UseRouteError */);\n  if (error !== void 0) {\n    return error;\n  }\n  return state.errors?.[routeId];\n}\nfunction useAsyncValue() {\n  let value = React2.useContext(AwaitContext);\n  return value?._data;\n}\nfunction useAsyncError() {\n  let value = React2.useContext(AwaitContext);\n  return value?._error;\n}\nvar blockerId = 0;\nfunction useBlocker(shouldBlock) {\n  let { router, basename } = useDataRouterContext(\"useBlocker\" /* UseBlocker */);\n  let state = useDataRouterState(\"useBlocker\" /* UseBlocker */);\n  let [blockerKey, setBlockerKey] = React2.useState(\"\");\n  let blockerFunction = React2.useCallback(\n    (arg) => {\n      if (typeof shouldBlock !== \"function\") {\n        return !!shouldBlock;\n      }\n      if (basename === \"/\") {\n        return shouldBlock(arg);\n      }\n      let { currentLocation, nextLocation, historyAction } = arg;\n      return shouldBlock({\n        currentLocation: {\n          ...currentLocation,\n          pathname: stripBasename(currentLocation.pathname, basename) || currentLocation.pathname\n        },\n        nextLocation: {\n          ...nextLocation,\n          pathname: stripBasename(nextLocation.pathname, basename) || nextLocation.pathname\n        },\n        historyAction\n      });\n    },\n    [basename, shouldBlock]\n  );\n  React2.useEffect(() => {\n    let key = String(++blockerId);\n    setBlockerKey(key);\n    return () => router.deleteBlocker(key);\n  }, [router]);\n  React2.useEffect(() => {\n    if (blockerKey !== \"\") {\n      router.getBlocker(blockerKey, blockerFunction);\n    }\n  }, [router, blockerKey, blockerFunction]);\n  return blockerKey && state.blockers.has(blockerKey) ? state.blockers.get(blockerKey) : IDLE_BLOCKER;\n}\nfunction useNavigateStable() {\n  let { router } = useDataRouterContext(\"useNavigate\" /* UseNavigateStable */);\n  let id = useCurrentRouteId(\"useNavigate\" /* UseNavigateStable */);\n  let activeRef = React2.useRef(false);\n  useIsomorphicLayoutEffect(() => {\n    activeRef.current = true;\n  });\n  let navigate = React2.useCallback(\n    async (to, options = {}) => {\n      warning(activeRef.current, navigateEffectWarning);\n      if (!activeRef.current) return;\n      if (typeof to === \"number\") {\n        router.navigate(to);\n      } else {\n        await router.navigate(to, { fromRouteId: id, ...options });\n      }\n    },\n    [router, id]\n  );\n  return navigate;\n}\nvar alreadyWarned = {};\nfunction warningOnce(key, cond, message) {\n  if (!cond && !alreadyWarned[key]) {\n    alreadyWarned[key] = true;\n    warning(false, message);\n  }\n}\n\n// lib/server-runtime/warnings.ts\nvar alreadyWarned2 = {};\nfunction warnOnce(condition, message) {\n  if (!condition && !alreadyWarned2[message]) {\n    alreadyWarned2[message] = true;\n    console.warn(message);\n  }\n}\n\n// lib/components.tsx\nvar ENABLE_DEV_WARNINGS2 = true;\nfunction mapRouteProperties(route) {\n  let updates = {\n    // Note: this check also occurs in createRoutesFromChildren so update\n    // there if you change this -- please and thank you!\n    hasErrorBoundary: route.hasErrorBoundary || route.ErrorBoundary != null || route.errorElement != null\n  };\n  if (route.Component) {\n    if (ENABLE_DEV_WARNINGS2) {\n      if (route.element) {\n        warning(\n          false,\n          \"You should not include both `Component` and `element` on your route - `Component` will be used.\"\n        );\n      }\n    }\n    Object.assign(updates, {\n      element: React3.createElement(route.Component),\n      Component: void 0\n    });\n  }\n  if (route.HydrateFallback) {\n    if (ENABLE_DEV_WARNINGS2) {\n      if (route.hydrateFallbackElement) {\n        warning(\n          false,\n          \"You should not include both `HydrateFallback` and `hydrateFallbackElement` on your route - `HydrateFallback` will be used.\"\n        );\n      }\n    }\n    Object.assign(updates, {\n      hydrateFallbackElement: React3.createElement(route.HydrateFallback),\n      HydrateFallback: void 0\n    });\n  }\n  if (route.ErrorBoundary) {\n    if (ENABLE_DEV_WARNINGS2) {\n      if (route.errorElement) {\n        warning(\n          false,\n          \"You should not include both `ErrorBoundary` and `errorElement` on your route - `ErrorBoundary` will be used.\"\n        );\n      }\n    }\n    Object.assign(updates, {\n      errorElement: React3.createElement(route.ErrorBoundary),\n      ErrorBoundary: void 0\n    });\n  }\n  return updates;\n}\nfunction createMemoryRouter(routes, opts) {\n  return createRouter({\n    basename: opts?.basename,\n    future: opts?.future,\n    history: createMemoryHistory({\n      initialEntries: opts?.initialEntries,\n      initialIndex: opts?.initialIndex\n    }),\n    hydrationData: opts?.hydrationData,\n    routes,\n    mapRouteProperties,\n    dataStrategy: opts?.dataStrategy,\n    patchRoutesOnNavigation: opts?.patchRoutesOnNavigation\n  }).initialize();\n}\nvar Deferred = class {\n  constructor() {\n    this.status = \"pending\";\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = (value) => {\n        if (this.status === \"pending\") {\n          this.status = \"resolved\";\n          resolve(value);\n        }\n      };\n      this.reject = (reason) => {\n        if (this.status === \"pending\") {\n          this.status = \"rejected\";\n          reject(reason);\n        }\n      };\n    });\n  }\n};\nfunction RouterProvider({\n  router,\n  flushSync: reactDomFlushSyncImpl\n}) {\n  let [state, setStateImpl] = React3.useState(router.state);\n  let [pendingState, setPendingState] = React3.useState();\n  let [vtContext, setVtContext] = React3.useState({\n    isTransitioning: false\n  });\n  let [renderDfd, setRenderDfd] = React3.useState();\n  let [transition, setTransition] = React3.useState();\n  let [interruption, setInterruption] = React3.useState();\n  let fetcherData = React3.useRef(/* @__PURE__ */ new Map());\n  let setState = React3.useCallback(\n    (newState, { deletedFetchers, flushSync, viewTransitionOpts }) => {\n      newState.fetchers.forEach((fetcher, key) => {\n        if (fetcher.data !== void 0) {\n          fetcherData.current.set(key, fetcher.data);\n        }\n      });\n      deletedFetchers.forEach((key) => fetcherData.current.delete(key));\n      warnOnce(\n        flushSync === false || reactDomFlushSyncImpl != null,\n        'You provided the `flushSync` option to a router update, but you are not using the `<RouterProvider>` from `react-router/dom` so `ReactDOM.flushSync()` is unavailable.  Please update your app to `import { RouterProvider } from \"react-router/dom\"` and ensure you have `react-dom` installed as a dependency to use the `flushSync` option.'\n      );\n      let isViewTransitionAvailable = router.window != null && router.window.document != null && typeof router.window.document.startViewTransition === \"function\";\n      warnOnce(\n        viewTransitionOpts == null || isViewTransitionAvailable,\n        \"You provided the `viewTransition` option to a router update, but you do not appear to be running in a DOM environment as `window.startViewTransition` is not available.\"\n      );\n      if (!viewTransitionOpts || !isViewTransitionAvailable) {\n        if (reactDomFlushSyncImpl && flushSync) {\n          reactDomFlushSyncImpl(() => setStateImpl(newState));\n        } else {\n          React3.startTransition(() => setStateImpl(newState));\n        }\n        return;\n      }\n      if (reactDomFlushSyncImpl && flushSync) {\n        reactDomFlushSyncImpl(() => {\n          if (transition) {\n            renderDfd && renderDfd.resolve();\n            transition.skipTransition();\n          }\n          setVtContext({\n            isTransitioning: true,\n            flushSync: true,\n            currentLocation: viewTransitionOpts.currentLocation,\n            nextLocation: viewTransitionOpts.nextLocation\n          });\n        });\n        let t = router.window.document.startViewTransition(() => {\n          reactDomFlushSyncImpl(() => setStateImpl(newState));\n        });\n        t.finished.finally(() => {\n          reactDomFlushSyncImpl(() => {\n            setRenderDfd(void 0);\n            setTransition(void 0);\n            setPendingState(void 0);\n            setVtContext({ isTransitioning: false });\n          });\n        });\n        reactDomFlushSyncImpl(() => setTransition(t));\n        return;\n      }\n      if (transition) {\n        renderDfd && renderDfd.resolve();\n        transition.skipTransition();\n        setInterruption({\n          state: newState,\n          currentLocation: viewTransitionOpts.currentLocation,\n          nextLocation: viewTransitionOpts.nextLocation\n        });\n      } else {\n        setPendingState(newState);\n        setVtContext({\n          isTransitioning: true,\n          flushSync: false,\n          currentLocation: viewTransitionOpts.currentLocation,\n          nextLocation: viewTransitionOpts.nextLocation\n        });\n      }\n    },\n    [router.window, reactDomFlushSyncImpl, transition, renderDfd]\n  );\n  React3.useLayoutEffect(() => router.subscribe(setState), [router, setState]);\n  React3.useEffect(() => {\n    if (vtContext.isTransitioning && !vtContext.flushSync) {\n      setRenderDfd(new Deferred());\n    }\n  }, [vtContext]);\n  React3.useEffect(() => {\n    if (renderDfd && pendingState && router.window) {\n      let newState = pendingState;\n      let renderPromise = renderDfd.promise;\n      let transition2 = router.window.document.startViewTransition(async () => {\n        React3.startTransition(() => setStateImpl(newState));\n        await renderPromise;\n      });\n      transition2.finished.finally(() => {\n        setRenderDfd(void 0);\n        setTransition(void 0);\n        setPendingState(void 0);\n        setVtContext({ isTransitioning: false });\n      });\n      setTransition(transition2);\n    }\n  }, [pendingState, renderDfd, router.window]);\n  React3.useEffect(() => {\n    if (renderDfd && pendingState && state.location.key === pendingState.location.key) {\n      renderDfd.resolve();\n    }\n  }, [renderDfd, transition, state.location, pendingState]);\n  React3.useEffect(() => {\n    if (!vtContext.isTransitioning && interruption) {\n      setPendingState(interruption.state);\n      setVtContext({\n        isTransitioning: true,\n        flushSync: false,\n        currentLocation: interruption.currentLocation,\n        nextLocation: interruption.nextLocation\n      });\n      setInterruption(void 0);\n    }\n  }, [vtContext.isTransitioning, interruption]);\n  let navigator2 = React3.useMemo(() => {\n    return {\n      createHref: router.createHref,\n      encodeLocation: router.encodeLocation,\n      go: (n) => router.navigate(n),\n      push: (to, state2, opts) => router.navigate(to, {\n        state: state2,\n        preventScrollReset: opts?.preventScrollReset\n      }),\n      replace: (to, state2, opts) => router.navigate(to, {\n        replace: true,\n        state: state2,\n        preventScrollReset: opts?.preventScrollReset\n      })\n    };\n  }, [router]);\n  let basename = router.basename || \"/\";\n  let dataRouterContext = React3.useMemo(\n    () => ({\n      router,\n      navigator: navigator2,\n      static: false,\n      basename\n    }),\n    [router, navigator2, basename]\n  );\n  return /* @__PURE__ */ React3.createElement(React3.Fragment, null, /* @__PURE__ */ React3.createElement(DataRouterContext.Provider, { value: dataRouterContext }, /* @__PURE__ */ React3.createElement(DataRouterStateContext.Provider, { value: state }, /* @__PURE__ */ React3.createElement(FetchersContext.Provider, { value: fetcherData.current }, /* @__PURE__ */ React3.createElement(ViewTransitionContext.Provider, { value: vtContext }, /* @__PURE__ */ React3.createElement(\n    Router,\n    {\n      basename,\n      location: state.location,\n      navigationType: state.historyAction,\n      navigator: navigator2\n    },\n    /* @__PURE__ */ React3.createElement(\n      MemoizedDataRoutes,\n      {\n        routes: router.routes,\n        future: router.future,\n        state\n      }\n    )\n  ))))), null);\n}\nvar MemoizedDataRoutes = React3.memo(DataRoutes);\nfunction DataRoutes({\n  routes,\n  future,\n  state\n}) {\n  return useRoutesImpl(routes, void 0, state, future);\n}\nfunction MemoryRouter({\n  basename,\n  children,\n  initialEntries,\n  initialIndex\n}) {\n  let historyRef = React3.useRef();\n  if (historyRef.current == null) {\n    historyRef.current = createMemoryHistory({\n      initialEntries,\n      initialIndex,\n      v5Compat: true\n    });\n  }\n  let history = historyRef.current;\n  let [state, setStateImpl] = React3.useState({\n    action: history.action,\n    location: history.location\n  });\n  let setState = React3.useCallback(\n    (newState) => {\n      React3.startTransition(() => setStateImpl(newState));\n    },\n    [setStateImpl]\n  );\n  React3.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  return /* @__PURE__ */ React3.createElement(\n    Router,\n    {\n      basename,\n      children,\n      location: state.location,\n      navigationType: state.action,\n      navigator: history\n    }\n  );\n}\nfunction Navigate({\n  to,\n  replace: replace2,\n  state,\n  relative\n}) {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of\n    // the router loaded. We can help them understand how to avoid that.\n    `<Navigate> may be used only in the context of a <Router> component.`\n  );\n  let { static: isStatic } = React3.useContext(NavigationContext);\n  warning(\n    !isStatic,\n    `<Navigate> must not be used on the initial render in a <StaticRouter>. This is a no-op, but you should modify your code so the <Navigate> is only ever rendered in response to some user interaction or state change.`\n  );\n  let { matches } = React3.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n  let navigate = useNavigate();\n  let path = resolveTo(\n    to,\n    getResolveToMatches(matches),\n    locationPathname,\n    relative === \"path\"\n  );\n  let jsonPath = JSON.stringify(path);\n  React3.useEffect(() => {\n    navigate(JSON.parse(jsonPath), { replace: replace2, state, relative });\n  }, [navigate, jsonPath, relative, replace2, state]);\n  return null;\n}\nfunction Outlet(props) {\n  return useOutlet(props.context);\n}\nfunction Route(_props) {\n  invariant(\n    false,\n    `A <Route> is only ever to be used as the child of <Routes> element, never rendered directly. Please wrap your <Route> in a <Routes>.`\n  );\n}\nfunction Router({\n  basename: basenameProp = \"/\",\n  children = null,\n  location: locationProp,\n  navigationType = \"POP\" /* Pop */,\n  navigator: navigator2,\n  static: staticProp = false\n}) {\n  invariant(\n    !useInRouterContext(),\n    `You cannot render a <Router> inside another <Router>. You should never have more than one in your app.`\n  );\n  let basename = basenameProp.replace(/^\\/*/, \"/\");\n  let navigationContext = React3.useMemo(\n    () => ({\n      basename,\n      navigator: navigator2,\n      static: staticProp,\n      future: {}\n    }),\n    [basename, navigator2, staticProp]\n  );\n  if (typeof locationProp === \"string\") {\n    locationProp = parsePath(locationProp);\n  }\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\",\n    state = null,\n    key = \"default\"\n  } = locationProp;\n  let locationContext = React3.useMemo(() => {\n    let trailingPathname = stripBasename(pathname, basename);\n    if (trailingPathname == null) {\n      return null;\n    }\n    return {\n      location: {\n        pathname: trailingPathname,\n        search,\n        hash,\n        state,\n        key\n      },\n      navigationType\n    };\n  }, [basename, pathname, search, hash, state, key, navigationType]);\n  warning(\n    locationContext != null,\n    `<Router basename=\"${basename}\"> is not able to match the URL \"${pathname}${search}${hash}\" because it does not start with the basename, so the <Router> won't render anything.`\n  );\n  if (locationContext == null) {\n    return null;\n  }\n  return /* @__PURE__ */ React3.createElement(NavigationContext.Provider, { value: navigationContext }, /* @__PURE__ */ React3.createElement(LocationContext.Provider, { children, value: locationContext }));\n}\nfunction Routes({\n  children,\n  location\n}) {\n  return useRoutes(createRoutesFromChildren(children), location);\n}\nfunction Await({\n  children,\n  errorElement,\n  resolve\n}) {\n  return /* @__PURE__ */ React3.createElement(AwaitErrorBoundary, { resolve, errorElement }, /* @__PURE__ */ React3.createElement(ResolveAwait, null, children));\n}\nvar AwaitErrorBoundary = class extends React3.Component {\n  constructor(props) {\n    super(props);\n    this.state = { error: null };\n  }\n  static getDerivedStateFromError(error) {\n    return { error };\n  }\n  componentDidCatch(error, errorInfo) {\n    console.error(\n      \"<Await> caught the following error during render\",\n      error,\n      errorInfo\n    );\n  }\n  render() {\n    let { children, errorElement, resolve } = this.props;\n    let promise = null;\n    let status = 0 /* pending */;\n    if (!(resolve instanceof Promise)) {\n      status = 1 /* success */;\n      promise = Promise.resolve();\n      Object.defineProperty(promise, \"_tracked\", { get: () => true });\n      Object.defineProperty(promise, \"_data\", { get: () => resolve });\n    } else if (this.state.error) {\n      status = 2 /* error */;\n      let renderError = this.state.error;\n      promise = Promise.reject().catch(() => {\n      });\n      Object.defineProperty(promise, \"_tracked\", { get: () => true });\n      Object.defineProperty(promise, \"_error\", { get: () => renderError });\n    } else if (resolve._tracked) {\n      promise = resolve;\n      status = \"_error\" in promise ? 2 /* error */ : \"_data\" in promise ? 1 /* success */ : 0 /* pending */;\n    } else {\n      status = 0 /* pending */;\n      Object.defineProperty(resolve, \"_tracked\", { get: () => true });\n      promise = resolve.then(\n        (data2) => Object.defineProperty(resolve, \"_data\", { get: () => data2 }),\n        (error) => Object.defineProperty(resolve, \"_error\", { get: () => error })\n      );\n    }\n    if (status === 2 /* error */ && !errorElement) {\n      throw promise._error;\n    }\n    if (status === 2 /* error */) {\n      return /* @__PURE__ */ React3.createElement(AwaitContext.Provider, { value: promise, children: errorElement });\n    }\n    if (status === 1 /* success */) {\n      return /* @__PURE__ */ React3.createElement(AwaitContext.Provider, { value: promise, children });\n    }\n    throw promise;\n  }\n};\nfunction ResolveAwait({\n  children\n}) {\n  let data2 = useAsyncValue();\n  let toRender = typeof children === \"function\" ? children(data2) : children;\n  return /* @__PURE__ */ React3.createElement(React3.Fragment, null, toRender);\n}\nfunction createRoutesFromChildren(children, parentPath = []) {\n  let routes = [];\n  React3.Children.forEach(children, (element, index) => {\n    if (!React3.isValidElement(element)) {\n      return;\n    }\n    let treePath = [...parentPath, index];\n    if (element.type === React3.Fragment) {\n      routes.push.apply(\n        routes,\n        createRoutesFromChildren(element.props.children, treePath)\n      );\n      return;\n    }\n    invariant(\n      element.type === Route,\n      `[${typeof element.type === \"string\" ? element.type : element.type.name}] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>`\n    );\n    invariant(\n      !element.props.index || !element.props.children,\n      \"An index route cannot have child routes.\"\n    );\n    let route = {\n      id: element.props.id || treePath.join(\"-\"),\n      caseSensitive: element.props.caseSensitive,\n      element: element.props.element,\n      Component: element.props.Component,\n      index: element.props.index,\n      path: element.props.path,\n      loader: element.props.loader,\n      action: element.props.action,\n      hydrateFallbackElement: element.props.hydrateFallbackElement,\n      HydrateFallback: element.props.HydrateFallback,\n      errorElement: element.props.errorElement,\n      ErrorBoundary: element.props.ErrorBoundary,\n      hasErrorBoundary: element.props.hasErrorBoundary === true || element.props.ErrorBoundary != null || element.props.errorElement != null,\n      shouldRevalidate: element.props.shouldRevalidate,\n      handle: element.props.handle,\n      lazy: element.props.lazy\n    };\n    if (element.props.children) {\n      route.children = createRoutesFromChildren(\n        element.props.children,\n        treePath\n      );\n    }\n    routes.push(route);\n  });\n  return routes;\n}\nvar createRoutesFromElements = createRoutesFromChildren;\nfunction renderMatches(matches) {\n  return _renderMatches(matches);\n}\n\n// lib/dom/lib.tsx\nimport * as React10 from \"react\";\n\n// lib/dom/dom.ts\nvar defaultMethod = \"get\";\nvar defaultEncType = \"application/x-www-form-urlencoded\";\nfunction isHtmlElement(object) {\n  return object != null && typeof object.tagName === \"string\";\n}\nfunction isButtonElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"button\";\n}\nfunction isFormElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"form\";\n}\nfunction isInputElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"input\";\n}\nfunction isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\nfunction shouldProcessLinkClick(event, target) {\n  return event.button === 0 && // Ignore everything but left clicks\n  (!target || target === \"_self\") && // Let browser handle \"target=_blank\" etc.\n  !isModifiedEvent(event);\n}\nfunction createSearchParams(init = \"\") {\n  return new URLSearchParams(\n    typeof init === \"string\" || Array.isArray(init) || init instanceof URLSearchParams ? init : Object.keys(init).reduce((memo2, key) => {\n      let value = init[key];\n      return memo2.concat(\n        Array.isArray(value) ? value.map((v) => [key, v]) : [[key, value]]\n      );\n    }, [])\n  );\n}\nfunction getSearchParamsForLocation(locationSearch, defaultSearchParams) {\n  let searchParams = createSearchParams(locationSearch);\n  if (defaultSearchParams) {\n    defaultSearchParams.forEach((_, key) => {\n      if (!searchParams.has(key)) {\n        defaultSearchParams.getAll(key).forEach((value) => {\n          searchParams.append(key, value);\n        });\n      }\n    });\n  }\n  return searchParams;\n}\nvar _formDataSupportsSubmitter = null;\nfunction isFormDataSubmitterSupported() {\n  if (_formDataSupportsSubmitter === null) {\n    try {\n      new FormData(\n        document.createElement(\"form\"),\n        // @ts-expect-error if FormData supports the submitter parameter, this will throw\n        0\n      );\n      _formDataSupportsSubmitter = false;\n    } catch (e) {\n      _formDataSupportsSubmitter = true;\n    }\n  }\n  return _formDataSupportsSubmitter;\n}\nvar supportedFormEncTypes = /* @__PURE__ */ new Set([\n  \"application/x-www-form-urlencoded\",\n  \"multipart/form-data\",\n  \"text/plain\"\n]);\nfunction getFormEncType(encType) {\n  if (encType != null && !supportedFormEncTypes.has(encType)) {\n    warning(\n      false,\n      `\"${encType}\" is not a valid \\`encType\\` for \\`<Form>\\`/\\`<fetcher.Form>\\` and will default to \"${defaultEncType}\"`\n    );\n    return null;\n  }\n  return encType;\n}\nfunction getFormSubmissionInfo(target, basename) {\n  let method;\n  let action;\n  let encType;\n  let formData;\n  let body;\n  if (isFormElement(target)) {\n    let attr = target.getAttribute(\"action\");\n    action = attr ? stripBasename(attr, basename) : null;\n    method = target.getAttribute(\"method\") || defaultMethod;\n    encType = getFormEncType(target.getAttribute(\"enctype\")) || defaultEncType;\n    formData = new FormData(target);\n  } else if (isButtonElement(target) || isInputElement(target) && (target.type === \"submit\" || target.type === \"image\")) {\n    let form = target.form;\n    if (form == null) {\n      throw new Error(\n        `Cannot submit a <button> or <input type=\"submit\"> without a <form>`\n      );\n    }\n    let attr = target.getAttribute(\"formaction\") || form.getAttribute(\"action\");\n    action = attr ? stripBasename(attr, basename) : null;\n    method = target.getAttribute(\"formmethod\") || form.getAttribute(\"method\") || defaultMethod;\n    encType = getFormEncType(target.getAttribute(\"formenctype\")) || getFormEncType(form.getAttribute(\"enctype\")) || defaultEncType;\n    formData = new FormData(form, target);\n    if (!isFormDataSubmitterSupported()) {\n      let { name, type, value } = target;\n      if (type === \"image\") {\n        let prefix = name ? `${name}.` : \"\";\n        formData.append(`${prefix}x`, \"0\");\n        formData.append(`${prefix}y`, \"0\");\n      } else if (name) {\n        formData.append(name, value);\n      }\n    }\n  } else if (isHtmlElement(target)) {\n    throw new Error(\n      `Cannot submit element that is not <form>, <button>, or <input type=\"submit|image\">`\n    );\n  } else {\n    method = defaultMethod;\n    action = null;\n    encType = defaultEncType;\n    body = target;\n  }\n  if (formData && encType === \"text/plain\") {\n    body = formData;\n    formData = void 0;\n  }\n  return { action, method: method.toLowerCase(), encType, formData, body };\n}\n\n// lib/dom/ssr/components.tsx\nimport * as React9 from \"react\";\n\n// lib/dom/ssr/invariant.ts\nfunction invariant2(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\n// lib/dom/ssr/routeModules.ts\nasync function loadRouteModule(route, routeModulesCache) {\n  if (route.id in routeModulesCache) {\n    return routeModulesCache[route.id];\n  }\n  try {\n    let routeModule = await import(\n      /* @vite-ignore */\n      /* webpackIgnore: true */\n      route.module\n    );\n    routeModulesCache[route.id] = routeModule;\n    return routeModule;\n  } catch (error) {\n    console.error(\n      `Error loading route module \\`${route.module}\\`, reloading page...`\n    );\n    console.error(error);\n    if (window.__reactRouterContext && window.__reactRouterContext.isSpaMode && // @ts-expect-error\n    import.meta.hot) {\n      throw error;\n    }\n    window.location.reload();\n    return new Promise(() => {\n    });\n  }\n}\n\n// lib/dom/ssr/links.ts\nfunction getKeyedLinksForMatches(matches, routeModules, manifest) {\n  let descriptors = matches.map((match) => {\n    let module = routeModules[match.route.id];\n    let route = manifest.routes[match.route.id];\n    return [\n      route && route.css ? route.css.map((href) => ({ rel: \"stylesheet\", href })) : [],\n      module?.links?.() || []\n    ];\n  }).flat(2);\n  let preloads = getCurrentPageModulePreloadHrefs(matches, manifest);\n  return dedupeLinkDescriptors(descriptors, preloads);\n}\nasync function prefetchStyleLinks(route, routeModule) {\n  if (!route.css && !routeModule.links || !isPreloadSupported()) return;\n  let descriptors = [];\n  if (route.css) {\n    descriptors.push(...route.css.map((href) => ({ rel: \"stylesheet\", href })));\n  }\n  if (routeModule.links) {\n    descriptors.push(...routeModule.links());\n  }\n  if (descriptors.length === 0) return;\n  let styleLinks = [];\n  for (let descriptor of descriptors) {\n    if (!isPageLinkDescriptor(descriptor) && descriptor.rel === \"stylesheet\") {\n      styleLinks.push({\n        ...descriptor,\n        rel: \"preload\",\n        as: \"style\"\n      });\n    }\n  }\n  let matchingLinks = styleLinks.filter(\n    (link) => (!link.media || window.matchMedia(link.media).matches) && !document.querySelector(`link[rel=\"stylesheet\"][href=\"${link.href}\"]`)\n  );\n  await Promise.all(matchingLinks.map(prefetchStyleLink));\n}\nasync function prefetchStyleLink(descriptor) {\n  return new Promise((resolve) => {\n    let link = document.createElement(\"link\");\n    Object.assign(link, descriptor);\n    function removeLink() {\n      if (document.head.contains(link)) {\n        document.head.removeChild(link);\n      }\n    }\n    link.onload = () => {\n      removeLink();\n      resolve();\n    };\n    link.onerror = () => {\n      removeLink();\n      resolve();\n    };\n    document.head.appendChild(link);\n  });\n}\nfunction isPageLinkDescriptor(object) {\n  return object != null && typeof object.page === \"string\";\n}\nfunction isHtmlLinkDescriptor(object) {\n  if (object == null) {\n    return false;\n  }\n  if (object.href == null) {\n    return object.rel === \"preload\" && typeof object.imageSrcSet === \"string\" && typeof object.imageSizes === \"string\";\n  }\n  return typeof object.rel === \"string\" && typeof object.href === \"string\";\n}\nasync function getKeyedPrefetchLinks(matches, manifest, routeModules) {\n  let links = await Promise.all(\n    matches.map(async (match) => {\n      let route = manifest.routes[match.route.id];\n      if (route) {\n        let mod = await loadRouteModule(route, routeModules);\n        return mod.links ? mod.links() : [];\n      }\n      return [];\n    })\n  );\n  return dedupeLinkDescriptors(\n    links.flat(1).filter(isHtmlLinkDescriptor).filter((link) => link.rel === \"stylesheet\" || link.rel === \"preload\").map(\n      (link) => link.rel === \"stylesheet\" ? { ...link, rel: \"prefetch\", as: \"style\" } : { ...link, rel: \"prefetch\" }\n    )\n  );\n}\nfunction getNewMatchesForLinks(page, nextMatches, currentMatches, manifest, location, mode) {\n  let isNew = (match, index) => {\n    if (!currentMatches[index]) return true;\n    return match.route.id !== currentMatches[index].route.id;\n  };\n  let matchPathChanged = (match, index) => {\n    return (\n      // param change, /users/123 -> /users/456\n      currentMatches[index].pathname !== match.pathname || // splat param changed, which is not present in match.path\n      // e.g. /files/images/avatar.jpg -> files/finances.xls\n      currentMatches[index].route.path?.endsWith(\"*\") && currentMatches[index].params[\"*\"] !== match.params[\"*\"]\n    );\n  };\n  if (mode === \"assets\") {\n    return nextMatches.filter(\n      (match, index) => isNew(match, index) || matchPathChanged(match, index)\n    );\n  }\n  if (mode === \"data\") {\n    return nextMatches.filter((match, index) => {\n      let manifestRoute = manifest.routes[match.route.id];\n      if (!manifestRoute || !manifestRoute.hasLoader) {\n        return false;\n      }\n      if (isNew(match, index) || matchPathChanged(match, index)) {\n        return true;\n      }\n      if (match.route.shouldRevalidate) {\n        let routeChoice = match.route.shouldRevalidate({\n          currentUrl: new URL(\n            location.pathname + location.search + location.hash,\n            window.origin\n          ),\n          currentParams: currentMatches[0]?.params || {},\n          nextUrl: new URL(page, window.origin),\n          nextParams: match.params,\n          defaultShouldRevalidate: true\n        });\n        if (typeof routeChoice === \"boolean\") {\n          return routeChoice;\n        }\n      }\n      return true;\n    });\n  }\n  return [];\n}\nfunction getModuleLinkHrefs(matches, manifestPatch) {\n  return dedupeHrefs(\n    matches.map((match) => {\n      let route = manifestPatch.routes[match.route.id];\n      if (!route) return [];\n      let hrefs = [route.module];\n      if (route.imports) {\n        hrefs = hrefs.concat(route.imports);\n      }\n      return hrefs;\n    }).flat(1)\n  );\n}\nfunction getCurrentPageModulePreloadHrefs(matches, manifest) {\n  return dedupeHrefs(\n    matches.map((match) => {\n      let route = manifest.routes[match.route.id];\n      if (!route) return [];\n      let hrefs = [route.module];\n      if (route.imports) {\n        hrefs = hrefs.concat(route.imports);\n      }\n      return hrefs;\n    }).flat(1)\n  );\n}\nfunction dedupeHrefs(hrefs) {\n  return [...new Set(hrefs)];\n}\nfunction sortKeys(obj) {\n  let sorted = {};\n  let keys = Object.keys(obj).sort();\n  for (let key of keys) {\n    sorted[key] = obj[key];\n  }\n  return sorted;\n}\nfunction dedupeLinkDescriptors(descriptors, preloads) {\n  let set = /* @__PURE__ */ new Set();\n  let preloadsSet = new Set(preloads);\n  return descriptors.reduce((deduped, descriptor) => {\n    let alreadyModulePreload = preloads && !isPageLinkDescriptor(descriptor) && descriptor.as === \"script\" && descriptor.href && preloadsSet.has(descriptor.href);\n    if (alreadyModulePreload) {\n      return deduped;\n    }\n    let key = JSON.stringify(sortKeys(descriptor));\n    if (!set.has(key)) {\n      set.add(key);\n      deduped.push({ key, link: descriptor });\n    }\n    return deduped;\n  }, []);\n}\nvar _isPreloadSupported;\nfunction isPreloadSupported() {\n  if (_isPreloadSupported !== void 0) {\n    return _isPreloadSupported;\n  }\n  let el = document.createElement(\"link\");\n  _isPreloadSupported = el.relList.supports(\"preload\");\n  el = null;\n  return _isPreloadSupported;\n}\n\n// lib/dom/ssr/markup.ts\nvar ESCAPE_LOOKUP = {\n  \"&\": \"\\\\u0026\",\n  \">\": \"\\\\u003e\",\n  \"<\": \"\\\\u003c\",\n  \"\\u2028\": \"\\\\u2028\",\n  \"\\u2029\": \"\\\\u2029\"\n};\nvar ESCAPE_REGEX = /[&><\\u2028\\u2029]/g;\nfunction escapeHtml(html) {\n  return html.replace(ESCAPE_REGEX, (match) => ESCAPE_LOOKUP[match]);\n}\nfunction createHtml(html) {\n  return { __html: html };\n}\n\n// lib/dom/ssr/single-fetch.tsx\nimport * as React4 from \"react\";\nimport { decode } from \"turbo-stream\";\n\n// lib/dom/ssr/data.ts\nasync function createRequestInit(request) {\n  let init = { signal: request.signal };\n  if (request.method !== \"GET\") {\n    init.method = request.method;\n    let contentType = request.headers.get(\"Content-Type\");\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      init.headers = { \"Content-Type\": contentType };\n      init.body = JSON.stringify(await request.json());\n    } else if (contentType && /\\btext\\/plain\\b/.test(contentType)) {\n      init.headers = { \"Content-Type\": contentType };\n      init.body = await request.text();\n    } else if (contentType && /\\bapplication\\/x-www-form-urlencoded\\b/.test(contentType)) {\n      init.body = new URLSearchParams(await request.text());\n    } else {\n      init.body = await request.formData();\n    }\n  }\n  return init;\n}\n\n// lib/dom/ssr/single-fetch.tsx\nvar SingleFetchRedirectSymbol = Symbol(\"SingleFetchRedirect\");\nfunction StreamTransfer({\n  context,\n  identifier,\n  reader,\n  textDecoder,\n  nonce\n}) {\n  if (!context.renderMeta || !context.renderMeta.didRenderScripts) {\n    return null;\n  }\n  if (!context.renderMeta.streamCache) {\n    context.renderMeta.streamCache = {};\n  }\n  let { streamCache } = context.renderMeta;\n  let promise = streamCache[identifier];\n  if (!promise) {\n    promise = streamCache[identifier] = reader.read().then((result) => {\n      streamCache[identifier].result = {\n        done: result.done,\n        value: textDecoder.decode(result.value, { stream: true })\n      };\n    }).catch((e) => {\n      streamCache[identifier].error = e;\n    });\n  }\n  if (promise.error) {\n    throw promise.error;\n  }\n  if (promise.result === void 0) {\n    throw promise;\n  }\n  let { done, value } = promise.result;\n  let scriptTag = value ? /* @__PURE__ */ React4.createElement(\n    \"script\",\n    {\n      nonce,\n      dangerouslySetInnerHTML: {\n        __html: `window.__reactRouterContext.streamController.enqueue(${escapeHtml(\n          JSON.stringify(value)\n        )});`\n      }\n    }\n  ) : null;\n  if (done) {\n    return /* @__PURE__ */ React4.createElement(React4.Fragment, null, scriptTag, /* @__PURE__ */ React4.createElement(\n      \"script\",\n      {\n        nonce,\n        dangerouslySetInnerHTML: {\n          __html: `window.__reactRouterContext.streamController.close();`\n        }\n      }\n    ));\n  } else {\n    return /* @__PURE__ */ React4.createElement(React4.Fragment, null, scriptTag, /* @__PURE__ */ React4.createElement(React4.Suspense, null, /* @__PURE__ */ React4.createElement(\n      StreamTransfer,\n      {\n        context,\n        identifier: identifier + 1,\n        reader,\n        textDecoder,\n        nonce\n      }\n    )));\n  }\n}\nfunction getSingleFetchDataStrategy(manifest, routeModules, getRouter) {\n  return async ({ request, matches, fetcherKey }) => {\n    if (request.method !== \"GET\") {\n      return singleFetchActionStrategy(request, matches);\n    }\n    if (fetcherKey) {\n      return singleFetchLoaderFetcherStrategy(request, matches);\n    }\n    return singleFetchLoaderNavigationStrategy(\n      manifest,\n      routeModules,\n      getRouter(),\n      request,\n      matches\n    );\n  };\n}\nasync function singleFetchActionStrategy(request, matches) {\n  let actionMatch = matches.find((m) => m.shouldLoad);\n  invariant2(actionMatch, \"No action match found\");\n  let actionStatus = void 0;\n  let result = await actionMatch.resolve(async (handler) => {\n    let result2 = await handler(async () => {\n      let url = singleFetchUrl(request.url);\n      let init = await createRequestInit(request);\n      let { data: data2, status } = await fetchAndDecode(url, init);\n      actionStatus = status;\n      return unwrapSingleFetchResult(\n        data2,\n        actionMatch.route.id\n      );\n    });\n    return result2;\n  });\n  if (isResponse(result.result) || isRouteErrorResponse(result.result)) {\n    return { [actionMatch.route.id]: result };\n  }\n  return {\n    [actionMatch.route.id]: {\n      type: result.type,\n      result: data(result.result, actionStatus)\n    }\n  };\n}\nasync function singleFetchLoaderNavigationStrategy(manifest, routeModules, router, request, matches) {\n  let routesParams = /* @__PURE__ */ new Set();\n  let foundOptOutRoute = false;\n  let routeDfds = matches.map(() => createDeferred2());\n  let routesLoadedPromise = Promise.all(routeDfds.map((d) => d.promise));\n  let singleFetchDfd = createDeferred2();\n  let url = stripIndexParam(singleFetchUrl(request.url));\n  let init = await createRequestInit(request);\n  let results = {};\n  let resolvePromise = Promise.all(\n    matches.map(\n      async (m, i) => m.resolve(async (handler) => {\n        routeDfds[i].resolve();\n        let manifestRoute = manifest.routes[m.route.id];\n        if (!m.shouldLoad) {\n          if (!router.state.initialized) {\n            return;\n          }\n          if (m.route.id in router.state.loaderData && manifestRoute && manifestRoute.hasLoader && routeModules[m.route.id]?.shouldRevalidate) {\n            foundOptOutRoute = true;\n            return;\n          }\n        }\n        if (manifestRoute && manifestRoute.hasClientLoader) {\n          if (manifestRoute.hasLoader) {\n            foundOptOutRoute = true;\n          }\n          try {\n            let result = await fetchSingleLoader(\n              handler,\n              url,\n              init,\n              m.route.id\n            );\n            results[m.route.id] = { type: \"data\", result };\n          } catch (e) {\n            results[m.route.id] = { type: \"error\", result: e };\n          }\n          return;\n        }\n        if (manifestRoute && manifestRoute.hasLoader) {\n          routesParams.add(m.route.id);\n        }\n        try {\n          let result = await handler(async () => {\n            let data2 = await singleFetchDfd.promise;\n            return unwrapSingleFetchResults(data2, m.route.id);\n          });\n          results[m.route.id] = {\n            type: \"data\",\n            result\n          };\n        } catch (e) {\n          results[m.route.id] = {\n            type: \"error\",\n            result: e\n          };\n        }\n      })\n    )\n  );\n  await routesLoadedPromise;\n  if ((!router.state.initialized || routesParams.size === 0) && !window.__reactRouterHdrActive) {\n    singleFetchDfd.resolve({});\n  } else {\n    try {\n      if (foundOptOutRoute && routesParams.size > 0) {\n        url.searchParams.set(\n          \"_routes\",\n          matches.filter((m) => routesParams.has(m.route.id)).map((m) => m.route.id).join(\",\")\n        );\n      }\n      let data2 = await fetchAndDecode(url, init);\n      singleFetchDfd.resolve(data2.data);\n    } catch (e) {\n      singleFetchDfd.reject(e);\n    }\n  }\n  await resolvePromise;\n  return results;\n}\nasync function singleFetchLoaderFetcherStrategy(request, matches) {\n  let fetcherMatch = matches.find((m) => m.shouldLoad);\n  invariant2(fetcherMatch, \"No fetcher match found\");\n  let result = await fetcherMatch.resolve(async (handler) => {\n    let url = stripIndexParam(singleFetchUrl(request.url));\n    let init = await createRequestInit(request);\n    return fetchSingleLoader(handler, url, init, fetcherMatch.route.id);\n  });\n  return { [fetcherMatch.route.id]: result };\n}\nfunction fetchSingleLoader(handler, url, init, routeId) {\n  return handler(async () => {\n    let singleLoaderUrl = new URL(url);\n    singleLoaderUrl.searchParams.set(\"_routes\", routeId);\n    let { data: data2 } = await fetchAndDecode(singleLoaderUrl, init);\n    return unwrapSingleFetchResults(data2, routeId);\n  });\n}\nfunction stripIndexParam(url) {\n  let indexValues = url.searchParams.getAll(\"index\");\n  url.searchParams.delete(\"index\");\n  let indexValuesToKeep = [];\n  for (let indexValue of indexValues) {\n    if (indexValue) {\n      indexValuesToKeep.push(indexValue);\n    }\n  }\n  for (let toKeep of indexValuesToKeep) {\n    url.searchParams.append(\"index\", toKeep);\n  }\n  return url;\n}\nfunction singleFetchUrl(reqUrl) {\n  let url = typeof reqUrl === \"string\" ? new URL(\n    reqUrl,\n    // This can be called during the SSR flow via PrefetchPageLinksImpl so\n    // don't assume window is available\n    typeof window === \"undefined\" ? \"server://singlefetch/\" : window.location.origin\n  ) : reqUrl;\n  if (url.pathname === \"/\") {\n    url.pathname = \"_root.data\";\n  } else {\n    url.pathname = `${url.pathname.replace(/\\/$/, \"\")}.data`;\n  }\n  return url;\n}\nasync function fetchAndDecode(url, init) {\n  let res = await fetch(url, init);\n  if (res.status === 404 && !res.headers.has(\"X-Remix-Response\")) {\n    throw new ErrorResponseImpl(404, \"Not Found\", true);\n  }\n  const NO_BODY_STATUS_CODES2 = /* @__PURE__ */ new Set([100, 101, 204, 205]);\n  if (NO_BODY_STATUS_CODES2.has(res.status)) {\n    if (!init.method || init.method === \"GET\") {\n      return { status: res.status, data: {} };\n    } else {\n      return { status: res.status, data: { data: void 0 } };\n    }\n  }\n  invariant2(res.body, \"No response body to decode\");\n  try {\n    let decoded = await decodeViaTurboStream(res.body, window);\n    return { status: res.status, data: decoded.value };\n  } catch (e) {\n    throw new Error(\"Unable to decode turbo-stream response\");\n  }\n}\nfunction decodeViaTurboStream(body, global2) {\n  return decode(body, {\n    plugins: [\n      (type, ...rest) => {\n        if (type === \"SanitizedError\") {\n          let [name, message, stack] = rest;\n          let Constructor = Error;\n          if (name && name in global2 && typeof global2[name] === \"function\") {\n            Constructor = global2[name];\n          }\n          let error = new Constructor(message);\n          error.stack = stack;\n          return { value: error };\n        }\n        if (type === \"ErrorResponse\") {\n          let [data2, status, statusText] = rest;\n          return {\n            value: new ErrorResponseImpl(status, statusText, data2)\n          };\n        }\n        if (type === \"SingleFetchRedirect\") {\n          return { value: { [SingleFetchRedirectSymbol]: rest[0] } };\n        }\n        if (type === \"SingleFetchClassInstance\") {\n          return { value: rest[0] };\n        }\n        if (type === \"SingleFetchFallback\") {\n          return { value: void 0 };\n        }\n      }\n    ]\n  });\n}\nfunction unwrapSingleFetchResults(results, routeId) {\n  let redirect2 = results[SingleFetchRedirectSymbol];\n  if (redirect2) {\n    return unwrapSingleFetchResult(redirect2, routeId);\n  }\n  return results[routeId] !== void 0 ? unwrapSingleFetchResult(results[routeId], routeId) : null;\n}\nfunction unwrapSingleFetchResult(result, routeId) {\n  if (\"error\" in result) {\n    throw result.error;\n  } else if (\"redirect\" in result) {\n    let headers = {};\n    if (result.revalidate) {\n      headers[\"X-Remix-Revalidate\"] = \"yes\";\n    }\n    if (result.reload) {\n      headers[\"X-Remix-Reload-Document\"] = \"yes\";\n    }\n    if (result.replace) {\n      headers[\"X-Remix-Replace\"] = \"yes\";\n    }\n    throw redirect(result.redirect, { status: result.status, headers });\n  } else if (\"data\" in result) {\n    return result.data;\n  } else {\n    throw new Error(`No response found for routeId \"${routeId}\"`);\n  }\n}\nfunction createDeferred2() {\n  let resolve;\n  let reject;\n  let promise = new Promise((res, rej) => {\n    resolve = async (val) => {\n      res(val);\n      try {\n        await promise;\n      } catch (e) {\n      }\n    };\n    reject = async (error) => {\n      rej(error);\n      try {\n        await promise;\n      } catch (e) {\n      }\n    };\n  });\n  return {\n    promise,\n    //@ts-ignore\n    resolve,\n    //@ts-ignore\n    reject\n  };\n}\n\n// lib/dom/ssr/fog-of-war.ts\nimport * as React8 from \"react\";\n\n// lib/dom/ssr/routes.tsx\nimport * as React7 from \"react\";\n\n// lib/dom/ssr/errorBoundaries.tsx\nimport * as React5 from \"react\";\nvar RemixErrorBoundary = class extends React5.Component {\n  constructor(props) {\n    super(props);\n    this.state = { error: props.error || null, location: props.location };\n  }\n  static getDerivedStateFromError(error) {\n    return { error };\n  }\n  static getDerivedStateFromProps(props, state) {\n    if (state.location !== props.location) {\n      return { error: props.error || null, location: props.location };\n    }\n    return { error: props.error || state.error, location: state.location };\n  }\n  render() {\n    if (this.state.error) {\n      return /* @__PURE__ */ React5.createElement(\n        RemixRootDefaultErrorBoundary,\n        {\n          error: this.state.error,\n          isOutsideRemixApp: true\n        }\n      );\n    } else {\n      return this.props.children;\n    }\n  }\n};\nfunction RemixRootDefaultErrorBoundary({\n  error,\n  isOutsideRemixApp\n}) {\n  console.error(error);\n  let heyDeveloper = /* @__PURE__ */ React5.createElement(\n    \"script\",\n    {\n      dangerouslySetInnerHTML: {\n        __html: `\n        console.log(\n          \"\\u{1F4BF} Hey developer \\u{1F44B}. You can provide a way better UX than this when your app throws errors. Check out https://remix.run/guides/errors for more information.\"\n        );\n      `\n      }\n    }\n  );\n  if (isRouteErrorResponse(error)) {\n    return /* @__PURE__ */ React5.createElement(BoundaryShell, { title: \"Unhandled Thrown Response!\" }, /* @__PURE__ */ React5.createElement(\"h1\", { style: { fontSize: \"24px\" } }, error.status, \" \", error.statusText), heyDeveloper);\n  }\n  let errorInstance;\n  if (error instanceof Error) {\n    errorInstance = error;\n  } else {\n    let errorString = error == null ? \"Unknown Error\" : typeof error === \"object\" && \"toString\" in error ? error.toString() : JSON.stringify(error);\n    errorInstance = new Error(errorString);\n  }\n  return /* @__PURE__ */ React5.createElement(\n    BoundaryShell,\n    {\n      title: \"Application Error!\",\n      isOutsideRemixApp\n    },\n    /* @__PURE__ */ React5.createElement(\"h1\", { style: { fontSize: \"24px\" } }, \"Application Error\"),\n    /* @__PURE__ */ React5.createElement(\n      \"pre\",\n      {\n        style: {\n          padding: \"2rem\",\n          background: \"hsla(10, 50%, 50%, 0.1)\",\n          color: \"red\",\n          overflow: \"auto\"\n        }\n      },\n      errorInstance.stack\n    ),\n    heyDeveloper\n  );\n}\nfunction BoundaryShell({\n  title,\n  renderScripts,\n  isOutsideRemixApp,\n  children\n}) {\n  let { routeModules } = useFrameworkContext();\n  if (routeModules.root?.Layout && !isOutsideRemixApp) {\n    return children;\n  }\n  return /* @__PURE__ */ React5.createElement(\"html\", { lang: \"en\" }, /* @__PURE__ */ React5.createElement(\"head\", null, /* @__PURE__ */ React5.createElement(\"meta\", { charSet: \"utf-8\" }), /* @__PURE__ */ React5.createElement(\n    \"meta\",\n    {\n      name: \"viewport\",\n      content: \"width=device-width,initial-scale=1,viewport-fit=cover\"\n    }\n  ), /* @__PURE__ */ React5.createElement(\"title\", null, title)), /* @__PURE__ */ React5.createElement(\"body\", null, /* @__PURE__ */ React5.createElement(\"main\", { style: { fontFamily: \"system-ui, sans-serif\", padding: \"2rem\" } }, children, renderScripts ? /* @__PURE__ */ React5.createElement(Scripts, null) : null)));\n}\n\n// lib/dom/ssr/fallback.tsx\nimport * as React6 from \"react\";\nfunction RemixRootDefaultHydrateFallback() {\n  return /* @__PURE__ */ React6.createElement(BoundaryShell, { title: \"Loading...\", renderScripts: true }, /* @__PURE__ */ React6.createElement(\n    \"script\",\n    {\n      dangerouslySetInnerHTML: {\n        __html: `\n              console.log(\n                \"\\u{1F4BF} Hey developer \\u{1F44B}. You can provide a way better UX than this \" +\n                \"when your app is loading JS modules and/or running \\`clientLoader\\` \" +\n                \"functions. Check out https://remix.run/route/hydrate-fallback \" +\n                \"for more information.\"\n              );\n            `\n      }\n    }\n  ));\n}\n\n// lib/dom/ssr/routes.tsx\nfunction groupRoutesByParentId(manifest) {\n  let routes = {};\n  Object.values(manifest).forEach((route) => {\n    if (route) {\n      let parentId = route.parentId || \"\";\n      if (!routes[parentId]) {\n        routes[parentId] = [];\n      }\n      routes[parentId].push(route);\n    }\n  });\n  return routes;\n}\nfunction getRouteComponents(route, routeModule, isSpaMode) {\n  let Component4 = getRouteModuleComponent(routeModule);\n  let HydrateFallback = routeModule.HydrateFallback && (!isSpaMode || route.id === \"root\") ? routeModule.HydrateFallback : route.id === \"root\" ? RemixRootDefaultHydrateFallback : void 0;\n  let ErrorBoundary = routeModule.ErrorBoundary ? routeModule.ErrorBoundary : route.id === \"root\" ? () => /* @__PURE__ */ React7.createElement(RemixRootDefaultErrorBoundary, { error: useRouteError() }) : void 0;\n  if (route.id === \"root\" && routeModule.Layout) {\n    return {\n      ...Component4 ? {\n        element: /* @__PURE__ */ React7.createElement(routeModule.Layout, null, /* @__PURE__ */ React7.createElement(Component4, null))\n      } : { Component: Component4 },\n      ...ErrorBoundary ? {\n        errorElement: /* @__PURE__ */ React7.createElement(routeModule.Layout, null, /* @__PURE__ */ React7.createElement(ErrorBoundary, null))\n      } : { ErrorBoundary },\n      ...HydrateFallback ? {\n        hydrateFallbackElement: /* @__PURE__ */ React7.createElement(routeModule.Layout, null, /* @__PURE__ */ React7.createElement(HydrateFallback, null))\n      } : { HydrateFallback }\n    };\n  }\n  return { Component: Component4, ErrorBoundary, HydrateFallback };\n}\nfunction createServerRoutes(manifest, routeModules, future, isSpaMode, parentId = \"\", routesByParentId = groupRoutesByParentId(manifest), spaModeLazyPromise = Promise.resolve({ Component: () => null })) {\n  return (routesByParentId[parentId] || []).map((route) => {\n    let routeModule = routeModules[route.id];\n    invariant2(\n      routeModule,\n      \"No `routeModule` available to create server routes\"\n    );\n    let dataRoute = {\n      ...getRouteComponents(route, routeModule, isSpaMode),\n      caseSensitive: route.caseSensitive,\n      id: route.id,\n      index: route.index,\n      path: route.path,\n      handle: routeModule.handle,\n      // For SPA Mode, all routes are lazy except root.  However we tell the\n      // router root is also lazy here too since we don't need a full\n      // implementation - we just need a `lazy` prop to tell the RR rendering\n      // where to stop which is always at the root route in SPA mode\n      lazy: isSpaMode ? () => spaModeLazyPromise : void 0,\n      // For partial hydration rendering, we need to indicate when the route\n      // has a loader/clientLoader, but it won't ever be called during the static\n      // render, so just give it a no-op function so we can render down to the\n      // proper fallback\n      loader: route.hasLoader || route.hasClientLoader ? () => null : void 0\n      // We don't need action/shouldRevalidate on these routes since they're\n      // for a static render\n    };\n    let children = createServerRoutes(\n      manifest,\n      routeModules,\n      future,\n      isSpaMode,\n      route.id,\n      routesByParentId,\n      spaModeLazyPromise\n    );\n    if (children.length > 0) dataRoute.children = children;\n    return dataRoute;\n  });\n}\nfunction createClientRoutesWithHMRRevalidationOptOut(needsRevalidation, manifest, routeModulesCache, initialState, future, isSpaMode) {\n  return createClientRoutes(\n    manifest,\n    routeModulesCache,\n    initialState,\n    isSpaMode,\n    \"\",\n    groupRoutesByParentId(manifest),\n    needsRevalidation\n  );\n}\nfunction preventInvalidServerHandlerCall(type, route, isSpaMode) {\n  if (isSpaMode) {\n    let fn2 = type === \"action\" ? \"serverAction()\" : \"serverLoader()\";\n    let msg2 = `You cannot call ${fn2} in SPA Mode (routeId: \"${route.id}\")`;\n    console.error(msg2);\n    throw new ErrorResponseImpl(400, \"Bad Request\", new Error(msg2), true);\n  }\n  let fn = type === \"action\" ? \"serverAction()\" : \"serverLoader()\";\n  let msg = `You are trying to call ${fn} on a route that does not have a server ${type} (routeId: \"${route.id}\")`;\n  if (type === \"loader\" && !route.hasLoader || type === \"action\" && !route.hasAction) {\n    console.error(msg);\n    throw new ErrorResponseImpl(400, \"Bad Request\", new Error(msg), true);\n  }\n}\nfunction noActionDefinedError(type, routeId) {\n  let article = type === \"clientAction\" ? \"a\" : \"an\";\n  let msg = `Route \"${routeId}\" does not have ${article} ${type}, but you are trying to submit to it. To fix this, please add ${article} \\`${type}\\` function to the route`;\n  console.error(msg);\n  throw new ErrorResponseImpl(405, \"Method Not Allowed\", new Error(msg), true);\n}\nfunction createClientRoutes(manifest, routeModulesCache, initialState, isSpaMode, parentId = \"\", routesByParentId = groupRoutesByParentId(manifest), needsRevalidation) {\n  return (routesByParentId[parentId] || []).map((route) => {\n    let routeModule = routeModulesCache[route.id];\n    function fetchServerHandler(singleFetch) {\n      invariant2(\n        typeof singleFetch === \"function\",\n        \"No single fetch function available for route handler\"\n      );\n      return singleFetch();\n    }\n    function fetchServerLoader(singleFetch) {\n      if (!route.hasLoader) return Promise.resolve(null);\n      return fetchServerHandler(singleFetch);\n    }\n    function fetchServerAction(singleFetch) {\n      if (!route.hasAction) {\n        throw noActionDefinedError(\"action\", route.id);\n      }\n      return fetchServerHandler(singleFetch);\n    }\n    async function prefetchStylesAndCallHandler(handler) {\n      let cachedModule = routeModulesCache[route.id];\n      let linkPrefetchPromise = cachedModule ? prefetchStyleLinks(route, cachedModule) : Promise.resolve();\n      try {\n        return handler();\n      } finally {\n        await linkPrefetchPromise;\n      }\n    }\n    let dataRoute = {\n      id: route.id,\n      index: route.index,\n      path: route.path\n    };\n    if (routeModule) {\n      Object.assign(dataRoute, {\n        ...dataRoute,\n        ...getRouteComponents(route, routeModule, isSpaMode),\n        handle: routeModule.handle,\n        shouldRevalidate: getShouldRevalidateFunction(\n          routeModule,\n          route.id,\n          needsRevalidation\n        )\n      });\n      let hasInitialData = initialState && initialState.loaderData && route.id in initialState.loaderData;\n      let initialData = hasInitialData ? initialState?.loaderData?.[route.id] : void 0;\n      let hasInitialError = initialState && initialState.errors && route.id in initialState.errors;\n      let initialError = hasInitialError ? initialState?.errors?.[route.id] : void 0;\n      let isHydrationRequest = needsRevalidation == null && (routeModule.clientLoader?.hydrate === true || !route.hasLoader);\n      dataRoute.loader = async ({ request, params }, singleFetch) => {\n        try {\n          let result = await prefetchStylesAndCallHandler(async () => {\n            invariant2(\n              routeModule,\n              \"No `routeModule` available for critical-route loader\"\n            );\n            if (!routeModule.clientLoader) {\n              if (isSpaMode) return null;\n              return fetchServerLoader(singleFetch);\n            }\n            return routeModule.clientLoader({\n              request,\n              params,\n              async serverLoader() {\n                preventInvalidServerHandlerCall(\"loader\", route, isSpaMode);\n                if (isHydrationRequest) {\n                  if (hasInitialData) {\n                    return initialData;\n                  }\n                  if (hasInitialError) {\n                    throw initialError;\n                  }\n                }\n                return fetchServerLoader(singleFetch);\n              }\n            });\n          });\n          return result;\n        } finally {\n          isHydrationRequest = false;\n        }\n      };\n      dataRoute.loader.hydrate = shouldHydrateRouteLoader(\n        route,\n        routeModule,\n        isSpaMode\n      );\n      dataRoute.action = ({ request, params }, singleFetch) => {\n        return prefetchStylesAndCallHandler(async () => {\n          invariant2(\n            routeModule,\n            \"No `routeModule` available for critical-route action\"\n          );\n          if (!routeModule.clientAction) {\n            if (isSpaMode) {\n              throw noActionDefinedError(\"clientAction\", route.id);\n            }\n            return fetchServerAction(singleFetch);\n          }\n          return routeModule.clientAction({\n            request,\n            params,\n            async serverAction() {\n              preventInvalidServerHandlerCall(\"action\", route, isSpaMode);\n              return fetchServerAction(singleFetch);\n            }\n          });\n        });\n      };\n    } else {\n      if (!route.hasClientLoader) {\n        dataRoute.loader = ({ request }, singleFetch) => prefetchStylesAndCallHandler(() => {\n          if (isSpaMode) return Promise.resolve(null);\n          return fetchServerLoader(singleFetch);\n        });\n      }\n      if (!route.hasClientAction) {\n        dataRoute.action = ({ request }, singleFetch) => prefetchStylesAndCallHandler(() => {\n          if (isSpaMode) {\n            throw noActionDefinedError(\"clientAction\", route.id);\n          }\n          return fetchServerAction(singleFetch);\n        });\n      }\n      dataRoute.lazy = async () => {\n        let mod = await loadRouteModuleWithBlockingLinks(\n          route,\n          routeModulesCache\n        );\n        let lazyRoute = { ...mod };\n        if (mod.clientLoader) {\n          let clientLoader = mod.clientLoader;\n          lazyRoute.loader = (args, singleFetch) => clientLoader({\n            ...args,\n            async serverLoader() {\n              preventInvalidServerHandlerCall(\"loader\", route, isSpaMode);\n              return fetchServerLoader(singleFetch);\n            }\n          });\n        }\n        if (mod.clientAction) {\n          let clientAction = mod.clientAction;\n          lazyRoute.action = (args, singleFetch) => clientAction({\n            ...args,\n            async serverAction() {\n              preventInvalidServerHandlerCall(\"action\", route, isSpaMode);\n              return fetchServerAction(singleFetch);\n            }\n          });\n        }\n        return {\n          ...lazyRoute.loader ? { loader: lazyRoute.loader } : {},\n          ...lazyRoute.action ? { action: lazyRoute.action } : {},\n          hasErrorBoundary: lazyRoute.hasErrorBoundary,\n          shouldRevalidate: getShouldRevalidateFunction(\n            lazyRoute,\n            route.id,\n            needsRevalidation\n          ),\n          handle: lazyRoute.handle,\n          // No need to wrap these in layout since the root route is never\n          // loaded via route.lazy()\n          Component: lazyRoute.Component,\n          ErrorBoundary: lazyRoute.ErrorBoundary\n        };\n      };\n    }\n    let children = createClientRoutes(\n      manifest,\n      routeModulesCache,\n      initialState,\n      isSpaMode,\n      route.id,\n      routesByParentId,\n      needsRevalidation\n    );\n    if (children.length > 0) dataRoute.children = children;\n    return dataRoute;\n  });\n}\nfunction getShouldRevalidateFunction(route, routeId, needsRevalidation) {\n  if (needsRevalidation) {\n    return wrapShouldRevalidateForHdr(\n      routeId,\n      route.shouldRevalidate,\n      needsRevalidation\n    );\n  }\n  if (route.shouldRevalidate) {\n    let fn = route.shouldRevalidate;\n    return (opts) => fn({ ...opts, defaultShouldRevalidate: true });\n  }\n  return route.shouldRevalidate;\n}\nfunction wrapShouldRevalidateForHdr(routeId, routeShouldRevalidate, needsRevalidation) {\n  let handledRevalidation = false;\n  return (arg) => {\n    if (!handledRevalidation) {\n      handledRevalidation = true;\n      return needsRevalidation.has(routeId);\n    }\n    return routeShouldRevalidate ? routeShouldRevalidate(arg) : arg.defaultShouldRevalidate;\n  };\n}\nasync function loadRouteModuleWithBlockingLinks(route, routeModules) {\n  let routeModule = await loadRouteModule(route, routeModules);\n  await prefetchStyleLinks(route, routeModule);\n  return {\n    Component: getRouteModuleComponent(routeModule),\n    ErrorBoundary: routeModule.ErrorBoundary,\n    clientAction: routeModule.clientAction,\n    clientLoader: routeModule.clientLoader,\n    handle: routeModule.handle,\n    links: routeModule.links,\n    meta: routeModule.meta,\n    shouldRevalidate: routeModule.shouldRevalidate\n  };\n}\nfunction getRouteModuleComponent(routeModule) {\n  if (routeModule.default == null) return void 0;\n  let isEmptyObject = typeof routeModule.default === \"object\" && Object.keys(routeModule.default).length === 0;\n  if (!isEmptyObject) {\n    return routeModule.default;\n  }\n}\nfunction shouldHydrateRouteLoader(route, routeModule, isSpaMode) {\n  return isSpaMode && route.id !== \"root\" || routeModule.clientLoader != null && (routeModule.clientLoader.hydrate === true || route.hasLoader !== true);\n}\n\n// lib/dom/ssr/fog-of-war.ts\nvar nextPaths = /* @__PURE__ */ new Set();\nvar discoveredPathsMaxSize = 1e3;\nvar discoveredPaths = /* @__PURE__ */ new Set();\nvar URL_LIMIT = 7680;\nfunction isFogOfWarEnabled(isSpaMode) {\n  return !isSpaMode;\n}\nfunction getPartialManifest(manifest, router) {\n  let routeIds = new Set(router.state.matches.map((m) => m.route.id));\n  let segments = router.state.location.pathname.split(\"/\").filter(Boolean);\n  let paths = [\"/\"];\n  segments.pop();\n  while (segments.length > 0) {\n    paths.push(`/${segments.join(\"/\")}`);\n    segments.pop();\n  }\n  paths.forEach((path) => {\n    let matches = matchRoutes(router.routes, path, router.basename);\n    if (matches) {\n      matches.forEach((m) => routeIds.add(m.route.id));\n    }\n  });\n  let initialRoutes = [...routeIds].reduce(\n    (acc, id) => Object.assign(acc, { [id]: manifest.routes[id] }),\n    {}\n  );\n  return {\n    ...manifest,\n    routes: initialRoutes\n  };\n}\nfunction getPatchRoutesOnNavigationFunction(manifest, routeModules, isSpaMode, basename) {\n  if (!isFogOfWarEnabled(isSpaMode)) {\n    return void 0;\n  }\n  return async ({ path, patch }) => {\n    if (discoveredPaths.has(path)) {\n      return;\n    }\n    await fetchAndApplyManifestPatches(\n      [path],\n      manifest,\n      routeModules,\n      isSpaMode,\n      basename,\n      patch\n    );\n  };\n}\nfunction useFogOFWarDiscovery(router, manifest, routeModules, isSpaMode) {\n  React8.useEffect(() => {\n    if (!isFogOfWarEnabled(isSpaMode) || navigator.connection?.saveData === true) {\n      return;\n    }\n    function registerElement(el) {\n      let path = el.tagName === \"FORM\" ? el.getAttribute(\"action\") : el.getAttribute(\"href\");\n      if (!path) {\n        return;\n      }\n      let pathname = el.tagName === \"A\" ? el.pathname : new URL(path, window.location.origin).pathname;\n      if (!discoveredPaths.has(pathname)) {\n        nextPaths.add(pathname);\n      }\n    }\n    async function fetchPatches() {\n      document.querySelectorAll(\"a[data-discover], form[data-discover]\").forEach(registerElement);\n      let lazyPaths = Array.from(nextPaths.keys()).filter((path) => {\n        if (discoveredPaths.has(path)) {\n          nextPaths.delete(path);\n          return false;\n        }\n        return true;\n      });\n      if (lazyPaths.length === 0) {\n        return;\n      }\n      try {\n        await fetchAndApplyManifestPatches(\n          lazyPaths,\n          manifest,\n          routeModules,\n          isSpaMode,\n          router.basename,\n          router.patchRoutes\n        );\n      } catch (e) {\n        console.error(\"Failed to fetch manifest patches\", e);\n      }\n    }\n    let debouncedFetchPatches = debounce(fetchPatches, 100);\n    fetchPatches();\n    let observer = new MutationObserver(() => debouncedFetchPatches());\n    observer.observe(document.documentElement, {\n      subtree: true,\n      childList: true,\n      attributes: true,\n      attributeFilter: [\"data-discover\", \"href\", \"action\"]\n    });\n    return () => observer.disconnect();\n  }, [isSpaMode, manifest, routeModules, router]);\n}\nasync function fetchAndApplyManifestPatches(paths, manifest, routeModules, isSpaMode, basename, patchRoutes) {\n  let manifestPath = `${basename != null ? basename : \"/\"}/__manifest`.replace(\n    /\\/+/g,\n    \"/\"\n  );\n  let url = new URL(manifestPath, window.location.origin);\n  paths.sort().forEach((path) => url.searchParams.append(\"p\", path));\n  url.searchParams.set(\"version\", manifest.version);\n  if (url.toString().length > URL_LIMIT) {\n    nextPaths.clear();\n    return;\n  }\n  let res = await fetch(url);\n  if (!res.ok) {\n    throw new Error(`${res.status} ${res.statusText}`);\n  } else if (res.status >= 400) {\n    throw new Error(await res.text());\n  }\n  let serverPatches = await res.json();\n  let knownRoutes = new Set(Object.keys(manifest.routes));\n  let patches = Object.values(serverPatches).reduce((acc, route) => {\n    if (route && !knownRoutes.has(route.id)) {\n      acc[route.id] = route;\n    }\n    return acc;\n  }, {});\n  Object.assign(manifest.routes, patches);\n  paths.forEach((p) => addToFifoQueue(p, discoveredPaths));\n  let parentIds = /* @__PURE__ */ new Set();\n  Object.values(patches).forEach((patch) => {\n    if (patch && (!patch.parentId || !patches[patch.parentId])) {\n      parentIds.add(patch.parentId);\n    }\n  });\n  parentIds.forEach(\n    (parentId) => patchRoutes(\n      parentId || null,\n      createClientRoutes(patches, routeModules, null, isSpaMode, parentId)\n    )\n  );\n}\nfunction addToFifoQueue(path, queue) {\n  if (queue.size >= discoveredPathsMaxSize) {\n    let first = queue.values().next().value;\n    queue.delete(first);\n  }\n  queue.add(path);\n}\nfunction debounce(callback, wait) {\n  let timeoutId;\n  return (...args) => {\n    window.clearTimeout(timeoutId);\n    timeoutId = window.setTimeout(() => callback(...args), wait);\n  };\n}\n\n// lib/dom/ssr/components.tsx\nfunction useDataRouterContext2() {\n  let context = React9.useContext(DataRouterContext);\n  invariant2(\n    context,\n    \"You must render this element inside a <DataRouterContext.Provider> element\"\n  );\n  return context;\n}\nfunction useDataRouterStateContext() {\n  let context = React9.useContext(DataRouterStateContext);\n  invariant2(\n    context,\n    \"You must render this element inside a <DataRouterStateContext.Provider> element\"\n  );\n  return context;\n}\nvar FrameworkContext = React9.createContext(void 0);\nFrameworkContext.displayName = \"FrameworkContext\";\nfunction useFrameworkContext() {\n  let context = React9.useContext(FrameworkContext);\n  invariant2(\n    context,\n    \"You must render this element inside a <HydratedRouter> element\"\n  );\n  return context;\n}\nfunction usePrefetchBehavior(prefetch, theirElementProps) {\n  let frameworkContext = React9.useContext(FrameworkContext);\n  let [maybePrefetch, setMaybePrefetch] = React9.useState(false);\n  let [shouldPrefetch, setShouldPrefetch] = React9.useState(false);\n  let { onFocus, onBlur, onMouseEnter, onMouseLeave, onTouchStart } = theirElementProps;\n  let ref = React9.useRef(null);\n  React9.useEffect(() => {\n    if (prefetch === \"render\") {\n      setShouldPrefetch(true);\n    }\n    if (prefetch === \"viewport\") {\n      let callback = (entries) => {\n        entries.forEach((entry) => {\n          setShouldPrefetch(entry.isIntersecting);\n        });\n      };\n      let observer = new IntersectionObserver(callback, { threshold: 0.5 });\n      if (ref.current) observer.observe(ref.current);\n      return () => {\n        observer.disconnect();\n      };\n    }\n  }, [prefetch]);\n  React9.useEffect(() => {\n    if (maybePrefetch) {\n      let id = setTimeout(() => {\n        setShouldPrefetch(true);\n      }, 100);\n      return () => {\n        clearTimeout(id);\n      };\n    }\n  }, [maybePrefetch]);\n  let setIntent = () => {\n    setMaybePrefetch(true);\n  };\n  let cancelIntent = () => {\n    setMaybePrefetch(false);\n    setShouldPrefetch(false);\n  };\n  if (!frameworkContext) {\n    return [false, ref, {}];\n  }\n  if (prefetch !== \"intent\") {\n    return [shouldPrefetch, ref, {}];\n  }\n  return [\n    shouldPrefetch,\n    ref,\n    {\n      onFocus: composeEventHandlers(onFocus, setIntent),\n      onBlur: composeEventHandlers(onBlur, cancelIntent),\n      onMouseEnter: composeEventHandlers(onMouseEnter, setIntent),\n      onMouseLeave: composeEventHandlers(onMouseLeave, cancelIntent),\n      onTouchStart: composeEventHandlers(onTouchStart, setIntent)\n    }\n  ];\n}\nfunction composeEventHandlers(theirHandler, ourHandler) {\n  return (event) => {\n    theirHandler && theirHandler(event);\n    if (!event.defaultPrevented) {\n      ourHandler(event);\n    }\n  };\n}\nfunction getActiveMatches(matches, errors, isSpaMode) {\n  if (isSpaMode && !isHydrated) {\n    return [matches[0]];\n  }\n  if (errors) {\n    let errorIdx = matches.findIndex((m) => errors[m.route.id] !== void 0);\n    return matches.slice(0, errorIdx + 1);\n  }\n  return matches;\n}\nfunction Links() {\n  let { isSpaMode, manifest, routeModules, criticalCss } = useFrameworkContext();\n  let { errors, matches: routerMatches } = useDataRouterStateContext();\n  let matches = getActiveMatches(routerMatches, errors, isSpaMode);\n  let keyedLinks = React9.useMemo(\n    () => getKeyedLinksForMatches(matches, routeModules, manifest),\n    [matches, routeModules, manifest]\n  );\n  return /* @__PURE__ */ React9.createElement(React9.Fragment, null, criticalCss ? /* @__PURE__ */ React9.createElement(\"style\", { dangerouslySetInnerHTML: { __html: criticalCss } }) : null, keyedLinks.map(\n    ({ key, link }) => isPageLinkDescriptor(link) ? /* @__PURE__ */ React9.createElement(PrefetchPageLinks, { key, ...link }) : /* @__PURE__ */ React9.createElement(\"link\", { key, ...link })\n  ));\n}\nfunction PrefetchPageLinks({\n  page,\n  ...dataLinkProps\n}) {\n  let { router } = useDataRouterContext2();\n  let matches = React9.useMemo(\n    () => matchRoutes(router.routes, page, router.basename),\n    [router.routes, page, router.basename]\n  );\n  if (!matches) {\n    return null;\n  }\n  return /* @__PURE__ */ React9.createElement(PrefetchPageLinksImpl, { page, matches, ...dataLinkProps });\n}\nfunction useKeyedPrefetchLinks(matches) {\n  let { manifest, routeModules } = useFrameworkContext();\n  let [keyedPrefetchLinks, setKeyedPrefetchLinks] = React9.useState([]);\n  React9.useEffect(() => {\n    let interrupted = false;\n    void getKeyedPrefetchLinks(matches, manifest, routeModules).then(\n      (links) => {\n        if (!interrupted) {\n          setKeyedPrefetchLinks(links);\n        }\n      }\n    );\n    return () => {\n      interrupted = true;\n    };\n  }, [matches, manifest, routeModules]);\n  return keyedPrefetchLinks;\n}\nfunction PrefetchPageLinksImpl({\n  page,\n  matches: nextMatches,\n  ...linkProps\n}) {\n  let location = useLocation();\n  let { manifest, routeModules } = useFrameworkContext();\n  let { loaderData, matches } = useDataRouterStateContext();\n  let newMatchesForData = React9.useMemo(\n    () => getNewMatchesForLinks(\n      page,\n      nextMatches,\n      matches,\n      manifest,\n      location,\n      \"data\"\n    ),\n    [page, nextMatches, matches, manifest, location]\n  );\n  let newMatchesForAssets = React9.useMemo(\n    () => getNewMatchesForLinks(\n      page,\n      nextMatches,\n      matches,\n      manifest,\n      location,\n      \"assets\"\n    ),\n    [page, nextMatches, matches, manifest, location]\n  );\n  let dataHrefs = React9.useMemo(() => {\n    if (page === location.pathname + location.search + location.hash) {\n      return [];\n    }\n    let routesParams = /* @__PURE__ */ new Set();\n    let foundOptOutRoute = false;\n    nextMatches.forEach((m) => {\n      let manifestRoute = manifest.routes[m.route.id];\n      if (!manifestRoute || !manifestRoute.hasLoader) {\n        return;\n      }\n      if (!newMatchesForData.some((m2) => m2.route.id === m.route.id) && m.route.id in loaderData && routeModules[m.route.id]?.shouldRevalidate) {\n        foundOptOutRoute = true;\n      } else if (manifestRoute.hasClientLoader) {\n        foundOptOutRoute = true;\n      } else {\n        routesParams.add(m.route.id);\n      }\n    });\n    if (routesParams.size === 0) {\n      return [];\n    }\n    let url = singleFetchUrl(page);\n    if (foundOptOutRoute && routesParams.size > 0) {\n      url.searchParams.set(\n        \"_routes\",\n        nextMatches.filter((m) => routesParams.has(m.route.id)).map((m) => m.route.id).join(\",\")\n      );\n    }\n    return [url.pathname + url.search];\n  }, [\n    loaderData,\n    location,\n    manifest,\n    newMatchesForData,\n    nextMatches,\n    page,\n    routeModules\n  ]);\n  let moduleHrefs = React9.useMemo(\n    () => getModuleLinkHrefs(newMatchesForAssets, manifest),\n    [newMatchesForAssets, manifest]\n  );\n  let keyedPrefetchLinks = useKeyedPrefetchLinks(newMatchesForAssets);\n  return /* @__PURE__ */ React9.createElement(React9.Fragment, null, dataHrefs.map((href) => /* @__PURE__ */ React9.createElement(\"link\", { key: href, rel: \"prefetch\", as: \"fetch\", href, ...linkProps })), moduleHrefs.map((href) => /* @__PURE__ */ React9.createElement(\"link\", { key: href, rel: \"modulepreload\", href, ...linkProps })), keyedPrefetchLinks.map(({ key, link }) => (\n    // these don't spread `linkProps` because they are full link descriptors\n    // already with their own props\n    /* @__PURE__ */ React9.createElement(\"link\", { key, ...link })\n  )));\n}\nfunction Meta() {\n  let { isSpaMode, routeModules } = useFrameworkContext();\n  let {\n    errors,\n    matches: routerMatches,\n    loaderData\n  } = useDataRouterStateContext();\n  let location = useLocation();\n  let _matches = getActiveMatches(routerMatches, errors, isSpaMode);\n  let error = null;\n  if (errors) {\n    error = errors[_matches[_matches.length - 1].route.id];\n  }\n  let meta = [];\n  let leafMeta = null;\n  let matches = [];\n  for (let i = 0; i < _matches.length; i++) {\n    let _match = _matches[i];\n    let routeId = _match.route.id;\n    let data2 = loaderData[routeId];\n    let params = _match.params;\n    let routeModule = routeModules[routeId];\n    let routeMeta = [];\n    let match = {\n      id: routeId,\n      data: data2,\n      meta: [],\n      params: _match.params,\n      pathname: _match.pathname,\n      handle: _match.route.handle,\n      error\n    };\n    matches[i] = match;\n    if (routeModule?.meta) {\n      routeMeta = typeof routeModule.meta === \"function\" ? routeModule.meta({\n        data: data2,\n        params,\n        location,\n        matches,\n        error\n      }) : Array.isArray(routeModule.meta) ? [...routeModule.meta] : routeModule.meta;\n    } else if (leafMeta) {\n      routeMeta = [...leafMeta];\n    }\n    routeMeta = routeMeta || [];\n    if (!Array.isArray(routeMeta)) {\n      throw new Error(\n        \"The route at \" + _match.route.path + \" returns an invalid value. All route meta functions must return an array of meta objects.\\n\\nTo reference the meta function API, see https://remix.run/route/meta\"\n      );\n    }\n    match.meta = routeMeta;\n    matches[i] = match;\n    meta = [...routeMeta];\n    leafMeta = meta;\n  }\n  return /* @__PURE__ */ React9.createElement(React9.Fragment, null, meta.flat().map((metaProps) => {\n    if (!metaProps) {\n      return null;\n    }\n    if (\"tagName\" in metaProps) {\n      let { tagName, ...rest } = metaProps;\n      if (!isValidMetaTag(tagName)) {\n        console.warn(\n          `A meta object uses an invalid tagName: ${tagName}. Expected either 'link' or 'meta'`\n        );\n        return null;\n      }\n      let Comp = tagName;\n      return /* @__PURE__ */ React9.createElement(Comp, { key: JSON.stringify(rest), ...rest });\n    }\n    if (\"title\" in metaProps) {\n      return /* @__PURE__ */ React9.createElement(\"title\", { key: \"title\" }, String(metaProps.title));\n    }\n    if (\"charset\" in metaProps) {\n      metaProps.charSet ?? (metaProps.charSet = metaProps.charset);\n      delete metaProps.charset;\n    }\n    if (\"charSet\" in metaProps && metaProps.charSet != null) {\n      return typeof metaProps.charSet === \"string\" ? /* @__PURE__ */ React9.createElement(\"meta\", { key: \"charSet\", charSet: metaProps.charSet }) : null;\n    }\n    if (\"script:ld+json\" in metaProps) {\n      try {\n        let json = JSON.stringify(metaProps[\"script:ld+json\"]);\n        return /* @__PURE__ */ React9.createElement(\n          \"script\",\n          {\n            key: `script:ld+json:${json}`,\n            type: \"application/ld+json\",\n            dangerouslySetInnerHTML: { __html: json }\n          }\n        );\n      } catch (err) {\n        return null;\n      }\n    }\n    return /* @__PURE__ */ React9.createElement(\"meta\", { key: JSON.stringify(metaProps), ...metaProps });\n  }));\n}\nfunction isValidMetaTag(tagName) {\n  return typeof tagName === \"string\" && /^(meta|link)$/.test(tagName);\n}\nvar isHydrated = false;\nfunction Scripts(props) {\n  let { manifest, serverHandoffString, isSpaMode, renderMeta } = useFrameworkContext();\n  let { router, static: isStatic, staticContext } = useDataRouterContext2();\n  let { matches: routerMatches } = useDataRouterStateContext();\n  let enableFogOfWar = isFogOfWarEnabled(isSpaMode);\n  if (renderMeta) {\n    renderMeta.didRenderScripts = true;\n  }\n  let matches = getActiveMatches(routerMatches, null, isSpaMode);\n  React9.useEffect(() => {\n    isHydrated = true;\n  }, []);\n  let initialScripts = React9.useMemo(() => {\n    let streamScript = \"window.__reactRouterContext.stream = new ReadableStream({start(controller){window.__reactRouterContext.streamController = controller;}}).pipeThrough(new TextEncoderStream());\";\n    let contextScript = staticContext ? `window.__reactRouterContext = ${serverHandoffString};${streamScript}` : \" \";\n    let routeModulesScript = !isStatic ? \" \" : `${manifest.hmr?.runtime ? `import ${JSON.stringify(manifest.hmr.runtime)};` : \"\"}${!enableFogOfWar ? `import ${JSON.stringify(manifest.url)}` : \"\"};\n${matches.map(\n      (match, index) => `import * as route${index} from ${JSON.stringify(\n        manifest.routes[match.route.id].module\n      )};`\n    ).join(\"\\n\")}\n  ${enableFogOfWar ? (\n      // Inline a minimal manifest with the SSR matches\n      `window.__reactRouterManifest = ${JSON.stringify(\n        getPartialManifest(manifest, router),\n        null,\n        2\n      )};`\n    ) : \"\"}\n  window.__reactRouterRouteModules = {${matches.map((match, index) => `${JSON.stringify(match.route.id)}:route${index}`).join(\",\")}};\n\nimport(${JSON.stringify(manifest.entry.module)});`;\n    return /* @__PURE__ */ React9.createElement(React9.Fragment, null, /* @__PURE__ */ React9.createElement(\n      \"script\",\n      {\n        ...props,\n        suppressHydrationWarning: true,\n        dangerouslySetInnerHTML: createHtml(contextScript),\n        type: void 0\n      }\n    ), /* @__PURE__ */ React9.createElement(\n      \"script\",\n      {\n        ...props,\n        suppressHydrationWarning: true,\n        dangerouslySetInnerHTML: createHtml(routeModulesScript),\n        type: \"module\",\n        async: true\n      }\n    ));\n  }, []);\n  let routePreloads = matches.map((match) => {\n    let route = manifest.routes[match.route.id];\n    return route ? (route.imports || []).concat([route.module]) : [];\n  }).flat(1);\n  let preloads = isHydrated ? [] : manifest.entry.imports.concat(routePreloads);\n  return isHydrated ? null : /* @__PURE__ */ React9.createElement(React9.Fragment, null, !enableFogOfWar ? /* @__PURE__ */ React9.createElement(\n    \"link\",\n    {\n      rel: \"modulepreload\",\n      href: manifest.url,\n      crossOrigin: props.crossOrigin\n    }\n  ) : null, /* @__PURE__ */ React9.createElement(\n    \"link\",\n    {\n      rel: \"modulepreload\",\n      href: manifest.entry.module,\n      crossOrigin: props.crossOrigin\n    }\n  ), dedupe(preloads).map((path) => /* @__PURE__ */ React9.createElement(\n    \"link\",\n    {\n      key: path,\n      rel: \"modulepreload\",\n      href: path,\n      crossOrigin: props.crossOrigin\n    }\n  )), initialScripts);\n}\nfunction dedupe(array) {\n  return [...new Set(array)];\n}\nfunction mergeRefs(...refs) {\n  return (value) => {\n    refs.forEach((ref) => {\n      if (typeof ref === \"function\") {\n        ref(value);\n      } else if (ref != null) {\n        ref.current = value;\n      }\n    });\n  };\n}\n\n// lib/dom/lib.tsx\nvar isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\";\ntry {\n  if (isBrowser) {\n    window.__reactRouterVersion = \"7.1.5\";\n  }\n} catch (e) {\n}\nfunction createBrowserRouter(routes, opts) {\n  return createRouter({\n    basename: opts?.basename,\n    future: opts?.future,\n    history: createBrowserHistory({ window: opts?.window }),\n    hydrationData: opts?.hydrationData || parseHydrationData(),\n    routes,\n    mapRouteProperties,\n    dataStrategy: opts?.dataStrategy,\n    patchRoutesOnNavigation: opts?.patchRoutesOnNavigation,\n    window: opts?.window\n  }).initialize();\n}\nfunction createHashRouter(routes, opts) {\n  return createRouter({\n    basename: opts?.basename,\n    future: opts?.future,\n    history: createHashHistory({ window: opts?.window }),\n    hydrationData: opts?.hydrationData || parseHydrationData(),\n    routes,\n    mapRouteProperties,\n    dataStrategy: opts?.dataStrategy,\n    patchRoutesOnNavigation: opts?.patchRoutesOnNavigation,\n    window: opts?.window\n  }).initialize();\n}\nfunction parseHydrationData() {\n  let state = window?.__staticRouterHydrationData;\n  if (state && state.errors) {\n    state = {\n      ...state,\n      errors: deserializeErrors(state.errors)\n    };\n  }\n  return state;\n}\nfunction deserializeErrors(errors) {\n  if (!errors) return null;\n  let entries = Object.entries(errors);\n  let serialized = {};\n  for (let [key, val] of entries) {\n    if (val && val.__type === \"RouteErrorResponse\") {\n      serialized[key] = new ErrorResponseImpl(\n        val.status,\n        val.statusText,\n        val.data,\n        val.internal === true\n      );\n    } else if (val && val.__type === \"Error\") {\n      if (val.__subType) {\n        let ErrorConstructor = window[val.__subType];\n        if (typeof ErrorConstructor === \"function\") {\n          try {\n            let error = new ErrorConstructor(val.message);\n            error.stack = \"\";\n            serialized[key] = error;\n          } catch (e) {\n          }\n        }\n      }\n      if (serialized[key] == null) {\n        let error = new Error(val.message);\n        error.stack = \"\";\n        serialized[key] = error;\n      }\n    } else {\n      serialized[key] = val;\n    }\n  }\n  return serialized;\n}\nfunction BrowserRouter({\n  basename,\n  children,\n  window: window2\n}) {\n  let historyRef = React10.useRef();\n  if (historyRef.current == null) {\n    historyRef.current = createBrowserHistory({ window: window2, v5Compat: true });\n  }\n  let history = historyRef.current;\n  let [state, setStateImpl] = React10.useState({\n    action: history.action,\n    location: history.location\n  });\n  let setState = React10.useCallback(\n    (newState) => {\n      React10.startTransition(() => setStateImpl(newState));\n    },\n    [setStateImpl]\n  );\n  React10.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  return /* @__PURE__ */ React10.createElement(\n    Router,\n    {\n      basename,\n      children,\n      location: state.location,\n      navigationType: state.action,\n      navigator: history\n    }\n  );\n}\nfunction HashRouter({ basename, children, window: window2 }) {\n  let historyRef = React10.useRef();\n  if (historyRef.current == null) {\n    historyRef.current = createHashHistory({ window: window2, v5Compat: true });\n  }\n  let history = historyRef.current;\n  let [state, setStateImpl] = React10.useState({\n    action: history.action,\n    location: history.location\n  });\n  let setState = React10.useCallback(\n    (newState) => {\n      React10.startTransition(() => setStateImpl(newState));\n    },\n    [setStateImpl]\n  );\n  React10.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  return /* @__PURE__ */ React10.createElement(\n    Router,\n    {\n      basename,\n      children,\n      location: state.location,\n      navigationType: state.action,\n      navigator: history\n    }\n  );\n}\nfunction HistoryRouter({\n  basename,\n  children,\n  history\n}) {\n  let [state, setStateImpl] = React10.useState({\n    action: history.action,\n    location: history.location\n  });\n  let setState = React10.useCallback(\n    (newState) => {\n      React10.startTransition(() => setStateImpl(newState));\n    },\n    [setStateImpl]\n  );\n  React10.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  return /* @__PURE__ */ React10.createElement(\n    Router,\n    {\n      basename,\n      children,\n      location: state.location,\n      navigationType: state.action,\n      navigator: history\n    }\n  );\n}\nHistoryRouter.displayName = \"unstable_HistoryRouter\";\nvar ABSOLUTE_URL_REGEX2 = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nvar Link = React10.forwardRef(\n  function LinkWithRef({\n    onClick,\n    discover = \"render\",\n    prefetch = \"none\",\n    relative,\n    reloadDocument,\n    replace: replace2,\n    state,\n    target,\n    to,\n    preventScrollReset,\n    viewTransition,\n    ...rest\n  }, forwardedRef) {\n    let { basename } = React10.useContext(NavigationContext);\n    let isAbsolute = typeof to === \"string\" && ABSOLUTE_URL_REGEX2.test(to);\n    let absoluteHref;\n    let isExternal = false;\n    if (typeof to === \"string\" && isAbsolute) {\n      absoluteHref = to;\n      if (isBrowser) {\n        try {\n          let currentUrl = new URL(window.location.href);\n          let targetUrl = to.startsWith(\"//\") ? new URL(currentUrl.protocol + to) : new URL(to);\n          let path = stripBasename(targetUrl.pathname, basename);\n          if (targetUrl.origin === currentUrl.origin && path != null) {\n            to = path + targetUrl.search + targetUrl.hash;\n          } else {\n            isExternal = true;\n          }\n        } catch (e) {\n          warning(\n            false,\n            `<Link to=\"${to}\"> contains an invalid URL which will probably break when clicked - please update to a valid URL path.`\n          );\n        }\n      }\n    }\n    let href = useHref(to, { relative });\n    let [shouldPrefetch, prefetchRef, prefetchHandlers] = usePrefetchBehavior(\n      prefetch,\n      rest\n    );\n    let internalOnClick = useLinkClickHandler(to, {\n      replace: replace2,\n      state,\n      target,\n      preventScrollReset,\n      relative,\n      viewTransition\n    });\n    function handleClick(event) {\n      if (onClick) onClick(event);\n      if (!event.defaultPrevented) {\n        internalOnClick(event);\n      }\n    }\n    let link = (\n      // eslint-disable-next-line jsx-a11y/anchor-has-content\n      /* @__PURE__ */ React10.createElement(\n        \"a\",\n        {\n          ...rest,\n          ...prefetchHandlers,\n          href: absoluteHref || href,\n          onClick: isExternal || reloadDocument ? onClick : handleClick,\n          ref: mergeRefs(forwardedRef, prefetchRef),\n          target,\n          \"data-discover\": !isAbsolute && discover === \"render\" ? \"true\" : void 0\n        }\n      )\n    );\n    return shouldPrefetch && !isAbsolute ? /* @__PURE__ */ React10.createElement(React10.Fragment, null, link, /* @__PURE__ */ React10.createElement(PrefetchPageLinks, { page: href })) : link;\n  }\n);\nLink.displayName = \"Link\";\nvar NavLink = React10.forwardRef(\n  function NavLinkWithRef({\n    \"aria-current\": ariaCurrentProp = \"page\",\n    caseSensitive = false,\n    className: classNameProp = \"\",\n    end = false,\n    style: styleProp,\n    to,\n    viewTransition,\n    children,\n    ...rest\n  }, ref) {\n    let path = useResolvedPath(to, { relative: rest.relative });\n    let location = useLocation();\n    let routerState = React10.useContext(DataRouterStateContext);\n    let { navigator: navigator2, basename } = React10.useContext(NavigationContext);\n    let isTransitioning = routerState != null && // Conditional usage is OK here because the usage of a data router is static\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useViewTransitionState(path) && viewTransition === true;\n    let toPathname = navigator2.encodeLocation ? navigator2.encodeLocation(path).pathname : path.pathname;\n    let locationPathname = location.pathname;\n    let nextLocationPathname = routerState && routerState.navigation && routerState.navigation.location ? routerState.navigation.location.pathname : null;\n    if (!caseSensitive) {\n      locationPathname = locationPathname.toLowerCase();\n      nextLocationPathname = nextLocationPathname ? nextLocationPathname.toLowerCase() : null;\n      toPathname = toPathname.toLowerCase();\n    }\n    if (nextLocationPathname && basename) {\n      nextLocationPathname = stripBasename(nextLocationPathname, basename) || nextLocationPathname;\n    }\n    const endSlashPosition = toPathname !== \"/\" && toPathname.endsWith(\"/\") ? toPathname.length - 1 : toPathname.length;\n    let isActive = locationPathname === toPathname || !end && locationPathname.startsWith(toPathname) && locationPathname.charAt(endSlashPosition) === \"/\";\n    let isPending = nextLocationPathname != null && (nextLocationPathname === toPathname || !end && nextLocationPathname.startsWith(toPathname) && nextLocationPathname.charAt(toPathname.length) === \"/\");\n    let renderProps = {\n      isActive,\n      isPending,\n      isTransitioning\n    };\n    let ariaCurrent = isActive ? ariaCurrentProp : void 0;\n    let className;\n    if (typeof classNameProp === \"function\") {\n      className = classNameProp(renderProps);\n    } else {\n      className = [\n        classNameProp,\n        isActive ? \"active\" : null,\n        isPending ? \"pending\" : null,\n        isTransitioning ? \"transitioning\" : null\n      ].filter(Boolean).join(\" \");\n    }\n    let style = typeof styleProp === \"function\" ? styleProp(renderProps) : styleProp;\n    return /* @__PURE__ */ React10.createElement(\n      Link,\n      {\n        ...rest,\n        \"aria-current\": ariaCurrent,\n        className,\n        ref,\n        style,\n        to,\n        viewTransition\n      },\n      typeof children === \"function\" ? children(renderProps) : children\n    );\n  }\n);\nNavLink.displayName = \"NavLink\";\nvar Form = React10.forwardRef(\n  ({\n    discover = \"render\",\n    fetcherKey,\n    navigate,\n    reloadDocument,\n    replace: replace2,\n    state,\n    method = defaultMethod,\n    action,\n    onSubmit,\n    relative,\n    preventScrollReset,\n    viewTransition,\n    ...props\n  }, forwardedRef) => {\n    let submit = useSubmit();\n    let formAction = useFormAction(action, { relative });\n    let formMethod = method.toLowerCase() === \"get\" ? \"get\" : \"post\";\n    let isAbsolute = typeof action === \"string\" && ABSOLUTE_URL_REGEX2.test(action);\n    let submitHandler = (event) => {\n      onSubmit && onSubmit(event);\n      if (event.defaultPrevented) return;\n      event.preventDefault();\n      let submitter = event.nativeEvent.submitter;\n      let submitMethod = submitter?.getAttribute(\"formmethod\") || method;\n      submit(submitter || event.currentTarget, {\n        fetcherKey,\n        method: submitMethod,\n        navigate,\n        replace: replace2,\n        state,\n        relative,\n        preventScrollReset,\n        viewTransition\n      });\n    };\n    return /* @__PURE__ */ React10.createElement(\n      \"form\",\n      {\n        ref: forwardedRef,\n        method: formMethod,\n        action: formAction,\n        onSubmit: reloadDocument ? onSubmit : submitHandler,\n        ...props,\n        \"data-discover\": !isAbsolute && discover === \"render\" ? \"true\" : void 0\n      }\n    );\n  }\n);\nForm.displayName = \"Form\";\nfunction ScrollRestoration({\n  getKey,\n  storageKey,\n  ...props\n}) {\n  let remixContext = React10.useContext(FrameworkContext);\n  let { basename } = React10.useContext(NavigationContext);\n  let location = useLocation();\n  let matches = useMatches();\n  useScrollRestoration({ getKey, storageKey });\n  let ssrKey = React10.useMemo(\n    () => {\n      if (!remixContext || !getKey) return null;\n      let userKey = getScrollRestorationKey(\n        location,\n        matches,\n        basename,\n        getKey\n      );\n      return userKey !== location.key ? userKey : null;\n    },\n    // Nah, we only need this the first time for the SSR render\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n  if (!remixContext || remixContext.isSpaMode) {\n    return null;\n  }\n  let restoreScroll = ((storageKey2, restoreKey) => {\n    if (!window.history.state || !window.history.state.key) {\n      let key = Math.random().toString(32).slice(2);\n      window.history.replaceState({ key }, \"\");\n    }\n    try {\n      let positions = JSON.parse(sessionStorage.getItem(storageKey2) || \"{}\");\n      let storedY = positions[restoreKey || window.history.state.key];\n      if (typeof storedY === \"number\") {\n        window.scrollTo(0, storedY);\n      }\n    } catch (error) {\n      console.error(error);\n      sessionStorage.removeItem(storageKey2);\n    }\n  }).toString();\n  return /* @__PURE__ */ React10.createElement(\n    \"script\",\n    {\n      ...props,\n      suppressHydrationWarning: true,\n      dangerouslySetInnerHTML: {\n        __html: `(${restoreScroll})(${JSON.stringify(\n          storageKey || SCROLL_RESTORATION_STORAGE_KEY\n        )}, ${JSON.stringify(ssrKey)})`\n      }\n    }\n  );\n}\nScrollRestoration.displayName = \"ScrollRestoration\";\nfunction getDataRouterConsoleError2(hookName) {\n  return `${hookName} must be used within a data router.  See https://reactrouter.com/en/main/routers/picking-a-router.`;\n}\nfunction useDataRouterContext3(hookName) {\n  let ctx = React10.useContext(DataRouterContext);\n  invariant(ctx, getDataRouterConsoleError2(hookName));\n  return ctx;\n}\nfunction useDataRouterState2(hookName) {\n  let state = React10.useContext(DataRouterStateContext);\n  invariant(state, getDataRouterConsoleError2(hookName));\n  return state;\n}\nfunction useLinkClickHandler(to, {\n  target,\n  replace: replaceProp,\n  state,\n  preventScrollReset,\n  relative,\n  viewTransition\n} = {}) {\n  let navigate = useNavigate();\n  let location = useLocation();\n  let path = useResolvedPath(to, { relative });\n  return React10.useCallback(\n    (event) => {\n      if (shouldProcessLinkClick(event, target)) {\n        event.preventDefault();\n        let replace2 = replaceProp !== void 0 ? replaceProp : createPath(location) === createPath(path);\n        navigate(to, {\n          replace: replace2,\n          state,\n          preventScrollReset,\n          relative,\n          viewTransition\n        });\n      }\n    },\n    [\n      location,\n      navigate,\n      path,\n      replaceProp,\n      state,\n      target,\n      to,\n      preventScrollReset,\n      relative,\n      viewTransition\n    ]\n  );\n}\nfunction useSearchParams(defaultInit) {\n  warning(\n    typeof URLSearchParams !== \"undefined\",\n    `You cannot use the \\`useSearchParams\\` hook in a browser that does not support the URLSearchParams API. If you need to support Internet Explorer 11, we recommend you load a polyfill such as https://github.com/ungap/url-search-params.`\n  );\n  let defaultSearchParamsRef = React10.useRef(createSearchParams(defaultInit));\n  let hasSetSearchParamsRef = React10.useRef(false);\n  let location = useLocation();\n  let searchParams = React10.useMemo(\n    () => (\n      // Only merge in the defaults if we haven't yet called setSearchParams.\n      // Once we call that we want those to take precedence, otherwise you can't\n      // remove a param with setSearchParams({}) if it has an initial value\n      getSearchParamsForLocation(\n        location.search,\n        hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current\n      )\n    ),\n    [location.search]\n  );\n  let navigate = useNavigate();\n  let setSearchParams = React10.useCallback(\n    (nextInit, navigateOptions) => {\n      const newSearchParams = createSearchParams(\n        typeof nextInit === \"function\" ? nextInit(searchParams) : nextInit\n      );\n      hasSetSearchParamsRef.current = true;\n      navigate(\"?\" + newSearchParams, navigateOptions);\n    },\n    [navigate, searchParams]\n  );\n  return [searchParams, setSearchParams];\n}\nvar fetcherId = 0;\nvar getUniqueFetcherId = () => `__${String(++fetcherId)}__`;\nfunction useSubmit() {\n  let { router } = useDataRouterContext3(\"useSubmit\" /* UseSubmit */);\n  let { basename } = React10.useContext(NavigationContext);\n  let currentRouteId = useRouteId();\n  return React10.useCallback(\n    async (target, options = {}) => {\n      let { action, method, encType, formData, body } = getFormSubmissionInfo(\n        target,\n        basename\n      );\n      if (options.navigate === false) {\n        let key = options.fetcherKey || getUniqueFetcherId();\n        await router.fetch(key, currentRouteId, options.action || action, {\n          preventScrollReset: options.preventScrollReset,\n          formData,\n          body,\n          formMethod: options.method || method,\n          formEncType: options.encType || encType,\n          flushSync: options.flushSync\n        });\n      } else {\n        await router.navigate(options.action || action, {\n          preventScrollReset: options.preventScrollReset,\n          formData,\n          body,\n          formMethod: options.method || method,\n          formEncType: options.encType || encType,\n          replace: options.replace,\n          state: options.state,\n          fromRouteId: currentRouteId,\n          flushSync: options.flushSync,\n          viewTransition: options.viewTransition\n        });\n      }\n    },\n    [router, basename, currentRouteId]\n  );\n}\nfunction useFormAction(action, { relative } = {}) {\n  let { basename } = React10.useContext(NavigationContext);\n  let routeContext = React10.useContext(RouteContext);\n  invariant(routeContext, \"useFormAction must be used inside a RouteContext\");\n  let [match] = routeContext.matches.slice(-1);\n  let path = { ...useResolvedPath(action ? action : \".\", { relative }) };\n  let location = useLocation();\n  if (action == null) {\n    path.search = location.search;\n    let params = new URLSearchParams(path.search);\n    let indexValues = params.getAll(\"index\");\n    let hasNakedIndexParam = indexValues.some((v) => v === \"\");\n    if (hasNakedIndexParam) {\n      params.delete(\"index\");\n      indexValues.filter((v) => v).forEach((v) => params.append(\"index\", v));\n      let qs = params.toString();\n      path.search = qs ? `?${qs}` : \"\";\n    }\n  }\n  if ((!action || action === \".\") && match.route.index) {\n    path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n  }\n  if (basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n  return createPath(path);\n}\nfunction useFetcher({\n  key\n} = {}) {\n  let { router } = useDataRouterContext3(\"useFetcher\" /* UseFetcher */);\n  let state = useDataRouterState2(\"useFetcher\" /* UseFetcher */);\n  let fetcherData = React10.useContext(FetchersContext);\n  let route = React10.useContext(RouteContext);\n  let routeId = route.matches[route.matches.length - 1]?.route.id;\n  invariant(fetcherData, `useFetcher must be used inside a FetchersContext`);\n  invariant(route, `useFetcher must be used inside a RouteContext`);\n  invariant(\n    routeId != null,\n    `useFetcher can only be used on routes that contain a unique \"id\"`\n  );\n  let defaultKey = React10.useId();\n  let [fetcherKey, setFetcherKey] = React10.useState(key || defaultKey);\n  if (key && key !== fetcherKey) {\n    setFetcherKey(key);\n  }\n  React10.useEffect(() => {\n    router.getFetcher(fetcherKey);\n    return () => router.deleteFetcher(fetcherKey);\n  }, [router, fetcherKey]);\n  let load = React10.useCallback(\n    async (href, opts) => {\n      invariant(routeId, \"No routeId available for fetcher.load()\");\n      await router.fetch(fetcherKey, routeId, href, opts);\n    },\n    [fetcherKey, routeId, router]\n  );\n  let submitImpl = useSubmit();\n  let submit = React10.useCallback(\n    async (target, opts) => {\n      await submitImpl(target, {\n        ...opts,\n        navigate: false,\n        fetcherKey\n      });\n    },\n    [fetcherKey, submitImpl]\n  );\n  let FetcherForm = React10.useMemo(() => {\n    let FetcherForm2 = React10.forwardRef(\n      (props, ref) => {\n        return /* @__PURE__ */ React10.createElement(Form, { ...props, navigate: false, fetcherKey, ref });\n      }\n    );\n    FetcherForm2.displayName = \"fetcher.Form\";\n    return FetcherForm2;\n  }, [fetcherKey]);\n  let fetcher = state.fetchers.get(fetcherKey) || IDLE_FETCHER;\n  let data2 = fetcherData.get(fetcherKey);\n  let fetcherWithComponents = React10.useMemo(\n    () => ({\n      Form: FetcherForm,\n      submit,\n      load,\n      ...fetcher,\n      data: data2\n    }),\n    [FetcherForm, submit, load, fetcher, data2]\n  );\n  return fetcherWithComponents;\n}\nfunction useFetchers() {\n  let state = useDataRouterState2(\"useFetchers\" /* UseFetchers */);\n  return Array.from(state.fetchers.entries()).map(([key, fetcher]) => ({\n    ...fetcher,\n    key\n  }));\n}\nvar SCROLL_RESTORATION_STORAGE_KEY = \"react-router-scroll-positions\";\nvar savedScrollPositions = {};\nfunction getScrollRestorationKey(location, matches, basename, getKey) {\n  let key = null;\n  if (getKey) {\n    if (basename !== \"/\") {\n      key = getKey(\n        {\n          ...location,\n          pathname: stripBasename(location.pathname, basename) || location.pathname\n        },\n        matches\n      );\n    } else {\n      key = getKey(location, matches);\n    }\n  }\n  if (key == null) {\n    key = location.key;\n  }\n  return key;\n}\nfunction useScrollRestoration({\n  getKey,\n  storageKey\n} = {}) {\n  let { router } = useDataRouterContext3(\"useScrollRestoration\" /* UseScrollRestoration */);\n  let { restoreScrollPosition, preventScrollReset } = useDataRouterState2(\n    \"useScrollRestoration\" /* UseScrollRestoration */\n  );\n  let { basename } = React10.useContext(NavigationContext);\n  let location = useLocation();\n  let matches = useMatches();\n  let navigation = useNavigation();\n  React10.useEffect(() => {\n    window.history.scrollRestoration = \"manual\";\n    return () => {\n      window.history.scrollRestoration = \"auto\";\n    };\n  }, []);\n  usePageHide(\n    React10.useCallback(() => {\n      if (navigation.state === \"idle\") {\n        let key = getScrollRestorationKey(location, matches, basename, getKey);\n        savedScrollPositions[key] = window.scrollY;\n      }\n      try {\n        sessionStorage.setItem(\n          storageKey || SCROLL_RESTORATION_STORAGE_KEY,\n          JSON.stringify(savedScrollPositions)\n        );\n      } catch (error) {\n        warning(\n          false,\n          `Failed to save scroll positions in sessionStorage, <ScrollRestoration /> will not work properly (${error}).`\n        );\n      }\n      window.history.scrollRestoration = \"auto\";\n    }, [navigation.state, getKey, basename, location, matches, storageKey])\n  );\n  if (typeof document !== \"undefined\") {\n    React10.useLayoutEffect(() => {\n      try {\n        let sessionPositions = sessionStorage.getItem(\n          storageKey || SCROLL_RESTORATION_STORAGE_KEY\n        );\n        if (sessionPositions) {\n          savedScrollPositions = JSON.parse(sessionPositions);\n        }\n      } catch (e) {\n      }\n    }, [storageKey]);\n    React10.useLayoutEffect(() => {\n      let disableScrollRestoration = router?.enableScrollRestoration(\n        savedScrollPositions,\n        () => window.scrollY,\n        getKey ? (location2, matches2) => getScrollRestorationKey(location2, matches2, basename, getKey) : void 0\n      );\n      return () => disableScrollRestoration && disableScrollRestoration();\n    }, [router, basename, getKey]);\n    React10.useLayoutEffect(() => {\n      if (restoreScrollPosition === false) {\n        return;\n      }\n      if (typeof restoreScrollPosition === \"number\") {\n        window.scrollTo(0, restoreScrollPosition);\n        return;\n      }\n      if (location.hash) {\n        let el = document.getElementById(\n          decodeURIComponent(location.hash.slice(1))\n        );\n        if (el) {\n          el.scrollIntoView();\n          return;\n        }\n      }\n      if (preventScrollReset === true) {\n        return;\n      }\n      window.scrollTo(0, 0);\n    }, [location, restoreScrollPosition, preventScrollReset]);\n  }\n}\nfunction useBeforeUnload(callback, options) {\n  let { capture } = options || {};\n  React10.useEffect(() => {\n    let opts = capture != null ? { capture } : void 0;\n    window.addEventListener(\"beforeunload\", callback, opts);\n    return () => {\n      window.removeEventListener(\"beforeunload\", callback, opts);\n    };\n  }, [callback, capture]);\n}\nfunction usePageHide(callback, options) {\n  let { capture } = options || {};\n  React10.useEffect(() => {\n    let opts = capture != null ? { capture } : void 0;\n    window.addEventListener(\"pagehide\", callback, opts);\n    return () => {\n      window.removeEventListener(\"pagehide\", callback, opts);\n    };\n  }, [callback, capture]);\n}\nfunction usePrompt({\n  when,\n  message\n}) {\n  let blocker = useBlocker(when);\n  React10.useEffect(() => {\n    if (blocker.state === \"blocked\") {\n      let proceed = window.confirm(message);\n      if (proceed) {\n        setTimeout(blocker.proceed, 0);\n      } else {\n        blocker.reset();\n      }\n    }\n  }, [blocker, message]);\n  React10.useEffect(() => {\n    if (blocker.state === \"blocked\" && !when) {\n      blocker.reset();\n    }\n  }, [blocker, when]);\n}\nfunction useViewTransitionState(to, opts = {}) {\n  let vtContext = React10.useContext(ViewTransitionContext);\n  invariant(\n    vtContext != null,\n    \"`useViewTransitionState` must be used within `react-router-dom`'s `RouterProvider`.  Did you accidentally import `RouterProvider` from `react-router`?\"\n  );\n  let { basename } = useDataRouterContext3(\n    \"useViewTransitionState\" /* useViewTransitionState */\n  );\n  let path = useResolvedPath(to, { relative: opts.relative });\n  if (!vtContext.isTransitioning) {\n    return false;\n  }\n  let currentPath = stripBasename(vtContext.currentLocation.pathname, basename) || vtContext.currentLocation.pathname;\n  let nextPath = stripBasename(vtContext.nextLocation.pathname, basename) || vtContext.nextLocation.pathname;\n  return matchPath(path.pathname, nextPath) != null || matchPath(path.pathname, currentPath) != null;\n}\n\n// lib/dom/server.tsx\nimport * as React11 from \"react\";\nfunction StaticRouter({\n  basename,\n  children,\n  location: locationProp = \"/\"\n}) {\n  if (typeof locationProp === \"string\") {\n    locationProp = parsePath(locationProp);\n  }\n  let action = \"POP\" /* Pop */;\n  let location = {\n    pathname: locationProp.pathname || \"/\",\n    search: locationProp.search || \"\",\n    hash: locationProp.hash || \"\",\n    state: locationProp.state != null ? locationProp.state : null,\n    key: locationProp.key || \"default\"\n  };\n  let staticNavigator = getStatelessNavigator();\n  return /* @__PURE__ */ React11.createElement(\n    Router,\n    {\n      basename,\n      children,\n      location,\n      navigationType: action,\n      navigator: staticNavigator,\n      static: true\n    }\n  );\n}\nfunction StaticRouterProvider({\n  context,\n  router,\n  hydrate = true,\n  nonce\n}) {\n  invariant(\n    router && context,\n    \"You must provide `router` and `context` to <StaticRouterProvider>\"\n  );\n  let dataRouterContext = {\n    router,\n    navigator: getStatelessNavigator(),\n    static: true,\n    staticContext: context,\n    basename: context.basename || \"/\"\n  };\n  let fetchersContext = /* @__PURE__ */ new Map();\n  let hydrateScript = \"\";\n  if (hydrate !== false) {\n    let data2 = {\n      loaderData: context.loaderData,\n      actionData: context.actionData,\n      errors: serializeErrors(context.errors)\n    };\n    let json = htmlEscape(JSON.stringify(JSON.stringify(data2)));\n    hydrateScript = `window.__staticRouterHydrationData = JSON.parse(${json});`;\n  }\n  let { state } = dataRouterContext.router;\n  return /* @__PURE__ */ React11.createElement(React11.Fragment, null, /* @__PURE__ */ React11.createElement(DataRouterContext.Provider, { value: dataRouterContext }, /* @__PURE__ */ React11.createElement(DataRouterStateContext.Provider, { value: state }, /* @__PURE__ */ React11.createElement(FetchersContext.Provider, { value: fetchersContext }, /* @__PURE__ */ React11.createElement(ViewTransitionContext.Provider, { value: { isTransitioning: false } }, /* @__PURE__ */ React11.createElement(\n    Router,\n    {\n      basename: dataRouterContext.basename,\n      location: state.location,\n      navigationType: state.historyAction,\n      navigator: dataRouterContext.navigator,\n      static: dataRouterContext.static\n    },\n    /* @__PURE__ */ React11.createElement(\n      DataRoutes2,\n      {\n        routes: router.routes,\n        future: router.future,\n        state\n      }\n    )\n  ))))), hydrateScript ? /* @__PURE__ */ React11.createElement(\n    \"script\",\n    {\n      suppressHydrationWarning: true,\n      nonce,\n      dangerouslySetInnerHTML: { __html: hydrateScript }\n    }\n  ) : null);\n}\nfunction DataRoutes2({\n  routes,\n  future,\n  state\n}) {\n  return useRoutesImpl(routes, void 0, state, future);\n}\nfunction serializeErrors(errors) {\n  if (!errors) return null;\n  let entries = Object.entries(errors);\n  let serialized = {};\n  for (let [key, val] of entries) {\n    if (isRouteErrorResponse(val)) {\n      serialized[key] = { ...val, __type: \"RouteErrorResponse\" };\n    } else if (val instanceof Error) {\n      serialized[key] = {\n        message: val.message,\n        __type: \"Error\",\n        // If this is a subclass (i.e., ReferenceError), send up the type so we\n        // can re-create the same type during hydration.\n        ...val.name !== \"Error\" ? {\n          __subType: val.name\n        } : {}\n      };\n    } else {\n      serialized[key] = val;\n    }\n  }\n  return serialized;\n}\nfunction getStatelessNavigator() {\n  return {\n    createHref,\n    encodeLocation,\n    push(to) {\n      throw new Error(\n        `You cannot use navigator.push() on the server because it is a stateless environment. This error was probably triggered when you did a \\`navigate(${JSON.stringify(to)})\\` somewhere in your app.`\n      );\n    },\n    replace(to) {\n      throw new Error(\n        `You cannot use navigator.replace() on the server because it is a stateless environment. This error was probably triggered when you did a \\`navigate(${JSON.stringify(to)}, { replace: true })\\` somewhere in your app.`\n      );\n    },\n    go(delta) {\n      throw new Error(\n        `You cannot use navigator.go() on the server because it is a stateless environment. This error was probably triggered when you did a \\`navigate(${delta})\\` somewhere in your app.`\n      );\n    },\n    back() {\n      throw new Error(\n        `You cannot use navigator.back() on the server because it is a stateless environment.`\n      );\n    },\n    forward() {\n      throw new Error(\n        `You cannot use navigator.forward() on the server because it is a stateless environment.`\n      );\n    }\n  };\n}\nfunction createStaticHandler2(routes, opts) {\n  return createStaticHandler(routes, {\n    ...opts,\n    mapRouteProperties\n  });\n}\nfunction createStaticRouter(routes, context, opts = {}) {\n  let manifest = {};\n  let dataRoutes = convertRoutesToDataRoutes(\n    routes,\n    mapRouteProperties,\n    void 0,\n    manifest\n  );\n  let matches = context.matches.map((match) => {\n    let route = manifest[match.route.id] || match.route;\n    return {\n      ...match,\n      route\n    };\n  });\n  let msg = (method) => `You cannot use router.${method}() on the server because it is a stateless environment`;\n  return {\n    get basename() {\n      return context.basename;\n    },\n    get future() {\n      return {\n        ...opts?.future\n      };\n    },\n    get state() {\n      return {\n        historyAction: \"POP\" /* Pop */,\n        location: context.location,\n        matches,\n        loaderData: context.loaderData,\n        actionData: context.actionData,\n        errors: context.errors,\n        initialized: true,\n        navigation: IDLE_NAVIGATION,\n        restoreScrollPosition: null,\n        preventScrollReset: false,\n        revalidation: \"idle\",\n        fetchers: /* @__PURE__ */ new Map(),\n        blockers: /* @__PURE__ */ new Map()\n      };\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return void 0;\n    },\n    initialize() {\n      throw msg(\"initialize\");\n    },\n    subscribe() {\n      throw msg(\"subscribe\");\n    },\n    enableScrollRestoration() {\n      throw msg(\"enableScrollRestoration\");\n    },\n    navigate() {\n      throw msg(\"navigate\");\n    },\n    fetch() {\n      throw msg(\"fetch\");\n    },\n    revalidate() {\n      throw msg(\"revalidate\");\n    },\n    createHref,\n    encodeLocation,\n    getFetcher() {\n      return IDLE_FETCHER;\n    },\n    deleteFetcher() {\n      throw msg(\"deleteFetcher\");\n    },\n    dispose() {\n      throw msg(\"dispose\");\n    },\n    getBlocker() {\n      return IDLE_BLOCKER;\n    },\n    deleteBlocker() {\n      throw msg(\"deleteBlocker\");\n    },\n    patchRoutes() {\n      throw msg(\"patchRoutes\");\n    },\n    _internalFetchControllers: /* @__PURE__ */ new Map(),\n    _internalSetRoutes() {\n      throw msg(\"_internalSetRoutes\");\n    }\n  };\n}\nfunction createHref(to) {\n  return typeof to === \"string\" ? to : createPath(to);\n}\nfunction encodeLocation(to) {\n  let href = typeof to === \"string\" ? to : createPath(to);\n  href = href.replace(/ $/, \"%20\");\n  let encoded = ABSOLUTE_URL_REGEX3.test(href) ? new URL(href) : new URL(href, \"http://localhost\");\n  return {\n    pathname: encoded.pathname,\n    search: encoded.search,\n    hash: encoded.hash\n  };\n}\nvar ABSOLUTE_URL_REGEX3 = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nvar ESCAPE_LOOKUP2 = {\n  \"&\": \"\\\\u0026\",\n  \">\": \"\\\\u003e\",\n  \"<\": \"\\\\u003c\",\n  \"\\u2028\": \"\\\\u2028\",\n  \"\\u2029\": \"\\\\u2029\"\n};\nvar ESCAPE_REGEX2 = /[&><\\u2028\\u2029]/g;\nfunction htmlEscape(str) {\n  return str.replace(ESCAPE_REGEX2, (match) => ESCAPE_LOOKUP2[match]);\n}\n\n// lib/dom/ssr/server.tsx\nimport * as React12 from \"react\";\nfunction ServerRouter({\n  context,\n  url,\n  nonce\n}) {\n  if (typeof url === \"string\") {\n    url = new URL(url);\n  }\n  let { manifest, routeModules, criticalCss, serverHandoffString } = context;\n  let routes = createServerRoutes(\n    manifest.routes,\n    routeModules,\n    context.future,\n    context.isSpaMode\n  );\n  context.staticHandlerContext.loaderData = {\n    ...context.staticHandlerContext.loaderData\n  };\n  for (let match of context.staticHandlerContext.matches) {\n    let routeId = match.route.id;\n    let route = routeModules[routeId];\n    let manifestRoute = context.manifest.routes[routeId];\n    if (route && manifestRoute && shouldHydrateRouteLoader(manifestRoute, route, context.isSpaMode) && (route.HydrateFallback || !manifestRoute.hasLoader)) {\n      delete context.staticHandlerContext.loaderData[routeId];\n    }\n  }\n  let router = createStaticRouter(routes, context.staticHandlerContext);\n  return /* @__PURE__ */ React12.createElement(React12.Fragment, null, /* @__PURE__ */ React12.createElement(\n    FrameworkContext.Provider,\n    {\n      value: {\n        manifest,\n        routeModules,\n        criticalCss,\n        serverHandoffString,\n        future: context.future,\n        isSpaMode: context.isSpaMode,\n        serializeError: context.serializeError,\n        renderMeta: context.renderMeta\n      }\n    },\n    /* @__PURE__ */ React12.createElement(RemixErrorBoundary, { location: router.state.location }, /* @__PURE__ */ React12.createElement(\n      StaticRouterProvider,\n      {\n        router,\n        context: context.staticHandlerContext,\n        hydrate: false\n      }\n    ))\n  ), context.serverHandoffStream ? /* @__PURE__ */ React12.createElement(React12.Suspense, null, /* @__PURE__ */ React12.createElement(\n    StreamTransfer,\n    {\n      context,\n      identifier: 0,\n      reader: context.serverHandoffStream.getReader(),\n      textDecoder: new TextDecoder(),\n      nonce\n    }\n  )) : null);\n}\n\n// lib/dom/ssr/routes-test-stub.tsx\nimport * as React13 from \"react\";\nfunction createRoutesStub(routes, context = {}) {\n  return function RoutesTestStub({\n    initialEntries,\n    initialIndex,\n    hydrationData,\n    future\n  }) {\n    let routerRef = React13.useRef();\n    let remixContextRef = React13.useRef();\n    if (routerRef.current == null) {\n      remixContextRef.current = {\n        future: {},\n        manifest: {\n          routes: {},\n          entry: { imports: [], module: \"\" },\n          url: \"\",\n          version: \"\"\n        },\n        routeModules: {},\n        isSpaMode: false\n      };\n      let patched = processRoutes(\n        // @ts-expect-error loader/action context types don't match :/\n        convertRoutesToDataRoutes(routes, (r) => r),\n        context,\n        remixContextRef.current.manifest,\n        remixContextRef.current.routeModules\n      );\n      routerRef.current = createMemoryRouter(patched, {\n        initialEntries,\n        initialIndex,\n        hydrationData\n      });\n    }\n    return /* @__PURE__ */ React13.createElement(FrameworkContext.Provider, { value: remixContextRef.current }, /* @__PURE__ */ React13.createElement(RouterProvider, { router: routerRef.current }));\n  };\n}\nfunction processRoutes(routes, context, manifest, routeModules, parentId) {\n  return routes.map((route) => {\n    if (!route.id) {\n      throw new Error(\n        \"Expected a route.id in @remix-run/testing processRoutes() function\"\n      );\n    }\n    let { loader, action } = route;\n    let newRoute = {\n      id: route.id,\n      path: route.path,\n      index: route.index,\n      Component: route.Component,\n      HydrateFallback: route.HydrateFallback,\n      ErrorBoundary: route.ErrorBoundary,\n      action: action ? (args) => action({ ...args, context }) : void 0,\n      loader: loader ? (args) => loader({ ...args, context }) : void 0,\n      handle: route.handle,\n      shouldRevalidate: route.shouldRevalidate\n    };\n    let entryRoute = {\n      id: route.id,\n      path: route.path,\n      index: route.index,\n      parentId,\n      hasAction: route.action != null,\n      hasLoader: route.loader != null,\n      // When testing routes, you should just be stubbing loader/action, not\n      // trying to re-implement the full loader/clientLoader/SSR/hydration flow.\n      // That is better tested via E2E tests.\n      hasClientAction: false,\n      hasClientLoader: false,\n      hasErrorBoundary: route.ErrorBoundary != null,\n      module: \"build/stub-path-to-module.js\"\n      // any need for this?\n    };\n    manifest.routes[newRoute.id] = entryRoute;\n    routeModules[route.id] = {\n      default: route.Component || Outlet,\n      ErrorBoundary: route.ErrorBoundary || void 0,\n      handle: route.handle,\n      links: route.links,\n      meta: route.meta,\n      shouldRevalidate: route.shouldRevalidate\n    };\n    if (route.children) {\n      newRoute.children = processRoutes(\n        route.children,\n        context,\n        manifest,\n        routeModules,\n        newRoute.id\n      );\n    }\n    return newRoute;\n  });\n}\n\n// lib/server-runtime/cookies.ts\nimport { parse, serialize } from \"cookie\";\n\n// lib/server-runtime/crypto.ts\nvar encoder = new TextEncoder();\nvar sign = async (value, secret) => {\n  let data2 = encoder.encode(value);\n  let key = await createKey2(secret, [\"sign\"]);\n  let signature = await crypto.subtle.sign(\"HMAC\", key, data2);\n  let hash = btoa(String.fromCharCode(...new Uint8Array(signature))).replace(\n    /=+$/,\n    \"\"\n  );\n  return value + \".\" + hash;\n};\nvar unsign = async (cookie, secret) => {\n  let index = cookie.lastIndexOf(\".\");\n  let value = cookie.slice(0, index);\n  let hash = cookie.slice(index + 1);\n  let data2 = encoder.encode(value);\n  let key = await createKey2(secret, [\"verify\"]);\n  let signature = byteStringToUint8Array(atob(hash));\n  let valid = await crypto.subtle.verify(\"HMAC\", key, signature, data2);\n  return valid ? value : false;\n};\nvar createKey2 = async (secret, usages) => crypto.subtle.importKey(\n  \"raw\",\n  encoder.encode(secret),\n  { name: \"HMAC\", hash: \"SHA-256\" },\n  false,\n  usages\n);\nfunction byteStringToUint8Array(byteString) {\n  let array = new Uint8Array(byteString.length);\n  for (let i = 0; i < byteString.length; i++) {\n    array[i] = byteString.charCodeAt(i);\n  }\n  return array;\n}\n\n// lib/server-runtime/cookies.ts\nvar createCookie = (name, cookieOptions = {}) => {\n  let { secrets = [], ...options } = {\n    path: \"/\",\n    sameSite: \"lax\",\n    ...cookieOptions\n  };\n  warnOnceAboutExpiresCookie(name, options.expires);\n  return {\n    get name() {\n      return name;\n    },\n    get isSigned() {\n      return secrets.length > 0;\n    },\n    get expires() {\n      return typeof options.maxAge !== \"undefined\" ? new Date(Date.now() + options.maxAge * 1e3) : options.expires;\n    },\n    async parse(cookieHeader, parseOptions) {\n      if (!cookieHeader) return null;\n      let cookies = parse(cookieHeader, { ...options, ...parseOptions });\n      if (name in cookies) {\n        let value = cookies[name];\n        if (typeof value === \"string\" && value !== \"\") {\n          let decoded = await decodeCookieValue(value, secrets);\n          return decoded;\n        } else {\n          return \"\";\n        }\n      } else {\n        return null;\n      }\n    },\n    async serialize(value, serializeOptions) {\n      return serialize(\n        name,\n        value === \"\" ? \"\" : await encodeCookieValue(value, secrets),\n        {\n          ...options,\n          ...serializeOptions\n        }\n      );\n    }\n  };\n};\nvar isCookie = (object) => {\n  return object != null && typeof object.name === \"string\" && typeof object.isSigned === \"boolean\" && typeof object.parse === \"function\" && typeof object.serialize === \"function\";\n};\nasync function encodeCookieValue(value, secrets) {\n  let encoded = encodeData(value);\n  if (secrets.length > 0) {\n    encoded = await sign(encoded, secrets[0]);\n  }\n  return encoded;\n}\nasync function decodeCookieValue(value, secrets) {\n  if (secrets.length > 0) {\n    for (let secret of secrets) {\n      let unsignedValue = await unsign(value, secret);\n      if (unsignedValue !== false) {\n        return decodeData(unsignedValue);\n      }\n    }\n    return null;\n  }\n  return decodeData(value);\n}\nfunction encodeData(value) {\n  return btoa(myUnescape(encodeURIComponent(JSON.stringify(value))));\n}\nfunction decodeData(value) {\n  try {\n    return JSON.parse(decodeURIComponent(myEscape(atob(value))));\n  } catch (error) {\n    return {};\n  }\n}\nfunction myEscape(value) {\n  let str = value.toString();\n  let result = \"\";\n  let index = 0;\n  let chr, code;\n  while (index < str.length) {\n    chr = str.charAt(index++);\n    if (/[\\w*+\\-./@]/.exec(chr)) {\n      result += chr;\n    } else {\n      code = chr.charCodeAt(0);\n      if (code < 256) {\n        result += \"%\" + hex(code, 2);\n      } else {\n        result += \"%u\" + hex(code, 4).toUpperCase();\n      }\n    }\n  }\n  return result;\n}\nfunction hex(code, length) {\n  let result = code.toString(16);\n  while (result.length < length) result = \"0\" + result;\n  return result;\n}\nfunction myUnescape(value) {\n  let str = value.toString();\n  let result = \"\";\n  let index = 0;\n  let chr, part;\n  while (index < str.length) {\n    chr = str.charAt(index++);\n    if (chr === \"%\") {\n      if (str.charAt(index) === \"u\") {\n        part = str.slice(index + 1, index + 5);\n        if (/^[\\da-f]{4}$/i.exec(part)) {\n          result += String.fromCharCode(parseInt(part, 16));\n          index += 5;\n          continue;\n        }\n      } else {\n        part = str.slice(index, index + 2);\n        if (/^[\\da-f]{2}$/i.exec(part)) {\n          result += String.fromCharCode(parseInt(part, 16));\n          index += 2;\n          continue;\n        }\n      }\n    }\n    result += chr;\n  }\n  return result;\n}\nfunction warnOnceAboutExpiresCookie(name, expires) {\n  warnOnce(\n    !expires,\n    `The \"${name}\" cookie has an \"expires\" property set. This will cause the expires value to not be updated when the session is committed. Instead, you should set the expires value when serializing the cookie. You can use \\`commitSession(session, { expires })\\` if using a session storage object, or \\`cookie.serialize(\"value\", { expires })\\` if you're using the cookie directly.`\n  );\n}\n\n// lib/server-runtime/entry.ts\nfunction createEntryRouteModules(manifest) {\n  return Object.keys(manifest).reduce((memo2, routeId) => {\n    let route = manifest[routeId];\n    if (route) {\n      memo2[routeId] = route.module;\n    }\n    return memo2;\n  }, {});\n}\n\n// lib/server-runtime/mode.ts\nvar ServerMode = /* @__PURE__ */ ((ServerMode2) => {\n  ServerMode2[\"Development\"] = \"development\";\n  ServerMode2[\"Production\"] = \"production\";\n  ServerMode2[\"Test\"] = \"test\";\n  return ServerMode2;\n})(ServerMode || {});\nfunction isServerMode(value) {\n  return value === \"development\" /* Development */ || value === \"production\" /* Production */ || value === \"test\" /* Test */;\n}\n\n// lib/server-runtime/errors.ts\nfunction sanitizeError(error, serverMode) {\n  if (error instanceof Error && serverMode !== \"development\" /* Development */) {\n    let sanitized = new Error(\"Unexpected Server Error\");\n    sanitized.stack = void 0;\n    return sanitized;\n  }\n  return error;\n}\nfunction sanitizeErrors(errors, serverMode) {\n  return Object.entries(errors).reduce((acc, [routeId, error]) => {\n    return Object.assign(acc, { [routeId]: sanitizeError(error, serverMode) });\n  }, {});\n}\nfunction serializeError(error, serverMode) {\n  let sanitized = sanitizeError(error, serverMode);\n  return {\n    message: sanitized.message,\n    stack: sanitized.stack\n  };\n}\nfunction serializeErrors2(errors, serverMode) {\n  if (!errors) return null;\n  let entries = Object.entries(errors);\n  let serialized = {};\n  for (let [key, val] of entries) {\n    if (isRouteErrorResponse(val)) {\n      serialized[key] = { ...val, __type: \"RouteErrorResponse\" };\n    } else if (val instanceof Error) {\n      let sanitized = sanitizeError(val, serverMode);\n      serialized[key] = {\n        message: sanitized.message,\n        stack: sanitized.stack,\n        __type: \"Error\",\n        // If this is a subclass (i.e., ReferenceError), send up the type so we\n        // can re-create the same type during hydration.  This will only apply\n        // in dev mode since all production errors are sanitized to normal\n        // Error instances\n        ...sanitized.name !== \"Error\" ? {\n          __subType: sanitized.name\n        } : {}\n      };\n    } else {\n      serialized[key] = val;\n    }\n  }\n  return serialized;\n}\n\n// lib/server-runtime/routeMatching.ts\nfunction matchServerRoutes(routes, pathname, basename) {\n  let matches = matchRoutes(\n    routes,\n    pathname,\n    basename\n  );\n  if (!matches) return null;\n  return matches.map((match) => ({\n    params: match.params,\n    pathname: match.pathname,\n    route: match.route\n  }));\n}\n\n// lib/server-runtime/data.ts\nasync function callRouteHandler(handler, args) {\n  let result = await handler({\n    request: stripRoutesParam(stripIndexParam2(args.request)),\n    params: args.params,\n    context: args.context\n  });\n  if (isDataWithResponseInit(result) && result.init && result.init.status && isRedirectStatusCode(result.init.status)) {\n    throw new Response(null, result.init);\n  }\n  return result;\n}\nfunction stripIndexParam2(request) {\n  let url = new URL(request.url);\n  let indexValues = url.searchParams.getAll(\"index\");\n  url.searchParams.delete(\"index\");\n  let indexValuesToKeep = [];\n  for (let indexValue of indexValues) {\n    if (indexValue) {\n      indexValuesToKeep.push(indexValue);\n    }\n  }\n  for (let toKeep of indexValuesToKeep) {\n    url.searchParams.append(\"index\", toKeep);\n  }\n  let init = {\n    method: request.method,\n    body: request.body,\n    headers: request.headers,\n    signal: request.signal\n  };\n  if (init.body) {\n    init.duplex = \"half\";\n  }\n  return new Request(url.href, init);\n}\nfunction stripRoutesParam(request) {\n  let url = new URL(request.url);\n  url.searchParams.delete(\"_routes\");\n  let init = {\n    method: request.method,\n    body: request.body,\n    headers: request.headers,\n    signal: request.signal\n  };\n  if (init.body) {\n    init.duplex = \"half\";\n  }\n  return new Request(url.href, init);\n}\n\n// lib/server-runtime/invariant.ts\nfunction invariant3(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    console.error(\n      \"The following error is a bug in React Router; please open an issue! https://github.com/remix-run/react-router/issues/new/choose\"\n    );\n    throw new Error(message);\n  }\n}\n\n// lib/server-runtime/routes.ts\nfunction groupRoutesByParentId2(manifest) {\n  let routes = {};\n  Object.values(manifest).forEach((route) => {\n    if (route) {\n      let parentId = route.parentId || \"\";\n      if (!routes[parentId]) {\n        routes[parentId] = [];\n      }\n      routes[parentId].push(route);\n    }\n  });\n  return routes;\n}\nfunction createRoutes(manifest, parentId = \"\", routesByParentId = groupRoutesByParentId2(manifest)) {\n  return (routesByParentId[parentId] || []).map((route) => ({\n    ...route,\n    children: createRoutes(manifest, route.id, routesByParentId)\n  }));\n}\nfunction createStaticHandlerDataRoutes(manifest, future, parentId = \"\", routesByParentId = groupRoutesByParentId2(manifest)) {\n  return (routesByParentId[parentId] || []).map((route) => {\n    let commonRoute = {\n      // Always include root due to default boundaries\n      hasErrorBoundary: route.id === \"root\" || route.module.ErrorBoundary != null,\n      id: route.id,\n      path: route.path,\n      // Need to use RR's version in the param typed here to permit the optional\n      // context even though we know it'll always be provided in remix\n      loader: route.module.loader ? async (args) => {\n        if (args.request.headers.has(\"X-React-Router-Prerender-Data\")) {\n          const preRenderedData = args.request.headers.get(\n            \"X-React-Router-Prerender-Data\"\n          );\n          let encoded = preRenderedData ? decodeURI(preRenderedData) : preRenderedData;\n          invariant3(encoded, \"Missing prerendered data for route\");\n          let uint8array = new TextEncoder().encode(encoded);\n          let stream = new ReadableStream({\n            start(controller) {\n              controller.enqueue(uint8array);\n              controller.close();\n            }\n          });\n          let decoded = await decodeViaTurboStream(stream, global);\n          let data2 = decoded.value;\n          invariant3(\n            data2 && route.id in data2,\n            \"Unable to decode prerendered data\"\n          );\n          let result = data2[route.id];\n          invariant3(\"data\" in result, \"Unable to process prerendered data\");\n          return result.data;\n        }\n        let val = await callRouteHandler(route.module.loader, args);\n        return val;\n      } : void 0,\n      action: route.module.action ? (args) => callRouteHandler(route.module.action, args) : void 0,\n      handle: route.module.handle\n    };\n    return route.index ? {\n      index: true,\n      ...commonRoute\n    } : {\n      caseSensitive: route.caseSensitive,\n      children: createStaticHandlerDataRoutes(\n        manifest,\n        future,\n        route.id,\n        routesByParentId\n      ),\n      ...commonRoute\n    };\n  });\n}\n\n// lib/server-runtime/markup.ts\nvar ESCAPE_LOOKUP3 = {\n  \"&\": \"\\\\u0026\",\n  \">\": \"\\\\u003e\",\n  \"<\": \"\\\\u003c\",\n  \"\\u2028\": \"\\\\u2028\",\n  \"\\u2029\": \"\\\\u2029\"\n};\nvar ESCAPE_REGEX3 = /[&><\\u2028\\u2029]/g;\nfunction escapeHtml2(html) {\n  return html.replace(ESCAPE_REGEX3, (match) => ESCAPE_LOOKUP3[match]);\n}\n\n// lib/server-runtime/serverHandoff.ts\nfunction createServerHandoffString(serverHandoff) {\n  return escapeHtml2(JSON.stringify(serverHandoff));\n}\n\n// lib/server-runtime/dev.ts\nvar globalDevServerHooksKey = \"__reactRouterDevServerHooks\";\nfunction setDevServerHooks(devServerHooks) {\n  globalThis[globalDevServerHooksKey] = devServerHooks;\n}\nfunction getDevServerHooks() {\n  return globalThis[globalDevServerHooksKey];\n}\n\n// lib/server-runtime/single-fetch.ts\nimport { encode } from \"turbo-stream\";\n\n// lib/server-runtime/headers.ts\nimport { splitCookiesString } from \"set-cookie-parser\";\nfunction getDocumentHeaders(build, context) {\n  let boundaryIdx = context.errors ? context.matches.findIndex((m) => context.errors[m.route.id]) : -1;\n  let matches = boundaryIdx >= 0 ? context.matches.slice(0, boundaryIdx + 1) : context.matches;\n  let errorHeaders;\n  if (boundaryIdx >= 0) {\n    let { actionHeaders, actionData, loaderHeaders, loaderData } = context;\n    context.matches.slice(boundaryIdx).some((match) => {\n      let id = match.route.id;\n      if (actionHeaders[id] && (!actionData || !actionData.hasOwnProperty(id))) {\n        errorHeaders = actionHeaders[id];\n      } else if (loaderHeaders[id] && !loaderData.hasOwnProperty(id)) {\n        errorHeaders = loaderHeaders[id];\n      }\n      return errorHeaders != null;\n    });\n  }\n  return matches.reduce((parentHeaders, match, idx) => {\n    let { id } = match.route;\n    let route = build.routes[id];\n    invariant3(route, `Route with id \"${id}\" not found in build`);\n    let routeModule = route.module;\n    let loaderHeaders = context.loaderHeaders[id] || new Headers();\n    let actionHeaders = context.actionHeaders[id] || new Headers();\n    let includeErrorHeaders = errorHeaders != null && idx === matches.length - 1;\n    let includeErrorCookies = includeErrorHeaders && errorHeaders !== loaderHeaders && errorHeaders !== actionHeaders;\n    if (routeModule.headers == null) {\n      let headers2 = new Headers(parentHeaders);\n      if (includeErrorCookies) {\n        prependCookies(errorHeaders, headers2);\n      }\n      prependCookies(actionHeaders, headers2);\n      prependCookies(loaderHeaders, headers2);\n      return headers2;\n    }\n    let headers = new Headers(\n      routeModule.headers ? typeof routeModule.headers === \"function\" ? routeModule.headers({\n        loaderHeaders,\n        parentHeaders,\n        actionHeaders,\n        errorHeaders: includeErrorHeaders ? errorHeaders : void 0\n      }) : routeModule.headers : void 0\n    );\n    if (includeErrorCookies) {\n      prependCookies(errorHeaders, headers);\n    }\n    prependCookies(actionHeaders, headers);\n    prependCookies(loaderHeaders, headers);\n    prependCookies(parentHeaders, headers);\n    return headers;\n  }, new Headers());\n}\nfunction prependCookies(parentHeaders, childHeaders) {\n  let parentSetCookieString = parentHeaders.get(\"Set-Cookie\");\n  if (parentSetCookieString) {\n    let cookies = splitCookiesString(parentSetCookieString);\n    let childCookies = new Set(childHeaders.getSetCookie());\n    cookies.forEach((cookie) => {\n      if (!childCookies.has(cookie)) {\n        childHeaders.append(\"Set-Cookie\", cookie);\n      }\n    });\n  }\n}\n\n// lib/server-runtime/single-fetch.ts\nvar SINGLE_FETCH_REDIRECT_STATUS = 202;\nfunction getSingleFetchDataStrategy2({\n  isActionDataRequest,\n  loadRouteIds\n} = {}) {\n  return async ({ request, matches }) => {\n    if (isActionDataRequest && request.method === \"GET\") {\n      return {};\n    }\n    let matchesToLoad = loadRouteIds ? matches.filter((m) => loadRouteIds.includes(m.route.id)) : matches;\n    let results = await Promise.all(\n      matchesToLoad.map((match) => match.resolve())\n    );\n    return results.reduce(\n      (acc, result, i) => Object.assign(acc, { [matchesToLoad[i].route.id]: result }),\n      {}\n    );\n  };\n}\nasync function singleFetchAction(build, serverMode, staticHandler, request, handlerUrl, loadContext, handleError) {\n  try {\n    let handlerRequest = new Request(handlerUrl, {\n      method: request.method,\n      body: request.body,\n      headers: request.headers,\n      signal: request.signal,\n      ...request.body ? { duplex: \"half\" } : void 0\n    });\n    let result = await staticHandler.query(handlerRequest, {\n      requestContext: loadContext,\n      skipLoaderErrorBubbling: true,\n      dataStrategy: getSingleFetchDataStrategy2({\n        isActionDataRequest: true\n      })\n    });\n    if (isResponse(result)) {\n      return {\n        result: getSingleFetchRedirect(\n          result.status,\n          result.headers,\n          build.basename\n        ),\n        headers: result.headers,\n        status: SINGLE_FETCH_REDIRECT_STATUS\n      };\n    }\n    let context = result;\n    let headers = getDocumentHeaders(build, context);\n    if (isRedirectStatusCode(context.statusCode) && headers.has(\"Location\")) {\n      return {\n        result: getSingleFetchRedirect(\n          context.statusCode,\n          headers,\n          build.basename\n        ),\n        headers,\n        status: SINGLE_FETCH_REDIRECT_STATUS\n      };\n    }\n    if (context.errors) {\n      Object.values(context.errors).forEach((err) => {\n        if (!isRouteErrorResponse(err) || err.error) {\n          handleError(err);\n        }\n      });\n      context.errors = sanitizeErrors(context.errors, serverMode);\n    }\n    let singleFetchResult;\n    if (context.errors) {\n      singleFetchResult = { error: Object.values(context.errors)[0] };\n    } else {\n      singleFetchResult = { data: Object.values(context.actionData || {})[0] };\n    }\n    return {\n      result: singleFetchResult,\n      headers,\n      status: context.statusCode\n    };\n  } catch (error) {\n    handleError(error);\n    return {\n      result: { error },\n      headers: new Headers(),\n      status: 500\n    };\n  }\n}\nasync function singleFetchLoaders(build, serverMode, staticHandler, request, handlerUrl, loadContext, handleError) {\n  try {\n    let handlerRequest = new Request(handlerUrl, {\n      headers: request.headers,\n      signal: request.signal\n    });\n    let loadRouteIds = new URL(request.url).searchParams.get(\"_routes\")?.split(\",\") || void 0;\n    let result = await staticHandler.query(handlerRequest, {\n      requestContext: loadContext,\n      skipLoaderErrorBubbling: true,\n      dataStrategy: getSingleFetchDataStrategy2({\n        loadRouteIds\n      })\n    });\n    if (isResponse(result)) {\n      return {\n        result: {\n          [SingleFetchRedirectSymbol]: getSingleFetchRedirect(\n            result.status,\n            result.headers,\n            build.basename\n          )\n        },\n        headers: result.headers,\n        status: SINGLE_FETCH_REDIRECT_STATUS\n      };\n    }\n    let context = result;\n    let headers = getDocumentHeaders(build, context);\n    if (isRedirectStatusCode(context.statusCode) && headers.has(\"Location\")) {\n      return {\n        result: {\n          [SingleFetchRedirectSymbol]: getSingleFetchRedirect(\n            context.statusCode,\n            headers,\n            build.basename\n          )\n        },\n        headers,\n        status: SINGLE_FETCH_REDIRECT_STATUS\n      };\n    }\n    if (context.errors) {\n      Object.values(context.errors).forEach((err) => {\n        if (!isRouteErrorResponse(err) || err.error) {\n          handleError(err);\n        }\n      });\n      context.errors = sanitizeErrors(context.errors, serverMode);\n    }\n    let results = {};\n    let loadedMatches = loadRouteIds ? context.matches.filter(\n      (m) => m.route.loader && loadRouteIds.includes(m.route.id)\n    ) : context.matches;\n    loadedMatches.forEach((m) => {\n      let { id } = m.route;\n      if (context.errors && context.errors.hasOwnProperty(id)) {\n        results[id] = { error: context.errors[id] };\n      } else if (context.loaderData.hasOwnProperty(id)) {\n        results[id] = { data: context.loaderData[id] };\n      }\n    });\n    return {\n      result: results,\n      headers,\n      status: context.statusCode\n    };\n  } catch (error) {\n    handleError(error);\n    return {\n      result: { root: { error } },\n      headers: new Headers(),\n      status: 500\n    };\n  }\n}\nfunction getSingleFetchRedirect(status, headers, basename) {\n  let redirect2 = headers.get(\"Location\");\n  if (basename) {\n    redirect2 = stripBasename(redirect2, basename) || redirect2;\n  }\n  return {\n    redirect: redirect2,\n    status,\n    revalidate: (\n      // Technically X-Remix-Revalidate isn't needed here - that was an implementation\n      // detail of ?_data requests as our way to tell the front end to revalidate when\n      // we didn't have a response body to include that information in.\n      // With single fetch, we tell the front end via this revalidate boolean field.\n      // However, we're respecting it for now because it may be something folks have\n      // used in their own responses\n      // TODO(v3): Consider removing or making this official public API\n      headers.has(\"X-Remix-Revalidate\") || headers.has(\"Set-Cookie\")\n    ),\n    reload: headers.has(\"X-Remix-Reload-Document\"),\n    replace: headers.has(\"X-Remix-Replace\")\n  };\n}\nfunction encodeViaTurboStream(data2, requestSignal, streamTimeout, serverMode) {\n  let controller = new AbortController();\n  let timeoutId = setTimeout(\n    () => controller.abort(new Error(\"Server Timeout\")),\n    typeof streamTimeout === \"number\" ? streamTimeout : 4950\n  );\n  requestSignal.addEventListener(\"abort\", () => clearTimeout(timeoutId));\n  return encode(data2, {\n    signal: controller.signal,\n    plugins: [\n      (value) => {\n        if (value instanceof Error) {\n          let { name, message, stack } = serverMode === \"production\" /* Production */ ? sanitizeError(value, serverMode) : value;\n          return [\"SanitizedError\", name, message, stack];\n        }\n        if (value instanceof ErrorResponseImpl) {\n          let { data: data3, status, statusText } = value;\n          return [\"ErrorResponse\", data3, status, statusText];\n        }\n        if (value && typeof value === \"object\" && SingleFetchRedirectSymbol in value) {\n          return [\"SingleFetchRedirect\", value[SingleFetchRedirectSymbol]];\n        }\n      }\n    ],\n    postPlugins: [\n      (value) => {\n        if (!value) return;\n        if (typeof value !== \"object\") return;\n        return [\n          \"SingleFetchClassInstance\",\n          Object.fromEntries(Object.entries(value))\n        ];\n      },\n      () => [\"SingleFetchFallback\"]\n    ]\n  });\n}\n\n// lib/server-runtime/server.ts\nvar NO_BODY_STATUS_CODES = /* @__PURE__ */ new Set([100, 101, 204, 205, 304]);\nfunction derive(build, mode) {\n  let routes = createRoutes(build.routes);\n  let dataRoutes = createStaticHandlerDataRoutes(build.routes, build.future);\n  let serverMode = isServerMode(mode) ? mode : \"production\" /* Production */;\n  let staticHandler = createStaticHandler(dataRoutes, {\n    basename: build.basename\n  });\n  let errorHandler = build.entry.module.handleError || ((error, { request }) => {\n    if (serverMode !== \"test\" /* Test */ && !request.signal.aborted) {\n      console.error(\n        // @ts-expect-error This is \"private\" from users but intended for internal use\n        isRouteErrorResponse(error) && error.error ? error.error : error\n      );\n    }\n  });\n  return {\n    routes,\n    dataRoutes,\n    serverMode,\n    staticHandler,\n    errorHandler\n  };\n}\nvar createRequestHandler = (build, mode) => {\n  let _build;\n  let routes;\n  let serverMode;\n  let staticHandler;\n  let errorHandler;\n  return async function requestHandler(request, loadContext = {}) {\n    _build = typeof build === \"function\" ? await build() : build;\n    if (typeof build === \"function\") {\n      let derived = derive(_build, mode);\n      routes = derived.routes;\n      serverMode = derived.serverMode;\n      staticHandler = derived.staticHandler;\n      errorHandler = derived.errorHandler;\n    } else if (!routes || !serverMode || !staticHandler || !errorHandler) {\n      let derived = derive(_build, mode);\n      routes = derived.routes;\n      serverMode = derived.serverMode;\n      staticHandler = derived.staticHandler;\n      errorHandler = derived.errorHandler;\n    }\n    let url = new URL(request.url);\n    let params = {};\n    let handleError = (error) => {\n      if (mode === \"development\" /* Development */) {\n        getDevServerHooks()?.processRequestError?.(error);\n      }\n      errorHandler(error, {\n        context: loadContext,\n        params,\n        request\n      });\n    };\n    let manifestUrl = `${_build.basename ?? \"/\"}/__manifest`.replace(\n      /\\/+/g,\n      \"/\"\n    );\n    if (url.pathname === manifestUrl) {\n      try {\n        let res = await handleManifestRequest(_build, routes, url);\n        return res;\n      } catch (e) {\n        handleError(e);\n        return new Response(\"Unknown Server Error\", { status: 500 });\n      }\n    }\n    let matches = matchServerRoutes(routes, url.pathname, _build.basename);\n    if (matches && matches.length > 0) {\n      Object.assign(params, matches[0].params);\n    }\n    let response;\n    if (url.pathname.endsWith(\".data\")) {\n      let handlerUrl = new URL(request.url);\n      handlerUrl.pathname = handlerUrl.pathname.replace(/\\.data$/, \"\").replace(/^\\/_root$/, \"/\");\n      let singleFetchMatches = matchServerRoutes(\n        routes,\n        handlerUrl.pathname,\n        _build.basename\n      );\n      response = await handleSingleFetchRequest(\n        serverMode,\n        _build,\n        staticHandler,\n        request,\n        handlerUrl,\n        loadContext,\n        handleError\n      );\n      if (_build.entry.module.handleDataRequest) {\n        response = await _build.entry.module.handleDataRequest(response, {\n          context: loadContext,\n          params: singleFetchMatches ? singleFetchMatches[0].params : {},\n          request\n        });\n        if (isRedirectResponse(response)) {\n          let result = getSingleFetchRedirect(\n            response.status,\n            response.headers,\n            _build.basename\n          );\n          if (request.method === \"GET\") {\n            result = {\n              [SingleFetchRedirectSymbol]: result\n            };\n          }\n          let headers = new Headers(response.headers);\n          headers.set(\"Content-Type\", \"text/x-script\");\n          return new Response(\n            encodeViaTurboStream(\n              result,\n              request.signal,\n              _build.entry.module.streamTimeout,\n              serverMode\n            ),\n            {\n              status: SINGLE_FETCH_REDIRECT_STATUS,\n              headers\n            }\n          );\n        }\n      }\n    } else if (matches && matches[matches.length - 1].route.module.default == null && matches[matches.length - 1].route.module.ErrorBoundary == null) {\n      response = await handleResourceRequest(\n        serverMode,\n        staticHandler,\n        matches.slice(-1)[0].route.id,\n        request,\n        loadContext,\n        handleError\n      );\n    } else {\n      let criticalCss = mode === \"development\" /* Development */ ? await getDevServerHooks()?.getCriticalCss?.(_build, url.pathname) : void 0;\n      response = await handleDocumentRequest(\n        serverMode,\n        _build,\n        staticHandler,\n        request,\n        loadContext,\n        handleError,\n        criticalCss\n      );\n    }\n    if (request.method === \"HEAD\") {\n      return new Response(null, {\n        headers: response.headers,\n        status: response.status,\n        statusText: response.statusText\n      });\n    }\n    return response;\n  };\n};\nasync function handleManifestRequest(build, routes, url) {\n  let patches = {};\n  if (url.searchParams.has(\"p\")) {\n    for (let path of url.searchParams.getAll(\"p\")) {\n      let matches = matchServerRoutes(routes, path, build.basename);\n      if (matches) {\n        for (let match of matches) {\n          let routeId = match.route.id;\n          let route = build.assets.routes[routeId];\n          if (route) {\n            patches[routeId] = route;\n          }\n        }\n      }\n    }\n    return Response.json(patches, {\n      headers: {\n        \"Cache-Control\": \"public, max-age=31536000, immutable\"\n      }\n    });\n  }\n  return new Response(\"Invalid Request\", { status: 400 });\n}\nasync function handleSingleFetchRequest(serverMode, build, staticHandler, request, handlerUrl, loadContext, handleError) {\n  let { result, headers, status } = request.method !== \"GET\" ? await singleFetchAction(\n    build,\n    serverMode,\n    staticHandler,\n    request,\n    handlerUrl,\n    loadContext,\n    handleError\n  ) : await singleFetchLoaders(\n    build,\n    serverMode,\n    staticHandler,\n    request,\n    handlerUrl,\n    loadContext,\n    handleError\n  );\n  let resultHeaders = new Headers(headers);\n  resultHeaders.set(\"X-Remix-Response\", \"yes\");\n  if (NO_BODY_STATUS_CODES.has(status)) {\n    return new Response(null, { status, headers: resultHeaders });\n  }\n  resultHeaders.set(\"Content-Type\", \"text/x-script\");\n  return new Response(\n    encodeViaTurboStream(\n      result,\n      request.signal,\n      build.entry.module.streamTimeout,\n      serverMode\n    ),\n    {\n      status: status || 200,\n      headers: resultHeaders\n    }\n  );\n}\nasync function handleDocumentRequest(serverMode, build, staticHandler, request, loadContext, handleError, criticalCss) {\n  let context;\n  try {\n    context = await staticHandler.query(request, {\n      requestContext: loadContext\n    });\n  } catch (error) {\n    handleError(error);\n    return new Response(null, { status: 500 });\n  }\n  if (isResponse(context)) {\n    return context;\n  }\n  let headers = getDocumentHeaders(build, context);\n  if (NO_BODY_STATUS_CODES.has(context.statusCode)) {\n    return new Response(null, { status: context.statusCode, headers });\n  }\n  if (context.errors) {\n    Object.values(context.errors).forEach((err) => {\n      if (!isRouteErrorResponse(err) || err.error) {\n        handleError(err);\n      }\n    });\n    context.errors = sanitizeErrors(context.errors, serverMode);\n  }\n  let state = {\n    loaderData: context.loaderData,\n    actionData: context.actionData,\n    errors: serializeErrors2(context.errors, serverMode)\n  };\n  let entryContext = {\n    manifest: build.assets,\n    routeModules: createEntryRouteModules(build.routes),\n    staticHandlerContext: context,\n    criticalCss,\n    serverHandoffString: createServerHandoffString({\n      basename: build.basename,\n      criticalCss,\n      future: build.future,\n      isSpaMode: build.isSpaMode\n    }),\n    serverHandoffStream: encodeViaTurboStream(\n      state,\n      request.signal,\n      build.entry.module.streamTimeout,\n      serverMode\n    ),\n    renderMeta: {},\n    future: build.future,\n    isSpaMode: build.isSpaMode,\n    serializeError: (err) => serializeError(err, serverMode)\n  };\n  let handleDocumentRequestFunction = build.entry.module.default;\n  try {\n    return await handleDocumentRequestFunction(\n      request,\n      context.statusCode,\n      headers,\n      entryContext,\n      loadContext\n    );\n  } catch (error) {\n    handleError(error);\n    let errorForSecondRender = error;\n    if (isResponse(error)) {\n      try {\n        let data2 = await unwrapResponse(error);\n        errorForSecondRender = new ErrorResponseImpl(\n          error.status,\n          error.statusText,\n          data2\n        );\n      } catch (e) {\n      }\n    }\n    context = getStaticContextFromError(\n      staticHandler.dataRoutes,\n      context,\n      errorForSecondRender\n    );\n    if (context.errors) {\n      context.errors = sanitizeErrors(context.errors, serverMode);\n    }\n    let state2 = {\n      loaderData: context.loaderData,\n      actionData: context.actionData,\n      errors: serializeErrors2(context.errors, serverMode)\n    };\n    entryContext = {\n      ...entryContext,\n      staticHandlerContext: context,\n      serverHandoffString: createServerHandoffString({\n        basename: build.basename,\n        future: build.future,\n        isSpaMode: build.isSpaMode\n      }),\n      serverHandoffStream: encodeViaTurboStream(\n        state2,\n        request.signal,\n        build.entry.module.streamTimeout,\n        serverMode\n      ),\n      renderMeta: {}\n    };\n    try {\n      return await handleDocumentRequestFunction(\n        request,\n        context.statusCode,\n        headers,\n        entryContext,\n        loadContext\n      );\n    } catch (error2) {\n      handleError(error2);\n      return returnLastResortErrorResponse(error2, serverMode);\n    }\n  }\n}\nasync function handleResourceRequest(serverMode, staticHandler, routeId, request, loadContext, handleError) {\n  try {\n    let response = await staticHandler.queryRoute(request, {\n      routeId,\n      requestContext: loadContext\n    });\n    if (isResponse(response)) {\n      return response;\n    }\n    if (typeof response === \"string\") {\n      return new Response(response);\n    }\n    return Response.json(response);\n  } catch (error) {\n    if (isResponse(error)) {\n      error.headers.set(\"X-Remix-Catch\", \"yes\");\n      return error;\n    }\n    if (isRouteErrorResponse(error)) {\n      if (error) {\n        handleError(error);\n      }\n      return errorResponseToJson(error, serverMode);\n    }\n    handleError(error);\n    return returnLastResortErrorResponse(error, serverMode);\n  }\n}\nfunction errorResponseToJson(errorResponse, serverMode) {\n  return Response.json(\n    serializeError(\n      // @ts-expect-error This is \"private\" from users but intended for internal use\n      errorResponse.error || new Error(\"Unexpected Server Error\"),\n      serverMode\n    ),\n    {\n      status: errorResponse.status,\n      statusText: errorResponse.statusText,\n      headers: {\n        \"X-Remix-Error\": \"yes\"\n      }\n    }\n  );\n}\nfunction returnLastResortErrorResponse(error, serverMode) {\n  let message = \"Unexpected Server Error\";\n  if (serverMode !== \"production\" /* Production */) {\n    message += `\n\n${String(error)}`;\n  }\n  return new Response(message, {\n    status: 500,\n    headers: {\n      \"Content-Type\": \"text/plain\"\n    }\n  });\n}\nfunction unwrapResponse(response) {\n  let contentType = response.headers.get(\"Content-Type\");\n  return contentType && /\\bapplication\\/json\\b/.test(contentType) ? response.body == null ? null : response.json() : response.text();\n}\n\n// lib/server-runtime/sessions.ts\nfunction flash(name) {\n  return `__flash_${name}__`;\n}\nvar createSession = (initialData = {}, id = \"\") => {\n  let map = new Map(Object.entries(initialData));\n  return {\n    get id() {\n      return id;\n    },\n    get data() {\n      return Object.fromEntries(map);\n    },\n    has(name) {\n      return map.has(name) || map.has(flash(name));\n    },\n    get(name) {\n      if (map.has(name)) return map.get(name);\n      let flashName = flash(name);\n      if (map.has(flashName)) {\n        let value = map.get(flashName);\n        map.delete(flashName);\n        return value;\n      }\n      return void 0;\n    },\n    set(name, value) {\n      map.set(name, value);\n    },\n    flash(name, value) {\n      map.set(flash(name), value);\n    },\n    unset(name) {\n      map.delete(name);\n    }\n  };\n};\nvar isSession = (object) => {\n  return object != null && typeof object.id === \"string\" && typeof object.data !== \"undefined\" && typeof object.has === \"function\" && typeof object.get === \"function\" && typeof object.set === \"function\" && typeof object.flash === \"function\" && typeof object.unset === \"function\";\n};\nfunction createSessionStorage({\n  cookie: cookieArg,\n  createData,\n  readData,\n  updateData,\n  deleteData\n}) {\n  let cookie = isCookie(cookieArg) ? cookieArg : createCookie(cookieArg?.name || \"__session\", cookieArg);\n  warnOnceAboutSigningSessionCookie(cookie);\n  return {\n    async getSession(cookieHeader, options) {\n      let id = cookieHeader && await cookie.parse(cookieHeader, options);\n      let data2 = id && await readData(id);\n      return createSession(data2 || {}, id || \"\");\n    },\n    async commitSession(session, options) {\n      let { id, data: data2 } = session;\n      let expires = options?.maxAge != null ? new Date(Date.now() + options.maxAge * 1e3) : options?.expires != null ? options.expires : cookie.expires;\n      if (id) {\n        await updateData(id, data2, expires);\n      } else {\n        id = await createData(data2, expires);\n      }\n      return cookie.serialize(id, options);\n    },\n    async destroySession(session, options) {\n      await deleteData(session.id);\n      return cookie.serialize(\"\", {\n        ...options,\n        maxAge: void 0,\n        expires: /* @__PURE__ */ new Date(0)\n      });\n    }\n  };\n}\nfunction warnOnceAboutSigningSessionCookie(cookie) {\n  warnOnce(\n    cookie.isSigned,\n    `The \"${cookie.name}\" cookie is not signed, but session cookies should be signed to prevent tampering on the client before they are sent back to the server. See https://remix.run/utils/cookies#signing-cookies for more information.`\n  );\n}\n\n// lib/server-runtime/sessions/cookieStorage.ts\nfunction createCookieSessionStorage({ cookie: cookieArg } = {}) {\n  let cookie = isCookie(cookieArg) ? cookieArg : createCookie(cookieArg?.name || \"__session\", cookieArg);\n  warnOnceAboutSigningSessionCookie(cookie);\n  return {\n    async getSession(cookieHeader, options) {\n      return createSession(\n        cookieHeader && await cookie.parse(cookieHeader, options) || {}\n      );\n    },\n    async commitSession(session, options) {\n      let serializedCookie = await cookie.serialize(session.data, options);\n      if (serializedCookie.length > 4096) {\n        throw new Error(\n          \"Cookie length will exceed browser maximum. Length: \" + serializedCookie.length\n        );\n      }\n      return serializedCookie;\n    },\n    async destroySession(_session, options) {\n      return cookie.serialize(\"\", {\n        ...options,\n        maxAge: void 0,\n        expires: /* @__PURE__ */ new Date(0)\n      });\n    }\n  };\n}\n\n// lib/server-runtime/sessions/memoryStorage.ts\nfunction createMemorySessionStorage({ cookie } = {}) {\n  let map = /* @__PURE__ */ new Map();\n  return createSessionStorage({\n    cookie,\n    async createData(data2, expires) {\n      let id = Math.random().toString(36).substring(2, 10);\n      map.set(id, { data: data2, expires });\n      return id;\n    },\n    async readData(id) {\n      if (map.has(id)) {\n        let { data: data2, expires } = map.get(id);\n        if (!expires || expires > /* @__PURE__ */ new Date()) {\n          return data2;\n        }\n        if (expires) map.delete(id);\n      }\n      return null;\n    },\n    async updateData(id, data2, expires) {\n      map.set(id, { data: data2, expires });\n    },\n    async deleteData(id) {\n      map.delete(id);\n    }\n  });\n}\n\n// lib/dom/ssr/errors.ts\nfunction deserializeErrors2(errors) {\n  if (!errors) return null;\n  let entries = Object.entries(errors);\n  let serialized = {};\n  for (let [key, val] of entries) {\n    if (val && val.__type === \"RouteErrorResponse\") {\n      serialized[key] = new ErrorResponseImpl(\n        val.status,\n        val.statusText,\n        val.data,\n        val.internal === true\n      );\n    } else if (val && val.__type === \"Error\") {\n      if (val.__subType) {\n        let ErrorConstructor = window[val.__subType];\n        if (typeof ErrorConstructor === \"function\") {\n          try {\n            let error = new ErrorConstructor(val.message);\n            error.stack = val.stack;\n            serialized[key] = error;\n          } catch (e) {\n          }\n        }\n      }\n      if (serialized[key] == null) {\n        let error = new Error(val.message);\n        error.stack = val.stack;\n        serialized[key] = error;\n      }\n    } else {\n      serialized[key] = val;\n    }\n  }\n  return serialized;\n}\n\nexport {\n  Action,\n  createBrowserHistory,\n  invariant,\n  createPath,\n  parsePath,\n  matchRoutes,\n  generatePath,\n  matchPath,\n  resolvePath,\n  data,\n  redirect,\n  redirectDocument,\n  replace,\n  ErrorResponseImpl,\n  isRouteErrorResponse,\n  IDLE_NAVIGATION,\n  IDLE_FETCHER,\n  IDLE_BLOCKER,\n  createRouter,\n  DataRouterContext,\n  DataRouterStateContext,\n  ViewTransitionContext,\n  FetchersContext,\n  NavigationContext,\n  LocationContext,\n  RouteContext,\n  useHref,\n  useInRouterContext,\n  useLocation,\n  useNavigationType,\n  useMatch,\n  useNavigate,\n  useOutletContext,\n  useOutlet,\n  useParams,\n  useResolvedPath,\n  useRoutes,\n  useNavigation,\n  useRevalidator,\n  useMatches,\n  useLoaderData,\n  useRouteLoaderData,\n  useActionData,\n  useRouteError,\n  useAsyncValue,\n  useAsyncError,\n  useBlocker,\n  mapRouteProperties,\n  createMemoryRouter,\n  RouterProvider,\n  MemoryRouter,\n  Navigate,\n  Outlet,\n  Route,\n  Router,\n  Routes,\n  Await,\n  createRoutesFromChildren,\n  createRoutesFromElements,\n  renderMatches,\n  createSearchParams,\n  SingleFetchRedirectSymbol,\n  getSingleFetchDataStrategy,\n  decodeViaTurboStream,\n  RemixErrorBoundary,\n  createClientRoutesWithHMRRevalidationOptOut,\n  createClientRoutes,\n  shouldHydrateRouteLoader,\n  getPatchRoutesOnNavigationFunction,\n  useFogOFWarDiscovery,\n  FrameworkContext,\n  Links,\n  PrefetchPageLinks,\n  Meta,\n  Scripts,\n  createBrowserRouter,\n  createHashRouter,\n  BrowserRouter,\n  HashRouter,\n  HistoryRouter,\n  Link,\n  NavLink,\n  Form,\n  ScrollRestoration,\n  useLinkClickHandler,\n  useSearchParams,\n  useSubmit,\n  useFormAction,\n  useFetcher,\n  useFetchers,\n  useScrollRestoration,\n  useBeforeUnload,\n  usePrompt,\n  useViewTransitionState,\n  StaticRouter,\n  StaticRouterProvider,\n  createStaticHandler2 as createStaticHandler,\n  createStaticRouter,\n  ServerRouter,\n  createRoutesStub,\n  createCookie,\n  isCookie,\n  ServerMode,\n  setDevServerHooks,\n  createRequestHandler,\n  createSession,\n  isSession,\n  createSessionStorage,\n  createCookieSessionStorage,\n  createMemorySessionStorage,\n  deserializeErrors2 as deserializeErrors\n};\n","var _path,_path2,_path3,_path4,_path5,_path6,_path7,_path8,_path9,_path10,_path11,_path12,_path13,_path14,_path15,_path16,_path17,_path18,_path19,_path20,_path21,_path22,_path23,_path24,_path25,_path26,_path27,_path28,_path29,_path30,_path31,_path32,_path33,_path34,_path35,_path36,_path37,_path38,_path39,_path40,_path41,_path42,_path43,_path44,_path45,_path46,_path47,_path48,_path49,_path50,_path51,_path52,_path53,_path54,_path55,_path56,_path57,_path58,_path59,_path60,_path61,_path62,_path63,_path64,_path65,_path66,_path67,_path68,_path69,_path70,_path71,_path72,_path73,_path74,_path75,_path76,_path77,_path78,_path79,_path80,_path81,_path82,_path83,_path84,_path85,_path86,_path87,_path88,_path89,_path90,_path91,_path92,_path93,_path94,_path95,_path96,_path97,_path98,_path99,_path100,_path101,_path102,_path103,_path104,_path105,_path106,_path107,_path108,_path109,_path110,_path111,_path112,_path113,_path114,_path115,_path116,_path117,_path118,_path119,_path120,_path121,_path122,_path123,_path124,_path125,_path126,_path127,_path128,_path129,_path130,_path131,_path132,_path133,_path134,_path135,_path136,_path137,_path138,_path139,_path140,_path141,_path142,_path143,_path144,_path145,_path146,_path147,_path148,_path149,_path150,_path151,_path152,_path153,_path154,_path155,_path156,_path157,_path158,_path159,_path160,_path161,_path162,_path163,_path164,_path165,_path166,_path167,_path168,_path169,_path170,_path171,_path172,_path173,_path174,_path175,_path176,_path177,_path178,_path179,_path180,_path181,_path182,_path183,_path184,_path185,_path186,_path187,_path188,_path189,_path190,_path191,_path192,_path193,_path194,_path195,_path196,_path197,_path198,_path199,_path200,_path201,_path202,_path203,_path204,_path205,_path206,_path207,_path208,_path209,_path210,_path211,_path212,_path213,_path214,_path215,_path216,_path217,_path218,_path219,_path220,_path221,_path222,_path223,_path224,_path225,_path226,_path227,_path228,_path229,_path230,_path231,_path232,_path233,_path234,_path235,_path236,_path237,_path238,_path239,_path240,_path241,_path242,_path243,_path244,_path245,_path246,_path247,_path248,_path249,_path250,_path251,_path252,_path253,_path254,_path255,_path256,_path257,_path258,_path259,_path260,_path261,_path262,_path263,_path264,_path265,_path266,_path267,_path268,_path269,_path270,_path271,_path272,_path273,_path274,_path275,_path276,_path277,_path278,_path279,_path280,_path281,_path282,_path283,_path284,_path285,_path286,_path287,_path288,_path289,_path290,_path291,_path292,_path293,_path294,_path295,_path296,_path297,_path298,_path299,_path300,_path301,_path302,_path303,_path304,_path305,_path306,_path307,_path308,_path309,_path310,_path311,_path312,_path313,_path314,_path315,_path316,_path317,_path318,_path319,_path320,_path321,_path322,_path323,_path324,_path325,_path326,_path327,_path328,_path329,_path330,_path331,_path332,_path333,_path334,_path335,_path336,_path337,_path338,_path339,_path340,_path341,_path342,_path343,_path344,_path345,_path346,_path347,_path348,_path349,_path350,_path351,_path352,_path353,_path354,_path355,_path356,_path357,_path358,_path359,_path360,_path361,_path362,_path363,_path364,_path365,_path366,_path367,_path368,_path369,_path370,_path371,_path372,_path373,_path374,_path375,_path376,_path377,_path378,_path379,_path380,_path381,_path382,_path383,_path384,_path385,_path386,_path387,_path388,_path389,_path390,_path391,_path392,_path393,_path394,_path395,_path396,_path397,_path398,_path399,_path400,_path401,_path402,_path403,_path404,_path405,_path406,_path407,_path408,_path409,_path410,_path411,_path412,_path413,_path414,_path415,_path416,_path417,_path418,_path419,_path420,_path421,_path422,_path423,_path424,_path425,_path426,_path427,_path428,_path429,_path430,_path431,_path432,_path433,_path434,_path435,_path436,_path437,_path438,_path439,_path440,_path441,_path442,_path443,_path444,_path445,_path446,_path447,_path448,_path449,_path450,_path451,_path452,_path453,_path454,_path455,_path456,_path457,_path458,_path459,_path460,_path461,_path462,_path463,_path464,_path465,_path466,_path467,_path468,_path469,_path470,_path471,_path472,_path473,_path474,_path475,_path476,_path477,_path478,_path479,_path480,_path481,_path482,_path483,_path484,_path485,_path486,_path487,_path488,_path489,_path490,_path491,_path492,_path493,_path494,_path495,_path496,_path497,_path498,_path499,_path500,_path501,_path502,_path503,_path504,_path505,_path506,_path507,_path508,_path509,_path510,_path511,_path512,_path513,_path514,_path515,_path516,_path517,_path518,_path519,_path520,_path521,_path522,_path523,_path524,_path525,_path526,_path527,_path528,_path529,_path530,_path531,_path532,_path533,_path534,_path535,_path536,_path537,_path538,_path539,_path540,_path541,_path542,_path543,_path544,_path545,_path546,_path547,_path548,_path549,_path550,_path551,_path552,_path553,_path554,_path555,_path556,_path557,_path558,_path559,_path560,_path561,_path562,_path563,_path564,_path565,_path566,_path567,_path568,_path569,_path570,_path571,_path572,_path573,_path574,_path575,_path576,_path577,_path578,_path579,_path580,_path581,_path582,_path583,_path584,_path585,_path586,_path587,_path588,_path589,_path590,_path591,_path592,_path593,_path594,_path595,_path596,_path597,_path598,_path599,_path600,_path601,_path602,_path603,_path604,_path605,_path606,_path607,_path608,_path609,_path610,_path611,_path612,_path613,_path614,_path615,_path616,_path617,_path618,_path619,_path620,_path621,_path622,_path623,_path624,_path625,_path626,_path627,_path628,_path629,_path630,_path631,_path632,_path633,_path634,_path635,_path636,_path637,_path638,_path639,_path640,_path641,_path642,_path643,_path644,_path645,_path646,_path647,_path648,_path649,_path650,_path651,_path652,_path653,_path654,_path655,_path656,_path657,_path658,_path659,_path660,_path661,_path662,_path663,_path664,_path665,_path666,_path667,_path668,_path669,_path670,_path671,_path672,_path673,_path674,_path675,_path676,_path677,_path678,_path679,_path680,_path681,_path682,_path683,_path684,_path685,_path686,_path687,_path688,_path689,_path690,_path691,_path692,_path693,_path694,_path695,_path696,_path697,_path698,_path699,_path700,_path701,_path702,_path703,_path704,_path705,_path706,_path707,_path708,_path709,_path710,_path711,_path712,_path713,_path714,_path715,_path716,_path717,_path718,_path719,_path720,_path721,_path722,_path723,_path724,_path725,_path726,_path727,_path728,_path729,_path730,_path731,_path732,_path733,_path734,_path735,_path736,_path737,_path738,_path739,_path740,_path741,_path742,_path743,_path744,_path745,_path746,_path747,_path748,_path749,_path750,_path751,_path752,_path753,_path754,_path755,_path756,_path757,_path758,_path759,_path760,_path761,_path762,_path763,_path764,_path765,_path766,_path767,_path768,_path769,_path770,_path771,_path772,_path773,_path774,_path775,_path776,_path777,_path778,_path779,_path780,_path781,_path782,_path783,_path784,_path785,_path786,_path787,_path788,_path789,_path790,_path791,_path792,_path793,_path794,_path795,_path796,_path797,_path798,_path799,_path800,_path801,_path802,_path803,_path804,_path805,_path806,_path807,_path808,_path809,_path810,_path811,_path812,_path813,_path814,_path815,_path816,_path817,_path818,_path819,_path820,_path821,_path822,_path823,_path824,_path825,_path826,_path827,_path828,_path829,_path830,_path831,_path832,_path833,_path834,_path835,_path836,_path837,_path838,_path839,_path840,_path841,_path842,_path843,_path844,_path845,_path846,_path847,_path848,_path849,_path850,_path851,_path852,_path853,_path854,_path855,_path856,_path857,_path858,_path859,_path860,_path861,_path862,_path863,_path864,_path865,_path866,_path867,_path868,_path869,_path870,_path871,_path872,_path873,_path874,_path875,_path876,_path877,_path878,_path879,_path880,_path881,_path882,_path883,_path884,_path885,_path886,_path887,_path888,_path889,_path890,_path891,_path892,_path893,_path894,_path895,_path896,_path897,_path898,_path899,_path900,_path901,_path902,_path903,_path904,_path905,_path906,_path907,_path908,_path909,_path910,_path911,_path912,_path913,_path914,_path915,_path916,_path917,_path918,_path919,_path920,_path921,_path922,_path923,_path924,_path925,_path926,_path927,_path928,_path929,_path930,_path931,_path932,_path933,_path934,_path935,_path936,_path937,_path938,_path939,_path940,_path941,_path942,_path943,_path944,_path945,_path946,_path947,_path948,_path949,_path950,_path951,_path952,_path953,_path954,_path955,_path956,_path957,_path958,_path959,_path960,_path961,_path962,_path963,_path964,_path965,_path966,_path967,_path968,_path969,_path970,_path971,_path972,_path973,_path974,_path975,_path976,_path977,_path978,_path979,_path980,_path981,_path982,_path983,_path984,_path985,_path986,_path987,_path988,_path989,_path990,_path991,_path992,_path993,_path994,_path995,_path996,_path997,_path998,_path999,_path1000,_path1001,_path1002,_path1003,_path1004,_path1005,_path1006,_path1007,_path1008,_path1009,_path1010,_path1011,_path1012,_path1013,_path1014,_path1015,_path1016,_path1017,_path1018,_path1019,_path1020,_path1021,_path1022,_path1023,_path1024,_path1025,_path1026,_path1027,_path1028,_path1029,_path1030,_path1031,_path1032,_path1033,_path1034,_path1035,_path1036,_path1037,_path1038,_path1039,_path1040,_path1041,_path1042,_path1043,_path1044,_path1045,_path1046,_path1047,_path1048,_path1049,_path1050,_path1051,_path1052,_path1053,_path1054,_path1055,_path1056,_path1057,_path1058,_path1059,_path1060,_path1061,_path1062,_path1063,_path1064,_path1065,_path1066,_path1067,_path1068,_path1069,_path1070,_path1071,_path1072,_path1073,_path1074,_path1075,_path1076,_path1077,_path1078,_path1079,_path1080,_path1081,_path1082,_path1083,_path1084,_path1085,_path1086,_path1087,_path1088,_path1089,_path1090,_path1091,_path1092,_path1093,_path1094,_path1095,_path1096,_path1097,_path1098,_path1099,_path1100,_path1101,_path1102,_path1103,_path1104,_path1105,_path1106,_path1107,_path1108,_path1109,_path1110,_path1111,_path1112,_path1113,_path1114,_path1115,_path1116,_path1117,_path1118,_path1119,_path1120,_path1121,_path1122,_path1123,_path1124,_path1125,_path1126,_path1127,_path1128,_path1129,_path1130,_path1131,_path1132,_path1133,_path1134,_path1135,_path1136,_path1137,_path1138,_path1139,_path1140,_path1141,_path1142,_path1143,_path1144,_path1145,_path1146,_path1147,_path1148,_path1149,_path1150,_path1151,_path1152,_path1153,_path1154,_path1155,_path1156,_path1157,_path1158,_path1159,_path1160,_path1161,_path1162,_path1163,_path1164,_path1165,_path1166,_path1167,_path1168,_path1169,_path1170,_path1171,_path1172,_path1173,_path1174,_path1175,_path1176,_path1177,_path1178,_path1179,_path1180,_path1181,_path1182,_path1183,_path1184,_path1185,_path1186,_path1187,_path1188,_path1189,_path1190,_path1191,_path1192,_path1193,_path1194,_path1195,_path1196,_path1197,_path1198,_path1199,_path1200,_path1201,_path1202,_path1203,_path1204,_path1205,_path1206,_path1207,_path1208,_path1209,_path1210,_path1211,_path1212,_path1213,_path1214,_path1215,_path1216,_path1217,_path1218,_path1219,_path1220,_path1221,_path1222,_path1223,_path1224,_path1225,_path1226,_path1227,_path1228,_path1229,_path1230,_path1231,_path1232,_path1233,_path1234,_path1235,_path1236,_path1237,_path1238,_path1239,_path1240,_path1241,_path1242,_path1243,_path1244,_path1245,_path1246,_path1247,_path1248,_path1249,_path1250,_path1251,_path1252,_path1253,_path1254,_path1255,_path1256,_path1257,_path1258,_path1259,_path1260,_path1261,_path1262,_path1263,_path1264,_path1265,_path1266,_path1267,_path1268,_path1269,_path1270,_path1271,_path1272,_path1273,_path1274,_path1275,_path1276,_path1277,_path1278,_path1279,_path1280,_path1281,_path1282,_path1283,_path1284,_path1285,_path1286,_path1287,_path1288,_path1289,_path1290,_path1291,_path1292,_path1293,_path1294,_path1295,_path1296,_path1297,_path1298,_path1299,_path1300,_path1301,_path1302,_path1303,_path1304,_path1305,_path1306,_path1307,_path1308,_path1309,_path1310,_path1311,_path1312,_path1313,_path1314,_path1315,_path1316,_path1317,_path1318,_path1319,_path1320,_path1321,_path1322,_path1323,_path1324,_path1325,_path1326,_path1327,_path1328,_path1329,_path1330,_path1331,_path1332,_path1333,_path1334,_path1335,_path1336,_path1337,_path1338,_path1339,_path1340,_path1341,_path1342,_path1343,_path1344,_path1345,_path1346,_path1347,_path1348,_path1349,_path1350,_path1351,_path1352,_path1353,_path1354,_path1355,_path1356,_path1357,_path1358,_path1359,_path1360,_path1361,_path1362,_path1363,_path1364,_path1365,_path1366,_path1367,_path1368,_path1369,_path1370,_path1371,_path1372,_path1373,_path1374,_path1375,_path1376,_path1377,_path1378,_path1379,_path1380,_path1381,_path1382,_path1383,_path1384,_path1385,_path1386,_path1387,_path1388,_path1389,_path1390,_path1391,_path1392,_path1393,_path1394,_path1395,_path1396,_path1397,_path1398,_path1399,_path1400,_path1401,_path1402,_path1403,_path1404,_path1405,_path1406,_path1407,_path1408,_path1409,_path1410,_path1411,_path1412,_path1413,_path1414,_path1415,_path1416,_path1417,_path1418,_path1419,_path1420,_path1421,_path1422,_path1423,_path1424,_path1425,_path1426,_path1427,_path1428,_path1429,_path1430,_path1431,_path1432,_path1433,_path1434,_path1435,_path1436,_path1437,_path1438,_path1439,_path1440,_path1441,_path1442,_path1443,_path1444,_path1445,_path1446,_path1447,_path1448,_path1449,_path1450,_path1451,_path1452,_path1453,_path1454,_path1455,_path1456,_path1457,_path1458,_path1459,_path1460,_path1461,_path1462,_path1463,_path1464,_path1465,_path1466,_path1467,_path1468,_path1469,_path1470,_path1471,_path1472,_path1473,_path1474,_path1475,_path1476,_path1477,_path1478,_path1479,_path1480,_path1481,_path1482,_path1483,_path1484,_path1485,_path1486,_path1487,_path1488,_path1489,_path1490,_path1491,_path1492,_path1493,_path1494,_path1495,_path1496,_path1497,_path1498,_path1499,_path1500,_path1501,_path1502,_path1503,_path1504,_path1505,_path1506,_path1507,_path1508,_path1509,_path1510,_path1511,_path1512,_path1513,_path1514,_path1515,_path1516,_path1517,_path1518,_path1519,_path1520,_path1521,_path1522,_path1523,_path1524,_path1525,_path1526,_path1527,_path1528,_path1529,_path1530,_path1531,_path1532,_path1533,_path1534,_path1535,_path1536,_path1537,_path1538,_path1539,_path1540,_path1541,_path1542,_path1543,_path1544,_path1545,_path1546,_path1547,_path1548,_path1549,_path1550,_path1551,_path1552,_path1553,_path1554,_path1555,_path1556,_path1557,_path1558,_path1559,_path1560,_path1561,_path1562,_path1563,_path1564,_path1565,_path1566,_path1567,_path1568,_path1569,_path1570,_path1571,_path1572,_path1573,_path1574,_path1575,_path1576,_path1577,_path1578,_path1579,_path1580,_path1581,_path1582,_path1583,_path1584,_path1585,_path1586,_path1587,_path1588,_path1589,_path1590,_path1591,_path1592,_path1593,_path1594,_path1595,_path1596,_path1597,_path1598,_path1599,_path1600,_path1601,_path1602,_path1603,_path1604,_path1605,_path1606,_path1607,_path1608,_path1609,_path1610,_path1611,_path1612,_path1613,_path1614,_path1615,_path1616,_path1617,_path1618,_path1619,_path1620,_path1621,_path1622,_path1623,_path1624,_path1625,_path1626,_path1627,_path1628,_path1629,_path1630,_path1631,_path1632,_path1633,_path1634,_path1635,_path1636,_path1637,_path1638,_path1639,_path1640,_path1641,_path1642,_path1643,_path1644,_path1645,_path1646,_path1647,_path1648,_path1649,_path1650,_path1651,_path1652,_path1653,_path1654,_path1655,_path1656,_path1657,_path1658,_path1659,_path1660,_path1661,_path1662,_path1663,_path1664,_path1665,_path1666,_path1667,_path1668,_path1669,_path1670,_path1671,_path1672,_path1673,_path1674,_path1675,_path1676,_path1677,_path1678,_path1679,_path1680,_path1681,_path1682,_path1683,_path1684,_path1685,_path1686,_path1687,_path1688,_path1689,_path1690,_path1691,_path1692,_path1693,_path1694,_path1695,_path1696,_path1697,_path1698,_path1699,_path1700,_path1701,_path1702,_path1703,_path1704,_path1705,_path1706,_path1707,_path1708,_path1709,_path1710,_path1711,_path1712,_path1713,_path1714,_path1715,_path1716,_path1717,_path1718,_path1719,_path1720,_path1721,_path1722,_path1723,_path1724,_path1725,_path1726,_path1727,_path1728,_path1729,_path1730,_path1731,_path1732,_path1733,_path1734,_path1735,_path1736,_path1737,_path1738,_path1739,_path1740,_path1741,_path1742,_path1743,_path1744,_path1745,_path1746,_path1747,_path1748,_path1749,_path1750,_path1751,_path1752,_path1753,_path1754,_path1755,_path1756,_path1757,_path1758,_path1759,_path1760,_path1761,_path1762,_path1763,_path1764,_path1765,_path1766,_path1767,_path1768,_path1769,_path1770,_path1771,_path1772,_path1773,_path1774,_path1775,_path1776,_path1777,_path1778,_path1779,_path1780,_path1781,_path1782,_path1783,_path1784,_path1785,_path1786,_path1787,_path1788,_path1789,_path1790,_path1791,_path1792,_path1793,_path1794,_path1795,_path1796,_path1797,_path1798,_path1799,_path1800,_path1801,_path1802,_path1803,_path1804,_path1805,_path1806,_path1807,_path1808,_path1809,_path1810,_path1811,_path1812,_path1813,_path1814,_path1815,_path1816,_path1817,_path1818,_path1819,_path1820,_path1821,_path1822,_path1823,_path1824,_path1825,_path1826,_path1827,_path1828,_path1829,_path1830,_path1831,_path1832,_path1833,_path1834,_path1835,_path1836,_path1837,_path1838,_path1839,_path1840,_path1841,_path1842,_path1843,_path1844,_path1845,_path1846,_path1847,_path1848,_path1849,_path1850,_path1851,_path1852,_path1853,_path1854,_path1855,_path1856,_path1857,_path1858,_path1859,_path1860,_path1861,_path1862,_path1863,_path1864,_path1865,_path1866,_path1867,_path1868,_path1869,_path1870,_path1871,_path1872,_path1873,_path1874,_path1875,_path1876,_path1877,_path1878,_path1879,_path1880,_path1881,_path1882,_path1883,_path1884,_path1885,_path1886,_path1887,_path1888,_path1889,_path1890,_path1891,_path1892,_path1893,_path1894,_path1895,_path1896,_path1897,_path1898,_path1899,_path1900,_path1901,_path1902,_path1903,_path1904,_path1905,_path1906,_path1907,_path1908,_path1909,_path1910,_path1911,_path1912,_path1913,_path1914,_path1915,_path1916,_path1917,_path1918,_path1919,_path1920,_path1921,_path1922,_path1923,_path1924,_path1925,_path1926,_path1927,_path1928,_path1929,_path1930,_path1931,_path1932,_path1933,_path1934,_path1935,_path1936,_path1937,_path1938,_path1939,_path1940,_path1941,_path1942,_path1943,_path1944,_path1945,_path1946,_path1947,_path1948,_path1949,_path1950,_path1951,_path1952,_path1953,_path1954,_path1955,_path1956,_path1957,_path1958,_path1959,_path1960,_path1961,_path1962,_path1963,_path1964,_path1965,_path1966,_path1967,_path1968,_path1969,_path1970,_path1971,_path1972,_path1973,_path1974,_path1975,_path1976,_path1977,_path1978,_path1979,_path1980,_path1981,_path1982,_path1983,_path1984,_path1985,_path1986,_path1987,_path1988,_path1989,_path1990,_path1991,_path1992,_path1993,_path1994,_path1995,_path1996,_path1997,_path1998,_path1999,_path2000,_path2001,_path2002,_path2003,_path2004,_path2005,_path2006,_path2007,_path2008,_path2009,_path2010,_path2011,_path2012,_path2013,_path2014,_path2015,_path2016,_path2017,_path2018,_path2019,_path2020,_path2021,_path2022,_path2023,_path2024,_path2025,_path2026,_path2027,_path2028,_path2029,_path2030,_path2031,_path2032,_path2033,_path2034,_path2035,_path2036,_path2037,_path2038,_path2039,_path2040,_path2041,_path2042,_path2043,_path2044,_path2045,_path2046,_path2047,_path2048,_path2049,_path2050,_path2051,_path2052,_path2053,_path2054,_path2055,_path2056,_path2057,_path2058,_path2059,_path2060,_path2061,_path2062,_path2063,_path2064,_path2065,_path2066,_path2067,_path2068,_path2069,_path2070,_path2071,_path2072,_path2073,_path2074,_path2075,_path2076,_path2077,_path2078,_path2079,_path2080,_path2081,_path2082,_path2083,_path2084,_path2085,_path2086,_path2087,_path2088,_path2089,_path2090,_path2091,_path2092,_path2093,_path2094,_path2095,_path2096,_path2097,_path2098,_path2099,_path2100,_path2101,_path2102,_path2103,_path2104,_path2105,_path2106,_path2107,_path2108,_path2109,_path2110,_path2111,_path2112,_path2113,_path2114,_path2115,_path2116,_path2117,_path2118,_path2119,_path2120,_path2121,_path2122,_path2123,_path2124,_path2125,_path2126,_path2127,_path2128,_path2129,_path2130,_path2131,_path2132,_path2133,_path2134,_path2135,_path2136,_path2137,_path2138,_path2139,_path2140,_path2141,_path2142,_path2143,_path2144,_path2145,_path2146,_path2147,_path2148,_path2149,_path2150,_path2151,_path2152,_path2153,_path2154,_path2155,_path2156,_path2157,_path2158,_path2159,_path2160,_path2161,_path2162,_path2163,_path2164,_path2165,_path2166,_path2167,_path2168,_path2169,_path2170,_path2171,_path2172,_path2173,_path2174,_path2175,_path2176,_path2177,_path2178,_path2179,_path2180,_path2181,_path2182,_path2183,_path2184,_path2185,_path2186,_path2187,_path2188,_path2189,_path2190,_path2191,_path2192,_path2193,_path2194,_path2195,_path2196,_path2197,_path2198,_path2199,_path2200,_path2201,_path2202,_path2203,_path2204,_path2205,_path2206,_path2207,_path2208,_path2209,_path2210,_path2211,_path2212,_path2213,_path2214,_path2215,_path2216,_path2217,_path2218,_path2219,_path2220,_path2221,_path2222,_path2223,_path2224,_path2225,_path2226,_path2227,_path2228,_path2229,_path2230,_path2231,_path2232,_path2233,_path2234,_path2235,_path2236,_path2237,_path2238,_path2239,_path2240,_path2241,_path2242,_path2243,_path2244,_path2245,_path2246,_path2247,_path2248,_path2249,_path2250,_path2251,_path2252,_path2253,_path2254,_path2255,_path2256,_path2257,_path2258,_path2259,_path2260,_path2261,_path2262,_path2263,_path2264,_path2265,_path2266,_path2267,_path2268,_path2269,_path2270,_path2271,_path2272,_path2273,_path2274,_path2275,_path2276,_path2277,_path2278,_path2279,_path2280,_path2281,_path2282,_path2283,_path2284,_path2285,_path2286,_path2287,_path2288,_path2289,_path2290,_path2291,_path2292,_path2293,_path2294,_path2295,_path2296,_path2297,_path2298,_path2299,_path2300,_path2301,_path2302,_path2303,_path2304,_path2305,_path2306,_path2307,_path2308,_path2309,_path2310,_path2311,_path2312,_path2313,_path2314,_path2315,_path2316,_path2317,_path2318,_path2319,_path2320,_path2321,_path2322,_path2323,_path2324,_path2325,_path2326,_path2327,_path2328,_path2329,_path2330,_path2331,_path2332,_path2333,_path2334,_path2335,_path2336,_path2337,_path2338,_path2339,_path2340,_path2341,_path2342,_path2343,_path2344,_path2345,_path2346,_path2347,_path2348,_path2349,_path2350,_path2351,_path2352,_path2353,_path2354,_path2355,_path2356,_path2357,_path2358,_path2359,_path2360,_path2361,_path2362,_path2363,_path2364,_path2365,_path2366,_path2367,_path2368,_path2369,_path2370,_path2371,_path2372,_path2373,_path2374,_path2375,_path2376,_path2377,_path2378,_path2379,_path2380,_path2381,_path2382,_path2383,_path2384,_path2385,_path2386,_path2387,_path2388,_path2389,_path2390,_path2391,_path2392,_path2393,_path2394,_path2395,_path2396,_path2397,_path2398,_path2399,_path2400,_path2401,_path2402,_path2403,_path2404,_path2405,_path2406,_path2407,_path2408,_path2409,_path2410,_path2411,_path2412,_path2413,_path2414,_path2415,_path2416,_path2417,_path2418,_path2419,_path2420,_path2421,_path2422,_path2423,_path2424,_path2425,_path2426,_path2427,_path2428,_path2429,_path2430,_path2431,_path2432,_path2433,_path2434,_path2435,_path2436,_path2437,_path2438,_path2439,_path2440,_path2441,_path2442,_path2443,_path2444,_path2445,_path2446,_path2447,_path2448,_path2449,_path2450,_path2451,_path2452,_path2453,_path2454,_path2455,_path2456,_path2457,_path2458,_path2459,_path2460,_path2461,_path2462,_path2463,_path2464,_path2465,_path2466,_path2467,_path2468,_path2469,_path2470,_path2471,_path2472,_path2473,_path2474,_path2475,_path2476,_path2477,_path2478,_path2479,_path2480,_path2481,_path2482,_path2483,_path2484,_path2485,_path2486,_path2487,_path2488,_path2489,_path2490,_path2491,_path2492,_path2493,_path2494,_path2495,_path2496,_path2497,_path2498,_path2499,_path2500,_path2501,_path2502,_path2503,_path2504,_path2505,_path2506,_path2507,_path2508,_path2509,_path2510,_path2511,_path2512,_path2513,_path2514,_path2515,_path2516,_path2517,_path2518,_path2519,_path2520,_path2521,_path2522,_path2523,_path2524,_path2525,_path2526,_path2527,_path2528,_path2529,_path2530,_path2531,_path2532,_path2533,_path2534,_path2535,_path2536,_path2537,_path2538,_path2539,_path2540,_path2541,_path2542,_path2543,_path2544,_path2545,_path2546,_path2547,_path2548,_path2549,_path2550,_path2551,_path2552,_path2553,_path2554,_path2555,_path2556,_path2557,_path2558,_path2559,_path2560,_path2561,_path2562,_path2563,_path2564,_path2565,_path2566,_path2567,_path2568,_path2569,_path2570,_path2571,_path2572,_path2573,_path2574,_path2575,_path2576,_path2577,_path2578,_path2579,_path2580,_path2581,_path2582,_path2583,_path2584,_path2585,_path2586,_path2587,_path2588,_path2589,_path2590,_path2591,_path2592,_path2593,_path2594,_path2595,_path2596,_path2597,_path2598,_path2599,_path2600,_path2601,_path2602,_path2603,_path2604,_path2605,_path2606,_path2607,_path2608,_path2609,_path2610,_path2611,_path2612,_path2613,_path2614,_path2615,_path2616,_path2617,_path2618,_path2619,_path2620,_path2621,_path2622,_path2623,_path2624,_path2625,_path2626,_path2627,_path2628,_path2629,_path2630,_path2631,_path2632,_path2633,_path2634,_path2635,_path2636,_path2637,_path2638,_path2639,_path2640,_path2641,_path2642,_path2643,_path2644,_path2645,_path2646,_path2647,_path2648,_path2649,_path2650,_path2651,_path2652,_path2653,_path2654,_path2655,_path2656,_path2657,_path2658,_path2659,_path2660,_path2661,_path2662,_path2663,_path2664,_path2665,_path2666,_path2667,_path2668,_path2669,_path2670,_path2671,_path2672,_path2673,_path2674,_path2675,_path2676,_path2677,_path2678,_path2679,_path2680,_path2681,_path2682,_path2683,_path2684,_path2685,_path2686,_path2687,_path2688,_path2689,_path2690,_path2691,_path2692,_path2693,_path2694,_path2695,_path2696,_path2697,_path2698,_path2699,_path2700,_path2701,_path2702,_path2703,_path2704,_path2705,_path2706,_path2707,_path2708,_path2709,_path2710,_path2711,_path2712,_path2713,_path2714,_path2715,_path2716,_path2717,_path2718,_path2719,_path2720,_path2721,_path2722,_path2723,_path2724,_path2725,_path2726,_path2727,_path2728,_path2729,_path2730,_path2731,_path2732,_path2733,_path2734,_path2735,_path2736,_path2737,_path2738,_path2739,_path2740,_path2741,_path2742,_path2743,_path2744,_path2745,_path2746,_path2747,_path2748,_path2749,_path2750,_path2751,_path2752,_path2753,_path2754,_path2755,_path2756,_path2757,_path2758,_path2759,_path2760,_path2761,_path2762,_path2763,_path2764,_path2765,_path2766,_path2767,_path2768,_path2769,_path2770,_path2771,_path2772,_path2773,_path2774,_path2775,_path2776,_path2777,_path2778,_path2779,_path2780,_path2781,_path2782,_path2783,_path2784,_path2785,_path2786,_path2787,_path2788,_path2789,_path2790,_path2791,_path2792,_path2793,_path2794,_path2795,_path2796,_path2797,_path2798,_path2799,_path2800,_path2801,_path2802,_path2803,_path2804,_path2805,_path2806,_path2807,_path2808,_path2809,_path2810,_path2811,_path2812,_path2813,_path2814,_path2815,_path2816,_path2817,_path2818,_path2819,_path2820,_path2821,_path2822,_path2823,_path2824,_path2825,_path2826,_path2827,_path2828,_path2829,_path2830,_path2831,_path2832,_path2833,_path2834,_path2835,_path2836,_path2837,_path2838,_path2839,_path2840,_path2841,_path2842,_path2843,_path2844,_path2845,_path2846,_path2847,_path2848,_path2849,_path2850,_path2851,_path2852,_path2853,_path2854,_path2855,_path2856,_path2857,_path2858,_path2859,_path2860,_path2861,_path2862,_path2863,_path2864,_path2865,_path2866,_path2867,_path2868,_path2869,_path2870,_path2871,_path2872,_path2873,_path2874,_path2875,_path2876,_path2877,_path2878,_path2879,_path2880,_path2881,_path2882,_path2883,_path2884,_path2885,_path2886,_path2887,_path2888,_path2889,_path2890,_path2891,_path2892,_path2893,_path2894,_path2895,_path2896,_path2897,_path2898,_path2899,_path2900,_path2901,_path2902,_path2903,_path2904,_path2905,_path2906,_path2907,_path2908,_path2909,_path2910,_path2911,_path2912,_path2913,_path2914,_path2915,_path2916,_path2917,_path2918,_path2919,_path2920,_path2921,_path2922,_path2923,_path2924,_path2925,_path2926,_path2927,_path2928,_path2929,_path2930,_path2931,_path2932,_path2933,_path2934,_path2935,_path2936,_path2937,_path2938,_path2939,_path2940,_path2941,_path2942,_path2943,_path2944,_path2945,_path2946,_path2947,_path2948,_path2949,_path2950,_path2951,_path2952,_path2953,_path2954,_path2955,_path2956,_path2957,_path2958,_path2959,_path2960,_path2961,_path2962,_path2963,_path2964,_path2965,_path2966,_path2967,_path2968,_path2969,_path2970,_path2971,_path2972,_path2973,_path2974,_path2975,_path2976,_path2977,_path2978,_path2979,_path2980,_path2981,_path2982,_path2983,_path2984,_path2985,_path2986,_path2987,_path2988,_path2989,_path2990,_path2991,_path2992,_path2993,_path2994,_path2995,_path2996,_path2997,_path2998,_path2999,_path3000,_path3001,_path3002,_path3003,_path3004,_path3005,_path3006,_path3007,_path3008,_path3009,_path3010,_path3011,_path3012,_path3013,_path3014,_path3015,_path3016,_path3017,_path3018,_path3019,_path3020,_path3021,_path3022,_path3023,_path3024,_path3025,_path3026,_path3027,_path3028,_path3029,_path3030,_path3031,_path3032,_path3033,_path3034,_path3035,_path3036,_path3037,_path3038,_path3039,_path3040,_path3041,_path3042,_path3043,_path3044,_path3045,_path3046,_path3047,_path3048,_path3049,_path3050,_path3051,_path3052,_path3053,_path3054,_path3055,_path3056,_path3057,_path3058,_path3059,_path3060,_path3061,_path3062,_path3063,_path3064,_path3065,_path3066,_path3067,_path3068,_path3069,_path3070,_path3071,_path3072,_path3073,_path3074,_path3075,_path3076,_path3077,_path3078,_path3079,_path3080,_path3081,_path3082,_path3083,_path3084,_path3085,_path3086,_path3087,_path3088,_path3089,_path3090,_path3091,_path3092,_path3093,_path3094,_path3095,_path3096,_rect,_rect2,_rect3;function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r]);}return n;},_extends.apply(null,arguments);}import*as React from\"react\";function Svg3F1Cars(_ref,svgRef){let{title,titleId,...props}=_ref;return/*#__PURE__*/React.createElement(\"svg\",_extends({xmlns:\"http://www.w3.org/2000/svg\",width:626,height:626,ref:svgRef,\"aria-labelledby\":titleId},props),title?/*#__PURE__*/React.createElement(\"title\",{id:titleId},title):null,_path||(_path=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C206.58 0 413.16 0 626 0 C626 206.58 626 413.16 626 626 C419.42 626 212.84 626 0 626 C0 419.42 0 212.84 0 0 Z \",fill:\"#422C24\",transform:\"translate(0,0)\"})),_path2||(_path2=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C206.58 0 413.16 0 626 0 C626 101.31 626 202.62 626 307 C609.14336662 307 609.14336662 307 603.15234375 306.4140625 C602.50083847 306.35298813 601.84933319 306.29191376 601.17808533 306.22898865 C599.80357139 306.0997833 598.42932393 305.96771142 597.05535889 305.83279419 C593.34170053 305.46842779 589.62602953 305.12608598 585.91015625 304.78515625 C585.1581897 304.71592453 584.40622314 304.64669281 583.63146973 304.57536316 C576.38789592 303.92105652 569.13521661 303.48823252 561.875 303.0625 C546.14775018 302.09830103 530.59960826 300.17470322 515 298 C513.53554443 297.79673096 513.53554443 297.79673096 512.04150391 297.58935547 C507.41055475 296.93413724 502.7966508 296.21834289 498.19287109 295.39306641 C496.63221117 295.1133222 495.06981727 294.84317851 493.50634766 294.57958984 C490.97685091 294.14548321 488.45769952 293.67240422 485.9375 293.1875 C485.16809082 293.05859375 484.39868164 292.9296875 483.60595703 292.796875 C481.46484375 292.35546875 481.46484375 292.35546875 478 291 C476.50390625 287.86328125 476.50390625 287.86328125 476 285 C476 286.65 476 288.3 476 290 C474.68 290.33 473.36 290.66 472 291 C472.969375 291.598125 473.93875 292.19625 474.9375 292.8125 C478 295 478 295 479 298 C478.34 298.33 477.68 298.66 477 299 C477.33 299.99 477.66 300.98 478 302 C478.928125 302.0825 479.85625 302.165 480.8125 302.25 C484 303 484 303 485.875 304.5625 C487.52772156 308.14339672 487.19618208 311.07635835 487 315 C485.35 315 483.7 315 482 315 C482 313.68 482 312.36 482 311 C481.34 311.33 480.68 311.66 480 312 C479.34786708 314.02463255 479.34786708 314.02463255 479 316 C477.35 316 475.7 316 474 316 C474.33 316.99 474.66 317.98 475 319 C475.99 319.33 476.98 319.66 478 320 C478 320.66 478 321.32 478 322 C476.22880197 321.85866501 474.45804713 321.71176792 472.6875 321.5625 C471.70136719 321.48128906 470.71523438 321.40007812 469.69921875 321.31640625 C467 321 467 321 464 320 C464 319.34 464 318.68 464 318 C462.35 318 460.7 318 459 318 C458.34 315.36 457.68 312.72 457 310 C456.01 310.33 455.02 310.66 454 311 C451.42734182 311.07029121 448.88358569 311.09370832 446.3125 311.0625 C445.61060547 311.05798828 444.90871094 311.05347656 444.18554688 311.04882812 C442.45699462 311.03706927 440.72848635 311.01913454 439 311 C439 310.34 439 309.68 439 309 C439.66 308.67 440.32 308.34 441 308 C441.72159424 306.35636866 442.39351421 304.68949614 443 303 C444.9587043 303.14076315 446.91696093 303.2877676 448.875 303.4375 C449.96554687 303.51871094 451.05609375 303.59992188 452.1796875 303.68359375 C455 304 455 304 457 305 C457 304.01 457 303.02 457 302 C454.03 301.67 451.06 301.34 448 301 C448.66 300.01 449.32 299.02 450 298 C450.66 298 451.32 298 452 298 C452.12246094 297.43796875 452.24492187 296.8759375 452.37109375 296.296875 C453.0519869 293.81013481 453.99352325 291.59485224 455.0625 289.25 C455.42472656 288.45078125 455.78695313 287.6515625 456.16015625 286.828125 C456.43730469 286.22484375 456.71445312 285.6215625 457 285 C456.34 285 455.68 285 455 285 C454.67 286.65 454.34 288.3 454 290 C443.57462135 290.43040554 433.35103538 289.11152058 423 288 C423 294.6 423 301.2 423 308 C423.66 308.33 424.32 308.66 425 309 C425 310.98 425 312.96 425 315 C424.34 315 423.68 315 423 315 C422.6794276 313.12636327 422.3691902 311.25095905 422.0625 309.375 C421.88847656 308.33085937 421.71445312 307.28671875 421.53515625 306.2109375 C420.66476615 300.180721 420.39316313 294.07577258 420 288 C419.03091454 287.86298676 419.03091454 287.86298676 418.04225159 287.72320557 C411.17695141 286.75210058 404.3121137 285.77777196 397.44750977 284.80175781 C394.90237427 284.44029195 392.35713063 284.07958652 389.81176758 283.71972656 C372.84453558 281.32025232 355.91079483 278.7701528 339 276 C339 278.97 339 281.94 339 285 C329.76 284.67 320.52 284.34 311 284 C311 285.32 311 286.64 311 288 C324.2 288 337.4 288 351 288 C351.67991438 294.11922939 352.13896049 299.86756719 352.09765625 305.97265625 C352.09553383 307.18543495 352.09553383 307.18543495 352.09336853 308.42271423 C352.08783414 310.96934942 352.0752946 313.51589203 352.0625 316.0625 C352.0574765 317.80403518 352.05291509 319.54557175 352.04882812 321.28710938 C352.03788634 325.52477448 352.02066826 329.76237163 352 334 C350.35 333.67 348.7 333.34 347 333 C347 329.7 347 326.4 347 323 C345.57945312 323.03480469 344.15890625 323.06960938 342.6953125 323.10546875 C340.83855345 323.13360146 338.98178167 323.16090217 337.125 323.1875 C335.71927734 323.22520508 335.71927734 323.22520508 334.28515625 323.26367188 C333.38925781 323.27333984 332.49335938 323.28300781 331.5703125 323.29296875 C330.74289551 323.3086792 329.91547852 323.32438965 329.06298828 323.34057617 C328.38220215 323.22818604 327.70141602 323.1157959 327 323 C325 320 325 320 325 317 C332.59 317 340.18 317 348 317 C347.67 315.02 347.34 313.04 347 311 C339.08 310.67 331.16 310.34 323 310 C323 309.67 323 309.34 323 309 C330.59 308.67 338.18 308.34 346 308 C338.08 308 330.16 308 322 308 C320 302 320 302 320 298 C330.00887894 297.37722531 339.96588331 296.82292735 350 297 C349.34 295.35 348.68 293.7 348 292 C348.66 292 349.32 292 350 292 C350 291.34 350 290.68 350 290 C344.32169922 289.97535295 338.64342931 289.95716538 332.96508789 289.94506836 C331.03181415 289.94002744 329.09854424 289.93319481 327.1652832 289.92456055 C324.39273128 289.91248435 321.62022959 289.90676943 318.84765625 289.90234375 C317.97786636 289.89718246 317.10807648 289.89202118 316.21192932 289.88670349 C314.14094186 289.88650815 312.07005676 289.93791832 310 290 C309.67 290.33 309.34 290.66 309 291 C309.7425 291.04125 310.485 291.0825 311.25 291.125 C315.25097924 292.39803885 316.0376156 294.33688244 318 298 C320.10456554 303.03656711 321.42498341 307.47521569 321 313 C318.03 313.33 315.06 313.66 312 314 C312.33 311.36 312.66 308.72 313 306 C312.34 306 311.68 306 311 306 C311 308.31 311 310.62 311 313 C308.03 313 305.06 313 302 313 C302 311.35 302 309.7 302 308 C291.77 307.67 281.54 307.34 271 307 C271 307.66 271 308.32 271 309 C280.57 309 290.14 309 300 309 C300 311.31 300 313.62 300 316 C299.67 316 299.34 316 299 316 C299 314.02 299 312.04 299 310 C290.09 310 281.18 310 272 310 C272 312.64 272 315.28 272 318 C272.77714355 318 273.55428711 318 274.35498047 318 C282.90332031 318 291.45166016 318 300 318 C300.33 317.34 300.66 316.68 301 316 C303.64 316 306.28 316 309 316 C309 317.65 309 319.3 309 321 C309.66 321 310.32 321 311 321 C311 321.66 311 322.32 311 323 C311.66 323 312.32 323 313 323 C313.33 325.31 313.66 327.62 314 330 C314.66 330 315.32 330 316 330 C316 330.66 316 331.32 316 332 C316.66 332 317.32 332 318 332 C318 332.66 318 333.32 318 334 C318.66 334 319.32 334 320 334 C320 334.99 320 335.98 320 337 C318.35 337 316.7 337 315 337 C315 340.63 315 344.26 315 348 C314.67 348 314.34 348 314 348 C314 344.37 314 340.74 314 337 C311.74981858 337.47831397 309.49986133 337.95768264 307.25 338.4375 C305.37054688 338.83775391 305.37054688 338.83775391 303.453125 339.24609375 C300.95442915 339.7916235 298.47446899 340.35638812 296 341 C296.33 341.556875 296.66 342.11375 297 342.6875 C298.1309601 345.30284522 298.15662974 347.1806646 298 350 C300.64 349.67 303.28 349.34 306 349 C306 349.66 306 350.32 306 351 C306.66 351.33 307.32 351.66 308 352 C308.625 355.0625 308.625 355.0625 309 358 C309.33 355.69 309.66 353.38 310 351 C309.34 351 308.68 351 308 351 C308 350.34 308 349.68 308 349 C308.66 349 309.32 349 310 349 C310 347.35 310 345.7 310 344 C310.33 344 310.66 344 311 344 C311.19693992 346.66626359 311.38274782 349.33256639 311.5625 352 C311.61857422 352.74378906 311.67464844 353.48757813 311.73242188 354.25390625 C312.06347285 359.33002118 311.77163045 363.97011262 311 369 C310.34 369 309.68 369 309 369 C309 366.36 309 363.72 309 361 C303.06 361 297.12 361 291 361 C289.39773503 355.3920726 288.53261579 351.03689965 288.1875 345.375 C288.12369141 344.63765625 288.05988281 343.9003125 287.99414062 343.140625 C287.69726522 338.47424545 288.1149425 335.71136038 291 332 C291.515625 331.505 292.03125 331.01 292.5625 330.5 C294.49240409 328.67349571 294.49240409 328.67349571 296 324 C288.41 323.67 280.82 323.34 273 323 C273 326.63 273 330.26 273 334 C272.67 335.32 272.34 336.64 272 338 C276.62 338.33 281.24 338.66 286 339 C286.05383848 341.45862401 286.09359038 343.9160755 286.125 346.375 C286.14175781 347.07367188 286.15851563 347.77234375 286.17578125 348.4921875 C286.19344267 350.32897486 286.10303261 352.16601963 286 354 C283.4345406 356.5654594 281.52313332 356.54046087 278 357 C277.85304688 356.44570313 277.70609375 355.89140625 277.5546875 355.3203125 C276.14681837 350.51326131 276.14681837 350.51326131 272.3125 347.5625 C268.5417248 346.92217968 264.80505881 346.39362677 261 346 C261 345.67 261 345.34 261 345 C262.134375 344.87625 263.26875 344.7525 264.4375 344.625 C266.2009375 344.315625 266.2009375 344.315625 268 344 C269.15291684 341.69416631 269.15397338 340.30133113 269.20532227 337.73388672 C269.22526749 336.85312469 269.24521271 335.97236267 269.26576233 335.06491089 C269.28247482 334.11278717 269.29918732 333.16066345 269.31640625 332.1796875 C269.3475779 330.71899338 269.3475779 330.71899338 269.37937927 329.22879028 C269.44488598 326.11093353 269.50376497 322.99299097 269.5625 319.875 C269.60568415 317.76431396 269.6492984 315.65363667 269.69335938 313.54296875 C269.80137977 308.36206593 269.90044493 303.18110016 270 298 C285.84 297.505 285.84 297.505 302 297 C302.33 296.34 302.66 295.68 303 295 C301.35 295.33 299.7 295.66 298 296 C298 294.68 298 293.36 298 292 C300.97 292 303.94 292 307 292 C307 291.34 307 290.68 307 290 C295.45 290 283.9 290 272 290 C272 289.34 272 288.68 272 288 C283.88 288 295.76 288 308 288 C308 286.68 308 285.36 308 284 C300.08 284 292.16 284 284 284 C284 281.69 284 279.38 284 277 C301.49 277 318.98 277 337 277 C337 276.34 337 275.68 337 275 C336.42814972 275.00222061 335.85629944 275.00444122 335.26712036 275.00672913 C329.33026757 275.02880483 323.39342638 275.0439162 317.45654297 275.05493164 C315.23909024 275.05996909 313.02164084 275.06679922 310.80419922 275.07543945 C307.62206195 275.08753072 304.43996849 275.0932341 301.2578125 275.09765625 C299.76400558 275.10539818 299.76400558 275.10539818 298.24002075 275.11329651 C296.85881546 275.11340981 296.85881546 275.11340981 295.44970703 275.11352539 C294.6369632 275.115746 293.82421936 275.11796661 292.98684692 275.12025452 C291 275 291 275 289 274 C289 273.01 289 272.02 289 271 C294.28 271 299.56 271 305 271 C305 271.99 305 272.98 305 274 C305.66 274 306.32 274 307 274 C307 273.01 307 272.02 307 271 C307.66 271 308.32 271 309 271 C309 271.66 309 272.32 309 273 C309.66 273 310.32 273 311 273 C311 272.34 311 271.68 311 271 C315.95 270.67 320.9 270.34 326 270 C325.67 268.35 325.34 266.7 325 265 C324.74000984 262.22510499 324.81548411 259.8138673 325 257 C327.90092502 255.06604999 328.89674737 254.69868059 332.1875 254.375 C334.0746875 254.189375 334.0746875 254.189375 336 254 C335.65555119 251.52733235 335.65555119 251.52733235 335 249 C334.34 248.67 333.68 248.34 333 248 C334.32 248 335.64 248 337 248 C337 248.66 337 249.32 337 250 C337.99 249.67 338.98 249.34 340 249 C340.33 248.34 340.66 247.68 341 247 C341.99 247.66 342.98 248.32 344 249 C344 248.01 344 247.02 344 246 C324.2 246 304.4 246 284 246 C284 246.99 284 247.98 284 249 C281.36 249 278.72 249 276 249 C275.67 248.34 275.34 247.68 275 247 C268.73 246.67 262.46 246.34 256 246 C256 247.32 256 248.64 256 250 C249.84765625 249.4140625 249.84765625 249.4140625 248 249 C247.67 248.34 247.34 247.68 247 247 C244.93684183 246.06943757 244.93684183 246.06943757 242.375 245.25 C237.80084441 243.65642321 233.30214678 241.94371163 228.8125 240.125 C223.55114265 237.995419 218.26219156 235.96552475 212.9375 234 C203.11083014 230.35854827 193.54038649 226.15934433 183.9765625 221.87890625 C180.99769046 220.554309 177.99975948 219.2764934 175 218 C175 217.01 175 216.02 175 215 C174.10535034 214.87044922 174.10535034 214.87044922 173.19262695 214.73828125 C166.216991 213.558195 160.47974286 211.16846527 154.1875 208 C152.17862149 207.01254043 150.16950088 206.02557324 148.16015625 205.0390625 C147.1458252 204.53665039 146.13149414 204.03423828 145.08642578 203.51660156 C139.22118701 200.63455258 133.29969957 197.86990892 127.38745117 195.0859375 C126.56092041 194.6940625 125.73438965 194.3021875 124.8828125 193.8984375 C124.15465332 193.55474121 123.42649414 193.21104492 122.67626953 192.85693359 C121 192 121 192 120 191 C119.505 197.435 119.505 197.435 119 204 C117.68 203.67 116.36 203.34 115 203 C115 198.05 115 193.1 115 188 C113.02 187.34 111.04 186.68 109 186 C107.32836805 185.34588315 105.65984798 184.68346682 104 184 C104 183.34 104 182.68 104 182 C103.17242187 181.89816406 102.34484375 181.79632813 101.4921875 181.69140625 C97.4785573 180.89676134 93.87683452 179.51908783 90.125 177.9375 C89.38540039 177.63021973 88.64580078 177.32293945 87.88378906 177.00634766 C82.04196546 174.53728961 76.39890608 171.75027533 70.76049805 168.85253906 C65.62033999 166.23731475 60.3876046 164.0793252 54.96484375 162.10546875 C51.59873981 160.85038652 48.30200689 159.41514581 45 158 C45 163.61 45 169.22 45 175 C44.34 175 43.68 175 43 175 C43 169.06 43 163.12 43 157 C42.34 157 41.68 157 41 157 C41 162.61 41 168.22 41 174 C40.34 173.67 39.68 173.34 39 173 C39 167.06 39 161.12 39 155 C37.35 154.34 35.7 153.68 34 153 C30.41407721 151.54800929 26.83206338 150.08648186 23.25 148.625 C22.29867188 148.23828125 21.34734375 147.8515625 20.3671875 147.453125 C4.40649845 140.93766564 4.40649845 140.93766564 0 138 C0 92.46 0 46.92 0 0 Z \",fill:\"#416357\",transform:\"translate(0,0)\"})),_path3||(_path3=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.6 0 13.2 0 20 0 C20 0.66 20 1.32 20 2 C23.96 2 27.92 2 32 2 C32 1.34 32 0.68 32 0 C32.66 0 33.32 0 34 0 C34 2.97 34 5.94 34 9 C34.99 9 35.98 9 37 9 C37.21432579 15.64409958 36.51233701 21.53205867 35 28 C36.32 28.33 37.64 28.66 39 29 C39.20496094 28.44570313 39.40992188 27.89140625 39.62109375 27.3203125 C40.02521484 26.23363281 40.02521484 26.23363281 40.4375 25.125 C40.70433594 24.40570313 40.97117188 23.68640625 41.24609375 22.9453125 C42 21 42 21 43 19 C50.59 19 58.18 19 66 19 C66 19.33 66 19.66 66 20 C64.46279297 20.07347656 64.46279297 20.07347656 62.89453125 20.1484375 C61.5338294 20.22351071 60.17315356 20.29905655 58.8125 20.375 C58.13896484 20.4059375 57.46542969 20.436875 56.77148438 20.46875 C52.80321025 20.70103922 49.59270121 21.28387476 46 23 C46.41977529 25.09209605 46.41977529 25.09209605 48 27 C50.72000047 27.44377366 53.08395803 27.65105465 55.8125 27.6875 C64.662296 27.95179255 64.662296 27.95179255 69 29 C69 29.33 69 29.66 69 30 C67.02 30.66 65.04 31.32 63 32 C63 33.65 63 35.3 63 37 C63.66 37 64.32 37 65 37 C65 37.99 65 38.98 65 40 C67.31 40.33 69.62 40.66 72 41 C72 41.66 72 42.32 72 43 C73.11181641 42.65388672 73.11181641 42.65388672 74.24609375 42.30078125 C77 42 77 42 79.09765625 43.29296875 C79.74605469 43.91816406 80.39445313 44.54335938 81.0625 45.1875 C81.74441406 45.84492188 82.42632812 46.50234375 83.12890625 47.1796875 C83.74636719 47.78039062 84.36382812 48.38109375 85 49 C85.825 49.598125 86.65 50.19625 87.5 50.8125 C90.0212319 54.48929652 89.2966837 58.68160391 89 63 C89.99 63 90.98 63 92 63 C92 54.42 92 45.84 92 37 C92.33 37 92.66 37 93 37 C93.99 51.355 93.99 51.355 95 66 C94.01 65.67 93.02 65.34 92 65 C90.43881572 64.93259135 88.8749748 64.91485544 87.3125 64.9375 C86.50425781 64.94652344 85.69601563 64.95554687 84.86328125 64.96484375 C84.24839844 64.97644531 83.63351563 64.98804688 83 65 C85.31 65.33 87.62 65.66 90 66 C90.33 67.32 90.66 68.64 91 70 C92.24716797 70.18175781 92.24716797 70.18175781 93.51953125 70.3671875 C94.60621094 70.53476562 95.69289063 70.70234375 96.8125 70.875 C97.89144531 71.03742188 98.97039062 71.19984375 100.08203125 71.3671875 C103 72 103 72 106 74 C106.1875 76.625 106.1875 76.625 106 79 C105.34 77.68 104.68 76.36 104 75 C103.34 75 102.68 75 102 75 C103.8568256 80.91687367 103.8568256 80.91687367 107.90625 85.3828125 C109.29033456 86.03870332 110.69356574 86.65575951 112.11328125 87.23046875 C114 88 114 88 116.1875 89.6875 C120.16814026 92.5700326 125.56518885 92.25192824 130.3125 92.5625 C132.519375 92.706875 134.72625 92.85125 137 93 C136.67 97.95 136.34 102.9 136 108 C131.71 108 127.42 108 123 108 C123 108.66 123 109.32 123 110 C123.66 110 124.32 110 125 110 C125 110.99 125 111.98 125 113 C125.66 113 126.32 113 127 113 C127 114.98 127 116.96 127 119 C127.66 119 128.32 119 129 119 C129 120.98 129 122.96 129 125 C130.32 125.66 131.64 126.32 133 127 C133 127.66 133 128.32 133 129 C133.66 129 134.32 129 135 129 C135 130.32 135 131.64 135 133 C135.66 133 136.32 133 137 133 C138.13764351 137.26616316 139 140.56486311 139 145 C144.61 145 150.22 145 156 145 C156 145.33 156 145.66 156 146 C155.29391602 146.01981934 154.58783203 146.03963867 153.86035156 146.06005859 C150.65653006 146.15540415 147.45335199 146.26504513 144.25 146.375 C142.58324219 146.42140625 142.58324219 146.42140625 140.8828125 146.46875 C139.27792969 146.52675781 139.27792969 146.52675781 137.640625 146.5859375 C136.65610352 146.6173584 135.67158203 146.6487793 134.65722656 146.68115234 C131.92443946 147.00906671 130.24375285 147.4087408 128 149 C127.37164523 151.80388496 126.9851678 154.28828843 126.75 157.125 C126.63398437 158.25615234 126.63398437 158.25615234 126.515625 159.41015625 C126.32710141 161.27182671 126.16136762 163.13577938 126 165 C127.65 165 129.3 165 131 165 C131 165.66 131 166.32 131 167 C132.32 167.33 133.64 167.66 135 168 C130.8794254 169.99785435 127.54805635 170.17835515 123 170 C123 170.66 123 171.32 123 172 C124.13179688 171.91621094 125.26359375 171.83242188 126.4296875 171.74609375 C127.91143781 171.64293392 129.39320982 171.54008547 130.875 171.4375 C131.62136719 171.38142578 132.36773437 171.32535156 133.13671875 171.26757812 C138.7734375 170.88671875 138.7734375 170.88671875 141 172 C140.67 172.99 140.34 173.98 140 175 C136.37 175 132.74 175 129 175 C129 175.66 129 176.32 129 177 C132.63 176.67 136.26 176.34 140 176 C139.67 177.65 139.34 179.3 139 181 C142.63 181 146.26 181 150 181 C150 181.33 150 181.66 150 182 C146.04 182 142.08 182 138 182 C139.32 182.66 140.64 183.32 142 184 C142 186.31 142 188.62 142 191 C142.66 191 143.32 191 144 191 C144 190.01 144 189.02 144 188 C145.32 188.33 146.64 188.66 148 189 C147.01 189 146.02 189 145 189 C145 189.66 145 190.32 145 191 C146.32 191.66 147.64 192.32 149 193 C148.125 196.875 148.125 196.875 147 198 C146.95936168 199.66617115 146.957279 201.33388095 147 203 C148.7015625 203.2165625 148.7015625 203.2165625 150.4375 203.4375 C154 204 154 204 155 205 C156.98936867 200.09289062 157.30380669 195.61879543 157.4609375 190.390625 C158 188 158 188 159.84765625 186.6875 C162.69496214 185.77801572 165.02870725 185.74712402 168 186 C168.99 186.66 169.98 187.32 171 188 C171.1875 190.625 171.1875 190.625 171 193 C171.66 193 172.32 193 173 193 C174.8815863 202.32509434 176.47703913 211.47850555 177 221 C175.68 221 174.36 221 173 221 C173 217.7 173 214.4 173 211 C166.4 211 159.8 211 153 211 C153 211.99 153 212.98 153 214 C155.97 214.66 158.94 215.32 162 216 C162.33 217.32 162.66 218.64 163 220 C160.36241231 222.63758769 159.11186759 222.26420729 155.43359375 222.30859375 C154.30759766 222.33373047 153.18160156 222.35886719 152.02148438 222.38476562 C149.65955416 222.41951882 147.29757076 222.4508511 144.93554688 222.47851562 C137.99629054 222.64007696 132.45680664 223.41589915 126 226 C129.3 226.33 132.6 226.66 136 227 C136.33 226.34 136.66 225.68 137 225 C137 225.66 137 226.32 137 227 C144.86578203 226.95833521 152.73085627 226.8860121 160.59619141 226.79248047 C163.27145209 226.76207056 165.94610553 226.74305956 168.62158203 226.72900391 C172.46950921 226.70757097 176.31643524 226.66091483 180.1640625 226.609375 C181.35802643 226.60814636 182.55199036 226.60691772 183.78213501 226.60565186 C190.2001772 226.49272781 194.06697311 226.21020321 199 222 C204.74280361 220.6369611 209.47998746 222.27427855 214.46875 225.125 C221.39633704 227.51972144 229.06863583 225.67403535 236.0625 224.3125 C237.00569092 224.13460937 237.94888184 223.95671875 238.9206543 223.7734375 C253.89472996 220.91771571 268.88000367 217.95789096 283.6496582 214.16796875 C287.51690526 213.20852769 291.01890209 212.83463132 295 213 C295 212.34 295 211.68 295 211 C293.5459375 211.0309375 293.5459375 211.0309375 292.0625 211.0625 C289 211 289 211 288 210 C285.93473825 210.06500109 283.87159874 210.20282677 281.8125 210.375 C280.12060547 210.51035156 280.12060547 210.51035156 278.39453125 210.6484375 C275.23095988 210.9760801 272.1298025 211.43958013 269 212 C269.4921875 209.61328125 269.4921875 209.61328125 271 207 C273.87040517 206.11096331 276.19338134 205.58610995 279.125 205.1875 C281.72375 204.795625 284.3225 204.40375 287 204 C271.16 204.495 271.16 204.495 255 205 C254.67 204.34 254.34 203.68 254 203 C258.95 202.01 258.95 202.01 264 201 C264 199.68 264 198.36 264 197 C251.16220632 196.49101259 238.52531443 197.1007762 225.75964355 198.43835449 C224.18679348 198.60268452 222.61329566 198.76094366 221.03918457 198.91271973 C211.24891793 199.87201907 202.91394704 201.51925596 194 206 C195.09699219 205.98839844 196.19398438 205.97679687 197.32421875 205.96484375 C198.77864412 205.95546036 200.23307135 205.94636075 201.6875 205.9375 C202.40873047 205.92912109 203.12996094 205.92074219 203.87304688 205.91210938 C207.74108349 205.89444711 211.23202547 206.17877478 215 207 C217.43505237 207.21698487 219.87301384 207.40290745 222.3125 207.5625 C223.56675781 207.64628906 224.82101562 207.73007812 226.11328125 207.81640625 C227.06589844 207.87699219 228.01851563 207.93757812 229 208 C229 208.99 229 209.98 229 211 C222.43668532 211.70051799 216.54233931 212.11096328 210 211 C203.39306836 210.44840088 198.14283271 211.56029339 192 214 C192 212.68 192 211.36 192 210 C187.05 210 182.1 210 177 210 C177 207.36 177 204.72 177 202 C182.28 202 187.56 202 193 202 C193.33 201.01 193.66 200.02 194 199 C198.09586523 196.74666787 202.43445085 196.49504098 207.01171875 196.1484375 C207.77998489 196.08467926 208.54825104 196.02092102 209.33979797 195.95523071 C210.96247665 195.82221027 212.58547208 195.69300531 214.20874023 195.56738281 C216.66277413 195.37691904 219.11551198 195.17387303 221.56835938 194.96875 C229.39803732 194.32970242 237.13737538 193.82474393 245 194 C245 191.36 245 188.72 245 186 C240.03558325 186.3078084 235.07424815 186.64456756 230.11352539 187.00708008 C228.4294869 187.12618281 226.74489022 187.23766843 225.05981445 187.34106445 C211.74920369 188.09797398 211.74920369 188.09797398 200 194 C198.65411566 194.7852049 197.30023215 195.5569125 195.9375 196.3125 C194.968125 196.869375 193.99875 197.42625 193 198 C193 197.01 193 196.02 193 195 C188.38 195 183.76 195 179 195 C178.67 195.99 178.34 196.98 178 198 C177.67 198 177.34 198 177 198 C169.23567368 168.36155639 169.23567368 168.36155639 170 155 C186.33729094 155.93496545 202.66828489 156.97319591 219 158 C219 158.33 219 158.66 219 159 C211.74 159 204.48 159 197 159 C197 160.65 197 162.3 197 164 C196.67 164 196.34 164 196 164 C196 162.35 196 160.7 196 159 C195.34 159 194.68 159 194 159 C194.05800781 159.83144531 194.11601562 160.66289062 194.17578125 161.51953125 C194.24345703 163.14955078 194.24345703 163.14955078 194.3125 164.8125 C194.37050781 165.89144531 194.42851562 166.97039062 194.48828125 168.08203125 C194 171 194 171 191.7421875 172.765625 C190.38480469 173.37664062 190.38480469 173.37664062 189 174 C188.28457031 174.33902344 187.56914062 174.67804688 186.83203125 175.02734375 C185.48014941 175.63660578 184.12594513 176.24073934 182.76953125 176.83984375 C180.60154382 178.26123948 179.96451086 179.63076564 179 182 C180.66289063 182.07347656 180.66289063 182.07347656 182.359375 182.1484375 C183.82294065 182.22349215 185.28648112 182.29903881 186.75 182.375 C187.47960937 182.4059375 188.20921875 182.436875 188.9609375 182.46875 C192.73942656 182.6748494 195.77946668 182.91512843 199 185 C198.34 186.65 197.68 188.3 197 190 C197.78761719 189.65066406 198.57523437 189.30132812 199.38671875 188.94140625 C214.18332309 182.7601029 229.23765947 183.86205034 245 184 C245.12375 183.05125 245.2475 182.1025 245.375 181.125 C246 178 246 178 248 176 C247.67 177.98 247.34 179.96 247 182 C255.415 182.495 255.415 182.495 264 183 C264.33 180.03 264.66 177.06 265 174 C263.97229492 173.9906543 262.94458984 173.98130859 261.88574219 173.97167969 C258.01618536 173.93133966 254.14738746 173.86546754 250.27832031 173.79248047 C248.61435815 173.76452282 246.9502694 173.74318501 245.28613281 173.72900391 C235.18416474 173.63783091 226.43775588 173.07422248 217 169 C222.78142935 165.14571377 226.07272076 164.65438195 232.96875 164.34375 C236.17404511 164.21432319 236.17404511 164.21432319 239 162 C237.02 161.34 235.04 160.68 233 160 C233 159.34 233 158.68 233 158 C230.36 158 227.72 158 225 158 C225 157.67 225 157.34 225 157 C226.98 157 228.96 157 231 157 C231 156.34 231 155.68 231 155 C229.79166504 155.00523682 228.58333008 155.01047363 227.33837891 155.01586914 C222.76465627 155.03425813 218.19093674 155.04555305 213.6171875 155.05493164 C211.65461677 155.05989571 209.6920496 155.06666917 207.72949219 155.07543945 C195.11298514 155.1303219 182.58825995 154.86758248 170 154 C170 152.35 170 150.7 170 149 C175.05233356 148.82873446 179.62172068 149.0499694 184.59375 149.96875 C193.63227558 151.40883176 202.68107394 151.46014492 211.8125 151.625 C213.58400142 151.66328169 215.35548626 151.70233889 217.12695312 151.7421875 C221.41783037 151.83705004 225.708794 151.92147313 230 152 C230 151.34 230 150.68 230 150 C228.39282104 150.02356567 228.39282104 150.02356567 226.75317383 150.04760742 C187.54564132 150.5729306 187.54564132 150.5729306 170 147 C170 146.34 170 145.68 170 145 C173.08454131 142.94363913 174.84809674 142.48865646 178.4375 141.875 C179.38496094 141.70742188 180.33242188 141.53984375 181.30859375 141.3671875 C184 141 184 141 188 141 C188 140.01 188 139.02 188 138 C181.4 138 174.8 138 168 138 C168 135.36 168 132.72 168 130 C181.86 130.99 181.86 130.99 196 132 C196 131.01 196 130.02 196 129 C203.3404313 128.89067443 207.55869679 130.61564655 213.36328125 135.0078125 C222.07477589 141.99009658 222.07477589 141.99009658 232.5625 144.0625 C234.04890962 143.74008027 235.52801363 143.38291537 237 143 C239.01929373 142.63715816 241.04019245 142.2831495 243.0625 141.9375 C244.70891723 141.628091 246.35497095 141.31670653 248 141 C248 140.34 248 139.68 248 139 C243.38 139.33 238.76 139.66 234 140 C234 139.34 234 138.68 234 138 C238.95 137.01 238.95 137.01 244 136 C243.67 134.02 243.34 132.04 243 130 C243.66 130 244.32 130 245 130 C245 124.72 245 119.44 245 114 C243.35 115.65 241.7 117.3 240 119 C238.93217615 119.91426511 237.85193589 120.81465078 236.75 121.6875 C233.98257806 123.7042322 233.98257806 123.7042322 233 126 C231.02 126 229.04 126 227 126 C227 126.66 227 127.32 227 128 C228.32 128.33 229.64 128.66 231 129 C214.9023274 129.81301377 203.66656469 126.97735965 190 118 C190.66 117.67 191.32 117.34 192 117 C192.99 117.33 193.98 117.66 195 118 C198.78730343 118.2572155 202.57988486 118.23135079 206.375 118.25 C207.4165625 118.270625 208.458125 118.29125 209.53125 118.3125 C216.79594224 118.4539339 216.79594224 118.4539339 223 115 C227.47521386 110.14119638 229.15223181 105.72745998 229.625 99.1875 C229.69976562 98.21167969 229.77453125 97.23585938 229.8515625 96.23046875 C229.90054687 95.49441406 229.94953125 94.75835937 230 94 C230.66 94.33 231.32 94.66 232 95 C232 95.66 232 96.32 232 97 C232.66 97 233.32 97 234 97 C234 96.34 234 95.68 234 95 C235.63631892 93.95107762 237.30485863 92.95093297 239 92 C239.33 91.67 239.66 91.34 240 91 C230.43 91 220.86 91 211 91 C211 91.66 211 92.32 211 93 C216.28 93 221.56 93 227 93 C229.09182531 97.18365063 228.42935408 102.44407619 228 107 C225.84196841 111.47591738 223.15659498 114.30944731 219 117 C216.13071467 117.55739365 213.35164035 117.52143261 210.4375 117.4375 C209.24302246 117.41876831 209.24302246 117.41876831 208.02441406 117.3996582 C199.28314208 117.14116076 190.5279366 115.67952816 183 111 C181.25100412 107.50200824 181.63084068 103.28352502 181.48242188 99.41015625 C181.38638447 95.25225443 181.38638447 95.25225443 179 92 C179 90.68 179 89.36 179 88 C181.92946726 86.31202771 183.82793694 85.77875311 187.19140625 86.0234375 C188.03743408 86.07491943 188.88346191 86.12640137 189.75512695 86.17944336 C190.68156006 86.24397705 191.60799316 86.30851074 192.5625 86.375 C200.12650144 86.82134056 207.65887068 87.0455217 215.234375 87.00390625 C216.02500839 86.99987793 216.81564178 86.99584961 217.63023376 86.99169922 C221.60151788 86.96744849 225.5722144 86.92738869 229.54321289 86.87451172 C231.01448374 86.86271216 232.48575649 86.85114541 233.95703125 86.83984375 C235.26647705 86.82300537 236.57592285 86.80616699 237.92504883 86.78881836 C241 87 241 87 243 89 C240.73001902 82.88856559 238.09795879 77.04576656 232 74 C224.01565619 72.16206368 215.57278536 72.73849995 207.4375 72.875 C205.16601496 72.87694352 202.89452134 72.87438451 200.62304688 72.8671875 C195.08086796 72.85939074 189.54136895 72.90775184 184 73 C184 74.32 184 75.64 184 77 C182.515 77.495 182.515 77.495 181 78 C181.875 72.125 181.875 72.125 183 71 C184.68608966 70.92794489 186.37500659 70.91613932 188.0625 70.9375 C189.44115234 70.95103516 189.44115234 70.95103516 190.84765625 70.96484375 C191.91306641 70.98224609 191.91306641 70.98224609 193 71 C193 68.36 193 65.72 193 63 C193.33 63.66 193.66 64.32 194 65 C199.94 65.33 205.88 65.66 212 66 C212 67.65 212 69.3 212 71 C212.66 71 213.32 71 214 71 C213.67 68.69 213.34 66.38 213 64 C207.06 63.67 201.12 63.34 195 63 C196.485 62.505 196.485 62.505 198 62 C197.99214478 61.16976318 197.99214478 61.16976318 197.98413086 60.32275391 C197.81720312 40.01673439 197.81720312 40.01673439 199 32 C200 31 200 31 203.0625 30.9375 C204.5165625 30.9684375 204.5165625 30.9684375 206 31 C206.12117188 31.71027344 206.24234375 32.42054688 206.3671875 33.15234375 C206.53476562 34.07144531 206.70234375 34.99054688 206.875 35.9375 C207.03742188 36.85402344 207.19984375 37.77054687 207.3671875 38.71484375 C207.57601563 39.46894531 207.78484375 40.22304688 208 41 C208.66 41.33 209.32 41.66 210 42 C210 42.99 210 43.98 210 45 C210.84304688 45.12117188 211.68609375 45.24234375 212.5546875 45.3671875 C213.65039062 45.53476562 214.74609375 45.70234375 215.875 45.875 C216.96554687 46.03742188 218.05609375 46.19984375 219.1796875 46.3671875 C222 47 222 47 224 49 C227.63925209 50.14569047 231.29869526 51.07467382 235 52 C235 48.37 235 44.74 235 41 C237.34852528 39.82573736 238.73774065 39.88491827 241.3515625 39.90234375 C242.62773438 39.90717773 242.62773438 39.90717773 243.9296875 39.91210938 C244.81914062 39.92048828 245.70859375 39.92886719 246.625 39.9375 C247.5221875 39.94201172 248.419375 39.94652344 249.34375 39.95117188 C251.56256648 39.96297409 253.78125018 39.97943845 256 40 C256 40.33 256 40.66 256 41 C246.1 41.495 246.1 41.495 236 42 C236 42.99 236 43.98 236 45 C236.804375 44.67 237.60875 44.34 238.4375 44 C245.72209082 41.95520258 251.307147 42.58237293 258 46 C258 46.66 258 47.32 258 48 C259.98 48.33 261.96 48.66 264 49 C264.33 48.34 264.66 47.68 265 47 C265.33 48.32 265.66 49.64 266 51 C262.37 51 258.74 51 255 51 C255 51.66 255 52.32 255 53 C255.66 53 256.32 53 257 53 C257.81674796 54.74802146 258.62823451 56.49850189 259.4375 58.25 C259.88996094 59.22453125 260.34242188 60.1990625 260.80859375 61.203125 C262 64 262 64 262.53515625 66.296875 C262.68855469 66.85890625 262.84195312 67.4209375 263 68 C263.66 68.33 264.32 68.66 265 69 C265 69.66 265 70.32 265 71 C273.58 71.66 282.16 72.32 291 73 C291 69.92841921 290.50755581 67.53227995 289.75 64.5625 C289.51796875 63.61503906 289.2859375 62.66757812 289.046875 61.69140625 C287.84157483 58.59270543 286.57137599 57.08540952 284 55 C279.04580308 53.45688948 274.13978691 52.64247336 269 52 C268.9175 50.88625 268.835 49.7725 268.75 48.625 C268.42126213 44.94246056 268.42126213 44.94246056 265.9375 43.5625 C265.298125 43.376875 264.65875 43.19125 264 43 C264.99 43 265.98 43 267 43 C267 42.34 267 41.68 267 41 C266.34 40.67 265.68 40.34 265 40 C270.13314424 35.16880542 275.12065622 35.59199004 281.953125 35.6640625 C285 36 285 36 287 38 C287 38.99 287 39.98 287 41 C284.36 41 281.72 41 279 41 C279.33 41.66 279.66 42.32 280 43 C282.47623996 43.41475483 284.87984485 43.70690182 287.375 43.9375 C288.91824399 44.10424283 290.46120533 44.27361787 292.00390625 44.4453125 C292.81617676 44.53458008 293.62844727 44.62384766 294.46533203 44.71582031 C298.75579694 45.19685491 303.03561577 45.7226564 307.3125 46.3125 C308.11800293 46.40587646 308.92350586 46.49925293 309.75341797 46.59545898 C313.76680219 47.17251625 315.51386654 47.51999105 318.48046875 50.44921875 C319.95181653 52.91911617 320.93486718 55.33716794 322 58 C322.598125 58.721875 323.19625 59.44375 323.8125 60.1875 C325.71146738 62.62902949 326.8892328 64.66747783 328.2109375 67.42578125 C331.16832769 73.42915832 334.45324371 79.21400229 337.8125 85 C338.39064453 86.01578125 338.96878906 87.0315625 339.56445312 88.078125 C345.11939241 97.65348995 351.40594513 108.44031879 362 113 C366.68225676 113.93645135 371.24338751 114 376 114 C376.66 113.34 377.32 112.68 378 112 C381 112 381 112 383.5625 114.375 C384.366875 115.24125 385.17125 116.1075 386 117 C388.62962635 119.62962635 390.53862278 119.25933875 394.12011719 119.27734375 C394.94672852 119.26832031 395.77333984 119.25929688 396.625 119.25 C397.47223633 119.24613281 398.31947266 119.24226563 399.19238281 119.23828125 C406.05148973 119.14597177 412.70704209 118.45835349 419.484375 117.4375 C423.02786989 116.99653175 426.43319059 116.92683468 430 117 C430 116.34 430 115.68 430 115 C429.01 115 428.02 115 427 115 C426.67 114.01 426.34 113.02 426 112 C421.05 112 416.1 112 411 112 C410.67 112.66 410.34 113.32 410 114 C403.73 114.33 397.46 114.66 391 115 C390.67 115.99 390.34 116.98 390 118 C389 116 389 116 389 110 C401.21 110 413.42 110 426 110 C426 106.37 426 102.74 426 99 C421.89567666 99.14215416 417.79158063 99.28862431 413.6875 99.4375 C412.53958984 99.47681641 411.39167969 99.51613281 410.20898438 99.55664062 C403.8000618 99.79266327 397.48476172 100.18869073 391.12036133 100.99633789 C390.07078247 100.99815063 390.07078247 100.99815063 389 101 C386.6849061 98.6849061 386.35239006 97.24734186 385.5 94.125 C384.60960156 90.8827883 383.71984626 87.90549784 382 85 C378.23843329 83.11921665 373.62993399 83.64271601 369.48046875 83.4765625 C364.95933787 82.85750754 362.30706318 81.59930581 359.41015625 78.0546875 C358.96542969 77.33539063 358.52070312 76.61609375 358.0625 75.875 C356.0573077 72.68116279 353.99308683 69.57657053 351.8125 66.5 C348.45220463 61.47278645 346 56.11716893 346 50 C355.89613084 49.78894508 365.2648233 49.89915262 375 52 C375.7013076 58.59229145 373.49602186 62.49376557 370 68 C369.01 68 368.02 68 367 68 C367 68.99 367 69.98 367 71 C367.804375 71.2475 368.60875 71.495 369.4375 71.75 C372.25312846 72.73793981 374.85975968 73.81960102 377.5625 75.0625 C380.69859538 76.48751631 383.55470799 77.55544619 387 78 C387 77.34 387 76.68 387 76 C383.04 75.505 383.04 75.505 379 75 C379 74.67 379 74.34 379 74 C380.98 74 382.96 74 385 74 C385.03867188 72.948125 385.03867188 72.948125 385.078125 71.875 C385.55634603 63.8756664 386.94473662 57.61872345 392.875 51.9375 C396 50 396 50 399.125 49.875 C403.33993997 51.52432434 405.05250557 53.86813753 406.875 57.96875 C408.16486161 61.29262414 409.13298765 64.53195059 410 68 C418.25 69.32 426.5 70.64 435 72 C435.33 70.35 435.66 68.7 436 67 C436.33 67 436.66 67 437 67 C438.8445374 74.18052061 439.1927684 81.18937768 439.1875 88.5625 C439.18814453 89.45549805 439.18878906 90.34849609 439.18945312 91.26855469 C439.13496741 97.73006518 439.13496741 97.73006518 438 100 C437.21625 99.835 436.4325 99.67 435.625 99.5 C433.11791961 98.9376293 433.11791961 98.9376293 431 99 C432.10794922 99.45439453 432.10794922 99.45439453 433.23828125 99.91796875 C439.45931544 102.48701082 445.61717756 105.15128944 451.72265625 107.984375 C454.08708343 109.08324485 454.08708343 109.08324485 457 110 C457 119.9 457 129.8 457 140 C452.936875 140.12375 448.87375 140.2475 444.6875 140.375 C436.55299406 140.63217561 428.43941422 140.93981898 420.3203125 141.51171875 C402.59580985 142.75104835 384.92039871 143.23607046 367.15048218 143.29855347 C364.63338981 143.30770013 362.1163093 143.32163303 359.59927368 143.34085083 C343.15375024 143.45202788 327.26454361 142.46670045 311 140 C310.67 136.04 310.34 132.08 310 128 C313.98523032 128.50237543 317.96857728 129.01761018 321.95068359 129.54418945 C323.302126 129.72112955 324.65401321 129.89470925 326.00634766 130.06469727 C327.96373536 130.31135994 329.91939507 130.5716115 331.875 130.83203125 C333.04804688 130.98389893 334.22109375 131.1357666 335.4296875 131.29223633 C338.23601817 131.84855147 340.23355849 132.46345605 342.80859375 133.5546875 C347.59838826 135.43858839 352.09514765 135.38064896 357.1875 135.29296875 C358.60216553 135.28660149 358.60216553 135.28660149 360.04541016 135.28010559 C363.03057518 135.2634357 366.01504218 135.22580575 369 135.1875 C371.03514644 135.17243804 373.07030355 135.15875229 375.10546875 135.14648438 C380.0705777 135.11357055 385.03517087 135.06186999 390 135 C390 134.67 390 134.34 390 134 C391.11375 133.87625 392.2275 133.7525 393.375 133.625 C397.03103677 133.3534187 397.03103677 133.3534187 399 131 C401.91473199 130.76479691 404.76838743 130.63074194 407.6875 130.5625 C419.17175492 130.13498156 429.88012642 127.83051327 441 125 C442.99601306 124.6435691 444.994845 124.30077325 447 124 C443.7 123.67 440.4 123.34 437 123 C438.32 122.67 439.64 122.34 441 122 C441 121.34 441 120.68 441 120 C434.45553244 118.69110649 428.54327778 118.65778917 422 120 C419.66698014 120.03824623 417.33288492 120.04574284 415 120 C415 120.66 415 121.32 415 122 C407.64424835 122.70776992 400.3905476 123.14715692 393 123 C392.67 124.32 392.34 125.64 392 127 C391.67 126.34 391.34 125.68 391 125 C390.67 125.66 390.34 126.32 390 127 C388.68 127 387.36 127 386 127 C382 121.88888889 382 121.88888889 382 119 C378.7 119 375.4 119 372 119 C372.66 122.3 373.32 125.6 374 129 C370.37 129 366.74 129 363 129 C363 129.66 363 130.32 363 131 C363.66 131.33 364.32 131.66 365 132 C357.66250018 131.32060187 350.21754971 130.14503314 344 126 C343.234375 124.125 343.234375 124.125 342.75 122 C342.49476563 120.948125 342.49476563 120.948125 342.234375 119.875 C342 118 342 118 343 116 C342.01 116 341.02 116 340 116 C339.01 113.03 338.02 110.06 337 107 C336.01604248 106.83395264 335.03208496 106.66790527 334.01831055 106.49682617 C330.36528476 105.87709601 326.71514918 105.24159714 323.06567383 104.60131836 C321.48633912 104.32650342 319.90625489 104.05596013 318.32543945 103.78979492 C316.05208726 103.40626048 313.78188137 103.00739872 311.51171875 102.60546875 C310.45219246 102.43183052 310.45219246 102.43183052 309.3712616 102.25468445 C305.30225074 101.51600649 304.04112648 101.04112648 301 98 C304.96 98 308.92 98 313 98 C313 97.34 313 96.68 313 96 C311.10388566 96.14213297 309.20811606 96.28886907 307.3125 96.4375 C305.72888672 96.55931641 305.72888672 96.55931641 304.11328125 96.68359375 C301.10928299 96.92920469 301.10928299 96.92920469 298.64208984 97.51586914 C295.89340937 98.01953144 293.40521091 98.09787509 290.61328125 98.0625 C289.59169922 98.05476563 288.57011719 98.04703125 287.51757812 98.0390625 C285.40038771 98.01325884 283.28320013 97.9872216 281.16601562 97.9609375 C274.7558451 97.91271051 268.33822184 97.91731442 262 99 C261.67 99.33 261.34 99.66 261 100 C261.32613281 100.79921875 261.65226562 101.5984375 261.98828125 102.421875 C264.94510789 109.85319152 267.26964302 117.19229166 269 125 C271.97 125 274.94 125 278 125 C278 125.66 278 126.32 278 127 C280.31 127.33 282.62 127.66 285 128 C285.33 128.99 285.66 129.98 286 131 C288.50447516 132.21869929 288.50447516 132.21869929 291 133 C291.33 131.68 291.66 130.36 292 129 C294.15473199 130.5801368 296.10646634 132.10646634 298 134 C300.06874034 134.6425235 300.06874034 134.6425235 302 135 C302 135.66 302 136.32 302 137 C302.66 137 303.32 137 304 137 C305.26439145 139.52878289 305.29047383 141.62012127 305.5 144.4375 C305.73306642 147.56308718 306.00474943 150.01424829 307 153 C307.66 153 308.32 153 309 153 C309.66 156.63 310.32 160.26 311 164 C311.33 164 311.66 164 312 164 C312.35368021 171.12600133 311.95671348 176.47059106 309 183 C303.30600664 181.61963797 300.53814399 177.32181184 297 173 C295.85712031 171.66413405 294.71152065 170.33058759 293.5625 169 C292.716875 168.01 291.87125 167.02 291 166 C292.44225601 169.3380049 294.25221856 171.43843466 296.875 173.9375 C299.83574707 176.81258351 302.43229893 179.76659866 305 183 C305.99 183.66 306.98 184.32 308 185 C308.34057617 187.70556641 308.34057617 187.70556641 308.29296875 191.1015625 C308.28330078 192.31328125 308.27363281 193.525 308.26367188 194.7734375 C308.2259668 196.67996094 308.2259668 196.67996094 308.1875 198.625 C308.17396484 199.90375 308.16042969 201.1825 308.14648438 202.5 C308.11103196 205.66708282 308.06161441 208.83333541 308 212 C308.78785889 212.14115234 309.57571777 212.28230469 310.38745117 212.42773438 C314.30873942 213.28667276 316.08791676 215.29108535 319 218 C319 218.33 319 218.66 319 219 C317.35369672 218.85957123 315.70795821 218.71250671 314.0625 218.5625 C312.68771484 218.44068359 312.68771484 218.44068359 311.28515625 218.31640625 C309 218 309 218 308 217 C307.67 218.98 307.34 220.96 307 223 C304.03 223 301.06 223 298 223 C298 223.66 298 224.32 298 225 C298.515625 225.0825 299.03125 225.165 299.5625 225.25 C306.9525432 227.52385945 312.59941381 232.64839872 318 238 C318 238.33 318 238.66 318 239 C316.79843262 239.02916504 315.59686523 239.05833008 314.35888672 239.08837891 C289.21611483 239.73855688 264.30598291 241.18591003 239.3125 244.0625 C238.1333905 244.19819397 236.95428101 244.33388794 235.73944092 244.47369385 C222.33788813 246.00787623 222.33788813 246.00787623 209 248 C205.7552943 248.3428718 202.50614089 248.54680095 199.25 248.75 C198.38761719 248.81832031 197.52523438 248.88664063 196.63671875 248.95703125 C195.81300781 249.00730469 194.98929687 249.05757812 194.140625 249.109375 C193.01962402 249.18623535 193.01962402 249.18623535 191.87597656 249.26464844 C191.2569043 249.17731445 190.63783203 249.08998047 190 249 C187.70986347 245.5647952 187.82157027 244.014669 188 240 C188.83144531 239.86722656 189.66289062 239.73445312 190.51953125 239.59765625 C192.14955078 239.33275391 192.14955078 239.33275391 193.8125 239.0625 C194.89144531 238.88847656 195.97039062 238.71445312 197.08203125 238.53515625 C200.04933356 238.06128079 200.04933356 238.06128079 203 237 C203 236.34 203 235.68 203 235 C210.26 233.35 217.52 231.7 225 230 C221.803125 230.28875 218.60625 230.5775 215.3125 230.875 C195.25302371 232.57288632 175.11018106 233.18218159 155 234 C155.18464366 238.34184202 155.18464366 238.34184202 157 242 C157.0979057 243.49738124 157.12974864 244.99942892 157.125 246.5 C157.12757813 247.3146875 157.13015625 248.129375 157.1328125 248.96875 C157 251 157 251 156 252 C148.03086583 252.8977745 140.01408459 253.16619069 132 253 C130.34502644 249.69005287 130.89915665 246.00877 130.9375 242.375 C130.94201172 241.57320312 130.94652344 240.77140625 130.95117188 239.9453125 C130.96296832 237.96350994 130.98090395 235.98174567 131 234 C130.01386719 234.01740234 130.01386719 234.01740234 129.0078125 234.03515625 C123.68177389 234.08567423 118.40167708 233.99286461 113.08569336 233.64111328 C104.25037362 233.06072746 95.4157176 232.80003345 86.5625 232.6875 C85.37068115 232.65785156 84.1788623 232.62820313 82.95092773 232.59765625 C81.2755896 232.58605469 81.2755896 232.58605469 79.56640625 232.57421875 C78.56552979 232.55963623 77.56465332 232.54505371 76.53344727 232.5300293 C73.87909708 232.76978937 73.87909708 232.76978937 72.21459961 234.83911133 C70.87240187 237.06750198 70.87240187 237.06750198 70 240 C81.22 240 92.44 240 104 240 C104 249 104 249 103 252 C87.49230769 252.24615385 87.49230769 252.24615385 83 250 C81.47363313 249.80266879 79.94059972 249.65559858 78.40625 249.53515625 C77.45621094 249.45716797 76.50617188 249.37917969 75.52734375 249.29882812 C74.52832031 249.22083984 73.52929688 249.14285156 72.5 249.0625 C65.55840206 248.51347403 58.64033248 247.85882398 51.72265625 247.0625 C40.48009616 245.78760674 29.21839912 244.80467971 17.9375 243.9375 C16.78923737 243.8490683 15.64097473 243.7606366 14.45791626 243.66952515 C-12.02038573 241.68963494 -38.49004647 241.39865158 -65.03062439 241.20759583 C-66.49567671 241.19699543 -67.960729 241.18639062 -69.42578125 241.17578125 C-70.49746898 241.16820832 -70.49746898 241.16820832 -71.59080696 241.16048241 C-81.24675937 241.08875358 -90.89290521 240.90795545 -100.54296875 240.54296875 C-101.56610672 240.50488602 -102.58924469 240.46680328 -103.64338684 240.42756653 C-121.31361976 239.68638024 -121.31361976 239.68638024 -123 238 C-126.65370964 237.97338609 -130.29518579 238.02824826 -133.94726562 238.12695312 C-139.32647066 238.20234182 -143.83129492 237.50975922 -149 236 C-150.125 232.25 -150.125 232.25 -149 230 C-150.65 229.67 -152.3 229.34 -154 229 C-153.67 227.02 -153.34 225.04 -153 223 C-154.65 222.67 -156.3 222.34 -158 222 C-158 220.68 -158 219.36 -158 218 C-156.7934375 217.5978125 -156.7934375 217.5978125 -155.5625 217.1875 C-154.2940625 216.5996875 -154.2940625 216.5996875 -153 216 C-152.67 215.01 -152.34 214.02 -152 213 C-149.82117341 211.699208 -147.72175141 210.5801158 -145.4375 209.5 C-144.80142822 209.19030273 -144.16535645 208.88060547 -143.51000977 208.56152344 C-140.20300276 206.97227252 -136.88779062 205.49741276 -133.4375 204.25 C-127.7618091 202.31012739 -127.7618091 202.31012739 -124 198 C-121.96834222 196.9653698 -119.89416028 196.01381054 -117.8046875 195.1015625 C-117.17901886 194.82533051 -116.55335022 194.54909851 -115.90872192 194.26449585 C-113.90012282 193.37850437 -111.88791309 192.50114134 -109.875 191.625 C-107.88392801 190.75511418 -105.89378323 189.88327906 -103.9055481 189.00692749 C-102.08597288 188.20537641 -100.26351893 187.41036966 -98.44091797 186.61572266 C-95.94172863 185.44219952 -93.64488218 184.24312435 -91.27783203 182.84912109 C-88.03827532 181.02159223 -85.66927955 180.35797849 -82 180 C-82 179.34 -82 178.68 -82 178 C-83.65 177.67 -85.3 177.34 -87 177 C-87 176.01 -87 175.02 -87 174 C-83.54655927 170.67938391 -79.42630064 169.71873434 -74.9296875 168.38671875 C-71.00915151 167.16411258 -67.57071738 165.83370357 -64.0625 163.6875 C-54.32636992 158.03371218 -42.4769146 155.12631386 -31.578125 152.640625 C-28.67463269 151.91915115 -25.83825878 150.94608626 -23 150 C-22.67 145.05 -22.34 140.1 -22 135 C-23.546875 135.309375 -25.09375 135.61875 -26.6875 135.9375 C-37.08061875 137.81625608 -47.45876609 138.17093893 -58 138 C-57.67 137.01 -57.34 136.02 -57 135 C-58.32 135 -59.64 135 -61 135 C-61 134.34 -61 133.68 -61 133 C-55.25 132.875 -55.25 132.875 -53 134 C-53 133.01 -53 132.02 -53 131 C-51.02 131 -49.04 131 -47 131 C-47 130.01 -47 129.02 -47 128 C-42.01657457 126.97775889 -37.07454515 126.6367694 -32 127 C-31.67 127.33 -31.34 127.66 -31 128 C-29.14712498 128.07226502 -27.29166122 128.0838122 -25.4375 128.0625 C-24.42558594 128.05347656 -23.41367188 128.04445313 -22.37109375 128.03515625 C-21.58863281 128.02355469 -20.80617187 128.01195312 -20 128 C-20.0721875 129.05316406 -20.144375 130.10632813 -20.21875 131.19140625 C-20.84813736 140.81396487 -21.12633389 150.35651306 -21 160 C-19.29516323 158.29516323 -19.8303429 156.066528 -19.7890625 153.734375 C-19.76287842 152.62618408 -19.73669434 151.51799316 -19.7097168 150.3762207 C-19.66778198 148.58124146 -19.66778198 148.58124146 -19.625 146.75 C-19.35040779 137.88014233 -18.89510151 129.10821275 -17.6875 120.3125 C-17.58195801 119.48395508 -17.47641602 118.65541016 -17.36767578 117.80175781 C-16.3472097 110.99025168 -13.79936987 105.6990548 -10 100 C-10.53802246 100.21148682 -11.07604492 100.42297363 -11.63037109 100.64086914 C-18.23374331 103.06257949 -24.09660954 103.43388307 -31.0703125 103.43945312 C-36.88754873 103.57638482 -40.20693829 104.6448568 -45 108 C-45.65484375 108.74765625 -46.3096875 109.4953125 -46.984375 110.265625 C-49 112 -49 112 -52.453125 112.171875 C-54.33257812 111.96304688 -54.33257812 111.96304688 -56.25 111.75 C-58.14492187 111.55664062 -58.14492187 111.55664062 -60.078125 111.359375 C-61.52445313 111.18148437 -61.52445313 111.18148437 -63 111 C-62.5153125 110.030625 -62.030625 109.06125 -61.53125 108.0625 C-61.05123535 107.102229 -61.05123535 107.102229 -60.56152344 106.12255859 C-59.84654807 104.69293673 -59.13104269 103.26357981 -58.41503906 101.83447266 C-56.54039576 98.09091641 -54.67420595 94.34367058 -52.828125 90.5859375 C-52.47943359 89.87953125 -52.13074219 89.173125 -51.77148438 88.4453125 C-51.10800482 87.10059294 -50.44766406 85.75431849 -49.79101562 84.40625 C-47.12804038 79.02447193 -44.4883471 73.8010511 -39.625 70.125 C-35.68648103 66.92654831 -32.87618764 63.15098143 -30 59 C-29.01773438 59.63615234 -29.01773438 59.63615234 -28.015625 60.28515625 C-25.02199582 62.20902811 -22.01433143 64.10872652 -19 66 C-17.9584375 66.65613281 -16.916875 67.31226563 -15.84375 67.98828125 C-8.41559567 72.54087174 -8.41559567 72.54087174 0 74 C0 71.69 0 69.38 0 67 C0.66 67 1.32 67 2 67 C2.33 65.35 2.66 63.7 3 62 C1.68 62 0.36 62 -1 62 C-1.92017937 49.40717489 -1.92017937 49.40717489 0.3359375 45.95703125 C2 44.625 2 44.625 5 43 C5.66 43.33 6.32 43.66 7 44 C9.33189345 44.26955833 11.66321507 44.44507377 14.00390625 44.62109375 C14.66261719 44.74613281 15.32132813 44.87117188 16 45 C16.33 45.66 16.66 46.32 17 47 C19.75069134 47.39302445 19.75069134 47.39302445 22.9375 47.5 C28.77847309 47.77847309 28.77847309 47.77847309 31 50 C30.34 50 29.68 50 29 50 C29.29648438 51.20527344 29.59296875 52.41054688 29.8984375 53.65234375 C31.28622992 59.89740962 31.93586866 66.20913094 32.625 72.5625 C32.82609375 74.36170898 32.82609375 74.36170898 33.03125 76.19726562 C33.35852543 79.13105608 33.68133322 82.06526416 34 85 C34.99 85 35.98 85 37 85 C37 80.71 37 76.42 37 72 C37.33 72 37.66 72 38 72 C38.67453101 79.68483539 39.1567564 87.28410183 39 95 C39.66 95 40.32 95 41 95 C41.03758423 93.78884521 41.03758423 93.78884521 41.07592773 92.55322266 C41.19165487 88.91031083 41.31448635 85.26767274 41.4375 81.625 C41.47681641 80.35398437 41.51613281 79.08296875 41.55664062 77.7734375 C41.59853516 76.56171875 41.64042969 75.35 41.68359375 74.1015625 C41.73858032 72.42054443 41.73858032 72.42054443 41.79467773 70.70556641 C42 68 42 68 43 66 C43.66 66 44.32 66 45 66 C46.78409802 69.06246747 47.22880021 71.22079273 47.125 74.75 C47.10695312 75.54921875 47.08890625 76.3484375 47.0703125 77.171875 C47.04710937 77.77515625 47.02390625 78.3784375 47 79 C47.66 79 48.32 79 49 79 C48.61377078 71.24877918 47.55967478 64.33124245 45 57 C44.67 56.01 44.34 55.02 44 54 C45.32 54 46.64 54 48 54 C48 53.34 48 52.68 48 52 C46.02 52 44.04 52 42 52 C42.598125 51.773125 43.19625 51.54625 43.8125 51.3125 C46.56351888 49.66188867 47.52484637 47.8027919 49 45 C48.34 44.67 47.68 44.34 47 44 C48.875 44.1875 48.875 44.1875 51 45 C52.125 47.5 52.125 47.5 53 50 C53.66 50.33 54.32 50.66 55 51 C55 48.36 55 45.72 55 43 C53.33419766 42.7034367 51.66726546 42.41322408 50 42.125 C48.37191406 41.84076172 48.37191406 41.84076172 46.7109375 41.55078125 C44.06197428 41.15761934 41.51293547 40.8622971 38.8515625 40.66796875 C26.66833593 39.69859302 26.66833593 39.69859302 23 35.5 C21.59844288 33.43270324 21 32.50311778 21 30 C23.52475462 28.73762269 25.31200466 28.90143596 28.125 28.9375 C29.73375 28.958125 31.3425 28.97875 33 29 C32.67 22.73 32.34 16.46 32 10 C17.15 9.505 17.15 9.505 2 9 C0 5 0 5 0 0 Z \",fill:\"#050708\",transform:\"translate(169,277)\"})),_path4||(_path4=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C13.16353018 5.26541207 26.31146179 10.6557309 39 17 C39.495 25.91 39.495 25.91 40 35 C40.33 29.72 40.66 24.44 41 19 C41.66 19 42.32 19 43 19 C43 24.94 43 30.88 43 37 C43.66 37 44.32 37 45 37 C45 31.39 45 25.78 45 20 C49.05536243 20.81107249 51.72935622 21.65141483 55.375 23.375 C58.46285302 24.81765155 61.540718 26.25314933 64.6875 27.5625 C67.79839803 28.91251235 70.80213835 30.38041639 73.8125 31.9375 C76.82829276 33.40231362 79.91039827 34.7008144 83 36 C83.69013184 36.29036133 84.38026367 36.58072266 85.09130859 36.87988281 C87.28794184 37.80004729 89.48735653 38.71326364 91.6875 39.625 C92.43322266 39.93695313 93.17894531 40.24890625 93.94726562 40.5703125 C94.66978516 40.869375 95.39230469 41.1684375 96.13671875 41.4765625 C96.78342529 41.74549316 97.43013184 42.01442383 98.09643555 42.29150391 C100.04340359 43.01615457 101.97690111 43.53431932 104 44 C104 44.66 104 45.32 104 46 C104.70125 46.103125 105.4025 46.20625 106.125 46.3125 C109 47 109 47 115 50 C115 54.95 115 59.9 115 65 C115.99 65 116.98 65 118 65 C118.33 60.71 118.66 56.42 119 52 C119.92296875 52.47308594 120.8459375 52.94617188 121.796875 53.43359375 C130.41888835 57.81639445 139.13204332 61.91800193 147.97314453 65.84008789 C152.25487479 67.74451293 156.47152388 69.7003026 160.625 71.875 C165.22878373 74.25088124 169.99983702 75.69144671 175 77 C175 77.99 175 78.98 175 80 C176.2375 80.391875 177.475 80.78375 178.75 81.1875 C185.8585793 83.56439666 192.71864276 86.52356973 199.55078125 89.59765625 C208.27335085 93.52003757 217.09744941 96.95736178 226.11083984 100.15942383 C232.13513451 102.29990997 238.0780034 104.59163765 244 107 C244.87962402 107.32766357 245.75924805 107.65532715 246.66552734 107.99291992 C249 109 249 109 251 111 C253.57061311 111.64767793 253.57061311 111.64767793 256 112 C256 110.68 256 109.36 256 108 C262.27 108 268.54 108 275 108 C275.33 108.99 275.66 109.98 276 111 C278.64 111 281.28 111 284 111 C284 110.01 284 109.02 284 108 C303.8 108 323.6 108 344 108 C344 108.99 344 109.98 344 111 C343.01 111 342.02 111 341 111 C339.66018514 111.3062434 338.32488113 111.63451555 337 112 C337 111.34 337 110.68 337 110 C336.34 110.33 335.68 110.66 335 111 C335 112.32 335 113.64 335 115 C335.66 115.33 336.32 115.66 337 116 C334.65509272 118.34490728 329.00620598 118.4292014 326 119 C326 123.29 326 127.58 326 132 C320.91913204 132.84681133 316.15171623 133.09038099 311 133 C311 133.66 311 134.32 311 135 C310.34 135 309.68 135 309 135 C309 134.34 309 133.68 309 133 C308.34 133 307.68 133 307 133 C307 133.99 307 134.98 307 136 C306.34 136 305.68 136 305 136 C305 135.01 305 134.02 305 133 C303.68 133 302.36 133 301 133 C300.67 133.66 300.34 134.32 300 135 C298.02 134.34 296.04 133.68 294 133 C293.67 133.66 293.34 134.32 293 135 C293 134.34 293 133.68 293 133 C291.68 133 290.36 133 289 133 C289 133.99 289 134.98 289 136 C304.84 136.33 320.68 136.66 337 137 C337 137.66 337 138.32 337 139 C319.51 139 302.02 139 284 139 C284 141.31 284 143.62 284 146 C291.92 146 299.84 146 308 146 C308 147.32 308 148.64 308 150 C296.12 150 284.24 150 272 150 C272 150.66 272 151.32 272 152 C283.55 152 295.1 152 307 152 C307 152.66 307 153.32 307 154 C304.03 154 301.06 154 298 154 C298 155.32 298 156.64 298 158 C299.65 157.67 301.3 157.34 303 157 C302.67 157.99 302.34 158.98 302 160 C291.44 160 280.88 160 270 160 C270 160.99 270 161.98 270 163 C270.66 163.33 271.32 163.66 272 164 C271.34 164 270.68 164 270 164 C270.01047363 165.1960083 270.02094727 166.3920166 270.03173828 167.62426758 C270.06791405 172.05783093 270.09089166 176.49138121 270.10986328 180.92504883 C270.11992639 182.84466749 270.13357816 184.76427081 270.15087891 186.68383789 C270.17511364 189.44160752 270.18647992 192.19917464 270.1953125 194.95703125 C270.20563507 195.81649857 270.21595764 196.67596588 270.22659302 197.56147766 C270.22674408 198.36208115 270.22689514 199.16268463 270.22705078 199.98754883 C270.231492 200.6914827 270.23593323 201.39541656 270.24050903 202.12068176 C270 204 270 204 268 207 C268.54269531 207.20753906 269.08539063 207.41507813 269.64453125 207.62890625 C273.67354671 209.36392372 276.26331713 210.57348949 278 214.75 C278.33 215.8225 278.66 216.895 279 218 C280.98 217.34 282.96 216.68 285 216 C285.33 211.05 285.66 206.1 286 201 C283.52604167 201.03255208 281.05208333 201.06510417 278.578125 201.09765625 C276 201 276 201 272 200 C272.33 195.05 272.66 190.1 273 185 C280.92 185 288.84 185 297 185 C293.90243902 192.22764228 293.90243902 192.22764228 290 196 C288.49279568 199.82315241 289.07890548 203.80412041 289.375 207.8125 C289.41882813 208.49892578 289.46265625 209.18535156 289.5078125 209.89257812 C289.8098298 214.32635981 290.36719694 218.57037855 291 223 C296.94 223 302.88 223 309 223 C309 225.64 309 228.28 309 231 C309.66 231 310.32 231 311 231 C311.11044961 224.26257354 310.70132913 217.70019789 310 211 C309.34 211 308.68 211 308 211 C308 211.66 308 212.32 308 213 C308.66 213 309.32 213 310 213 C310 215.31 310 217.62 310 220 C309.34 220.33 308.68 220.66 308 221 C308 218.69 308 216.38 308 214 C304.7 214 301.4 214 298 214 C298 213.67 298 213.34 298 213 C300.64 213 303.28 213 306 213 C306 212.34 306 211.68 306 211 C303.36 211.33 300.72 211.66 298 212 C297.34 209.03 296.68 206.06 296 203 C303.62643996 199.1020418 311.52213737 198.77086858 320 199 C320 198.01 320 197.02 320 196 C319.34 196 318.68 196 318 196 C318 195.34 318 194.68 318 194 C317.34 194 316.68 194 316 194 C316 193.34 316 192.68 316 192 C315.34 192 314.68 192 314 192 C313.67 189.69 313.34 187.38 313 185 C312.34 185 311.68 185 311 185 C311 184.34 311 183.68 311 183 C310.34 183 309.68 183 309 183 C308.67 181.68 308.34 180.36 308 179 C305.69 178.67 303.38 178.34 301 178 C300.34 179.32 299.68 180.64 299 182 C298.67 181.34 298.34 180.68 298 180 C289.42 180 280.84 180 272 180 C272 177.36 272 174.72 272 172 C273.21901001 172.00785522 273.21901001 172.00785522 274.46264648 172.01586914 C278.12092322 172.03656994 281.77918767 172.04963803 285.4375 172.0625 C286.71689453 172.07087891 287.99628906 172.07925781 289.31445312 172.08789062 C290.52939453 172.09111328 291.74433594 172.09433594 292.99609375 172.09765625 C294.12200928 172.10289307 295.2479248 172.10812988 296.40795898 172.11352539 C298.92970871 172.29545448 298.92970871 172.29545448 300 171 C290.43 171 280.86 171 271 171 C271 170.34 271 169.68 271 169 C274.93268867 168.97526132 278.86534713 168.95712165 282.7980957 168.94506836 C284.79314768 168.93757271 286.78817786 168.92486655 288.78320312 168.91210938 C290.03681641 168.90888672 291.29042969 168.90566406 292.58203125 168.90234375 C293.73936768 168.89710693 294.8967041 168.89187012 296.08911133 168.88647461 C299 169 299 169 302 170 C302 171.65 302 173.3 302 175 C304.97 175 307.94 175 311 175 C311 172.69 311 170.38 311 168 C311.66 168 312.32 168 313 168 C313 170.31 313 172.62 313 175 C315.64 175 318.28 175 321 175 C319.29218989 167.77464952 317.45380564 160.60986942 314 154 C312.02 154 310.04 154 308 154 C308.66 153.01 309.32 152.02 310 151 C311.9609375 150.64355469 311.9609375 150.64355469 314.375 150.671875 C315.27009277 150.67638672 316.16518555 150.68089844 317.08740234 150.68554688 C318.04855957 150.70681641 319.0097168 150.72808594 320 150.75 C321.46687256 150.76643555 321.46687256 150.76643555 322.96337891 150.78320312 C331.99033932 150.91778105 340.99479796 151.37741813 350 152 C350 154.31 350 156.62 350 159 C339.98707052 160.09945892 330.05598201 160.10055982 320 160 C320.99 162.97 321.98 165.94 323 169 C323.68102783 168.98952637 324.36205566 168.97905273 325.0637207 168.96826172 C328.14660966 168.92671122 331.22943971 168.90067689 334.3125 168.875 C335.38435547 168.85824219 336.45621094 168.84148437 337.56054688 168.82421875 C338.58857422 168.81777344 339.61660156 168.81132812 340.67578125 168.8046875 C341.62364502 168.79421387 342.57150879 168.78374023 343.5480957 168.77294922 C346 169 346 169 349 171 C348.34 171.33 347.68 171.66 347 172 C347.33 172.33 347.66 172.66 348 173 C348 174.98 348 176.96 348 179 C340.41 179 332.82 179 325 179 C325.66 180.65 326.32 182.3 327 184 C336.9 184.495 336.9 184.495 347 185 C347 188.3 347 191.6 347 195 C348.65 195.33 350.3 195.66 352 196 C351.67 180.82 351.34 165.64 351 150 C337.8 150 324.6 150 311 150 C311 148.68 311 147.36 311 146 C315.29165262 145.97108051 319.58328036 145.95322882 323.875 145.9375 C325.09832031 145.92912109 326.32164062 145.92074219 327.58203125 145.91210938 C328.74863281 145.90888672 329.91523438 145.90566406 331.1171875 145.90234375 C332.19597168 145.89710693 333.27475586 145.89187012 334.38623047 145.88647461 C337 146 337 146 339 147 C339 144.03 339 141.06 339 138 C349.38328858 138.79138012 359.6384491 140.31265153 369.9375 141.8125 C371.80782725 142.08316199 373.67818888 142.35358657 375.54858398 142.6237793 C378.35890679 143.02977819 381.16919827 143.43597947 383.97932434 143.84333801 C389.6324317 144.66203021 395.28751176 145.46443862 400.9453125 146.25 C402.90029663 146.52299927 402.90029663 146.52299927 404.89477539 146.80151367 C407.29197135 147.13549032 409.6895818 147.46650875 412.08764648 147.79418945 C413.65494507 148.01401489 413.65494507 148.01401489 415.25390625 148.23828125 C416.15439697 148.36243408 417.0548877 148.48658691 417.98266602 148.61450195 C420 149 420 149 421 150 C421.22881538 151.99616505 421.39531688 153.99954193 421.53515625 156.00390625 C421.62216797 157.21884766 421.70917969 158.43378906 421.79882812 159.68554688 C421.88583984 160.96494141 421.97285156 162.24433594 422.0625 163.5625 C422.19881836 165.48739258 422.19881836 165.48739258 422.33789062 167.45117188 C422.56268946 170.63385015 422.78319818 173.81676858 423 177 C424.28322547 175.9404123 424.28322547 175.9404123 424.125 173.5 C424.28322547 171.0595877 424.28322547 171.0595877 423 170 C422.91330568 168.5112814 422.89296506 167.018555 422.90234375 165.52734375 C422.90556641 164.62822266 422.90878906 163.72910156 422.91210938 162.80273438 C422.92048828 161.85720703 422.92886719 160.91167969 422.9375 159.9375 C422.94201172 158.98810547 422.94652344 158.03871094 422.95117188 157.06054688 C422.9629989 154.70696935 422.97947975 152.35351523 423 150 C429.92326453 149.88544754 436.67445441 150.3253271 443.5625 151 C444.57119141 151.09539062 445.57988281 151.19078125 446.61914062 151.2890625 C449.07980981 151.52230129 451.5400466 151.75934891 454 152 C454.33 150.35 454.66 148.7 455 147 C455.66 147 456.32 147 457 147 C456.54554036 148.41791408 456.08625056 149.83428046 455.625 151.25 C455.36976563 152.03890625 455.11453125 152.8278125 454.8515625 153.640625 C453.39539893 157.67513325 452.66116945 159.55922036 449 162 C451.64 162.66 454.28 163.32 457 164 C457 164.99 457 165.98 457 167 C452.38 166.67 447.76 166.34 443 166 C442.34 167.65 441.68 169.3 441 171 C440.34 171 439.68 171 439 171 C439 171.66 439 172.32 439 173 C444.94 172.67 450.88 172.34 457 172 C459 176 459 176 459 180 C460.65 180 462.3 180 464 180 C464 180.66 464 181.32 464 182 C468.62 182.66 473.24 183.32 478 184 C478 183.34 478 182.68 478 182 C476.68 181.67 475.36 181.34 474 181 C474 180.01 474 179.02 474 178 C475.65 178 477.3 178 479 178 C479.33 176.35 479.66 174.7 480 173 C480.66 173 481.32 173 482 173 C482 174.32 482 175.64 482 177 C483.65 177 485.3 177 487 177 C486.68051404 173.5247752 486.22735873 170.27826986 485 167 C481.58991365 165.03816375 481.58991365 165.03816375 478 164 C476.5625 161.8125 476.5625 161.8125 476 160 C476.66 159.67 477.32 159.34 478 159 C477.401875 158.401875 476.80375 157.80375 476.1875 157.1875 C474.45833333 155.45833333 472.72916667 153.72916667 471 152 C472.65 152 474.3 152 476 152 C475.67 151.34 475.34 150.68 475 150 C474.960008 148.00039988 474.95653201 145.99952758 475 144 C477.12508244 147.18762365 477.5020163 149.26512223 478 153 C478.825 153.10957031 479.65 153.21914063 480.5 153.33203125 C486.69623146 154.18262999 492.80717471 155.13538726 498.9375 156.375 C512.15342585 158.99593037 525.63691457 160.34639275 539 162 C540.2698877 162.16951172 541.53977539 162.33902344 542.84814453 162.51367188 C547.36504719 163.07725183 551.88750965 163.37119997 556.4296875 163.6484375 C558.29948467 163.76814322 560.16927612 163.88793829 562.0390625 164.0078125 C564.90876218 164.18902641 567.77852758 164.36902143 570.6484375 164.546875 C589.13922033 165.69927506 607.5317022 167.37044431 626 169 C626 195.4 626 221.8 626 249 C621.04423274 248.17403879 618.13614533 247.34584284 613.75 245.25 C612.62722656 244.71632813 611.50445313 244.18265625 610.34765625 243.6328125 C605.88158828 241.45449697 601.42631067 239.25811786 597 237 C601.17587745 235.60804085 603.13474776 237.17676781 607 239 C607.02913821 235.4375173 607.04684529 231.87506546 607.0625 228.3125 C607.07087891 227.30509766 607.07925781 226.29769531 607.08789062 225.25976562 C607.09111328 224.28330078 607.09433594 223.30683594 607.09765625 222.30078125 C607.10289307 221.40528564 607.10812988 220.50979004 607.11352539 219.5871582 C606.99840198 216.96358241 606.58234285 214.55706947 606 212 C605.25314941 211.88406494 604.50629883 211.76812988 603.73681641 211.64868164 C600.3656636 211.12339923 596.99533308 210.59301539 593.625 210.0625 C592.449375 209.88009766 591.27375 209.69769531 590.0625 209.50976562 C588.94101562 209.33251953 587.81953125 209.15527344 586.6640625 208.97265625 C585.62717285 208.81031494 584.5902832 208.64797363 583.52197266 208.48071289 C581 208 581 208 579 207 C578 205.328125 578 205.328125 577 203.25 C576.649375 202.528125 576.29875 201.80625 575.9375 201.0625 C575 199 575 199 574 196.25 C572.72989549 193.39226485 571.54345131 191.83693706 569 190 C565.97919865 189.68291229 565.97919865 189.68291229 563 191 C557.41359336 196.58640664 555.87394819 201.38777195 555.24609375 209.01171875 C555 211 555 211 554 213 C553.01 213.33 552.02 213.66 551 214 C552.65 214.33 554.3 214.66 556 215 C556 215.66 556 216.32 556 217 C548.34167083 216.70544888 542.65738822 213.62827658 536 210 C536 209.01 536 208.02 536 207 C536.99 207 537.98 207 539 207 C539.28875 206.2575 539.5775 205.515 539.875 204.75 C541 202 541 202 542.0625 200.125 C543.42095003 197.30497063 543.42095003 197.30497063 544 191 C534.43 190.34 524.86 189.68 515 189 C515.99 191.31 516.98 193.62 518 196 C518.268125 196.94875 518.53625 197.8975 518.8125 198.875 C520.20269907 202.5334186 522.12302175 205.40959001 524.34765625 208.61328125 C525.47042944 210.23506474 526.56077847 211.87967899 527.62109375 213.54296875 C528.13800781 214.35378906 528.65492188 215.16460937 529.1875 216 C529.65542969 216.7425 530.12335937 217.485 530.60546875 218.25 C531.97464872 220.29424542 531.97464872 220.29424542 535 221 C538.55018723 221.19411716 542.09854058 221.31741081 545.65234375 221.42578125 C549.51788322 222.08883178 550.6496001 222.93065425 553 226 C555.03357795 230.22358498 556.58422861 234.53487486 558 239 C558.63526611 238.9285376 559.27053223 238.8570752 559.92504883 238.78344727 C567.53117117 238.0015988 575.0461508 237.88172373 582.6875 237.9375 C583.87794922 237.94201172 585.06839844 237.94652344 586.29492188 237.95117188 C589.19663683 237.96282535 592.09832546 237.98075529 595 238 C595 241.63 595 245.26 595 249 C587.50009325 250.20263656 580.0817215 250.11258251 572.5 250.0625 C571.200625 250.05798828 569.90125 250.05347656 568.5625 250.04882812 C565.37495175 250.0371092 562.18750045 250.02070219 559 250 C559 251.65 559 253.3 559 255 C559.83917969 254.68160156 560.67835938 254.36320313 561.54296875 254.03515625 C565.22648324 252.93218298 568.47859857 252.62777811 572.3125 252.4375 C576.47595878 252.59558811 576.47595878 252.59558811 580 251 C582.52596259 250.76346477 585.03107207 250.57826308 587.5625 250.4375 C588.27341797 250.39431641 588.98433594 250.35113281 589.71679688 250.30664062 C591.47761912 250.20028223 593.2387832 250.09961154 595 250 C595.33 251.32 595.66 252.64 596 254 C596.99 254 597.98 254 599 254 C599 254.66 599 255.32 599 256 C587.88747861 257.6909381 576.75086747 259.29109502 565.5 259.5625 C564.74291748 259.60117187 563.98583496 259.63984375 563.20581055 259.6796875 C557.84831005 259.70855918 555.14325111 258.09587606 551.23242188 254.48803711 C550 253 550 253 550 251 C549.236875 251.495 548.47375 251.99 547.6875 252.5 C542.85079339 255.19955718 536.31993312 254.07112747 531 253 C520.1742634 248.18471236 513.39321004 237.72460757 507.9375 227.6875 C506.90531292 225.83443206 505.8727629 223.98156623 504.83984375 222.12890625 C504.10870361 220.80463623 504.10870361 220.80463623 503.36279297 219.45361328 C501.10692941 215.39208897 498.74715265 211.39443411 496.390625 207.390625 C495.13820613 205.23759032 493.94134783 203.06210123 492.75 200.875 C491.15429327 197.79785222 491.15429327 197.79785222 488 196 C488.66 196 489.32 196 490 196 C488.75212954 192.88853954 487.335865 190.42194889 485 188 C481.0521908 186.44015945 477.07728333 186.01766535 472.875 185.5625 C471.25851562 185.34303711 471.25851562 185.34303711 469.609375 185.11914062 C462.75990235 184.21550538 455.88385861 183.57723933 449 183 C448.67 182.01 448.34 181.02 448 180 C450.64 180 453.28 180 456 180 C455.34 178.68 454.68 177.36 454 176 C451.77144426 175.9185778 449.54202345 175.86061921 447.3125 175.8125 C446.07113281 175.77769531 444.82976562 175.74289062 443.55078125 175.70703125 C439.81435679 176.0153171 437.99370517 176.81911727 435 179 C435.7763932 182.0745356 435.7763932 182.0745356 438 184 C438.125 187.625 438.125 187.625 438 191 C438.88042969 191.03738281 439.76085937 191.07476562 440.66796875 191.11328125 C442.41013672 191.21189453 442.41013672 191.21189453 444.1875 191.3125 C445.33605469 191.37050781 446.48460937 191.42851562 447.66796875 191.48828125 C451.23914124 192.03672626 453.16355615 192.78777355 456 195 C458.74059604 199.19334752 460.65326421 203.93720238 460 209 C460.66 209.33 461.32 209.66 462 210 C461.67 211.65 461.34 213.3 461 215 C460.67 214.01 460.34 213.02 460 212 C459.46375 212.02320313 458.9275 212.04640625 458.375 212.0703125 C450.13802201 212.25997976 442.13780076 211.13081102 434 210 C434 209.34 434 208.68 434 208 C433.01 207.67 432.02 207.34 431 207 C429.8671875 204.890625 429.8671875 204.890625 428.875 202.25 C428.54242188 201.38890625 428.20984375 200.5278125 427.8671875 199.640625 C427.03382723 197.10300543 426.46319234 194.62790754 426 192 C425.34 192 424.68 192 424 192 C424 191.34 424 190.68 424 190 C427.63 190 431.26 190 435 190 C433.09954692 187.7102606 433.09954692 187.7102606 429.9375 187.5 C428.968125 187.335 427.99875 187.17 427 187 C426.67 186.34 426.34 185.68 426 185 C418.89015737 182.75478654 412.33440595 182.16639851 405 184 C405 183.01 405 182.02 405 181 C406.65 180.67 408.3 180.34 410 180 C408.02 180 406.04 180 404 180 C404 183.63 404 187.26 404 191 C399.04331925 190.00866385 394.24775841 188.9221573 389.5625 187 C386.10567844 185.65099647 382.61013761 184.85664282 379 184 C379 183.01 379 182.02 379 181 C378.01 180.67 377.02 180.34 376 180 C375.67 176.7 375.34 173.4 375 170 C373.02 170.33 371.04 170.66 369 171 C368.34 180.9 367.68 190.8 367 201 C371.95 201.33 376.9 201.66 382 202 C383 203 383 203 383.0625 206.5625 C383.041875 207.696875 383.02125 208.83125 383 210 C382.34 210 381.68 210 381 210 C381 208.35 381 206.7 381 205 C380.20335937 205.01160156 379.40671875 205.02320313 378.5859375 205.03515625 C368.06151142 205.12478032 368.06151142 205.12478032 363 204 C362.67 205.98 362.34 207.96 362 210 C358.7 210.33 355.4 210.66 352 211 C351.67 212.65 351.34 214.3 351 216 C351.66 216 352.32 216 353 216 C353 214.68 353 213.36 353 212 C359.70735857 211.82202037 366.41410515 211.69972244 373.12329102 211.61547852 C375.40379592 211.58034899 377.68414399 211.5326335 379.96411133 211.47192383 C383.24860361 211.38667746 386.53100683 211.34723572 389.81640625 211.31640625 C391.33712486 211.26221275 391.33712486 211.26221275 392.88856506 211.20692444 C398.1311611 211.2040385 401.18537415 211.54827569 405.01147461 215.30834961 C406.04144748 216.5107532 407.03893458 217.74183794 408 219 C408.51538834 219.62785904 409.03077667 220.25571808 409.56178284 220.90260315 C411 222.75 411 222.75 413 226 C412.67 226.99 412.34 227.98 412 229 C411.34 228.34 410.68 227.68 410 227 C406.79532184 226.73688611 406.79532184 226.73688611 402.9921875 226.83984375 C402.28232697 226.84536255 401.57246643 226.85088135 400.84109497 226.85656738 C399.31329542 226.86893235 397.78552566 226.88555767 396.2578125 226.90597534 C392.27356157 226.95868706 388.28922366 226.98096495 384.3046875 227 C383.11368439 227.0062162 383.11368439 227.0062162 381.89862061 227.01255798 C373.92697444 227.03599073 365.98108001 226.72221484 358.02294922 226.26733398 C357.12850098 226.21907471 356.23405273 226.17081543 355.3125 226.12109375 C354.54550781 226.0739624 353.77851563 226.02683105 352.98828125 225.97827148 C350.78737883 225.90096149 350.78737883 225.90096149 348 227 C349.08784968 230.24983135 349.08784968 230.24983135 351 233 C351.21110519 235.48341801 351.37594795 237.94956713 351.5 240.4375 C351.57707326 245.36914431 351.57707326 245.36914431 353 250 C355.3643851 251.10553772 355.3643851 251.10553772 358.1875 252.0625 C359.12980469 252.40410156 360.07210938 252.74570312 361.04296875 253.09765625 C366.99305657 254.91333694 372.82353544 255.26288596 379 255.375 C380.17175781 255.43107422 380.17175781 255.43107422 381.3671875 255.48828125 C385.46164992 255.55031856 388.16444676 255.31839168 391.4375 252.7265625 C395.91254238 247.96500826 396.24643622 245.30755602 396.125 238.75 C396.063125 235.40875 396.063125 235.40875 396 232 C390.72 232 385.44 232 380 232 C380 231.34 380 230.68 380 230 C390.03442033 229.12198822 399.93605753 228.8823695 410 229 C408.1875 231.5 408.1875 231.5 406 234 C405.01 234 404.02 234 403 234 C403 234.66 403 235.32 403 236 C402.34 236 401.68 236 401 236 C400.67 235.34 400.34 234.68 400 234 C399.85304688 235.30324219 399.85304688 235.30324219 399.703125 236.6328125 C398.52969545 245.67631266 397.01043725 250.8941353 390 257 C386.95927147 258.01357618 384.92472341 258.1154568 381.74609375 258.09765625 C380.72708984 258.09443359 379.70808594 258.09121094 378.65820312 258.08789062 C377.06395508 258.07532227 377.06395508 258.07532227 375.4375 258.0625 C374.37080078 258.05798828 373.30410156 258.05347656 372.20507812 258.04882812 C369.47000589 258.03670304 366.73503089 258.01894671 364 258 C363.34 258 362.68 258 362 258 C364.58090767 259.31746333 367.16450458 260.62909617 369.75 261.9375 C370.84441406 262.49727539 370.84441406 262.49727539 371.9609375 263.06835938 C372.66992188 263.42607422 373.37890625 263.78378906 374.109375 264.15234375 C374.75874023 264.48226318 375.40810547 264.81218262 376.07714844 265.15209961 C380.49000342 267.0979916 384.44785851 267.10696427 389.25 267.0625 C390.51328125 267.05347656 391.7765625 267.04445313 393.078125 267.03515625 C394.52445312 267.01775391 394.52445312 267.01775391 396 267 C396 266.34 396 265.68 396 265 C397.98 265 399.96 265 402 265 C402.3403125 264.13375 402.3403125 264.13375 402.6875 263.25 C404.33488275 260.42591529 406.43454838 259.0023037 409 257 C409.556875 256.2575 410.11375 255.515 410.6875 254.75 C411.120625 254.1725 411.55375 253.595 412 253 C412.66 253 413.32 253 414 253 C414 258.28 414 263.56 414 269 C413.34 269 412.68 269 412 269 C412.33 270.98 412.66 272.96 413 275 C409.5980513 277.09350689 406.94727588 277.17942163 403 277 C404.11126659 278.33901792 404.11126659 278.33901792 406.94140625 278.09765625 C408.13636719 278.08605469 409.33132813 278.07445312 410.5625 278.0625 C412.35880859 278.04896484 412.35880859 278.04896484 414.19140625 278.03515625 C415.58166016 278.01775391 415.58166016 278.01775391 417 278 C417 278.66 417 279.32 417 280 C410.36382504 282.84407498 402.04809873 285.39935276 395 283 C389.65220257 280.20903041 384.81384336 276.86795146 380 273.25 C375.2186601 269.81198893 370.80937443 268.60565818 365 268 C365 268.99 365 269.98 365 271 C355.95971078 271.1723784 347.01134307 270.6331684 338 270 C337.67 272.31 337.34 274.62 337 277 C343.6 277 350.2 277 357 277 C357 277.99 357 278.98 357 280 C355.95199219 280.20496094 354.90398437 280.40992188 353.82421875 280.62109375 C352.44529231 280.89312686 351.06638717 281.16526791 349.6875 281.4375 C348.99720703 281.57220703 348.30691406 281.70691406 347.59570312 281.84570312 C344.65710993 282.42774332 341.84543315 283.05152228 339 284 C339 284.66 339 285.32 339 286 C340.02786621 285.98018066 341.05573242 285.96036133 342.11474609 285.93994141 C345.6098266 285.99396867 348.73011517 286.36338038 352.1640625 286.9609375 C361.53866152 288.36973624 370.91066635 288.45798235 380.375 288.625 C382.19012066 288.66328821 384.00522527 288.70234571 385.8203125 288.7421875 C390.21340741 288.83697376 394.60658655 288.9214207 399 289 C399 289.66 399 290.32 399 291 C358.17297641 291.61916858 358.17297641 291.61916858 339 288 C339 289.65 339 291.3 339 293 C340.55533447 292.99129883 340.55533447 292.99129883 342.14208984 292.98242188 C354.64308455 292.93534192 367.12850944 293.18600724 379.625 293.5 C381.61457851 293.54837585 383.60416184 293.59655398 385.59375 293.64453125 C390.39589169 293.76075122 395.19796105 293.87961284 400 294 C400 294.66 400 295.32 400 296 C401.03568595 297.70735301 401.03568595 297.70735301 403 299 C406.61023099 299.73041853 406.61023099 299.73041853 410 300 C406.11236713 303.66194631 403.67741882 304.47107899 398.375 304.5625 C393.93779124 304.43635217 393.93779124 304.43635217 390.31494141 306.52319336 C389.88101074 307.01053955 389.44708008 307.49788574 389 308 C397.62411363 311.69463745 406.22481701 311.52128169 415.4375 311.625 C417.78176918 311.6615578 420.12587397 311.70211765 422.46998596 311.74765015 C423.92003133 311.77477771 425.37019795 311.79617178 426.82041931 311.81118774 C431.77857156 311.88928578 431.77857156 311.88928578 434 313 C433.67 315.97 433.34 318.94 433 322 C427.06 322 421.12 322 415 322 C415 321.34 415 320.68 415 320 C414.67 320.99 414.34 321.98 414 323 C412.99735107 323.03963867 411.99470215 323.07927734 410.96166992 323.12011719 C407.19041684 323.27392587 403.42054029 323.45106978 399.65063477 323.63476562 C398.02851828 323.71065412 396.4061046 323.7804718 394.78344727 323.84375 C385.99852319 324.19048768 378.15382754 324.63165155 369.9621582 328.16894531 C368 329 368 329 366 329 C366.33 327.35 366.66 325.7 367 324 C363.31915662 322.77305221 359.64608653 322.38949492 355.8125 321.9375 C355.06291016 321.84662109 354.31332031 321.75574219 353.54101562 321.66210938 C351.69434465 321.4386269 349.84721446 321.21894487 348 321 C348.8125 317.1875 348.8125 317.1875 350.5 315.5 C354.18352306 313.28988617 358.04891257 311.68502258 362 310 C362.33 306.04 362.66 302.08 363 298 C364.98 297.67 366.96 297.34 369 297 C354.15 295.515 354.15 295.515 339 294 C340.13047805 308.58316683 342.97140369 321.95297061 347 336 C347.33 335.34 347.66 334.68 348 334 C352.62 334 357.24 334 362 334 C362.33 334.66 362.66 335.32 363 336 C363.83144531 335.43410156 364.66289062 334.86820312 365.51953125 334.28515625 C366.60621094 333.55167969 367.69289063 332.81820313 368.8125 332.0625 C369.89144531 331.33160156 370.97039062 330.60070312 372.08203125 329.84765625 C377.26476378 326.56595279 382.34395908 326.47287087 388.3125 325.9375 C389.29621582 325.84807129 390.27993164 325.75864258 391.29345703 325.66650391 C398.88842534 325.01401522 406.37574152 324.76580776 414 325 C414 327.64 414 330.28 414 333 C413.43481155 333.04567108 412.86962311 333.09134216 412.28730774 333.13839722 C406.39784549 333.61586023 400.50936779 334.10431389 394.62133789 334.59912109 C392.42463067 334.78227458 390.22768887 334.96263705 388.03051758 335.14013672 C384.86994463 335.39595519 381.71035497 335.66184324 378.55078125 335.9296875 C377.57039383 336.00686005 376.59000641 336.08403259 375.57991028 336.1635437 C369.05481445 336.66719109 369.05481445 336.66719109 363 339 C362.67 339.66 362.34 340.32 362 341 C356.72 341 351.44 341 346 341 C346 343.64 346 346.28 346 349 C350.95 349 355.9 349 361 349 C361 350.32 361 351.64 361 353 C361.7425 352.525625 362.485 352.05125 363.25 351.5625 C370.20769041 347.60926681 377.99384435 348.8171386 385.6484375 349.77734375 C389.76031066 350.16667393 393.87432471 350.07751791 398 350 C398 349.01 398 348.02 398 347 C397.04738281 347.01160156 396.09476562 347.02320313 395.11328125 347.03515625 C393.85902344 347.04417969 392.60476563 347.05320312 391.3125 347.0625 C389.45044922 347.07990234 389.45044922 347.07990234 387.55078125 347.09765625 C384 347 384 347 381.59375 346.5 C377.79280817 345.76728832 374.04781406 345.89543455 370.1875 345.9375 C369.39923828 345.94201172 368.61097656 345.94652344 367.79882812 345.95117188 C365.86585239 345.96288688 363.93291607 345.98082002 362 346 C369.41484177 337.81629797 381.95847915 337.78782277 392.25 336.75 C393.04192749 336.66528442 393.83385498 336.58056885 394.64978027 336.49328613 C407.45769569 335.12570186 420.11588288 334.48917597 433 335 C433.33 336.65 433.66 338.3 434 340 C430.67485327 341.13357275 427.4120992 342.1469752 424 343 C442.81 342.505 442.81 342.505 462 342 C462 342.33 462 342.66 462 343 C459.08397391 343.50400451 456.16727908 344.00334666 453.25 344.5 C452.425 344.64308594 451.6 344.78617187 450.75 344.93359375 C449.95078125 345.06894531 449.1515625 345.20429688 448.328125 345.34375 C447.5949707 345.46943359 446.86181641 345.59511719 446.10644531 345.72460938 C444 346 444 346 440 346 C439.34 347.65 438.68 349.3 438 351 C438.85722656 350.68546875 439.71445312 350.3709375 440.59765625 350.046875 C448.28047983 347.68292928 456.45274059 347.01619977 464 350 C464 350.66 464 351.32 464 352 C462.28645833 352.3671875 460.57291667 352.734375 458.859375 353.1015625 C457.73926025 353.34165039 456.61914551 353.58173828 455.46508789 353.82910156 C452.96177437 354.36539663 450.45835411 354.90119369 447.95483398 355.43652344 C441.4217005 356.83393902 434.8905599 358.23946809 428.36328125 359.6640625 C427.13834961 359.93009277 425.91341797 360.19612305 424.65136719 360.47021484 C422.32711771 360.97522524 420.0035041 361.48317481 417.68066406 361.99462891 C389.76968866 368.0410346 389.76968866 368.0410346 379.26171875 362.90625 C375.5599088 361.42296864 371.88404646 361.07813208 368 362 C367.10662933 362.66159119 366.21325867 363.32318237 365.29281616 364.00482178 C361.49733362 366.30457486 359.47230364 366.48678293 355.07666016 366.45410156 C354.4125412 366.45468567 353.74842224 366.45526978 353.06417847 366.45587158 C350.88859128 366.4531047 348.7144076 366.42208308 346.5390625 366.390625 C345.02306873 366.38315754 343.50706525 366.37746699 341.99105835 366.37347412 C338.01569613 366.35825726 334.04092558 366.31901056 330.0657959 366.2746582 C326.00358075 366.23361957 321.94126929 366.21544485 317.87890625 366.1953125 C309.91900039 366.15251154 301.95957395 366.08430922 294 366 C298.5723291 361.06036469 303.93707018 360.90497999 310.37109375 360.5859375 C312.72628156 360.50677152 315.0817896 360.436688 317.4375 360.375 C318.64599609 360.33632813 319.85449219 360.29765625 321.09960938 360.2578125 C324.06625817 360.16400542 327.03290836 360.07830754 330 360 C330.33 358.68 330.66 357.36 331 356 C328.03 355.01 325.06 354.02 322 353 C322 352.01 322 351.02 322 350 C328.6 350 335.2 350 342 350 C342 353.3 342 356.6 342 360 C343.32 360 344.64 360 346 360 C344.75604001 351.80909854 344.75604001 351.80909854 342.875 343.75 C341.91050143 339.61643469 341.84918796 336.22273724 342 332 C341.34 332 340.68 332 340 332 C339.87625 331.195625 339.7525 330.39125 339.625 329.5625 C339.41875 328.716875 339.2125 327.87125 339 327 C335.13245863 325.06622932 331.0318796 325.90039647 327 327 C327.05220703 328.051875 327.05220703 328.051875 327.10546875 329.125 C327.28894664 335.5554631 326.6553877 340.13601882 324 346 C323.67 345.01 323.34 344.02 323 343 C320.69 342.67 318.38 342.34 316 342 C315.67 340.02 315.34 338.04 315 336 C315.66 335.67 316.32 335.34 317 335 C316.65213292 333.02463255 316.65213292 333.02463255 316 331 C315.34 330.67 314.68 330.34 314 330 C313.67 329.01 313.34 328.02 313 327 C313 327.99 313 328.98 313 330 C312.34 330 311.68 330 311 330 C310.87625 328.865625 310.7525 327.73125 310.625 326.5625 C310.315625 324.7990625 310.315625 324.7990625 310 323 C309.34 322.67 308.68 322.34 308 322 C308 323.98 308 325.96 308 328 C307.67 328 307.34 328 307 328 C306.80705592 323.17639811 307.24252386 319.50353262 309 315 C308.34 315.33 307.68 315.66 307 316 C305.00039988 316.039992 302.99952758 316.04346799 301 316 C300.67 316.66 300.34 317.32 300 318 C300 317.34 300 316.68 300 316 C299.34 316 298.68 316 298 316 C298 315.34 298 314.68 298 314 C298.78246094 313.95101563 299.56492187 313.90203125 300.37109375 313.8515625 C301.88896484 313.73941406 301.88896484 313.73941406 303.4375 313.625 C304.44683594 313.55539062 305.45617187 313.48578125 306.49609375 313.4140625 C307.32238281 313.27742188 308.14867187 313.14078125 309 313 C309.33 312.34 309.66 311.68 310 311 C304.06 311 298.12 311 292 311 C292 310.34 292 309.68 292 309 C295.3 308.34 298.6 307.68 302 307 C301.34 306.67 300.68 306.34 300 306 C300 305.34 300 304.68 300 304 C298.35 304 296.7 304 295 304 C295.0330077 301.39239154 295.1001148 298.79337154 295.1875 296.1875 C295.19620117 295.08051758 295.19620117 295.08051758 295.20507812 293.95117188 C295.29296875 291.79296875 295.29296875 291.79296875 296 288 C299.67383598 284.87227477 303.26746795 284.46397373 308 284 C307.67 283.13375 307.34 282.2675 307 281.375 C306.01268659 278.04281725 305.83579026 275.44840462 306 272 C305.34 272 304.68 272 304 272 C304 270.68 304 269.36 304 268 C303.34 268 302.68 268 302 268 C299.875 266.375 299.875 266.375 298 264 C297.75 260.75 297.75 260.75 298 258 C297.34 258 296.68 258 296 258 C296 256.02 296 254.04 296 252 C295.34 252 294.68 252 294 252 C294 251.01 294 250.02 294 249 C293.34 249 292.68 249 292 249 C292 248.34 292 247.68 292 247 C296.29 247 300.58 247 305 247 C304.9690625 243.844375 304.9690625 243.844375 304.9375 240.625 C304.875 234.25 304.875 234.25 306 232 C305.07058594 232.02320313 304.14117187 232.04640625 303.18359375 232.0703125 C287.48071749 232.29955157 287.48071749 232.29955157 280 226 C278.34416775 225.30686092 276.67889021 224.63525576 275 224 C272.04816899 221.04816899 271.91336012 218.04488053 271 214 C271.66 214 272.32 214 273 214 C273.33 214.66 273.66 215.32 274 216 C274 215.01 274 214.02 274 213 C269.44508386 210.79600832 264.97093824 210.41153737 260 210 C259.67 208.35 259.34 206.7 259 205 C250.585 204.505 250.585 204.505 242 204 C242 203.67 242 203.34 242 203 C245.12498063 202.97104024 248.2499269 202.95321517 251.375 202.9375 C252.26445312 202.92912109 253.15390625 202.92074219 254.0703125 202.91210938 C254.92109375 202.90888672 255.771875 202.90566406 256.6484375 202.90234375 C257.43395996 202.89710693 258.21948242 202.89187012 259.02880859 202.88647461 C261 203 261 203 263 204 C262.67 199.71 262.34 195.42 262 191 C261.67 194.63 261.34 198.26 261 202 C260.01 202 259.02 202 258 202 C258 198.7 258 195.4 258 192 C256.68 191.34 255.36 190.68 254 190 C252.54296875 188.30859375 252.54296875 188.30859375 251.1875 186.4375 C248.71975688 183.39542281 248.18508039 183.04477751 244.125 182.0625 C243.09375 182.041875 242.0625 182.02125 241 182 C241 181.34 241 180.68 241 180 C238.69 179.67 236.38 179.34 234 179 C234 178.01 234 177.02 234 176 C233.34 176 232.68 176 232 176 C231.375 173.6875 231.375 173.6875 231 171 C231.66 170.01 232.32 169.02 233 168 C231.86820313 167.87882813 230.73640625 167.75765625 229.5703125 167.6328125 C228.08848969 167.46399724 226.60672158 167.29470145 225.125 167.125 C224.37863281 167.04636719 223.63226563 166.96773437 222.86328125 166.88671875 C217.2265625 166.2265625 217.2265625 166.2265625 215 164 C215 163.01 215 162.02 215 161 C217.475 160.01 217.475 160.01 220 159 C217.36 158.67 214.72 158.34 212 158 C211.01 161.63 210.02 165.26 209 169 C207.35 168.34 205.7 167.68 204 167 C203.875 159.25 203.875 159.25 205 157 C205.22467831 155.46331135 205.40796805 153.92031946 205.5625 152.375 C205.64628906 151.55773437 205.73007813 150.74046875 205.81640625 149.8984375 C205.87699219 149.27195312 205.93757812 148.64546875 206 148 C205.01 148 204.02 148 203 148 C203 145.03 203 142.06 203 139 C202.34 139 201.68 139 201 139 C201 139.66 201 140.32 201 141 C197.04 141 193.08 141 189 141 C189 140.34 189 139.68 189 139 C182.4 139 175.8 139 169 139 C169.66 141.64 170.32 144.28 171 147 C172.35532837 147.03758423 172.35532837 147.03758423 173.73803711 147.07592773 C177.0796428 147.17087317 180.42106252 147.27011621 183.76245117 147.37231445 C185.2106424 147.4157163 186.65888654 147.45738744 188.10717773 147.49731445 C190.18489559 147.55489062 192.26234573 147.61862028 194.33984375 147.68359375 C196.21724243 147.73858032 196.21724243 147.73858032 198.13256836 147.79467773 C201 148 201 148 202 149 C202.08651611 150.41570123 202.10704904 151.835595 202.09765625 153.25390625 C202.09443359 154.10791016 202.09121094 154.96191406 202.08789062 155.84179688 C202.07951172 156.73962891 202.07113281 157.63746094 202.0625 158.5625 C202.05798828 159.46419922 202.05347656 160.36589844 202.04882812 161.29492188 C202.03700244 163.52997589 202.01906638 165.76499602 202 168 C198.04 168.33 194.08 168.66 190 169 C190.99 171.475 190.99 171.475 192 174 C192.99 174.33 193.98 174.66 195 175 C195.33 175.66 195.66 176.32 196 177 C198.49717235 177.43272301 200.92094643 177.75072678 203.4375 178 C219.60009682 179.80004841 219.60009682 179.80004841 224 182 C224 184.64 224 187.28 224 190 C223.01 189.67 222.02 189.34 221 189 C219.8125 186.4375 219.8125 186.4375 219 184 C218.71125 184.61875 218.4225 185.2375 218.125 185.875 C217 188 217 188 215 190 C215.66 190.33 216.32 190.66 217 191 C217 191.66 217 192.32 217 193 C215.68 193 214.36 193 213 193 C213.45375 193.845625 213.9075 194.69125 214.375 195.5625 C217.96597787 203.15879935 218.2443737 209.73202309 218 218 C217.34 218 216.68 218 216 218 C215.93941406 217.39671875 215.87882813 216.7934375 215.81640625 216.171875 C215.73261719 215.37265625 215.64882812 214.5734375 215.5625 213.75 C215.48128906 212.96109375 215.40007812 212.1721875 215.31640625 211.359375 C215.02365007 209.17635361 214.57935581 207.1226818 214 205 C213.34 205 212.68 205 212 205 C211.34 214.57 210.68 224.14 210 234 C209.34 234 208.68 234 208 234 C207.67 230.7 207.34 227.4 207 224 C205.68 224 204.36 224 203 224 C201.05907947 215.41039426 200.01346937 206.73556788 199 198 C198.88527344 197.01257813 198.77054688 196.02515625 198.65234375 195.0078125 C198 189.25616197 198 189.25616197 198 188 C194.04 187.67 190.08 187.34 186 187 C185.67 186.01 185.34 185.02 185 184 C184.38511719 184 183.77023438 184 183.13671875 184 C179.7578125 184 176.37890625 184 173 184 C171.97980427 184.9793879 170.97850195 185.97895449 170 187 C169.34 187 168.68 187 168 187 C168 191.62 168 196.24 168 201 C169.32 201 170.64 201 172 201 C171.67 201.86625 171.34 202.7325 171 203.625 C170.01268659 206.95718275 169.83579026 209.55159538 170 213 C164.34750484 214.71318819 161.27864871 212.53092599 156.28125 209.90234375 C151.85808323 207.33796016 147.66521749 204.49565224 143.49609375 201.5390625 C141.06313949 199.73757978 141.06313949 199.73757978 138 200 C136.55386195 201.56746782 136.55386195 201.56746782 135.25 203.625 C133.2404202 206.48592888 131.48129568 208.50450576 128.625 210.5 C123.32078534 214.82926054 120.99528518 221.56726732 118.14599609 227.62646484 C116.04546123 231.97699744 113.76488595 236.23340005 111.5 240.5 C110.83133911 241.76493286 110.83133911 241.76493286 110.14916992 243.05541992 C109.10105287 245.03780435 108.05134157 247.01932439 107 249 C114.99155179 250.64703849 114.99155179 250.64703849 122.5390625 248.54296875 C124.63235312 246.67445105 124.63235312 246.67445105 126.4140625 244.6640625 C128.96458577 241.98789769 131.62296307 241.87006686 135.1328125 241.75390625 C135.93976563 241.72103516 136.74671875 241.68816406 137.578125 241.65429688 C139.25249676 241.59394759 140.92697868 241.53656851 142.6015625 241.48242188 C148.25969032 241.24517443 153.51619738 240.41264473 159 239 C157.9966104 241.51522326 156.98852169 244.02811104 155.96484375 246.53515625 C155.62582031 247.36917969 155.28679687 248.20320312 154.9375 249.0625 C154.59589844 249.89910156 154.25429687 250.73570312 153.90234375 251.59765625 C153.10381544 253.72360823 152.49578297 255.78686571 152 258 C139.3610422 261.89308872 127.18687834 262.78848481 114 263 C114 263.66 114 264.32 114 265 C113.01 265 112.02 265 111 265 C112.45044271 260.89041233 114.51110752 257.56741255 117 254 C111.78643246 252.60971532 105.08805589 251.4780747 100.08984375 253.94140625 C96.59634895 256.67955082 95.68863901 258.77840247 94 263 C98.62 263 103.24 263 108 263 C107.67 263.66 107.34 264.32 107 265 C101.06 265 95.12 265 89 265 C89 254.875 89 254.875 91 250 C91.66 250 92.32 250 93 250 C92.34 249.67 91.68 249.34 91 249 C91 247.02 91 245.04 91 243 C91.66 242.67 92.32 242.34 93 242 C93 241.34 93 240.68 93 240 C96.30350614 236.88002198 97.32409833 236 102 236 C101.67 235.34 101.34 234.68 101 234 C98.6859378 233.26924352 96.35171131 232.59861742 94 232 C94.95421808 230.85073734 95.91352045 229.70569459 96.875 228.5625 C97.67550781 227.60537109 97.67550781 227.60537109 98.4921875 226.62890625 C100 225 100 225 102 224 C102.66 224.33 103.32 224.66 104 225 C104 224.34 104 223.68 104 223 C102.68 223 101.36 223 100 223 C100 220.69 100 218.38 100 216 C100.66 215.67 101.32 215.34 102 215 C102 213.35 102 211.7 102 210 C102.66 210 103.32 210 104 210 C104 209.34 104 208.68 104 208 C105.30195312 207.9484375 106.60390625 207.896875 107.9453125 207.84375 C117.26183382 207.62302434 117.26183382 207.62302434 125.59765625 204.15625 C127.56941295 201.4820247 129 199.37447232 129 196 C123.06 196 117.12 196 111 196 C113 192 113 192 114 191 C116.86267567 190.92674832 119.700719 190.90761795 122.5625 190.9375 C123.36880859 190.94201172 124.17511719 190.94652344 125.00585938 190.95117188 C127.00393756 190.96299482 129.00197783 190.98093086 131 191 C126.38 190.67 121.76 190.34 117 190 C117 189.34 117 188.68 117 188 C113.535 188.99 113.535 188.99 110 190 C111.8125 187.5 111.8125 187.5 114 185 C114.99 185 115.98 185 117 185 C116.505 182.525 116.505 182.525 116 180 C116.66 180.33 117.32 180.66 118 181 C120.05806764 181.0974081 122.11931701 181.13076877 124.1796875 181.1328125 C126.03787109 181.13474609 126.03787109 181.13474609 127.93359375 181.13671875 C129.23425781 181.13285156 130.53492188 181.12898437 131.875 181.125 C133.81439453 181.13080078 133.81439453 181.13080078 135.79296875 181.13671875 C137.03433594 181.13542969 138.27570313 181.13414062 139.5546875 181.1328125 C140.69405762 181.13168457 141.83342773 181.13055664 143.00732422 181.12939453 C145.55705064 181.01915183 147.56153902 180.6533891 150 180 C151.34488535 179.9337658 152.69274394 179.91448054 154.0390625 179.9375 C154.78414062 179.94523438 155.52921875 179.95296875 156.296875 179.9609375 C157.06515625 179.97382813 157.8334375 179.98671875 158.625 180 C163.97019614 180.34138045 163.97019614 180.34138045 169 179 C168.67 179.99 168.34 180.98 168 182 C167.01 182.33 166.02 182.66 165 183 C164.67 183.66 164.34 184.32 164 185 C168.95514502 184.12527407 168.95514502 184.12527407 172.4375 180.875 C172.623125 180.25625 172.80875 179.6375 173 179 C173.66 179 174.32 179 175 179 C175 179.66 175 180.32 175 181 C175.77085937 180.98839844 176.54171875 180.97679687 177.3359375 180.96484375 C178.33882812 180.95582031 179.34171875 180.94679688 180.375 180.9375 C181.37273437 180.92589844 182.37046875 180.91429687 183.3984375 180.90234375 C186 181 186 181 188 182 C188 181.01 188 180.02 188 179 C185.03 179 182.06 179 179 179 C178.67 177.35 178.34 175.7 178 174 C175.03 173.34 172.06 172.68 169 172 C169 170.68 169 169.36 169 168 C167.35 168 165.7 168 164 168 C163.67 168.99 163.34 169.98 163 171 C161.37536158 171.05395478 159.75021459 171.09277195 158.125 171.125 C157.22007812 171.14820313 156.31515625 171.17140625 155.3828125 171.1953125 C153 171 153 171 151 169 C150.875 166.375 150.875 166.375 151 164 C155.455 163.01 155.455 163.01 160 162 C156.08226724 160.04113362 151.28038334 160.63776728 147 161 C143.54653852 162.34746524 143.54653852 162.34746524 141 164 C140.34 164 139.68 164 139 164 C138.67 166.31 138.34 168.62 138 171 C133.05 171 128.1 171 123 171 C122.67 169.68 122.34 168.36 122 167 C122.66 166.34 123.32 165.68 124 165 C124 164.01 124 163.02 124 162 C123.33613281 162.01160156 122.67226562 162.02320313 121.98828125 162.03515625 C121.10527344 162.04417969 120.22226563 162.05320312 119.3125 162.0625 C118.44238281 162.07410156 117.57226562 162.08570313 116.67578125 162.09765625 C114 162 114 162 111.56640625 161.51171875 C92.55312719 157.72063876 70.42856003 162.9577724 51.35546875 165.27734375 C49.98455078 165.44350441 49.98455078 165.44350441 48.5859375 165.61302185 C44.09558879 166.15883914 39.60672361 166.71393091 35.11962891 167.28588867 C33.43003134 167.49542772 31.74041616 167.70482476 30.05078125 167.9140625 C29.33367477 168.00876328 28.6165683 168.10346405 27.87773132 168.20103455 C18.58618023 169.3359784 9.41474662 169.52926267 0 170 C0 113.9 0 57.8 0 0 Z \",fill:\"#F54A2C\",transform:\"translate(0,138)\"})),_path5||(_path5=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 101.31 0 202.62 0 307 C-16.85663338 307 -16.85663338 307 -22.84765625 306.4140625 C-23.82491417 306.32245094 -23.82491417 306.32245094 -24.82191467 306.22898865 C-26.19642861 306.0997833 -27.57067607 305.96771142 -28.94464111 305.83279419 C-32.65829947 305.46842779 -36.37397047 305.12608598 -40.08984375 304.78515625 C-40.8418103 304.71592453 -41.59377686 304.64669281 -42.36853027 304.57536316 C-49.61210408 303.92105652 -56.86478339 303.48823252 -64.125 303.0625 C-79.85224982 302.09830103 -95.40039174 300.17470322 -111 298 C-111.97630371 297.8644873 -112.95260742 297.72897461 -113.95849609 297.58935547 C-118.58944525 296.93413724 -123.2033492 296.21834289 -127.80712891 295.39306641 C-129.36778883 295.1133222 -130.93018273 294.84317851 -132.49365234 294.57958984 C-135.02314909 294.14548321 -137.54230048 293.67240422 -140.0625 293.1875 C-140.83190918 293.05859375 -141.60131836 292.9296875 -142.39404297 292.796875 C-144.53515625 292.35546875 -144.53515625 292.35546875 -148 291 C-149.49609375 287.86328125 -149.49609375 287.86328125 -150 285 C-150 286.65 -150 288.3 -150 290 C-151.32 290.33 -152.64 290.66 -154 291 C-153.030625 291.598125 -152.06125 292.19625 -151.0625 292.8125 C-148 295 -148 295 -147 298 C-147.66 298.33 -148.32 298.66 -149 299 C-148.67 299.99 -148.34 300.98 -148 302 C-147.071875 302.0825 -146.14375 302.165 -145.1875 302.25 C-142 303 -142 303 -140.125 304.5625 C-138.47227844 308.14339672 -138.80381792 311.07635835 -139 315 C-140.65 315 -142.3 315 -144 315 C-144 313.68 -144 312.36 -144 311 C-144.66 311.33 -145.32 311.66 -146 312 C-146.65213292 314.02463255 -146.65213292 314.02463255 -147 316 C-148.65 316 -150.3 316 -152 316 C-151.67 316.99 -151.34 317.98 -151 319 C-150.01 319.33 -149.02 319.66 -148 320 C-148 320.66 -148 321.32 -148 322 C-149.77119803 321.85866501 -151.54195287 321.71176792 -153.3125 321.5625 C-154.29863281 321.48128906 -155.28476562 321.40007812 -156.30078125 321.31640625 C-159 321 -159 321 -162 320 C-162 319.34 -162 318.68 -162 318 C-163.65 318 -165.3 318 -167 318 C-167.66 315.36 -168.32 312.72 -169 310 C-169.99 310.33 -170.98 310.66 -172 311 C-174.57265818 311.07029121 -177.11641431 311.09370832 -179.6875 311.0625 C-180.38939453 311.05798828 -181.09128906 311.05347656 -181.81445312 311.04882812 C-183.54300538 311.03706927 -185.27151365 311.01913454 -187 311 C-187 310.34 -187 309.68 -187 309 C-186.34 308.67 -185.68 308.34 -185 308 C-184.27840576 306.35636866 -183.60648579 304.68949614 -183 303 C-181.0412957 303.14076315 -179.08303907 303.2877676 -177.125 303.4375 C-176.03445313 303.51871094 -174.94390625 303.59992188 -173.8203125 303.68359375 C-171 304 -171 304 -169 305 C-169 304.01 -169 303.02 -169 302 C-171.97 301.67 -174.94 301.34 -178 301 C-177.34 300.01 -176.68 299.02 -176 298 C-175.34 298 -174.68 298 -174 298 C-173.87753906 297.43796875 -173.75507813 296.8759375 -173.62890625 296.296875 C-172.9480131 293.81013481 -172.00647675 291.59485224 -170.9375 289.25 C-170.57527344 288.45078125 -170.21304688 287.6515625 -169.83984375 286.828125 C-169.56269531 286.22484375 -169.28554688 285.6215625 -169 285 C-169.66 285 -170.32 285 -171 285 C-171.33 286.65 -171.66 288.3 -172 290 C-182.42537865 290.43040554 -192.64896462 289.11152058 -203 288 C-203 294.6 -203 301.2 -203 308 C-202.34 308.33 -201.68 308.66 -201 309 C-201 310.98 -201 312.96 -201 315 C-201.66 315 -202.32 315 -203 315 C-203.3205724 313.12636327 -203.6308098 311.25095905 -203.9375 309.375 C-204.11152344 308.33085937 -204.28554688 307.28671875 -204.46484375 306.2109375 C-205.33523385 300.180721 -205.60683687 294.07577258 -206 288 C-206.64605698 287.90865784 -207.29211395 287.81731567 -207.95774841 287.72320557 C-214.82304859 286.75210058 -221.6878863 285.77777196 -228.55249023 284.80175781 C-231.09762573 284.44029195 -233.64286937 284.07958652 -236.18823242 283.71972656 C-253.15546442 281.32025232 -270.08920517 278.7701528 -287 276 C-287 278.97 -287 281.94 -287 285 C-296.24 284.67 -305.48 284.34 -315 284 C-315 285.32 -315 286.64 -315 288 C-301.8 288 -288.6 288 -275 288 C-274.32008562 294.11922939 -273.86103951 299.86756719 -273.90234375 305.97265625 C-273.9037587 306.78117538 -273.90517365 307.58969452 -273.90663147 308.42271423 C-273.91216586 310.96934942 -273.9247054 313.51589203 -273.9375 316.0625 C-273.9425235 317.80403518 -273.94708491 319.54557175 -273.95117188 321.28710938 C-273.96211366 325.52477448 -273.97933174 329.76237163 -274 334 C-275.65 333.67 -277.3 333.34 -279 333 C-279 329.7 -279 326.4 -279 323 C-280.42054688 323.03480469 -281.84109375 323.06960938 -283.3046875 323.10546875 C-285.16144655 323.13360146 -287.01821833 323.16090217 -288.875 323.1875 C-290.28072266 323.22520508 -290.28072266 323.22520508 -291.71484375 323.26367188 C-292.61074219 323.27333984 -293.50664062 323.28300781 -294.4296875 323.29296875 C-295.25710449 323.3086792 -296.08452148 323.32438965 -296.93701172 323.34057617 C-297.61779785 323.22818604 -298.29858398 323.1157959 -299 323 C-301 320 -301 320 -301 317 C-293.41 317 -285.82 317 -278 317 C-278.33 315.02 -278.66 313.04 -279 311 C-286.92 310.67 -294.84 310.34 -303 310 C-303 309.67 -303 309.34 -303 309 C-295.41 308.67 -287.82 308.34 -280 308 C-287.92 308 -295.84 308 -304 308 C-306 302 -306 302 -306 298 C-295.99112106 297.37722531 -286.03411669 296.82292735 -276 297 C-276.66 295.35 -277.32 293.7 -278 292 C-277.34 292 -276.68 292 -276 292 C-276 291.34 -276 290.68 -276 290 C-281.67830078 289.97535295 -287.35657069 289.95716538 -293.03491211 289.94506836 C-294.96818585 289.94002744 -296.90145576 289.93319481 -298.8347168 289.92456055 C-301.60726872 289.91248435 -304.37977041 289.90676943 -307.15234375 289.90234375 C-308.02213364 289.89718246 -308.89192352 289.89202118 -309.78807068 289.88670349 C-311.85905814 289.88650815 -313.92994324 289.93791832 -316 290 C-316.33 290.33 -316.66 290.66 -317 291 C-316.2575 291.04125 -315.515 291.0825 -314.75 291.125 C-310.74902076 292.39803885 -309.9623844 294.33688244 -308 298 C-305.89543446 303.03656711 -304.57501659 307.47521569 -305 313 C-307.97 313.33 -310.94 313.66 -314 314 C-313.67 311.36 -313.34 308.72 -313 306 C-313.66 306 -314.32 306 -315 306 C-315 308.31 -315 310.62 -315 313 C-317.97 313 -320.94 313 -324 313 C-324 311.35 -324 309.7 -324 308 C-334.23 307.67 -344.46 307.34 -355 307 C-355 307.66 -355 308.32 -355 309 C-345.43 309 -335.86 309 -326 309 C-326 311.31 -326 313.62 -326 316 C-326.33 316 -326.66 316 -327 316 C-327 314.02 -327 312.04 -327 310 C-335.91 310 -344.82 310 -354 310 C-354 312.64 -354 315.28 -354 318 C-353.22285645 318 -352.44571289 318 -351.64501953 318 C-343.09667969 318 -334.54833984 318 -326 318 C-325.67 317.34 -325.34 316.68 -325 316 C-322.36 316 -319.72 316 -317 316 C-317 317.65 -317 319.3 -317 321 C-316.34 321 -315.68 321 -315 321 C-315 321.66 -315 322.32 -315 323 C-314.34 323 -313.68 323 -313 323 C-312.505 326.465 -312.505 326.465 -312 330 C-311.34 330 -310.68 330 -310 330 C-310 330.66 -310 331.32 -310 332 C-309.34 332 -308.68 332 -308 332 C-308 332.66 -308 333.32 -308 334 C-307.34 334 -306.68 334 -306 334 C-306 334.99 -306 335.98 -306 337 C-307.65 337 -309.3 337 -311 337 C-311 340.63 -311 344.26 -311 348 C-311.33 348 -311.66 348 -312 348 C-312 344.37 -312 340.74 -312 337 C-314.25018142 337.47831397 -316.50013867 337.95768264 -318.75 338.4375 C-320.62945312 338.83775391 -320.62945312 338.83775391 -322.546875 339.24609375 C-325.04557085 339.7916235 -327.52553101 340.35638812 -330 341 C-329.67 341.556875 -329.34 342.11375 -329 342.6875 C-327.8690399 345.30284522 -327.84337026 347.1806646 -328 350 C-325.36 349.67 -322.72 349.34 -320 349 C-320 349.66 -320 350.32 -320 351 C-319.34 351.33 -318.68 351.66 -318 352 C-317.375 355.0625 -317.375 355.0625 -317 358 C-316.67 355.69 -316.34 353.38 -316 351 C-316.66 351 -317.32 351 -318 351 C-318 350.34 -318 349.68 -318 349 C-317.34 349 -316.68 349 -316 349 C-316 347.35 -316 345.7 -316 344 C-315.67 344 -315.34 344 -315 344 C-314.80306008 346.66626359 -314.61725218 349.33256639 -314.4375 352 C-314.35338867 353.11568359 -314.35338867 353.11568359 -314.26757812 354.25390625 C-313.93652715 359.33002118 -314.22836955 363.97011262 -315 369 C-315.66 369 -316.32 369 -317 369 C-317 366.36 -317 363.72 -317 361 C-322.94 361 -328.88 361 -335 361 C-336.60226497 355.3920726 -337.46738421 351.03689965 -337.8125 345.375 C-337.87630859 344.63765625 -337.94011719 343.9003125 -338.00585938 343.140625 C-338.30273478 338.47424545 -337.8850575 335.71136038 -335 332 C-334.484375 331.505 -333.96875 331.01 -333.4375 330.5 C-331.50759591 328.67349571 -331.50759591 328.67349571 -330 324 C-337.59 323.67 -345.18 323.34 -353 323 C-353 326.63 -353 330.26 -353 334 C-353.495 335.98 -353.495 335.98 -354 338 C-349.38 338.33 -344.76 338.66 -340 339 C-339.94616152 341.45862401 -339.90640962 343.9160755 -339.875 346.375 C-339.84986328 347.42300781 -339.84986328 347.42300781 -339.82421875 348.4921875 C-339.80655733 350.32897486 -339.89696739 352.16601963 -340 354 C-342.5654594 356.5654594 -344.47686668 356.54046087 -348 357 C-348.14695312 356.44570313 -348.29390625 355.89140625 -348.4453125 355.3203125 C-349.85318163 350.51326131 -349.85318163 350.51326131 -353.6875 347.5625 C-357.4582752 346.92217968 -361.19494119 346.39362677 -365 346 C-365 345.67 -365 345.34 -365 345 C-363.865625 344.87625 -362.73125 344.7525 -361.5625 344.625 C-360.386875 344.41875 -359.21125 344.2125 -358 344 C-356.84708316 341.69416631 -356.84602662 340.30133113 -356.79467773 337.73388672 C-356.77473251 336.85312469 -356.75478729 335.97236267 -356.73423767 335.06491089 C-356.71752518 334.11278717 -356.70081268 333.16066345 -356.68359375 332.1796875 C-356.66281265 331.20589142 -356.64203156 330.23209534 -356.62062073 329.22879028 C-356.55511402 326.11093353 -356.49623503 322.99299097 -356.4375 319.875 C-356.39431585 317.76431396 -356.3507016 315.65363667 -356.30664062 313.54296875 C-356.19862023 308.36206593 -356.09955507 303.18110016 -356 298 C-340.16 297.505 -340.16 297.505 -324 297 C-323.67 296.34 -323.34 295.68 -323 295 C-324.65 295.33 -326.3 295.66 -328 296 C-328 294.68 -328 293.36 -328 292 C-325.03 292 -322.06 292 -319 292 C-319 291.34 -319 290.68 -319 290 C-330.55 290 -342.1 290 -354 290 C-354 289.34 -354 288.68 -354 288 C-342.12 288 -330.24 288 -318 288 C-318 286.68 -318 285.36 -318 284 C-325.92 284 -333.84 284 -342 284 C-342 281.69 -342 279.38 -342 277 C-324.51 277 -307.02 277 -289 277 C-289 276.34 -289 275.68 -289 275 C-289.57185028 275.00222061 -290.14370056 275.00444122 -290.73287964 275.00672913 C-296.66973243 275.02880483 -302.60657362 275.0439162 -308.54345703 275.05493164 C-310.76090976 275.05996909 -312.97835916 275.06679922 -315.19580078 275.07543945 C-318.37793805 275.08753072 -321.56003151 275.0932341 -324.7421875 275.09765625 C-325.73805878 275.10281754 -326.73393005 275.10797882 -327.75997925 275.11329651 C-329.14118454 275.11340981 -329.14118454 275.11340981 -330.55029297 275.11352539 C-331.3630368 275.115746 -332.17578064 275.11796661 -333.01315308 275.12025452 C-335 275 -335 275 -337 274 C-337 273.01 -337 272.02 -337 271 C-331.72 271 -326.44 271 -321 271 C-321 271.99 -321 272.98 -321 274 C-320.34 274 -319.68 274 -319 274 C-319 273.01 -319 272.02 -319 271 C-318.34 271 -317.68 271 -317 271 C-317 271.66 -317 272.32 -317 273 C-316.34 273 -315.68 273 -315 273 C-315 272.34 -315 271.68 -315 271 C-310.05 270.67 -305.1 270.34 -300 270 C-300.33 268.35 -300.66 266.7 -301 265 C-301.25999016 262.22510499 -301.18451589 259.8138673 -301 257 C-298.09907498 255.06604999 -297.10325263 254.69868059 -293.8125 254.375 C-292.554375 254.25125 -291.29625 254.1275 -290 254 C-290.34444881 251.52733235 -290.34444881 251.52733235 -291 249 C-291.66 248.67 -292.32 248.34 -293 248 C-291.68 248 -290.36 248 -289 248 C-289 248.66 -289 249.32 -289 250 C-288.01 249.67 -287.02 249.34 -286 249 C-285.67 248.34 -285.34 247.68 -285 247 C-284.01 247.33 -283.02 247.66 -282 248 C-279.61180866 247.6162858 -277.23722784 247.14516734 -274.875 246.625 C-269.25509597 245.42291412 -263.72674359 244.50234593 -258 244 C-258 243.34 -258 242.68 -258 242 C-258.94653442 242.2131636 -259.89306885 242.42632721 -260.86828613 242.64595032 C-271.33476148 244.87771064 -281.29494033 245.40126127 -291.96875 245.29296875 C-293.62739676 245.28735424 -295.28604858 245.28309296 -296.94470215 245.28010559 C-301.25187596 245.26880244 -305.55873276 245.2394658 -309.86578369 245.20599365 C-314.28417679 245.17497409 -318.70262251 245.16153305 -323.12109375 245.14648438 C-331.74753923 245.11457772 -340.37372988 245.06356411 -349 245 C-349 244.67 -349 244.34 -349 244 C-326.56 243.67 -304.12 243.34 -281 243 C-280.67 242.34 -280.34 241.68 -280 241 C-280.66 241 -281.32 241 -282 241 C-282 240.34 -282 239.68 -282 239 C-283.65 239 -285.3 239 -287 239 C-285.68 238.67 -284.36 238.34 -283 238 C-283 237.34 -283 236.68 -283 236 C-283.99 236 -284.98 236 -286 236 C-287.60546875 234.03125 -287.60546875 234.03125 -289.1875 231.5 C-289.71730469 230.6646875 -290.24710937 229.829375 -290.79296875 228.96875 C-291.19128906 228.3190625 -291.58960938 227.669375 -292 227 C-290.87464844 226.52691406 -289.74929688 226.05382812 -288.58984375 225.56640625 C-278.2027267 221.12193507 -268.46342454 216.17951638 -259 210 C-258.39777618 209.68119873 -257.79555237 209.36239746 -257.17507935 209.03393555 C-254.34303608 207.38272636 -252.36065942 206.1452459 -251.34849548 202.93119812 C-251.09318257 200.37307849 -251.05661706 197.89475626 -251.09765625 195.32421875 C-251.08536484 194.3990596 -251.07307343 193.47390045 -251.06040955 192.52070618 C-251.02870081 189.57549516 -251.04494992 186.63278884 -251.0625 183.6875 C-251.04938985 181.68682571 -251.03314942 179.68616931 -251.01367188 177.68554688 C-250.97283518 172.7898307 -250.97499395 167.89580477 -251 163 C-250.67 163 -250.34 163 -250 163 C-250 176.2 -250 189.4 -250 203 C-245.42904211 200.71452106 -241.82426247 198.58720532 -237.75 195.625 C-237.16226807 195.20017334 -236.57453613 194.77534668 -235.96899414 194.33764648 C-233.9761658 192.89607536 -231.98796823 191.44826502 -230 190 C-227.61279891 188.26517675 -225.22462721 186.53171917 -222.83496094 184.80029297 C-221.26494698 183.66227267 -219.69652339 182.5220543 -218.12988281 181.37939453 C-207.96372153 174 -207.96372153 174 -205 174 C-205 173.34 -205 172.68 -205 172 C-206.18078125 172.01160156 -207.3615625 172.02320313 -208.578125 172.03515625 C-210.13541508 172.04453752 -211.69270688 172.05363736 -213.25 172.0625 C-214.02730469 172.07087891 -214.80460938 172.07925781 -215.60546875 172.08789062 C-216.35957031 172.09111328 -217.11367188 172.09433594 -217.890625 172.09765625 C-218.58188477 172.10289307 -219.27314453 172.10812988 -219.98535156 172.11352539 C-222.09973898 171.99437971 -223.96641515 171.57618237 -226 171 C-224.52535076 167.29717196 -222.64171558 165.77814244 -219.375 163.5625 C-214.45372341 160.10343517 -209.77185417 156.44404299 -205.125 152.625 C-200.18022631 148.56981798 -195.20874523 144.56738031 -190.125 140.6875 C-183.46053667 135.59847441 -176.907925 130.3847985 -170.421875 125.0703125 C-162.17895683 118.32489039 -153.82865393 111.75566759 -145.34765625 105.3125 C-140.8944058 101.92758745 -136.47505313 98.50022568 -132.0625 95.0625 C-131.31991943 94.48411377 -130.57733887 93.90572754 -129.81225586 93.30981445 C-128.30403465 92.13465128 -126.79597867 90.95927603 -125.28808594 89.78369141 C-96.53928106 67.37238449 -96.53928106 67.37238449 -82.21557617 56.66699219 C-77.34486726 53.02220466 -72.51096312 49.33199339 -67.6875 45.625 C-59.35090108 39.22741236 -50.89960392 32.99209016 -42.42480469 26.77929688 C-39.16729646 24.38897066 -35.9153437 21.99115852 -32.66430664 19.59204102 C-31.06869057 18.41594176 -29.47154705 17.24191166 -27.87280273 16.07006836 C-24.11123551 13.31106192 -20.37379161 10.5297265 -16.68359375 7.67578125 C-16.0071582 7.15975342 -15.33072266 6.64372559 -14.63378906 6.11206055 C-13.37800793 5.15258201 -12.13052188 4.18210083 -10.89355469 3.19848633 C-6.70492469 0.02321509 -5.6879553 0 0 0 Z \",fill:\"#5D5544\",transform:\"translate(626,0)\"})),_path6||(_path6=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.63001953 0.01353516 1.63001953 0.01353516 3.29296875 0.02734375 C4.12441406 0.03894531 4.95585937 0.05054688 5.8125 0.0625 C5.8125 0.7225 5.8125 1.3825 5.8125 2.0625 C2.1825 2.3925 -1.4475 2.7225 -5.1875 3.0625 C3.98460724 5.29959933 13.15769863 7.07646176 22.47119141 8.61621094 C23.85250244 8.85452637 23.85250244 8.85452637 25.26171875 9.09765625 C26.09018311 9.2356665 26.91864746 9.37367676 27.7722168 9.51586914 C29.8125 10.0625 29.8125 10.0625 31.8125 12.0625 C32.37770003 14.71787372 32.55038198 17.35394713 32.8125 20.0625 C33.8025 20.0625 34.7925 20.0625 35.8125 20.0625 C36.1425 23.3625 36.4725 26.6625 36.8125 30.0625 C43.0988532 32.29314146 49.24645316 33.89733511 55.8125 35.0625 C55.8125 34.4025 55.8125 33.7425 55.8125 33.0625 C59.4425 33.0625 63.0725 33.0625 66.8125 33.0625 C65.8225 28.1125 65.8225 28.1125 64.8125 23.0625 C71.46283252 22.53747375 71.46283252 22.53747375 74.8125 23.0625 C78.8125 27.44345238 78.8125 27.44345238 78.8125 31.0625 C80.1325 31.0625 81.4525 31.0625 82.8125 31.0625 C83.1425 30.0725 83.4725 29.0825 83.8125 28.0625 C84.1425 28.3925 84.4725 28.7225 84.8125 29.0625 C85.1425 28.4025 85.4725 27.7425 85.8125 27.0625 C92.9195072 25.48316507 100.5794813 25.9506492 107.8125 26.0625 C107.8125 25.4025 107.8125 24.7425 107.8125 24.0625 C125.53977273 20.75340909 125.53977273 20.75340909 133.8125 24.0625 C133.8125 24.7225 133.8125 25.3825 133.8125 26.0625 C137.4425 26.7225 141.0725 27.3825 144.8125 28.0625 C144.8125 28.3925 144.8125 28.7225 144.8125 29.0625 C143.72453125 29.17207031 142.6365625 29.28164063 141.515625 29.39453125 C133.61864842 30.23162518 126.00624922 31.26193771 118.328125 33.37890625 C111.7203177 35.17450606 105.31245621 35.37235264 98.49804688 35.58007812 C97.66982422 35.61423828 96.84160156 35.64839844 95.98828125 35.68359375 C95.23458252 35.7086499 94.48088379 35.73370605 93.7043457 35.75952148 C91.57282413 35.91124814 91.57282413 35.91124814 89.8125 38.0625 C87.82428687 38.46014263 85.82305661 38.80025349 83.8125 39.0625 C83.8125 39.3925 83.8125 39.7225 83.8125 40.0625 C77.69273503 40.13697293 71.57323722 40.19125469 65.453125 40.22729492 C63.37365113 40.24232843 61.29420869 40.26276074 59.21484375 40.28881836 C56.21606666 40.32544136 53.21771089 40.34228111 50.21875 40.35546875 C49.29759399 40.37095261 48.37643799 40.38643646 47.42736816 40.40238953 C42.29837218 40.40370974 38.37626412 39.80013304 33.65686035 37.79374695 C30.80670328 36.66372447 27.93390048 36.30102136 24.90625 35.89453125 C23.66875 35.72373047 22.43125 35.55292969 21.15625 35.37695312 C19.8878125 35.21130859 18.619375 35.04566406 17.3125 34.875 C16.013125 34.69775391 14.71375 34.52050781 13.375 34.33789062 C10.18852549 33.90443637 7.00115435 33.47956121 3.8125 33.0625 C3.8125 36.6925 3.8125 40.3225 3.8125 44.0625 C5.65714844 44.15337891 5.65714844 44.15337891 7.5390625 44.24609375 C9.17188427 44.33055005 10.80469627 44.41519547 12.4375 44.5 C13.24574219 44.53931641 14.05398438 44.57863281 14.88671875 44.61914062 C16.07587891 44.68198242 16.07587891 44.68198242 17.2890625 44.74609375 C18.3730835 44.80108032 18.3730835 44.80108032 19.47900391 44.85717773 C21.8125 45.0625 21.8125 45.0625 24.3425293 45.57177734 C29.50910735 46.30243392 34.64366342 46.22494821 39.85546875 46.23046875 C41.03996613 46.23452225 42.2244635 46.23857574 43.44485474 46.24275208 C47.29659716 46.25222319 51.14824748 46.25214471 55 46.25 C56.96723526 46.25108765 56.96723526 46.25108765 58.97421265 46.25219727 C75.60630068 46.25117943 92.17523778 46.08954111 108.76049805 44.77416992 C122.54334095 43.72530277 135.79264279 44.0625 149.8125 44.0625 C149.8125 113.0325 149.8125 182.0025 149.8125 253.0625 C70.2825 253.0625 -9.2475 253.0625 -91.1875 253.0625 C-96.1875 235.0625 -96.1875 235.0625 -97.1875 228.0625 C-97.8475 227.7325 -98.5075 227.4025 -99.1875 227.0625 C-99.95460202 224.59938335 -100.601756 222.1943026 -101.1875 219.6875 C-101.36337646 218.96522217 -101.53925293 218.24294434 -101.72045898 217.4987793 C-102.91663656 212.4968347 -103.88348903 207.48999398 -104.59765625 202.39453125 C-105.0936285 199.93687895 -105.0936285 199.93687895 -106.7109375 197.61328125 C-108.40694588 194.68340434 -108.60966592 192.796464 -108.75 189.4375 C-109.29714145 180.7154216 -110.49411563 173.04021024 -114.1875 165.0625 C-114.79545932 163.50941614 -115.37800215 161.9461926 -115.9375 160.375 C-116.33195312 159.28638672 -116.33195312 159.28638672 -116.734375 158.17578125 C-117.25055679 155.76841619 -116.84838728 154.39912135 -116.1875 152.0625 C-114.61367554 151.99663696 -114.61367554 151.99663696 -113.00805664 151.92944336 C-100.80534565 151.3647572 -88.74789945 150.09583621 -76.625 148.625 C-74.77935824 148.40508337 -72.93365513 148.18568091 -71.08789062 147.96679688 C-69.26562389 147.75000929 -67.44335826 147.53321248 -65.62109375 147.31640625 C-64.72348831 147.20993774 -63.82588287 147.10346924 -62.90107727 146.99377441 C-58.91188828 146.51821082 -54.92551373 146.03306592 -50.9440918 145.49609375 C-38.37691818 143.83788287 -25.78415176 143.40030567 -13.125 142.9375 C-10.88995029 142.85086891 -8.65492393 142.76363331 -6.41992188 142.67578125 C-1.00936333 142.46439989 4.40143326 142.26042282 9.8125 142.0625 C8.5719157 140.9524736 7.32770217 139.84650266 6.08203125 138.7421875 C5.38956299 138.12585449 4.69709473 137.50952148 3.98364258 136.87451172 C-0.01712099 133.53551845 -4.23425568 130.71358144 -9.1875 129.0625 C-9.1875 128.4025 -9.1875 127.7425 -9.1875 127.0625 C-6.2175 127.0625 -3.2475 127.0625 -0.1875 127.0625 C-0.1875 125.0825 -0.1875 123.1025 -0.1875 121.0625 C0.4725 120.7325 1.1325 120.4025 1.8125 120.0625 C1.8125 120.7225 1.8125 121.3825 1.8125 122.0625 C4.7825 122.0625 7.7525 122.0625 10.8125 122.0625 C9.719375 121.258125 8.62625 120.45375 7.5 119.625 C6.88511719 119.17253906 6.27023437 118.72007812 5.63671875 118.25390625 C3.71572899 116.88913692 3.71572899 116.88913692 0.8125 116.0625 C0.81362793 115.27077393 0.81475586 114.47904785 0.81591797 113.66333008 C0.80379186 110.06635829 0.74612866 106.47150188 0.6875 102.875 C0.69007813 101.62912109 0.69265625 100.38324219 0.6953125 99.09960938 C0.79248472 92.84494192 0.79248472 92.84494192 -1.45581055 87.22192383 C-3.20610004 85.72877365 -3.20610004 85.72877365 -6.1875 84.0625 C-7.41167382 82.7841374 -8.60472005 81.47449855 -9.75 80.125 C-10.33007812 79.44566406 -10.91015625 78.76632812 -11.5078125 78.06640625 C-12.06210937 77.40511719 -12.61640625 76.74382812 -13.1875 76.0625 C-13.70054687 75.45277344 -14.21359375 74.84304688 -14.7421875 74.21484375 C-15.89645728 72.83558919 -17.04295117 71.44983192 -18.1875 70.0625 C-15.1875 70.0625 -15.1875 70.0625 -12.62890625 72.546875 C-11.66093971 73.62801507 -10.70161136 74.71693672 -9.75 75.8125 C-8.79376398 76.89133038 -7.83674664 77.9694688 -6.87890625 79.046875 C-6.19272217 79.8212793 -6.19272217 79.8212793 -5.49267578 80.61132812 C-2.23020173 84.33142001 -2.23020173 84.33142001 1.8125 87.0625 C3.635821 80.90879161 4.0486959 75.46603322 3.8125 69.0625 C3.4825 69.0625 3.1525 69.0625 2.8125 69.0625 C2.4825 65.1025 2.1525 61.1425 1.8125 57.0625 C1.1525 57.0625 0.4925 57.0625 -0.1875 57.0625 C-2.53520643 53.54094036 -2.56419614 51.55478157 -2.8125 47.375 C-2.92464844 45.60576172 -2.92464844 45.60576172 -3.0390625 43.80078125 C-3.08804688 42.89714844 -3.13703125 41.99351562 -3.1875 41.0625 C-3.8475 41.0625 -4.5075 41.0625 -5.1875 41.0625 C-5.1875 40.4025 -5.1875 39.7425 -5.1875 39.0625 C-6.095 38.98 -7.0025 38.8975 -7.9375 38.8125 C-11.58827839 37.97001268 -12.82134583 36.88368382 -15.1875 34.0625 C-15.5175 35.0525 -15.8475 36.0425 -16.1875 37.0625 C-17.8375 36.7325 -19.4875 36.4025 -21.1875 36.0625 C-21.6825 34.0825 -21.6825 34.0825 -22.1875 32.0625 C-24.4975 31.7325 -26.8075 31.4025 -29.1875 31.0625 C-29.1875 30.4025 -29.1875 29.7425 -29.1875 29.0625 C-30.115625 29.248125 -31.04375 29.43375 -32 29.625 C-35.1875 30.0625 -35.1875 30.0625 -38.1875 29.0625 C-39.1796875 26.796875 -39.1796875 26.796875 -40.0625 23.8125 C-42.14262221 17.10450899 -44.61638564 10.59565944 -47.1875 4.0625 C-42.8589108 -0.2660892 -34.4172731 1.00674537 -28.62890625 1 C-26.33589683 1.01573248 -24.04291751 1.03663517 -21.75 1.0625 C-19.4388485 1.08796723 -17.12764278 1.1090145 -14.81640625 1.125 C-13.3015564 1.14240234 -13.3015564 1.14240234 -11.75610352 1.16015625 C-7.71006343 1.00632904 -4.16571041 -0.04479259 0 0 Z \",fill:\"#3F2721\",transform:\"translate(476.1875,372.9375)\"})),_path7||(_path7=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C10.38328858 0.79138012 20.6384491 2.31265153 30.9375 3.8125 C32.80782725 4.08316199 34.67818888 4.35358657 36.54858398 4.6237793 C39.35890679 5.02977819 42.16919827 5.43597947 44.97932434 5.84333801 C50.6324317 6.66203021 56.28751176 7.46443862 61.9453125 8.25 C63.24863525 8.43199951 64.55195801 8.61399902 65.89477539 8.80151367 C68.29197135 9.13549032 70.6895818 9.46650875 73.08764648 9.79418945 C74.13251221 9.94073975 75.17737793 10.08729004 76.25390625 10.23828125 C77.15439697 10.36243408 78.0548877 10.48658691 78.98266602 10.61450195 C81 11 81 11 82 12 C82.22881538 13.99616505 82.39531688 15.99954193 82.53515625 18.00390625 C82.62216797 19.21884766 82.70917969 20.43378906 82.79882812 21.68554688 C82.88583984 22.96494141 82.97285156 24.24433594 83.0625 25.5625 C83.19881836 27.48739258 83.19881836 27.48739258 83.33789062 29.45117188 C83.56268946 32.63385015 83.78319818 35.81676858 84 39 C85.28322547 37.9404123 85.28322547 37.9404123 85.125 35.5 C85.28322547 33.0595877 85.28322547 33.0595877 84 32 C83.91330568 30.5112814 83.89296506 29.018555 83.90234375 27.52734375 C83.90556641 26.62822266 83.90878906 25.72910156 83.91210938 24.80273438 C83.92048828 23.85720703 83.92886719 22.91167969 83.9375 21.9375 C83.94201172 20.98810547 83.94652344 20.03871094 83.95117188 19.06054688 C83.9629989 16.70696935 83.97947975 14.35351523 84 12 C90.92326453 11.88544754 97.67445441 12.3253271 104.5625 13 C105.57119141 13.09539062 106.57988281 13.19078125 107.61914062 13.2890625 C110.07980981 13.52230129 112.5400466 13.75934891 115 14 C115.33 12.35 115.66 10.7 116 9 C116.66 9 117.32 9 118 9 C117.54554036 10.41791408 117.08625056 11.83428046 116.625 13.25 C116.36976563 14.03890625 116.11453125 14.8278125 115.8515625 15.640625 C114.39539893 19.67513325 113.66116945 21.55922036 110 24 C112.64 24.66 115.28 25.32 118 26 C118 26.99 118 27.98 118 29 C111.07 28.505 111.07 28.505 104 28 C103.34 29.65 102.68 31.3 102 33 C101.34 33 100.68 33 100 33 C100 33.66 100 34.32 100 35 C105.94 34.67 111.88 34.34 118 34 C120 38 120 38 120 42 C121.65 42 123.3 42 125 42 C125 42.66 125 43.32 125 44 C129.62 44.66 134.24 45.32 139 46 C139 45.34 139 44.68 139 44 C137.68 43.67 136.36 43.34 135 43 C135 42.01 135 41.02 135 40 C136.65 40 138.3 40 140 40 C140.33 38.35 140.66 36.7 141 35 C141.66 35 142.32 35 143 35 C143 36.32 143 37.64 143 39 C144.65 39 146.3 39 148 39 C147.68051404 35.5247752 147.22735873 32.27826986 146 29 C142.58991365 27.03816375 142.58991365 27.03816375 139 26 C137.5625 23.8125 137.5625 23.8125 137 22 C137.66 21.67 138.32 21.34 139 21 C138.401875 20.401875 137.80375 19.80375 137.1875 19.1875 C135.45833333 17.45833333 133.72916667 15.72916667 132 14 C133.65 14 135.3 14 137 14 C136.67 13.34 136.34 12.68 136 12 C135.960008 10.00039988 135.95653201 7.99952758 136 6 C138.12508244 9.18762365 138.5020163 11.26512223 139 15 C139.825 15.10957031 140.65 15.21914063 141.5 15.33203125 C147.69623146 16.18262999 153.80717471 17.13538726 159.9375 18.375 C173.15342585 20.99593037 186.63691457 22.34639275 200 24 C201.2698877 24.16951172 202.53977539 24.33902344 203.84814453 24.51367188 C208.36504719 25.07725183 212.88750965 25.37119997 217.4296875 25.6484375 C219.29948467 25.76814322 221.16927612 25.88793829 223.0390625 26.0078125 C225.90876218 26.18902641 228.77852758 26.36902143 231.6484375 26.546875 C250.13922033 27.69927506 268.5317022 29.37044431 287 31 C287 57.4 287 83.8 287 111 C282.04423274 110.17403879 279.13614533 109.34584284 274.75 107.25 C273.62722656 106.71632813 272.50445313 106.18265625 271.34765625 105.6328125 C266.88158828 103.45449697 262.42631067 101.25811786 258 99 C262.17587745 97.60804085 264.13474776 99.17676781 268 101 C268.02913821 97.4375173 268.04684529 93.87506546 268.0625 90.3125 C268.07087891 89.30509766 268.07925781 88.29769531 268.08789062 87.25976562 C268.09111328 86.28330078 268.09433594 85.30683594 268.09765625 84.30078125 C268.10289307 83.40528564 268.10812988 82.50979004 268.11352539 81.5871582 C267.99840198 78.96358241 267.58234285 76.55706947 267 74 C266.25314941 73.88406494 265.50629883 73.76812988 264.73681641 73.64868164 C261.3656636 73.12339923 257.99533308 72.59301539 254.625 72.0625 C253.449375 71.88009766 252.27375 71.69769531 251.0625 71.50976562 C249.94101562 71.33251953 248.81953125 71.15527344 247.6640625 70.97265625 C246.62717285 70.81031494 245.5902832 70.64797363 244.52197266 70.48071289 C242 70 242 70 240 69 C239 67.328125 239 67.328125 238 65.25 C237.649375 64.528125 237.29875 63.80625 236.9375 63.0625 C236 61 236 61 235 58.25 C233.72989549 55.39226485 232.54345131 53.83693706 230 52 C226.97919865 51.68291229 226.97919865 51.68291229 224 53 C218.41359336 58.58640664 216.87394819 63.38777195 216.24609375 71.01171875 C216 73 216 73 215 75 C213.515 75.495 213.515 75.495 212 76 C213.65 76.33 215.3 76.66 217 77 C217 77.66 217 78.32 217 79 C209.34167083 78.70544888 203.65738822 75.62827658 197 72 C197 71.01 197 70.02 197 69 C197.99 69 198.98 69 200 69 C200.28875 68.2575 200.5775 67.515 200.875 66.75 C202 64 202 64 203.0625 62.125 C204.42095003 59.30497063 204.42095003 59.30497063 205 53 C195.43 52.34 185.86 51.68 176 51 C177.485 54.465 177.485 54.465 179 58 C179.4021875 59.423125 179.4021875 59.423125 179.8125 60.875 C181.20269907 64.5334186 183.12302175 67.40959001 185.34765625 70.61328125 C186.47042944 72.23506474 187.56077847 73.87967899 188.62109375 75.54296875 C189.13800781 76.35378906 189.65492188 77.16460937 190.1875 78 C190.65542969 78.7425 191.12335938 79.485 191.60546875 80.25 C192.97464872 82.29424542 192.97464872 82.29424542 196 83 C199.55018723 83.19411716 203.09854058 83.31741081 206.65234375 83.42578125 C210.51788322 84.08883178 211.6496001 84.93065425 214 88 C216.03357795 92.22358498 217.58422861 96.53487486 219 101 C219.63526611 100.9285376 220.27053223 100.8570752 220.92504883 100.78344727 C228.53117117 100.0015988 236.0461508 99.88172373 243.6875 99.9375 C244.87794922 99.94201172 246.06839844 99.94652344 247.29492188 99.95117188 C250.19663683 99.96282535 253.09832546 99.98075529 256 100 C256 103.63 256 107.26 256 111 C248.50009325 112.20263656 241.0817215 112.11258251 233.5 112.0625 C232.200625 112.05798828 230.90125 112.05347656 229.5625 112.04882812 C226.37495175 112.0371092 223.18750045 112.02070219 220 112 C220 113.65 220 115.3 220 117 C220.83917969 116.68160156 221.67835938 116.36320312 222.54296875 116.03515625 C226.22648324 114.93218298 229.47859857 114.62777811 233.3125 114.4375 C237.47595878 114.59558811 237.47595878 114.59558811 241 113 C243.52596259 112.76346477 246.03107207 112.57826308 248.5625 112.4375 C249.27341797 112.39431641 249.98433594 112.35113281 250.71679688 112.30664062 C252.47761912 112.20028223 254.2387832 112.09961154 256 112 C256.33 113.32 256.66 114.64 257 116 C257.99 116 258.98 116 260 116 C260 116.66 260 117.32 260 118 C248.88747861 119.6909381 237.75086747 121.29109502 226.5 121.5625 C225.74291748 121.60117187 224.98583496 121.63984375 224.20581055 121.6796875 C218.84831005 121.70855918 216.14325111 120.09587606 212.23242188 116.48803711 C211 115 211 115 211 113 C210.236875 113.495 209.47375 113.99 208.6875 114.5 C203.85079339 117.19955718 197.31993312 116.07112747 192 115 C181.1742634 110.18471236 174.39321004 99.72460757 168.9375 89.6875 C167.90531292 87.83443206 166.8727629 85.98156623 165.83984375 84.12890625 C165.10870361 82.80463623 165.10870361 82.80463623 164.36279297 81.45361328 C162.10692941 77.39208897 159.74715265 73.39443411 157.390625 69.390625 C156.13820613 67.23759032 154.94134783 65.06210123 153.75 62.875 C152.15429327 59.79785222 152.15429327 59.79785222 149 58 C149.66 58 150.32 58 151 58 C149.75212954 54.88853954 148.335865 52.42194889 146 50 C142.0521908 48.44015945 138.07728333 48.01766535 133.875 47.5625 C132.79734375 47.41619141 131.7196875 47.26988281 130.609375 47.11914062 C123.75990235 46.21550538 116.88385861 45.57723933 110 45 C109.67 44.01 109.34 43.02 109 42 C111.64 42 114.28 42 117 42 C116.01 40.02 116.01 40.02 115 38 C112.77144426 37.9185778 110.54202345 37.86061921 108.3125 37.8125 C107.07113281 37.77769531 105.82976562 37.74289062 104.55078125 37.70703125 C100.81435679 38.0153171 98.99370517 38.81911727 96 41 C96.7763932 44.0745356 96.7763932 44.0745356 99 46 C99.125 49.625 99.125 49.625 99 53 C99.88042969 53.03738281 100.76085937 53.07476562 101.66796875 53.11328125 C102.82941406 53.17902344 103.99085938 53.24476563 105.1875 53.3125 C106.91033203 53.39951172 106.91033203 53.39951172 108.66796875 53.48828125 C112.23914124 54.03672626 114.16355615 54.78777355 117 57 C119.74059604 61.19334752 121.65326421 65.93720238 121 71 C121.66 71.33 122.32 71.66 123 72 C122.67 73.65 122.34 75.3 122 77 C121.67 76.01 121.34 75.02 121 74 C120.46375 74.02320313 119.9275 74.04640625 119.375 74.0703125 C111.13802201 74.25997976 103.13780076 73.13081102 95 72 C95 71.34 95 70.68 95 70 C94.01 69.67 93.02 69.34 92 69 C90.8671875 66.890625 90.8671875 66.890625 89.875 64.25 C89.54242188 63.38890625 89.20984375 62.5278125 88.8671875 61.640625 C88.03382723 59.10300543 87.46319234 56.62790754 87 54 C86.34 54 85.68 54 85 54 C85 53.34 85 52.68 85 52 C88.63 52 92.26 52 96 52 C94.09954692 49.7102606 94.09954692 49.7102606 90.9375 49.5 C89.968125 49.335 88.99875 49.17 88 49 C87.67 48.34 87.34 47.68 87 47 C79.89015737 44.75478654 73.33440595 44.16639851 66 46 C66 45.01 66 44.02 66 43 C68.475 42.505 68.475 42.505 71 42 C69.02 42 67.04 42 65 42 C65 45.63 65 49.26 65 53 C60.04331925 52.00866385 55.24775841 50.9221573 50.5625 49 C47.10567844 47.65099647 43.61013761 46.85664282 40 46 C40 45.01 40 44.02 40 43 C39.01 42.67 38.02 42.34 37 42 C36.67 38.7 36.34 35.4 36 32 C33.03 32.495 33.03 32.495 30 33 C29.34 42.9 28.68 52.8 28 63 C32.95 63.33 37.9 63.66 43 64 C44 65 44 65 44.0625 68.5625 C44.041875 69.696875 44.02125 70.83125 44 72 C43.34 72 42.68 72 42 72 C42 70.35 42 68.7 42 67 C41.20335937 67.01160156 40.40671875 67.02320313 39.5859375 67.03515625 C29.06151142 67.12478032 29.06151142 67.12478032 24 66 C23.67 67.98 23.34 69.96 23 72 C18.05 72.495 18.05 72.495 13 73 C12.67 74.65 12.34 76.3 12 78 C12.66 78 13.32 78 14 78 C14 76.68 14 75.36 14 74 C20.70735857 73.82202037 27.41410515 73.69972244 34.12329102 73.61547852 C36.40379592 73.58034899 38.68414399 73.5326335 40.96411133 73.47192383 C44.24860361 73.38667746 47.53100683 73.34723572 50.81640625 73.31640625 C51.83021866 73.28027725 52.84403107 73.24414825 53.88856506 73.20692444 C59.1311611 73.2040385 62.18537415 73.54827569 66.01147461 77.30834961 C67.04144748 78.5107532 68.03893458 79.74183794 69 81 C69.51538834 81.62785904 70.03077667 82.25571808 70.56178284 82.90260315 C72 84.75 72 84.75 74 88 C73.67 88.99 73.34 89.98 73 91 C72.34 90.34 71.68 89.68 71 89 C67.79532184 88.73688611 67.79532184 88.73688611 63.9921875 88.83984375 C62.9273967 88.84812195 62.9273967 88.84812195 61.84109497 88.85656738 C60.31329542 88.86893235 58.78552566 88.88555767 57.2578125 88.90597534 C53.27356157 88.95868706 49.28922366 88.98096495 45.3046875 89 C44.11368439 89.0062162 44.11368439 89.0062162 42.89862061 89.01255798 C34.92697444 89.03599073 26.98108001 88.72221484 19.02294922 88.26733398 C18.12850098 88.21907471 17.23405273 88.17081543 16.3125 88.12109375 C15.54550781 88.0739624 14.77851563 88.02683105 13.98828125 87.97827148 C11.78737883 87.90096149 11.78737883 87.90096149 9 89 C10.08784968 92.24983135 10.08784968 92.24983135 12 95 C12.21110519 97.48341801 12.37594795 99.94956713 12.5 102.4375 C12.57707326 107.36914431 12.57707326 107.36914431 14 112 C16.3643851 113.10553772 16.3643851 113.10553772 19.1875 114.0625 C20.12980469 114.40410156 21.07210937 114.74570312 22.04296875 115.09765625 C27.99305657 116.91333694 33.82353544 117.26288596 40 117.375 C40.78117188 117.41238281 41.56234375 117.44976562 42.3671875 117.48828125 C46.46164992 117.55031856 49.16444676 117.31839168 52.4375 114.7265625 C56.91254238 109.96500826 57.24643622 107.30755602 57.125 100.75 C57.08375 98.5225 57.0425 96.295 57 94 C51.72 94 46.44 94 41 94 C41 93.34 41 92.68 41 92 C51.03442033 91.12198822 60.93605753 90.8823695 71 91 C69.1875 93.5 69.1875 93.5 67 96 C66.01 96 65.02 96 64 96 C64 96.66 64 97.32 64 98 C63.34 98 62.68 98 62 98 C61.67 97.34 61.34 96.68 61 96 C60.90203125 96.86882812 60.8040625 97.73765625 60.703125 98.6328125 C59.52969545 107.67631266 58.01043725 112.8941353 51 119 C47.95927147 120.01357618 45.92472341 120.1154568 42.74609375 120.09765625 C41.72708984 120.09443359 40.70808594 120.09121094 39.65820312 120.08789062 C38.59537109 120.07951172 37.53253906 120.07113281 36.4375 120.0625 C35.37080078 120.05798828 34.30410156 120.05347656 33.20507812 120.04882812 C30.47000589 120.03670304 27.73503089 120.01894671 25 120 C24.34 120 23.68 120 23 120 C25.58090767 121.31746333 28.16450458 122.62909617 30.75 123.9375 C31.84441406 124.49727539 31.84441406 124.49727539 32.9609375 125.06835938 C34.02441406 125.60493164 34.02441406 125.60493164 35.109375 126.15234375 C35.75874023 126.48226318 36.40810547 126.81218262 37.07714844 127.15209961 C41.49000342 129.0979916 45.44785851 129.10696427 50.25 129.0625 C52.14492188 129.04896484 52.14492188 129.04896484 54.078125 129.03515625 C55.52445312 129.01775391 55.52445312 129.01775391 57 129 C57 128.34 57 127.68 57 127 C58.98 127 60.96 127 63 127 C63.3403125 126.13375 63.3403125 126.13375 63.6875 125.25 C65.33488275 122.42591529 67.43454838 121.0023037 70 119 C70.556875 118.2575 71.11375 117.515 71.6875 116.75 C72.120625 116.1725 72.55375 115.595 73 115 C73.66 115 74.32 115 75 115 C75 120.28 75 125.56 75 131 C74.34 131 73.68 131 73 131 C73.33 132.98 73.66 134.96 74 137 C70.5980513 139.09350689 67.94727588 139.17942163 64 139 C65.11126659 140.33901792 65.11126659 140.33901792 67.94140625 140.09765625 C69.13636719 140.08605469 70.33132813 140.07445312 71.5625 140.0625 C73.35880859 140.04896484 73.35880859 140.04896484 75.19140625 140.03515625 C76.58166016 140.01775391 76.58166016 140.01775391 78 140 C78 140.66 78 141.32 78 142 C71.36382504 144.84407498 63.04809873 147.39935276 56 145 C50.65220257 142.20903041 45.81384336 138.86795146 41 135.25 C36.2186601 131.81198893 31.80937443 130.60565818 26 130 C26 130.99 26 131.98 26 133 C16.95971078 133.1723784 8.01134307 132.6331684 -1 132 C-1.33 134.31 -1.66 136.62 -2 139 C4.6 139 11.2 139 18 139 C18 139.99 18 140.98 18 142 C16.95199219 142.20496094 15.90398437 142.40992188 14.82421875 142.62109375 C13.44529231 142.89312686 12.06638717 143.16526791 10.6875 143.4375 C9.99720703 143.57220703 9.30691406 143.70691406 8.59570312 143.84570312 C5.65710993 144.42774332 2.84543315 145.05152228 0 146 C0 146.66 0 147.32 0 148 C1.02786621 147.98018066 2.05573242 147.96036133 3.11474609 147.93994141 C6.6098266 147.99396867 9.73011517 148.36338038 13.1640625 148.9609375 C22.53866152 150.36973624 31.91066635 150.45798235 41.375 150.625 C43.19012066 150.66328821 45.00522527 150.70234571 46.8203125 150.7421875 C51.21340741 150.83697376 55.60658655 150.9214207 60 151 C60 151.66 60 152.32 60 153 C19.17297641 153.61916858 19.17297641 153.61916858 0 150 C0 151.65 0 153.3 0 155 C1.03688965 154.99419922 2.0737793 154.98839844 3.14208984 154.98242188 C15.64308455 154.93534192 28.12850944 155.18600724 40.625 155.5 C42.61457851 155.54837585 44.60416184 155.59655398 46.59375 155.64453125 C51.39589169 155.76075122 56.19796105 155.87961284 61 156 C61 156.66 61 157.32 61 158 C62.03568595 159.70735301 62.03568595 159.70735301 64 161 C67.61023099 161.73041853 67.61023099 161.73041853 71 162 C67.11236713 165.66194631 64.67741882 166.47107899 59.375 166.5625 C54.93779124 166.43635217 54.93779124 166.43635217 51.31494141 168.52319336 C50.88101074 169.01053955 50.44708008 169.49788574 50 170 C58.62411363 173.69463745 67.22481701 173.52128169 76.4375 173.625 C78.78176918 173.6615578 81.12587397 173.70211765 83.46998596 173.74765015 C84.92003133 173.77477771 86.37019795 173.79617178 87.82041931 173.81118774 C92.77857156 173.88928578 92.77857156 173.88928578 95 175 C94.67 177.97 94.34 180.94 94 184 C88.06 184 82.12 184 76 184 C76 183.34 76 182.68 76 182 C75.67 182.99 75.34 183.98 75 185 C73.99735107 185.03963867 72.99470215 185.07927734 71.96166992 185.12011719 C68.19041684 185.27392587 64.42054029 185.45106978 60.65063477 185.63476562 C59.02851828 185.71065412 57.4061046 185.7804718 55.78344727 185.84375 C46.99852319 186.19048768 39.15382754 186.63165155 30.9621582 190.16894531 C29 191 29 191 27 191 C27.33 189.35 27.66 187.7 28 186 C24.31915662 184.77305221 20.64608653 184.38949492 16.8125 183.9375 C15.68811523 183.80118164 15.68811523 183.80118164 14.54101562 183.66210938 C12.69434465 183.4386269 10.84721446 183.21894487 9 183 C9.8125 179.1875 9.8125 179.1875 11.5 177.5 C15.18352306 175.28988617 19.04891257 173.68502258 23 172 C23.33 168.04 23.66 164.08 24 160 C25.98 159.67 27.96 159.34 30 159 C20.1 158.01 10.2 157.02 0 156 C1.13047805 170.58316683 3.97140369 183.95297061 8 198 C8.33 197.34 8.66 196.68 9 196 C13.62 196 18.24 196 23 196 C23.33 196.66 23.66 197.32 24 198 C24.83144531 197.43410156 25.66289062 196.86820313 26.51953125 196.28515625 C27.60621094 195.55167969 28.69289063 194.81820312 29.8125 194.0625 C30.89144531 193.33160156 31.97039062 192.60070312 33.08203125 191.84765625 C38.26476378 188.56595279 43.34395908 188.47287087 49.3125 187.9375 C50.29621582 187.84807129 51.27993164 187.75864258 52.29345703 187.66650391 C59.88842534 187.01401522 67.37574152 186.76580776 75 187 C75 189.64 75 192.28 75 195 C74.15221733 195.06850662 74.15221733 195.06850662 73.28730774 195.13839722 C67.39784549 195.61586023 61.50936779 196.10431389 55.62133789 196.59912109 C53.42463067 196.78227458 51.22768887 196.96263705 49.03051758 197.14013672 C45.86994463 197.39595519 42.71035497 197.66184324 39.55078125 197.9296875 C38.57039383 198.00686005 37.59000641 198.08403259 36.57991028 198.1635437 C30.05481445 198.66719109 30.05481445 198.66719109 24 201 C23.67 201.66 23.34 202.32 23 203 C17.72 203 12.44 203 7 203 C7 205.64 7 208.28 7 211 C11.95 211 16.9 211 22 211 C22 212.32 22 213.64 22 215 C22.7425 214.525625 23.485 214.05125 24.25 213.5625 C31.20769041 209.60926681 38.99384435 210.8171386 46.6484375 211.77734375 C50.76031066 212.16667393 54.87432471 212.07751791 59 212 C59 211.01 59 210.02 59 209 C58.04738281 209.01160156 57.09476563 209.02320313 56.11328125 209.03515625 C54.23189453 209.04869141 54.23189453 209.04869141 52.3125 209.0625 C51.07113281 209.07410156 49.82976562 209.08570313 48.55078125 209.09765625 C45 209 45 209 42.59375 208.5 C38.79280817 207.76728832 35.04781406 207.89543455 31.1875 207.9375 C30.39923828 207.94201172 29.61097656 207.94652344 28.79882812 207.95117188 C26.86585239 207.96288688 24.93291607 207.98082002 23 208 C30.41484177 199.81629797 42.95847915 199.78782277 53.25 198.75 C54.43789124 198.62292664 54.43789124 198.62292664 55.64978027 198.49328613 C68.45769569 197.12570186 81.11588288 196.48917597 94 197 C94.33 198.65 94.66 200.3 95 202 C91.67485327 203.13357275 88.4120992 204.1469752 85 205 C97.54 204.67 110.08 204.34 123 204 C123 204.33 123 204.66 123 205 C120.08397391 205.50400451 117.16727908 206.00334666 114.25 206.5 C113.425 206.64308594 112.6 206.78617188 111.75 206.93359375 C110.95078125 207.06894531 110.1515625 207.20429688 109.328125 207.34375 C108.5949707 207.46943359 107.86181641 207.59511719 107.10644531 207.72460938 C105 208 105 208 101 208 C100.34 209.65 99.68 211.3 99 213 C99.85722656 212.68546875 100.71445312 212.3709375 101.59765625 212.046875 C109.28047983 209.68292928 117.45274059 209.01619977 125 212 C125 212.66 125 213.32 125 214 C123.28645833 214.3671875 121.57291667 214.734375 119.859375 215.1015625 C118.73926025 215.34165039 117.61914551 215.58173828 116.46508789 215.82910156 C113.96177437 216.36539663 111.45835411 216.90119369 108.95483398 217.43652344 C102.4217005 218.83393902 95.8905599 220.23946809 89.36328125 221.6640625 C88.13834961 221.93009277 86.91341797 222.19612305 85.65136719 222.47021484 C83.32711771 222.97522524 81.0035041 223.48317481 78.68066406 223.99462891 C50.76968866 230.0410346 50.76968866 230.0410346 40.26171875 224.90625 C36.5599088 223.42296864 32.88404646 223.07813208 29 224 C28.10662933 224.66159119 27.21325867 225.32318237 26.29281616 226.00482178 C22.49733362 228.30457486 20.47230364 228.48678293 16.07666016 228.45410156 C15.4125412 228.45468567 14.74842224 228.45526978 14.06417847 228.45587158 C11.88859128 228.4531047 9.7144076 228.42208308 7.5390625 228.390625 C6.02306873 228.38315754 4.50706525 228.37746699 2.99105835 228.37347412 C-0.98430387 228.35825726 -4.95907442 228.31901056 -8.9342041 228.2746582 C-12.99641925 228.23361957 -17.05873071 228.21544485 -21.12109375 228.1953125 C-29.08099961 228.15251154 -37.04042605 228.08430922 -45 228 C-40.4276709 223.06036469 -35.06292982 222.90497999 -28.62890625 222.5859375 C-26.27371844 222.50677152 -23.9182104 222.436688 -21.5625 222.375 C-20.35400391 222.33632813 -19.14550781 222.29765625 -17.90039062 222.2578125 C-14.93374183 222.16400542 -11.96709164 222.07830754 -9 222 C-8.67 220.68 -8.34 219.36 -8 218 C-10.97 217.01 -13.94 216.02 -17 215 C-17 214.01 -17 213.02 -17 212 C-10.4 212 -3.8 212 3 212 C3 215.3 3 218.6 3 222 C4.32 222 5.64 222 7 222 C5.75604001 213.80909854 5.75604001 213.80909854 3.875 205.75 C2.91050143 201.61643469 2.84918796 198.22273724 3 194 C2.34 194 1.68 194 1 194 C0.87625 193.195625 0.7525 192.39125 0.625 191.5625 C0.41875 190.716875 0.2125 189.87125 0 189 C-3.86754137 187.06622932 -7.9681204 187.90039647 -12 189 C-11.96519531 189.70125 -11.93039062 190.4025 -11.89453125 191.125 C-11.71105336 197.5554631 -12.3446123 202.13601882 -15 208 C-15.33 207.01 -15.66 206.02 -16 205 C-18.31 204.67 -20.62 204.34 -23 204 C-23.33 202.02 -23.66 200.04 -24 198 C-23.34 197.67 -22.68 197.34 -22 197 C-22.34786708 195.02463255 -22.34786708 195.02463255 -23 193 C-23.66 192.67 -24.32 192.34 -25 192 C-25.33 191.01 -25.66 190.02 -26 189 C-26 189.99 -26 190.98 -26 192 C-26.66 192 -27.32 192 -28 192 C-28.12375 190.865625 -28.2475 189.73125 -28.375 188.5625 C-28.684375 186.7990625 -28.684375 186.7990625 -29 185 C-29.66 184.67 -30.32 184.34 -31 184 C-31 185.98 -31 187.96 -31 190 C-31.33 190 -31.66 190 -32 190 C-32.19294408 185.17639811 -31.75747614 181.50353262 -30 177 C-30.66 177.33 -31.32 177.66 -32 178 C-33.99960012 178.039992 -36.00047242 178.04346799 -38 178 C-38.33 178.66 -38.66 179.32 -39 180 C-39 179.34 -39 178.68 -39 178 C-39.66 178 -40.32 178 -41 178 C-41 177.34 -41 176.68 -41 176 C-40.21753906 175.95101562 -39.43507813 175.90203125 -38.62890625 175.8515625 C-37.11103516 175.73941406 -37.11103516 175.73941406 -35.5625 175.625 C-34.04849609 175.52058594 -34.04849609 175.52058594 -32.50390625 175.4140625 C-31.67761719 175.27742187 -30.85132813 175.14078125 -30 175 C-29.67 174.34 -29.34 173.68 -29 173 C-34.94 173 -40.88 173 -47 173 C-47 172.34 -47 171.68 -47 171 C-42.05 170.01 -42.05 170.01 -37 169 C-37.66 168.67 -38.32 168.34 -39 168 C-39 167.34 -39 166.68 -39 166 C-40.65 166 -42.3 166 -44 166 C-43.9669923 163.39239154 -43.8998852 160.79337154 -43.8125 158.1875 C-43.80379883 157.08051758 -43.80379883 157.08051758 -43.79492188 155.95117188 C-43.70703125 153.79296875 -43.70703125 153.79296875 -43 150 C-39.32616402 146.87227477 -35.73253205 146.46397373 -31 146 C-31.33 145.13375 -31.66 144.2675 -32 143.375 C-32.98731341 140.04281725 -33.16420974 137.44840462 -33 134 C-33.66 134 -34.32 134 -35 134 C-35 132.68 -35 131.36 -35 130 C-35.66 130 -36.32 130 -37 130 C-39.125 128.375 -39.125 128.375 -41 126 C-41.25 122.75 -41.25 122.75 -41 120 C-41.66 120 -42.32 120 -43 120 C-43 118.02 -43 116.04 -43 114 C-43.66 114 -44.32 114 -45 114 C-45 113.01 -45 112.02 -45 111 C-45.66 111 -46.32 111 -47 111 C-47 110.34 -47 109.68 -47 109 C-42.71 109 -38.42 109 -34 109 C-34.020625 106.89625 -34.04125 104.7925 -34.0625 102.625 C-34.125 96.25 -34.125 96.25 -33 94 C-34.39412109 94.03480469 -34.39412109 94.03480469 -35.81640625 94.0703125 C-51.51928251 94.29955157 -51.51928251 94.29955157 -59 88 C-60.65583225 87.30686092 -62.32110979 86.63525576 -64 86 C-66.95183101 83.04816899 -67.08663988 80.04488053 -68 76 C-67.34 76 -66.68 76 -66 76 C-65.67 76.66 -65.34 77.32 -65 78 C-65 77.01 -65 76.02 -65 75 C-69.55491614 72.79600832 -74.02906176 72.41153737 -79 72 C-79.33 70.35 -79.66 68.7 -80 67 C-85.61 66.67 -91.22 66.34 -97 66 C-97 65.67 -97 65.34 -97 65 C-93.87501937 64.97104024 -90.7500731 64.95321517 -87.625 64.9375 C-86.73554688 64.92912109 -85.84609375 64.92074219 -84.9296875 64.91210938 C-84.07890625 64.90888672 -83.228125 64.90566406 -82.3515625 64.90234375 C-81.56604004 64.89710693 -80.78051758 64.89187012 -79.97119141 64.88647461 C-78 65 -78 65 -76 66 C-76.33 61.71 -76.66 57.42 -77 53 C-77.33 56.63 -77.66 60.26 -78 64 C-78.99 64 -79.98 64 -81 64 C-81 60.7 -81 57.4 -81 54 C-82.32 53.34 -83.64 52.68 -85 52 C-86.45703125 50.30859375 -86.45703125 50.30859375 -87.8125 48.4375 C-90.28024312 45.39542281 -90.81491961 45.04477751 -94.875 44.0625 C-95.90625 44.041875 -96.9375 44.02125 -98 44 C-98 43.34 -98 42.68 -98 42 C-100.31 41.67 -102.62 41.34 -105 41 C-105 40.01 -105 39.02 -105 38 C-105.66 38 -106.32 38 -107 38 C-107.625 35.6875 -107.625 35.6875 -108 33 C-107.34 32.01 -106.68 31.02 -106 30 C-107.13179687 29.87882812 -108.26359375 29.75765625 -109.4296875 29.6328125 C-110.91151031 29.46399724 -112.39327842 29.29470145 -113.875 29.125 C-114.62136719 29.04636719 -115.36773437 28.96773438 -116.13671875 28.88671875 C-121.7734375 28.2265625 -121.7734375 28.2265625 -124 26 C-124 25.01 -124 24.02 -124 23 C-122.35 22.34 -120.7 21.68 -119 21 C-121.64 20.67 -124.28 20.34 -127 20 C-128.485 25.445 -128.485 25.445 -130 31 C-132.475 30.01 -132.475 30.01 -135 29 C-135.125 21.25 -135.125 21.25 -134 19 C-133.77532169 17.46331135 -133.59203195 15.92031946 -133.4375 14.375 C-133.35371094 13.55773437 -133.26992187 12.74046875 -133.18359375 11.8984375 C-133.12300781 11.27195312 -133.06242188 10.64546875 -133 10 C-128.83808931 9.42520536 -124.67549528 8.85572462 -120.51220703 8.29101562 C-119.09794825 8.09844121 -117.68388131 7.90445216 -116.27001953 7.70898438 C-114.22998878 7.42720423 -112.18930718 7.15063012 -110.1484375 6.875 C-108.31031494 6.62363281 -108.31031494 6.62363281 -106.43505859 6.3671875 C-103.25603942 6.0273691 -100.19359852 5.93159628 -97 6 C-97.66 6.66 -98.32 7.32 -99 8 C-95.15238133 7.61523813 -92.28014834 7.14282072 -88.8125 5.375 C-86 4 -86 4 -83.9375 4.3125 C-83.298125 4.539375 -82.65875 4.76625 -82 5 C-81.113125 5 -80.22625 5 -79.3125 5 C-78.549375 5 -77.78625 5 -77 5 C-76.505 5.495 -76.505 5.495 -76 6 C-74.865625 6 -73.73125 6 -72.5625 6 C-69 6 -69 6 -67 7 C-67 7.66 -67 8.32 -67 9 C-68.98 9.33 -70.96 9.66 -73 10 C-72.360625 10.20625 -71.72125 10.4125 -71.0625 10.625 C-69 12 -69 12 -68.25 15.125 C-68.1675 16.07375 -68.085 17.0225 -68 18 C-67.67 17.34 -67.34 16.68 -67 16 C-60.4 16 -53.8 16 -47 16 C-46.505 17.98 -46.505 17.98 -46 20 C-42.7 19.67 -39.4 19.34 -36 19 C-36.495 20.485 -36.495 20.485 -37 22 C-47.56 22 -58.12 22 -69 22 C-69 22.99 -69 23.98 -69 25 C-68.34 25.33 -67.68 25.66 -67 26 C-67.66 26 -68.32 26 -69 26 C-68.98952637 27.1960083 -68.97905273 28.3920166 -68.96826172 29.62426758 C-68.93208595 34.05783093 -68.90910834 38.49138121 -68.89013672 42.92504883 C-68.88007361 44.84466749 -68.86642184 46.76427081 -68.84912109 48.68383789 C-68.82488636 51.44160752 -68.81352008 54.19917464 -68.8046875 56.95703125 C-68.79436493 57.81649857 -68.78404236 58.67596588 -68.77340698 59.56147766 C-68.77325592 60.36208115 -68.77310486 61.16268463 -68.77294922 61.98754883 C-68.768508 62.6914827 -68.76406677 63.39541656 -68.75949097 64.12068176 C-69 66 -69 66 -71 69 C-70.45730469 69.20753906 -69.91460937 69.41507812 -69.35546875 69.62890625 C-65.32645329 71.36392372 -62.73668287 72.57348949 -61 76.75 C-60.67 77.8225 -60.34 78.895 -60 80 C-58.02 79.34 -56.04 78.68 -54 78 C-53.67 73.05 -53.34 68.1 -53 63 C-55.47395833 63.03255208 -57.94791667 63.06510417 -60.421875 63.09765625 C-63 63 -63 63 -67 62 C-66.67 57.05 -66.34 52.1 -66 47 C-58.08 47 -50.16 47 -42 47 C-45.09756098 54.22764228 -45.09756098 54.22764228 -49 58 C-50.50720432 61.82315241 -49.92109452 65.80412041 -49.625 69.8125 C-49.58117187 70.49892578 -49.53734375 71.18535156 -49.4921875 71.89257812 C-49.1901702 76.32635981 -48.63280306 80.57037855 -48 85 C-42.06 85 -36.12 85 -30 85 C-30 87.64 -30 90.28 -30 93 C-29.34 93 -28.68 93 -28 93 C-27.88955039 86.26257354 -28.29867087 79.70019789 -29 73 C-29.66 73 -30.32 73 -31 73 C-31 73.66 -31 74.32 -31 75 C-30.34 75 -29.68 75 -29 75 C-29 77.31 -29 79.62 -29 82 C-29.99 82.495 -29.99 82.495 -31 83 C-31 80.69 -31 78.38 -31 76 C-34.3 76 -37.6 76 -41 76 C-41 75.67 -41 75.34 -41 75 C-38.36 75 -35.72 75 -33 75 C-33 74.34 -33 73.68 -33 73 C-35.64 73.33 -38.28 73.66 -41 74 C-41.99 69.545 -41.99 69.545 -43 65 C-35.37356004 61.1020418 -27.47786263 60.77086858 -19 61 C-19 60.01 -19 59.02 -19 58 C-19.66 58 -20.32 58 -21 58 C-21 57.34 -21 56.68 -21 56 C-21.66 56 -22.32 56 -23 56 C-23 55.34 -23 54.68 -23 54 C-23.66 54 -24.32 54 -25 54 C-25.495 50.535 -25.495 50.535 -26 47 C-26.66 47 -27.32 47 -28 47 C-28 46.34 -28 45.68 -28 45 C-28.66 45 -29.32 45 -30 45 C-30.495 43.02 -30.495 43.02 -31 41 C-33.31 40.67 -35.62 40.34 -38 40 C-38.66 41.32 -39.32 42.64 -40 44 C-40.33 43.34 -40.66 42.68 -41 42 C-49.58 42 -58.16 42 -67 42 C-67 39.36 -67 36.72 -67 34 C-66.18732666 34.00523682 -65.37465332 34.01047363 -64.53735352 34.01586914 C-60.87907678 34.03656994 -57.22081233 34.04963803 -53.5625 34.0625 C-52.28310547 34.07087891 -51.00371094 34.07925781 -49.68554688 34.08789062 C-48.47060547 34.09111328 -47.25566406 34.09433594 -46.00390625 34.09765625 C-44.87799072 34.10289307 -43.7520752 34.10812988 -42.59204102 34.11352539 C-40.07029129 34.29545448 -40.07029129 34.29545448 -39 33 C-48.57 33 -58.14 33 -68 33 C-68 32.34 -68 31.68 -68 31 C-64.06731133 30.97526132 -60.13465287 30.95712165 -56.2019043 30.94506836 C-54.20685232 30.93757271 -52.21182214 30.92486655 -50.21679688 30.91210938 C-48.96318359 30.90888672 -47.70957031 30.90566406 -46.41796875 30.90234375 C-45.26063232 30.89710693 -44.1032959 30.89187012 -42.91088867 30.88647461 C-40 31 -40 31 -37 32 C-37 33.65 -37 35.3 -37 37 C-34.03 37 -31.06 37 -28 37 C-28 34.69 -28 32.38 -28 30 C-27.34 30 -26.68 30 -26 30 C-26 32.31 -26 34.62 -26 37 C-23.36 37 -20.72 37 -18 37 C-19.70781011 29.77464952 -21.54619436 22.60986942 -25 16 C-26.98 16 -28.96 16 -31 16 C-30.34 15.01 -29.68 14.02 -29 13 C-27.0390625 12.64355469 -27.0390625 12.64355469 -24.625 12.671875 C-23.28236084 12.67864258 -23.28236084 12.67864258 -21.91259766 12.68554688 C-20.47086182 12.71745117 -20.47086182 12.71745117 -19 12.75 C-17.53312744 12.76643555 -17.53312744 12.76643555 -16.03662109 12.78320312 C-7.00966068 12.91778105 1.99479796 13.37741813 11 14 C11 16.31 11 18.62 11 21 C0.98707052 22.09945892 -8.94401799 22.10055982 -19 22 C-18.01 24.97 -17.02 27.94 -16 31 C-14.97845825 30.98428955 -14.97845825 30.98428955 -13.9362793 30.96826172 C-10.85339034 30.92671122 -7.77056029 30.90067689 -4.6875 30.875 C-3.61564453 30.85824219 -2.54378906 30.84148437 -1.43945312 30.82421875 C-0.41142578 30.81777344 0.61660156 30.81132812 1.67578125 30.8046875 C2.62364502 30.79421387 3.57150879 30.78374023 4.5480957 30.77294922 C7 31 7 31 10 33 C9.01 33.495 9.01 33.495 8 34 C8.33 34.33 8.66 34.66 9 35 C9 36.98 9 38.96 9 41 C1.41 41 -6.18 41 -14 41 C-13.01 43.475 -13.01 43.475 -12 46 C-5.4 46.33 1.2 46.66 8 47 C8 50.3 8 53.6 8 57 C9.65 57.33 11.3 57.66 13 58 C12.67 42.82 12.34 27.64 12 12 C-1.2 12 -14.4 12 -28 12 C-28 10.68 -28 9.36 -28 8 C-23.70834738 7.97108051 -19.41671964 7.95322882 -15.125 7.9375 C-13.29001953 7.92493164 -13.29001953 7.92493164 -11.41796875 7.91210938 C-9.66806641 7.90727539 -9.66806641 7.90727539 -7.8828125 7.90234375 C-6.26463623 7.89448853 -6.26463623 7.89448853 -4.61376953 7.88647461 C-2 8 -2 8 0 9 C0 6.03 0 3.06 0 0 Z \",fill:\"#AD6350\",transform:\"translate(339,276)\"})),_path8||(_path8=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.82360189 -0.19294408 8.49646738 0.24252386 13 2 C12.89300781 2.79664063 12.78601563 3.59328125 12.67578125 4.4140625 C11.65522148 12.62578313 11.65522148 12.62578313 15 20 C15.99 20.99 15.99 20.99 17 22 C17.6328125 24.6015625 17.6328125 24.6015625 18.125 27.625 C18.29257813 28.62789063 18.46015625 29.63078125 18.6328125 30.6640625 C18.75398437 31.43492187 18.87515625 32.20578125 19 33 C22.75915495 30.4938967 22.72563254 29.18050197 23.6875 24.875 C23.93886719 23.77929688 24.19023437 22.68359375 24.44921875 21.5546875 C24.72185547 20.29011719 24.72185547 20.29011719 25 19 C25.33 19 25.66 19 26 19 C25.54654469 23.23224959 25.07646721 27.45188768 24.48828125 31.66796875 C23.2607752 40.52698038 22.74794195 49.03793597 23 58 C23.33 55.36 23.66 52.72 24 50 C24.66 50 25.32 50 26 50 C26.33 49.34 26.66 48.68 27 48 C27 50.31 27 52.62 27 55 C27.33 51.04 27.66 47.08 28 43 C34.20914438 42.47156218 38.53374462 44.07918972 44 47 C45 48 45 48 45.09765625 50.06640625 C45.08025391 51.30197266 45.08025391 51.30197266 45.0625 52.5625 C45.05347656 53.38878906 45.04445312 54.21507812 45.03515625 55.06640625 C45.01775391 56.02353516 45.01775391 56.02353516 45 57 C45.66 56.67 46.32 56.34 47 56 C47 52.37 47 48.74 47 45 C47.33 45.66 47.66 46.32 48 47 C53.70913663 45.28725901 58.48607195 42.66018258 63.5 39.5 C64.13566895 39.10820557 64.77133789 38.71641113 65.42626953 38.31274414 C67.43062674 37.05610096 67.43062674 37.05610096 70 35 C70 34.01 70 33.02 70 32 C75.22512279 30.53329887 79.5814234 29.77422598 85 30 C85 30.66 85 31.32 85 32 C94.24 31.67 103.48 31.34 113 31 C113 43.87 113 56.74 113 70 C112.34 70 111.68 70 111 70 C111.185625 70.78375 111.37125 71.5675 111.5625 72.375 C112.11687121 76.96836149 111.98237033 81.46401177 111 86 C110.34 86.33 109.68 86.66 109 87 C109 88.98 109 90.96 109 93 C107.68 93.33 106.36 93.66 105 94 C105 102.91 105 111.82 105 121 C104.34 120.67 103.68 120.34 103 120 C103 119.34 103 118.68 103 118 C101.824375 118.185625 100.64875 118.37125 99.4375 118.5625 C95.38731406 119.08230996 92.00125547 118.7502354 88 118 C87.67 116.68 87.34 115.36 87 114 C86.34 114 85.68 114 85 114 C85 113.34 85 112.68 85 112 C81.04 112 77.08 112 73 112 C72.67 112.99 72.34 113.98 72 115 C74.97 115.33 77.94 115.66 81 116 C81 116.66 81 117.32 81 118 C78.21253596 118.8502069 75.42140011 119.68013626 72.625 120.5 C71.46291016 120.85771484 71.46291016 120.85771484 70.27734375 121.22265625 C69.10751953 121.56103516 69.10751953 121.56103516 67.9140625 121.90625 C67.2123291 122.11572266 66.5105957 122.32519531 65.78759766 122.54101562 C58.25449988 123.78135753 51.09560915 122.90759459 43.7109375 121.25 C42.46698715 120.98364746 42.46698715 120.98364746 41.19790649 120.71191406 C38.58809303 120.15083483 35.98162113 119.57570732 33.375 119 C31.59004688 118.6136437 29.80489188 118.2282188 28.01953125 117.84375 C23.67728336 116.90656605 19.33796952 115.95678342 15 115 C15 114.34 15 113.68 15 113 C14.11828125 113.19207031 13.2365625 113.38414062 12.328125 113.58203125 C8.87937688 114.01514868 7.03035623 113.69942276 3.75 112.6875 C-4.37223365 110.45183468 -12.63900975 109.78964908 -21 109 C-19.94124926 105.59687262 -18.99097846 102.98646769 -17 100 C-4.88980517 98.23187628 7.87347849 101.11390086 19.81015015 102.99209595 C38.15078702 105.85626623 55.73033148 107.75614811 74.29296875 107.05078125 C78.99616585 106.89079824 82.60370469 107.33946009 87 109 C87 108.34 87 107.68 87 107 C82.5916218 104.71980438 79.20308989 103.8775262 74.234375 103.82421875 C54.36609597 103.46786128 35.16564995 101.43333191 15.51123047 98.47485352 C12.14179319 98.0191759 8.80099225 97.70820519 5.41015625 97.46484375 C4.21455078 97.37783203 3.01894531 97.29082031 1.78710938 97.20117188 C0.55798828 97.11416016 -0.67113281 97.02714844 -1.9375 96.9375 C-3.19369141 96.84662109 -4.44988281 96.75574219 -5.74414062 96.66210938 C-8.82927722 96.43922878 -11.91455717 96.2185933 -15 96 C-15 96.66 -15 97.32 -15 98 C-15.66 98 -16.32 98 -17 98 C-16.25 95.5625 -16.25 95.5625 -15 93 C-5.54407809 89.33504158 8.00858742 92.22739203 17.875 93 C19.14730469 93.09539062 20.41960937 93.19078125 21.73046875 93.2890625 C24.82069542 93.52141037 27.91048215 93.75844069 31 94 C31 92.68 31 91.36 31 90 C28.36 90 25.72 90 23 90 C23 89.34 23 88.68 23 88 C11.45 88 -0.1 88 -12 88 C-12 81.4 -12 74.8 -12 68 C-12.66 68 -13.32 68 -14 68 C-14.35578125 69.06927734 -14.35578125 69.06927734 -14.71875 70.16015625 C-16.66786679 74.48030231 -19.80310076 77.64217505 -22.90625 81.18359375 C-26.55548767 86.09236308 -27.26347127 90.4671034 -26.9765625 96.4921875 C-26.925 97.69101562 -26.8734375 98.88984375 -26.8203125 100.125 C-26.75585938 101.3625 -26.69140625 102.6 -26.625 103.875 C-26.56828125 105.13570313 -26.5115625 106.39640625 -26.453125 107.6953125 C-26.31211706 110.79748724 -26.1607467 113.89879579 -26 117 C-25.34 114.69 -24.68 112.38 -24 110 C-23.01 110 -22.02 110 -21 110 C-21.66 111.98 -22.32 113.96 -23 116 C-22.01 115.34 -21.02 114.68 -20 114 C-8.27728282 111.89072217 3.92985384 116.40103008 15.15429688 119.28222656 C20.73409361 120.6896221 26.36647314 121.82985201 32 123 C35.58239095 123.78223094 39.16463389 124.56507899 42.74609375 125.3515625 C52.52275674 127.29985308 62.11321693 129.07323498 71.0078125 123.90625 C74.84623504 122.16014406 78.91684987 122.19286567 83 123 C84.1862206 123.64492867 85.36228973 124.30866487 86.53125 124.984375 C91.96184299 127.84258183 97.47745917 127.67075604 103.5 127.75 C104.60859375 127.77964844 105.7171875 127.80929687 106.859375 127.83984375 C109.57298752 127.91002338 112.2857668 127.96297612 115 128 C115 128.66 115 129.32 115 130 C129.52 130 144.04 130 159 130 C157.02 130.99 157.02 130.99 155 132 C157.31 132.33 159.62 132.66 162 133 C162 133.33 162 133.66 162 134 C157.05 134.33 152.1 134.66 147 135 C147.2 141.4 147.2 141.4 149 143 C149.0979057 144.49738124 149.12974864 145.99942892 149.125 147.5 C149.12757813 148.3146875 149.13015625 149.129375 149.1328125 149.96875 C149 152 149 152 148 153 C140.03086583 153.8977745 132.01408459 154.16619069 124 154 C122.34502644 150.69005287 122.89915665 147.00877 122.9375 143.375 C122.94201172 142.57320312 122.94652344 141.77140625 122.95117188 140.9453125 C122.96296832 138.96350994 122.98090395 136.98174567 123 135 C122.01386719 135.01740234 122.01386719 135.01740234 121.0078125 135.03515625 C115.68177389 135.08567423 110.40167708 134.99286461 105.08569336 134.64111328 C96.25037362 134.06072746 87.4157176 133.80003345 78.5625 133.6875 C77.37068115 133.65785156 76.1788623 133.62820313 74.95092773 133.59765625 C73.2755896 133.58605469 73.2755896 133.58605469 71.56640625 133.57421875 C70.56552979 133.55963623 69.56465332 133.54505371 68.53344727 133.5300293 C65.87909708 133.76978937 65.87909708 133.76978937 64.21459961 135.83911133 C62.87240187 138.06750198 62.87240187 138.06750198 62 141 C73.22 141 84.44 141 96 141 C96 150 96 150 95 153 C79.49230769 153.24615385 79.49230769 153.24615385 75 151 C73.47363313 150.80266879 71.94059972 150.65559858 70.40625 150.53515625 C69.45621094 150.45716797 68.50617188 150.37917969 67.52734375 150.29882812 C66.52832031 150.22083984 65.52929688 150.14285156 64.5 150.0625 C57.55840206 149.51347403 50.64033248 148.85882398 43.72265625 148.0625 C32.48009616 146.78760674 21.21839912 145.80467971 9.9375 144.9375 C8.78923737 144.8490683 7.64097473 144.7606366 6.45791626 144.66952515 C-20.02038573 142.68963494 -46.49004647 142.39865158 -73.03062439 142.20759583 C-74.49567671 142.19699543 -75.960729 142.18639062 -77.42578125 142.17578125 C-78.49746898 142.16820832 -78.49746898 142.16820832 -79.59080696 142.16048241 C-89.24675937 142.08875358 -98.89290521 141.90795545 -108.54296875 141.54296875 C-109.56610672 141.50488602 -110.58924469 141.46680328 -111.64338684 141.42756653 C-129.31361976 140.68638024 -129.31361976 140.68638024 -131 139 C-134.65370964 138.97338609 -138.29518579 139.02824826 -141.94726562 139.12695312 C-147.32647066 139.20234182 -151.83129492 138.50975922 -157 137 C-158.125 133.25 -158.125 133.25 -157 131 C-158.65 130.67 -160.3 130.34 -162 130 C-161.67 128.02 -161.34 126.04 -161 124 C-162.65 123.67 -164.3 123.34 -166 123 C-166 121.68 -166 120.36 -166 119 C-164.7934375 118.5978125 -164.7934375 118.5978125 -163.5625 118.1875 C-162.2940625 117.5996875 -162.2940625 117.5996875 -161 117 C-160.67 116.01 -160.34 115.02 -160 114 C-157.82117341 112.699208 -155.72175141 111.5801158 -153.4375 110.5 C-152.80142822 110.19030273 -152.16535645 109.88060547 -151.51000977 109.56152344 C-148.20300276 107.97227252 -144.88779062 106.49741276 -141.4375 105.25 C-135.7618091 103.31012739 -135.7618091 103.31012739 -132 99 C-129.96834222 97.9653698 -127.89416028 97.01381054 -125.8046875 96.1015625 C-125.17901886 95.82533051 -124.55335022 95.54909851 -123.90872192 95.26449585 C-121.90012282 94.37850437 -119.88791309 93.50114134 -117.875 92.625 C-115.88392801 91.75511418 -113.89378323 90.88327906 -111.9055481 90.00692749 C-110.08597288 89.20537641 -108.26351893 88.41036966 -106.44091797 87.61572266 C-103.94172863 86.44219952 -101.64488218 85.24312435 -99.27783203 83.84912109 C-96.03827532 82.02159223 -93.66927955 81.35797849 -90 81 C-90 80.34 -90 79.68 -90 79 C-91.65 78.67 -93.3 78.34 -95 78 C-95 77.01 -95 76.02 -95 75 C-91.54655927 71.67938391 -87.42630064 70.71873434 -82.9296875 69.38671875 C-79.00915151 68.16411258 -75.57071738 66.83370357 -72.0625 64.6875 C-62.32636992 59.03371218 -50.4769146 56.12631386 -39.578125 53.640625 C-36.67463269 52.91915115 -33.83825878 51.94608626 -31 51 C-30.67 46.05 -30.34 41.1 -30 36 C-31.546875 36.309375 -33.09375 36.61875 -34.6875 36.9375 C-45.08061875 38.81625608 -55.45876609 39.17093893 -66 39 C-65.67 38.01 -65.34 37.02 -65 36 C-66.32 36 -67.64 36 -69 36 C-69 35.34 -69 34.68 -69 34 C-63.25 33.875 -63.25 33.875 -61 35 C-61 34.01 -61 33.02 -61 32 C-59.02 32 -57.04 32 -55 32 C-55 31.01 -55 30.02 -55 29 C-50.01657457 27.97775889 -45.07454515 27.6367694 -40 28 C-39.67 28.33 -39.34 28.66 -39 29 C-37.14712498 29.07226502 -35.29166122 29.0838122 -33.4375 29.0625 C-32.42558594 29.05347656 -31.41367188 29.04445313 -30.37109375 29.03515625 C-29.19740234 29.01775391 -29.19740234 29.01775391 -28 29 C-28.0721875 30.05316406 -28.144375 31.10632813 -28.21875 32.19140625 C-28.84813736 41.81396487 -29.12633389 51.35651306 -29 61 C-27.29516323 59.29516323 -27.8303429 57.066528 -27.7890625 54.734375 C-27.76279785 53.62586182 -27.7365332 52.51734863 -27.70947266 51.37524414 C-27.68159668 50.17891357 -27.6537207 48.98258301 -27.625 47.75 C-27.35231431 38.7900723 -26.86452495 29.94443617 -25.625 21.0625 C-25.5110791 20.20043945 -25.3971582 19.33837891 -25.27978516 18.45019531 C-24.14550359 10.95999953 -24.14550359 10.95999953 -21 8 C-20.34 8 -19.68 8 -19 8 C-18.2575 7.01 -18.2575 7.01 -17.5 6 C-16.7575 5.01 -16.7575 5.01 -16 4 C-15.34 4 -14.68 4 -14 4 C-14 5.32 -14 6.64 -14 8 C-13.34 6.68 -12.68 5.36 -12 4 C-11.01 4 -10.02 4 -9 4 C-8.07053383 6.7883985 -7.94023455 8.21849933 -8.0625 11.0625 C-8.45661561 15.00724787 -8.45661561 15.00724787 -6 17 C-6.11859375 16.31292969 -6.2371875 15.62585938 -6.359375 14.91796875 C-6.48828125 14.01691406 -6.6171875 13.11585938 -6.75 12.1875 C-6.95882812 10.84751953 -6.95882812 10.84751953 -7.171875 9.48046875 C-7 7 -7 7 -5.140625 5.17578125 C-3 4 -3 4 -1 4 C-0.67 2.68 -0.34 1.36 0 0 Z \",fill:\"#040E10\",transform:\"translate(177,376)\"})),_path9||(_path9=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.63001953 0.01353516 1.63001953 0.01353516 3.29296875 0.02734375 C4.12441406 0.03894531 4.95585937 0.05054688 5.8125 0.0625 C5.8125 0.7225 5.8125 1.3825 5.8125 2.0625 C2.1825 2.3925 -1.4475 2.7225 -5.1875 3.0625 C3.98460724 5.29959933 13.15769863 7.07646176 22.47119141 8.61621094 C23.39206543 8.77508789 24.31293945 8.93396484 25.26171875 9.09765625 C26.09018311 9.2356665 26.91864746 9.37367676 27.7722168 9.51586914 C29.8125 10.0625 29.8125 10.0625 31.8125 12.0625 C32.37770003 14.71787372 32.55038198 17.35394713 32.8125 20.0625 C33.8025 20.0625 34.7925 20.0625 35.8125 20.0625 C36.3075 25.0125 36.3075 25.0125 36.8125 30.0625 C43.0988532 32.29314146 49.24645316 33.89733511 55.8125 35.0625 C55.8125 34.4025 55.8125 33.7425 55.8125 33.0625 C59.4425 33.0625 63.0725 33.0625 66.8125 33.0625 C65.8225 28.1125 65.8225 28.1125 64.8125 23.0625 C71.46283252 22.53747375 71.46283252 22.53747375 74.8125 23.0625 C78.8125 27.44345238 78.8125 27.44345238 78.8125 31.0625 C80.1325 31.0625 81.4525 31.0625 82.8125 31.0625 C83.1425 30.0725 83.4725 29.0825 83.8125 28.0625 C84.1425 28.3925 84.4725 28.7225 84.8125 29.0625 C85.1425 28.4025 85.4725 27.7425 85.8125 27.0625 C92.9195072 25.48316507 100.5794813 25.9506492 107.8125 26.0625 C107.8125 25.4025 107.8125 24.7425 107.8125 24.0625 C125.53977273 20.75340909 125.53977273 20.75340909 133.8125 24.0625 C133.8125 24.7225 133.8125 25.3825 133.8125 26.0625 C137.4425 26.7225 141.0725 27.3825 144.8125 28.0625 C144.8125 28.3925 144.8125 28.7225 144.8125 29.0625 C143.18054688 29.22685547 143.18054688 29.22685547 141.515625 29.39453125 C133.61864842 30.23162518 126.00624922 31.26193771 118.328125 33.37890625 C111.7203177 35.17450606 105.31245621 35.37235264 98.49804688 35.58007812 C97.66982422 35.61423828 96.84160156 35.64839844 95.98828125 35.68359375 C95.23458252 35.7086499 94.48088379 35.73370605 93.7043457 35.75952148 C91.57282413 35.91124814 91.57282413 35.91124814 89.8125 38.0625 C87.82428687 38.46014263 85.82305661 38.80025349 83.8125 39.0625 C83.8125 39.3925 83.8125 39.7225 83.8125 40.0625 C77.69273503 40.13697293 71.57323722 40.19125469 65.453125 40.22729492 C63.37365113 40.24232843 61.29420869 40.26276074 59.21484375 40.28881836 C56.21606666 40.32544136 53.21771089 40.34228111 50.21875 40.35546875 C48.83701599 40.37869453 48.83701599 40.37869453 47.42736816 40.40238953 C42.29837218 40.40370974 38.37626412 39.80013304 33.65686035 37.79374695 C30.80670328 36.66372447 27.93390048 36.30102136 24.90625 35.89453125 C23.05 35.63833008 23.05 35.63833008 21.15625 35.37695312 C19.8878125 35.21130859 18.619375 35.04566406 17.3125 34.875 C15.3634375 34.60913086 15.3634375 34.60913086 13.375 34.33789062 C10.18852549 33.90443637 7.00115435 33.47956121 3.8125 33.0625 C3.8125 36.6925 3.8125 40.3225 3.8125 44.0625 C5.65714844 44.15337891 5.65714844 44.15337891 7.5390625 44.24609375 C9.17188427 44.33055005 10.80469627 44.41519547 12.4375 44.5 C13.24574219 44.53931641 14.05398438 44.57863281 14.88671875 44.61914062 C16.07587891 44.68198242 16.07587891 44.68198242 17.2890625 44.74609375 C18.01174316 44.78275146 18.73442383 44.81940918 19.47900391 44.85717773 C21.8125 45.0625 21.8125 45.0625 24.3425293 45.57177734 C29.50910735 46.30243392 34.64366342 46.22494821 39.85546875 46.23046875 C41.03996613 46.23452225 42.2244635 46.23857574 43.44485474 46.24275208 C47.29659716 46.25222319 51.14824748 46.25214471 55 46.25 C56.96723526 46.25108765 56.96723526 46.25108765 58.97421265 46.25219727 C75.60630068 46.25117943 92.17523778 46.08954111 108.76049805 44.77416992 C122.54334095 43.72530277 135.79264279 44.0625 149.8125 44.0625 C149.8125 87.6225 149.8125 131.1825 149.8125 176.0625 C143.07787489 171.57274993 143.07787489 171.57274993 140.078125 169.07421875 C139.42706787 168.53659912 138.77601074 167.99897949 138.10522461 167.44506836 C137.43112549 166.8856958 136.75702637 166.32632324 136.0625 165.75 C130.97764316 161.57045207 125.86119349 157.60875552 120.41015625 153.9140625 C116.39224431 151.05016737 112.59568071 147.91939521 108.76147461 144.81616211 C104.18606602 141.1267216 99.53203253 137.56521967 94.8125 134.0625 C87.53375851 128.65513066 80.45347794 123.02599027 73.39599609 117.33447266 C68.95392716 113.76629826 64.43186437 110.30096549 59.90625 106.83984375 C58.83315486 106.01846228 57.76024416 105.1968398 56.6875 104.375 C56.14222656 103.95734375 55.59695313 103.5396875 55.03515625 103.109375 C50.70378678 99.7783218 46.44107042 96.36706618 42.1875 92.9375 C36.19749922 88.11108562 30.09578502 83.50390729 23.8125 79.0625 C28.63473922 85.40030012 34.52883651 89.89556447 40.87207031 94.61328125 C44.43679484 97.275612 47.9665786 99.98384412 51.5 102.6875 C52.2317041 103.24703369 52.9634082 103.80656738 53.71728516 104.38305664 C60.37497996 109.48066026 66.99777851 114.59260357 73.31640625 120.109375 C73.93555908 120.64812256 74.55471191 121.18687012 75.19262695 121.74194336 C76.40614405 122.80177047 77.61464717 123.86737668 78.81713867 124.93969727 C82.29229269 127.98026971 85.60500843 130.0764674 89.8125 132.0625 C91.50183922 133.7061814 93.16509924 135.3767876 94.8125 137.0625 C97.18685322 138.91946882 99.59161439 140.72543734 102.01953125 142.51171875 C102.61121094 143.02347656 103.20289063 143.53523437 103.8125 144.0625 C103.8125 144.7225 103.8125 145.3825 103.8125 146.0625 C99.26265892 145.78675206 97.09686308 143.83850399 93.87109375 140.91796875 C87.3191413 135.01250876 80.28471168 129.60561456 73.375 124.125 C72.78388428 123.65231689 72.19276855 123.17963379 71.58374023 122.69262695 C68.77998939 120.48070322 66.10473992 118.47808227 62.8125 117.0625 C62.8125 117.7225 62.8125 118.3825 62.8125 119.0625 C63.38097656 119.32417969 63.94945312 119.58585937 64.53515625 119.85546875 C70.73256959 123.14020412 75.94789203 128.07924306 80.8125 133.0625 C82.47214565 134.5702646 84.13959989 136.06945513 85.8125 137.5625 C89.25369245 140.63902877 92.6030012 143.7460179 95.8125 147.0625 C92.65919446 146.45555845 90.62361133 145.4208335 88.0625 143.5 C87.44890625 143.04496094 86.8353125 142.58992187 86.203125 142.12109375 C85.74421875 141.77175781 85.2853125 141.42242188 84.8125 141.0625 C85.6375 141.84625 86.4625 142.63 87.3125 143.4375 C89.8125 146.0625 89.8125 146.0625 89.8125 148.0625 C90.8025 148.3925 91.7925 148.7225 92.8125 149.0625 C92.8125 149.7225 92.8125 150.3825 92.8125 151.0625 C94.1325 151.7225 95.4525 152.3825 96.8125 153.0625 C96.8125 153.7225 96.8125 154.3825 96.8125 155.0625 C97.4725 155.0625 98.1325 155.0625 98.8125 155.0625 C98.8125 155.7225 98.8125 156.3825 98.8125 157.0625 C95.14640455 156.47888391 93.36053439 155.02014866 90.6875 152.5 C87.48338612 149.55326576 84.23416622 146.75399757 80.8125 144.0625 C70.61334746 135.97351695 70.61334746 135.97351695 66.8125 132.0625 C66.8125 131.4025 66.8125 130.7425 66.8125 130.0625 C66.22984375 129.96324219 65.6471875 129.86398437 65.046875 129.76171875 C62.38500359 128.92872053 61.0920894 127.77459504 59.0625 125.875 C55.63470005 122.74358877 52.0794563 119.99026741 48.28125 117.32421875 C47.7965625 116.90785156 47.311875 116.49148438 46.8125 116.0625 C46.8125 115.4025 46.8125 114.7425 46.8125 114.0625 C46.235 113.794375 45.6575 113.52625 45.0625 113.25 C42.77837952 112.04449197 40.85818469 110.63114477 38.8125 109.0625 C42.74720135 113.77457396 46.6947812 118.03361356 51.52734375 121.8359375 C51.95144531 122.24070312 52.37554688 122.64546875 52.8125 123.0625 C52.8125 123.7225 52.8125 124.3825 52.8125 125.0625 C53.40160156 125.33191406 53.99070312 125.60132813 54.59765625 125.87890625 C56.80328067 127.05757327 58.40421772 128.32472879 60.25 130 C62.28773416 131.79876747 64.08890978 133.22702963 66.4375 134.625 C70.40948636 137.02909701 73.33328738 139.62486213 74.8125 144.0625 C76.13472671 144.75093209 77.46936601 145.41580586 78.8125 146.0625 C80.234375 147.578125 80.234375 147.578125 81.5625 149.3125 C84.35305023 152.71923772 87.40651279 155.15601872 90.9765625 157.70703125 C93.13813254 159.30291381 94.99165494 161.08991785 96.8125 163.0625 C96.4825 163.7225 96.1525 164.3825 95.8125 165.0625 C92.18154219 163.76299931 89.44270304 162.22100208 86.4375 159.8125 C85.6640625 159.19632813 84.890625 158.58015625 84.09375 157.9453125 C81.44984752 155.76318751 78.8640614 153.52453856 76.3203125 151.2265625 C74.69650043 149.84081907 74.69650043 149.84081907 71.8125 149.0625 C71.4825 148.0725 71.1525 147.0825 70.8125 146.0625 C70.1525 145.7325 69.4925 145.4025 68.8125 145.0625 C68.8125 147.0425 68.8125 149.0225 68.8125 151.0625 C63.97042449 147.45467903 59.1611742 143.80661896 54.375 140.125 C53.8173999 139.69662842 53.2597998 139.26825684 52.68530273 138.8269043 C48.62944766 135.70587796 44.60983765 132.54149717 40.6171875 129.33984375 C38.73189675 127.87454287 38.73189675 127.87454287 35.8125 127.0625 C36.8025 128.485625 36.8025 128.485625 37.8125 129.9375 C39.8125 133.0625 39.8125 133.0625 39.8125 135.0625 C40.4725 135.0625 41.1325 135.0625 41.8125 135.0625 C43.46875 136.70703125 43.46875 136.70703125 45.3125 138.875 C45.9209375 139.58269531 46.529375 140.29039062 47.15625 141.01953125 C48.8125 143.0625 48.8125 143.0625 50.8125 146.0625 C49.8225 146.7225 48.8325 147.3825 47.8125 148.0625 C47.35359375 147.53140625 46.8946875 147.0003125 46.421875 146.453125 C40.66128792 139.66724421 40.66128792 139.66724421 33.8125 134.0625 C33.8125 133.0725 33.8125 132.0825 33.8125 131.0625 C31.8325 130.4025 29.8525 129.7425 27.8125 129.0625 C27.8125 128.0725 27.8125 127.0825 27.8125 126.0625 C26.4925 126.0625 25.1725 126.0625 23.8125 126.0625 C23.1525 125.4025 22.4925 124.7425 21.8125 124.0625 C21.1525 125.0525 20.4925 126.0425 19.8125 127.0625 C20.4725 127.3925 21.1325 127.7225 21.8125 128.0625 C21.1525 129.0525 20.4925 130.0425 19.8125 131.0625 C17.93310547 131.3112793 17.93310547 131.3112793 15.6796875 131.13671875 C14.47119141 131.05454102 14.47119141 131.05454102 13.23828125 130.97070312 C12.39652344 130.89787109 11.55476563 130.82503906 10.6875 130.75 C9.83800781 130.68876953 8.98851562 130.62753906 8.11328125 130.56445312 C6.01196335 130.41098609 3.91204876 130.23852278 1.8125 130.0625 C0.45810332 127.35370665 0.74748549 125.05316732 0.8125 122.0625 C4.1125 122.0625 7.4125 122.0625 10.8125 122.0625 C9.719375 121.258125 8.62625 120.45375 7.5 119.625 C6.88511719 119.17253906 6.27023437 118.72007812 5.63671875 118.25390625 C3.71572899 116.88913692 3.71572899 116.88913692 0.8125 116.0625 C0.81362793 115.27077393 0.81475586 114.47904785 0.81591797 113.66333008 C0.80379186 110.06635829 0.74612866 106.47150188 0.6875 102.875 C0.69007813 101.62912109 0.69265625 100.38324219 0.6953125 99.09960938 C0.79248472 92.84494192 0.79248472 92.84494192 -1.45581055 87.22192383 C-3.20610004 85.72877365 -3.20610004 85.72877365 -6.1875 84.0625 C-7.41167382 82.7841374 -8.60472005 81.47449855 -9.75 80.125 C-10.33007812 79.44566406 -10.91015625 78.76632812 -11.5078125 78.06640625 C-12.33925781 77.07447266 -12.33925781 77.07447266 -13.1875 76.0625 C-13.70054687 75.45277344 -14.21359375 74.84304688 -14.7421875 74.21484375 C-15.89645728 72.83558919 -17.04295117 71.44983192 -18.1875 70.0625 C-15.1875 70.0625 -15.1875 70.0625 -12.62890625 72.546875 C-11.66093971 73.62801507 -10.70161136 74.71693672 -9.75 75.8125 C-8.79376398 76.89133038 -7.83674664 77.9694688 -6.87890625 79.046875 C-6.4214502 79.56314453 -5.96399414 80.07941406 -5.49267578 80.61132812 C-2.23020173 84.33142001 -2.23020173 84.33142001 1.8125 87.0625 C3.635821 80.90879161 4.0486959 75.46603322 3.8125 69.0625 C3.4825 69.0625 3.1525 69.0625 2.8125 69.0625 C2.4825 65.1025 2.1525 61.1425 1.8125 57.0625 C1.1525 57.0625 0.4925 57.0625 -0.1875 57.0625 C-2.53520643 53.54094036 -2.56419614 51.55478157 -2.8125 47.375 C-2.88726562 46.19550781 -2.96203125 45.01601563 -3.0390625 43.80078125 C-3.08804688 42.89714844 -3.13703125 41.99351562 -3.1875 41.0625 C-3.8475 41.0625 -4.5075 41.0625 -5.1875 41.0625 C-5.1875 40.4025 -5.1875 39.7425 -5.1875 39.0625 C-6.095 38.98 -7.0025 38.8975 -7.9375 38.8125 C-11.58827839 37.97001268 -12.82134583 36.88368382 -15.1875 34.0625 C-15.5175 35.0525 -15.8475 36.0425 -16.1875 37.0625 C-17.8375 36.7325 -19.4875 36.4025 -21.1875 36.0625 C-21.5175 34.7425 -21.8475 33.4225 -22.1875 32.0625 C-24.4975 31.7325 -26.8075 31.4025 -29.1875 31.0625 C-29.1875 30.4025 -29.1875 29.7425 -29.1875 29.0625 C-30.115625 29.248125 -31.04375 29.43375 -32 29.625 C-35.1875 30.0625 -35.1875 30.0625 -38.1875 29.0625 C-39.1796875 26.796875 -39.1796875 26.796875 -40.0625 23.8125 C-42.14262221 17.10450899 -44.61638564 10.59565944 -47.1875 4.0625 C-42.8589108 -0.2660892 -34.4172731 1.00674537 -28.62890625 1 C-26.33589683 1.01573248 -24.04291751 1.03663517 -21.75 1.0625 C-19.4388485 1.08796723 -17.12764278 1.1090145 -14.81640625 1.125 C-13.3015564 1.14240234 -13.3015564 1.14240234 -11.75610352 1.16015625 C-7.71006343 1.00632904 -4.16571041 -0.04479259 0 0 Z \",fill:\"#46492D\",transform:\"translate(476.1875,372.9375)\"})),_path10||(_path10=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-3.46537085 2.31024723 -6.82941667 3.1499932 -10.8125 4.125 C-11.86147461 4.39763672 -11.86147461 4.39763672 -12.93164062 4.67578125 C-17.04458953 5.69920913 -20.72734085 6.20122414 -25 6 C-25 6.66 -25 7.32 -25 8 C-30.36439644 10.68219822 -34.01006953 11.3152595 -40 11 C-38.43386613 17.83751127 -36.58848301 24.53423313 -34.375 31.1875 C-34.15690674 31.84693604 -33.93881348 32.50637207 -33.71411133 33.18579102 C-32.80401599 36.3440438 -32.80401599 36.3440438 -31 39 C-29.39204323 45.6956325 -28.72828812 52.40678114 -28.44140625 59.2734375 C-27.92877139 62.43997848 -26.67971429 64.29355498 -25 67 C-24.375 69.4375 -24.375 69.4375 -24 72 C-23.11992256 77.48929659 -21.89727868 82.84883239 -20.5859375 88.25 C-20 91 -20 91 -20 94 C-19.01 94.33 -18.02 94.66 -17 95 C-16.80664062 96.02480469 -16.61328125 97.04960938 -16.4140625 98.10546875 C-16.15130137 99.46619601 -15.88826602 100.82687033 -15.625 102.1875 C-15.49867188 102.86103516 -15.37234375 103.53457031 -15.2421875 104.22851562 C-14.6680861 107.17078531 -14.04157363 109.8990144 -12.8984375 112.67578125 C-12 115 -12 115 -12 120 C-70.74 120 -129.48 120 -190 120 C-189.01 115.71 -188.02 111.42 -187 107 C-186.4221415 104.33661927 -185.85638918 101.67052465 -185.3125 99 C-185.06113281 97.783125 -184.80976563 96.56625 -184.55078125 95.3125 C-184.07525732 92.45261141 -183.88515496 89.8875324 -184 87 C-184.66 88.32 -185.32 89.64 -186 91 C-186.99 91 -187.98 91 -189 91 C-188.88444496 89.29100181 -188.75706997 87.58280131 -188.625 85.875 C-188.55539063 84.92367187 -188.48578125 83.97234375 -188.4140625 82.9921875 C-187.97039816 79.78608485 -187.06401788 77.05376974 -186 74 C-185.33059446 71.48227634 -184.68279123 68.96704332 -184.0625 66.4375 C-183.80472778 65.4000061 -183.80472778 65.4000061 -183.54174805 64.34155273 C-182.15004169 58.70562634 -180.85861959 53.04902213 -179.61328125 47.37890625 C-179 45 -179 45 -178 44 C-177.76924918 42.65252916 -177.58846937 41.29622435 -177.4375 39.9375 C-177.2209375 37.9884375 -177.2209375 37.9884375 -177 36 C-177.99 36.495 -177.99 36.495 -179 37 C-179.75746142 39.56530879 -180.40955785 42.08355786 -181 44.6875 C-182.13370244 49.55444916 -183.39283647 54.26208192 -185 59 C-185.5621517 61.11967291 -186.10427735 63.24477097 -186.625 65.375 C-186.88539063 66.43460938 -187.14578125 67.49421875 -187.4140625 68.5859375 C-187.60742188 69.38257813 -187.80078125 70.17921875 -188 71 C-188.66 70.34 -189.32 69.68 -190 69 C-190.99 69.99 -191.98 70.98 -193 72 C-191.9559791 65.89554836 -190.44640246 60.7082724 -188 55 C-186.39369327 48.95027335 -185.77754148 42.88972644 -185.27734375 36.66796875 C-184.613654 30.28346033 -182.82741437 24.13489112 -181 18 C-172.54212791 17.70778945 -164.23596971 18.21162069 -155.8125 18.9375 C-154.78439209 19.02435059 -153.75628418 19.11120117 -152.69702148 19.20068359 C-145.25570892 19.87214554 -145.25570892 19.87214554 -143 21 C-141.62793479 21.21691392 -140.24860728 21.38923163 -138.8671875 21.53515625 C-138.06152344 21.62216797 -137.25585938 21.70917969 -136.42578125 21.79882812 C-135.58402344 21.88583984 -134.74226563 21.97285156 -133.875 22.0625 C-133.02550781 22.15337891 -132.17601562 22.24425781 -131.30078125 22.33789062 C-129.2008855 22.5620368 -127.10048707 22.78146448 -125 23 C-124.67 19.04 -124.34 15.08 -124 11 C-135.22 11 -146.44 11 -158 11 C-156.78292777 4.91463886 -156.78292777 4.91463886 -154 3 C-151.65698242 2.62768555 -151.65698242 2.62768555 -148.85546875 2.63671875 C-147.79948486 2.63607422 -146.74350098 2.63542969 -145.65551758 2.63476562 C-143.93884888 2.66086914 -143.93884888 2.66086914 -142.1875 2.6875 C-140.42152466 2.70006836 -140.42152466 2.70006836 -138.61987305 2.71289062 C-124.71351388 2.89535286 -110.8607114 3.91969403 -97 5 C-96.505 14.405 -96.505 14.405 -96 24 C-84.12 23.01 -84.12 23.01 -72 22 C-72 19.03 -72 16.06 -72 13 C-72.495 12.505 -72.495 12.505 -73 12 C-73.04092937 9.66702567 -73.04241723 7.33294775 -73 5 C-69.84613452 4.09597697 -66.88128028 3.79304317 -63.6081543 3.62695312 C-62.52990891 3.57019409 -61.45166351 3.51343506 -60.34074402 3.45495605 C-58.60006401 3.36897156 -58.60006401 3.36897156 -56.82421875 3.28125 C-55.62569778 3.21844849 -54.42717682 3.15564697 -53.19233704 3.09094238 C-49.35757334 2.89024599 -45.5225763 2.69462514 -41.6875 2.5 C-37.86315146 2.30511341 -34.03888391 2.10903419 -30.21479797 1.90905762 C-27.83538765 1.78467634 -25.45582247 1.66321388 -23.07609558 1.54504395 C-15.35750039 1.14226814 -7.71773844 -0.15750487 0 0 Z \",fill:\"#3A2620\",transform:\"translate(397,506)\"})),_path11||(_path11=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.6 0 13.2 0 20 0 C20 0.66 20 1.32 20 2 C23.96 2 27.92 2 32 2 C32 1.34 32 0.68 32 0 C32.66 0 33.32 0 34 0 C34 2.97 34 5.94 34 9 C34.99 9 35.98 9 37 9 C37.21432579 15.64409958 36.51233701 21.53205867 35 28 C36.98 28.495 36.98 28.495 39 29 C39.20496094 28.44570313 39.40992188 27.89140625 39.62109375 27.3203125 C39.89050781 26.59585937 40.15992188 25.87140625 40.4375 25.125 C40.70433594 24.40570313 40.97117187 23.68640625 41.24609375 22.9453125 C42 21 42 21 43 19 C50.59 19 58.18 19 66 19 C66 19.33 66 19.66 66 20 C64.46279297 20.07347656 64.46279297 20.07347656 62.89453125 20.1484375 C61.5338294 20.22351071 60.17315356 20.29905655 58.8125 20.375 C58.13896484 20.4059375 57.46542969 20.436875 56.77148438 20.46875 C52.80321025 20.70103922 49.59270121 21.28387476 46 23 C46.41977529 25.09209605 46.41977529 25.09209605 48 27 C50.72000047 27.44377366 53.08395803 27.65105465 55.8125 27.6875 C64.662296 27.95179255 64.662296 27.95179255 69 29 C69 29.33 69 29.66 69 30 C67.02 30.66 65.04 31.32 63 32 C63 33.65 63 35.3 63 37 C63.66 37 64.32 37 65 37 C65 37.99 65 38.98 65 40 C67.31 40.33 69.62 40.66 72 41 C72 41.66 72 42.32 72 43 C73.11181641 42.65388672 73.11181641 42.65388672 74.24609375 42.30078125 C77 42 77 42 79.09765625 43.29296875 C79.74605469 43.91816406 80.39445313 44.54335938 81.0625 45.1875 C81.74441406 45.84492188 82.42632812 46.50234375 83.12890625 47.1796875 C83.74636719 47.78039062 84.36382812 48.38109375 85 49 C85.825 49.598125 86.65 50.19625 87.5 50.8125 C90.0212319 54.48929652 89.2966837 58.68160391 89 63 C89.99 63 90.98 63 92 63 C92 54.42 92 45.84 92 37 C92.33 37 92.66 37 93 37 C93.99 51.355 93.99 51.355 95 66 C94.01 65.67 93.02 65.34 92 65 C90.43881572 64.93259135 88.8749748 64.91485544 87.3125 64.9375 C86.50425781 64.94652344 85.69601563 64.95554687 84.86328125 64.96484375 C84.24839844 64.97644531 83.63351563 64.98804688 83 65 C85.31 65.33 87.62 65.66 90 66 C90.33 67.32 90.66 68.64 91 70 C92.24716797 70.18175781 92.24716797 70.18175781 93.51953125 70.3671875 C94.60621094 70.53476562 95.69289063 70.70234375 96.8125 70.875 C97.89144531 71.03742188 98.97039062 71.19984375 100.08203125 71.3671875 C103 72 103 72 106 74 C106.1875 76.625 106.1875 76.625 106 79 C105.34 77.68 104.68 76.36 104 75 C103.34 75 102.68 75 102 75 C103.8568256 80.91687367 103.8568256 80.91687367 107.90625 85.3828125 C109.29033456 86.03870332 110.69356574 86.65575951 112.11328125 87.23046875 C114 88 114 88 116.1875 89.6875 C120.16814026 92.5700326 125.56518885 92.25192824 130.3125 92.5625 C132.519375 92.706875 134.72625 92.85125 137 93 C136.67 97.95 136.34 102.9 136 108 C131.71 108 127.42 108 123 108 C123 108.66 123 109.32 123 110 C123.66 110 124.32 110 125 110 C125 110.99 125 111.98 125 113 C125.66 113 126.32 113 127 113 C127 114.98 127 116.96 127 119 C127.66 119 128.32 119 129 119 C129 120.98 129 122.96 129 125 C130.32 125.66 131.64 126.32 133 127 C133 127.66 133 128.32 133 129 C133.66 129 134.32 129 135 129 C135 130.32 135 131.64 135 133 C135.66 133 136.32 133 137 133 C138.13764351 137.26616316 139 140.56486311 139 145 C144.61 145 150.22 145 156 145 C156 145.33 156 145.66 156 146 C155.29391602 146.01981934 154.58783203 146.03963867 153.86035156 146.06005859 C150.65653006 146.15540415 147.45335199 146.26504513 144.25 146.375 C142.58324219 146.42140625 142.58324219 146.42140625 140.8828125 146.46875 C139.27792969 146.52675781 139.27792969 146.52675781 137.640625 146.5859375 C136.65610352 146.6173584 135.67158203 146.6487793 134.65722656 146.68115234 C131.92443946 147.00906671 130.24375285 147.4087408 128 149 C127.37164523 151.80388496 126.9851678 154.28828843 126.75 157.125 C126.67265625 157.87910156 126.5953125 158.63320313 126.515625 159.41015625 C126.32710141 161.27182671 126.16136762 163.13577938 126 165 C127.65 165 129.3 165 131 165 C131 165.66 131 166.32 131 167 C132.32 167.33 133.64 167.66 135 168 C130.8794254 169.99785435 127.54805635 170.17835515 123 170 C123 170.66 123 171.32 123 172 C124.13179687 171.91621094 125.26359375 171.83242188 126.4296875 171.74609375 C127.91143781 171.64293392 129.39320982 171.54008547 130.875 171.4375 C131.62136719 171.38142578 132.36773437 171.32535156 133.13671875 171.26757812 C138.7734375 170.88671875 138.7734375 170.88671875 141 172 C140.67 172.99 140.34 173.98 140 175 C136.37 175 132.74 175 129 175 C129 175.66 129 176.32 129 177 C132.63 176.67 136.26 176.34 140 176 C139.67 177.65 139.34 179.3 139 181 C142.63 181 146.26 181 150 181 C150 181.33 150 181.66 150 182 C146.04 182 142.08 182 138 182 C139.32 182.66 140.64 183.32 142 184 C142 186.31 142 188.62 142 191 C142.66 191 143.32 191 144 191 C144 190.01 144 189.02 144 188 C145.32 188.33 146.64 188.66 148 189 C147.01 189 146.02 189 145 189 C145 189.66 145 190.32 145 191 C146.32 191.66 147.64 192.32 149 193 C148.125 196.875 148.125 196.875 147 198 C146.95936168 199.66617115 146.957279 201.33388095 147 203 C148.134375 203.144375 149.26875 203.28875 150.4375 203.4375 C154 204 154 204 155 205 C156.98936867 200.09289062 157.30380669 195.61879543 157.4609375 190.390625 C158 188 158 188 159.84765625 186.6875 C162.69496214 185.77801572 165.02870725 185.74712402 168 186 C168.99 186.66 169.98 187.32 171 188 C171.1875 190.625 171.1875 190.625 171 193 C171.66 193 172.32 193 173 193 C174.8815863 202.32509434 176.47703913 211.47850555 177 221 C175.68 221 174.36 221 173 221 C173 217.7 173 214.4 173 211 C166.4 211 159.8 211 153 211 C153 211.99 153 212.98 153 214 C155.97 214.66 158.94 215.32 162 216 C162.33 217.32 162.66 218.64 163 220 C160.36241231 222.63758769 159.11186759 222.26420729 155.43359375 222.30859375 C154.30759766 222.33373047 153.18160156 222.35886719 152.02148438 222.38476562 C149.65955416 222.41951882 147.29757076 222.4508511 144.93554688 222.47851562 C137.99629054 222.64007696 132.45680664 223.41589915 126 226 C129.3 226.33 132.6 226.66 136 227 C136.33 226.34 136.66 225.68 137 225 C137 225.66 137 226.32 137 227 C153.17 227 169.34 227 186 227 C186 227.33 186 227.66 186 228 C178.16045302 228.85746279 170.4334171 229.13530402 162.55078125 229.09765625 C160.84283638 229.09553383 160.84283638 229.09553383 159.10038757 229.09336853 C155.50439702 229.08782209 151.90847137 229.07527989 148.3125 229.0625 C145.85742278 229.05747807 143.40234458 229.05291638 140.94726562 229.04882812 C134.96482203 229.03787028 128.98241566 229.02118647 123 229 C123 228.34 123 227.68 123 227 C122.31486328 227.02094727 121.62972656 227.04189453 120.92382812 227.06347656 C117.78270478 227.14725399 114.64181736 227.19885414 111.5 227.25 C110.42234375 227.28351563 109.3446875 227.31703125 108.234375 227.3515625 C102.1521883 227.42573551 97.92890506 227.0043669 92.65429688 223.91699219 C89.01317841 221.89868626 84.98442283 222.33379425 81 223 C78.99289167 223.87329194 78.99289167 223.87329194 77.125 225 C67.52884432 230.35023759 53.23862994 226.3002865 43 224 C40.99554125 223.34686176 38.99506043 222.68130635 37 222 C34.81945759 221.5290464 32.63092683 221.09424468 30.4375 220.6875 C25.85469814 219.82567184 21.32662264 218.85327026 16.80859375 217.6953125 C1.00934296 213.28520534 1.00934296 213.28520534 -15 215 C-14.49396008 212.83125748 -14.00016187 211.00032373 -13 209 C-13.99 209 -14.98 209 -16 209 C-16.185625 210.7015625 -16.185625 210.7015625 -16.375 212.4375 C-16.58125 213.613125 -16.7875 214.78875 -17 216 C-17.66 216.33 -18.32 216.66 -19 217 C-19.26870936 212.87544552 -19.50122964 208.75050833 -19.7019043 204.62207031 C-19.77491631 203.22114222 -19.85741094 201.82067219 -19.94995117 200.42089844 C-20.86813269 186.35214988 -20.86813269 186.35214988 -16.38745117 180.57519531 C-15.92959229 180.05538086 -15.4717334 179.53556641 -15 179 C-14.27296875 178.04351562 -13.5459375 177.08703125 -12.796875 176.1015625 C-12.12140625 175.28429687 -11.4459375 174.46703125 -10.75 173.625 C-8.10804616 170.48477587 -8.10804616 170.48477587 -6 167 C-5.34 167 -4.68 167 -4 167 C-3.505 176.405 -3.505 176.405 -3 186 C-0.710625 185.9690625 -0.710625 185.9690625 1.625 185.9375 C11.42595749 185.92569162 21.21386536 186.50886457 31 187 C31 187.66 31 188.32 31 189 C33.64 189 36.28 189 39 189 C39 190.32 39 191.64 39 193 C32.34993326 193.11335341 25.75956261 192.96666839 19.125 192.5 C5.86923975 191.02472483 5.86923975 191.02472483 -7 193 C-8.28436734 194.9837767 -8.28436734 194.9837767 -9 197 C-8.34 197 -7.68 197 -7 197 C-7 196.34 -7 195.68 -7 195 C9.9145281 194.76543798 26.04170217 196.47515195 42.7421875 199.0625 C53.58602564 200.704309 64.17516674 201.25312234 75.14892578 201.32592773 C89.00478486 201.43525413 89.00478486 201.43525413 95 206 C95 206.66 95 207.32 95 208 C93.66388672 207.74089844 93.66388672 207.74089844 92.30078125 207.4765625 C88.92160298 206.99394286 85.7017146 207.0154508 82.29296875 207.1484375 C62.67929823 207.8386919 43.98679905 205.55024802 24.6159668 202.57763672 C22.54743387 202.26093182 20.47883182 201.94467805 18.41015625 201.62890625 C16.92786781 201.40210175 16.92786781 201.40210175 15.41563416 201.17071533 C7.28469149 199.962692 -0.78519676 199.2894186 -9 199 C-10.37579827 201.66211372 -11.37063561 204.06296616 -12 207 C-10.91203125 207.10957031 -9.8240625 207.21914063 -8.703125 207.33203125 C-0.81409172 208.16927888 6.74373876 209.17979049 14.38671875 211.4140625 C17.32296057 212.07241268 20.00032621 212.096622 23 212 C23 212.66 23 213.32 23 214 C24.01320313 214.10183594 25.02640625 214.20367187 26.0703125 214.30859375 C33.41223711 215.22431554 40.63923733 216.93541901 47.86767578 218.49145508 C58.30381572 220.72924143 67.53147932 222.65096665 77.8125 219 C81.73487845 217.62406213 84.83074446 216.75338969 89 217 C89 216.34 89 215.68 89 215 C85.37 215 81.74 215 78 215 C79.875 212.4375 79.875 212.4375 83 210 C86.42743722 209.8534836 89.64141186 210.34132543 93 211 C93 211.66 93 212.32 93 213 C93.66 213 94.32 213 95 213 C95.33 214.32 95.66 215.64 96 217 C100.95 217 105.9 217 111 217 C111.33 217.66 111.66 218.32 112 219 C112.01458252 218.22285645 112.02916504 217.44571289 112.04418945 216.64501953 C112.11846978 213.13783312 112.21519589 209.6316199 112.3125 206.125 C112.34633789 204.29001953 112.34633789 204.29001953 112.38085938 202.41796875 C112.41630859 201.25136719 112.45175781 200.08476562 112.48828125 198.8828125 C112.51446533 197.80402832 112.54064941 196.72524414 112.56762695 195.61376953 C112.71031006 194.75122559 112.85299316 193.88868164 113 193 C113.99 192.34 114.98 191.68 116 191 C116.25030977 188.41619823 116.25030977 188.41619823 116 186 C116.99 185.67 117.98 185.34 119 185 C119 179.72 119 174.44 119 169 C119.66 169 120.32 169 121 169 C121 156.13 121 143.26 121 130 C119.35 130.33 117.7 130.66 116 131 C114.16151832 131.07790887 112.32057173 131.10793615 110.48046875 131.09765625 C109.45888672 131.09443359 108.43730469 131.09121094 107.38476562 131.08789062 C106.32966797 131.07951172 105.27457031 131.07113281 104.1875 131.0625 C103.11306641 131.05798828 102.03863281 131.05347656 100.93164062 131.04882812 C98.28770317 131.03707729 95.64388048 131.02064787 93 131 C93 130.34 93 129.68 93 129 C90.87249844 129.22773256 88.74791944 129.48290818 86.625 129.75 C85.44164062 129.88921875 84.25828125 130.0284375 83.0390625 130.171875 C81.53472656 130.58179688 81.53472656 130.58179688 80 131 C79.33222407 132.33277813 78.66568483 133.6661762 78 135 C76.18408203 136.46386719 76.18408203 136.46386719 74.0078125 137.796875 C73.22019531 138.28027344 72.43257812 138.76367188 71.62109375 139.26171875 C70.79738281 139.75285156 69.97367188 140.24398437 69.125 140.75 C68.30902344 141.25660156 67.49304688 141.76320313 66.65234375 142.28515625 C60.51434046 146 60.51434046 146 56 146 C55.67 148.97 55.34 151.94 55 155 C69.52 155 84.04 155 99 155 C99 155.33 99 155.66 99 156 C83.82 156 68.64 156 53 156 C52.505 151.545 52.505 151.545 52 147 C50.2476347 145.10291205 50.2476347 145.10291205 47.8125 144.4375 C47.00554687 144.15261719 46.19859375 143.86773437 45.3671875 143.57421875 C42.5034704 142.8795547 39.93156762 142.6993264 37 143 C36.95101562 143.78246094 36.90203125 144.56492187 36.8515625 145.37109375 C36.77679688 146.38300781 36.70203125 147.39492188 36.625 148.4375 C36.55539063 149.44683594 36.48578125 150.45617187 36.4140625 151.49609375 C36.27742188 152.32238281 36.14078125 153.14867187 36 154 C35.34 154.33 34.68 154.66 34 155 C34 153.02 34 151.04 34 149 C33.34 149 32.68 149 32 149 C32.020625 150.175625 32.04125 151.35125 32.0625 152.5625 C32.06947261 156.47413467 31.64250343 160.14497944 31 164 C30.67 164 30.34 164 30 164 C29.7827615 152.54317557 29.89138886 141.4043173 31.5625 130.0546875 C32.07088789 127.01936033 32.07088789 127.01936033 32 124 C31.731875 125.134375 31.46375 126.26875 31.1875 127.4375 C30.795625 128.613125 30.40375 129.78875 30 131 C29.01 131.33 28.02 131.66 27 132 C26.80664062 131.21753906 26.61328125 130.43507813 26.4140625 129.62890625 C26.15367187 128.61699219 25.89328125 127.60507812 25.625 126.5625 C25.36976563 125.55316406 25.11453125 124.54382813 24.8515625 123.50390625 C24.27426046 120.84429676 24.27426046 120.84429676 22 120 C18.40224286 113.30756194 19.08935363 108.1397838 21 101 C16.71 100.67 12.42 100.34 8 100 C7.505 101.485 7.505 101.485 7 103 C4.4375 104.6875 4.4375 104.6875 2 106 C2.495 110.95 2.495 110.95 3 116 C2.01 116.495 2.01 116.495 1 117 C1 116.34 1 115.68 1 115 C0.01 114.505 0.01 114.505 -1 114 C-1 110.37 -1 106.74 -1 103 C-1.99 103 -2.98 103 -4 103 C-4.66 104.98 -5.32 106.96 -6 109 C-7.125 105.25 -7.125 105.25 -6 103 C-8.64752004 105.57784846 -10.94432065 107.91648098 -13 111 C-13.75 108.875 -13.75 108.875 -14 106 C-12.0625 102.6875 -12.0625 102.6875 -10 100 C-10.53802246 100.21148682 -11.07604492 100.42297363 -11.63037109 100.64086914 C-18.23374331 103.06257949 -24.09660954 103.43388307 -31.0703125 103.43945312 C-36.88754873 103.57638482 -40.20693829 104.6448568 -45 108 C-45.65484375 108.74765625 -46.3096875 109.4953125 -46.984375 110.265625 C-49 112 -49 112 -52.453125 112.171875 C-53.70609375 112.03265625 -54.9590625 111.8934375 -56.25 111.75 C-57.51328125 111.62109375 -58.7765625 111.4921875 -60.078125 111.359375 C-61.52445312 111.18148437 -61.52445312 111.18148437 -63 111 C-62.5153125 110.030625 -62.030625 109.06125 -61.53125 108.0625 C-61.05123535 107.102229 -61.05123535 107.102229 -60.56152344 106.12255859 C-59.84654807 104.69293673 -59.13104269 103.26357981 -58.41503906 101.83447266 C-56.54039576 98.09091641 -54.67420595 94.34367058 -52.828125 90.5859375 C-52.47943359 89.87953125 -52.13074219 89.173125 -51.77148438 88.4453125 C-51.10800482 87.10059294 -50.44766406 85.75431849 -49.79101562 84.40625 C-47.12804038 79.02447193 -44.4883471 73.8010511 -39.625 70.125 C-35.68648103 66.92654831 -32.87618764 63.15098143 -30 59 C-29.34515625 59.42410156 -28.6903125 59.84820312 -28.015625 60.28515625 C-25.02199582 62.20902811 -22.01433143 64.10872652 -19 66 C-17.9584375 66.65613281 -16.916875 67.31226563 -15.84375 67.98828125 C-8.41559567 72.54087174 -8.41559567 72.54087174 0 74 C0 71.69 0 69.38 0 67 C0.66 67 1.32 67 2 67 C2.33 65.35 2.66 63.7 3 62 C1.68 62 0.36 62 -1 62 C-1.92017937 49.40717489 -1.92017937 49.40717489 0.3359375 45.95703125 C2 44.625 2 44.625 5 43 C5.66 43.33 6.32 43.66 7 44 C9.33189345 44.26955833 11.66321507 44.44507377 14.00390625 44.62109375 C14.66261719 44.74613281 15.32132812 44.87117188 16 45 C16.33 45.66 16.66 46.32 17 47 C19.75069134 47.39302445 19.75069134 47.39302445 22.9375 47.5 C28.77847309 47.77847309 28.77847309 47.77847309 31 50 C30.34 50 29.68 50 29 50 C29.29648438 51.20527344 29.59296875 52.41054688 29.8984375 53.65234375 C31.28622992 59.89740962 31.93586866 66.20913094 32.625 72.5625 C32.82609375 74.36170898 32.82609375 74.36170898 33.03125 76.19726562 C33.35852543 79.13105608 33.68133322 82.06526416 34 85 C34.99 85 35.98 85 37 85 C37 80.71 37 76.42 37 72 C37.33 72 37.66 72 38 72 C38.67453101 79.68483539 39.1567564 87.28410183 39 95 C39.66 95 40.32 95 41 95 C41.03758423 93.78884521 41.03758423 93.78884521 41.07592773 92.55322266 C41.19165487 88.91031083 41.31448635 85.26767274 41.4375 81.625 C41.47681641 80.35398437 41.51613281 79.08296875 41.55664062 77.7734375 C41.59853516 76.56171875 41.64042969 75.35 41.68359375 74.1015625 C41.72025146 72.98088379 41.75690918 71.86020508 41.79467773 70.70556641 C42 68 42 68 43 66 C43.66 66 44.32 66 45 66 C46.78409802 69.06246747 47.22880021 71.22079273 47.125 74.75 C47.10695313 75.54921875 47.08890625 76.3484375 47.0703125 77.171875 C47.04710937 77.77515625 47.02390625 78.3784375 47 79 C47.66 79 48.32 79 49 79 C48.61377078 71.24877918 47.55967478 64.33124245 45 57 C44.67 56.01 44.34 55.02 44 54 C45.32 54 46.64 54 48 54 C48 53.34 48 52.68 48 52 C46.02 52 44.04 52 42 52 C42.598125 51.773125 43.19625 51.54625 43.8125 51.3125 C46.56351888 49.66188867 47.52484637 47.8027919 49 45 C48.34 44.67 47.68 44.34 47 44 C48.875 44.1875 48.875 44.1875 51 45 C52.125 47.5 52.125 47.5 53 50 C53.66 50.33 54.32 50.66 55 51 C55 48.36 55 45.72 55 43 C53.33419766 42.7034367 51.66726546 42.41322408 50 42.125 C48.37191406 41.84076172 48.37191406 41.84076172 46.7109375 41.55078125 C44.06197428 41.15761934 41.51293547 40.8622971 38.8515625 40.66796875 C26.66833593 39.69859302 26.66833593 39.69859302 23 35.5 C21.59844288 33.43270324 21 32.50311778 21 30 C23.52475462 28.73762269 25.31200466 28.90143596 28.125 28.9375 C29.73375 28.958125 31.3425 28.97875 33 29 C32.67 22.73 32.34 16.46 32 10 C17.15 9.505 17.15 9.505 2 9 C0 5 0 5 0 0 Z \",fill:\"#080508\",transform:\"translate(169,277)\"})),_path12||(_path12=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 32.34 0 64.68 0 98 C-12.87 103.94 -12.87 103.94 -26 110 C-30.95 112.475 -30.95 112.475 -36 115 C-37.70573899 115.82064852 -39.41442878 116.6352678 -41.12890625 117.4375 C-52.93476307 123.0030718 -64.57518529 128.80991718 -76.10180664 134.93554688 C-77.10590576 135.46599609 -78.11000488 135.99644531 -79.14453125 136.54296875 C-80.03503174 137.01758545 -80.92553223 137.49220215 -81.84301758 137.98120117 C-84 139 -84 139 -86 139 C-86 139.66 -86 140.32 -86 141 C-87.010625 141.33 -88.02125 141.66 -89.0625 142 C-94.04822818 143.85412311 -98.63352429 146.38853104 -103.27954102 148.95507812 C-107.30767698 151.16379751 -111.39057724 153.10577692 -115.6003418 154.94360352 C-128.95750853 160.82380094 -141.94004336 167.39751869 -154.68554688 174.49560547 C-162.53296466 178.83092189 -170.55815144 182.72616684 -178.67773438 186.5234375 C-179.59232422 186.95140625 -180.50691406 187.379375 -181.44921875 187.8203125 C-182.66097778 188.38129639 -182.66097778 188.38129639 -183.8972168 188.95361328 C-186.21228217 190.05057511 -186.21228217 190.05057511 -189 192 C-191.26171875 192.1953125 -191.26171875 192.1953125 -193.6875 192.125 C-194.49574219 192.10695312 -195.30398438 192.08890625 -196.13671875 192.0703125 C-196.75160156 192.04710937 -197.36648438 192.02390625 -198 192 C-195.09675366 189.71116161 -192.14048314 187.91544516 -188.875 186.1875 C-185.12380894 184.17454395 -181.44598279 182.09327775 -177.8125 179.875 C-173.64000355 177.33812216 -169.39898073 175.11802776 -165 173 C-167.82300989 171.6709341 -167.82300989 171.6709341 -169.69140625 172.8203125 C-170.30886719 173.25085938 -170.92632812 173.68140625 -171.5625 174.125 C-174.62725355 176.16067117 -177.68743453 177.89731039 -181 179.5 C-186.32895238 182.11159345 -191.29046809 185.09493749 -196.14453125 188.5078125 C-200.84185037 191.78195087 -205.3307702 194.1359721 -210.73828125 196.04296875 C-213.16583037 197.07017002 -214.92296202 198.39102692 -217 200 C-218.23298229 200.65793593 -219.48370427 201.28371315 -220.75 201.875 C-223.71051703 203.30288438 -226.43949121 204.88493091 -229.1875 206.6875 C-232.104212 208.56294007 -234.48281371 209.67026379 -238 210 C-238 210.66 -238 211.32 -238 212 C-239.8093753 212.90468765 -241.61901609 213.80884673 -243.4296875 214.7109375 C-245.33480643 215.66639228 -247.23512845 216.63142477 -249.1328125 217.6015625 C-250.20273437 218.14554688 -251.27265625 218.68953125 -252.375 219.25 C-253.39335937 219.77078125 -254.41171875 220.2915625 -255.4609375 220.828125 C-258 222 -258 222 -260 222 C-260.33 222.66 -260.66 223.32 -261 224 C-262.0209375 224.4021875 -262.0209375 224.4021875 -263.0625 224.8125 C-265.64204918 225.85529648 -267.47467417 226.95132513 -269.75 228.5 C-273.89877188 231.16088215 -278.07409792 232.59193711 -283 233 C-283.99 232.67 -284.98 232.34 -286 232 C-285.42578125 230.1640625 -285.42578125 230.1640625 -284 228 C-280.91796875 226.5859375 -280.91796875 226.5859375 -277.1875 225.375 C-275.96417969 224.97023437 -274.74085938 224.56546875 -273.48046875 224.1484375 C-272.33191406 223.76945313 -271.18335938 223.39046875 -270 223 C-266.55666736 221.78357929 -265.23259892 221.25844324 -262.75 218.5 C-259.86290857 215.87537143 -258.9787562 215.61006503 -255.3125 215 C-252.99743275 214.64759083 -252.99743275 214.64759083 -251 214 C-249.51953703 211.63276087 -249.51953703 211.63276087 -249 209 C-247.31676481 206.83584047 -246.21569601 206.07946695 -243.625 205.125 C-240.78142111 204.09865065 -240.78142111 204.09865065 -238.4375 201.4375 C-236 199 -236 199 -234.05859375 198.5859375 C-231.28547522 197.79662483 -230.39665098 196.42909596 -228.625 194.1875 C-226.47071597 191.59309342 -224.55072495 189.4796408 -221.6875 187.6875 C-218.78446113 186.12051513 -218.78446113 186.12051513 -217 183 C-214.94140625 182.0859375 -214.94140625 182.0859375 -212.5625 181.375 C-211.78003906 181.13523438 -210.99757813 180.89546875 -210.19140625 180.6484375 C-209.46824219 180.43445313 -208.74507813 180.22046875 -208 180 C-204.922526 179.35359354 -204.922526 179.35359354 -204.0078125 177.171875 C-203.67523438 176.45515625 -203.34265625 175.7384375 -203 175 C-201.99564028 173.71983165 -200.95309739 172.46871878 -199.875 171.25 C-199.33617187 170.63640625 -198.79734375 170.0228125 -198.2421875 169.390625 C-197.83226562 168.93171875 -197.42234375 168.4728125 -197 168 C-197.96550781 168.65355469 -198.93101562 169.30710938 -199.92578125 169.98046875 C-204.34959898 172.50470605 -208.19597039 172.49767628 -213.1875 172.3125 C-213.98091797 172.30283203 -214.77433594 172.29316406 -215.59179688 172.28320312 C-219.23506387 172.21284616 -222.47516548 171.97997008 -226 171 C-224.52535076 167.29717196 -222.64171558 165.77814244 -219.375 163.5625 C-214.45372341 160.10343517 -209.77185417 156.44404299 -205.125 152.625 C-200.18022631 148.56981798 -195.20874523 144.56738031 -190.125 140.6875 C-183.46053667 135.59847441 -176.907925 130.3847985 -170.421875 125.0703125 C-162.17895683 118.32489039 -153.82865393 111.75566759 -145.34765625 105.3125 C-140.8944058 101.92758745 -136.47505313 98.50022568 -132.0625 95.0625 C-131.31991943 94.48411377 -130.57733887 93.90572754 -129.81225586 93.30981445 C-128.30403465 92.13465128 -126.79597867 90.95927603 -125.28808594 89.78369141 C-96.53928106 67.37238449 -96.53928106 67.37238449 -82.21557617 56.66699219 C-77.34486726 53.02220466 -72.51096312 49.33199339 -67.6875 45.625 C-59.35090108 39.22741236 -50.89960392 32.99209016 -42.42480469 26.77929688 C-39.16729646 24.38897066 -35.9153437 21.99115852 -32.66430664 19.59204102 C-31.06869057 18.41594176 -29.47154705 17.24191166 -27.87280273 16.07006836 C-24.11123551 13.31106192 -20.37379161 10.5297265 -16.68359375 7.67578125 C-16.0071582 7.15975342 -15.33072266 6.64372559 -14.63378906 6.11206055 C-13.37800793 5.15258201 -12.13052188 4.18210083 -10.89355469 3.19848633 C-6.70492469 0.02321509 -5.6879553 0 0 0 Z \",fill:\"#271B1B\",transform:\"translate(626,0)\"})),_path13||(_path13=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.99 0 1.98 0 3 C1.98 3 3.96 3 6 3 C6 3.33 6 3.66 6 4 C3.36 4.33 0.72 4.66 -2 5 C-1.505 6.98 -1.505 6.98 -1 9 C3.95 9 8.9 9 14 9 C14.33 6.69 14.66 4.38 15 2 C17.84428029 -1.03440598 21.81276783 -1.85609307 25.8359375 -2.34375 C31.4303058 -2.52372968 33.32005325 -2.50996006 38 1 C34.37 1.33 30.74 1.66 27 2 C27 3.32 27 4.64 27 6 C27.99 6.495 27.99 6.495 29 7 C29 7.33 29 7.66 29 8 C32.3 8 35.6 8 39 8 C39.33 7.34 39.66 6.68 40 6 C43.28519475 4.90493508 45.73663415 4.90039392 49.1875 4.9375 C50.81751953 4.95103516 50.81751953 4.95103516 52.48046875 4.96484375 C53.31191406 4.97644531 54.14335937 4.98804688 55 5 C55 5.33 55 5.66 55 6 C51.7 6 48.4 6 45 6 C45 7.32 45 8.64 45 10 C48.3 10.33 51.6 10.66 55 11 C55 12.65 55 14.3 55 16 C57.97 16.33 60.94 16.66 64 17 C64 17.99 64 18.98 64 20 C57.565 19.505 57.565 19.505 51 19 C51 18.34 51 17.68 51 17 C50.34 17 49.68 17 49 17 C48.690625 17.804375 48.38125 18.60875 48.0625 19.4375 C47 22 47 22 46 23 C44.00041636 23.04080783 41.99954746 23.04254356 40 23 C40.33 22.01 40.66 21.02 41 20 C41.99 19.505 41.99 19.505 43 19 C40.35409469 18.97265999 37.70848066 18.95299947 35.0625 18.9375 C34.32708984 18.92912109 33.59167969 18.92074219 32.83398438 18.91210938 C29.08045713 18.89571843 25.44356265 19.0229158 21.71875 19.5 C15.96448785 20.20558736 10.22642271 20.10786226 4.4375 20.0625 C3.33341797 20.05798828 2.22933594 20.05347656 1.09179688 20.04882812 C-1.605527 20.0371514 -4.30273347 20.02077525 -7 20 C-7 20.99 -7 21.98 -7 23 C-9.5 24.6875 -9.5 24.6875 -12 26 C-11.67 26 -11.34 26 -11 26 C-9.68 26 -8.36 26 -7 26 C-7 26.66 -7 27.32 -7 28 C-2.38 28 2.24 28 7 28 C7.33 28.66 7.66 29.32 8 30 C6.73542969 29.95359375 5.47085938 29.9071875 4.16796875 29.859375 C2.50783609 29.82185788 0.84767792 29.78545765 -0.8125 29.75 C-1.64587891 29.71648437 -2.47925781 29.68296875 -3.33789062 29.6484375 C-4.54155273 29.62910156 -4.54155273 29.62910156 -5.76953125 29.609375 C-6.50792236 29.58842773 -7.24631348 29.56748047 -8.00708008 29.54589844 C-10.60810787 29.91260255 -10.60810787 29.91260255 -13 34 C-6.73 33.67 -0.46 33.34 6 33 C4.69442995 38.22228021 3.6208069 41.92181004 -1 45 C-7.21000805 46.33051402 -13.68223977 46.10008333 -20 46 C-20 46.66 -20 47.32 -20 48 C-20.66 48 -21.32 48 -22 48 C-22 49.65 -22 51.3 -22 53 C-21.34 53.33 -20.68 53.66 -20 54 C-21.32 54 -22.64 54 -24 54 C-24 56.31 -24 58.62 -24 61 C-22.68 61 -21.36 61 -20 61 C-20 61.66 -20 62.32 -20 63 C-20.8353125 63.0928125 -20.8353125 63.0928125 -21.6875 63.1875 C-24.94987173 64.33373872 -26.68667874 66.49390197 -29 69 C-26.69 69.99 -24.38 70.98 -22 72 C-22 72.66 -22 73.32 -22 74 C-22.7425 74.28875 -23.485 74.5775 -24.25 74.875 C-26.56739797 75.82302644 -28.77917115 76.84845911 -31 78 C-30.67 78.99 -30.34 79.98 -30 81 C-30.99 81.495 -30.99 81.495 -32 82 C-32.65555119 84.52733235 -32.65555119 84.52733235 -33 87 C-31.515 87.495 -31.515 87.495 -30 88 C-31.33333333 90 -32.66666667 92 -34 94 C-34.45394552 96.27912938 -34.45394552 96.27912938 -34.625 98.6875 C-34.810625 100.8221875 -34.810625 100.8221875 -35 103 C-29.06 102.67 -23.12 102.34 -17 102 C-21.29 101.67 -25.58 101.34 -30 101 C-28.91799861 95.58999306 -28.21560824 94.41530291 -24.1640625 91.1640625 C-18.58155419 88.16119702 -11.92980916 90.01169847 -6 91 C-8.31 94.96 -10.62 98.92 -13 103 C-12.01 103 -11.02 103 -10 103 C-10 102.34 -10 101.68 -10 101 C-9.38592285 100.95512451 -8.7718457 100.91024902 -8.13916016 100.86401367 C-5.30011352 100.64995222 -2.46269109 100.41881372 0.375 100.1875 C1.34050781 100.11724609 2.30601563 100.04699219 3.30078125 99.97460938 C9.05557733 99.49182447 14.18612497 98.55030006 19.63525391 96.61450195 C22.4830822 95.87446646 25.07017337 95.90364149 28 96 C27.89933228 97.16293579 27.89933228 97.16293579 27.79663086 98.34936523 C27.01942917 107.79204864 26.69174044 117.21515807 26.48242188 126.68554688 C26.44826172 127.83216797 26.41410156 128.97878906 26.37890625 130.16015625 C26.34132202 131.70135132 26.34132202 131.70135132 26.30297852 133.27368164 C26.00143923 135.98704926 25.38837353 137.67493435 24 140 C20.65772998 129.97318993 23.23063969 116.45505704 24 106 C23.28972656 106.01160156 22.57945312 106.02320313 21.84765625 106.03515625 C20.92855469 106.04417969 20.00945312 106.05320312 19.0625 106.0625 C18.14597656 106.07410156 17.22945312 106.08570313 16.28515625 106.09765625 C14 106 14 106 13 105 C10.46950598 104.92686433 7.96695163 104.90752473 5.4375 104.9375 C4.37112305 104.94426758 4.37112305 104.94426758 3.28320312 104.95117188 C1.52209987 104.96299136 -0.23896036 104.98092737 -2 105 C-2 105.99 -2 106.98 -2 108 C-3.98 108 -5.96 108 -8 108 C-8 108.99 -8 109.98 -8 111 C-10.64 110.67 -13.28 110.34 -16 110 C-16 110.66 -16 111.32 -16 112 C-14.68 112 -13.36 112 -12 112 C-12 112.66 -12 113.32 -12 114 C-8.7 114.33 -5.4 114.66 -2 115 C-2 115.33 -2 115.66 -2 116 C-15.10138476 116.02330803 -28.20276447 116.04100827 -41.30416584 116.05181217 C-47.38955233 116.05700099 -53.47492449 116.06402474 -59.56030273 116.07543945 C-65.44773179 116.08641206 -71.33514718 116.09230686 -77.22258568 116.09487724 C-79.45370892 116.09670587 -81.68483154 116.1002758 -83.91594887 116.10573006 C-87.07329472 116.11313218 -90.23058614 116.11398306 -93.38793945 116.11352539 C-94.28275528 116.11712067 -95.17757111 116.12071594 -96.09950256 116.12442017 C-105.44620241 116.11002846 -114.6201464 115.49367651 -124 115 C-124 79.69 -124 44.38 -124 8 C-114.76 7.01 -105.52 6.02 -96 5 C-89.58740233 4.25737271 -83.17573718 3.51244263 -76.76553345 2.75033569 C-22.70778101 -3.65412568 -22.70778101 -3.65412568 0 0 Z \",fill:\"#060505\",transform:\"translate(124,300)\"})),_path14||(_path14=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C10.38328858 0.79138012 20.6384491 2.31265153 30.9375 3.8125 C32.80782725 4.08316199 34.67818888 4.35358657 36.54858398 4.6237793 C39.35890679 5.02977819 42.16919827 5.43597947 44.97932434 5.84333801 C50.6324317 6.66203021 56.28751176 7.46443862 61.9453125 8.25 C63.24863525 8.43199951 64.55195801 8.61399902 65.89477539 8.80151367 C68.29197135 9.13549032 70.6895818 9.46650875 73.08764648 9.79418945 C74.13251221 9.94073975 75.17737793 10.08729004 76.25390625 10.23828125 C77.60464233 10.4245105 77.60464233 10.4245105 78.98266602 10.61450195 C81 11 81 11 82 12 C82.22881538 13.99616505 82.39531688 15.99954193 82.53515625 18.00390625 C82.62216797 19.21884766 82.70917969 20.43378906 82.79882812 21.68554688 C82.88583984 22.96494141 82.97285156 24.24433594 83.0625 25.5625 C83.19881836 27.48739258 83.19881836 27.48739258 83.33789062 29.45117188 C83.56268946 32.63385015 83.78319818 35.81676858 84 39 C85.28322547 37.9404123 85.28322547 37.9404123 85.125 35.5 C85.28322547 33.0595877 85.28322547 33.0595877 84 32 C83.91330568 30.5112814 83.89296506 29.018555 83.90234375 27.52734375 C83.90717773 26.17866211 83.90717773 26.17866211 83.91210938 24.80273438 C83.92467773 23.38444336 83.92467773 23.38444336 83.9375 21.9375 C83.94201172 20.98810547 83.94652344 20.03871094 83.95117188 19.06054688 C83.9629989 16.70696935 83.97947975 14.35351523 84 12 C90.92326453 11.88544754 97.67445441 12.3253271 104.5625 13 C105.57119141 13.09539062 106.57988281 13.19078125 107.61914062 13.2890625 C110.07980981 13.52230129 112.5400466 13.75934891 115 14 C115.33 12.35 115.66 10.7 116 9 C116.66 9 117.32 9 118 9 C117.54554036 10.41791408 117.08625056 11.83428046 116.625 13.25 C116.36976563 14.03890625 116.11453125 14.8278125 115.8515625 15.640625 C114.39539893 19.67513325 113.66116945 21.55922036 110 24 C112.64 24.66 115.28 25.32 118 26 C118 26.99 118 27.98 118 29 C111.07 28.505 111.07 28.505 104 28 C103.34 29.65 102.68 31.3 102 33 C101.34 33 100.68 33 100 33 C100 33.66 100 34.32 100 35 C105.94 34.67 111.88 34.34 118 34 C120 38 120 38 120 42 C121.65 42 123.3 42 125 42 C125 42.66 125 43.32 125 44 C129.62 44.66 134.24 45.32 139 46 C139 45.34 139 44.68 139 44 C137.68 43.67 136.36 43.34 135 43 C135 42.01 135 41.02 135 40 C136.65 40 138.3 40 140 40 C140.33 38.35 140.66 36.7 141 35 C141.66 35 142.32 35 143 35 C143 36.32 143 37.64 143 39 C144.65 39 146.3 39 148 39 C147.68051404 35.5247752 147.22735873 32.27826986 146 29 C142.58991365 27.03816375 142.58991365 27.03816375 139 26 C137.5625 23.8125 137.5625 23.8125 137 22 C137.99 21.505 137.99 21.505 139 21 C138.401875 20.401875 137.80375 19.80375 137.1875 19.1875 C135.45833333 17.45833333 133.72916667 15.72916667 132 14 C133.65 14 135.3 14 137 14 C136.67 13.34 136.34 12.68 136 12 C135.960008 10.00039988 135.95653201 7.99952758 136 6 C138.12508244 9.18762365 138.5020163 11.26512223 139 15 C139.825 15.10957031 140.65 15.21914063 141.5 15.33203125 C147.69623146 16.18262999 153.80717471 17.13538726 159.9375 18.375 C173.15342585 20.99593037 186.63691457 22.34639275 200 24 C201.2698877 24.16951172 202.53977539 24.33902344 203.84814453 24.51367188 C208.36504719 25.07725183 212.88750965 25.37119997 217.4296875 25.6484375 C219.29948467 25.76814322 221.16927612 25.88793829 223.0390625 26.0078125 C225.90876218 26.18902641 228.77852758 26.36902143 231.6484375 26.546875 C250.13922033 27.69927506 268.5317022 29.37044431 287 31 C287 57.4 287 83.8 287 111 C282.04423274 110.17403879 279.13614533 109.34584284 274.75 107.25 C273.62722656 106.71632813 272.50445313 106.18265625 271.34765625 105.6328125 C266.88158828 103.45449697 262.42631067 101.25811786 258 99 C262.17587745 97.60804085 264.13474776 99.17676781 268 101 C268.02913821 97.4375173 268.04684529 93.87506546 268.0625 90.3125 C268.07087891 89.30509766 268.07925781 88.29769531 268.08789062 87.25976562 C268.09111328 86.28330078 268.09433594 85.30683594 268.09765625 84.30078125 C268.10289307 83.40528564 268.10812988 82.50979004 268.11352539 81.5871582 C267.99840198 78.96358241 267.58234285 76.55706947 267 74 C266.25314941 73.88406494 265.50629883 73.76812988 264.73681641 73.64868164 C261.3656636 73.12339923 257.99533308 72.59301539 254.625 72.0625 C253.449375 71.88009766 252.27375 71.69769531 251.0625 71.50976562 C249.94101562 71.33251953 248.81953125 71.15527344 247.6640625 70.97265625 C246.62717285 70.81031494 245.5902832 70.64797363 244.52197266 70.48071289 C242 70 242 70 240 69 C239 67.328125 239 67.328125 238 65.25 C237.649375 64.528125 237.29875 63.80625 236.9375 63.0625 C236 61 236 61 235 58.25 C233.72989549 55.39226485 232.54345131 53.83693706 230 52 C226.97919865 51.68291229 226.97919865 51.68291229 224 53 C218.41359336 58.58640664 216.87394819 63.38777195 216.24609375 71.01171875 C216 73 216 73 215 75 C214.01 75.33 213.02 75.66 212 76 C213.65 76.33 215.3 76.66 217 77 C217 77.66 217 78.32 217 79 C209.34167083 78.70544888 203.65738822 75.62827658 197 72 C197 71.01 197 70.02 197 69 C197.99 69 198.98 69 200 69 C200.28875 68.2575 200.5775 67.515 200.875 66.75 C202 64 202 64 203.0625 62.125 C204.42095003 59.30497063 204.42095003 59.30497063 205 53 C195.43 52.34 185.86 51.68 176 51 C176.99 53.31 177.98 55.62 179 58 C179.4021875 59.423125 179.4021875 59.423125 179.8125 60.875 C181.20269907 64.5334186 183.12302175 67.40959001 185.34765625 70.61328125 C186.47042944 72.23506474 187.56077847 73.87967899 188.62109375 75.54296875 C189.13800781 76.35378906 189.65492188 77.16460937 190.1875 78 C190.65542969 78.7425 191.12335938 79.485 191.60546875 80.25 C192.97464872 82.29424542 192.97464872 82.29424542 196 83 C199.55018723 83.19411716 203.09854058 83.31741081 206.65234375 83.42578125 C210.51788322 84.08883178 211.6496001 84.93065425 214 88 C216.03357795 92.22358498 217.58422861 96.53487486 219 101 C219.63526611 100.9285376 220.27053223 100.8570752 220.92504883 100.78344727 C228.53117117 100.0015988 236.0461508 99.88172373 243.6875 99.9375 C244.87794922 99.94201172 246.06839844 99.94652344 247.29492188 99.95117188 C250.19663683 99.96282535 253.09832546 99.98075529 256 100 C256 103.63 256 107.26 256 111 C248.50009325 112.20263656 241.0817215 112.11258251 233.5 112.0625 C232.200625 112.05798828 230.90125 112.05347656 229.5625 112.04882812 C226.37495175 112.0371092 223.18750045 112.02070219 220 112 C220 113.65 220 115.3 220 117 C220.83917969 116.68160156 221.67835938 116.36320312 222.54296875 116.03515625 C226.22648324 114.93218298 229.47859857 114.62777811 233.3125 114.4375 C237.47595878 114.59558811 237.47595878 114.59558811 241 113 C243.52596259 112.76346477 246.03107207 112.57826308 248.5625 112.4375 C249.27341797 112.39431641 249.98433594 112.35113281 250.71679688 112.30664062 C252.47761912 112.20028223 254.2387832 112.09961154 256 112 C256.33 113.32 256.66 114.64 257 116 C257.99 116 258.98 116 260 116 C260 116.66 260 117.32 260 118 C248.88747861 119.6909381 237.75086747 121.29109502 226.5 121.5625 C225.74291748 121.60117187 224.98583496 121.63984375 224.20581055 121.6796875 C218.84831005 121.70855918 216.14325111 120.09587606 212.23242188 116.48803711 C211 115 211 115 211 113 C210.236875 113.495 209.47375 113.99 208.6875 114.5 C203.85079339 117.19955718 197.31993312 116.07112747 192 115 C181.1742634 110.18471236 174.39321004 99.72460757 168.9375 89.6875 C167.90531292 87.83443206 166.8727629 85.98156623 165.83984375 84.12890625 C165.10870361 82.80463623 165.10870361 82.80463623 164.36279297 81.45361328 C162.10692941 77.39208897 159.74715265 73.39443411 157.390625 69.390625 C156.13820613 67.23759032 154.94134783 65.06210123 153.75 62.875 C152.15429327 59.79785222 152.15429327 59.79785222 149 58 C149.66 58 150.32 58 151 58 C149.75212954 54.88853954 148.335865 52.42194889 146 50 C142.0521908 48.44015945 138.07728333 48.01766535 133.875 47.5625 C132.79734375 47.41619141 131.7196875 47.26988281 130.609375 47.11914062 C123.75990235 46.21550538 116.88385861 45.57723933 110 45 C109.67 44.01 109.34 43.02 109 42 C111.64 42 114.28 42 117 42 C116.01 40.02 116.01 40.02 115 38 C112.77144426 37.9185778 110.54202345 37.86061921 108.3125 37.8125 C107.07113281 37.77769531 105.82976562 37.74289062 104.55078125 37.70703125 C100.81435679 38.0153171 98.99370517 38.81911727 96 41 C96.7763932 44.0745356 96.7763932 44.0745356 99 46 C99.125 49.625 99.125 49.625 99 53 C99.88042969 53.03738281 100.76085937 53.07476562 101.66796875 53.11328125 C102.82941406 53.17902344 103.99085938 53.24476563 105.1875 53.3125 C106.91033203 53.39951172 106.91033203 53.39951172 108.66796875 53.48828125 C112.23914124 54.03672626 114.16355615 54.78777355 117 57 C119.74059604 61.19334752 121.65326421 65.93720238 121 71 C121.66 71.33 122.32 71.66 123 72 C122.67 73.65 122.34 75.3 122 77 C121.67 76.01 121.34 75.02 121 74 C120.46375 74.02320313 119.9275 74.04640625 119.375 74.0703125 C111.13802201 74.25997976 103.13780076 73.13081102 95 72 C95 71.34 95 70.68 95 70 C93.515 69.505 93.515 69.505 92 69 C90.8671875 66.890625 90.8671875 66.890625 89.875 64.25 C89.54242188 63.38890625 89.20984375 62.5278125 88.8671875 61.640625 C88.03382723 59.10300543 87.46319234 56.62790754 87 54 C86.34 54 85.68 54 85 54 C85 53.34 85 52.68 85 52 C88.63 52 92.26 52 96 52 C94.09954692 49.7102606 94.09954692 49.7102606 90.9375 49.5 C89.968125 49.335 88.99875 49.17 88 49 C87.67 48.34 87.34 47.68 87 47 C79.89015737 44.75478654 73.33440595 44.16639851 66 46 C66 45.01 66 44.02 66 43 C67.65 42.67 69.3 42.34 71 42 C69.02 42 67.04 42 65 42 C64.67 44.31 64.34 46.62 64 49 C59.78057133 48.62769747 57.67284974 47.06804068 54.55859375 44.27734375 C52.25931691 42.39297401 49.69499434 41.21916411 47 40 C47 39.01 47 38.02 47 37 C45.02 36.505 45.02 36.505 43 36 C43 35.34 43 34.68 43 34 C42.34 34 41.68 34 41 34 C41 33.34 41 32.68 41 32 C44.96 32 48.92 32 53 32 C52.505 28.535 52.505 28.535 52 25 C51.505 27.475 51.505 27.475 51 30 C30.15617838 32.10692415 30.15617838 32.10692415 23.265625 27.12890625 C22.84796875 26.75636719 22.4303125 26.38382812 22 26 C22.495 27.485 22.495 27.485 23 29 C22.34 29 21.68 29 21 29 C21 29.99 21 30.98 21 32 C21.66 32 22.32 32 23 32 C23 32.66 23 33.32 23 34 C22.01 34 21.02 34 20 34 C20 34.66 20 35.32 20 36 C17.69 35.67 15.38 35.34 13 35 C12.67 27.41 12.34 19.82 12 12 C-1.2 12 -14.4 12 -28 12 C-28 10.68 -28 9.36 -28 8 C-23.70834738 7.97108051 -19.41671964 7.95322882 -15.125 7.9375 C-13.29001953 7.92493164 -13.29001953 7.92493164 -11.41796875 7.91210938 C-9.66806641 7.90727539 -9.66806641 7.90727539 -7.8828125 7.90234375 C-6.26463623 7.89448853 -6.26463623 7.89448853 -4.61376953 7.88647461 C-2 8 -2 8 0 9 C0 6.03 0 3.06 0 0 Z \",fill:\"#D19577\",transform:\"translate(339,276)\"})),_path15||(_path15=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.07851947 2.31581738 8.06364756 4.62942011 11.93359375 7.28515625 C13.2647522 8.19575806 13.2647522 8.19575806 14.62280273 9.12475586 C15.55165283 9.76421143 16.48050293 10.40366699 17.4375 11.0625 C18.41468994 11.73224854 19.39187988 12.40199707 20.39868164 13.09204102 C23.26739512 15.05903109 26.13373587 17.02944341 29 19 C30.39559311 19.95607991 31.79139797 20.91185088 33.1875 21.8671875 C41.91584838 27.84589281 50.59780942 33.8907215 59.27636719 39.94140625 C64.75367328 43.75612059 70.2488176 47.54199166 75.76928711 51.29394531 C82.66123696 55.97810547 89.45035664 60.72803434 96.078125 65.78125 C99.35623724 68.2705117 102.67445321 70.69975633 106 73.125 C111.95220382 77.47403366 117.85801202 81.88229294 123.75 86.3125 C132.66967224 93.01733986 141.63945369 99.65111641 150.63232422 106.25732422 C153.03045549 108.0224161 155.42402177 109.79353465 157.81640625 111.56640625 C168.11124165 119.18996873 178.48719544 126.67976551 189 134 C189.62874023 134.43844238 190.25748047 134.87688477 190.90527344 135.32861328 C197.60464131 139.99155542 204.34785602 144.57946431 211.1640625 149.0703125 C212.24099365 149.78155273 213.3179248 150.49279297 214.42749023 151.22558594 C216.56151786 152.63260902 218.69893295 154.03451099 220.84008789 155.43066406 C225.6870263 158.62679624 230.13905705 161.64277027 234 166 C229.545 166.99 229.545 166.99 225 168 C225 168.66 225 169.32 225 170 C225.72453369 170.27328125 226.44906738 170.5465625 227.19555664 170.828125 C229.90918108 171.96205007 232.33808469 173.26037744 234.87109375 174.75 C235.77537109 175.2759375 236.67964844 175.801875 237.61132812 176.34375 C239.49253584 177.44621312 241.37274881 178.55037543 243.25195312 179.65625 C247.7466712 182.26670548 251.93604641 184.64735797 257 186 C257 186.66 257 187.32 257 188 C261.29 188 265.58 188 270 188 C270 188.33 270 188.66 270 189 C265.71 189.33 261.42 189.66 257 190 C256.67 191.32 256.34 192.64 256 194 C249.84765625 193.4140625 249.84765625 193.4140625 248 193 C247.67 192.34 247.34 191.68 247 191 C244.93684183 190.06943757 244.93684183 190.06943757 242.375 189.25 C237.80084441 187.65642321 233.30214678 185.94371163 228.8125 184.125 C223.55114265 181.995419 218.26219156 179.96552475 212.9375 178 C203.11083014 174.35854827 193.54038649 170.15934433 183.9765625 165.87890625 C180.99769046 164.554309 177.99975948 163.2764934 175 162 C175 161.01 175 160.02 175 159 C174.10535034 158.87044922 174.10535034 158.87044922 173.19262695 158.73828125 C166.216991 157.558195 160.47974286 155.16846527 154.1875 152 C152.17862149 151.01254043 150.16950088 150.02557324 148.16015625 149.0390625 C147.1458252 148.53665039 146.13149414 148.03423828 145.08642578 147.51660156 C139.22118701 144.63455258 133.29969957 141.86990892 127.38745117 139.0859375 C126.56092041 138.6940625 125.73438965 138.3021875 124.8828125 137.8984375 C124.15465332 137.55474121 123.42649414 137.21104492 122.67626953 136.85693359 C121 136 121 136 120 135 C119.505 141.435 119.505 141.435 119 148 C117.68 147.67 116.36 147.34 115 147 C115 142.05 115 137.1 115 132 C113.02 131.34 111.04 130.68 109 130 C107.32836805 129.34588315 105.65984798 128.68346682 104 128 C104 127.34 104 126.68 104 126 C103.17242187 125.89816406 102.34484375 125.79632813 101.4921875 125.69140625 C97.4785573 124.89676134 93.87683452 123.51908783 90.125 121.9375 C89.38540039 121.63021973 88.64580078 121.32293945 87.88378906 121.00634766 C82.04196546 118.53728961 76.39890608 115.75027533 70.76049805 112.85253906 C65.62033999 110.23731475 60.3876046 108.0793252 54.96484375 106.10546875 C51.59873981 104.85038652 48.30200689 103.41514581 45 102 C45 107.61 45 113.22 45 119 C44.34 119 43.68 119 43 119 C43 113.06 43 107.12 43 101 C42.34 101 41.68 101 41 101 C41 106.61 41 112.22 41 118 C40.01 117.505 40.01 117.505 39 117 C39 111.06 39 105.12 39 99 C37.35 98.34 35.7 97.68 34 97 C30.41407721 95.54800929 26.83206338 94.08648186 23.25 92.625 C22.29867188 92.23828125 21.34734375 91.8515625 20.3671875 91.453125 C4.40649845 84.93766564 4.40649845 84.93766564 0 82 C-0.28640158 79.33769967 -0.37839379 76.90883447 -0.34057617 74.24560547 C-0.34101425 73.44552063 -0.34145233 72.64543579 -0.34190369 71.82110596 C-0.33980923 69.16955382 -0.31644771 66.51862953 -0.29296875 63.8671875 C-0.28737512 62.03158921 -0.28310392 60.19598645 -0.28010559 58.36038208 C-0.26863844 53.52365809 -0.23915527 48.68720337 -0.20599365 43.85058594 C-0.17533298 38.91735477 -0.16160883 33.98408019 -0.14648438 29.05078125 C-0.11428729 19.36706904 -0.06306845 9.68355689 0 0 Z \",fill:\"#3A2620\",transform:\"translate(0,56)\"})),_path16||(_path16=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.25605584 1.71324182 10.44674863 3.50519027 15.58203125 5.55859375 C17.35223633 6.26145508 17.35223633 6.26145508 19.15820312 6.97851562 C21.58294839 7.94659939 24.00743027 8.91534314 26.43164062 9.88476562 C33.05049988 12.51141146 39.67490052 14.9691672 46.45874023 17.13745117 C48.79824831 17.93152188 51.00887117 18.83934404 53.25 19.875 C57.74088389 21.94160144 62.33469088 23.66063748 66.96899414 25.37768555 C73.39535873 27.76255677 79.79245415 30.22000295 86.1875 32.6875 C113.16019116 43.35930777 113.16019116 43.35930777 140.56640625 52.8046875 C143.63339553 53.8723766 146.58341337 55.06254178 149.57421875 56.32421875 C156.06394477 59.05895584 162.63737845 61.51796853 169.25 63.9375 C171.48451194 64.75874208 173.7188854 65.58036105 175.953125 66.40234375 C177.09458984 66.82128906 178.23605469 67.24023438 179.41210938 67.671875 C181.87605711 68.58395146 184.33538197 69.50370271 186.79101562 70.4375 C196.0318623 73.94800899 205.33083547 77.23448104 214.70898438 80.35986328 C217.00094568 81.12531583 219.28951634 81.90037093 221.578125 82.67578125 C233.18111967 86.57294423 244.87619033 90.12424954 257 92 C257 92.66 257 93.32 257 94 C247.37014049 94.68784711 237.97454232 92.13649023 228.94140625 88.90625 C225.62083902 87.88318015 222.58903026 87.58708349 219.125 87.375 C217.97257813 87.30023438 216.82015625 87.22546875 215.6328125 87.1484375 C214.32957031 87.07496094 214.32957031 87.07496094 213 87 C213 87.99 213 88.98 213 90 C213.70672852 90.03665771 214.41345703 90.07331543 215.14160156 90.11108398 C223.24727424 90.64490759 230.86881294 92.14123777 238.75 94.0625 C239.9359375 94.34416016 241.121875 94.62582031 242.34375 94.91601562 C245.23111875 95.60292997 248.11634762 96.29767871 251 97 C250.34 97.99 249.68 98.98 249 100 C244.87484996 99.68946109 240.74991025 99.37620677 236.625 99.0625 C235.46871094 98.97548828 234.31242188 98.88847656 233.12109375 98.79882812 C226.40368511 98.2864834 219.69938434 97.71129502 213 97 C213.33 97.66 213.66 98.32 214 99 C214.06950541 100.54023996 214.08452357 102.08334988 214.0625 103.625 C214.05347656 104.44226563 214.04445312 105.25953125 214.03515625 106.1015625 C214.01775391 107.04128906 214.01775391 107.04128906 214 108 C213.34 108 212.68 108 212 108 C211.92652344 106.93458984 211.92652344 106.93458984 211.8515625 105.84765625 C211.73941406 104.46900391 211.73941406 104.46900391 211.625 103.0625 C211.55539063 102.14597656 211.48578125 101.22945313 211.4140625 100.28515625 C211.27742187 99.53105469 211.14078125 98.77695312 211 98 C210.34 97.67 209.68 97.34 209 97 C209.33 97.99 209.66 98.98 210 100 C209.01 99.67 208.02 99.34 207 99 C207 98.01 207 97.02 207 96 C203.87802522 97.3089572 203.87802522 97.3089572 202 100 C201.34 99.67 200.68 99.34 200 99 C199.375 96.4375 199.375 96.4375 199 94 C198.01 94.33 197.02 94.66 196 95 C196 94.34 196 93.68 196 93 C191.545 93.99 191.545 93.99 187 95 C186.67 94.34 186.34 93.68 186 93 C185.01 92.67 184.02 92.34 183 92 C183 91.01 183 90.02 183 89 C182.34 89 181.68 89 181 89 C180.67 90.32 180.34 91.64 180 93 C179.01 93 178.02 93 177 93 C176.67 92.34 176.34 91.68 176 91 C173.58354218 90.83312552 173.58354218 90.83312552 171 91 C170.34 91.66 169.68 92.32 169 93 C168.67 92.34 168.34 91.68 168 91 C167.67 91.66 167.34 92.32 167 93 C166.01 93 165.02 93 164 93 C163.67 92.34 163.34 91.68 163 91 C162.01 91.99 161.02 92.98 160 94 C159.67 92.68 159.34 91.36 159 90 C158.34 90 157.68 90 157 90 C157.309375 90.680625 157.61875 91.36125 157.9375 92.0625 C159.13370649 95.36965912 159.59005397 98.51545878 160 102 C158.68 102.33 157.36 102.66 156 103 C156.02320313 102.31292969 156.04640625 101.62585938 156.0703125 100.91796875 C156.08835938 100.01691406 156.10640625 99.11585938 156.125 98.1875 C156.14820313 97.29417969 156.17140625 96.40085937 156.1953125 95.48046875 C156.18285827 92.74597286 156.18285827 92.74597286 154 90 C152.99686093 94.76491057 153.16836673 98.35298149 153.87890625 103.125 C154 105 154 105 153 107 C154.98 107 156.96 107 159 107 C159.33 106.34 159.66 105.68 160 105 C160 105.66 160 106.32 160 107 C160.99 106.67 161.98 106.34 163 106 C165.1875 106.4375 165.1875 106.4375 167 107 C167 106.34 167 105.68 167 105 C167.66 105 168.32 105 169 105 C169.33 106.32 169.66 107.64 170 109 C166.7 109 163.4 109 160 109 C160 109.99 160 110.98 160 112 C163.63 112 167.26 112 171 112 C171 112.66 171 113.32 171 114 C168.11788698 114.96070434 166.30149956 115.10581883 163.3125 115.0625 C162.50425781 115.05347656 161.69601563 115.04445313 160.86328125 115.03515625 C160.24839844 115.02355469 159.63351563 115.01195312 159 115 C159.32164617 116.95965452 159.32164617 116.95965452 160 119 C161.66279327 120.0064275 163.32983484 121.00585407 165 122 C167.27272629 124.87878663 168.09662353 126.13038823 167.6875 129.8125 C167.3471875 130.8953125 167.3471875 130.8953125 167 132 C162.74433453 133.16063604 159.3164922 132.76173392 155 132 C155 132.66 155 133.32 155 134 C152.03 134.99 152.03 134.99 149 136 C149.33 132.7 149.66 129.4 150 126 C142.08 126.495 142.08 126.495 134 127 C134 121.39 134 115.78 134 110 C136.31 110 138.62 110 141 110 C141 114.95 141 119.9 141 125 C144.3 125 147.6 125 151 125 C151.66 123.02 152.32 121.04 153 119 C153.66 119 154.32 119 155 119 C155 117.68 155 116.36 155 115 C152.03 115 149.06 115 146 115 C146 114.01 146 113.02 146 112 C149.3 112 152.6 112 156 112 C156 111.01 156 110.02 156 109 C151.71 109 147.42 109 143 109 C143.33 108.01 143.66 107.02 144 106 C147.96 106.99 147.96 106.99 152 108 C151.67 106.68 151.34 105.36 151 104 C150.34 104 149.68 104 149 104 C148.67 104.66 148.34 105.32 148 106 C147.67 104.02 147.34 102.04 147 100 C146.34 100 145.68 100 145 100 C145 98.68 145 97.36 145 96 C146.32 96.66 147.64 97.32 149 98 C148.01 93.545 148.01 93.545 147 89 C144.41703983 88.80477627 141.83395921 88.61855597 139.25 88.4375 C138.52039063 88.38142578 137.79078125 88.32535156 137.0390625 88.26757812 C133.45046349 88.02290092 130.44972775 88.00333741 127 89 C127 89.99 127 90.98 127 92 C127.99 92.33 128.98 92.66 130 93 C130.99 98.445 130.99 98.445 132 104 C133.32 104.33 134.64 104.66 136 105 C136 105.66 136 106.32 136 107 C136.66 106.67 137.32 106.34 138 106 C137.67 103.69 137.34 101.38 137 99 C137.99 98.67 138.98 98.34 140 98 C140.99 102.95 140.99 102.95 142 108 C137.38 108 132.76 108 128 108 C128.33 106.35 128.66 104.7 129 103 C128.91635155 100.78184754 128.91635155 100.78184754 128.5625 98.6875 C128.376875 97.470625 128.19125 96.25375 128 95 C126.515 94.505 126.515 94.505 125 94 C124.67 94.66 124.34 95.32 124 96 C122.93453047 92.8035914 122.92572162 90.34252724 123 87 C122.34 86.67 121.68 86.34 121 86 C121 85.34 121 84.68 121 84 C120.34 84 119.68 84 119 84 C118.67 84.66 118.34 85.32 118 86 C118.33 86.99 118.66 87.98 119 89 C118.72230092 91.3406065 118.39460023 93.67624308 118 96 C116.02 95.505 116.02 95.505 114 95 C113.67 93.68 113.34 92.36 113 91 C113.99 91 114.98 91 116 91 C116.495 89.515 116.495 89.515 117 88 C116.01 88 115.02 88 114 88 C114 86.68 114 85.36 114 84 C112.205625 84.2784375 112.205625 84.2784375 110.375 84.5625 C106.71716293 85.0311197 103.62137834 84.81481013 100 84 C100 86.31 100 88.62 100 91 C99.01 91.495 99.01 91.495 98 92 C98 91.34 98 90.68 98 90 C97.34 90 96.68 90 96 90 C96.66 91.65 97.32 93.3 98 95 C101.13367555 91.22256121 101.13367555 91.22256121 101.75 86.625 C101.5025 86.08875 101.255 85.5525 101 85 C101.99 85.99 102.98 86.98 104 88 C104.66 87.67 105.32 87.34 106 87 C106.66 87.33 107.32 87.66 108 88 C106.68 93.61 105.36 99.22 104 105 C104.66 105 105.32 105 106 105 C106 104.01 106 103.02 106 102 C106.99 102 107.98 102 109 102 C109.66 103.98 110.32 105.96 111 108 C109.02 108 107.04 108 105 108 C105 107.34 105 106.68 105 106 C104.34 106 103.68 106 103 106 C103 106.99 103 107.98 103 109 C102.01 109 101.02 109 100 109 C99.505 104.545 99.505 104.545 99 100 C99.99 100 100.98 100 102 100 C102 99.34 102 98.68 102 98 C102 96.68 102 95.36 102 94 C101.505 95.485 101.505 95.485 101 97 C98.4375 98.6875 98.4375 98.6875 96 100 C95.67 98.68 95.34 97.36 95 96 C94.9071875 97.8253125 94.9071875 97.8253125 94.8125 99.6875 C94.77769531 100.37199219 94.74289063 101.05648437 94.70703125 101.76171875 C94.93255829 104.64099243 94.93255829 104.64099243 98 109 C83.48 109 68.96 109 54 109 C51.74496644 101.10738255 51.74496644 101.10738255 51.375 96.75 C51.30023438 95.91984375 51.22546875 95.0896875 51.1484375 94.234375 C51.03273321 92.492721 51 90.7454931 51 89 C50.84872598 87.43593472 50.68097478 85.87340748 50.5 84.3125 C50.4071875 83.50425781 50.314375 82.69601563 50.21875 81.86328125 C50.11046875 80.94095703 50.11046875 80.94095703 50 80 C52.97 80.99 52.97 80.99 56 82 C56.08944342 85.84606725 55.81149494 89.24683592 55 93 C55 93.99 55 94.98 55 96 C54.34 96 53.68 96 53 96 C53 96.66 53 97.32 53 98 C53.61875 97.649375 54.2375 97.29875 54.875 96.9375 C55.57625 96.628125 56.2775 96.31875 57 96 C57.99 96.495 57.99 96.495 59 97 C58.67 93.7 58.34 90.4 58 87 C59.32 87.33 60.64 87.66 62 88 C61.67 86.68 61.34 85.36 61 84 C60.01 84.33 59.02 84.66 58 85 C58 84.01 58 83.02 58 82 C58.99 82 59.98 82 61 82 C60.67 81.01 60.34 80.02 60 79 C58.33927151 78.31867549 56.672233 77.65257873 55 77 C54.34 76.01 53.68 75.02 53 74 C52.34 74 51.68 74 51 74 C51.33 74.99 51.66 75.98 52 77 C50.68 76.34 49.36 75.68 48 75 C47.01 75.66 46.02 76.32 45 77 C44.01 76.67 43.02 76.34 42 76 C41.505 77.485 41.505 77.485 41 79 C40.34 79 39.68 79 39 79 C39 78.34 39 77.68 39 77 C38.34 77 37.68 77 37 77 C36.67 76.01 36.34 75.02 36 74 C35.01 73.505 35.01 73.505 34 73 C34.30035156 73.54269531 34.60070313 74.08539063 34.91015625 74.64453125 C35.29042969 75.35996094 35.67070313 76.07539063 36.0625 76.8125 C36.44535156 77.52019531 36.82820313 78.22789062 37.22265625 78.95703125 C38.37616854 81.98862385 37.00086263 83.99741211 36 87 C37.37249963 89.67676547 37.37249963 89.67676547 39 92 C39.66 91.67 40.32 91.34 41 91 C41 92.32 41 93.64 41 95 C40.34 95 39.68 95 39 95 C39 95.99 39 96.98 39 98 C38.01 98 37.02 98 36 98 C35.71125 96.865625 35.4225 95.73125 35.125 94.5625 C34.75375 93.386875 34.3825 92.21125 34 91 C33.01 90.505 33.01 90.505 32 90 C32 89.01 32 88.02 32 87 C31.67 87 31.34 87 31 87 C31 85.02 31 83.04 31 81 C32.32 81 33.64 81 35 81 C35 80.34 35 79.68 35 79 C32.525 79.495 32.525 79.495 30 80 C29.505 79.01 29.505 79.01 29 78 C28.01 78 27.02 78 26 78 C26 77.34 26 76.68 26 76 C26.99 76 27.98 76 29 76 C29.33 75.34 29.66 74.68 30 74 C30.495 74.99 30.495 74.99 31 76 C31.66 75.01 32.32 74.02 33 73 C32.2575 73 31.515 73 30.75 73 C24 73 24 73 21.9296875 72.96484375 C17.83514981 72.80154265 17.83514981 72.80154265 14 74 C14 73.34 14 72.68 14 72 C11.525 72.99 11.525 72.99 9 74 C8.54625 73.525625 8.0925 73.05125 7.625 72.5625 C6.06741796 70.90972192 6.06741796 70.90972192 4 70 C3.505 70.99 3.505 70.99 3 72 C1.52128601 70.91716003 1.52128601 70.91716003 0 69 C-0.36076355 66.01972961 -0.36076355 66.01972961 -0.34057617 62.32543945 C-0.34123329 61.31528778 -0.34123329 61.31528778 -0.34190369 60.284729 C-0.33981501 58.06061731 -0.3164815 55.83726112 -0.29296875 53.61328125 C-0.28737305 52.07057609 -0.28310283 50.5278656 -0.28010559 48.9851532 C-0.26865471 44.92602809 -0.23918569 40.86722534 -0.20599365 36.80822754 C-0.17529787 32.66581585 -0.16160132 28.52335203 -0.14648438 24.38085938 C-0.114316 16.25375836 -0.06311698 8.12691929 0 0 Z M145 102 C147 103 147 103 147 103 Z \",fill:\"#261F1F\",transform:\"translate(0,160)\"})),_path17||(_path17=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.33333333 0 6.66666667 0 10 0 C10 0.66 10 1.32 10 2 C11.32 2.66 12.64 3.32 14 4 C14 4.66 14 5.32 14 6 C14.99 6.33 15.98 6.66 17 7 C18.38576923 8.62332967 19.72641268 10.28724465 21 12 C19 13 19 13 16 13 C14.39919849 17.00200378 15.70720308 20.04556236 17 24 C15.576875 23.690625 15.576875 23.690625 14.125 23.375 C12.578125 23.189375 12.578125 23.189375 11 23 C8.8334403 24.75509765 8.8334403 24.75509765 8.77294922 26.87939453 C8.78342285 27.62302246 8.79389648 28.36665039 8.8046875 29.1328125 C8.81113281 29.93847656 8.81757813 30.74414062 8.82421875 31.57421875 C8.84097656 32.41597656 8.85773438 33.25773437 8.875 34.125 C8.88853516 35.39923828 8.88853516 35.39923828 8.90234375 36.69921875 C8.92594353 38.79959884 8.96181517 40.89983444 9 43 C9.495 42.505 9.495 42.505 10 42 C12.66666667 42 15.33333333 42 18 42 C18.33 41.01 18.66 40.02 19 39 C21 38.375 21 38.375 23 38 C23.33 37.67 23.66 37.34 24 37 C23.34 36.67 22.68 36.34 22 36 C22 35.34 22 34.68 22 34 C24.01822917 34.32552083 26.03645833 34.65104167 28.0546875 34.9765625 C29.01761719 34.98816406 29.01761719 34.98816406 30 35 C30.66 34.34 31.32 33.68 32 33 C32 32.01 32 31.02 32 30 C32.495 30.99 32.495 30.99 33 32 C34.94603274 32.59070014 34.94603274 32.59070014 37 33 C37.99 33.495 37.99 33.495 39 34 C39 34.66 39 35.32 39 36 C39.66 36 40.32 36 41 36 C40.67 37.98 40.34 39.96 40 42 C43.48539917 41.35455571 46.02819057 39.89865603 49 38 C48.505 36.02 48.505 36.02 48 34 C49.98 33.01 51.96 32.02 54 31 C53.01 30.67 52.02 30.34 51 30 C51 29.34 51 28.68 51 28 C58.40774509 29.39304941 65.70170537 31.11899623 73 33 C72.67 32.01 72.34 31.02 72 30 C69.94259062 29.14717967 69.94259062 29.14717967 67.4140625 28.68359375 C66.48335938 28.47669922 65.55265625 28.26980469 64.59375 28.05664062 C63.6140625 27.85232422 62.634375 27.64800781 61.625 27.4375 C59.69933278 27.02503945 57.77478924 26.60728804 55.8515625 26.18359375 C54.56499756 25.91373657 54.56499756 25.91373657 53.25244141 25.63842773 C51 25 51 25 48 23 C48.33 22.34 48.66 21.68 49 21 C49.54527344 21.19335938 50.09054688 21.38671875 50.65234375 21.5859375 C60.20811984 24.89029014 60.20811984 24.89029014 70.1875 26 C73.47416895 26 75.91266568 26.92614459 79 28 C80.32 28 81.64 28 83 28 C83 28.66 83 29.32 83 30 C99.99486913 31.22643385 116.97272067 31.10250747 134 31 C134 30.67 134 30.34 134 30 C141.26 30 148.52 30 156 30 C156 29.34 156 28.68 156 28 C156.57363281 27.96261719 157.14726562 27.92523438 157.73828125 27.88671875 C167.24211631 27.1512171 176.60217378 25.54845012 186 24 C186 23.34 186 22.68 186 22 C186.66 22 187.32 22 188 22 C188 21.34 188 20.68 188 20 C191 20 194 20 197 20 C197 20.66 197 21.32 197 22 C198.32 22 199.64 22 201 22 C201 21.34 201 20.68 201 20 C201.99 20 202.98 20 204 20 C203.67 20.99 203.34 21.98 203 23 C202.84584611 26.32287269 202.74677585 29.64315247 202.671875 32.96875 C202.45015625 33.9690625 202.2284375 34.969375 202 36 C201.1757251 36.43868408 200.3514502 36.87736816 199.50219727 37.3293457 C196.7451445 38.76497697 196.7451445 38.76497697 196.34057617 41.63549805 C196.32486572 42.66715088 196.30915527 43.69880371 196.29296875 44.76171875 C196.26396484 45.87998047 196.23496094 46.99824219 196.20507812 48.15039062 C196.19637695 49.90125977 196.19637695 49.90125977 196.1875 51.6875 C196.16236328 52.86634766 196.13722656 54.04519531 196.11132812 55.25976562 C196.0523454 58.173512 196.01614629 61.08575228 196 64 C197.12019531 63.37480469 198.24039063 62.74960938 199.39453125 62.10546875 C200.02464111 61.75379639 200.65475098 61.40212402 201.30395508 61.03979492 C203.1046409 60.02656492 203.1046409 60.02656492 204.6875 58.3125 C206.34052058 56.65947942 207.76312956 56.52193644 210 56 C210.33 55.34 210.66 54.68 211 54 C211.99 53.01 211.99 53.01 213 52 C213.99 52 214.98 52 216 52 C216 51.34 216 50.68 216 50 C217.6796875 48.7109375 217.6796875 48.7109375 219.875 47.375 C220.59429687 46.92898437 221.31359375 46.48296875 222.0546875 46.0234375 C224 45 224 45 226 45 C226 44.34 226 43.68 226 43 C228.375 41.3125 228.375 41.3125 231 40 C231.66 40.33 232.32 40.66 233 41 C223.3180814 48.70034101 213.25656587 55.72632749 202.99194336 62.62475586 C200.94863691 63.99812616 200.94863691 63.99812616 198.93188477 65.67407227 C197 67 197 67 194 67 C192.30873182 68.64169653 190.64655288 70.31345941 189 72 C186.77218783 73.68183357 184.5691002 75.27074322 182.25 76.8125 C181.60893311 77.24046875 180.96786621 77.6684375 180.30737305 78.109375 C172.92522332 82.89645273 165.01970873 86.43179808 157 90 C155.66124716 90.65571568 154.32431736 91.31559826 153 92 C153.825 92.94875 154.65 93.8975 155.5 94.875 C158 97.75 158 97.75 158 100 C158.99 100 159.98 100 161 100 C161 100.66 161 101.32 161 102 C148.21237403 103.10458173 135.46626818 103.43292751 122.63574219 103.56982422 C119.9644452 103.6010627 117.29536098 103.65685629 114.625 103.73388672 C86.42304437 104.48681787 86.42304437 104.48681787 74 94 C72.02271421 92.51832 70.04385809 91.03872994 68.0625 89.5625 C65.66015625 87.62890625 65.66015625 87.62890625 64 86 C64 85.34 64 84.68 64 84 C62.68 84 61.36 84 60 84 C60 82.68 60 81.36 60 80 C59.43925781 79.75636719 58.87851563 79.51273437 58.30078125 79.26171875 C55.55270226 77.75470769 53.49962993 75.92800785 51.1875 73.8125 C49.87845703 72.61560547 49.87845703 72.61560547 48.54296875 71.39453125 C45.75031068 68.76488548 43.03552886 66.07535689 40.375 63.3125 C39.01378527 61.88435687 39.01378527 61.88435687 37 61 C37 60.34 37 59.68 37 59 C36.42765625 58.7525 35.8553125 58.505 35.265625 58.25 C32.64989389 56.80683801 30.85226544 55.11783778 28.75 53 C27.69039062 51.948125 27.69039062 51.948125 26.609375 50.875 C25 49 25 49 25 47 C28.40273032 48.45506508 30.42853861 50.30322768 32.9375 53 C37.1365818 57.32463574 41.6168133 60.9323211 46.48217773 64.4609375 C49.90835218 66.98730328 52.43707921 69.61511798 55 73 C57.12603185 74.76323505 57.12603185 74.76323505 59 76 C59.33 75.67 59.66 75.34 60 75 C53.66552548 67.37000348 46.5915987 60.4785982 39.5625 53.5 C38.3415631 52.28408886 37.12085808 51.06794484 35.90039062 49.8515625 C32.93625987 46.89835034 29.96901042 43.94830602 27 41 C24.04085422 41.97672317 21.08282789 42.95679379 18.125 43.9375 C16.86236328 44.35418945 16.86236328 44.35418945 15.57421875 44.77929688 C14.76855469 45.04677734 13.96289062 45.31425781 13.1328125 45.58984375 C12.01737061 45.95903931 12.01737061 45.95903931 10.87939453 46.33569336 C8.94577687 46.97562425 8.94577687 46.97562425 7 48 C4.6670134 48.04022391 2.33293334 48.04320247 0 48 C0 47.34 0 46.68 0 46 C-1.32 45.67 -2.64 45.34 -4 45 C-2.02 44.505 -2.02 44.505 0 44 C0 42.68 0 41.36 0 40 C0.66 40 1.32 40 2 40 C2 32.08 2 24.16 2 16 C-0.31 16 -2.62 16 -5 16 C-6 15 -6 15 -6.1328125 12.56640625 C-6.13023437 11.57511719 -6.12765625 10.58382812 -6.125 9.5625 C-6.12757813 8.57378906 -6.13015625 7.58507812 -6.1328125 6.56640625 C-6 4 -6 4 -5 2 C-3.35 2 -1.7 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#A2B89C\",transform:\"translate(182,136)\"})),_path18||(_path18=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.27571797 -0.2327647 14.55062093 -0.4099036 21.82932186 -0.51812172 C25.21023418 -0.57009305 28.58858172 -0.64043251 31.96801758 -0.75439453 C35.86346992 -0.87628426 39.75532676 -0.93253585 43.65234375 -0.9765625 C44.8526976 -1.02817535 46.05305145 -1.07978821 47.28977966 -1.13296509 C52.34919147 -1.13631574 55.66401692 -1.06648783 59.70666504 2.16067505 C61.98360776 4.67871769 64.00026724 7.25959905 66 10 C67.13998216 11.26980347 68.2949702 12.52663428 69.4765625 13.7578125 C69.99831055 14.31629883 70.52005859 14.87478516 71.05761719 15.45019531 C71.57485352 16.00288086 72.09208984 16.55556641 72.625 17.125 C76.59619634 21.38492729 80.52204435 25.66910089 84.328125 30.078125 C86.35758073 32.41105074 88.427647 34.70511245 90.5 37 C93.18983431 39.98062721 95.86310364 42.97245233 98.5 46 C104.39552169 52.76091937 110.43351461 59.39265486 116.5 66 C118.33389527 67.99948616 120.16702665 69.99966822 122 72 C123.17949219 73.28583984 123.17949219 73.28583984 124.3828125 74.59765625 C128.99636013 79.66934363 133.37336917 84.88071076 137.6796875 90.21484375 C140.05516452 93.06621599 142.53491821 95.78304282 145.0625 98.5 C158 112.57130282 158 112.57130282 158 117 C149.42 117.33 140.84 117.66 132 118 C132.33 120.31 132.66 122.62 133 125 C133.07330445 126.757888 133.10858409 128.51796194 133.09765625 130.27734375 C133.09443359 131.20224609 133.09121094 132.12714844 133.08789062 133.08007812 C133.07951172 134.02302734 133.07113281 134.96597656 133.0625 135.9375 C133.05798828 136.90751953 133.05347656 137.87753906 133.04882812 138.87695312 C133.0371315 141.2513676 133.02074086 143.62565021 133 146 C129.34430882 144.7048773 126.7589064 143.19382384 123.8125 140.6875 C116.81367166 134.93546892 109.41436408 129.74550593 102.05175781 124.47314453 C99.50264345 122.64290226 96.96918947 120.79174963 94.4375 118.9375 C89.17712588 115.10298533 83.85037009 111.36489807 78.5234375 107.6237793 C74.53760306 104.81697079 70.5901938 101.96986572 66.68432617 99.05297852 C57.76531191 92.4001792 48.50883879 86.2838296 39.234375 80.140625 C33.19032104 76.13516513 27.18055468 72.08130285 21.1875 68 C20.32374756 67.41379883 19.45999512 66.82759766 18.57006836 66.22363281 C16.88853195 65.07672458 15.22495762 63.90301816 13.58081055 62.703125 C11.01607287 60.89362538 11.01607287 60.89362538 7.94458008 59.734375 C4.12305269 57.86736925 2.37194826 56.57727584 0 53 C-1.89109533 44.20852367 -1.02578641 34.91845994 -0.6875 26 C-0.63229378 23.48317914 -0.58210883 20.96624279 -0.53710938 18.44921875 C-0.41618811 12.29695195 -0.23242774 6.14900989 0 0 Z \",fill:\"#180E0F\",transform:\"translate(0,0)\"})),_path19||(_path19=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.078125 1.3984375 1.078125 1.3984375 2.25 3.375 C2.68570313 4.09558594 3.12140625 4.81617188 3.5703125 5.55859375 C4.57497483 7.27420566 5.56883114 8.9961691 6.5546875 10.72265625 C7.33199219 12.06650391 7.33199219 12.06650391 8.125 13.4375 C8.60195313 14.28183594 9.07890625 15.12617187 9.5703125 15.99609375 C10.91688338 18.29930511 10.91688338 18.29930511 14 19 C15.0625 21.109375 15.0625 21.109375 16 23.75 C18.41220871 30.14918009 21.07810077 34.20430332 26 39 C28 42 28 42 28 46 C28.66 46 29.32 46 30 46 C30.50403768 47.29009643 31.00309926 48.58213789 31.5 49.875 C31.7784375 50.59429688 32.056875 51.31359375 32.34375 52.0546875 C33 54 33 54 33 56 C33.66 56 34.32 56 35 56 C35.495 57.98 35.495 57.98 36 60 C37.32 60 38.64 60 40 60 C40 61.32 40 62.64 40 64 C40.66 64 41.32 64 42 64 C42 65.32 42 66.64 42 68 C42.66 68 43.32 68 44 68 C46 71 46 71 46 74 C46.66 74 47.32 74 48 74 C48.66 75.98 49.32 77.96 50 80 C50.66 80 51.32 80 52 80 C52 81.32 52 82.64 52 84 C52.66 84 53.32 84 54 84 C54 85.32 54 86.64 54 88 C54.8971875 88.34611328 54.8971875 88.34611328 55.8125 88.69921875 C58.57784751 90.34361289 59.45389139 92.01017815 61 94.8125 C62.67243585 97.75836417 64.23665624 100.2927064 66.375 102.9375 C68 105 68 105 68 108 C30.05 108 -7.9 108 -47 108 C-52 90 -52 90 -53 83 C-53.66 82.67 -54.32 82.34 -55 82 C-55.76710202 79.53688335 -56.414256 77.1318026 -57 74.625 C-57.2638147 73.54158325 -57.2638147 73.54158325 -57.53295898 72.4362793 C-58.72913656 67.4343347 -59.69598903 62.42749398 -60.41015625 57.33203125 C-60.9061285 54.87437895 -60.9061285 54.87437895 -62.5234375 52.55078125 C-64.21944588 49.62090434 -64.42216592 47.733964 -64.5625 44.375 C-65.10964145 35.6529216 -66.30661563 27.97771024 -70 20 C-70.60795932 18.44691614 -71.19050215 16.8836926 -71.75 15.3125 C-72.01296875 14.58675781 -72.2759375 13.86101563 -72.546875 13.11328125 C-73.06305679 10.70591619 -72.66088728 9.33662135 -72 7 C-70.95658447 6.95681641 -69.91316895 6.91363281 -68.83813477 6.86914062 C-56.46184881 6.29996412 -44.23239255 4.99267066 -31.9375 3.5 C-30.02415081 3.27161313 -28.11073946 3.04374645 -26.19726562 2.81640625 C-22.6922281 2.39971909 -19.18764171 1.97954474 -15.68334961 1.55664062 C-12.4637865 1.17153365 -9.24352247 0.79374052 -6.02172852 0.42773438 C-5.29671646 0.34535522 -4.57170441 0.26297607 -3.82472229 0.17810059 C-2 0 -2 0 0 0 Z \",fill:\"#3F2822\",transform:\"translate(432,518)\"})),_path20||(_path20=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0 3.96 0 6 0 C6.12117188 0.71027344 6.24234375 1.42054688 6.3671875 2.15234375 C6.53476562 3.07144531 6.70234375 3.99054688 6.875 4.9375 C7.03742188 5.85402344 7.19984375 6.77054687 7.3671875 7.71484375 C7.57601563 8.46894531 7.78484375 9.22304688 8 10 C8.66 10.33 9.32 10.66 10 11 C10 11.99 10 12.98 10 14 C10.84304688 14.12117188 11.68609375 14.24234375 12.5546875 14.3671875 C13.65039062 14.53476562 14.74609375 14.70234375 15.875 14.875 C16.96554687 15.03742188 18.05609375 15.19984375 19.1796875 15.3671875 C22 16 22 16 24 18 C27.63925209 19.14569047 31.29869526 20.07467382 35 21 C35 17.37 35 13.74 35 10 C37.34852528 8.82573736 38.73774065 8.88491827 41.3515625 8.90234375 C42.62773437 8.90717773 42.62773437 8.90717773 43.9296875 8.91210938 C44.81914062 8.92048828 45.70859375 8.92886719 46.625 8.9375 C47.5221875 8.94201172 48.419375 8.94652344 49.34375 8.95117188 C51.56256648 8.96297409 53.78125018 8.97943845 56 9 C56 9.33 56 9.66 56 10 C46.1 10.495 46.1 10.495 36 11 C36 11.99 36 12.98 36 14 C36.804375 13.67 37.60875 13.34 38.4375 13 C45.72209082 10.95520258 51.307147 11.58237293 58 15 C58 15.66 58 16.32 58 17 C59.98 17.33 61.96 17.66 64 18 C64.33 17.34 64.66 16.68 65 16 C65.495 17.98 65.495 17.98 66 20 C62.37 20 58.74 20 55 20 C55 20.66 55 21.32 55 22 C55.66 22 56.32 22 57 22 C57.81674796 23.74802146 58.62823451 25.49850189 59.4375 27.25 C59.88996094 28.22453125 60.34242188 29.1990625 60.80859375 30.203125 C62 33 62 33 62.53515625 35.296875 C62.68855469 35.85890625 62.84195313 36.4209375 63 37 C63.66 37.33 64.32 37.66 65 38 C65 38.66 65 39.32 65 40 C73.58 40.66 82.16 41.32 91 42 C91 38.92841921 90.50755581 36.53227995 89.75 33.5625 C89.51796875 32.61503906 89.2859375 31.66757812 89.046875 30.69140625 C87.84157483 27.59270543 86.57137599 26.08540952 84 24 C79.04580308 22.45688948 74.13978691 21.64247336 69 21 C68.9175 19.88625 68.835 18.7725 68.75 17.625 C68.42126213 13.94246056 68.42126213 13.94246056 65.9375 12.5625 C65.298125 12.376875 64.65875 12.19125 64 12 C64.99 12 65.98 12 67 12 C67 11.34 67 10.68 67 10 C66.01 9.505 66.01 9.505 65 9 C70.13314424 4.16880542 75.12065622 4.59199004 81.953125 4.6640625 C85 5 85 5 87 7 C87 7.99 87 8.98 87 10 C84.36 10 81.72 10 79 10 C79.495 10.99 79.495 10.99 80 12 C82.47623996 12.41475483 84.87984485 12.70690182 87.375 12.9375 C88.91824399 13.10424283 90.46120533 13.27361787 92.00390625 13.4453125 C92.81617676 13.53458008 93.62844727 13.62384766 94.46533203 13.71582031 C98.75579694 14.19685491 103.03561577 14.7226564 107.3125 15.3125 C108.52075439 15.4525647 108.52075439 15.4525647 109.75341797 15.59545898 C113.76680219 16.17251625 115.51386654 16.51999105 118.48046875 19.44921875 C119.95181653 21.91911617 120.93486718 24.33716794 122 27 C122.598125 27.721875 123.19625 28.44375 123.8125 29.1875 C125.71146738 31.62902949 126.8892328 33.66747783 128.2109375 36.42578125 C131.16832769 42.42915832 134.45324371 48.21400229 137.8125 54 C138.39064453 55.01578125 138.96878906 56.0315625 139.56445312 57.078125 C145.11939241 66.65348995 151.40594513 77.44031879 162 82 C166.68225676 82.93645135 171.24338751 83 176 83 C176.66 82.34 177.32 81.68 178 81 C181 81 181 81 183.5625 83.375 C184.7690625 84.674375 184.7690625 84.674375 186 86 C188.62962635 88.62962635 190.53862278 88.25933875 194.12011719 88.27734375 C194.94672852 88.26832031 195.77333984 88.25929688 196.625 88.25 C197.47223633 88.24613281 198.31947266 88.24226563 199.19238281 88.23828125 C206.05148973 88.14597177 212.70704209 87.45835349 219.484375 86.4375 C223.02786989 85.99653175 226.43319059 85.92683468 230 86 C230 85.34 230 84.68 230 84 C229.01 84 228.02 84 227 84 C226.67 83.01 226.34 82.02 226 81 C221.05 81 216.1 81 211 81 C210.67 81.66 210.34 82.32 210 83 C203.73 83.33 197.46 83.66 191 84 C190.67 84.99 190.34 85.98 190 87 C189 85 189 85 189 79 C201.21 79 213.42 79 226 79 C226 75.37 226 71.74 226 68 C221.89567666 68.14215416 217.79158063 68.28862431 213.6875 68.4375 C212.53958984 68.47681641 211.39167969 68.51613281 210.20898438 68.55664062 C203.8000618 68.79266327 197.48476172 69.18869073 191.12036133 69.99633789 C190.07078247 69.99815063 190.07078247 69.99815063 189 70 C186.6849061 67.6849061 186.35239006 66.24734186 185.5 63.125 C184.60960156 59.8827883 183.71984626 56.90549784 182 54 C178.23843329 52.11921665 173.62993399 52.64271601 169.48046875 52.4765625 C164.95933787 51.85750754 162.30706318 50.59930581 159.41015625 47.0546875 C158.74306641 45.97574219 158.74306641 45.97574219 158.0625 44.875 C156.0573077 41.68116279 153.99308683 38.57657053 151.8125 35.5 C148.45220463 30.47278645 146 25.11716893 146 19 C155.89613084 18.78894508 165.2648233 18.89915262 175 21 C175.7013076 27.59229145 173.49602186 31.49376557 170 37 C169.01 37 168.02 37 167 37 C167 37.99 167 38.98 167 40 C167.804375 40.2475 168.60875 40.495 169.4375 40.75 C172.25312846 41.73793981 174.85975968 42.81960102 177.5625 44.0625 C180.69859538 45.48751631 183.55470799 46.55544619 187 47 C187 46.34 187 45.68 187 45 C184.36 44.67 181.72 44.34 179 44 C179 43.67 179 43.34 179 43 C180.98 43 182.96 43 185 43 C185.02578125 42.29875 185.0515625 41.5975 185.078125 40.875 C185.55634603 32.8756664 186.94473662 26.61872345 192.875 20.9375 C196 19 196 19 199.125 18.875 C203.33993997 20.52432434 205.05250557 22.86813753 206.875 26.96875 C208.16486161 30.29262414 209.13298765 33.53195059 210 37 C218.25 38.32 226.5 39.64 235 41 C235.33 39.35 235.66 37.7 236 36 C236.33 36 236.66 36 237 36 C238.8445374 43.18052061 239.1927684 50.18937768 239.1875 57.5625 C239.18814453 58.45549805 239.18878906 59.34849609 239.18945312 60.26855469 C239.13496741 66.73006518 239.13496741 66.73006518 238 69 C237.21625 68.835 236.4325 68.67 235.625 68.5 C233.11791961 67.9376293 233.11791961 67.9376293 231 68 C231.73863281 68.30292969 232.47726562 68.60585938 233.23828125 68.91796875 C239.45931544 71.48701082 245.61717756 74.15128944 251.72265625 76.984375 C254.08708343 78.08324485 254.08708343 78.08324485 257 79 C257 88.9 257 98.8 257 109 C252.936875 109.12375 248.87375 109.2475 244.6875 109.375 C236.55299406 109.63217561 228.43941422 109.93981898 220.3203125 110.51171875 C202.59580985 111.75104835 184.92039871 112.23607046 167.15048218 112.29855347 C164.63338981 112.30770013 162.1163093 112.32163303 159.59927368 112.34085083 C143.15375024 112.45202788 127.26454361 111.46670045 111 109 C110.67 105.04 110.34 101.08 110 97 C113.98523032 97.50237543 117.96857728 98.01761018 121.95068359 98.54418945 C123.302126 98.72112955 124.65401321 98.89470925 126.00634766 99.06469727 C127.96373536 99.31135994 129.91939507 99.5716115 131.875 99.83203125 C133.04804688 99.98389893 134.22109375 100.1357666 135.4296875 100.29223633 C138.23601817 100.84855147 140.23355849 101.46345605 142.80859375 102.5546875 C147.59838826 104.43858839 152.09514765 104.38064896 157.1875 104.29296875 C158.13061035 104.28872391 159.0737207 104.28447906 160.04541016 104.28010559 C163.03057518 104.2634357 166.01504218 104.22580575 169 104.1875 C171.03514644 104.17243804 173.07030355 104.15875229 175.10546875 104.14648438 C180.0705777 104.11357055 185.03517087 104.06186999 190 104 C190 103.67 190 103.34 190 103 C191.670625 102.814375 191.670625 102.814375 193.375 102.625 C197.03103677 102.3534187 197.03103677 102.3534187 199 100 C201.91473199 99.76479691 204.76838743 99.63074194 207.6875 99.5625 C219.17175492 99.13498156 229.88012642 96.83051327 241 94 C242.99601306 93.6435691 244.994845 93.30077325 247 93 C243.7 92.67 240.4 92.34 237 92 C238.32 91.67 239.64 91.34 241 91 C241 90.34 241 89.68 241 89 C234.45553244 87.69110649 228.54327778 87.65778917 222 89 C219.66698014 89.03824623 217.33288492 89.04574284 215 89 C215 89.66 215 90.32 215 91 C207.64424835 91.70776992 200.3905476 92.14715692 193 92 C192.67 93.32 192.34 94.64 192 96 C191.67 95.34 191.34 94.68 191 94 C190.67 94.66 190.34 95.32 190 96 C188.68 96 187.36 96 186 96 C182 90.88888889 182 90.88888889 182 88 C178.7 88 175.4 88 172 88 C172.99 92.95 172.99 92.95 174 98 C170.37 98 166.74 98 163 98 C163 98.66 163 99.32 163 100 C163.66 100.33 164.32 100.66 165 101 C157.66250018 100.32060187 150.21754971 99.14503314 144 95 C143.234375 93.125 143.234375 93.125 142.75 91 C142.57984375 90.29875 142.4096875 89.5975 142.234375 88.875 C142 87 142 87 143 85 C142.01 85 141.02 85 140 85 C139.01 82.03 138.02 79.06 137 76 C136.01604248 75.83395264 135.03208496 75.66790527 134.01831055 75.49682617 C130.36528476 74.87709601 126.71514918 74.24159714 123.06567383 73.60131836 C121.48633912 73.32650342 119.90625489 73.05596013 118.32543945 72.78979492 C116.05208726 72.40626048 113.78188137 72.00739872 111.51171875 71.60546875 C110.45219246 71.43183052 110.45219246 71.43183052 109.3712616 71.25468445 C105.30225074 70.51600649 104.04112648 70.04112648 101 67 C104.96 67 108.92 67 113 67 C113 66.34 113 65.68 113 65 C111.10388566 65.14213297 109.20811606 65.28886907 107.3125 65.4375 C106.25675781 65.51871094 105.20101562 65.59992188 104.11328125 65.68359375 C101.10928299 65.92920469 101.10928299 65.92920469 98.64208984 66.51586914 C95.89340937 67.01953144 93.40521091 67.09787509 90.61328125 67.0625 C89.59169922 67.05476563 88.57011719 67.04703125 87.51757812 67.0390625 C85.40038771 67.01325884 83.28320013 66.9872216 81.16601562 66.9609375 C74.70507646 66.91232855 68.41309377 67.20048254 62 68 C61.67 69.65 61.34 71.3 61 73 C60.67 72.01 60.34 71.02 60 70 C56.535 70.495 56.535 70.495 53 71 C52.98598145 69.96613159 52.98598145 69.96613159 52.97167969 68.91137695 C53.198511 48.57384224 53.198511 48.57384224 46 30 C45.01 29.67 44.02 29.34 43 29 C43.2475 28.071875 43.2475 28.071875 43.5 27.125 C44.07634644 25.03936614 44.07634644 25.03936614 44 23 C41.69 22.34 39.38 21.68 37 21 C36.34 23.31 35.68 25.62 35 28 C33.68 28 32.36 28 31 28 C30.67 27.01 30.34 26.02 30 25 C26.18152515 22.93165945 22.78437976 22.78259721 18.5 22.6875 C11.40172918 22.24536535 11.40172918 22.24536535 8.6875 19.625 C7 17 7 17 7 14 C6.01 14.495 6.01 14.495 5 15 C4.68758545 17.71446979 4.48663408 20.33909361 4.375 23.0625 C4.33632813 23.82111328 4.29765625 24.57972656 4.2578125 25.36132812 C4.16326438 27.24047195 4.08053244 29.12020336 4 31 C3.34 31 2.68 31 2 31 C0.90684754 26.4161086 0.67717375 21.87488993 0.4375 17.1875 C0.39431641 16.39923828 0.35113281 15.61097656 0.30664062 14.79882812 C0.20121679 12.86605785 0.10016906 10.93304974 0 9 C0.66 8.67 1.32 8.34 2 8 C2 5.69 2 3.38 2 1 C1.34 0.67 0.68 0.34 0 0 Z \",fill:\"#070E0C\",transform:\"translate(369,308)\"})),_path21||(_path21=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C9.60282295 -0.23469221 19.06985978 0.66235582 28.625 1.5 C30.31376891 1.64491835 32.00257081 1.78945277 33.69140625 1.93359375 C37.7946647 2.2846362 41.89744139 2.64087489 46 3 C46 3.33 46 3.66 46 4 C43.69 4 41.38 4 39 4 C39.0309375 5.4540625 39.0309375 5.4540625 39.0625 6.9375 C39 10 39 10 38 11 C37.45422039 13.35219147 36.9583942 15.69309372 36.5 18.0625 C36.29818115 19.08923828 36.29818115 19.08923828 36.09228516 20.13671875 C34.97147322 25.93792 34.24320566 31.68954626 33.625 37.5625 C32.9306313 41.38152784 31.53426636 44.44050204 30 48 C29.21830028 50.97903856 28.58280883 53.97625064 28 57 C31.70976426 53.86155467 32.6708001 51.4833001 33.5625 46.75 C34.4868797 42.24867277 35.57188633 38.15724254 37.31640625 33.91796875 C38.37398757 30.95069774 38.86414235 27.88755219 39.375 24.78515625 C39.58125 24.19605469 39.7875 23.60695313 40 23 C40.99 22.67 41.98 22.34 43 22 C43.25031013 29.50930393 43.25031013 29.50930393 42.11328125 31.73828125 C40.44269778 35.13220346 39.83393592 38.75890418 39.0625 42.4375 C38.71387335 44.04955093 38.36491224 45.66152957 38.015625 47.2734375 C37.84482422 48.06975586 37.67402344 48.86607422 37.49804688 49.68652344 C36.78837959 52.98299754 36.05634307 56.27354681 35.3125 59.5625 C35.08175781 60.59503906 34.85101563 61.62757813 34.61328125 62.69140625 C34 65 34 65 33 66 C32.76712992 67.68183948 32.58735834 69.3712416 32.4375 71.0625 C32.35371094 71.98160156 32.26992187 72.90070313 32.18359375 73.84765625 C32.12300781 74.55792969 32.06242188 75.26820313 32 76 C32.66 76 33.32 76 34 76 C34.99 74.02 34.99 74.02 36 72 C36.33 72 36.66 72 37 72 C36.63897037 79.71856455 35.73320897 86.87110636 33.69140625 94.328125 C33.09928721 96.61631384 32.70373452 98.78213624 32.4375 101.125 C32 104 32 104 30 106 C27.70802879 106.24609566 27.70802879 106.24609566 24.78622437 106.24050903 C23.68122086 106.24325836 22.57621735 106.24600769 21.43772888 106.24884033 C20.21997269 106.24164978 19.00221649 106.23445923 17.74755859 106.22705078 C15.8305439 106.22748886 15.8305439 106.22748886 13.87480164 106.22793579 C10.36464556 106.22851098 6.85462543 106.2167299 3.34450102 106.20278788 C-0.32170712 106.19030814 -3.98791818 106.1891122 -7.65414429 106.18673706 C-14.59917901 106.18051416 -21.54415098 106.16409243 -28.48915803 106.14403808 C-36.39472837 106.12170423 -44.30030165 106.11069199 -52.20589566 106.10064721 C-68.47063388 106.07972687 -84.73530894 106.04453522 -101 106 C-100.67 104.35 -100.34 102.7 -100 101 C-99.34 101 -98.68 101 -98 101 C-97.896875 100.443125 -97.79375 99.88625 -97.6875 99.3125 C-96.42880111 95.07869466 -94.15752307 92.0139993 -91 89 C-90.505 88.01 -90.505 88.01 -90 87 C-89.34 87 -88.68 87 -88 87 C-87.855625 86.2575 -87.71125 85.515 -87.5625 84.75 C-87.09812508 82.47972261 -86.58136431 80.24240521 -86 78 C-85.34 78 -84.68 78 -84 78 C-83.34 76.35 -82.68 74.7 -82 73 C-81.01 73 -80.02 73 -79 73 C-78.87625 72.1028125 -78.87625 72.1028125 -78.75 71.1875 C-77.79544128 68.4033704 -76.42867729 67.56688858 -74 66 C-76.0338874 72.61013404 -78.87826876 78.84015532 -82 85 C-79.0041861 82.35663479 -77.21796579 79.22864855 -75.1875 75.8125 C-66.79165001 61.895825 -66.79165001 61.895825 -63 60 C-63.65412111 65.06943863 -65.83341822 69.4297388 -68 74 C-68.33128906 74.73089844 -68.66257813 75.46179688 -69.00390625 76.21484375 C-70 78 -70 78 -72 79 C-72.78015621 80.82510997 -73.47795406 82.68606676 -74.125 84.5625 C-74.65480469 86.08037109 -74.65480469 86.08037109 -75.1953125 87.62890625 C-75.46085937 88.41136719 -75.72640625 89.19382812 -76 90 C-75.01 90 -74.02 90 -73 90 C-72.62875 88.700625 -72.62875 88.700625 -72.25 87.375 C-70.92701765 83.80294764 -69.13669124 81.13826526 -67 78 C-66.32033324 76.33859237 -65.65061095 74.67299959 -65 73 C-64.34 72.34 -63.68 71.68 -63 71 C-62.71125 70.2575 -62.4225 69.515 -62.125 68.75 C-61 66 -61 66 -59.0625 63.125 C-56.87280634 59.80728234 -55.47148951 56.67872378 -54 53 C-53.34 53 -52.68 53 -52 53 C-51.7525 51.989375 -51.505 50.97875 -51.25 49.9375 C-50.0926612 45.85374737 -48.19032454 42.62772502 -46 39 C-45.3197633 37.67353844 -44.64507739 36.34391123 -44 35 C-43.34 35 -42.68 35 -42 35 C-41.731875 34.21625 -41.46375 33.4325 -41.1875 32.625 C-40 30 -40 30 -37 28 C-38.87618094 35.16914669 -41.53036751 41.46641513 -45 48 C-45.7553818 49.45555297 -46.50581478 50.91369084 -47.25 52.375 C-47.72179687 53.28378906 -47.72179687 53.28378906 -48.203125 54.2109375 C-49.05141093 56.11542258 -49.55225696 57.9672466 -50 60 C-47.1656072 58.5828036 -46.74571277 56.78230331 -45.375 53.9375 C-44.58996094 52.32681641 -44.58996094 52.32681641 -43.7890625 50.68359375 C-43.50450195 50.09562012 -43.21994141 49.50764648 -42.92675781 48.90185547 C-41.23015706 45.42015897 -39.48635058 41.96199273 -37.75 38.5 C-37.07793453 37.15634525 -36.40604959 35.81260019 -35.734375 34.46875 C-33.8671875 30.734375 -33.8671875 30.734375 -32 27 C-31.34 27 -30.68 27 -30 27 C-30 26.01 -30 25.02 -30 24 C-29.34 24 -28.68 24 -28 24 C-27.87238281 23.43667969 -27.74476563 22.87335937 -27.61328125 22.29296875 C-26.96550574 19.871031 -26.14816231 17.62804062 -25.1875 15.3125 C-24.87167969 14.52488281 -24.55585938 13.73726562 -24.23046875 12.92578125 C-23 11 -23 11 -20.86328125 10.23046875 C-19.94095703 10.11638672 -19.94095703 10.11638672 -19 10 C-20.00836873 13.44525982 -21.13567072 16.22470463 -23 19.3125 C-25.3990881 23.30501229 -26.2158928 27.45011483 -27 32 C-25.02 31.01 -23.04 30.02 -21 29 C-22.54255903 33.83802606 -24.18629188 38.63145568 -26 43.375 C-26.4640625 44.59316406 -26.4640625 44.59316406 -26.9375 45.8359375 C-28.03116936 48.06348465 -29.24013504 49.28861617 -31 51 C-31.72197162 53.60611077 -31.72197162 53.60611077 -32 56 C-32.66 56 -33.32 56 -34 56 C-34.11214844 56.7321875 -34.22429687 57.464375 -34.33984375 58.21875 C-35.20718904 61.87289109 -36.9751825 64.55496788 -38.94140625 67.71875 C-40.1520076 70.32757358 -40.19519011 72.15723126 -40 75 C-39.34 75 -38.68 75 -38 75 C-37.79375 74.030625 -37.5875 73.06125 -37.375 72.0625 C-36.46962626 68.85195482 -35.11423815 66.5267738 -33.1875 63.8125 C-30.85409762 60.4750615 -29.17998258 57.28821098 -27.6875 53.5 C-25.59933399 48.22890134 -23.15433131 43.25178457 -20.5 38.25 C-19.94832153 37.20489258 -19.94832153 37.20489258 -19.38549805 36.13867188 C-17.11880182 31.90897563 -14.68395409 27.85160206 -12.03320312 23.85058594 C-10.94989523 21.91025658 -10.4390018 20.16982038 -10 18 C-9.34 18 -8.68 18 -8 18 C-7.71125 17.2575 -7.4225 16.515 -7.125 15.75 C-6.17697356 13.43260203 -5.15154089 11.22082885 -4 9 C-3.34 9 -2.68 9 -2 9 C-1.34 6.03 -0.68 3.06 0 0 Z \",fill:\"#2B1C1A\",transform:\"translate(177,520)\"})),_path22||(_path22=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C13.16353018 5.26541207 26.31146179 10.6557309 39 17 C39.495 25.91 39.495 25.91 40 35 C40.33 29.72 40.66 24.44 41 19 C41.66 19 42.32 19 43 19 C43 24.94 43 30.88 43 37 C43.66 37 44.32 37 45 37 C45 31.39 45 25.78 45 20 C49.05536243 20.81107249 51.72935622 21.65141483 55.375 23.375 C58.46285302 24.81765155 61.540718 26.25314933 64.6875 27.5625 C67.79839803 28.91251235 70.80213835 30.38041639 73.8125 31.9375 C76.82829276 33.40231362 79.91039827 34.7008144 83 36 C83.69013184 36.29036133 84.38026367 36.58072266 85.09130859 36.87988281 C87.28794184 37.80004729 89.48735653 38.71326364 91.6875 39.625 C92.43322266 39.93695313 93.17894531 40.24890625 93.94726562 40.5703125 C94.66978516 40.869375 95.39230469 41.1684375 96.13671875 41.4765625 C96.78342529 41.74549316 97.43013184 42.01442383 98.09643555 42.29150391 C100.04340359 43.01615457 101.97690111 43.53431932 104 44 C104 44.66 104 45.32 104 46 C104.70125 46.103125 105.4025 46.20625 106.125 46.3125 C109 47 109 47 115 50 C115 54.95 115 59.9 115 65 C115.99 65 116.98 65 118 65 C118.33 60.71 118.66 56.42 119 52 C119.92296875 52.47308594 120.8459375 52.94617188 121.796875 53.43359375 C130.41888835 57.81639445 139.13204332 61.91800193 147.97314453 65.84008789 C152.25487479 67.74451293 156.47152388 69.7003026 160.625 71.875 C165.22878373 74.25088124 169.99983702 75.69144671 175 77 C175 77.99 175 78.98 175 80 C176.2375 80.391875 177.475 80.78375 178.75 81.1875 C185.8585793 83.56439666 192.71864276 86.52356973 199.55078125 89.59765625 C208.27335085 93.52003757 217.09744941 96.95736178 226.11083984 100.15942383 C232.13513451 102.29990997 238.0780034 104.59163765 244 107 C244.87962402 107.32766357 245.75924805 107.65532715 246.66552734 107.99291992 C249 109 249 109 251 111 C253.57061311 111.64767793 253.57061311 111.64767793 256 112 C256 110.68 256 109.36 256 108 C262.27 108 268.54 108 275 108 C275.33 108.99 275.66 109.98 276 111 C278.64 111 281.28 111 284 111 C284 110.01 284 109.02 284 108 C303.8 108 323.6 108 344 108 C344 108.99 344 109.98 344 111 C343.01 111 342.02 111 341 111 C339.66018514 111.3062434 338.32488113 111.63451555 337 112 C337 111.34 337 110.68 337 110 C336.34 110.33 335.68 110.66 335 111 C335 112.32 335 113.64 335 115 C335.66 115.33 336.32 115.66 337 116 C334.65509272 118.34490728 329.00620598 118.4292014 326 119 C326 123.29 326 127.58 326 132 C320.91913204 132.84681133 316.15171623 133.09038099 311 133 C311 133.66 311 134.32 311 135 C310.34 135 309.68 135 309 135 C309 134.34 309 133.68 309 133 C308.34 133 307.68 133 307 133 C307 133.99 307 134.98 307 136 C306.34 136 305.68 136 305 136 C305 135.01 305 134.02 305 133 C303.68 133 302.36 133 301 133 C300.67 133.66 300.34 134.32 300 135 C298.02 134.34 296.04 133.68 294 133 C293.67 133.66 293.34 134.32 293 135 C293 134.34 293 133.68 293 133 C291.68 133 290.36 133 289 133 C289 133.99 289 134.98 289 136 C304.84 136.33 320.68 136.66 337 137 C337 137.66 337 138.32 337 139 C319.51 139 302.02 139 284 139 C284 141.31 284 143.62 284 146 C291.92 146 299.84 146 308 146 C308 147.32 308 148.64 308 150 C296.12 150 284.24 150 272 150 C272 150.66 272 151.32 272 152 C283.55 152 295.1 152 307 152 C307 152.66 307 153.32 307 154 C304.03 154 301.06 154 298 154 C298 155.32 298 156.64 298 158 C296.35 158 294.7 158 293 158 C292.67 157.01 292.34 156.02 292 155 C291.34 154.67 290.68 154.34 290 154 C289.67 154.66 289.34 155.32 289 156 C289 155.34 289 154.68 289 154 C283.39 154 277.78 154 272 154 C271.67 154.99 271.34 155.98 271 157 C270.7525 156.0925 270.505 155.185 270.25 154.25 C268.96018658 150.89648511 267.68028958 149.32291764 265 147 C267.31 147 269.62 147 272 147 C272 146.34 272 145.68 272 145 C271.36191406 145.01160156 270.72382813 145.02320313 270.06640625 145.03515625 C269.24011719 145.04417969 268.41382813 145.05320312 267.5625 145.0625 C266.73878906 145.07410156 265.91507812 145.08570313 265.06640625 145.09765625 C263 145 263 145 262 144 C260.88625 144 259.7725 144 258.625 144 C255 144 255 144 252 143 C251.319375 143.45375 250.63875 143.9075 249.9375 144.375 C245.7730294 146.67874969 241.69085289 146.73585489 237 147 C237.99 146.34 238.98 145.68 240 145 C233.02431316 145.39741544 226.14509919 145.90372886 219.25 147.0625 C213.74379417 147.9745709 208.57482084 148.16641256 203 148 C203 145.03 203 142.06 203 139 C202.34 139 201.68 139 201 139 C201 139.66 201 140.32 201 141 C197.04 141 193.08 141 189 141 C189 140.34 189 139.68 189 139 C182.4 139 175.8 139 169 139 C169 141.31 169 143.62 169 146 C168.34 146.99 167.68 147.98 167 149 C166.4225 148.05125 165.845 147.1025 165.25 146.125 C163.17183449 143.23865902 162.24531925 142.15904259 159 141 C159 139.68 159 138.36 159 137 C162.96 136.67 166.92 136.34 171 136 C171 135.34 171 134.68 171 134 C167.37 134 163.74 134 160 134 C160 133.01 160 132.02 160 131 C163.3 131 166.6 131 170 131 C169.67 129.68 169.34 128.36 169 127 C168.34 127 167.68 127 167 127 C167 127.66 167 128.32 167 129 C162.38 129 157.76 129 153 129 C152.77213542 126.4609375 152.54427083 123.921875 152.31640625 121.3828125 C152.13010715 118.98889139 152.13010715 118.98889139 151 117 C151.66 116.67 152.32 116.34 153 116 C153 114.35 153 112.7 153 111 C155 112.4375 155 112.4375 157 115 C157.35442445 118.02824418 157.23347235 120.96485939 157 124 C157.66 123.67 158.32 123.34 159 123 C158.01 117.555 158.01 117.555 157 112 C157.66 112 158.32 112 159 112 C159.66 112.66 160.32 113.32 161 114 C161.66 113.34 162.32 112.68 163 112 C163.33 112.99 163.66 113.98 164 115 C164.99 115 165.98 115 167 115 C167.33 114.01 167.66 113.02 168 112 C170.66666667 112 173.33333333 112 176 112 C176.33 112.99 176.66 113.98 177 115 C177.99 115 178.98 115 180 115 C180.33 113.68 180.66 112.36 181 111 C181.66 111 182.32 111 183 111 C183 111.99 183 112.98 183 114 C184.32 114.33 185.64 114.66 187 115 C187 115.66 187 116.32 187 117 C187.556875 116.67 188.11375 116.34 188.6875 116 C192.43515604 114.37939198 195.17994156 114.72664719 199 116 C199.33 117.65 199.66 119.3 200 121 C202.22739701 119.93798263 202.22739701 119.93798263 205 118 C205.66 118 206.32 118 207 118 C207.99 119.485 207.99 119.485 209 121 C209 120.34 209 119.68 209 119 C209.99 119.33 210.98 119.66 212 120 C212 123.3 212 126.6 212 130 C212.66 130 213.32 130 214 130 C213.67 126.37 213.34 122.74 213 119 C217.61713028 118.07657394 218.77259405 118.05920102 223 119 C225.56515781 119.19837955 228.11924397 119.36698639 230.6875 119.5 C236.24313165 119.80903479 241.75242019 120.23151769 247.27734375 120.9140625 C247.84582031 120.94242187 248.41429687 120.97078125 249 121 C249.33 120.67 249.66 120.34 250 120 C237.81625999 116.43217582 225.50527566 114.13191215 213 112 C213 111.01 213 110.02 213 109 C221.37302926 108.35481795 228.05922506 109.3584679 235.87890625 112.06982422 C242.82500441 114.42269741 249.7122811 115.29845235 257 116 C257 115.34 257 114.68 257 114 C256.31429932 113.98146973 255.62859863 113.96293945 254.92211914 113.94384766 C245.96597319 113.47383718 237.89747962 111.14259461 229.4375 108.375 C228.00823686 107.91691778 226.57879154 107.45940363 225.14916992 107.00244141 C214.65335426 103.62676076 204.28020836 99.98302445 194 96 C190.52205189 94.66347811 187.04244747 93.33130624 183.5625 92 C182.69085205 91.66556885 181.8192041 91.3311377 180.92114258 90.98657227 C174.0541899 88.36559311 167.14072695 85.89873856 160.18579102 83.52148438 C154.55063598 81.58536171 148.99683223 79.47096389 143.44091797 77.31860352 C137.59150451 75.0770339 131.69945862 72.95303561 125.8125 70.8125 C112.82431345 66.07511496 99.91034 61.16093057 87.01904297 56.16552734 C81.36236226 53.9817174 75.69216934 51.83326423 70.02124023 49.68676758 C65.09216926 47.81578647 60.19231275 45.88123156 55.30029297 43.91552734 C52.32127683 42.72986501 49.32026156 41.61055811 46.3125 40.5 C38.51638921 37.59562514 30.74835424 34.61787066 22.98568726 31.62548828 C21.5871935 31.08682059 20.18829235 30.54920932 18.78897095 30.01269531 C16.79305394 29.24710391 14.79870768 28.4775474 12.8046875 27.70703125 C11.63921387 27.2581958 10.47374023 26.80936035 9.27294922 26.34692383 C6.11606896 25.04776611 3.05335275 23.52667638 0 22 C0 14.74 0 7.48 0 0 Z \",fill:\"#C88060\",transform:\"translate(0,138)\"})),_path23||(_path23=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 21.12 0 42.24 0 64 C-2.41536797 65.20768399 -4.48117312 65.44836319 -7.15893555 65.83642578 C-8.23230667 65.99368134 -9.3056778 66.15093689 -10.41157532 66.31295776 C-11.57899765 66.48038483 -12.74641998 66.64781189 -13.94921875 66.8203125 C-15.15970383 66.99668243 -16.3701889 67.17305237 -17.61735535 67.35476685 C-21.4110762 67.90665057 -25.20547201 68.45369627 -29 69 C-31.25474721 69.3263098 -33.50946835 69.65279982 -35.76416016 69.97949219 C-40.17560238 70.6180254 -44.58724518 71.25515033 -48.99902344 71.89135742 C-67.43329312 74.55135945 -85.85942089 77.23910077 -104.25 80.1875 C-127.19313426 83.85972216 -150.17607517 87.21684801 -173.23275757 90.09881592 C-174.6887865 90.28121002 -176.14454483 90.46577904 -177.6000061 90.65264893 C-179.60607776 90.9088575 -181.61356448 91.15391232 -183.62109375 91.3984375 C-185.32930298 91.60992432 -185.32930298 91.60992432 -187.07202148 91.82568359 C-189.76522319 91.98602263 -191.46455712 91.79108246 -194 91 C-196.33094534 90.6503582 -198.66404762 90.31445513 -201 90 C-200.505 89.01 -200.505 89.01 -200 88 C-203.96 88 -207.92 88 -212 88 C-209.15297807 85.15297807 -205.8130018 84.83973189 -202 84 C-201.23341064 83.82484863 -200.46682129 83.64969727 -199.67700195 83.46923828 C-194.79863158 82.36456562 -189.90946374 81.34712822 -184.98046875 80.4921875 C-182.7862273 79.94687306 -180.98122096 79.07742803 -179 78 C-179.99 76.68 -180.98 75.36 -182 74 C-178.78548731 72.39274365 -175.56387464 72.94251815 -172 73 C-172 72.34 -172 71.68 -172 71 C-167.2234188 70.45186773 -162.50071521 69.92637529 -157.6875 70 C-154.53468781 70 -152.05316292 69.62628983 -149 69 C-146.66698014 68.96175377 -144.33288492 68.95425716 -142 69 C-142 68.34 -142 67.68 -142 67 C-142.75023437 67.144375 -143.50046875 67.28875 -144.2734375 67.4375 C-150.93486552 68.64561793 -157.23371881 69.26945368 -164 69 C-160.96617736 66.97745157 -158.86252939 66.30243374 -155.36328125 65.4140625 C-154.23712402 65.1253125 -153.1109668 64.8365625 -151.95068359 64.5390625 C-150.75008301 64.23742187 -149.54948242 63.93578125 -148.3125 63.625 C-147.08096191 63.31046875 -145.84942383 62.9959375 -144.58056641 62.671875 C-138.35257353 61.08474927 -132.11670089 59.53211441 -125.875 58 C-112.24471027 54.6103057 -98.74006782 50.70736495 -85.2734375 46.72265625 C-82.62011477 45.93900503 -79.9664622 45.15648279 -77.3125 44.375 C-76.32923737 44.08524796 -76.32923737 44.08524796 -75.32611084 43.78964233 C-65.93961231 41.03350599 -56.53045872 38.5684419 -46.94848633 36.58349609 C-41.71971984 35.48583634 -36.98404365 33.9243206 -32 32 C-29.65928705 31.52704101 -27.37906367 31.24781913 -25 31 C-25 30.34 -25 29.68 -25 29 C-33.84793522 30.97086709 -42.56091763 32.96045492 -51.09375 36.0703125 C-54.25800087 37.08253253 -57.42112777 37.78031926 -60.66650391 38.47753906 C-64.29472936 39.289885 -67.86141617 40.2982542 -71.4375 41.3125 C-73.02994181 41.75913635 -74.6223899 42.20575034 -76.21484375 42.65234375 C-77.01519043 42.87776855 -77.81553711 43.10319336 -78.64013672 43.33544922 C-89.51248237 46.39716294 -100.40315188 49.38534233 -111.3125 52.3125 C-121.06936902 54.93340164 -130.81986975 57.57670598 -140.5625 60.25 C-141.7688208 60.57911377 -142.9751416 60.90822754 -144.21801758 61.24731445 C-149.8921692 62.80873314 -155.49875178 64.45620148 -161.06665039 66.36132812 C-169.15072562 69.03185986 -177.52279927 70.44505909 -186 71 C-186.33 70.01 -186.66 69.02 -187 68 C-187.66 67.34 -188.32 66.68 -189 66 C-188.01 65.01 -188.01 65.01 -187 64 C-186.01 64 -185.02 64 -184 64 C-184 63.34 -184 62.68 -184 62 C-182.4068396 61.45641846 -182.4068396 61.45641846 -180.78149414 60.90185547 C-176.75352067 59.52725719 -172.72595015 58.15148136 -168.69848633 56.77539062 C-166.97170409 56.18556263 -165.24481982 55.59603322 -163.51782227 55.00683594 C-154.73102876 52.00883827 -145.95145107 48.9953967 -137.203125 45.88671875 C-128.14787397 42.67135298 -119.02607745 39.67493935 -109.88867188 36.70117188 C-103.03450907 34.44261641 -96.36833188 31.97165847 -89.73266602 29.13647461 C-85.7608559 27.48465865 -81.71665102 26.13283462 -77.625 24.8125 C-75.80981973 24.21637753 -73.99472066 23.62000776 -72.1796875 23.0234375 C-71.2009668 22.70342773 -70.22224609 22.38341797 -69.21386719 22.05371094 C-63.70967087 20.24908382 -58.2130532 18.42168303 -52.71707153 16.59222412 C-51.4052264 16.1555869 -50.09327556 15.71926711 -48.78121948 15.28326416 C-41.38914167 12.82604524 -34.01598263 10.32907004 -26.6875 7.6875 C-21.02961989 5.65254224 -15.32917726 3.82806175 -9.5625 2.125 C-8.83313232 1.90932373 -8.10376465 1.69364746 -7.35229492 1.47143555 C-2.26299545 0 -2.26299545 0 0 0 Z \",fill:\"#2A0D10\",transform:\"translate(626,155)\"})),_path24||(_path24=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C10.89 0 21.78 0 33 0 C33 0.66 33 1.32 33 2 C31.5459375 2.8353125 31.5459375 2.8353125 30.0625 3.6875 C26.72416413 5.68569319 26.72416413 5.68569319 26.34375 9.0234375 C25.9429512 13.65995088 25.65313065 18.28906888 25.4375 22.9375 C25.37272461 24.24944336 25.37272461 24.24944336 25.30664062 25.58789062 C25.20153099 27.72511995 25.10036015 29.86254238 25 32 C24.01 32 23.02 32 22 32 C22 35.63 22 39.26 22 43 C24.475 42.505 24.475 42.505 27 42 C29.20322602 41.92029098 31.40863682 41.89227688 33.61328125 41.90234375 C34.86044922 41.90556641 36.10761719 41.90878906 37.39257812 41.91210938 C38.68615234 41.92048828 39.97972656 41.92886719 41.3125 41.9375 C43.28186523 41.94426758 43.28186523 41.94426758 45.29101562 41.95117188 C48.5273901 41.96294051 51.76367178 41.9793824 55 42 C55.33 42.66 55.66 43.32 56 44 C54.02 44 52.04 44 50 44 C50 44.99 50 45.98 50 47 C40.95971078 47.1723784 32.01134307 46.6331684 23 46 C22.67 48.31 22.34 50.62 22 53 C28.6 53 35.2 53 42 53 C42 53.99 42 54.98 42 56 C40.95199219 56.20496094 39.90398437 56.40992188 38.82421875 56.62109375 C37.44529231 56.89312686 36.06638717 57.16526791 34.6875 57.4375 C33.99720703 57.57220703 33.30691406 57.70691406 32.59570312 57.84570312 C29.65710993 58.42774332 26.84543315 59.05152228 24 60 C24 60.66 24 61.32 24 62 C25.02786621 61.98018066 26.05573242 61.96036133 27.11474609 61.93994141 C30.6098266 61.99396867 33.73011517 62.36338038 37.1640625 62.9609375 C46.53866152 64.36973624 55.91066635 64.45798235 65.375 64.625 C67.19012066 64.66328821 69.00522527 64.70234571 70.8203125 64.7421875 C75.21340741 64.83697376 79.60658655 64.9214207 84 65 C84 65.66 84 66.32 84 67 C43.17297641 67.61916858 43.17297641 67.61916858 24 64 C24 65.65 24 67.3 24 69 C25.55533447 68.99129883 25.55533447 68.99129883 27.14208984 68.98242188 C39.64308455 68.93534192 52.12850944 69.18600724 64.625 69.5 C66.61457851 69.54837585 68.60416184 69.59655398 70.59375 69.64453125 C75.39589169 69.76075122 80.19796105 69.87961284 85 70 C85 70.66 85 71.32 85 72 C86.03568595 73.70735301 86.03568595 73.70735301 88 75 C91.61023099 75.73041853 91.61023099 75.73041853 95 76 C91.11236713 79.66194631 88.67741882 80.47107899 83.375 80.5625 C78.93779124 80.43635217 78.93779124 80.43635217 75.31494141 82.52319336 C74.88101074 83.01053955 74.44708008 83.49788574 74 84 C82.62411363 87.69463745 91.22481701 87.52128169 100.4375 87.625 C102.78176918 87.6615578 105.12587397 87.70211765 107.46998596 87.74765015 C108.92003133 87.77477771 110.37019795 87.79617178 111.82041931 87.81118774 C116.77857156 87.88928578 116.77857156 87.88928578 119 89 C118.67 91.97 118.34 94.94 118 98 C112.06 98 106.12 98 100 98 C100 97.34 100 96.68 100 96 C99.505 97.485 99.505 97.485 99 99 C97.99735107 99.03963867 96.99470215 99.07927734 95.96166992 99.12011719 C92.19041684 99.27392587 88.42054029 99.45106978 84.65063477 99.63476562 C83.02851828 99.71065412 81.4061046 99.7804718 79.78344727 99.84375 C70.99852319 100.19048768 63.15382754 100.63165155 54.9621582 104.16894531 C53 105 53 105 51 105 C51.33 103.35 51.66 101.7 52 100 C48.31915662 98.77305221 44.64608653 98.38949492 40.8125 97.9375 C40.06291016 97.84662109 39.31332031 97.75574219 38.54101562 97.66210938 C36.69434465 97.4386269 34.84721446 97.21894487 33 97 C33.8125 93.1875 33.8125 93.1875 35.5 91.5 C39.18352306 89.28988617 43.04891257 87.68502258 47 86 C47.33 82.04 47.66 78.08 48 74 C49.98 73.67 51.96 73.34 54 73 C39.15 71.515 39.15 71.515 24 70 C25.13047805 84.58316683 27.97140369 97.95297061 32 112 C32.33 111.34 32.66 110.68 33 110 C37.62 110 42.24 110 47 110 C47.33 110.66 47.66 111.32 48 112 C49.24716797 111.15115234 49.24716797 111.15115234 50.51953125 110.28515625 C51.60621094 109.55167969 52.69289063 108.81820312 53.8125 108.0625 C54.89144531 107.33160156 55.97039062 106.60070312 57.08203125 105.84765625 C62.26476378 102.56595279 67.34395908 102.47287087 73.3125 101.9375 C74.78807373 101.80335693 74.78807373 101.80335693 76.29345703 101.66650391 C83.88842534 101.01401522 91.37574152 100.76580776 99 101 C99 103.64 99 106.28 99 109 C98.43481155 109.04567108 97.86962311 109.09134216 97.28730774 109.13839722 C91.39784549 109.61586023 85.50936779 110.10431389 79.62133789 110.59912109 C77.42463067 110.78227458 75.22768887 110.96263705 73.03051758 111.14013672 C69.86994463 111.39595519 66.71035497 111.66184324 63.55078125 111.9296875 C62.57039383 112.00686005 61.59000641 112.08403259 60.57991028 112.1635437 C54.05481445 112.66719109 54.05481445 112.66719109 48 115 C47.67 115.66 47.34 116.32 47 117 C41.72 117 36.44 117 31 117 C31 119.64 31 122.28 31 125 C35.95 125 40.9 125 46 125 C46 126.32 46 127.64 46 129 C46.7425 128.525625 47.485 128.05125 48.25 127.5625 C55.20769041 123.60926681 62.99384435 124.8171386 70.6484375 125.77734375 C74.76031066 126.16667393 78.87432471 126.07751791 83 126 C83 125.01 83 124.02 83 123 C82.04738281 123.01160156 81.09476562 123.02320313 80.11328125 123.03515625 C78.85902344 123.04417969 77.60476563 123.05320312 76.3125 123.0625 C75.07113281 123.07410156 73.82976562 123.08570313 72.55078125 123.09765625 C69 123 69 123 66.59375 122.5 C62.79280817 121.76728832 59.04781406 121.89543455 55.1875 121.9375 C54.00510742 121.94426758 54.00510742 121.94426758 52.79882812 121.95117188 C50.86585239 121.96288688 48.93291607 121.98082002 47 122 C54.41484177 113.81629797 66.95847915 113.78782277 77.25 112.75 C78.43789124 112.62292664 78.43789124 112.62292664 79.64978027 112.49328613 C92.45769569 111.12570186 105.11588288 110.48917597 118 111 C118.33 112.65 118.66 114.3 119 116 C115.67485327 117.13357275 112.4120992 118.1469752 109 119 C121.54 118.67 134.08 118.34 147 118 C147 118.33 147 118.66 147 119 C144.08397391 119.50400451 141.16727908 120.00334666 138.25 120.5 C137.425 120.64308594 136.6 120.78617187 135.75 120.93359375 C134.95078125 121.06894531 134.1515625 121.20429688 133.328125 121.34375 C132.22839355 121.53227539 132.22839355 121.53227539 131.10644531 121.72460938 C129 122 129 122 125 122 C124.34 123.65 123.68 125.3 123 127 C123.85722656 126.68546875 124.71445312 126.3709375 125.59765625 126.046875 C133.28047983 123.68292928 141.45274059 123.01619977 149 126 C149 126.66 149 127.32 149 128 C147.28645833 128.3671875 145.57291667 128.734375 143.859375 129.1015625 C142.73926025 129.34165039 141.61914551 129.58173828 140.46508789 129.82910156 C137.96177437 130.36539663 135.45835411 130.90119369 132.95483398 131.43652344 C126.4217005 132.83393902 119.8905599 134.23946809 113.36328125 135.6640625 C112.13834961 135.93009277 110.91341797 136.19612305 109.65136719 136.47021484 C107.32711771 136.97522524 105.0035041 137.48317481 102.68066406 137.99462891 C74.76968866 144.0410346 74.76968866 144.0410346 64.26171875 138.90625 C60.5599088 137.42296864 56.88404646 137.07813208 53 138 C52.10662933 138.66159119 51.21325867 139.32318237 50.29281616 140.00482178 C46.49733362 142.30457486 44.47230364 142.48678293 40.07666016 142.45410156 C39.4125412 142.45468567 38.74842224 142.45526978 38.06417847 142.45587158 C35.88859128 142.4531047 33.7144076 142.42208308 31.5390625 142.390625 C30.02306873 142.38315754 28.50706525 142.37746699 26.99105835 142.37347412 C23.01569613 142.35825726 19.04092558 142.31901056 15.0657959 142.2746582 C11.00358075 142.23361957 6.94126929 142.21544485 2.87890625 142.1953125 C-5.08099961 142.15251154 -13.04042605 142.08430922 -21 142 C-16.4276709 137.06036469 -11.06292982 136.90497999 -4.62890625 136.5859375 C-2.27371844 136.50677152 0.0817896 136.436688 2.4375 136.375 C3.64599609 136.33632813 4.85449219 136.29765625 6.09960938 136.2578125 C9.06625817 136.16400542 12.03290836 136.07830754 15 136 C15.33 134.68 15.66 133.36 16 132 C13.03 131.01 10.06 130.02 7 129 C7 128.01 7 127.02 7 126 C13.6 126 20.2 126 27 126 C27 129.3 27 132.6 27 136 C28.32 136 29.64 136 31 136 C29.75604001 127.80909854 29.75604001 127.80909854 27.875 119.75 C26.91050143 115.61643469 26.84918796 112.22273724 27 108 C26.34 108 25.68 108 25 108 C24.87625 107.195625 24.7525 106.39125 24.625 105.5625 C24.41875 104.716875 24.2125 103.87125 24 103 C20.13245863 101.06622932 16.0318796 101.90039647 12 103 C12.05220703 104.051875 12.05220703 104.051875 12.10546875 105.125 C12.28894664 111.5554631 11.6553877 116.13601882 9 122 C8.67 121.01 8.34 120.02 8 119 C4.535 118.505 4.535 118.505 1 118 C0.67 116.02 0.34 114.04 0 112 C0.99 111.505 0.99 111.505 2 111 C1.65213292 109.02463255 1.65213292 109.02463255 1 107 C0.34 106.67 -0.32 106.34 -1 106 C-1.33 105.01 -1.66 104.02 -2 103 C-2 103.99 -2 104.98 -2 106 C-2.66 106 -3.32 106 -4 106 C-4.12375 104.865625 -4.2475 103.73125 -4.375 102.5625 C-4.58125 101.386875 -4.7875 100.21125 -5 99 C-5.66 98.67 -6.32 98.34 -7 98 C-7 99.98 -7 101.96 -7 104 C-7.33 104 -7.66 104 -8 104 C-8.19294408 99.17639811 -7.75747614 95.50353262 -6 91 C-6.99 91.495 -6.99 91.495 -8 92 C-9.99960012 92.039992 -12.00047242 92.04346799 -14 92 C-14.495 92.99 -14.495 92.99 -15 94 C-15 93.34 -15 92.68 -15 92 C-15.66 92 -16.32 92 -17 92 C-17 91.34 -17 90.68 -17 90 C-16.21753906 89.95101562 -15.43507813 89.90203125 -14.62890625 89.8515625 C-13.11103516 89.73941406 -13.11103516 89.73941406 -11.5625 89.625 C-10.04849609 89.52058594 -10.04849609 89.52058594 -8.50390625 89.4140625 C-7.26447266 89.20910156 -7.26447266 89.20910156 -6 89 C-5.67 88.34 -5.34 87.68 -5 87 C-10.94 87 -16.88 87 -23 87 C-23 86.34 -23 85.68 -23 85 C-18.05 84.01 -18.05 84.01 -13 83 C-13.66 82.67 -14.32 82.34 -15 82 C-15 81.34 -15 80.68 -15 80 C-16.65 80 -18.3 80 -20 80 C-19.9669923 77.39239154 -19.8998852 74.79337154 -19.8125 72.1875 C-19.80669922 71.44951172 -19.80089844 70.71152344 -19.79492188 69.95117188 C-19.70703125 67.79296875 -19.70703125 67.79296875 -19 64 C-15.42844983 61.19127422 -12.74118242 60.6351682 -8.26171875 60.70703125 C-6.66166992 60.7215332 -6.66166992 60.7215332 -5.02929688 60.73632812 C-3.37510742 60.7740332 -3.37510742 60.7740332 -1.6875 60.8125 C-0.56537109 60.82603516 0.55675781 60.83957031 1.71289062 60.85351562 C4.47575229 60.8887862 7.23762829 60.93807765 10 61 C9.96970703 60.38406982 9.93941406 59.76813965 9.90820312 59.13354492 C9.108081 42.41253111 8.8724027 25.73880304 9 9 C6.03 8.505 6.03 8.505 3 8 C3 7.34 3 6.68 3 6 C2.01 6 1.02 6 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#F9B582\",transform:\"translate(315,362)\"})),_path25||(_path25=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 12.54 0 25.08 0 38 C-17.74004606 39.42633536 -35.2086218 40.30512918 -53 40 C-53 40.66 -53 41.32 -53 42 C-51.68 42 -50.36 42 -49 42 C-48.97107615 46.12498538 -48.95322733 50.24994485 -48.9375 54.375 C-48.92912109 55.550625 -48.92074219 56.72625 -48.91210938 57.9375 C-48.90888672 59.05898438 -48.90566406 60.18046875 -48.90234375 61.3359375 C-48.89710693 62.37282715 -48.89187012 63.4097168 -48.88647461 64.47802734 C-49 67 -49 67 -50 69 C-59.55428818 69.09438924 -69.08270904 69.10632906 -78.625 68.5625 C-79.35259521 68.52326416 -80.08019043 68.48402832 -80.82983398 68.44360352 C-85.87373399 68.12626601 -85.87373399 68.12626601 -87 67 C-87.08737645 65.14630389 -87.10698153 63.28932459 -87.09765625 61.43359375 C-87.09443359 60.30888672 -87.09121094 59.18417969 -87.08789062 58.02539062 C-87.07951172 56.84138672 -87.07113281 55.65738281 -87.0625 54.4375 C-87.05798828 53.24962891 -87.05347656 52.06175781 -87.04882812 50.83789062 C-87.03699675 47.89187774 -87.02051287 44.94596319 -87 42 C-95.56316171 42.08474198 -104.12612416 42.1797533 -112.68902397 42.28752708 C-116.66602024 42.33726683 -120.64299278 42.38359691 -124.62011719 42.421875 C-128.46521979 42.45901223 -132.31011231 42.50544512 -136.15503311 42.55806351 C-137.61484175 42.57645766 -139.07469516 42.59161956 -140.5345726 42.60334396 C-147.74403179 42.66326421 -154.66183113 42.89234908 -161.71670532 44.50335693 C-170.59625366 46.43476165 -179.74491228 46.14815573 -188.78125 46.1328125 C-190.20357276 46.13348858 -191.6258954 46.13446112 -193.04821777 46.13571167 C-196.02011217 46.13717817 -198.99197633 46.13507058 -201.96386719 46.13037109 C-205.71775238 46.12471552 -209.47156598 46.12801789 -213.22544861 46.13382339 C-228.17150741 46.15331745 -243.08854263 46.15819706 -258 45 C-257.01 44.505 -257.01 44.505 -256 44 C-256 41.69 -256 39.38 -256 37 C-263.26 37 -270.52 37 -278 37 C-277.67 36.34 -277.34 35.68 -277 35 C-274.21817162 34.29515261 -271.48984014 33.71445207 -268.671875 33.1953125 C-267.81949249 33.03114838 -266.96710999 32.86698425 -266.08889771 32.69784546 C-263.31083217 32.16492896 -260.53060339 31.64449853 -257.75 31.125 C-255.85291115 30.7655867 -253.95593822 30.40556104 -252.05908203 30.04492188 C-249.2530157 29.51186105 -246.44679017 28.97978065 -243.63980103 28.45159912 C-238.79453248 27.53889605 -233.958846 26.59660134 -229.1328125 25.5859375 C-219.25284456 23.53098783 -210.11346008 22.44073032 -200 23 C-199.505 24.485 -199.505 24.485 -199 26 C-197.081875 25.9690625 -197.081875 25.9690625 -195.125 25.9375 C-191.25 25.875 -191.25 25.875 -189 27 C-187.10801292 26.94462207 -187.10801292 26.94462207 -184.93920898 26.62963867 C-184.08543167 26.52128693 -183.23165436 26.41293518 -182.352005 26.30130005 C-180.93832893 26.11155106 -180.93832893 26.11155106 -179.49609375 25.91796875 C-178.50034836 25.78856903 -177.50460297 25.65916931 -176.47868347 25.52584839 C-173.13056701 25.087356 -169.78400693 24.63810301 -166.4375 24.1875 C-165.27410095 24.03272186 -164.1107019 23.87794373 -162.91204834 23.71847534 C-140.36245838 20.71241073 -117.88492945 17.28682485 -95.40869141 13.78198242 C-92.67483224 13.35578002 -89.9409455 12.92975519 -87.20703125 12.50390625 C-86.53353638 12.39896284 -85.8600415 12.29401943 -85.1661377 12.18589592 C-70.22890219 9.86066861 -55.27407295 7.66324973 -40.3125 5.5 C-39.16718811 5.33428497 -38.02187622 5.16856995 -36.84185791 4.99783325 C-30.74382278 4.11626767 -24.64515039 3.23925283 -18.54595947 2.36572266 C-16.18309475 2.02630124 -13.82070394 1.68380266 -11.45849609 1.33984375 C-9.55124756 1.06333984 -9.55124756 1.06333984 -7.60546875 0.78125 C-6.5486792 0.62720703 -5.49188965 0.47316406 -4.40307617 0.31445312 C-2 0 -2 0 0 0 Z \",fill:\"#3B2D2C\",transform:\"translate(626,219)\"})),_path26||(_path26=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 16.5 0 33 0 50 C-16.85663338 50 -16.85663338 50 -22.84765625 49.4140625 C-23.49916153 49.35298813 -24.15066681 49.29191376 -24.82191467 49.22898865 C-26.19642861 49.0997833 -27.57067607 48.96771142 -28.94464111 48.83279419 C-32.65829947 48.46842779 -36.37397047 48.12608598 -40.08984375 47.78515625 C-40.8418103 47.71592453 -41.59377686 47.64669281 -42.36853027 47.57536316 C-49.61210408 46.92105652 -56.86478339 46.48823252 -64.125 46.0625 C-79.85224982 45.09830103 -95.40039174 43.17470322 -111 41 C-111.97630371 40.8644873 -112.95260742 40.72897461 -113.95849609 40.58935547 C-118.58944525 39.93413724 -123.2033492 39.21834289 -127.80712891 38.39306641 C-129.36778883 38.1133222 -130.93018273 37.84317851 -132.49365234 37.57958984 C-135.02314909 37.14548321 -137.54230048 36.67240422 -140.0625 36.1875 C-140.83190918 36.05859375 -141.60131836 35.9296875 -142.39404297 35.796875 C-144.53515625 35.35546875 -144.53515625 35.35546875 -148 34 C-149.49609375 30.86328125 -149.49609375 30.86328125 -150 28 C-150 29.65 -150 31.3 -150 33 C-151.32 33.33 -152.64 33.66 -154 34 C-153.030625 34.598125 -152.06125 35.19625 -151.0625 35.8125 C-148 38 -148 38 -147 41 C-147.99 41.495 -147.99 41.495 -149 42 C-148.67 42.99 -148.34 43.98 -148 45 C-147.071875 45.0825 -146.14375 45.165 -145.1875 45.25 C-142 46 -142 46 -140.125 47.5625 C-138.47227844 51.14339672 -138.80381792 54.07635835 -139 58 C-140.65 58 -142.3 58 -144 58 C-144 56.68 -144 55.36 -144 54 C-144.99 54.495 -144.99 54.495 -146 55 C-146.65213292 57.02463255 -146.65213292 57.02463255 -147 59 C-148.65 59 -150.3 59 -152 59 C-151.67 59.99 -151.34 60.98 -151 62 C-149.515 62.495 -149.515 62.495 -148 63 C-148 63.66 -148 64.32 -148 65 C-149.77119803 64.85866501 -151.54195287 64.71176792 -153.3125 64.5625 C-154.79169922 64.44068359 -154.79169922 64.44068359 -156.30078125 64.31640625 C-159 64 -159 64 -162 63 C-162 62.34 -162 61.68 -162 61 C-163.65 61 -165.3 61 -167 61 C-167.99 57.04 -167.99 57.04 -169 53 C-170.485 53.495 -170.485 53.495 -172 54 C-174.57265818 54.07029121 -177.11641431 54.09370832 -179.6875 54.0625 C-180.7403418 54.05573242 -180.7403418 54.05573242 -181.81445312 54.04882812 C-183.54300538 54.03706927 -185.27151365 54.01913454 -187 54 C-187 53.34 -187 52.68 -187 52 C-186.34 51.67 -185.68 51.34 -185 51 C-184.27840576 49.35636866 -183.60648579 47.68949614 -183 46 C-181.0412957 46.14076315 -179.08303907 46.2877676 -177.125 46.4375 C-176.03445313 46.51871094 -174.94390625 46.59992188 -173.8203125 46.68359375 C-171 47 -171 47 -169 48 C-169 47.01 -169 46.02 -169 45 C-171.97 44.67 -174.94 44.34 -178 44 C-177.34 43.01 -176.68 42.02 -176 41 C-175.34 41 -174.68 41 -174 41 C-173.87753906 40.43796875 -173.75507813 39.8759375 -173.62890625 39.296875 C-172.9480131 36.81013481 -172.00647675 34.59485224 -170.9375 32.25 C-170.57527344 31.45078125 -170.21304688 30.6515625 -169.83984375 29.828125 C-169.56269531 29.22484375 -169.28554688 28.6215625 -169 28 C-169.66 28 -170.32 28 -171 28 C-171.495 30.475 -171.495 30.475 -172 33 C-182.42537865 33.43040554 -192.64896462 32.11152058 -203 31 C-203 37.6 -203 44.2 -203 51 C-202.34 51.33 -201.68 51.66 -201 52 C-201 53.98 -201 55.96 -201 58 C-201.66 58 -202.32 58 -203 58 C-204.53767346 49.01282114 -205.48143798 40.102128 -206 31 C-207.32 30.67 -208.64 30.34 -210 30 C-210 29.01 -210 28.02 -210 27 C-211.61068359 27.03480469 -211.61068359 27.03480469 -213.25390625 27.0703125 C-214.69009715 27.08908624 -216.12629565 27.1072847 -217.5625 27.125 C-218.26697266 27.14175781 -218.97144531 27.15851563 -219.69726562 27.17578125 C-224.50082828 27.22005372 -228.38079393 26.4597712 -233 25 C-239.56158701 23.27544037 -246.06082085 22.48855969 -252.8125 21.9375 C-254.65258361 21.78277442 -256.49244087 21.62532712 -258.33203125 21.46484375 C-259.13358643 21.399021 -259.9351416 21.33319824 -260.76098633 21.26538086 C-262.9121579 21.01041155 -264.91391849 20.57511094 -267 20 C-267 19.34 -267 18.68 -267 18 C-266.01 18 -265.02 18 -264 18 C-264 17.34 -264 16.68 -264 16 C-256.08 15.505 -256.08 15.505 -248 15 C-248 13.35 -248 11.7 -248 10 C-248.66 9.67 -249.32 9.34 -250 9 C-239.77 9 -229.54 9 -219 9 C-219 9.33 -219 9.66 -219 10 C-221.31 10 -223.62 10 -226 10 C-226 11.98 -226 13.96 -226 16 C-225.29875 15.97679687 -224.5975 15.95359375 -223.875 15.9296875 C-217.84441138 15.81497522 -212.77556127 16.25643433 -207 18 C-206.34 15.69 -205.68 13.38 -205 11 C-207.31 11 -209.62 11 -212 11 C-212.33 11.66 -212.66 12.32 -213 13 C-213 12.34 -213 11.68 -213 11 C-213.99 10.67 -214.98 10.34 -216 10 C-200.49 10 -184.98 10 -169 10 C-169 10.33 -169 10.66 -169 11 C-170.65 11 -172.3 11 -174 11 C-174 12.65 -174 14.3 -174 16 C-174.66 16 -175.32 16 -176 16 C-176 14.35 -176 12.7 -176 11 C-176.495 11.165 -176.99 11.33 -177.5 11.5 C-181.03444089 12.20688818 -184.39690701 12.06005155 -188 12 C-188 13.32 -188 14.64 -188 16 C-180.41 16.33 -172.82 16.66 -165 17 C-168.78842473 19.52561648 -171.78533329 19.25391573 -176.16796875 19.1953125 C-177.36018791 19.19106766 -177.36018791 19.19106766 -178.57649231 19.18673706 C-181.11364838 19.17554705 -183.65045072 19.15044491 -186.1875 19.125 C-187.90819802 19.11496866 -189.62890159 19.10584308 -191.34960938 19.09765625 C-195.56654243 19.07561161 -199.78321125 19.04109006 -204 19 C-203.505 19.99 -203.505 19.99 -203 21 C-190.79 21 -178.58 21 -166 21 C-166 21.33 -166 21.66 -166 22 C-177.88 22 -189.76 22 -202 22 C-202 23.32 -202 24.64 -202 26 C-200.72153198 25.99214478 -200.72153198 25.99214478 -199.41723633 25.98413086 C-196.23966727 25.96703668 -193.06212175 25.95452438 -189.88452148 25.94506836 C-188.51211778 25.94005546 -187.13971938 25.93324342 -185.76733398 25.92456055 C-183.78892349 25.91236143 -181.8104732 25.90727752 -179.83203125 25.90234375 C-178.64327393 25.89710693 -177.4545166 25.89187012 -176.22973633 25.88647461 C-173.35262513 25.98760521 -170.79326587 26.33449807 -168 27 C-167.505 25.515 -167.505 25.515 -167 24 C-166.34 24.33 -165.68 24.66 -165 25 C-164.01 20.545 -164.01 20.545 -163 16 C-160.525 15.505 -160.525 15.505 -158 15 C-157.505 16.485 -157.505 16.485 -157 18 C-156.01 17.505 -156.01 17.505 -155 17 C-155 16.34 -155 15.68 -155 15 C-150.545 14.505 -150.545 14.505 -146 14 C-149.63 13.67 -153.26 13.34 -157 13 C-157.495 11.515 -157.495 11.515 -158 10 C-158.99 9.505 -158.99 9.505 -160 9 C-160.33 9.66 -160.66 10.32 -161 11 C-161.99 10.5359375 -161.99 10.5359375 -163 10.0625 C-166.70476015 8.75039745 -170.09263991 8.39735865 -174 8 C-174 7.67 -174 7.34 -174 7 C-173.39414062 6.95101563 -172.78828125 6.90203125 -172.1640625 6.8515625 C-171.32617188 6.77679688 -170.48828125 6.70203125 -169.625 6.625 C-168.40683594 6.52058594 -168.40683594 6.52058594 -167.1640625 6.4140625 C-164.18589989 6.08175506 -164.18589989 6.08175506 -162.05310059 5.52893066 C-154.19079724 3.65273276 -146.39440217 3.74488255 -138.3671875 3.8046875 C-136.87932527 3.80842574 -135.39146056 3.81126887 -133.90359497 3.81326294 C-130.02055862 3.82083566 -126.13767603 3.84042807 -122.25469971 3.8626709 C-118.27919595 3.88326778 -114.30366693 3.89229402 -110.328125 3.90234375 C-102.55200569 3.92368116 -94.77604414 3.95880997 -87 4 C-86.67 12.25 -86.34 20.5 -86 29 C-74.12 29.66 -62.24 30.32 -50 31 C-49.67 22.09 -49.34 13.18 -49 4 C-50.32 4 -51.64 4 -53 4 C-53 3.34 -53 2.68 -53 2 C-47.54164058 1.71083577 -42.08306897 1.42620525 -36.62426758 1.14550781 C-34.77296805 1.04970383 -32.92172867 0.95272908 -31.07055664 0.85449219 C-28.38703716 0.71229975 -25.70331883 0.57452833 -23.01953125 0.4375 C-21.80774956 0.37187866 -21.80774956 0.37187866 -20.57148743 0.30493164 C-13.68809206 -0.03966063 -6.92164956 0 0 0 Z \",fill:\"#390E07\",transform:\"translate(626,257)\"})),_path27||(_path27=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C9.24 1.67 18.48 1.34 28 1 C28 13.87 28 26.74 28 40 C27.34 40 26.68 40 26 40 C26.185625 40.78375 26.37125 41.5675 26.5625 42.375 C27.11687121 46.96836149 26.98237033 51.46401177 26 56 C25.01 56.495 25.01 56.495 24 57 C24 58.98 24 60.96 24 63 C22.68 63.33 21.36 63.66 20 64 C20 72.91 20 81.82 20 91 C19.34 90.67 18.68 90.34 18 90 C18 89.34 18 88.68 18 88 C16.824375 88.185625 15.64875 88.37125 14.4375 88.5625 C10.38731406 89.08230996 7.00125547 88.7502354 3 88 C2.67 86.68 2.34 85.36 2 84 C1.34 84 0.68 84 0 84 C0 83.34 0 82.68 0 82 C-3.96 82 -7.92 82 -12 82 C-12.495 83.485 -12.495 83.485 -13 85 C-10.03 85.33 -7.06 85.66 -4 86 C-4 86.66 -4 87.32 -4 88 C-6.78746404 88.8502069 -9.57859989 89.68013626 -12.375 90.5 C-13.14972656 90.73847656 -13.92445313 90.97695313 -14.72265625 91.22265625 C-15.50253906 91.44824219 -16.28242188 91.67382812 -17.0859375 91.90625 C-17.7876709 92.11572266 -18.4894043 92.32519531 -19.21240234 92.54101562 C-26.74550012 93.78135753 -33.90439085 92.90759459 -41.2890625 91.25 C-42.53301285 90.98364746 -42.53301285 90.98364746 -43.80209351 90.71191406 C-46.41190697 90.15083483 -49.01837887 89.57570732 -51.625 89 C-53.40995312 88.6136437 -55.19510812 88.2282188 -56.98046875 87.84375 C-61.32271664 86.90656605 -65.66203048 85.95678342 -70 85 C-70 84.34 -70 83.68 -70 83 C-70.88171875 83.19207031 -71.7634375 83.38414062 -72.671875 83.58203125 C-76.12062312 84.01514868 -77.96964377 83.69942276 -81.25 82.6875 C-89.37223365 80.45183468 -97.63900975 79.78964908 -106 79 C-104.94124926 75.59687262 -103.99097846 72.98646769 -102 70 C-89.88980517 68.23187628 -77.12652151 71.11390086 -65.18984985 72.99209595 C-46.84921298 75.85626623 -29.26966852 77.75614811 -10.70703125 77.05078125 C-6.00383415 76.89079824 -2.39629531 77.33946009 2 79 C2 78.34 2 77.68 2 77 C-2.4083782 74.71980438 -5.79691011 73.8775262 -10.765625 73.82421875 C-30.63390403 73.46786128 -49.83435005 71.43333191 -69.48876953 68.47485352 C-72.85820681 68.0191759 -76.19900775 67.70820519 -79.58984375 67.46484375 C-80.78544922 67.37783203 -81.98105469 67.29082031 -83.21289062 67.20117188 C-84.44201172 67.11416016 -85.67113281 67.02714844 -86.9375 66.9375 C-88.19369141 66.84662109 -89.44988281 66.75574219 -90.74414062 66.66210938 C-93.82927722 66.43922878 -96.91455717 66.2185933 -100 66 C-100 66.66 -100 67.32 -100 68 C-100.66 68 -101.32 68 -102 68 C-101.25 65.5625 -101.25 65.5625 -100 63 C-90.54407809 59.33504158 -76.99141258 62.22739203 -67.125 63 C-65.85269531 63.09539062 -64.58039063 63.19078125 -63.26953125 63.2890625 C-60.17930458 63.52141037 -57.08951785 63.75844069 -54 64 C-54 62.68 -54 61.36 -54 60 C-56.64 60 -59.28 60 -62 60 C-62 59.34 -62 58.68 -62 58 C-73.55 58 -85.1 58 -97 58 C-97 52.06 -97 46.12 -97 40 C-96.67 40 -96.34 40 -96 40 C-96 42.64 -96 45.28 -96 48 C-94.68 48.33 -93.36 48.66 -92 49 C-92.99 49.495 -92.99 49.495 -94 50 C-94.99 52.475 -94.99 52.475 -96 55 C-82.47 55 -68.94 55 -55 55 C-55.99 52.36 -56.98 49.72 -58 47 C-58 46.01 -58 45.02 -58 44 C-59.32 44 -60.64 44 -62 44 C-62 41.36 -62 38.72 -62 36 C-61.34 36 -60.68 36 -60 36 C-60.02320313 34.86820312 -60.04640625 33.73640625 -60.0703125 32.5703125 C-60.08906901 31.08854825 -60.10726934 29.60677688 -60.125 28.125 C-60.14175781 27.37863281 -60.15851563 26.63226563 -60.17578125 25.86328125 C-60.1933959 23.90805539 -60.10320189 21.95257979 -60 20 C-59.34 19.34 -58.68 18.68 -58 18 C-58 20.31 -58 22.62 -58 25 C-57.67 21.04 -57.34 17.08 -57 13 C-50.79085562 12.47156218 -46.46625538 14.07918972 -41 17 C-40 18 -40 18 -39.90234375 20.06640625 C-39.91394531 20.89011719 -39.92554688 21.71382813 -39.9375 22.5625 C-39.94652344 23.38878906 -39.95554687 24.21507812 -39.96484375 25.06640625 C-39.97644531 25.70449219 -39.98804688 26.34257812 -40 27 C-39.01 26.505 -39.01 26.505 -38 26 C-38 22.37 -38 18.74 -38 15 C-37.505 15.99 -37.505 15.99 -37 17 C-31.29086337 15.28725901 -26.51392805 12.66018258 -21.5 9.5 C-20.54649658 8.91230835 -20.54649658 8.91230835 -19.57373047 8.31274414 C-17.56937326 7.05610096 -17.56937326 7.05610096 -15 5 C-15 4.01 -15 3.02 -15 2 C-9.77487721 0.53329887 -5.4185766 -0.22577402 0 0 Z \",fill:\"#030609\",transform:\"translate(262,406)\"})),_path28||(_path28=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.2481016 5.71053543 0.42904829 11.41790846 0.54931641 17.13256836 C0.59946277 19.07387955 0.66760381 21.01481565 0.75439453 22.95483398 C1.45642148 39.05602854 1.45642148 39.05602854 -2.05517578 43.74316406 C-4.63855364 45.56952055 -7.07450952 46.81319236 -10 48 C-11.09570312 48.67289063 -12.19140625 49.34578125 -13.3203125 50.0390625 C-14.24585938 50.56242187 -15.17140625 51.08578125 -16.125 51.625 C-20.83165607 54.29775483 -25.42297134 57.11351064 -30 60 C-31.50520538 60.94401513 -33.01041379 61.88802542 -34.515625 62.83203125 C-42.53728619 67.87776604 -50.50898996 72.96845563 -58.3671875 78.265625 C-61.63345586 80.4172914 -64.97283043 82.42027279 -68.35546875 84.3828125 C-70.64180504 85.78095611 -72.85145298 87.24089437 -75.0703125 88.7421875 C-80.48577134 92.37256924 -86.07906544 95.67875516 -91.6875 99 C-103.60806839 106.10649269 -115.3408253 113.47391164 -127 121 C-127.78375 121.50547363 -128.5675 122.01094727 -129.375 122.53173828 C-132.95246603 124.8403984 -136.52674514 127.1538716 -140.09765625 129.47265625 C-142.66162835 131.13640904 -145.23161449 132.79006106 -147.80859375 134.43359375 C-153.81698293 138.26712316 -159.74069674 142.17924851 -165.5546875 146.3046875 C-169.94314555 149.34716481 -174.46338634 152.18465143 -179 155 C-179.89074219 155.56203125 -180.78148437 156.1240625 -181.69921875 156.703125 C-184 158 -184 158 -186 158 C-186 158.66 -186 159.32 -186 160 C-191.09347443 163.82010582 -191.09347443 163.82010582 -194.0078125 164.3984375 C-196.60808198 165.18361691 -197.39617645 166.49542836 -199.125 168.5625 C-204.07644444 173.16564892 -209.27659402 172.59325917 -215.65283203 172.44360352 C-219.24915643 172.28749052 -222.51858037 171.95354702 -226 171 C-224.52535076 167.29717196 -222.64171558 165.77814244 -219.375 163.5625 C-214.45372341 160.10343517 -209.77185417 156.44404299 -205.125 152.625 C-200.18022631 148.56981798 -195.20874523 144.56738031 -190.125 140.6875 C-183.46053667 135.59847441 -176.907925 130.3847985 -170.421875 125.0703125 C-162.17895683 118.32489039 -153.82865393 111.75566759 -145.34765625 105.3125 C-140.8944058 101.92758745 -136.47505313 98.50022568 -132.0625 95.0625 C-131.31991943 94.48411377 -130.57733887 93.90572754 -129.81225586 93.30981445 C-128.30403465 92.13465128 -126.79597867 90.95927603 -125.28808594 89.78369141 C-96.53928106 67.37238449 -96.53928106 67.37238449 -82.21557617 56.66699219 C-77.34486726 53.02220466 -72.51096312 49.33199339 -67.6875 45.625 C-59.35090108 39.22741236 -50.89960392 32.99209016 -42.42480469 26.77929688 C-39.16729646 24.38897066 -35.9153437 21.99115852 -32.66430664 19.59204102 C-31.06869057 18.41594176 -29.47154705 17.24191166 -27.87280273 16.07006836 C-24.11123551 13.31106192 -20.37379161 10.5297265 -16.68359375 7.67578125 C-16.0071582 7.15975342 -15.33072266 6.64372559 -14.63378906 6.11206055 C-13.37800793 5.15258201 -12.13052188 4.18210083 -10.89355469 3.19848633 C-7.04237011 0.27902205 -4.74709298 -0.20281416 0 0 Z \",fill:\"#150B0E\",transform:\"translate(626,0)\"})),_path29||(_path29=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.29782021 0.01866461 4.59568037 0.03289292 6.89355469 0.0428772 C12.9247334 0.0809543 18.95348152 0.17909118 24.98370361 0.28991699 C31.14374919 0.39244399 37.30418982 0.43793491 43.46484375 0.48828125 C55.54012708 0.59534327 67.61361098 0.76588475 79.6875 0.9765625 C76.5928692 4.11059291 73.59505489 6.92934164 70 9.4765625 C69.05511719 10.15203125 68.11023438 10.8275 67.13671875 11.5234375 C66.60224121 11.90306641 66.06776367 12.28269531 65.51708984 12.67382812 C61.77040388 15.34160452 58.04311737 18.03639085 54.3125 20.7265625 C53.53946533 21.28150391 52.76643066 21.83644531 51.9699707 22.40820312 C48.83681269 24.66404962 45.75965494 26.91736837 42.7734375 29.3671875 C40.6875 30.9765625 40.6875 30.9765625 38.6875 30.9765625 C38.6875 31.6365625 38.6875 32.2965625 38.6875 32.9765625 C36.92508863 34.31599514 35.09774812 35.5700463 33.25 36.7890625 C26.68948444 41.17855249 20.45178179 45.9286693 14.25024414 50.80981445 C13.55535889 51.35081787 12.86047363 51.89182129 12.14453125 52.44921875 C11.52553955 52.93656494 10.90654785 53.42391113 10.26879883 53.92602539 C8.6875 54.9765625 8.6875 54.9765625 6.6875 54.9765625 C6.6875 55.6365625 6.6875 56.2965625 6.6875 56.9765625 C4.73828125 58.5703125 4.73828125 58.5703125 2 60.4765625 C-1.32411853 62.81289387 -4.57842819 65.15782841 -7.7265625 67.7265625 C-8.29286377 68.18353516 -8.85916504 68.64050781 -9.44262695 69.11132812 C-10.54405305 70.00512797 -11.63679716 70.90976028 -12.71948242 71.82617188 C-16.3416838 74.73351763 -18.69848568 75.47313803 -23.3125 74.9765625 C-23.3125 75.6365625 -23.3125 76.2965625 -23.3125 76.9765625 C-23.9725 76.9765625 -24.6325 76.9765625 -25.3125 76.9765625 C-25.333125 77.6984375 -25.35375 78.4203125 -25.375 79.1640625 C-26.7636167 83.3299126 -29.56876101 84.89163469 -33.3125 86.9765625 C-36.75 88.2890625 -36.75 88.2890625 -39.3125 88.9765625 C-39.3125 89.6365625 -39.3125 90.2965625 -39.3125 90.9765625 C-39.9725 90.9765625 -40.6325 90.9765625 -41.3125 90.9765625 C-41.3125 91.6365625 -41.3125 92.2965625 -41.3125 92.9765625 C-42.6325 92.9765625 -43.9525 92.9765625 -45.3125 92.9765625 C-45.3125 92.3165625 -45.3125 91.6565625 -45.3125 90.9765625 C-46.6325 90.9765625 -47.9525 90.9765625 -49.3125 90.9765625 C-49.3125 91.9665625 -49.3125 92.9565625 -49.3125 93.9765625 C-48.6525 93.9765625 -47.9925 93.9765625 -47.3125 93.9765625 C-47.9725 95.6265625 -48.6325 97.2765625 -49.3125 98.9765625 C-49.9725 98.9765625 -50.6325 98.9765625 -51.3125 98.9765625 C-51.3125 99.6365625 -51.3125 100.2965625 -51.3125 100.9765625 C-52.6325 100.9765625 -53.9525 100.9765625 -55.3125 100.9765625 C-55.3125 101.6365625 -55.3125 102.2965625 -55.3125 102.9765625 C-55.9725 102.9765625 -56.6325 102.9765625 -57.3125 102.9765625 C-57.3125 103.6365625 -57.3125 104.2965625 -57.3125 104.9765625 C-57.9725 104.9765625 -58.6325 104.9765625 -59.3125 104.9765625 C-59.3125 105.6365625 -59.3125 106.2965625 -59.3125 106.9765625 C-59.9725 106.9765625 -60.6325 106.9765625 -61.3125 106.9765625 C-61.3125 107.6365625 -61.3125 108.2965625 -61.3125 108.9765625 C-64.2825 109.4715625 -64.2825 109.4715625 -67.3125 109.9765625 C-71.75884637 102.33101569 -70.46453597 91.55814863 -70.3125 82.9765625 C-68.6625 82.9765625 -67.0125 82.9765625 -65.3125 82.9765625 C-64.8175 81.9865625 -64.8175 81.9865625 -64.3125 80.9765625 C-64.3125 81.6365625 -64.3125 82.2965625 -64.3125 82.9765625 C-63.6525 82.9765625 -62.9925 82.9765625 -62.3125 82.9765625 C-62.3125 82.3165625 -62.3125 81.6565625 -62.3125 80.9765625 C-61.3225 80.9765625 -60.3325 80.9765625 -59.3125 80.9765625 C-59.3125 78.9965625 -59.3125 77.0165625 -59.3125 74.9765625 C-57.9925 74.9765625 -56.6725 74.9765625 -55.3125 74.9765625 C-55.3125 74.3165625 -55.3125 73.6565625 -55.3125 72.9765625 C-57.2925 72.6465625 -59.2725 72.3165625 -61.3125 71.9765625 C-60.3225 66.5315625 -60.3225 66.5315625 -59.3125 60.9765625 C-59.9725 60.9765625 -60.6325 60.9765625 -61.3125 60.9765625 C-61.3125 60.3165625 -61.3125 59.6565625 -61.3125 58.9765625 C-60.6525 58.9765625 -59.9925 58.9765625 -59.3125 58.9765625 C-59.3125 58.3165625 -59.3125 57.6565625 -59.3125 56.9765625 C-57.703125 55.28515625 -57.703125 55.28515625 -55.5625 53.4140625 C-54.51835937 52.48400391 -54.51835937 52.48400391 -53.453125 51.53515625 C-51.3125 49.9765625 -51.3125 49.9765625 -49.171875 49.51171875 C-48.55828125 49.33511719 -47.9446875 49.15851562 -47.3125 48.9765625 C-46.88565918 48.10390747 -46.88565918 48.10390747 -46.45019531 47.21362305 C-45.07943517 44.51828503 -43.3837943 42.78881759 -41.25 40.6484375 C-40.45335937 39.84921875 -39.65671875 39.05 -38.8359375 38.2265625 C-38.00320313 37.4015625 -37.17046875 36.5765625 -36.3125 35.7265625 C-35.06339844 34.46585938 -35.06339844 34.46585938 -33.7890625 33.1796875 C-32.99242187 32.385625 -32.19578125 31.5915625 -31.375 30.7734375 C-30.64410156 30.04479492 -29.91320312 29.31615234 -29.16015625 28.56542969 C-27.3125 26.9765625 -27.3125 26.9765625 -25.3125 26.9765625 C-23.89864089 24.59494241 -23.89864089 24.59494241 -23.3125 21.9765625 C-23.93817871 22.61271484 -24.56385742 23.24886719 -25.20849609 23.90429688 C-27.52661255 26.25644626 -29.84912791 28.60406548 -32.17480469 30.94873047 C-33.18149728 31.96549649 -34.18638966 32.98404812 -35.18945312 34.00439453 C-36.62944371 35.46857468 -38.07573256 36.92626455 -39.5234375 38.3828125 C-40.39274902 39.26259766 -41.26206055 40.14238281 -42.15771484 41.04882812 C-44.3125 42.9765625 -44.3125 42.9765625 -46.3125 42.9765625 C-46.3125 43.6365625 -46.3125 44.2965625 -46.3125 44.9765625 C-47.9625 45.6365625 -49.6125 46.2965625 -51.3125 46.9765625 C-51.3125 47.6365625 -51.3125 48.2965625 -51.3125 48.9765625 C-51.9725 48.9765625 -52.6325 48.9765625 -53.3125 48.9765625 C-52.64583333 46.30989583 -51.97916667 43.64322917 -51.3125 40.9765625 C-51.9725 40.9765625 -52.6325 40.9765625 -53.3125 40.9765625 C-53.3125 40.3165625 -53.3125 39.6565625 -53.3125 38.9765625 C-53.9725 38.6465625 -54.6325 38.3165625 -55.3125 37.9765625 C-53.3325 35.5015625 -53.3325 35.5015625 -51.3125 32.9765625 C-51.9725 32.9765625 -52.6325 32.9765625 -53.3125 32.9765625 C-53.3125 32.3165625 -53.3125 31.6565625 -53.3125 30.9765625 C-52.6525 30.9765625 -51.9925 30.9765625 -51.3125 30.9765625 C-51.3125 30.3165625 -51.3125 29.6565625 -51.3125 28.9765625 C-49.9925 28.9765625 -48.6725 28.9765625 -47.3125 28.9765625 C-45.04372465 26.55775321 -45.04372465 26.55775321 -43.3125 23.9765625 C-44.3025 23.9765625 -45.2925 23.9765625 -46.3125 23.9765625 C-45.9825 23.3165625 -45.6525 22.6565625 -45.3125 21.9765625 C-44.6525 22.3065625 -43.9925 22.6365625 -43.3125 22.9765625 C-42.9825 22.3165625 -42.6525 21.6565625 -42.3125 20.9765625 C-41.6525 20.9765625 -40.9925 20.9765625 -40.3125 20.9765625 C-38.87746986 19.57725925 -37.51422324 18.10394945 -36.1875 16.6015625 C-35.02827908 15.30207997 -33.86651292 14.00465279 -32.68453979 12.72583008 C-31.19258823 10.95131348 -31.19258823 10.95131348 -30.12039185 8.5144043 C-23.68467327 -2.82212569 -11.39497818 -0.27127055 0 0 Z \",fill:\"#375E53\",transform:\"translate(537.3125,-0.9765625)\"})),_path30||(_path30=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.12883948 1.18098444 4.25284093 2.36960934 6.375 3.5625 C7.25091797 4.04686523 7.25091797 4.04686523 8.14453125 4.54101562 C12.73444456 7.13209572 17.00660758 10.06616782 21.30371094 13.11450195 C26.10095569 16.46918515 31.02739385 19.62640675 35.9375 22.8125 C45.35355754 28.93936208 54.72495522 35.12918706 64.0625 41.375 C71.27755567 46.20105532 78.50370376 51.00408161 85.8125 55.6875 C93.07695725 60.34743146 100.20240875 65.19975143 107.3215332 70.078125 C117.30854028 76.91504297 127.3828192 83.61948242 137.46484375 90.31518555 C138.30144531 90.87117432 139.13804687 91.42716309 140 92 C141.62349365 92.88570679 141.62349365 92.88570679 143.27978516 93.78930664 C146 96 146 96 146.68115234 99.11621094 C146.64973145 100.31020508 146.61831055 101.50419922 146.5859375 102.734375 C146.56660156 104.02988281 146.54726563 105.32539062 146.52734375 106.66015625 C146.477215 108.02346165 146.42642536 109.38674289 146.375 110.75 C146.34489131 112.12884865 146.31751703 113.5077599 146.29296875 114.88671875 C146.22221326 118.25939731 146.12351802 121.62890827 146 125 C141.11889928 121.88488758 136.70279 118.38245888 132.25 114.6875 C127.16514316 110.50795207 122.04869349 106.54625552 116.59765625 102.8515625 C112.57974431 99.98766737 108.78318071 96.85689521 104.94897461 93.75366211 C100.37356602 90.0642216 95.71953253 86.50271967 91 83 C83.72125851 77.59263066 76.64097794 71.96349027 69.58349609 66.27197266 C65.14142716 62.70379826 60.61936437 59.23846549 56.09375 55.77734375 C55.02065486 54.95596228 53.94774416 54.1343398 52.875 53.3125 C52.32972656 52.89484375 51.78445313 52.4771875 51.22265625 52.046875 C46.89128678 48.7158218 42.62857042 45.30456618 38.375 41.875 C32.38499922 37.04858562 26.28328502 32.44140729 20 28 C24.82223922 34.33780012 30.71633651 38.83306447 37.05957031 43.55078125 C40.62429484 46.213112 44.1540786 48.92134412 47.6875 51.625 C48.78505615 52.46430054 48.78505615 52.46430054 49.90478516 53.32055664 C56.56247996 58.41816026 63.18527851 63.53010357 69.50390625 69.046875 C70.12305908 69.58562256 70.74221191 70.12437012 71.38012695 70.67944336 C72.59364405 71.73927047 73.80214717 72.80487668 75.00463867 73.87719727 C78.47979269 76.91776971 81.79250843 79.0139674 86 81 C87.68933922 82.6436814 89.35259924 84.3142876 91 86 C93.37435322 87.85696882 95.77911439 89.66293734 98.20703125 91.44921875 C98.79871094 91.96097656 99.39039063 92.47273437 100 93 C100 93.66 100 94.32 100 95 C95.45015892 94.72425206 93.28436308 92.77600399 90.05859375 89.85546875 C83.5066413 83.95000876 76.47221168 78.54311456 69.5625 73.0625 C68.97138428 72.58981689 68.38026855 72.11713379 67.77124023 71.63012695 C64.96748939 69.41820322 62.29223992 67.41558227 59 66 C59 66.66 59 67.32 59 68 C59.56847656 68.26167969 60.13695312 68.52335937 60.72265625 68.79296875 C66.92006959 72.07770412 72.13539203 77.01674306 77 82 C78.65964565 83.5077646 80.32709989 85.00695513 82 86.5 C85.44119245 89.57652877 88.7905012 92.6835179 92 96 C88.84669446 95.39305845 86.81111133 94.3583335 84.25 92.4375 C83.63640625 91.98246094 83.0228125 91.52742187 82.390625 91.05859375 C81.70226562 90.53458984 81.70226562 90.53458984 81 90 C81.825 90.78375 82.65 91.5675 83.5 92.375 C86 95 86 95 86 97 C87.485 97.495 87.485 97.495 89 98 C89 98.66 89 99.32 89 100 C90.98 100.99 90.98 100.99 93 102 C93 102.66 93 103.32 93 104 C93.66 104 94.32 104 95 104 C95 104.66 95 105.32 95 106 C91.33390455 105.41638391 89.54803439 103.95764866 86.875 101.4375 C83.67088612 98.49076576 80.42166622 95.69149757 77 93 C66.80084746 84.91101695 66.80084746 84.91101695 63 81 C63 80.34 63 79.68 63 79 C62.41734375 78.90074219 61.8346875 78.80148437 61.234375 78.69921875 C58.57250359 77.86622053 57.2795894 76.71209504 55.25 74.8125 C51.82220005 71.68108877 48.2669563 68.92776741 44.46875 66.26171875 C43.9840625 65.84535156 43.499375 65.42898438 43 65 C43 64.34 43 63.68 43 63 C42.4225 62.731875 41.845 62.46375 41.25 62.1875 C38.96587952 60.98199197 37.04568469 59.56864477 35 58 C38.93470135 62.71207396 42.8822812 66.97111356 47.71484375 70.7734375 C48.13894531 71.17820312 48.56304688 71.58296875 49 72 C49 72.66 49 73.32 49 74 C49.58910156 74.26941406 50.17820312 74.53882813 50.78515625 74.81640625 C52.99078067 75.99507327 54.59171772 77.26222879 56.4375 78.9375 C58.47523416 80.73626747 60.27640978 82.16452963 62.625 83.5625 C66.59698636 85.96659701 69.52078738 88.56236213 71 93 C72.32222671 93.68843209 73.65686601 94.35330586 75 95 C76.421875 96.515625 76.421875 96.515625 77.75 98.25 C80.54055023 101.65673772 83.59401279 104.09351872 87.1640625 106.64453125 C89.32563254 108.24041381 91.17915494 110.02741785 93 112 C92.67 112.66 92.34 113.32 92 114 C88.36904219 112.70049931 85.63020304 111.15850208 82.625 108.75 C81.8515625 108.13382813 81.078125 107.51765625 80.28125 106.8828125 C77.63734752 104.70068751 75.0515614 102.46203856 72.5078125 100.1640625 C70.88400043 98.77831907 70.88400043 98.77831907 68 98 C67.67 97.01 67.34 96.02 67 95 C66.34 94.67 65.68 94.34 65 94 C65 95.98 65 97.96 65 100 C60.15792449 96.39217903 55.3486742 92.74411896 50.5625 89.0625 C50.0048999 88.63412842 49.4472998 88.20575684 48.87280273 87.7644043 C44.81694766 84.64337796 40.79733765 81.47899717 36.8046875 78.27734375 C34.91939675 76.81204287 34.91939675 76.81204287 32 76 C32.66 76.94875 33.32 77.8975 34 78.875 C36 82 36 82 36 84 C36.66 84 37.32 84 38 84 C39.65625 85.64453125 39.65625 85.64453125 41.5 87.8125 C42.1084375 88.52019531 42.716875 89.22789062 43.34375 89.95703125 C45 92 45 92 47 95 C46.01 95.66 45.02 96.32 44 97 C43.54109375 96.46890625 43.0821875 95.9378125 42.609375 95.390625 C36.84878792 88.60474421 36.84878792 88.60474421 30 83 C30 82.01 30 81.02 30 80 C27.03 79.01 27.03 79.01 24 78 C24 77.01 24 76.02 24 75 C22.68 75 21.36 75 20 75 C19.01 74.01 19.01 74.01 18 73 C17.34 73.99 16.68 74.98 16 76 C16.99 76.495 16.99 76.495 18 77 C17.34 77.99 16.68 78.98 16 80 C14.12060547 80.2487793 14.12060547 80.2487793 11.8671875 80.07421875 C11.06152344 80.01943359 10.25585938 79.96464844 9.42578125 79.90820312 C8.16314453 79.79895508 8.16314453 79.79895508 6.875 79.6875 C5.60076172 79.5956543 5.60076172 79.5956543 4.30078125 79.50195312 C2.19946335 79.34848609 0.09954876 79.17602278 -2 79 C-3.35439668 76.29120665 -3.06501451 73.99066732 -3 71 C0.3 71 3.6 71 7 71 C5.906875 70.195625 4.81375 69.39125 3.6875 68.5625 C3.07261719 68.11003906 2.45773437 67.65757812 1.82421875 67.19140625 C-0.09677101 65.82663692 -0.09677101 65.82663692 -3 65 C-2.99887207 64.20827393 -2.99774414 63.41654785 -2.99658203 62.60083008 C-3.00870814 59.00385829 -3.06637134 55.40900188 -3.125 51.8125 C-3.12242187 50.56662109 -3.11984375 49.32074219 -3.1171875 48.03710938 C-3.02001528 41.78244192 -3.02001528 41.78244192 -5.26831055 36.15942383 C-7.01860004 34.66627365 -7.01860004 34.66627365 -10 33 C-11.22417382 31.7216374 -12.41722005 30.41199855 -13.5625 29.0625 C-14.14257812 28.38316406 -14.72265625 27.70382812 -15.3203125 27.00390625 C-15.87460937 26.34261719 -16.42890625 25.68132812 -17 25 C-17.51304687 24.39027344 -18.02609375 23.78054688 -18.5546875 23.15234375 C-19.70895728 21.77308919 -20.85545117 20.38733192 -22 19 C-19 19 -19 19 -16.44140625 21.484375 C-15.47343971 22.56551507 -14.51411136 23.65443672 -13.5625 24.75 C-12.60626398 25.82883038 -11.64924664 26.9069688 -10.69140625 27.984375 C-10.2339502 28.50064453 -9.77649414 29.01691406 -9.30517578 29.54882812 C-6.04270173 33.26892001 -6.04270173 33.26892001 -2 36 C1.55436269 24.15212436 1.20341781 12.18229107 0 0 Z \",fill:\"#7A4F3A\",transform:\"translate(480,424)\"})),_path31||(_path31=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.77085938 0.22816406 1.54171875 0.45632812 2.3359375 0.69140625 C3.33882812 0.97886719 4.34171875 1.26632813 5.375 1.5625 C6.87160156 1.99755859 6.87160156 1.99755859 8.3984375 2.44140625 C10.9677164 3.27656482 10.9677164 3.27656482 13 2 C14.89213403 2.40626902 16.76666849 2.89728735 18.625 3.4375 C19.62789062 3.72496094 20.63078125 4.01242188 21.6640625 4.30859375 C22.43492188 4.53675781 23.20578125 4.76492187 24 5 C24 5.99 24 6.98 24 8 C25.98 8.33 27.96 8.66 30 9 C30 10.32 30 11.64 30 13 C26.7 12.67 23.4 12.34 20 12 C20 12.66 20 13.32 20 14 C21.0725 14 22.145 14 23.25 14 C25.83333333 14 28.41666667 14 31 14 C31 13.01 31 12.02 31 11 C34.96 10.67 38.92 10.34 43 10 C43.495 11.485 43.495 11.485 44 13 C46.32891096 14.02700444 46.32891096 14.02700444 49.0625 14.6875 C49.98160156 14.93886719 50.90070313 15.19023437 51.84765625 15.44921875 C52.55792969 15.63097656 53.26820313 15.81273437 54 16 C54 15.34 54 14.68 54 14 C57.06393013 13.74467249 58.63233212 13.78138667 61.3125 15.375 C61.869375 15.91125 62.42625 16.4475 63 17 C63 17.66 63 18.32 63 19 C63.928125 18.95875 64.85625 18.9175 65.8125 18.875 C69.15974225 19.0062644 70.59456087 19.59456087 73 22 C73.6021936 21.02994019 73.6021936 21.02994019 74.21655273 20.0402832 C76 18 76 18 78.10961914 17.43823242 C78.91004639 17.41092041 79.71047363 17.3836084 80.53515625 17.35546875 C81.87416992 17.30036133 81.87416992 17.30036133 83.24023438 17.24414062 C84.63725586 17.21610352 84.63725586 17.21610352 86.0625 17.1875 C87.41891602 17.13045898 87.41891602 17.13045898 88.80273438 17.07226562 C98.69951881 16.73977894 106.43551643 17.49152064 115.54101562 21.53808594 C121.83221392 24.19701418 128.34099162 26.23453565 134.83447266 28.33935547 C137.23579771 29.12038074 139.63149286 29.91720849 142.02734375 30.71484375 C151.92628088 33.96290867 161.70962561 36.37101499 172 38 C172 38.66 172 39.32 172 40 C162.37014049 40.68784711 152.97454232 38.13649023 143.94140625 34.90625 C140.62083902 33.88318015 137.58903026 33.58708349 134.125 33.375 C132.97257813 33.30023438 131.82015625 33.22546875 130.6328125 33.1484375 C129.76398438 33.09945312 128.89515625 33.05046875 128 33 C128 33.99 128 34.98 128 36 C129.06009277 36.05498657 129.06009277 36.05498657 130.14160156 36.11108398 C138.24727424 36.64490759 145.86881294 38.14123777 153.75 40.0625 C154.9359375 40.34416016 156.121875 40.62582031 157.34375 40.91601562 C160.23111875 41.60292997 163.11634762 42.29767871 166 43 C165.34 43.99 164.68 44.98 164 46 C159.87484996 45.68946109 155.74991025 45.37620677 151.625 45.0625 C150.46871094 44.97548828 149.31242188 44.88847656 148.12109375 44.79882812 C141.40368511 44.2864834 134.69938434 43.71129502 128 43 C128.33 43.66 128.66 44.32 129 45 C129.06950541 46.54023996 129.08452357 48.08334988 129.0625 49.625 C129.05347656 50.44226563 129.04445312 51.25953125 129.03515625 52.1015625 C129.01775391 53.04128906 129.01775391 53.04128906 129 54 C128.34 54 127.68 54 127 54 C126.95101562 53.28972656 126.90203125 52.57945312 126.8515625 51.84765625 C126.73941406 50.46900391 126.73941406 50.46900391 126.625 49.0625 C126.52058594 47.68771484 126.52058594 47.68771484 126.4140625 46.28515625 C126.27742187 45.53105469 126.14078125 44.77695312 126 44 C125.34 43.67 124.68 43.34 124 43 C124.33 43.99 124.66 44.98 125 46 C124.01 45.67 123.02 45.34 122 45 C122 44.01 122 43.02 122 42 C118.87802522 43.3089572 118.87802522 43.3089572 117 46 C116.34 45.67 115.68 45.34 115 45 C114.375 42.4375 114.375 42.4375 114 40 C113.01 40.33 112.02 40.66 111 41 C111 40.34 111 39.68 111 39 C108.03 39.66 105.06 40.32 102 41 C101.67 40.34 101.34 39.68 101 39 C100.01 38.67 99.02 38.34 98 38 C98 37.01 98 36.02 98 35 C97.34 35 96.68 35 96 35 C95.67 36.32 95.34 37.64 95 39 C94.01 39 93.02 39 92 39 C91.67 38.34 91.34 37.68 91 37 C88.58354218 36.83312552 88.58354218 36.83312552 86 37 C85.01 37.99 85.01 37.99 84 39 C83.67 38.34 83.34 37.68 83 37 C82.505 37.99 82.505 37.99 82 39 C81.01 39 80.02 39 79 39 C78.67 38.34 78.34 37.68 78 37 C77.01 37.99 76.02 38.98 75 40 C74.505 38.02 74.505 38.02 74 36 C73.34 36 72.68 36 72 36 C72.309375 36.680625 72.61875 37.36125 72.9375 38.0625 C74.13370649 41.36965912 74.59005397 44.51545878 75 48 C73.68 48.33 72.36 48.66 71 49 C71.02320313 48.31292969 71.04640625 47.62585938 71.0703125 46.91796875 C71.08835937 46.01691406 71.10640625 45.11585938 71.125 44.1875 C71.14820313 43.29417969 71.17140625 42.40085937 71.1953125 41.48046875 C71.18285827 38.74597286 71.18285827 38.74597286 69 36 C67.99686093 40.76491057 68.16836673 44.35298149 68.87890625 49.125 C69 51 69 51 68 53 C69.98 53 71.96 53 74 53 C74.495 52.01 74.495 52.01 75 51 C75 51.66 75 52.32 75 53 C75.99 52.67 76.98 52.34 78 52 C80.1875 52.4375 80.1875 52.4375 82 53 C82 52.34 82 51.68 82 51 C82.66 51 83.32 51 84 51 C84.495 52.98 84.495 52.98 85 55 C81.7 55 78.4 55 75 55 C75 55.99 75 56.98 75 58 C78.63 58 82.26 58 86 58 C86 58.66 86 59.32 86 60 C83.11788698 60.96070434 81.30149956 61.10581883 78.3125 61.0625 C77.10013672 61.04896484 77.10013672 61.04896484 75.86328125 61.03515625 C75.24839844 61.02355469 74.63351563 61.01195312 74 61 C74.32164617 62.95965452 74.32164617 62.95965452 75 65 C76.66279327 66.0064275 78.32983484 67.00585407 80 68 C82.27272629 70.87878663 83.09662353 72.13038823 82.6875 75.8125 C82.460625 76.534375 82.23375 77.25625 82 78 C77.74433453 79.16063604 74.3164922 78.76173392 70 78 C70 78.66 70 79.32 70 80 C68.02 80.66 66.04 81.32 64 82 C64.33 78.7 64.66 75.4 65 72 C57.08 72.495 57.08 72.495 49 73 C49 67.39 49 61.78 49 56 C51.31 56 53.62 56 56 56 C56 60.95 56 65.9 56 71 C59.3 71 62.6 71 66 71 C66.66 69.02 67.32 67.04 68 65 C68.66 65 69.32 65 70 65 C70 63.68 70 62.36 70 61 C67.03 61 64.06 61 61 61 C61 60.01 61 59.02 61 58 C64.3 58 67.6 58 71 58 C71 57.01 71 56.02 71 55 C66.71 55 62.42 55 58 55 C58.33 54.01 58.66 53.02 59 52 C61.64 52.66 64.28 53.32 67 54 C66.505 52.02 66.505 52.02 66 50 C65.34 50 64.68 50 64 50 C63.505 50.99 63.505 50.99 63 52 C62.505 49.03 62.505 49.03 62 46 C61.34 46 60.68 46 60 46 C60 44.68 60 43.36 60 42 C61.32 42.66 62.64 43.32 64 44 C63.01 39.545 63.01 39.545 62 35 C59.41703983 34.80477627 56.83395921 34.61855597 54.25 34.4375 C53.52039063 34.38142578 52.79078125 34.32535156 52.0390625 34.26757812 C48.45046349 34.02290092 45.44972775 34.00333741 42 35 C42 35.99 42 36.98 42 38 C43.485 38.495 43.485 38.495 45 39 C45.99 44.445 45.99 44.445 47 50 C48.98 50.495 48.98 50.495 51 51 C51 51.66 51 52.32 51 53 C51.66 52.67 52.32 52.34 53 52 C52.505 48.535 52.505 48.535 52 45 C52.99 44.67 53.98 44.34 55 44 C55.99 48.95 55.99 48.95 57 54 C52.38 54 47.76 54 43 54 C43.33 52.35 43.66 50.7 44 49 C43.91635155 46.78184754 43.91635155 46.78184754 43.5625 44.6875 C43.376875 43.470625 43.19125 42.25375 43 41 C41.515 40.505 41.515 40.505 40 40 C39.505 40.99 39.505 40.99 39 42 C37.93453047 38.8035914 37.92572162 36.34252724 38 33 C37.34 32.67 36.68 32.34 36 32 C36 31.34 36 30.68 36 30 C35.34 30 34.68 30 34 30 C33.67 30.66 33.34 31.32 33 32 C33.33 32.99 33.66 33.98 34 35 C33.72230092 37.3406065 33.39460023 39.67624308 33 42 C31.02 41.505 31.02 41.505 29 41 C28.505 39.02 28.505 39.02 28 37 C28.99 37 29.98 37 31 37 C31.33 36.01 31.66 35.02 32 34 C31.01 34 30.02 34 29 34 C29 32.68 29 31.36 29 30 C27.80375 30.185625 26.6075 30.37125 25.375 30.5625 C21.71716293 31.0311197 18.62137834 30.81481013 15 30 C15 32.31 15 34.62 15 37 C14.01 37.495 14.01 37.495 13 38 C13 37.34 13 36.68 13 36 C12.34 36 11.68 36 11 36 C11.66 37.65 12.32 39.3 13 41 C16.13367555 37.22256121 16.13367555 37.22256121 16.75 32.625 C16.5025 32.08875 16.255 31.5525 16 31 C16.99 31.99 17.98 32.98 19 34 C19.66 33.67 20.32 33.34 21 33 C21.99 33.495 21.99 33.495 23 34 C21.68 39.61 20.36 45.22 19 51 C19.66 51 20.32 51 21 51 C21 50.01 21 49.02 21 48 C21.99 48 22.98 48 24 48 C24.66 49.98 25.32 51.96 26 54 C24.02 54 22.04 54 20 54 C20 53.34 20 52.68 20 52 C19.34 52 18.68 52 18 52 C18 52.99 18 53.98 18 55 C17.01 55 16.02 55 15 55 C14.505 50.545 14.505 50.545 14 46 C14.99 46 15.98 46 17 46 C17 45.34 17 44.68 17 44 C17 42.68 17 41.36 17 40 C16.67 40.99 16.34 41.98 16 43 C13.4375 44.6875 13.4375 44.6875 11 46 C10.505 44.02 10.505 44.02 10 42 C9.9071875 43.8253125 9.9071875 43.8253125 9.8125 45.6875 C9.77769531 46.37199219 9.74289063 47.05648437 9.70703125 47.76171875 C9.93255829 50.64099243 9.93255829 50.64099243 13 55 C-1.52 55 -16.04 55 -31 55 C-33.25503356 47.10738255 -33.25503356 47.10738255 -33.625 42.75 C-33.73714844 41.50476563 -33.73714844 41.50476563 -33.8515625 40.234375 C-33.96726679 38.492721 -34 36.7454931 -34 35 C-34.15127402 33.43593472 -34.31902522 31.87340748 -34.5 30.3125 C-34.5928125 29.50425781 -34.685625 28.69601563 -34.78125 27.86328125 C-34.8534375 27.24839844 -34.925625 26.63351563 -35 26 C-33.02 26.66 -31.04 27.32 -29 28 C-28.91055658 31.84606725 -29.18850506 35.24683592 -30 39 C-30 39.99 -30 40.98 -30 42 C-30.66 42 -31.32 42 -32 42 C-32 42.66 -32 43.32 -32 44 C-31.38125 43.649375 -30.7625 43.29875 -30.125 42.9375 C-29.42375 42.628125 -28.7225 42.31875 -28 42 C-27.34 42.33 -26.68 42.66 -26 43 C-26.33 39.7 -26.66 36.4 -27 33 C-25.68 33.33 -24.36 33.66 -23 34 C-23.33 32.68 -23.66 31.36 -24 30 C-24.99 30.33 -25.98 30.66 -27 31 C-27 30.01 -27 29.02 -27 28 C-26.01 28 -25.02 28 -24 28 C-24.33 27.01 -24.66 26.02 -25 25 C-27.50447516 23.78130071 -27.50447516 23.78130071 -30 23 C-29.75 20.625 -29.75 20.625 -29 18 C-25.88390372 15.57636956 -22.82627315 15.82607849 -19 16 C-19 14.02 -19 12.04 -19 10 C-18.34 10 -17.68 10 -17 10 C-17 11.32 -17 12.64 -17 14 C-15.68 14 -14.36 14 -13 14 C-13 16 -13 18 -13 20 C-12.01 19.34 -11.02 18.68 -10 18 C-7.67612053 17.60612212 -5.34206251 17.26513915 -3 17 C-3.020625 15.700625 -3.04125 14.40125 -3.0625 13.0625 C-3.08399454 11.70834367 -3.07148199 10.35243917 -3 9 C-2.67 8.67 -2.34 8.34 -2 8 C-1.835 6.845 -1.67 5.69 -1.5 4.5 C-1 1 -1 1 0 0 Z M60 48 C62 49 62 49 62 49 Z \",fill:\"#312927\",transform:\"translate(85,214)\"})),_path32||(_path32=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 15.18 0 30.36 0 46 C-6.249375 48.02125 -12.49875 50.0425 -18.9375 52.125 C-46.14026897 60.9619012 -73.27684097 70.01929593 -100.15405273 79.80761719 C-109.188908 83.0935759 -118.27851596 86.21331141 -127.37524414 89.32324219 C-135.89234801 92.24430994 -144.36297457 95.27409122 -152.77416992 98.48852539 C-158.44932882 100.60888344 -164.04067116 101.94633423 -170 103 C-171.31363525 103.2638147 -171.31363525 103.2638147 -172.65380859 103.53295898 C-176.08437843 104.21586014 -179.52709942 104.58796095 -183 105 C-183 104.34 -183 103.68 -183 103 C-185.97 103.495 -185.97 103.495 -189 104 C-189 103.34 -189 102.68 -189 102 C-185.65350782 100.3382222 -182.29663781 98.69854519 -178.9375 97.0625 C-177.99455078 96.59392578 -177.05160156 96.12535156 -176.08007812 95.64257812 C-170.98279232 93.17385782 -166.67317473 91.3698186 -161 91 C-161 90.34 -161 89.68 -161 89 C-160.45472656 88.82984375 -159.90945313 88.6596875 -159.34765625 88.484375 C-158.59355469 88.24203125 -157.83945312 87.9996875 -157.0625 87.75 C-156.33160156 87.51796875 -155.60070312 87.2859375 -154.84765625 87.046875 C-151.66163277 85.87560711 -148.60324573 84.5032117 -145.5090332 83.11035156 C-141.06661846 81.14439824 -136.56226636 79.32988417 -132.0625 77.5 C-131.13759766 77.12230469 -130.21269531 76.74460937 -129.25976562 76.35546875 C-123.99213965 74.2070747 -118.71567158 72.08193413 -113.43188477 69.97363281 C-111.03349209 69.01340894 -108.63933958 68.04328485 -106.24609375 67.0703125 C-97.39212493 63.48303059 -88.53557198 60.00779234 -79.46850586 56.99072266 C-74.47224038 55.29570529 -70.49738179 53.08900493 -66.25 50 C-62.8911387 47.93300843 -59.83532026 46.86383518 -56.09375 45.72265625 C-53.83371305 45.03270332 -53.83371305 45.03270332 -51.4375 43.375 C-47.98718029 41.42866581 -44.93305213 41.3333095 -41 41 C-41 40.01 -41 39.02 -41 38 C-44.465 38.495 -44.465 38.495 -48 39 C-48 38.34 -48 37.68 -48 37 C-48.72445312 37.34933594 -49.44890625 37.69867188 -50.1953125 38.05859375 C-59.79789104 42.57820738 -59.79789104 42.57820738 -65 43 C-65 43.66 -65 44.32 -65 45 C-66.52367187 45.43699219 -66.52367187 45.43699219 -68.078125 45.8828125 C-75.80971218 48.16219195 -82.89508891 50.73065151 -90.046875 54.51171875 C-96.66078561 57.84491973 -103.67725892 60.74582888 -111 62 C-111 62.66 -111 63.32 -111 64 C-112.21623047 64.45439453 -112.21623047 64.45439453 -113.45703125 64.91796875 C-120.77591966 67.6870476 -127.9118483 70.68942841 -135 74 C-138.65832759 75.68554057 -142.3260158 77.34887964 -146 79 C-147.19753906 79.54398437 -148.39507812 80.08796875 -149.62890625 80.6484375 C-150.8772498 81.20392206 -152.12594403 81.75861924 -153.375 82.3125 C-154.51710938 82.82425781 -155.65921875 83.33601563 -156.8359375 83.86328125 C-159.83577232 84.94099968 -161.85448402 85.25329061 -165 85 C-164.34 83.68 -163.68 82.36 -163 81 C-163.598125 81.515625 -164.19625 82.03125 -164.8125 82.5625 C-165.534375 83.036875 -166.25625 83.51125 -167 84 C-168.485 83.505 -168.485 83.505 -170 83 C-169.505 82.38125 -169.01 81.7625 -168.5 81.125 C-166.80777227 79.16119096 -166.80777227 79.16119096 -167 77 C-166.29617188 76.67837891 -165.59234375 76.35675781 -164.8671875 76.02539062 C-148.69878434 68.67973689 -148.69878434 68.67973689 -132.75 60.875 C-126.28519013 57.58038288 -119.72448507 54.51530027 -113.125 51.5 C-112.15401367 51.05382324 -111.18302734 50.60764648 -110.18261719 50.14794922 C-109.27930664 49.73818848 -108.37599609 49.32842773 -107.4453125 48.90625 C-106.63594238 48.53822266 -105.82657227 48.17019531 -104.99267578 47.79101562 C-103 47 -103 47 -101 47 C-101 46.34 -101 45.68 -101 45 C-100.46632813 44.84144531 -99.93265625 44.68289062 -99.3828125 44.51953125 C-93.22967444 42.59268352 -87.71069824 39.96800916 -82 37 C-71.32641096 31.5296266 -60.5062756 26.43920762 -49.60253906 21.44335938 C-39.89827392 16.9845662 -30.3483627 12.276829 -20.859375 7.37890625 C-18.40857216 6.19703002 -16.09518449 5.28983876 -13.5 4.5 C-10.6760151 3.60145935 -8.30021843 2.65010921 -5.625 1.3125 C-3 0 -3 0 0 0 Z \",fill:\"#1B1112\",transform:\"translate(626,107)\"})),_path33||(_path33=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.495 0.99 0.495 0.99 1 2 C3.75069134 2.39302445 3.75069134 2.39302445 6.9375 2.5 C12.77847309 2.77847309 12.77847309 2.77847309 15 5 C14.34 5 13.68 5 13 5 C13.29648438 6.20527344 13.59296875 7.41054688 13.8984375 8.65234375 C15.28622992 14.89740962 15.93586866 21.20913094 16.625 27.5625 C16.82609375 29.36170898 16.82609375 29.36170898 17.03125 31.19726562 C17.35852543 34.13105608 17.68133322 37.06526416 18 40 C18.99 40 19.98 40 21 40 C21 35.71 21 31.42 21 27 C21.33 27 21.66 27 22 27 C22.67453101 34.68483539 23.1567564 42.28410183 23 50 C23.66 50 24.32 50 25 50 C25.03758423 48.78884521 25.03758423 48.78884521 25.07592773 47.55322266 C25.19165487 43.91031083 25.31448635 40.26767274 25.4375 36.625 C25.47681641 35.35398437 25.51613281 34.08296875 25.55664062 32.7734375 C25.59853516 31.56171875 25.64042969 30.35 25.68359375 29.1015625 C25.72025146 27.98088379 25.75690918 26.86020508 25.79467773 25.70556641 C26 23 26 23 27 21 C27.66 21 28.32 21 29 21 C30.78409802 24.06246747 31.22880021 26.22079273 31.125 29.75 C31.10695313 30.54921875 31.08890625 31.3484375 31.0703125 32.171875 C31.04710937 32.77515625 31.02390625 33.3784375 31 34 C31.99 33.67 32.98 33.34 34 33 C34.495 32.01 34.495 32.01 35 31 C36 29 36 29 39 28 C40.48300663 27.90869045 41.9697522 27.87210229 43.45556641 27.87060547 C44.35304596 27.86745331 45.25052551 27.86430115 46.17520142 27.86105347 C47.14090057 27.8630777 48.10659973 27.86510193 49.1015625 27.8671875 C50.09376801 27.86623077 51.08597351 27.86527405 52.10824585 27.86428833 C54.20465152 27.86360787 56.30105931 27.86545281 58.39746094 27.86962891 C61.61918829 27.87499033 64.84077693 27.86967356 68.0625 27.86328125 C70.09635448 27.86394183 72.13020887 27.86522258 74.1640625 27.8671875 C75.61868393 27.86415115 75.61868393 27.86415115 77.10269165 27.86105347 C77.99386688 27.86420563 78.88504211 27.86735779 79.80322266 27.87060547 C80.5913736 27.87140106 81.37952454 27.87219666 82.19155884 27.87301636 C84 28 84 28 85 29 C85.04092937 31.33297433 85.04241723 33.66705225 85 36 C80.37025009 37.77401632 76.03955157 38.39641621 71.125 38.625 C70.09246094 38.68300781 70.09246094 38.68300781 69.0390625 38.7421875 C67.35976754 38.83548166 65.67992233 38.91878238 64 39 C64 37.68 64 36.36 64 35 C63.34 36.32 62.68 37.64 62 39 C61.67 37.68 61.34 36.36 61 35 C60.01 37.31 59.02 39.62 58 42 C43.645 42.495 43.645 42.495 29 43 C27.88220437 46.35338688 27.79732944 49.03251233 27.75 52.5625 C27.72421875 53.71878906 27.6984375 54.87507813 27.671875 56.06640625 C27.78015625 57.03449219 27.8884375 58.00257813 28 59 C29.485 59.99 29.485 59.99 31 61 C29.35 61 27.7 61 26 61 C26.10828125 62.05574219 26.10828125 62.05574219 26.21875 63.1328125 C26.96934712 71.11833184 27.08020124 78.97987589 27 87 C31.62 87 36.24 87 41 87 C37.36091722 90.63908278 33.70869957 92.84178708 28.625 93.3125 C26 93 26 93 25 92 C24.84417697 90.65984779 24.74955858 89.31241097 24.68359375 87.96484375 C24.64169922 87.15595703 24.59980469 86.34707031 24.55664062 85.51367188 C24.51732422 84.66353516 24.47800781 83.81339844 24.4375 82.9375 C24.39431641 82.08349609 24.35113281 81.22949219 24.30664062 80.34960938 C24.20023298 78.23327963 24.09958269 76.11666187 24 74 C23.34 74 22.68 74 22 74 C21.896875 75.216875 21.79375 76.43375 21.6875 77.6875 C21.27726653 81.43738055 20.55199451 84.97040906 19.625 88.625 C17.20720832 98.59392433 16.21620717 108.82844104 15 119 C14.67 119 14.34 119 14 119 C13.7827615 107.54317557 13.89138886 96.4043173 15.5625 85.0546875 C16.07088789 82.01936033 16.07088789 82.01936033 16 79 C15.731875 80.134375 15.46375 81.26875 15.1875 82.4375 C14.795625 83.613125 14.40375 84.78875 14 86 C12.515 86.495 12.515 86.495 11 87 C10.80664062 86.21753906 10.61328125 85.43507813 10.4140625 84.62890625 C10.15367187 83.61699219 9.89328125 82.60507812 9.625 81.5625 C9.36976563 80.55316406 9.11453125 79.54382813 8.8515625 78.50390625 C8.27426046 75.84429676 8.27426046 75.84429676 6 75 C2.40224286 68.30756194 3.08935363 63.1397838 5 56 C0.71 55.67 -3.58 55.34 -8 55 C-8.33 55.99 -8.66 56.98 -9 58 C-11.5625 59.6875 -11.5625 59.6875 -14 61 C-13.505 65.95 -13.505 65.95 -13 71 C-13.99 71.495 -13.99 71.495 -15 72 C-15 71.34 -15 70.68 -15 70 C-15.99 69.505 -15.99 69.505 -17 69 C-17 65.37 -17 61.74 -17 58 C-17.99 58 -18.98 58 -20 58 C-20.66 59.98 -21.32 61.96 -22 64 C-23.125 60.25 -23.125 60.25 -22 58 C-24.64752004 60.57784846 -26.94432065 62.91648098 -29 66 C-29.75 63.875 -29.75 63.875 -30 61 C-28.0625 57.6875 -28.0625 57.6875 -26 55 C-26.53802246 55.21148682 -27.07604492 55.42297363 -27.63037109 55.64086914 C-34.23374331 58.06257949 -40.09660954 58.43388307 -47.0703125 58.43945312 C-52.88754873 58.57638482 -56.20693829 59.6448568 -61 63 C-61.65484375 63.74765625 -62.3096875 64.4953125 -62.984375 65.265625 C-65 67 -65 67 -68.453125 67.171875 C-69.70609375 67.03265625 -70.9590625 66.8934375 -72.25 66.75 C-73.51328125 66.62109375 -74.7765625 66.4921875 -76.078125 66.359375 C-77.52445312 66.18148437 -77.52445312 66.18148437 -79 66 C-78.5153125 65.030625 -78.030625 64.06125 -77.53125 63.0625 C-77.05123535 62.102229 -77.05123535 62.102229 -76.56152344 61.12255859 C-75.84654807 59.69293673 -75.13104269 58.26357981 -74.41503906 56.83447266 C-72.54039576 53.09091641 -70.67420595 49.34367058 -68.828125 45.5859375 C-68.47943359 44.87953125 -68.13074219 44.173125 -67.77148438 43.4453125 C-67.10800482 42.10059294 -66.44766406 40.75431849 -65.79101562 39.40625 C-63.12804038 34.02447193 -60.4883471 28.8010511 -55.625 25.125 C-51.68648103 21.92654831 -48.87618764 18.15098143 -46 14 C-45.34515625 14.42410156 -44.6903125 14.84820312 -44.015625 15.28515625 C-41.02199582 17.20902811 -38.01433143 19.10872652 -35 21 C-33.9584375 21.65613281 -32.916875 22.31226563 -31.84375 22.98828125 C-24.41559567 27.54087174 -24.41559567 27.54087174 -16 29 C-16 26.69 -16 24.38 -16 22 C-15.34 22 -14.68 22 -14 22 C-13.67 20.35 -13.34 18.7 -13 17 C-14.32 17 -15.64 17 -17 17 C-17.75995175 4.5199035 -17.75995175 4.5199035 -15.25 -0.5 C-10.14391855 -2.85665298 -5.26043665 -1.67010795 0 0 Z \",fill:\"#09140F\",transform:\"translate(185,322)\"})),_path34||(_path34=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.12508244 3.18762365 2.5020163 5.26512223 3 9 C3.825 9.10957031 4.65 9.21914063 5.5 9.33203125 C11.69623146 10.18262999 17.80717471 11.13538726 23.9375 12.375 C37.15342585 14.99593037 50.63691457 16.34639275 64 18 C65.2698877 18.16951172 66.53977539 18.33902344 67.84814453 18.51367188 C72.36504719 19.07725183 76.88750965 19.37119997 81.4296875 19.6484375 C83.29948467 19.76814322 85.16927612 19.88793829 87.0390625 20.0078125 C89.90876218 20.18902641 92.77852758 20.36902143 95.6484375 20.546875 C114.13922033 21.69927506 132.5317022 23.37044431 151 25 C151 51.4 151 77.8 151 105 C146.04423274 104.17403879 143.13614533 103.34584284 138.75 101.25 C137.62722656 100.71632813 136.50445313 100.18265625 135.34765625 99.6328125 C130.88158828 97.45449697 126.42631067 95.25811786 122 93 C126.17587745 91.60804085 128.13474776 93.17676781 132 95 C132.02913821 91.4375173 132.04684529 87.87506546 132.0625 84.3125 C132.07087891 83.30509766 132.07925781 82.29769531 132.08789062 81.25976562 C132.09111328 80.28330078 132.09433594 79.30683594 132.09765625 78.30078125 C132.10289307 77.40528564 132.10812988 76.50979004 132.11352539 75.5871582 C131.99840198 72.96358241 131.58234285 70.55706947 131 68 C130.25314941 67.88406494 129.50629883 67.76812988 128.73681641 67.64868164 C125.3656636 67.12339923 121.99533308 66.59301539 118.625 66.0625 C117.449375 65.88009766 116.27375 65.69769531 115.0625 65.50976562 C113.94101562 65.33251953 112.81953125 65.15527344 111.6640625 64.97265625 C110.62717285 64.81031494 109.5902832 64.64797363 108.52197266 64.48071289 C106 64 106 64 104 63 C103 61.328125 103 61.328125 102 59.25 C101.649375 58.528125 101.29875 57.80625 100.9375 57.0625 C100 55 100 55 99 52.25 C97.72989549 49.39226485 96.54345131 47.83693706 94 46 C90.97919865 45.68291229 90.97919865 45.68291229 88 47 C82.41359336 52.58640664 80.87394819 57.38777195 80.24609375 65.01171875 C80 67 80 67 79 69 C77.515 69.495 77.515 69.495 76 70 C77.65 70.33 79.3 70.66 81 71 C81 71.66 81 72.32 81 73 C73.34167083 72.70544888 67.65738822 69.62827658 61 66 C61 65.01 61 64.02 61 63 C61.99 63 62.98 63 64 63 C64.28875 62.2575 64.5775 61.515 64.875 60.75 C66 58 66 58 67.0625 56.125 C68.37123644 53.15853073 68.63046254 50.20265802 69 47 C67.35 47 65.7 47 64 47 C65.32 46.67 66.64 46.34 68 46 C67.37189827 43.02982306 67.37189827 43.02982306 66 40 C61.77502786 37.63145501 57.41303558 37.57770394 52.6875 37.375 C51.94693359 37.33632813 51.20636719 37.29765625 50.44335938 37.2578125 C48.62928691 37.16418295 46.81467884 37.08103149 45 37 C44.67 38.32 44.34 39.64 44 41 C38.72 41 33.44 41 28 41 C28 40.01 28 39.02 28 38 C24.93448401 37.20497132 21.85676844 36.55067798 18.75 35.9375 C17.1825 35.628125 15.615 35.31875 14 35 C14 30.38 14 25.76 14 21 C19.28798182 21.41474367 22.11690718 22.35224614 26 26 C25.49396008 28.16874252 25.00016187 29.99967627 24 32 C25.98 32.66 27.96 33.32 30 34 C30.33 33.01 30.66 32.02 31 31 C30.34 31 29.68 31 29 31 C28.875 28.625 28.875 28.625 29 26 C31 24 31 24 33.625 23.875 C34.40875 23.91625 35.1925 23.9575 36 24 C36.495 25.98 36.495 25.98 37 28 C40.96 28 44.92 28 49 28 C49 27.01 49 26.02 49 25 C48.44054687 24.96261719 47.88109375 24.92523438 47.3046875 24.88671875 C42.19775974 24.46798352 37.31302211 23.68889747 32.3125 22.5625 C25.91995879 21.1255801 19.57941552 20.20529149 13.08203125 19.4296875 C10 19 10 19 7 18 C5.3125 14.4375 5.3125 14.4375 4 11 C3.4225 11.2475 2.845 11.495 2.25 11.75 C1.13625 11.87375 1.13625 11.87375 0 12 C-2.25 10.0625 -2.25 10.0625 -4 8 C-2.35 8 -0.7 8 1 8 C0.67 7.34 0.34 6.68 0 6 C-0.039992 4.00039988 -0.04346799 1.99952758 0 0 Z \",fill:\"#99694D\",transform:\"translate(475,282)\"})),_path35||(_path35=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.99 0 1.98 0 3 C1.98 3 3.96 3 6 3 C6 3.33 6 3.66 6 4 C3.36 4.33 0.72 4.66 -2 5 C-1.505 6.98 -1.505 6.98 -1 9 C3.95 9 8.9 9 14 9 C14.33 6.69 14.66 4.38 15 2 C17.84428029 -1.03440598 21.81276783 -1.85609307 25.8359375 -2.34375 C31.4303058 -2.52372968 33.32005325 -2.50996006 38 1 C34.37 1.33 30.74 1.66 27 2 C27 3.32 27 4.64 27 6 C27.99 6.495 27.99 6.495 29 7 C29 7.33 29 7.66 29 8 C32.3 8 35.6 8 39 8 C39.33 7.34 39.66 6.68 40 6 C43.28519475 4.90493508 45.73663415 4.90039392 49.1875 4.9375 C50.81751953 4.95103516 50.81751953 4.95103516 52.48046875 4.96484375 C53.31191406 4.97644531 54.14335937 4.98804688 55 5 C55 5.33 55 5.66 55 6 C51.7 6 48.4 6 45 6 C45 7.32 45 8.64 45 10 C48.3 10.33 51.6 10.66 55 11 C55 12.65 55 14.3 55 16 C57.97 16.33 60.94 16.66 64 17 C64 17.99 64 18.98 64 20 C57.565 19.505 57.565 19.505 51 19 C51 18.34 51 17.68 51 17 C50.34 17 49.68 17 49 17 C48.690625 17.804375 48.38125 18.60875 48.0625 19.4375 C47 22 47 22 46 23 C44.00041636 23.04080783 41.99954746 23.04254356 40 23 C40.33 22.01 40.66 21.02 41 20 C41.99 19.505 41.99 19.505 43 19 C40.35409469 18.97265999 37.70848066 18.95299947 35.0625 18.9375 C34.32708984 18.92912109 33.59167969 18.92074219 32.83398438 18.91210938 C29.08096825 18.89572066 25.43328382 19.01912319 21.70703125 19.48046875 C16.02000755 20.17117284 10.34905598 20.29812013 4.625 20.375 C3.54605469 20.41238281 2.46710938 20.44976562 1.35546875 20.48828125 C-1.51624688 20.52054772 -4.17266283 20.50584571 -7 20 C-9.30211666 17.52017609 -10 16.3513389 -10 13 C-11.65 13 -13.3 13 -15 13 C-15.495 11.02 -15.495 11.02 -16 9 C-17.26457031 9.01740234 -17.26457031 9.01740234 -18.5546875 9.03515625 C-19.65039062 9.04417969 -20.74609375 9.05320312 -21.875 9.0625 C-23.51082031 9.07990234 -23.51082031 9.07990234 -25.1796875 9.09765625 C-28 9 -28 9 -30 8 C-30 10.64 -30 13.28 -30 16 C-23.73 16 -17.46 16 -11 16 C-11 17.98 -11 19.96 -11 22 C-21.23 22 -31.46 22 -42 22 C-42 21.34 -42 20.68 -42 20 C-43.32 20 -44.64 20 -46 20 C-46 20.66 -46 21.32 -46 22 C-46.66 22 -47.32 22 -48 22 C-48 22.66 -48 23.32 -48 24 C-48.66 24 -49.32 24 -50 24 C-50.75780257 34.96449251 -50.75780257 34.96449251 -46.2890625 44.64453125 C-45.02202103 46.13063231 -45.02202103 46.13063231 -43 47 C-43 47.66 -43 48.32 -43 49 C-48.45461169 50.38529821 -53.36718401 51.2396943 -59 51 C-59.33 49.35 -59.66 47.7 -60 46 C-60.66 46 -61.32 46 -62 46 C-62.33 47.65 -62.66 49.3 -63 51 C-62.34 51 -61.68 51 -61 51 C-61 51.66 -61 52.32 -61 53 C-62.65 52.67 -64.3 52.34 -66 52 C-66.495 50.02 -66.495 50.02 -67 48 C-67.11069824 48.55349121 -67.22139648 49.10698242 -67.33544922 49.67724609 C-69.22363281 59.11816406 -71.11181641 68.55908203 -73 78 C-71.64455078 78.18175781 -71.64455078 78.18175781 -70.26171875 78.3671875 C-69.08222656 78.53476562 -67.90273437 78.70234375 -66.6875 78.875 C-65.51574219 79.03742188 -64.34398437 79.19984375 -63.13671875 79.3671875 C-60 80 -60 80 -57 82 C-56.52874538 87.56080455 -57.41150642 91.63883418 -59 97 C-59.16847091 100.29219428 -59.16847091 100.29219428 -59 103 C-59.66 103 -60.32 103 -61 103 C-61.22728463 96.95170347 -60.91543597 91.57439911 -59.33984375 85.71484375 C-59.17162109 84.86599609 -59.17162109 84.86599609 -59 84 C-60.56801381 82.43198619 -62.26145757 82.72884334 -64.4375 82.5625 C-69.72016067 82.08988101 -74.82362184 81.13439777 -80 80 C-80.33 79.01 -80.66 78.02 -81 77 C-78.03 77.495 -78.03 77.495 -75 78 C-75.01160156 77.30777344 -75.02320313 76.61554688 -75.03515625 75.90234375 C-75.11216762 67.55211039 -74.63658548 59.32108166 -74 51 C-74.66 51.66 -75.32 52.32 -76 53 C-76.99 52.505 -76.99 52.505 -78 52 C-78.37890625 49.8203125 -78.37890625 49.8203125 -78.5625 47.125 C-78.77628346 44.13203161 -79.04428957 41.8671313 -80 39 C-79.34 39 -78.68 39 -78 39 C-77.855625 38.21625 -77.71125 37.4325 -77.5625 36.625 C-77 34 -77 34 -76 32 C-75.34 32 -74.68 32 -74 32 C-74 31.34 -74 30.68 -74 30 C-74.66 30 -75.32 30 -76 30 C-76 29.34 -76 28.68 -76 28 C-81.28 28.33 -86.56 28.66 -92 29 C-92 28.01 -92 27.02 -92 26 C-98.59268543 28.10965934 -101.27205547 31.28910625 -105 37 C-105.598125 37.78375 -106.19625 38.5675 -106.8125 39.375 C-108.34971864 42.77306226 -108.50323172 45.89689056 -108.69140625 49.59765625 C-109 52 -109 52 -109.98046875 53.91015625 C-111.35622653 56.73019614 -111.50278322 59.2557059 -111.75 62.375 C-111.84796875 63.47585938 -111.9459375 64.57671875 -112.046875 65.7109375 C-111.99704147 69.20758997 -111.1277264 71.71850106 -110 75 C-110.33 75.99 -110.66 76.98 -111 78 C-115.73798846 79.50036301 -118.96650066 80 -124 80 C-124 56.24 -124 32.48 -124 8 C-114.76 7.01 -105.52 6.02 -96 5 C-89.58740233 4.25737271 -83.17573718 3.51244263 -76.76553345 2.75033569 C-22.70778101 -3.65412568 -22.70778101 -3.65412568 0 0 Z \",fill:\"#543D32\",transform:\"translate(124,300)\"})),_path36||(_path36=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-3.46537085 2.31024723 -6.82941667 3.1499932 -10.8125 4.125 C-11.51181641 4.30675781 -12.21113281 4.48851562 -12.93164062 4.67578125 C-17.04458953 5.69920913 -20.72734085 6.20122414 -25 6 C-25 6.66 -25 7.32 -25 8 C-30.36439644 10.68219822 -34.01006953 11.3152595 -40 11 C-38.43386613 17.83751127 -36.58848301 24.53423313 -34.375 31.1875 C-34.04786011 32.17665405 -34.04786011 32.17665405 -33.71411133 33.18579102 C-32.80401599 36.3440438 -32.80401599 36.3440438 -31 39 C-29.39204323 45.6956325 -28.72828812 52.40678114 -28.44140625 59.2734375 C-27.92877139 62.43997848 -26.67971429 64.29355498 -25 67 C-24.375 69.4375 -24.375 69.4375 -24 72 C-23.11992256 77.48929659 -21.89727868 82.84883239 -20.5859375 88.25 C-20 91 -20 91 -20 94 C-19.01 94.33 -18.02 94.66 -17 95 C-16.80664062 96.02480469 -16.61328125 97.04960938 -16.4140625 98.10546875 C-16.15130137 99.46619601 -15.88826602 100.82687033 -15.625 102.1875 C-15.49867188 102.86103516 -15.37234375 103.53457031 -15.2421875 104.22851562 C-14.6680861 107.17078531 -14.04157363 109.8990144 -12.8984375 112.67578125 C-12 115 -12 115 -12 120 C-29.16 120 -46.32 120 -64 120 C-64.28875 115.58625 -64.5775 111.1725 -64.875 106.625 C-65.10852932 103.14727069 -65.34414337 99.66969811 -65.58129883 96.19221497 C-65.87663291 91.85139339 -66.15949016 87.50994184 -66.4375 83.16796875 C-67.25791533 70.98053195 -68.70432535 59.07576135 -70.67260742 47.02124023 C-72.31781 36.28772793 -72.35131543 25.71975126 -71.94995117 14.88818359 C-71.78364268 12.98698322 -71.78364268 12.98698322 -73 12 C-73.04092937 9.66702567 -73.04241723 7.33294775 -73 5 C-69.84613452 4.09597697 -66.88128028 3.79304317 -63.6081543 3.62695312 C-62.52990891 3.57019409 -61.45166351 3.51343506 -60.34074402 3.45495605 C-58.60006401 3.36897156 -58.60006401 3.36897156 -56.82421875 3.28125 C-55.0264373 3.18704773 -55.0264373 3.18704773 -53.19233704 3.09094238 C-49.35757334 2.89024599 -45.5225763 2.69462514 -41.6875 2.5 C-37.86315146 2.30511341 -34.03888391 2.10903419 -30.21479797 1.90905762 C-27.83538765 1.78467634 -25.45582247 1.66321388 -23.07609558 1.54504395 C-15.35750039 1.14226814 -7.71773844 -0.15750487 0 0 Z \",fill:\"#EDC19A\",transform:\"translate(397,506)\"})),_path37||(_path37=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.37930507 1.67898325 8.26550599 3.85976774 12.25 6.3125 C17.76733118 9.66932067 23.3142317 12.93369135 29 16 C29 16.66 29 17.32 29 18 C29.53625 18.0825 30.0725 18.165 30.625 18.25 C33.82904327 19.26180314 36.23377725 21.1166143 39 23 C39.99 23.33 40.98 23.66 42 24 C42 24.66 42 25.32 42 26 C42.9075 26.268125 43.815 26.53625 44.75 26.8125 C47.77470911 27.91768218 49.49835774 29.0632447 52 31 C52.721875 31.26296875 53.44375 31.5259375 54.1875 31.796875 C57.77341532 33.33084989 60.77948935 35.49787447 63.9375 37.75 C70.37413856 42.25737828 76.91899284 46.55400744 83.5625 50.75 C91.49102748 55.76316722 99.38965977 60.81794892 107.25 65.9375 C108.17756104 66.53981445 109.10512207 67.14212891 110.06079102 67.76269531 C115.38955399 71.23920933 120.64051883 74.80674866 125.83642578 78.47900391 C128.52597684 80.36976255 131.25358133 82.19314561 134 84 C133.01 84.33 132.02 84.66 131 85 C129.7934375 84.1028125 129.7934375 84.1028125 128.5625 83.1875 C124.03714479 79.85969426 118.43079166 79.66786435 113 79 C113 78.34 113 77.68 113 77 C113.99 76.34 114.98 75.68 116 75 C114.02 75 112.04 75 110 75 C110.33 75.33 110.66 75.66 111 76 C112.6504625 78.85313112 113.27340043 81.04601001 113.4140625 84.328125 C113.45273438 85.12734375 113.49140625 85.9265625 113.53125 86.75 C113.5621875 87.575 113.593125 88.4 113.625 89.25 C113.66367188 90.09046875 113.70234375 90.9309375 113.7421875 91.796875 C113.83615836 93.86423382 113.91915564 95.93208627 114 98 C112.68 98.33 111.36 98.66 110 99 C110 98.01 110 97.02 110 96 C108.02 96.99 108.02 96.99 106 98 C105.67 96.02 105.34 94.04 105 92 C104.01 92 103.02 92 102 92 C102.33 92.99 102.66 93.98 103 95 C102.01 95.495 102.01 95.495 101 96 C100.01 92.535 100.01 92.535 99 89 C97.02 88.505 97.02 88.505 95 88 C95.33 89.98 95.66 91.96 96 94 C94.02 93.34 92.04 92.68 90 92 C90.495 90.515 90.495 90.515 91 89 C88.69 88.67 86.38 88.34 84 88 C83.67 87.01 83.34 86.02 83 85 C81.515 84.505 81.515 84.505 80 84 C80 83.01 80 82.02 80 81 C79.34 81 78.68 81 78 81 C78 82.65 78 84.3 78 86 C77.34 86 76.68 86 76 86 C74.61767557 84.37373596 73.28062485 82.7074998 72 81 C71.38125 81.20625 70.7625 81.4125 70.125 81.625 C69.42375 81.74875 68.7225 81.8725 68 82 C65.85950154 79.85950154 64.35372208 77.70744416 63 75 C62.01 75.33 61.02 75.66 60 76 C60 76.66 60 77.32 60 78 C59.01 77.67 58.02 77.34 57 77 C57 76.34 57 75.68 57 75 C56.34 75 55.68 75 55 75 C55 74.01 55 73.02 55 72 C54.34 72 53.68 72 53 72 C53 72.66 53 73.32 53 74 C52.34 74 51.68 74 51 74 C51 73.34 51 72.68 51 72 C50.195625 72.185625 49.39125 72.37125 48.5625 72.5625 C47.2940625 72.7790625 47.2940625 72.7790625 46 73 C45 72 45 72 44.9375 69.4375 C44.958125 68.633125 44.97875 67.82875 45 67 C44.01 67 43.02 67 42 67 C42 67.99 42 68.98 42 70 C40.68 69.67 39.36 69.34 38 69 C38 69.66 38 70.32 38 71 C37.34 71 36.68 71 36 71 C35.67 70.34 35.34 69.68 35 69 C31.54956883 67.84985628 28.64717645 67 25 67 C24.67 66.01 24.34 65.02 24 64 C21.49552484 62.78130071 21.49552484 62.78130071 19 62 C18.34 62.99 17.68 63.98 17 65 C16.67 63.68 16.34 62.36 16 61 C15.1028125 60.814375 15.1028125 60.814375 14.1875 60.625 C12 60 12 60 9 58 C9 58.99 9 59.98 9 61 C5.26512223 60.5020163 3.18762365 60.12508244 0 58 C-0.36076355 55.55758667 -0.36076355 55.55758667 -0.34057617 52.44873047 C-0.34034958 51.28767792 -0.34012299 50.12662537 -0.33988953 48.9303894 C-0.32440567 47.67203278 -0.30892181 46.41367615 -0.29296875 45.1171875 C-0.28872391 43.83264679 -0.28447906 42.54810608 -0.28010559 41.22463989 C-0.2686468 37.80827359 -0.23917143 34.39228944 -0.20599365 30.97607422 C-0.17531462 27.49061249 -0.16160494 24.00508906 -0.14648438 20.51953125 C-0.11430221 13.67953043 -0.06309376 6.83978356 0 0 Z \",fill:\"#1F1313\",transform:\"translate(0,80)\"})),_path38||(_path38=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.39859703 1.46966358 5.64963709 3.38037514 8.25 6 C8.95640625 6.70125 9.6628125 7.4025 10.390625 8.125 C12 10 12 10 12 12 C12.66 12 13.32 12 14 12 C14 12.66 14 13.32 14 14 C14.66 14 15.32 14 16 14 C17.7143618 15.95927063 19.38405168 17.95880212 21 20 C21 18.02 21 16.04 21 14 C22.33439289 14.0895773 23.66753919 14.1977103 25 14.3125 C25.7425 14.37050781 26.485 14.42851562 27.25 14.48828125 C30 15 30 15 33.41015625 16.46875 C39.50968403 18.83304586 45.9717045 18.8546322 52.4375 19.1875 C53.13063293 19.22636322 53.82376587 19.26522644 54.53790283 19.30526733 C79.59077231 20.69907432 104.10050188 20.55162284 129 17 C133.02909857 16.44840222 136.92117031 16 141 16 C140.67 19.96 140.34 23.92 140 28 C140.66 28 141.32 28 142 28 C142 33.28 142 38.56 142 44 C136.72 46.31 131.44 48.62 126 51 C125.79176832 53.27330408 125.79176832 53.27330408 128 55.5 C130 58 130 58 130 60 C130.99 60 131.98 60 133 60 C133 60.66 133 61.32 133 62 C120.21237403 63.10458173 107.46626818 63.43292751 94.63574219 63.56982422 C91.9644452 63.6010627 89.29536098 63.65685629 86.625 63.73388672 C58.42304437 64.48681787 58.42304437 64.48681787 46 54 C44.02271421 52.51832 42.04385809 51.03872994 40.0625 49.5625 C37.66015625 47.62890625 37.66015625 47.62890625 36 46 C36 45.34 36 44.68 36 44 C34.68 44 33.36 44 32 44 C32 42.68 32 41.36 32 40 C31.43925781 39.75636719 30.87851563 39.51273438 30.30078125 39.26171875 C27.55270226 37.75470769 25.49962993 35.92800785 23.1875 33.8125 C21.87845703 32.61560547 21.87845703 32.61560547 20.54296875 31.39453125 C17.75031068 28.76488548 15.03552886 26.07535689 12.375 23.3125 C11.01378527 21.88435687 11.01378527 21.88435687 9 21 C9 20.34 9 19.68 9 19 C8.42765625 18.7525 7.8553125 18.505 7.265625 18.25 C4.64989389 16.80683801 2.85226544 15.11783778 0.75 13 C0.04359375 12.29875 -0.6628125 11.5975 -1.390625 10.875 C-3 9 -3 9 -3 7 C0.40273032 8.45506508 2.42853861 10.30322768 4.9375 13 C9.1365818 17.32463574 13.6168133 20.9323211 18.48217773 24.4609375 C21.90835218 26.98730328 24.43707921 29.61511798 27 33 C29.12603185 34.76323505 29.12603185 34.76323505 31 36 C31.33 35.67 31.66 35.34 32 35 C27.86529066 30.0165921 23.44626298 25.37149153 18.84765625 20.8203125 C18.29919037 20.27735535 17.75072449 19.73439819 17.18563843 19.17498779 C14.89315988 16.91024335 12.59696585 14.64934255 10.29663086 12.39257812 C8.60099814 10.7269587 6.91148699 9.05532413 5.22265625 7.3828125 C4.69777115 6.87138702 4.17288605 6.35996155 3.63209534 5.83303833 C2.38304841 4.59282171 1.18597483 3.30066105 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#C7C9AB\",transform:\"translate(210,176)\"})),_path39||(_path39=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.06331543 0.02143066 2.12663086 0.04286133 3.22216797 0.06494141 C6.35825088 0.13840262 9.49058841 0.25011489 12.625 0.375 C13.90407227 0.41850586 13.90407227 0.41850586 15.20898438 0.46289062 C21.96977207 0.70575936 28.2151246 0.97860282 34.625 3.375 C33.635 6.015 32.645 8.655 31.625 11.375 C30.965 11.375 30.305 11.375 29.625 11.375 C29.33625 12.303125 29.0475 13.23125 28.75 14.1875 C27.625 17.375 27.625 17.375 25.625 20.375 C24.965 20.375 24.305 20.375 23.625 20.375 C23.5425 21.24125 23.46 22.1075 23.375 23 C22.65651307 26.2331912 21.64310383 27.91867281 19.79736328 30.5859375 C17.49826567 34.09443132 15.62517155 37.84629647 13.6875 41.5625 C13.24438477 42.40748047 12.80126953 43.25246094 12.34472656 44.12304688 C9.64641344 49.30492159 7.12338976 54.52724969 4.77734375 59.87890625 C3.0238362 63.67718192 0.99519868 67.31335118 -1.04296875 70.96484375 C-2.38910483 73.31366847 -2.38910483 73.31366847 -3.36328125 75.62890625 C-4.375 77.375 -4.375 77.375 -7.375 78.375 C-8.27967725 72.6453774 -5.81262342 69.33706675 -2.78515625 64.7421875 C-1.48193262 62.55450462 -0.82721424 60.85931622 -0.375 58.375 C0.285 58.375 0.945 58.375 1.625 58.375 C1.5425 57.653125 1.46 56.93125 1.375 56.1875 C1.625 53.375 1.625 53.375 3.4375 51.21875 C6.14129424 47.70381749 7.42060126 44.21421476 8.875 40.0625 C9.2771875 38.95165039 9.2771875 38.95165039 9.6875 37.81835938 C10.34193048 36.00698929 10.98467006 34.1914026 11.625 32.375 C9.975 33.035 8.325 33.695 6.625 34.375 C6.77182691 25.71221202 10.30314124 19.67589457 14.625 12.375 C13.305 12.705 11.985 13.035 10.625 13.375 C10.5425 14.220625 10.46 15.06625 10.375 15.9375 C9.46766147 20.09613491 7.85958727 22.77082699 5.625 26.375 C4.965 26.375 4.305 26.375 3.625 26.375 C3.625 27.365 3.625 28.355 3.625 29.375 C2.965 29.375 2.305 29.375 1.625 29.375 C1.398125 30.179375 1.17125 30.98375 0.9375 31.8125 C-0.42988507 35.52397377 -2.16578815 38.72448826 -4.15625 42.12890625 C-5.41940823 44.34934984 -5.41940823 44.34934984 -6.3046875 46.7265625 C-7.63678097 50.02276459 -9.29798198 53.06713362 -11 56.1875 C-11.32484375 56.78498047 -11.6496875 57.38246094 -11.984375 57.99804688 C-12.77879151 59.45837135 -13.57655376 60.91687491 -14.375 62.375 C-15.035 62.375 -15.695 62.375 -16.375 62.375 C-15.89566068 57.4857389 -15.03588009 54.46135157 -12.375 50.375 C-9.03413076 44.22476345 -6.3685302 38.08493093 -4.375 31.375 C-4.99375 32.365 -5.6125 33.355 -6.25 34.375 C-7.301875 35.86 -7.301875 35.86 -8.375 37.375 C-9.035 37.375 -9.695 37.375 -10.375 37.375 C-10.74625 38.9528125 -10.74625 38.9528125 -11.125 40.5625 C-12.1547724 44.22554755 -13.95986942 46.4315596 -16.375 49.375 C-17.05363055 51.3709722 -17.72141919 53.37068551 -18.375 55.375 C-19.375 56.375 -20.375 57.375 -21.375 58.375 C-22.39029541 60.70171865 -23.38988198 63.0353447 -24.375 65.375 C-25.36231742 66.71775169 -26.36094743 68.05232273 -27.375 69.375 C-28.04849161 71.03892045 -28.7159159 72.70532028 -29.375 74.375 C-30.035 75.035 -30.695 75.695 -31.375 76.375 C-32.09975102 78.05510465 -32.82143952 79.73672495 -33.515625 81.4296875 C-34.89655826 84.55561825 -36.64314958 87.43085429 -38.375 90.375 C-38.705 91.035 -39.035 91.695 -39.375 92.375 C-40.365 92.375 -41.355 92.375 -42.375 92.375 C-41.91180089 87.65036912 -41.27608294 84.20442948 -38.375 80.375 C-37.715 80.375 -37.055 80.375 -36.375 80.375 C-36.19324219 79.79492188 -36.01148438 79.21484375 -35.82421875 78.6171875 C-34.3331894 73.98352707 -32.69166424 69.67737645 -30.375 65.375 C-30.705 65.045 -31.035 64.715 -31.375 64.375 C-36.40645468 71.01390643 -40.86512407 77.70829341 -44.83203125 85.0390625 C-46.375 87.375 -46.375 87.375 -49.375 88.375 C-47.82277764 84.36509223 -46.07122277 80.46451146 -44.27734375 76.55859375 C-43.42957328 74.50706262 -42.85107428 72.53942017 -42.375 70.375 C-42.808125 71.179375 -43.24125 71.98375 -43.6875 72.8125 C-45.375 75.375 -45.375 75.375 -48.375 76.375 C-49.58382096 78.37516466 -49.58382096 78.37516466 -50.375 80.375 C-51.035 80.375 -51.695 80.375 -52.375 80.375 C-52.519375 81.1175 -52.66375 81.86 -52.8125 82.625 C-53.27687492 84.89527739 -53.79363569 87.13259479 -54.375 89.375 C-55.035 89.375 -55.695 89.375 -56.375 89.375 C-56.643125 90.138125 -56.91125 90.90125 -57.1875 91.6875 C-58.36592624 94.35446464 -59.36648055 95.36648055 -61.375 97.375 C-62.42122875 99.35120986 -63.42939935 101.3487129 -64.375 103.375 C-65.035 103.375 -65.695 103.375 -66.375 103.375 C-66.705 105.025 -67.035 106.675 -67.375 108.375 C-77.935 108.375 -88.495 108.375 -99.375 108.375 C-99.375 106.375 -99.375 106.375 -97.21484375 104.1171875 C-95.80912109 102.75980469 -95.80912109 102.75980469 -94.375 101.375 C-92.55071854 99.42591326 -90.73698406 97.47157018 -88.9375 95.5 C-88.21300659 94.70674316 -88.21300659 94.70674316 -87.47387695 93.89746094 C-77.58802534 83.81067472 -77.58802534 83.81067472 -70.4296875 71.89453125 C-69.24755625 69.07055103 -67.84299051 67.40973892 -65.75 65.1875 C-60.59657249 59.57494895 -55.85294175 53.66056721 -51.265625 47.578125 C-50.64171875 46.85109375 -50.0178125 46.1240625 -49.375 45.375 C-48.715 45.375 -48.055 45.375 -47.375 45.375 C-47.189375 44.715 -47.00375 44.055 -46.8125 43.375 C-43.78223793 37.05097481 -38.28113642 32.28113642 -33.375 27.375 C-23.85730912 17.29115109 -23.85730912 17.29115109 -17.375 5.375 C-12.18706293 -0.50236392 -7.53462478 -0.27906018 0 0 Z \",fill:\"#6C4737\",transform:\"translate(143.375,517.625)\"})),_path40||(_path40=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.39010758 4.63348015 14.16350843 9.98381147 20.97998047 15.40234375 C24.63431909 18.29260142 28.31899855 21.14383573 32 24 C50.80195955 38.61011215 50.80195955 38.61011215 58.63671875 44.92578125 C66.3609508 51.15137245 74.19110411 57.1963718 82.1484375 63.12109375 C86.25216487 66.17895338 90.30701499 69.29755952 94.35473633 72.42895508 C97.81091115 75.09844529 101.30254945 77.71428627 104.8125 80.3125 C105.72161133 81.02535156 106.63072266 81.73820313 107.56738281 82.47265625 C109.97357435 84.31664594 112.43422374 85.84544444 115.0690918 87.34130859 C120.66480606 90.7843066 125.90888182 94.30415 127.84487915 100.86178589 C129.00592799 108.99572332 128.45875539 117.1409197 128 125.3125 C127.91962964 127.80641157 127.84664553 130.30057272 127.78125 132.79492188 C127.60604079 138.86878115 127.33938707 144.9332156 127 151 C126.34 151 125.68 151 125 151 C123.58984375 149.56640625 123.58984375 149.56640625 121.9375 147.5625 C117.87931634 142.77658299 113.47999069 138.3885623 109 134 C109.928125 135.11375 109.928125 135.11375 110.875 136.25 C112.60437281 138.48801188 113.86106661 140.43739987 115 143 C111.02031425 141.66182195 108.61251238 139.99662286 105.6875 137 C104.99011719 136.29875 104.29273438 135.5975 103.57421875 134.875 C102 133 102 133 102 131 C101.44570313 130.75378906 100.89140625 130.50757813 100.3203125 130.25390625 C89.73391593 124.53297477 80.4584195 114.4584195 72 106 C70.13161963 104.45878328 68.25701571 102.92984182 66.35546875 101.4296875 C65 100 65 100 65 97 C64.34 97 63.68 97 63 97 C63 96.34 63 95.68 63 95 C62.34 95 61.68 95 61 95 C61 94.01 61 93.02 61 92 C60.34 92 59.68 92 59 92 C59.33 91.34 59.66 90.68 60 90 C59.67 89.67 59.34 89.34 59 89 C59 88.34 59 87.68 59 87 C58.34 87 57.68 87 57 87 C56.896875 86.38125 56.79375 85.7625 56.6875 85.125 C56.12474627 82.63473516 56.12474627 82.63473516 53 81 C53 80.34 53 79.68 53 79 C52.401875 78.731875 51.80375 78.46375 51.1875 78.1875 C48.85873253 76.92331195 47.50756717 76.1859724 46 74 C45.8125 70.3125 45.8125 70.3125 46 67 C46.99 67.33 47.98 67.66 49 68 C49 68.99 49 69.98 49 71 C49.5775 71.103125 50.155 71.20625 50.75 71.3125 C53.35661158 72.10896465 54.9735311 73.19065277 57 75 C57 75.66 57 76.32 57 77 C57.680625 77.20625 58.36125 77.4125 59.0625 77.625 C62.39139592 79.1832066 64.60122744 81.15450814 67.25390625 83.66015625 C69.16957134 85.1301185 70.64278312 85.58220007 73 86 C69.3814948 81.36721683 65.64642236 77.87317609 60.87109375 74.4609375 C58.14658297 72.33365768 56.18043653 69.67103474 54 67 C51.96434482 65.15012306 49.88415528 63.37209856 47.76953125 61.61328125 C46 60 46 60 44 57 C42.700625 56.38125 42.700625 56.38125 41.375 55.75 C34.97996764 52.4340573 29.99845049 47.12036391 25 42 C23.85917969 40.89205078 23.85917969 40.89205078 22.6953125 39.76171875 C21.45394531 38.54935547 21.45394531 38.54935547 20.1875 37.3125 C19.00220703 36.16201172 19.00220703 36.16201172 17.79296875 34.98828125 C16 33 16 33 16 31 C18.94956528 32.36944102 21.52468811 33.87830409 24 36 C24 36.66 24 37.32 24 38 C24.54785156 38.23847656 25.09570312 38.47695313 25.66015625 38.72265625 C28.57231611 40.312433 30.9036209 42.29723319 33.4375 44.4375 C36.12738104 46.70837315 38.6655874 48.80177572 41.6953125 50.59765625 C44 52 44 52 46.4375 55 C50.45258872 59.92239449 55.56873162 63.49839879 60.578125 67.33984375 C63.98342162 69.95722261 67.19910273 72.74306113 70.3515625 75.66015625 C72.13187799 77.10718993 73.91808181 78.04995437 76 79 C76 78.34 76 77.68 76 77 C75.34 77 74.68 77 74 77 C72.31267723 75.01739574 70.64633943 73.0167658 69 71 C68.34 70.67 67.68 70.34 67 70 C67 69.34 67 68.68 67 68 C66.360625 67.731875 65.72125 67.46375 65.0625 67.1875 C63 66 63 66 62 63 C64.95409701 64.37154504 67.44008376 65.98863724 70 68 C70.33 67.67 70.66 67.34 71 67 C68.93821926 65.24914666 66.87560123 63.49929619 64.8125 61.75 C64.23435547 61.25886719 63.65621094 60.76773438 63.06054688 60.26171875 C62.20493164 59.53662109 62.20493164 59.53662109 61.33203125 58.796875 C60.77080566 58.32056641 60.20958008 57.84425781 59.63134766 57.35351562 C58.14345007 56.11901933 56.61074262 54.9390451 55.07421875 53.765625 C54.04748047 52.89164062 54.04748047 52.89164062 53 52 C53 51.34 53 50.68 53 50 C52.43667969 49.74089844 51.87335937 49.48179687 51.29296875 49.21484375 C48.75539889 47.87040725 46.58886526 46.31210305 44.3125 44.5625 C43.52488281 43.96566406 42.73726562 43.36882812 41.92578125 42.75390625 C40 41 40 41 39 38 C43.89885858 39.54897243 47.29299917 42.40664154 51.1875 45.625 C51.84588867 46.16044434 52.50427734 46.69588867 53.18261719 47.24755859 C54.50630872 48.32414812 55.82812033 49.40305359 57.14794922 50.484375 C59.66900981 52.5474839 62.2076921 54.58815832 64.75 56.625 C65.50796875 57.23601562 66.2659375 57.84703125 67.046875 58.4765625 C68.64450986 59.72271769 70.31412978 60.87608652 72 62 C72 62.66 72 63.32 72 64 C74.93720508 65.52299523 77.9168649 66.80100302 81 68 C77.33215797 64.095523 73.36170774 60.87350652 69.0859375 57.6484375 C67 56 67 56 65.5390625 54.4765625 C63.99081584 52.87674663 63.99081584 52.87674663 61.734375 51.671875 C58.24121822 49.53605914 55.31721591 46.94859833 52.25 44.25 C46.95381754 39.65523527 41.5901811 35.23473056 36 31 C34.69740666 30.00196737 33.3953793 29.00319585 32.09375 28.00390625 C30.6250604 26.87752541 29.15630863 25.75122562 27.6875 24.625 C26.95354004 24.06184082 26.21958008 23.49868164 25.46337891 22.91845703 C22.10099314 20.34511906 18.73104754 17.78850243 15.3046875 15.30078125 C14.75208252 14.89714355 14.19947754 14.49350586 13.63012695 14.07763672 C12.16575403 13.01259676 10.69445449 11.95709875 9.22265625 10.90234375 C6.99834378 8.99858247 6.17096097 7.62340294 5 5 C3.67479497 4.31731862 2.34187818 3.6492959 1 3 C0.67 2.01 0.34 1.02 0 0 Z \",fill:\"#503328\",transform:\"translate(499,451)\"})),_path41||(_path41=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.93 0.495 6.93 0.495 14 1 C14.495 2.98 14.495 2.98 15 5 C15.78375 4.938125 16.5675 4.87625 17.375 4.8125 C18.674375 4.9053125 18.674375 4.9053125 20 5 C22.29633824 8.44450737 22.54016485 10.93812283 23 15 C21.35 15.99 19.7 16.98 18 18 C18.33 18 18.66 18 19 18 C20.32 18 21.64 18 23 18 C23 18.66 23 19.32 23 20 C27.62 20 32.24 20 37 20 C37.495 20.99 37.495 20.99 38 22 C36.73542969 21.95359375 35.47085938 21.9071875 34.16796875 21.859375 C32.50783609 21.82185788 30.84767792 21.78545765 29.1875 21.75 C28.35412109 21.71648437 27.52074219 21.68296875 26.66210938 21.6484375 C25.45844727 21.62910156 25.45844727 21.62910156 24.23046875 21.609375 C23.49207764 21.58842773 22.75368652 21.56748047 21.99291992 21.54589844 C19.39189213 21.91260255 19.39189213 21.91260255 17 26 C23.27 25.67 29.54 25.34 36 25 C34.69442995 30.22228021 33.6208069 33.92181004 29 37 C22.78999195 38.33051402 16.31776023 38.10008333 10 38 C10 38.66 10 39.32 10 40 C9.34 40 8.68 40 8 40 C8 41.65 8 43.3 8 45 C8.99 45.495 8.99 45.495 10 46 C8.68 46 7.36 46 6 46 C6 48.31 6 50.62 6 53 C7.32 53 8.64 53 10 53 C10 53.66 10 54.32 10 55 C9.443125 55.061875 8.88625 55.12375 8.3125 55.1875 C5.05012827 56.33373872 3.31332126 58.49390197 1 61 C3.31 61.99 5.62 62.98 8 64 C8 64.66 8 65.32 8 66 C7.2575 66.28875 6.515 66.5775 5.75 66.875 C3.43260203 67.82302644 1.22082885 68.84845911 -1 70 C-0.67 70.99 -0.34 71.98 0 73 C-0.99 73.495 -0.99 73.495 -2 74 C-2.65555119 76.52733235 -2.65555119 76.52733235 -3 79 C-2.01 79.33 -1.02 79.66 0 80 C-1.33333333 82 -2.66666667 84 -4 86 C-4.45394552 88.27912938 -4.45394552 88.27912938 -4.625 90.6875 C-4.810625 92.8221875 -4.810625 92.8221875 -5 95 C0.94 94.67 6.88 94.34 13 94 C8.71 93.67 4.42 93.34 0 93 C1.08200139 87.58999306 1.78439176 86.41530291 5.8359375 83.1640625 C11.41844581 80.16119702 18.07019084 82.01169847 24 83 C21.69 86.96 19.38 90.92 17 95 C21.455 94.505 21.455 94.505 26 94 C26 94.66 26 95.32 26 96 C24.68 96 23.36 96 22 96 C22 96.99 22 97.98 22 99 C18.0523573 100.3158809 14.28910644 100.12300273 10.17578125 100.09765625 C9.31438034 100.0962413 8.45297943 100.09482635 7.56547546 100.09336853 C4.81444831 100.0877714 2.06350256 100.07521946 -0.6875 100.0625 C-2.5527332 100.05748463 -4.41796767 100.05292179 -6.28320312 100.04882812 C-10.85550011 100.03780292 -15.42773625 100.02054027 -20 100 C-20 99.34 -20 98.68 -20 98 C-21.32 98 -22.64 98 -24 98 C-24 98.66 -24 99.32 -24 100 C-26.64 100 -29.28 100 -32 100 C-32 99.34 -32 98.68 -32 98 C-31.34 98 -30.68 98 -30 98 C-30.02320313 97.43152344 -30.04640625 96.86304688 -30.0703125 96.27734375 C-30.19160382 91.08780813 -29.54451826 86.99697084 -28 82 C-27.57172655 79.33623325 -27.28261274 76.68482104 -27 74 C-30.70463665 72.63513386 -34.35998044 71.6827534 -38.2265625 70.9296875 C-39.12197754 70.75421387 -40.01739258 70.57874023 -40.93994141 70.39794922 C-41.61976074 70.26662598 -42.29958008 70.13530273 -43 70 C-42.5465399 66.7076434 -42.08630941 63.41626521 -41.625 60.125 C-41.43550781 58.74828125 -41.43550781 58.74828125 -41.2421875 57.34375 C-40.37387462 51.17872855 -39.28967197 45.09076144 -38 39 C-37.34 39.33 -36.68 39.66 -36 40 C-35.375 42.0625 -35.375 42.0625 -35 44 C-33.68 44.33 -32.36 44.66 -31 45 C-31 44.34 -31 43.68 -31 43 C-31.66 43 -32.32 43 -33 43 C-32.67 41.35 -32.34 39.7 -32 38 C-31.34 38 -30.68 38 -30 38 C-29.67 39.65 -29.34 41.3 -29 43 C-21.08 42.01 -21.08 42.01 -13 41 C-13 40.34 -13 39.68 -13 39 C-13.86625 38.7215625 -13.86625 38.7215625 -14.75 38.4375 C-18.08401241 36.30743652 -19.7464663 33.66967119 -21 30 C-21.49298551 25.15793686 -21.54550965 20.63652896 -20 16 C-19.34 16 -18.68 16 -18 16 C-18 15.34 -18 14.68 -18 14 C-17.34 14 -16.68 14 -16 14 C-16 13.34 -16 12.68 -16 12 C-14.68 12 -13.36 12 -12 12 C-12 12.66 -12 13.32 -12 14 C-1.77 14 8.46 14 19 14 C19 12.02 19 10.04 19 8 C12.73 8 6.46 8 0 8 C0 5.36 0 2.72 0 0 Z \",fill:\"#08080B\",transform:\"translate(94,308)\"})),_path42||(_path42=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.875 0.25 1.875 0.25 4 1 C5.72101535 3.58152302 6 4.84918025 6 8 C7.53140625 8.12955078 7.53140625 8.12955078 9.09375 8.26171875 C22.28494031 9.49733363 35.07888137 12.12096287 48 15 C48 15.99 48 16.98 48 18 C44.04 18 40.08 18 36 18 C35.505 16.515 35.505 16.515 35 15 C33.35 15 31.7 15 30 15 C29.34 16.98 28.68 18.96 28 21 C28.66 21 29.32 21 30 21 C29.67 22.32 29.34 23.64 29 25 C25.37 24.01 21.74 23.02 18 22 C18 21.67 18 21.34 18 21 C19.98 20.34 21.96 19.68 24 19 C23.96044102 17.07690578 23.96044102 17.07690578 23 15 C19.65242148 12.99145289 16.80103323 11.95025831 13 11 C13 15.62 13 20.24 13 25 C14.5675 25.12375 16.135 25.2475 17.75 25.375 C21.29435486 25.65481749 23.95960053 26.09632646 27 28 C27.495 28.99 27.495 28.99 28 30 C32.95 30 37.9 30 43 30 C43.495 28.515 43.495 28.515 44 27 C46.54232342 26.91847656 49.08199202 26.85926284 51.625 26.8125 C52.33785156 26.78736328 53.05070313 26.76222656 53.78515625 26.73632812 C58.61896995 26.66980775 61.76781157 27.41510953 66 30 C67 31 67 31 67.0625 33.5625 C67.041875 34.366875 67.02125 35.17125 67 36 C57.63250185 36.1820896 48.3412692 35.61326035 39 35 C39.47824219 36.09570312 39.95648437 37.19140625 40.44921875 38.3203125 C42 42 42 42 42.8125 44.875 C44.20269907 48.5334186 46.12302175 51.40959001 48.34765625 54.61328125 C49.47042944 56.23506474 50.56077847 57.87967899 51.62109375 59.54296875 C52.13800781 60.35378906 52.65492188 61.16460937 53.1875 62 C53.65542969 62.7425 54.12335938 63.485 54.60546875 64.25 C55.97464872 66.29424542 55.97464872 66.29424542 59 67 C62.55018723 67.19411716 66.09854058 67.31741081 69.65234375 67.42578125 C73.51788322 68.08883178 74.6496001 68.93065425 77 72 C79.03357795 76.22358498 80.58422861 80.53487486 82 85 C82.63526611 84.9285376 83.27053223 84.8570752 83.92504883 84.78344727 C91.53117117 84.0015988 99.0461508 83.88172373 106.6875 83.9375 C107.87794922 83.94201172 109.06839844 83.94652344 110.29492188 83.95117188 C113.19663683 83.96282535 116.09832546 83.98075529 119 84 C119 87.63 119 91.26 119 95 C111.50009325 96.20263656 104.0817215 96.11258251 96.5 96.0625 C95.200625 96.05798828 93.90125 96.05347656 92.5625 96.04882812 C89.37495175 96.0371092 86.18750045 96.02070219 83 96 C83 97.65 83 99.3 83 101 C83.83917969 100.68160156 84.67835938 100.36320312 85.54296875 100.03515625 C89.22648324 98.93218298 92.47859857 98.62777811 96.3125 98.4375 C100.47595878 98.59558811 100.47595878 98.59558811 104 97 C106.52596259 96.76346477 109.03107207 96.57826308 111.5625 96.4375 C112.27341797 96.39431641 112.98433594 96.35113281 113.71679688 96.30664062 C115.47761912 96.20028223 117.2387832 96.09961154 119 96 C119.33 97.32 119.66 98.64 120 100 C120.99 100 121.98 100 123 100 C123 100.66 123 101.32 123 102 C111.88747861 103.6909381 100.75086747 105.29109502 89.5 105.5625 C88.74291748 105.60117187 87.98583496 105.63984375 87.20581055 105.6796875 C81.84831005 105.70855918 79.14325111 104.09587606 75.23242188 100.48803711 C74 99 74 99 74 97 C73.236875 97.495 72.47375 97.99 71.6875 98.5 C66.85079339 101.19955718 60.31993312 100.07112747 55 99 C44.1742634 94.18471236 37.39321004 83.72460757 31.9375 73.6875 C30.90531292 71.83443206 29.8727629 69.98156623 28.83984375 68.12890625 C28.10870361 66.80463623 28.10870361 66.80463623 27.36279297 65.45361328 C25.10692941 61.39208897 22.74715265 57.39443411 20.390625 53.390625 C19.13820613 51.23759032 17.94134783 49.06210123 16.75 46.875 C15.15429327 43.79785222 15.15429327 43.79785222 12 42 C12.66 42 13.32 42 14 42 C12.75212954 38.88853954 11.335865 36.42194889 9 34 C5.0521908 32.44015945 1.07728333 32.01766535 -3.125 31.5625 C-4.74148438 31.34303711 -4.74148438 31.34303711 -6.390625 31.11914062 C-13.24009765 30.21550538 -20.11614139 29.57723933 -27 29 C-27.33 28.01 -27.66 27.02 -28 26 C-25.36 26 -22.72 26 -20 26 C-20.66 24.68 -21.32 23.36 -22 22 C-32.95320502 21.18637274 -32.95320502 21.18637274 -42.44921875 25.90625 C-44 27 -44 27 -47 27 C-42.7155856 22.20145587 -38.0480089 18.95011947 -31.59765625 18.390625 C-30.08662612 18.32521244 -28.57467664 18.27850719 -27.0625 18.25 C-26.28326172 18.22035156 -25.50402344 18.19070313 -24.70117188 18.16015625 C-22.80131823 18.09022299 -20.9006594 18.04275949 -19 18 C-17.23537317 21.08809695 -17 22.23312136 -17 26 C-15.35 26 -13.7 26 -12 26 C-12 26.66 -12 27.32 -12 28 C-7.38 28.66 -2.76 29.32 2 30 C2 29.34 2 28.68 2 28 C0.68 27.67 -0.64 27.34 -2 27 C-2 26.01 -2 25.02 -2 24 C-0.35 24 1.3 24 3 24 C3.33 22.35 3.66 20.7 4 19 C4.66 19 5.32 19 6 19 C6 20.32 6 21.64 6 23 C7.65 23 9.3 23 11 23 C10.68051404 19.5247752 10.22735873 16.27826986 9 13 C5.58991365 11.03816375 5.58991365 11.03816375 2 10 C0.5625 7.8125 0.5625 7.8125 0 6 C0.66 5.67 1.32 5.34 2 5 C1.34 3.35 0.68 1.7 0 0 Z \",fill:\"#D1D9B5\",transform:\"translate(476,292)\"})),_path43||(_path43=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C9.9 0 19.8 0 30 0 C28.68 1.65 27.36 3.3 26 5 C25.34 5 24.68 5 24 5 C23.92523438 5.71027344 23.85046875 6.42054688 23.7734375 7.15234375 C22.78935996 10.77553832 21.06446323 12.72435427 18.625 15.5625 C15.36515764 19.36109882 15.36515764 19.36109882 12.3359375 23.33984375 C11.67464844 24.16162109 11.67464844 24.16162109 11 25 C10.34 25 9.68 25 9 25 C8.79375 25.721875 8.5875 26.44375 8.375 27.1875 C6.91083681 30.18237926 5.33021898 31.41233321 2.72265625 33.3984375 C-0.24852538 36.16076056 -2.28816051 39.59997736 -4.484375 42.98828125 C-5.23460938 43.98408203 -5.23460938 43.98408203 -6 45 C-6.66 45 -7.32 45 -8 45 C-8.25523438 45.57492187 -8.51046875 46.14984375 -8.7734375 46.7421875 C-10.13037589 49.23999129 -11.69453146 51.04070926 -13.625 53.125 C-17.3820092 57.25908129 -20.88565218 61.5416967 -24.3359375 65.93359375 C-26 68 -26 68 -28 70 C-28.37125 70.99 -28.7425 71.98 -29.125 73 C-31.29820502 78.32604131 -35.06889944 82.85189602 -39 87 C-39.66 87 -40.32 87 -41 87 C-41.2165625 87.53496094 -41.433125 88.06992187 -41.65625 88.62109375 C-43.48317222 91.85538338 -45.95883813 94.38672878 -48.5 97.0625 C-51.21130519 99.93844517 -53.79846483 102.69769724 -56 106 C-56.66 106 -57.32 106 -58 106 C-58 106.66 -58 107.32 -58 108 C-68.23 108 -78.46 108 -89 108 C-84.397485 101.0962275 -80.09454319 95.68032279 -74.24023438 90.06445312 C-72.63418628 88.43264939 -71.21268991 86.94331675 -70 85 C-70.2671241 82.99008562 -70.60034827 80.98781025 -71 79 C-69.58210933 76.57877144 -68.29033448 74.72858786 -66.5 72.625 C-66.04165771 72.06208252 -65.58331543 71.49916504 -65.11108398 70.91918945 C-63.75645045 69.26563171 -62.37921624 67.63305344 -61 66 C-60.30003906 65.13503906 -59.60007812 64.27007813 -58.87890625 63.37890625 C-55.54431723 59.35588595 -55.54431723 59.35588595 -54 58 C-53.01 58 -52.02 58 -51 58 C-50.67 57.01 -50.34 56.02 -50 55 C-49 54 -48 53 -47 52 C-46.67 51.01 -46.34 50.02 -46 49 C-45.34 49 -44.68 49 -44 49 C-44 48.34 -44 47.68 -44 47 C-43.34 47 -42.68 47 -42 47 C-42.495 44.03 -42.495 44.03 -43 41 C-42.21625 40.7525 -41.4325 40.505 -40.625 40.25 C-37.49469091 38.75937663 -37.45996121 38.00580249 -36 35 C-35.030625 34.195625 -34.06125 33.39125 -33.0625 32.5625 C-29.96312798 30.26851379 -29.96312798 30.26851379 -28.5625 27.5 C-26.67788038 24.48460861 -24.56571118 23.14647839 -21.64453125 21.203125 C-19.65284813 19.74602666 -18.41151092 18.00583131 -17 16 C-16.34 16 -15.68 16 -15 16 C-14.67 15.01 -14.34 14.02 -14 13 C-13.030625 12.71125 -12.06125 12.4225 -11.0625 12.125 C-10.051875 11.75375 -9.04125 11.3825 -8 11 C-6.89363605 8.60931266 -6.89363605 8.60931266 -6 6 C-4.37667033 4.61423077 -2.71275535 3.27358732 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#462D25\",transform:\"translate(102,518)\"})),_path44||(_path44=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 17.16 0 34.32 0 52 C-4.34862851 51.1302743 -7.16270693 50.0525056 -11 48 C-11 47.34 -11 46.68 -11 46 C-11.99 45.7525 -12.98 45.505 -14 45.25 C-17.69568044 44.21129552 -20.92882186 42.61984835 -24.30078125 40.8046875 C-25.98790604 39.85733432 -25.98790604 39.85733432 -28 40 C-17.11 45.445 -17.11 45.445 -6 51 C-6 51.99 -6 52.98 -6 54 C-13.23082994 51.27841497 -20.05408868 48.05805537 -26.875 44.4375 C-28.25945312 43.71530273 -28.25945312 43.71530273 -29.671875 42.97851562 C-33.69107106 40.86115654 -37.37416091 38.74090788 -41 36 C-42.62398527 35.2817496 -44.27200342 34.61590012 -45.9375 34 C-49.57486948 32.65074394 -52.68515378 31.00822739 -56 29 C-57.92506 28.07773778 -59.86286775 27.18161317 -61.8125 26.3125 C-62.78832031 25.87550781 -63.76414062 25.43851562 -64.76953125 24.98828125 C-65.50558594 24.66214844 -66.24164062 24.33601563 -67 24 C-67 23.34 -67 22.68 -67 22 C-68.03060547 21.83177734 -68.03060547 21.83177734 -69.08203125 21.66015625 C-72.44899636 20.89841983 -75.48351155 19.71982605 -78.6875 18.4375 C-82.72847758 16.65438509 -82.72847758 16.65438509 -87 16 C-84.43873936 17.294174 -81.87606642 18.58540784 -79.3125 19.875 C-78.59126953 20.23980469 -77.87003906 20.60460937 -77.12695312 20.98046875 C-74.14139318 22.48006507 -71.20017663 23.92035983 -68.09375 25.15625 C-65.80857164 26.07714277 -64.59801851 27.14966278 -63 29 C-67.8676099 28.3252818 -72.00502246 26.38694795 -76.4375 24.375 C-77.62098022 23.84410767 -77.62098022 23.84410767 -78.82836914 23.30249023 C-85.06418796 20.48162936 -91.18949598 17.47346347 -97.27734375 14.34765625 C-99.99201015 12.92631029 -99.99201015 12.92631029 -103 12 C-103 12.66 -103 13.32 -103 14 C-102.46375 14.12375 -101.9275 14.2475 -101.375 14.375 C-94.84924935 16.0923028 -89.15267946 18.80410085 -83.18774414 21.8737793 C-76.59040743 25.25669045 -69.84621272 28.15231152 -63 31 C-57.83907364 33.15831367 -52.8141762 35.50151011 -47.8125 38 C-47.11447266 38.34289062 -46.41644531 38.68578125 -45.69726562 39.0390625 C-42.21383433 40.77580655 -39.01809501 42.50441757 -36 45 C-40.8412726 44.52536543 -43.93865112 43.63438847 -48 41 C-50.19130534 40.30420546 -50.19130534 40.30420546 -52 40 C-52 39.34 -52 38.68 -52 38 C-52.65871094 37.91234375 -53.31742188 37.8246875 -53.99609375 37.734375 C-57.9722219 36.76231766 -61.39778788 35.04449324 -65.0625 33.25 C-76.15238724 27.0432133 -76.15238724 27.0432133 -88 24 C-86.89785156 24.47308594 -85.79570313 24.94617188 -84.66015625 25.43359375 C-76.45084436 28.99652076 -68.36048786 32.70900606 -60.4375 36.875 C-59.3403064 37.4462561 -59.3403064 37.4462561 -58.22094727 38.02905273 C-53.12448238 40.75103524 -53.12448238 40.75103524 -52 43 C-54.64 42.34 -57.28 41.68 -60 41 C-60 40.34 -60 39.68 -60 39 C-60.845625 38.90589844 -61.69125 38.81179688 -62.5625 38.71484375 C-66.42867208 37.91085569 -69.55123579 36.40039526 -73 34.5625 C-79.55336684 31.17052515 -86.19842931 28.06731894 -92.9375 25.0625 C-102.5194925 20.77152075 -111.79922336 16.05188532 -121 11 C-121 10.01 -121 9.02 -121 8 C-121.54527344 7.89042969 -122.09054687 7.78085937 -122.65234375 7.66796875 C-128.25535065 6.48990063 -133.6054387 4.912965 -139 3 C-139 2.67 -139 2.34 -139 2 C-132.76504653 2.40225506 -127.95639207 3.5833395 -122.26171875 6.16015625 C-119.77713212 7.23207015 -119.77713212 7.23207015 -116 7 C-118.97 6.01 -121.94 5.02 -125 4 C-125 3.67 -125 3.34 -125 3 C-124.31350876 2.99191315 -123.62701752 2.98382629 -122.91972351 2.97549438 C-114.17547822 2.87060468 -105.43143894 2.7527279 -96.6875 2.625 C-95.98867706 2.61483479 -95.28985413 2.60466957 -94.56985474 2.59419632 C-77.17918105 2.33810645 -59.82501914 1.97490857 -42.4677124 0.79992676 C-28.26861868 -0.15797785 -14.23697961 -0.14453786 0 0 Z \",fill:\"#AE7654\",transform:\"translate(626,417)\"})),_path45||(_path45=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.72398556 2.61250717 9.14679198 5.42815262 13.5 8.625 C18.35498431 12.13919557 23.25495602 15.5627498 28.25 18.875 C29.16700684 19.48311523 29.16700684 19.48311523 30.10253906 20.10351562 C32.06731629 21.40392917 34.03353829 22.70213527 36 24 C54.20350937 36.02448219 54.20350937 36.02448219 62.02734375 41.8046875 C66.01867628 44.75229444 70.04010611 47.65748324 74.0625 50.5625 C74.85269531 51.13347412 75.64289063 51.70444824 76.45703125 52.29272461 C80.28618926 55.05577371 84.12237153 57.80514902 88 60.5 C98.0929585 67.52118852 108.13560561 74.65454586 117.765625 82.30078125 C122.70553873 86.05753383 127.87965315 89.49660479 133 93 C132.67 83.76 132.34 74.52 132 65 C140.50464931 63.29907014 149.32692545 64 158 64 C158 79.51 158 95.02 158 111 C158.66 111 159.32 111 160 111 C160.99 112.485 160.99 112.485 162 114 C164.05925139 114.72382467 164.05925139 114.72382467 166 115 C166 115.66 166 116.32 166 117 C166.66 117 167.32 117 168 117 C168 117.66 168 118.32 168 119 C168.66 119 169.32 119 170 119 C170 119.66 170 120.32 170 121 C170.66 121 171.32 121 172 121 C172 121.66 172 122.32 172 123 C173.32 123 174.64 123 176 123 C176 123.66 176 124.32 176 125 C176.66 125 177.32 125 178 125 C178.33 125.99 178.66 126.98 179 128 C179.99 128.33 180.98 128.66 182 129 C182 129.66 182 130.32 182 131 C189.91502139 129.34039874 197.59331813 127.29902261 205.16577148 124.44506836 C205.88433823 124.17456161 206.60290497 123.90405487 207.34324646 123.62535095 C207.88997513 123.41898514 208.4367038 123.21261932 209 123 C213.67012025 127.61940682 218.3323789 132.24663952 222.98925781 136.87939453 C224.57437122 138.45445094 226.16127512 140.02770757 227.75 141.59912109 C230.03338238 143.85824254 232.31024598 146.12375971 234.5859375 148.390625 C235.29744965 149.09181458 236.00896179 149.79300415 236.74203491 150.51544189 C237.40256866 151.17582458 238.06310242 151.83620728 238.74365234 152.51660156 C239.32545258 153.09396057 239.90725281 153.67131958 240.50668335 154.26617432 C242.06574418 156.07633274 243.02850654 157.82607912 244 160 C240.66864109 159.40300869 238.78724333 158.27987719 236.25 156.0625 C235.63640625 155.53785156 235.0228125 155.01320312 234.390625 154.47265625 C233 153 233 153 233 151 C232.44699219 150.75378906 231.89398438 150.50757813 231.32421875 150.25390625 C223.48101649 146.02253158 216.89795043 139.12517079 210.77734375 132.75 C209.10626788 130.92444046 209.10626788 130.92444046 207 130 C210.7547235 134.45805787 214.40872887 138.38263487 219 142 C219 142.66 219 143.32 219 144 C219.54011719 144.21011719 220.08023438 144.42023438 220.63671875 144.63671875 C223.88524265 146.51066064 226.24739018 149.12277601 228.8125 151.8125 C232.11188966 155.21871168 235.24902478 158.40632077 239.25 161 C240.1575 161.66 241.065 162.32 242 163 C242 164.32 242 165.64 242 167 C243.32 167 244.64 167 246 167 C247.71579801 168.61604231 249.37578367 170.29193769 251 172 C253.08988586 173.56873711 255.21702809 175.08882559 257.375 176.5625 C258.45523437 177.30628906 259.53546875 178.05007812 260.6484375 178.81640625 C261.21228149 179.17957947 261.77612549 179.54275269 262.35705566 179.91693115 C263.86871912 180.91345645 265.3130349 182.01020631 266.74804688 183.11425781 C272.65046211 186.43357471 279.81721625 185.46544031 286.3828125 185.35546875 C287.88539501 185.34545273 289.38799155 185.33737172 290.89059448 185.33113098 C294.83116786 185.31027842 298.77112599 185.2662633 302.71142578 185.21636963 C309.02399908 185.14086267 315.33694087 185.10296446 321.64980698 185.06087685 C323.84844988 185.04324433 326.04685657 185.01710157 328.24539185 184.98930359 C329.59735004 184.97607966 330.94930922 184.96295681 332.30126953 184.94995117 C333.47706573 184.93566574 334.65286194 184.92138031 335.86428833 184.90666199 C338.71133944 184.99140769 341.23630365 185.34022782 344 186 C344 186.66 344 187.32 344 188 C344.66 188 345.32 188 346 188 C345.67 188.99 345.34 189.98 345 191 C349.06884246 191.17314223 352.53626603 190.96543778 356.5 190 C360.46373397 189.03456222 363.93115754 188.82685777 368 189 C368 189.66 368 190.32 368 191 C359.9901375 193.25809954 352.3124321 194.57258771 344 195 C344 194.34 344 193.68 344 193 C324.2 193 304.4 193 284 193 C284 193.99 284 194.98 284 196 C281.36 196 278.72 196 276 196 C275.67 195.34 275.34 194.68 275 194 C269.06 193.67 263.12 193.34 257 193 C257 191.68 257 190.36 257 189 C256.16984375 188.92136719 255.3396875 188.84273437 254.484375 188.76171875 C250.19007931 187.82294335 247.00697208 186.0297073 243.25 183.8125 C242.55132812 183.40829834 241.85265625 183.00409668 241.1328125 182.58764648 C239.73518556 181.77682301 238.33994142 180.96187654 236.94726562 180.14257812 C235.21783701 179.1278181 233.47687737 178.1327675 231.734375 177.140625 C226.62743199 174.19318932 226.62743199 174.19318932 225 173 C225 172.34 225 171.68 225 171 C227.64 170.01 230.28 169.02 233 168 C223.87474482 161.75141302 214.74721851 155.50624404 205.60717773 149.27929688 C202.81028629 147.37349158 200.01442696 145.46618004 197.21875 143.55859375 C194.05533611 141.40010325 190.88904336 139.2460263 187.71875 137.09765625 C173.85500633 127.67468301 160.45584225 117.62259925 147.06518555 107.54370117 C141.03113372 103.00707444 134.94552601 98.54172644 128.85986328 94.07470703 C124.31714427 90.73226607 119.82410375 87.34096846 115.375 83.875 C109.91182833 79.64121462 104.31157059 75.63728398 98.65014648 71.67358398 C93.37449352 67.97939139 88.14782178 64.22315942 82.9375 60.4375 C76.8036637 55.99033773 70.62100004 51.62911342 64.36401367 47.35717773 C59.59105655 44.09834432 54.84428132 40.80396347 50.10620117 37.49462891 C38.36607817 29.29591065 26.54119897 21.22988111 14.67486572 13.21542358 C13.05842918 12.12157065 11.4451681 11.02302968 9.83203125 9.92431641 C8.10836709 8.75311633 6.37819238 7.5913285 4.63671875 6.44677734 C2.6875 5.13671875 2.6875 5.13671875 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#C39F79\",transform:\"translate(0,53)\"})),_path46||(_path46=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C13.16353018 5.26541207 26.31146179 10.6557309 39 17 C39.495 25.91 39.495 25.91 40 35 C40.33 29.72 40.66 24.44 41 19 C41.66 19 42.32 19 43 19 C43 24.94 43 30.88 43 37 C43.66 37 44.32 37 45 37 C45 31.39 45 25.78 45 20 C49.05536243 20.81107249 51.72935622 21.65141483 55.375 23.375 C58.46285302 24.81765155 61.540718 26.25314933 64.6875 27.5625 C67.79839803 28.91251235 70.80213835 30.38041639 73.8125 31.9375 C76.82829276 33.40231362 79.91039827 34.7008144 83 36 C83.69013184 36.29036133 84.38026367 36.58072266 85.09130859 36.87988281 C87.28794184 37.80004729 89.48735653 38.71326364 91.6875 39.625 C92.43322266 39.93695313 93.17894531 40.24890625 93.94726562 40.5703125 C94.66978516 40.869375 95.39230469 41.1684375 96.13671875 41.4765625 C96.78342529 41.74549316 97.43013184 42.01442383 98.09643555 42.29150391 C100.04340359 43.01615457 101.97690111 43.53431932 104 44 C104 44.66 104 45.32 104 46 C104.70125 46.103125 105.4025 46.20625 106.125 46.3125 C109 47 109 47 115 50 C115 54.95 115 59.9 115 65 C115.99 65 116.98 65 118 65 C118.33 60.71 118.66 56.42 119 52 C119.92296875 52.47308594 120.8459375 52.94617188 121.796875 53.43359375 C130.41888835 57.81639445 139.13204332 61.91800193 147.97314453 65.84008789 C152.25487479 67.74451293 156.47152388 69.7003026 160.625 71.875 C165.22878373 74.25088124 169.99983702 75.69144671 175 77 C175 77.99 175 78.98 175 80 C176.2375 80.391875 177.475 80.78375 178.75 81.1875 C185.8585793 83.56439666 192.71864276 86.52356973 199.55078125 89.59765625 C208.27335085 93.52003757 217.09744941 96.95736178 226.11083984 100.15942383 C232.13513451 102.29990997 238.0780034 104.59163765 244 107 C244.87962402 107.32766357 245.75924805 107.65532715 246.66552734 107.99291992 C249 109 249 109 251 111 C253.57061311 111.64767793 253.57061311 111.64767793 256 112 C256 110.68 256 109.36 256 108 C262.27 108 268.54 108 275 108 C274.67 108.99 274.34 109.98 274 111 C271.36 111 268.72 111 266 111 C266 111.66 266 112.32 266 113 C265.34 113 264.68 113 264 113 C264 115.64 264 118.28 264 121 C259.53160785 121.21278058 256.17737474 120.59138085 252 119 C253.65 117.35 255.3 115.7 257 114 C256.31429932 113.98146973 255.62859863 113.96293945 254.92211914 113.94384766 C245.96597319 113.47383718 237.89747962 111.14259461 229.4375 108.375 C228.00823686 107.91691778 226.57879154 107.45940363 225.14916992 107.00244141 C214.65335426 103.62676076 204.28020836 99.98302445 194 96 C190.52205189 94.66347811 187.04244747 93.33130624 183.5625 92 C182.69085205 91.66556885 181.8192041 91.3311377 180.92114258 90.98657227 C174.0541899 88.36559311 167.14072695 85.89873856 160.18579102 83.52148438 C154.55063598 81.58536171 148.99683223 79.47096389 143.44091797 77.31860352 C137.59150451 75.0770339 131.69945862 72.95303561 125.8125 70.8125 C112.82431345 66.07511496 99.91034 61.16093057 87.01904297 56.16552734 C81.36236226 53.9817174 75.69216934 51.83326423 70.02124023 49.68676758 C65.09216926 47.81578647 60.19231275 45.88123156 55.30029297 43.91552734 C52.32127683 42.72986501 49.32026156 41.61055811 46.3125 40.5 C38.51638921 37.59562514 30.74835424 34.61787066 22.98568726 31.62548828 C21.5871935 31.08682059 20.18829235 30.54920932 18.78897095 30.01269531 C16.79305394 29.24710391 14.79870768 28.4775474 12.8046875 27.70703125 C11.63921387 27.2581958 10.47374023 26.80936035 9.27294922 26.34692383 C6.11606896 25.04776611 3.05335275 23.52667638 0 22 C0 14.74 0 7.48 0 0 Z \",fill:\"#D8AA80\",transform:\"translate(0,138)\"})),_path47||(_path47=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C14.85 0.495 14.85 0.495 30 1 C30 32.35 30 63.7 30 96 C16.8 96 3.6 96 -10 96 C-10 85.87513684 -10 85.87513684 -9.57275391 81.70581055 C-9.47910553 80.77000656 -9.38545715 79.83420258 -9.28897095 78.87004089 C-9.18587616 77.88554459 -9.08278137 76.90104828 -8.9765625 75.88671875 C-8.87032562 74.8370845 -8.76408875 73.78745026 -8.65463257 72.70600891 C-8.31563866 69.36606018 -7.97046826 66.02678462 -7.625 62.6875 C-7.4006243 60.48897485 -7.17666266 58.29040739 -6.953125 56.09179688 C-6.5142725 51.77995184 -6.07289241 47.46837711 -5.62963867 43.15698242 C-4.96127122 36.64331391 -4.31063378 30.12791864 -3.67092896 23.6113739 C-1.48020749 1.48020749 -1.48020749 1.48020749 0 0 Z \",fill:\"#F8D4AC\",transform:\"translate(272,530)\"})),_path48||(_path48=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C9.64363986 1.68763698 18.15137978 6.5519644 26.6875 11.125 C35.72616948 15.96679002 44.94998446 20.19762829 54.38549805 24.20751953 C59.80671996 26.52504896 64.9833249 28.97261965 70.05371094 31.98876953 C72.02902183 33.01507883 73.82662829 33.55282665 76 34 C76 34.66 76 35.32 76 36 C78.31 36.33 80.62 36.66 83 37 C72.96618789 31.50219881 62.85699153 26.43523976 52.33886719 21.92016602 C51.52579102 21.56623779 50.71271484 21.21230957 49.875 20.84765625 C48.78832031 20.3837146 48.78832031 20.3837146 47.6796875 19.91040039 C46 19 46 19 45 17 C58.67249094 20.72061147 71.25936133 26.91649599 84 33 C84 33.66 84 34.32 84 35 C84.639375 35.103125 85.27875 35.20625 85.9375 35.3125 C90.06477326 36.23903073 94.00642949 37.61660629 98 39 C96.90300781 38.45730469 95.80601562 37.91460937 94.67578125 37.35546875 C93.22130061 36.6329203 91.7668765 35.91025804 90.3125 35.1875 C89.59126953 34.83107422 88.87003906 34.47464844 88.12695312 34.10742188 C85.13048543 32.61602928 82.20542385 31.1255536 79.34765625 29.37890625 C76.68245842 27.81349055 74.03121877 26.80008413 71.125 25.75 C63.54325884 22.90255875 56.30850246 19.47153867 49 16 C46.96081112 15.05712262 44.91940129 14.11902155 42.875 13.1875 C42.04742188 12.80980469 41.21984375 12.43210937 40.3671875 12.04296875 C37.93252022 10.97026881 35.4757867 9.97357448 33 9 C33 8.34 33 7.68 33 7 C37.93412394 7.52411028 41.58018255 9.18080105 45.8125 11.625 C53.92541571 16.14718976 62.36212618 19.61674465 71 23 C68.83929533 20.83929533 67.5219586 20.3377297 64.6875 19.3125 C58.14287006 16.79238628 52.11198868 13.41045136 46 10 C49.50740921 8.8308636 49.84254069 9.12618281 53 10.6875 C58.21289781 13.1522474 63.56361919 15.08964562 69 17 C69 17.66 69 18.32 69 19 C69.72574219 19.11730469 70.45148438 19.23460937 71.19921875 19.35546875 C74.05072738 20.01167366 76.22507471 20.96235724 78.8125 22.3125 C80.11380859 22.98345703 80.11380859 22.98345703 81.44140625 23.66796875 C82.28574219 24.10753906 83.13007812 24.54710937 84 25 C85.41516597 25.71132681 86.83170375 26.41993526 88.25 27.125 C88.89710938 27.44984375 89.54421875 27.7746875 90.2109375 28.109375 C91.75822124 28.87963852 93.31574435 29.62926904 94.875 30.375 C97.54279361 31.76225268 100.06385211 33.24236953 102.625 34.8125 C111.35640715 40.09591904 120.45276141 44.40922443 130 48 C127.26667107 45.85744037 124.53241997 44.12159688 121.453125 42.51953125 C120.60878906 42.07802734 119.76445313 41.63652344 118.89453125 41.18164062 C118.02183594 40.72982422 117.14914062 40.27800781 116.25 39.8125 C115.36183594 39.34908203 114.47367188 38.88566406 113.55859375 38.40820312 C111.37403255 37.26894272 109.18781392 36.13299777 107 35 C111.27800976 33.57399675 113.86765922 35.54362936 117.6875 37.4375 C118.38939453 37.77587891 119.09128906 38.11425781 119.81445312 38.46289062 C121.54723706 39.29981348 123.27419752 40.14877393 125 41 C125 41.66 125 42.32 125 43 C125.886875 43.28875 126.77375 43.5775 127.6875 43.875 C130.49042733 44.82693759 133.25155423 45.90062169 136 47 C136 63.83 136 80.66 136 98 C131.86141071 96.34456428 129.49365178 95.05448017 126.0625 92.4375 C122.02504172 89.43885724 117.93668696 86.62763275 113.6875 83.9375 C107.17055701 79.80457597 100.76276431 75.51708317 94.375 71.1875 C93.41424561 70.54095459 92.45349121 69.89440918 91.46362305 69.22827148 C90.55523682 68.61024658 89.64685059 67.99222168 88.7109375 67.35546875 C87.89931152 66.80528076 87.08768555 66.25509277 86.25146484 65.68823242 C83.94577959 63.95934351 81.98558777 62.08421345 80 60 C80.66 60 81.32 60 82 60 C80.88333826 56.65001479 80.25305075 56.20659778 77.4375 54.3125 C76.79683594 53.87550781 76.15617188 53.43851562 75.49609375 52.98828125 C74.75552734 52.49908203 74.75552734 52.49908203 74 52 C74.99 51.01 74.99 51.01 76 50 C74.60517513 49.06100025 73.20908834 48.12387489 71.8125 47.1875 C71.03519531 46.66542969 70.25789062 46.14335937 69.45703125 45.60546875 C66.24429512 43.50620873 62.97207245 41.54519195 59.625 39.66796875 C51.65810075 35.17473242 44.11084302 30.13534191 36.5625 24.9753418 C31.51615523 21.55555557 26.52187222 18.58757501 21 16 C21.33 15.34 21.66 14.68 22 14 C21.24074219 13.60167969 20.48148437 13.20335937 19.69921875 12.79296875 C18.70535156 12.26316406 17.71148437 11.73335938 16.6875 11.1875 C15.70136719 10.66542969 14.71523438 10.14335937 13.69921875 9.60546875 C11.34121055 8.20294868 9.88512334 6.92701497 8 5 C5.96767758 3.80400932 5.96767758 3.80400932 3.8125 2.8125 C3.09707031 2.46832031 2.38164062 2.12414062 1.64453125 1.76953125 C1.10183594 1.51558594 0.55914062 1.26164062 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#4A3027\",transform:\"translate(490,422)\"})),_path49||(_path49=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C12.13403515 0 24.25589095 0.03613438 36.38671875 0.21875 C37.95139905 0.24128912 39.5160811 0.26370675 41.08076477 0.28601074 C45.1263711 0.34399507 49.17195204 0.40358796 53.2175293 0.46356201 C57.37482268 0.52489205 61.53213885 0.58463715 65.68945312 0.64453125 C73.79299134 0.76150407 81.89650334 0.88018292 90 1 C90 1.33 90 1.66 90 2 C89.33057373 2.01981934 88.66114746 2.03963867 87.97143555 2.06005859 C84.87646029 2.15655166 81.78204901 2.26571634 78.6875 2.375 C77.63498047 2.4059375 76.58246094 2.436875 75.49804688 2.46875 C62.19952811 2.90326481 62.19952811 2.90326481 49.875 7.4375 C45.38176489 9.87133569 40.89088373 11.54691135 36 13 C38.64 12.67 41.28 12.34 44 12 C42.50529266 14.98941468 39.92442937 15.53778532 37 17 C36.67 17.66 36.34 18.32 36 19 C34.329375 19.2165625 34.329375 19.2165625 32.625 19.4375 C28.630764 20.05729524 28.60576223 20.37167357 26 23 C23.73168945 24.07495117 23.73168945 24.07495117 21.11328125 25.04296875 C20.17548828 25.39423828 19.23769531 25.74550781 18.27148438 26.10742188 C16.80678711 26.64206055 16.80678711 26.64206055 15.3125 27.1875 C13.83040039 27.73954102 13.83040039 27.73954102 12.31835938 28.30273438 C9.88152671 29.20918904 7.44213269 30.10794452 5 31 C7.71241315 30.43214513 10.41885202 29.84642077 13.125 29.25 C13.88554687 29.09273438 14.64609375 28.93546875 15.4296875 28.7734375 C20.40070997 27.65924281 23.81811883 26.03124523 28 23 C29.62659203 22.54455423 31.25475456 22.0929194 32.89453125 21.6875 C36.78115963 20.41839685 40.3273703 18.37389263 43.95703125 16.51171875 C47.38547468 14.80849974 50.85567694 13.37790775 54.42578125 12.00390625 C57.37339843 10.85438028 60.27692435 9.61515832 63.1875 8.375 C67.42026357 6.59997012 71.54972332 5.11256917 76 4 C74.52374116 6.95251768 72.41424671 7.34580191 69.42578125 8.6796875 C68.28302734 9.19660156 67.14027344 9.71351563 65.96289062 10.24609375 C64.75826172 10.78363281 63.55363281 11.32117188 62.3125 11.875 C59.95223157 12.92999763 57.59408337 13.98975396 55.23828125 15.0546875 C54.18680908 15.52374512 53.13533691 15.99280273 52.05200195 16.47607422 C48.80619781 18.09676932 45.97419675 19.93077584 43 22 C45.62113708 22 47.50935112 21.68707555 50 21 C50 20.34 50 19.68 50 19 C51.32 19 52.64 19 54 19 C54 18.34 54 17.68 54 17 C56.06175364 16.040062 58.12443469 15.08211576 60.1875 14.125 C61.33605469 13.59132813 62.48460937 13.05765625 63.66796875 12.5078125 C67.72708316 10.67097995 71.64352805 8.96810488 76 8 C76 8.66 76 9.32 76 10 C72.535 11.485 72.535 11.485 69 13 C70.258125 13.185625 71.51625 13.37125 72.8125 13.5625 C73.52019531 13.66691406 74.22789063 13.77132813 74.95703125 13.87890625 C77.2025342 14.13904799 77.2025342 14.13904799 80 13 C80 14 80 15 80 16 C81.485 16.495 81.485 16.495 83 17 C78.69856868 19.27245428 74.53457897 21.2090528 69.921875 22.7578125 C63.78114432 24.95999141 58.23352619 27.92556038 52.5625 31.125 C50.64736861 32.1905234 48.73201304 33.255644 46.81640625 34.3203125 C45.98568604 34.78711426 45.15496582 35.25391602 44.29907227 35.73486328 C42.22238466 36.87762586 40.12825502 37.95712752 38 39 C39.931824 40.25941065 39.931824 40.25941065 41.82128906 39.40063477 C47.54965255 36.73338942 53.17125821 33.90482119 58.75 30.9375 C59.57371094 30.50373047 60.39742187 30.06996094 61.24609375 29.62304688 C64.51508813 27.89379622 67.74201935 26.15694112 70.90234375 24.234375 C73.26043634 22.8467451 75.30643267 22.38479533 78 22 C75.43451485 30.18712201 66.35022465 34.09471714 59.1796875 38.01171875 C56.95770261 39.01917785 54.87920825 39.6042836 52.5 40.125 C51.345 40.41375 50.19 40.7025 49 41 C48.67 41.99 48.34 42.98 48 44 C46.25 44.95703125 46.25 44.95703125 44 45.8125 C39.61875415 47.62229693 35.91317064 49.91168694 32.04296875 52.6328125 C30.08707006 53.94173131 28.12599337 54.99672223 26 56 C29.25843255 54.99143754 32.16521215 53.91253474 35.1875 52.3125 C38 51 38 51 41 52 C39.60201172 52.72703125 39.60201172 52.72703125 38.17578125 53.46875 C30.62877446 57.42564606 23.316011 61.58185839 16.08984375 66.1015625 C3.2345679 74 3.2345679 74 0 74 C0 49.58 0 25.16 0 0 Z \",fill:\"#4D3429\",transform:\"translate(0,415)\"})),_path50||(_path50=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 2.97 0 5.94 0 9 C-2.03976214 9.96238036 -4.08190046 10.91972527 -6.125 11.875 C-7.26195312 12.40867187 -8.39890625 12.94234375 -9.5703125 13.4921875 C-13 15 -13 15 -15.8359375 15.93359375 C-20.19009281 17.40110535 -24.31846265 19.29004564 -28.5 21.1875 C-29.39146729 21.5904126 -30.28293457 21.9933252 -31.20141602 22.40844727 C-37.28840475 25.17735507 -43.2783568 28.08432654 -49.23828125 31.1171875 C-53.99181186 33.51955177 -58.81184538 35.78271812 -63.625 38.0625 C-72.0712511 42.0669039 -80.51306674 46.07828554 -88.765625 50.47265625 C-89.64734375 50.93542969 -90.5290625 51.39820313 -91.4375 51.875 C-92.19933594 52.28492188 -92.96117187 52.69484375 -93.74609375 53.1171875 C-96.30731489 54.12036944 -98.273049 54.16352087 -101 54 C-101 54.66 -101 55.32 -101 56 C-101.69633545 56.32049316 -102.3926709 56.64098633 -103.11010742 56.97119141 C-116.67157534 63.22080748 -130.19352294 69.53776862 -143.625 76.0625 C-152.91519783 80.57455145 -162.23988427 85.00060686 -171.625 89.3125 C-172.69685547 89.80540527 -173.76871094 90.29831055 -174.87304688 90.80615234 C-176.9439144 91.75802142 -179.0148747 92.70968868 -181.0859375 93.66113281 C-182.04757812 94.10295898 -183.00921875 94.54478516 -184 95 C-185.34191406 95.61633301 -185.34191406 95.61633301 -186.7109375 96.24511719 C-197.7790676 101.34604493 -208.47217538 106.85755888 -219 113 C-211.82591705 113 -203.65516844 107.49380348 -197.2668457 104.37475586 C-190.54369457 101.15122994 -186.2033554 100.90118307 -179 102 C-182.80098066 105.32842631 -187.25066798 106.88934357 -191.875 108.75 C-197.70041729 111.14273948 -203.40137301 113.61465559 -209 116.5 C-222.15201231 123.22112127 -235.93792705 128.45258065 -249.8125 133.46875 C-253.0941341 134.65783234 -256.33535734 135.91880365 -259.5625 137.25 C-268.85799227 141.00052905 -276.97896807 143.50525798 -287 141 C-285.68 140.67 -284.36 140.34 -283 140 C-283 139.34 -283 138.68 -283 138 C-283.99 138 -284.98 138 -286 138 C-287.60546875 136.03125 -287.60546875 136.03125 -289.1875 133.5 C-289.71730469 132.6646875 -290.24710937 131.829375 -290.79296875 130.96875 C-291.19128906 130.3190625 -291.58960938 129.669375 -292 129 C-290.87464844 128.52691406 -289.74929688 128.05382812 -288.58984375 127.56640625 C-278.2027267 123.12193507 -268.46342454 118.17951638 -259 112 C-258.39777618 111.68119873 -257.79555237 111.36239746 -257.17507935 111.03393555 C-254.34303608 109.38272636 -252.36065942 108.1452459 -251.34849548 104.93119812 C-251.09318257 102.37307849 -251.05661706 99.89475626 -251.09765625 97.32421875 C-251.08536484 96.3990596 -251.07307343 95.47390045 -251.06040955 94.52070618 C-251.02870081 91.57549516 -251.04494992 88.63278884 -251.0625 85.6875 C-251.04938985 83.68682571 -251.03314942 81.68616931 -251.01367188 79.68554688 C-250.97283518 74.7898307 -250.97499395 69.89580477 -251 65 C-250.67 65 -250.34 65 -250 65 C-250 78.2 -250 91.4 -250 105 C-245.42904211 102.71452106 -241.82426247 100.58720532 -237.75 97.625 C-237.16226807 97.20017334 -236.57453613 96.77534668 -235.96899414 96.33764648 C-233.9761658 94.89607536 -231.98796823 93.44826502 -230 92 C-227.61279891 90.26517675 -225.22462721 88.53171917 -222.83496094 86.80029297 C-221.26494698 85.66227267 -219.69652339 84.5220543 -218.12988281 83.37939453 C-207.96372153 76 -207.96372153 76 -205 76 C-204.814375 75.401875 -204.62875 74.80375 -204.4375 74.1875 C-202.27726247 70.90018201 -199.64892345 70.35145313 -196 69 C-199.32118434 76.25800284 -204.73177311 81.76967694 -212 85 C-214.9375 85.25 -214.9375 85.25 -217 85 C-217.24105469 85.59039062 -217.48210937 86.18078125 -217.73046875 86.7890625 C-219.24428109 89.42542491 -220.84888943 90.61113764 -223.3125 92.375 C-226.20073837 94.52266443 -228.61685053 96.52065569 -230.8125 99.375 C-233.18310444 102.21972533 -233.63717034 102.26438101 -237 103 C-237.804375 103.804375 -238.60875 104.60875 -239.4375 105.4375 C-242 108 -242 108 -244.5625 108.9375 C-247.29399246 109.85853004 -247.29399246 109.85853004 -248.875 112.9375 C-251.80170038 117.15539173 -255.27614213 118.47036097 -260.25 119.4375 C-262.19427133 119.86358233 -262.19427133 119.86358233 -263.2890625 121.91015625 C-265.39536463 124.48292255 -266.98093672 124.99676613 -270.125 126 C-273.85476031 127.25978606 -277.51075831 128.56114542 -281.125 130.125 C-281.84945313 130.43695313 -282.57390625 130.74890625 -283.3203125 131.0703125 C-285.18297076 131.89428482 -285.18297076 131.89428482 -286 134 C-278.16724554 133.62099575 -270.71400009 131.71400009 -265 126 C-263.68 126 -262.36 126 -261 126 C-260.505 124.515 -260.505 124.515 -260 123 C-258.88625 122.7834375 -258.88625 122.7834375 -257.75 122.5625 C-256.8425 122.376875 -255.935 122.19125 -255 122 C-253.88625 121.7834375 -253.88625 121.7834375 -252.75 121.5625 C-252.1725 121.376875 -251.595 121.19125 -251 121 C-250.67 120.34 -250.34 119.68 -250 119 C-248.38901347 118.06238879 -246.73588285 117.19608599 -245.0625 116.375 C-244.16660156 115.92898437 -243.27070313 115.48296875 -242.34765625 115.0234375 C-240 114 -240 114 -238 114 C-238 113.34 -238 112.68 -238 112 C-237.20335937 111.61328125 -236.40671875 111.2265625 -235.5859375 110.828125 C-228.92617248 107.63697115 -228.92617248 107.63697115 -222.625 103.8125 C-219.86145898 101.90434073 -216.99906106 100.49953053 -214 99 C-213.34 98.34 -212.68 97.68 -212 97 C-210.49600906 96.37452173 -208.97163639 95.79739139 -207.4375 95.25 C-203.02144052 93.53649333 -199.42359026 91.42240815 -195.55859375 88.71484375 C-192.39204451 86.5925306 -189.12455541 84.69691538 -185.8125 82.8125 C-185.23016602 82.47959961 -184.64783203 82.14669922 -184.04785156 81.80371094 C-181.30831003 80.25229157 -178.55198568 78.77652874 -175.734375 77.37109375 C-172.95869281 76.05569878 -172.95869281 76.05569878 -170.4375 74.25 C-167.47176985 72.72911274 -166.11915129 73.01969531 -163 74 C-166.86339721 77.16283451 -171.20115314 79.42352209 -175.5625 81.8125 C-176.36155762 82.25319824 -177.16061523 82.69389648 -177.98388672 83.14794922 C-180.3206844 84.43547615 -182.65982039 85.71863216 -185 87 C-185.63180176 87.34627441 -186.26360352 87.69254883 -186.91455078 88.04931641 C-189.93949053 89.7060977 -192.96760863 91.35689807 -196 93 C-189.8581355 93.51115647 -186.33140167 92.04647395 -181.0625 89 C-179.72162945 88.24718357 -178.37909029 87.49733373 -177.03515625 86.75 C-176.27734863 86.32807373 -175.51954102 85.90614746 -174.73876953 85.47143555 C-170.65650338 83.27819093 -166.5025984 81.23406383 -162.35206604 79.17378235 C-157.56324108 76.79249946 -152.80387619 74.36104479 -148.0625 71.88671875 C-134.3939939 64.76357458 -120.74782312 57.73159152 -106.6484375 51.48706055 C-101.56841254 49.23076302 -96.74582343 46.81234504 -91.99023438 43.92675781 C-90 43 -90 43 -86 43 C-86 42.34 -86 41.68 -86 41 C-52.80342268 23.74657438 -52.80342268 23.74657438 -38.0703125 16.91015625 C-33.93717446 14.98930053 -29.87521509 12.93965849 -25.8125 10.875 C-20.31604226 8.09388516 -14.76330534 5.48148965 -9.125 3 C-8.44026611 2.69690918 -7.75553223 2.39381836 -7.05004883 2.08154297 C-2.25076611 0 -2.25076611 0 0 0 Z \",fill:\"#49362D\",transform:\"translate(626,98)\"})),_path51||(_path51=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 2.64 0 5.28 0 8 C-0.84778267 8.06850662 -0.84778267 8.06850662 -1.71269226 8.13839722 C-7.60215451 8.61586023 -13.49063221 9.10431389 -19.37866211 9.59912109 C-21.57536933 9.78227458 -23.77231113 9.96263705 -25.96948242 10.14013672 C-29.13005537 10.39595519 -32.28964503 10.66184324 -35.44921875 10.9296875 C-36.42960617 11.00686005 -37.40999359 11.08403259 -38.42008972 11.1635437 C-44.94518555 11.66719109 -44.94518555 11.66719109 -51 14 C-51.33 14.66 -51.66 15.32 -52 16 C-57.28 16 -62.56 16 -68 16 C-68 18.64 -68 21.28 -68 24 C-63.05 24 -58.1 24 -53 24 C-53 25.32 -53 26.64 -53 28 C-52.2575 27.525625 -51.515 27.05125 -50.75 26.5625 C-43.79230959 22.60926681 -36.00615565 23.8171386 -28.3515625 24.77734375 C-24.23968934 25.16667393 -20.12567529 25.07751791 -16 25 C-16 24.01 -16 23.02 -16 22 C-16.95261719 22.01160156 -17.90523438 22.02320313 -18.88671875 22.03515625 C-20.14097656 22.04417969 -21.39523437 22.05320312 -22.6875 22.0625 C-23.92886719 22.07410156 -25.17023438 22.08570313 -26.44921875 22.09765625 C-30 22 -30 22 -32.40625 21.5 C-36.20719183 20.76728832 -39.95218594 20.89543455 -43.8125 20.9375 C-44.99489258 20.94426758 -44.99489258 20.94426758 -46.20117188 20.95117188 C-48.13414761 20.96288688 -50.06708393 20.98082002 -52 21 C-44.58515823 12.81629797 -32.04152085 12.78782277 -21.75 11.75 C-20.95807251 11.66528442 -20.16614502 11.58056885 -19.35021973 11.49328613 C-6.54230431 10.12570186 6.11588288 9.48917597 19 10 C19.33 11.65 19.66 13.3 20 15 C16.67485327 16.13357275 13.4120992 17.1469752 10 18 C22.54 17.67 35.08 17.34 48 17 C48 17.33 48 17.66 48 18 C45.08397391 18.50400451 42.16727908 19.00334666 39.25 19.5 C38.425 19.64308594 37.6 19.78617187 36.75 19.93359375 C35.95078125 20.06894531 35.1515625 20.20429688 34.328125 20.34375 C33.5949707 20.46943359 32.86181641 20.59511719 32.10644531 20.72460938 C30 21 30 21 26 21 C25.34 22.65 24.68 24.3 24 26 C24.85722656 25.68546875 25.71445312 25.3709375 26.59765625 25.046875 C34.28047983 22.68292928 42.45274059 22.01619977 50 25 C50 25.66 50 26.32 50 27 C48.28645833 27.3671875 46.57291667 27.734375 44.859375 28.1015625 C43.73926025 28.34165039 42.61914551 28.58173828 41.46508789 28.82910156 C38.96177437 29.36539663 36.45835411 29.90119369 33.95483398 30.43652344 C27.4217005 31.83393902 20.8905599 33.23946809 14.36328125 34.6640625 C13.13834961 34.93009277 11.91341797 35.19612305 10.65136719 35.47021484 C8.32711771 35.97522524 6.0035041 36.48317481 3.68066406 36.99462891 C-24.23031134 43.0410346 -24.23031134 43.0410346 -34.73828125 37.90625 C-38.4400912 36.42296864 -42.11595354 36.07813208 -46 37 C-46.89337067 37.66159119 -47.78674133 38.32318237 -48.70718384 39.00482178 C-52.50266638 41.30457486 -54.52769636 41.48678293 -58.92333984 41.45410156 C-59.5874588 41.45468567 -60.25157776 41.45526978 -60.93582153 41.45587158 C-63.11140872 41.4531047 -65.2855924 41.42208308 -67.4609375 41.390625 C-68.97693127 41.38315754 -70.49293475 41.37746699 -72.00894165 41.37347412 C-75.98430387 41.35825726 -79.95907442 41.31901056 -83.9342041 41.2746582 C-87.99641925 41.23361957 -92.05873071 41.21544485 -96.12109375 41.1953125 C-104.08099961 41.15251154 -112.04042605 41.08430922 -120 41 C-115.4276709 36.06036469 -110.06292982 35.90497999 -103.62890625 35.5859375 C-101.27371844 35.50677152 -98.9182104 35.436688 -96.5625 35.375 C-94.74975586 35.31699219 -94.74975586 35.31699219 -92.90039062 35.2578125 C-89.93374183 35.16400542 -86.96709164 35.07830754 -84 35 C-83.67 33.68 -83.34 32.36 -83 31 C-85.97 30.01 -88.94 29.02 -92 28 C-92 27.01 -92 26.02 -92 25 C-85.4 25 -78.8 25 -72 25 C-72 28.3 -72 31.6 -72 35 C-70.68 35 -69.36 35 -68 35 C-69.24395999 26.80909854 -69.24395999 26.80909854 -71.125 18.75 C-72.08949857 14.61643469 -72.15081204 11.22273724 -72 7 C-72.66 7 -73.32 7 -74 7 C-73.67 5.68 -73.34 4.36 -73 3 C-72.01 3.66 -71.02 4.32 -70 5 C-69.67 4.01 -69.34 3.02 -69 2 C-68.34 4.97 -67.68 7.94 -67 11 C-66.67 10.34 -66.34 9.68 -66 9 C-61.38 9 -56.76 9 -52 9 C-51.505 9.99 -51.505 9.99 -51 11 C-50.16855469 10.43410156 -49.33710938 9.86820312 -48.48046875 9.28515625 C-47.39378906 8.55167969 -46.30710937 7.81820313 -45.1875 7.0625 C-44.10855469 6.33160156 -43.02960938 5.60070312 -41.91796875 4.84765625 C-36.73523622 1.56595279 -31.65604092 1.47287087 -25.6875 0.9375 C-24.70378418 0.84807129 -23.72006836 0.75864258 -22.70654297 0.66650391 C-15.11157466 0.01401522 -7.62425848 -0.23419224 0 0 Z \",fill:\"#EC978C\",transform:\"translate(414,463)\"})),_path52||(_path52=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3 0.66 3 1.32 3 2 C6.465 1.505 6.465 1.505 10 1 C10 1.99 10 2.98 10 4 C9.11248047 4.27263672 9.11248047 4.27263672 8.20703125 4.55078125 C3.20847507 6.12501041 3.20847507 6.12501041 -1.4375 8.5 C-4.6841118 10.40045569 -7.97000954 11.21719815 -11.59765625 12.15625 C-14.2294891 13.08060105 -15.77869624 14.32115366 -18 16 C-23.4536608 19.08053926 -29.17387076 21.28532959 -35.0625 23.375 C-46.9543991 27.67923092 -58.6215184 32.38557549 -70.2265625 37.41796875 C-75.44163819 39.63826249 -80.74540721 41.64028727 -86.0480957 43.64038086 C-86.77859131 43.91889893 -87.50908691 44.19741699 -88.26171875 44.484375 C-88.91100342 44.72897461 -89.56028809 44.97357422 -90.22924805 45.22558594 C-92.28255965 46.06210949 -92.28255965 46.06210949 -95 48 C-99.88210596 49.85984989 -104.89939209 50.93453968 -110 52 C-110 52.66 -110 53.32 -110 54 C-110.70382812 54.20753906 -111.40765625 54.41507813 -112.1328125 54.62890625 C-119.59169865 56.95615663 -126.2730342 59.98892305 -133.1640625 63.609375 C-136 65 -136 65 -138 65 C-138 65.66 -138 66.32 -138 67 C-135.03 66.505 -135.03 66.505 -132 66 C-132 66.66 -132 67.32 -132 68 C-131.43152344 67.7834375 -130.86304688 67.566875 -130.27734375 67.34375 C-129.50519531 67.0653125 -128.73304688 66.786875 -127.9375 66.5 C-127.18339844 66.2215625 -126.42929687 65.943125 -125.65234375 65.65625 C-123 65 -123 65 -119.9765625 65.15625 C-114.0874835 64.924852 -108.97317961 62.92752263 -103.4375 61 C-102.24310303 60.59281738 -101.04870605 60.18563477 -99.81811523 59.76611328 C-90.56660215 56.5938494 -81.36883781 53.27813775 -72.19140625 49.8984375 C-66.31915941 47.73976494 -60.41257826 45.68444584 -54.50219727 43.63305664 C-49.51698008 41.89705897 -44.55579349 40.10671453 -39.60522461 38.27441406 C-23.69701859 32.40070666 -7.59286061 27.11326796 8.51464844 21.81738281 C11.07392402 20.97568786 13.63267834 20.13242075 16.19140625 19.2890625 C20.4872484 17.87412597 24.7849761 16.46505752 29.084198 15.0604248 C30.72927417 14.52247159 32.37391213 13.98317635 34.01809692 13.44250488 C36.30363015 12.6916611 38.59096509 11.94659376 40.87890625 11.203125 C41.5584436 10.97874756 42.23798096 10.75437012 42.93811035 10.52319336 C45.75795019 9.61295857 48.01417389 9 51 9 C51 9.66 51 10.32 51 11 C48.96063582 11.75623839 46.91832285 12.50452397 44.875 13.25 C43.73804688 13.66765625 42.60109375 14.0853125 41.4296875 14.515625 C37.81128514 15.77915939 34.14828511 16.81775085 30.45703125 17.84765625 C23.48514207 19.8148706 16.64520937 22.09746538 9.81005859 24.48867798 C6.33049886 25.7059604 2.84679469 26.91127546 -0.63671875 28.1171875 C-1.33912689 28.36062393 -2.04153503 28.60406036 -2.76522827 28.85487366 C-9.65597545 31.23776477 -16.57593877 33.52824827 -23.5 35.8125 C-31.51541914 38.46422192 -39.43579633 41.24113756 -47.31640625 44.26953125 C-55.53954797 47.36207674 -63.8912691 50.1190913 -72.20581055 52.95458984 C-73.53568633 53.40840617 -74.86552061 53.86234416 -76.1953125 54.31640625 C-76.85441116 54.54143326 -77.51350983 54.76646027 -78.19258118 54.99830627 C-82.44635253 56.45520499 -86.68336376 57.95361993 -90.9140625 59.4765625 C-98.25761949 62.11205689 -105.64389109 64.61000731 -113.04541016 67.0769043 C-115.29049061 67.82601032 -117.53391451 68.57994962 -119.77734375 69.33398438 C-121.21084007 69.8127918 -122.64443018 70.29131854 -124.078125 70.76953125 C-124.74571838 70.99445755 -125.41331177 71.21938385 -126.10113525 71.4511261 C-130.77110605 73 -130.77110605 73 -133 73 C-133 73.66 -133 74.32 -133 75 C-134.98 75.99 -134.98 75.99 -137 77 C-136.505 77.804375 -136.01 78.60875 -135.5 79.4375 C-134 82 -134 82 -134 83 C-135.18335938 83.32613281 -136.36671875 83.65226562 -137.5859375 83.98828125 C-148.47569913 86.99386973 -148.47569913 86.99386973 -159.3125 90.18359375 C-163.0590278 91.32171048 -166.80953111 92.44582032 -170.5625 93.5625 C-171.25931885 93.77261719 -171.9561377 93.98273438 -172.67407227 94.19921875 C-177.73983406 95.70247568 -182.82968025 96.91436715 -188 98 C-188.82636963 98.1750708 -189.65273926 98.3501416 -190.50415039 98.53051758 C-193.08422614 99.07159199 -195.6666557 99.59977187 -198.25 100.125 C-199.12140625 100.30675781 -199.9928125 100.48851562 -200.890625 100.67578125 C-204.97750732 101.50437172 -208.80456915 102.26004737 -213 102 C-212.67 101.34 -212.34 100.68 -212 100 C-210.35 100 -208.7 100 -207 100 C-207 99.34 -207 98.68 -207 98 C-207.94653442 98.2131636 -208.89306885 98.42632721 -209.86828613 98.64595032 C-220.33476148 100.87771064 -230.29494033 101.40126127 -240.96875 101.29296875 C-242.62739676 101.28735424 -244.28604858 101.28309296 -245.94470215 101.28010559 C-250.25187596 101.26880244 -254.55873276 101.2394658 -258.86578369 101.20599365 C-263.28417679 101.17497409 -267.70262251 101.16153305 -272.12109375 101.14648438 C-280.74753923 101.11457772 -289.37372988 101.06356411 -298 101 C-298 100.67 -298 100.34 -298 100 C-275.56 99.67 -253.12 99.34 -230 99 C-229.67 98.34 -229.34 97.68 -229 97 C-229.66 96.67 -230.32 96.34 -231 96 C-230.33355469 95.90203125 -229.66710937 95.8040625 -228.98046875 95.703125 C-228.05878906 95.55359375 -227.13710938 95.4040625 -226.1875 95.25 C-224.84751953 95.04117188 -224.84751953 95.04117188 -223.48046875 94.828125 C-219.52239647 93.88636145 -215.8353497 92.54187088 -212.02758789 91.11962891 C-208.97349814 89.99019938 -205.90292134 88.92778459 -202.8203125 87.87890625 C-185.38244516 81.87711433 -168.70920927 74.78807832 -152 67 C-151.13874512 66.60055176 -150.27749023 66.20110352 -149.39013672 65.78955078 C-146.2362683 64.32676103 -143.08662788 62.85680388 -139.9453125 61.3671875 C-136.65694252 59.84075581 -133.33815967 58.41390723 -130 57 C-138.01759106 55.3188922 -142.04881524 56.95361928 -149 61 C-154.7589502 64.03792819 -160.73286504 67.18553642 -167 69 C-167.99 68.67 -168.98 68.34 -170 68 C-157.84702227 57.72192404 -141.31015939 51.68758279 -127 45 C-126.1450293 44.58685547 -125.29005859 44.17371094 -124.40917969 43.74804688 C-123.21276855 43.1844043 -123.21276855 43.1844043 -121.9921875 42.609375 C-121.29206543 42.27389648 -120.59194336 41.93841797 -119.87060547 41.59277344 C-118 41 -118 41 -115 42 C-115.99 43.32 -116.98 44.64 -118 46 C-116.02 45.34 -114.04 44.68 -112 44 C-112.33 44.99 -112.66 45.98 -113 47 C-106.86976225 46.72135283 -102.44013957 44.36425201 -97.046875 41.546875 C-93.60061356 39.79723458 -90.10142188 38.38702752 -86.5 36.99609375 C-81.05253455 34.82561924 -75.74611505 32.29747638 -70.4453125 29.79296875 C-69.65898437 29.42816406 -68.87265625 29.06335938 -68.0625 28.6875 C-67.37285156 28.36136719 -66.68320312 28.03523438 -65.97265625 27.69921875 C-64 27 -64 27 -60 27 C-60 26.34 -60 25.68 -60 25 C-46.3040802 19.05612469 -46.3040802 19.05612469 -41.9375 17.5 C-38.32873445 16.2011555 -34.90551002 14.572982 -31.4375 12.9375 C-25.50309344 10.16948398 -20.62371926 8 -14 8 C-14 7.34 -14 6.68 -14 6 C-13.07316406 5.65066406 -12.14632813 5.30132812 -11.19140625 4.94140625 C-9.99386719 4.48636719 -8.79632812 4.03132812 -7.5625 3.5625 C-5.77005859 2.88380859 -5.77005859 2.88380859 -3.94140625 2.19140625 C-1.15554277 1.2855174 -1.15554277 1.2855174 0 0 Z \",fill:\"#3D2A25\",transform:\"translate(575,144)\"})),_path53||(_path53=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.825 0.226875 1.65 0.45375 2.5 0.6875 C3.4075 0.6875 4.315 0.6875 5.25 0.6875 C5.9925 0.6875 6.735 0.6875 7.5 0.6875 C7.995 1.1825 7.995 1.1825 8.5 1.6875 C9.634375 1.6875 10.76875 1.6875 11.9375 1.6875 C15.5 1.6875 15.5 1.6875 17.5 2.6875 C17.5 3.3475 17.5 4.0075 17.5 4.6875 C15.52 5.0175 13.54 5.3475 11.5 5.6875 C12.139375 5.89375 12.77875 6.1 13.4375 6.3125 C15.5 7.6875 15.5 7.6875 16.25 10.8125 C16.3325 11.76125 16.415 12.71 16.5 13.6875 C16.83 13.0275 17.16 12.3675 17.5 11.6875 C24.1 11.6875 30.7 11.6875 37.5 11.6875 C37.995 13.6675 37.995 13.6675 38.5 15.6875 C41.8 15.3575 45.1 15.0275 48.5 14.6875 C48.17 15.6775 47.84 16.6675 47.5 17.6875 C36.94 17.6875 26.38 17.6875 15.5 17.6875 C15.5 18.6775 15.5 19.6675 15.5 20.6875 C16.16 21.0175 16.82 21.3475 17.5 21.6875 C16.84 21.6875 16.18 21.6875 15.5 21.6875 C15.51047363 22.8835083 15.52094727 24.0795166 15.53173828 25.31176758 C15.56791405 29.74533093 15.59089166 34.17888121 15.60986328 38.61254883 C15.61992639 40.53216749 15.63357816 42.45177081 15.65087891 44.37133789 C15.67511364 47.12910752 15.68647992 49.88667464 15.6953125 52.64453125 C15.70563507 53.50399857 15.71595764 54.36346588 15.72659302 55.24897766 C15.72674408 56.04958115 15.72689514 56.85018463 15.72705078 57.67504883 C15.731492 58.3789827 15.73593323 59.08291656 15.74050903 59.80818176 C15.5 61.6875 15.5 61.6875 13.5 64.6875 C14.04269531 64.89503906 14.58539063 65.10257812 15.14453125 65.31640625 C19.17354671 67.05142372 21.76331713 68.26098949 23.5 72.4375 C23.83 73.51 24.16 74.5825 24.5 75.6875 C26.48 75.0275 28.46 74.3675 30.5 73.6875 C30.83 68.7375 31.16 63.7875 31.5 58.6875 C29.02604167 58.72005208 26.55208333 58.75260417 24.078125 58.78515625 C21.5 58.6875 21.5 58.6875 17.5 57.6875 C17.83 52.7375 18.16 47.7875 18.5 42.6875 C26.42 42.6875 34.34 42.6875 42.5 42.6875 C39.40243902 49.91514228 39.40243902 49.91514228 35.5 53.6875 C33.99279568 57.51065241 34.57890548 61.49162041 34.875 65.5 C34.91882813 66.18642578 34.96265625 66.87285156 35.0078125 67.58007812 C35.3098298 72.01385981 35.86719694 76.25787855 36.5 80.6875 C42.11 81.0175 47.72 81.3475 53.5 81.6875 C53.5 83.0075 53.5 84.3275 53.5 85.6875 C52.18 85.6875 50.86 85.6875 49.5 85.6875 C49.5 86.3475 49.5 87.0075 49.5 87.6875 C44.63707545 90.11896227 37.82701194 89.20283659 32.5 88.6875 C29.5150716 87.3696074 27.95770853 85.93149475 25.5 83.6875 C23.84630643 82.98927383 22.18272986 82.31251395 20.5 81.6875 C17.54816899 78.73566899 17.41336012 75.73238053 16.5 71.6875 C17.16 71.6875 17.82 71.6875 18.5 71.6875 C18.83 72.3475 19.16 73.0075 19.5 73.6875 C19.5 72.6975 19.5 71.7075 19.5 70.6875 C14.94508386 68.48350832 10.47093824 68.09903737 5.5 67.6875 C5.17 66.0375 4.84 64.3875 4.5 62.6875 C-1.11 62.3575 -6.72 62.0275 -12.5 61.6875 C-12.5 61.3575 -12.5 61.0275 -12.5 60.6875 C-9.37501937 60.65854024 -6.2500731 60.64071517 -3.125 60.625 C-2.23554688 60.61662109 -1.34609375 60.60824219 -0.4296875 60.59960938 C0.42109375 60.59638672 1.271875 60.59316406 2.1484375 60.58984375 C2.93395996 60.58460693 3.71948242 60.57937012 4.52880859 60.57397461 C6.5 60.6875 6.5 60.6875 8.5 61.6875 C8.17 57.3975 7.84 53.1075 7.5 48.6875 C7.17 52.3175 6.84 55.9475 6.5 59.6875 C5.51 59.6875 4.52 59.6875 3.5 59.6875 C3.5 56.3875 3.5 53.0875 3.5 49.6875 C2.18 49.0275 0.86 48.3675 -0.5 47.6875 C-1.95703125 45.99609375 -1.95703125 45.99609375 -3.3125 44.125 C-5.78024312 41.08292281 -6.31491961 40.73227751 -10.375 39.75 C-11.40625 39.729375 -12.4375 39.70875 -13.5 39.6875 C-13.5 39.0275 -13.5 38.3675 -13.5 37.6875 C-15.81 37.3575 -18.12 37.0275 -20.5 36.6875 C-20.5 35.6975 -20.5 34.7075 -20.5 33.6875 C-21.16 33.6875 -21.82 33.6875 -22.5 33.6875 C-23.125 31.375 -23.125 31.375 -23.5 28.6875 C-22.84 27.6975 -22.18 26.7075 -21.5 25.6875 C-22.63179687 25.56632812 -23.76359375 25.44515625 -24.9296875 25.3203125 C-26.41151031 25.15149724 -27.89327842 24.98220145 -29.375 24.8125 C-30.12136719 24.73386719 -30.86773437 24.65523438 -31.63671875 24.57421875 C-37.2734375 23.9140625 -37.2734375 23.9140625 -39.5 21.6875 C-39.5 20.6975 -39.5 19.7075 -39.5 18.6875 C-37.85 18.0275 -36.2 17.3675 -34.5 16.6875 C-37.14 16.3575 -39.78 16.0275 -42.5 15.6875 C-43.985 21.1325 -43.985 21.1325 -45.5 26.6875 C-47.975 25.6975 -47.975 25.6975 -50.5 24.6875 C-50.625 16.9375 -50.625 16.9375 -49.5 14.6875 C-49.27532169 13.15081135 -49.09203195 11.60781946 -48.9375 10.0625 C-48.85371094 9.24523437 -48.76992187 8.42796875 -48.68359375 7.5859375 C-48.62300781 6.95945312 -48.56242188 6.33296875 -48.5 5.6875 C-44.33808931 5.11270536 -40.17549528 4.54322462 -36.01220703 3.97851562 C-34.59794825 3.78594121 -33.18388131 3.59195216 -31.77001953 3.39648438 C-29.72998878 3.11470423 -27.68930718 2.83813012 -25.6484375 2.5625 C-23.81031494 2.31113281 -23.81031494 2.31113281 -21.93505859 2.0546875 C-18.75603942 1.7148691 -15.69359852 1.61909628 -12.5 1.6875 C-13.16 2.3475 -13.82 3.0075 -14.5 3.6875 C-10.78798043 3.32357651 -8.07710685 3.04475662 -4.875 1.0625 C-2.5 -0.3125 -2.5 -0.3125 0 0 Z \",fill:\"#AD7C5E\",transform:\"translate(254.5,280.3125)\"})),_path54||(_path54=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.12883948 1.18098444 4.25284093 2.36960934 6.375 3.5625 C6.95894531 3.88541016 7.54289062 4.20832031 8.14453125 4.54101562 C12.73444456 7.13209572 17.00660758 10.06616782 21.30371094 13.11450195 C26.10095569 16.46918515 31.02739385 19.62640675 35.9375 22.8125 C45.35355754 28.93936208 54.72495522 35.12918706 64.0625 41.375 C71.27755567 46.20105532 78.50370376 51.00408161 85.8125 55.6875 C93.07695725 60.34743146 100.20240875 65.19975143 107.3215332 70.078125 C117.30854028 76.91504297 127.3828192 83.61948242 137.46484375 90.31518555 C138.30144531 90.87117432 139.13804687 91.42716309 140 92 C141.62349365 92.88570679 141.62349365 92.88570679 143.27978516 93.78930664 C146 96 146 96 146.68115234 99.11621094 C146.64973145 100.31020508 146.61831055 101.50419922 146.5859375 102.734375 C146.56660156 104.02988281 146.54726563 105.32539062 146.52734375 106.66015625 C146.477215 108.02346165 146.42642536 109.38674289 146.375 110.75 C146.34489131 112.12884865 146.31751703 113.5077599 146.29296875 114.88671875 C146.22221326 118.25939731 146.12351802 121.62890827 146 125 C141.11889928 121.88488758 136.70279 118.38245888 132.25 114.6875 C127.16514316 110.50795207 122.04869349 106.54625552 116.59765625 102.8515625 C112.57974431 99.98766737 108.78318071 96.85689521 104.94897461 93.75366211 C100.37356602 90.0642216 95.71953253 86.50271967 91 83 C83.72125851 77.59263066 76.64097794 71.96349027 69.58349609 66.27197266 C65.14142716 62.70379826 60.61936437 59.23846549 56.09375 55.77734375 C55.02066474 54.95594938 53.94775411 54.13432682 52.875 53.3125 C52.04838867 52.67948975 52.04838867 52.67948975 51.20507812 52.03369141 C47.66590974 49.31242362 44.17451907 46.5391026 40.70458984 43.73022461 C34.33339391 38.57562614 27.85036642 33.60809818 21.25 28.75 C20.04053711 27.84942871 20.04053711 27.84942871 18.80664062 26.93066406 C15.40598364 24.41440144 12.04027338 21.9590477 8.3828125 19.828125 C1.38519731 15.57502902 1.38519731 15.57502902 0.12109375 10.40625 C-0.15705023 6.88544014 -0.21274086 3.52259289 0 0 Z \",fill:\"#FAE6C5\",transform:\"translate(480,424)\"})),_path55||(_path55=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.05078125 0.03255208 4.1015625 0.06510417 6.15234375 0.09765625 C5.13239404 3.34295079 4.28150889 4.98173882 1.71484375 7.28515625 C-1.33936536 10.63733698 -2.04487626 13.35736913 -3.07421875 17.6953125 C-3.84765625 20.09765625 -3.84765625 20.09765625 -5.26342773 21.98120117 C-6.81638285 24.05587646 -7.88073841 26.01762325 -8.96875 28.36328125 C-9.34708984 29.17152344 -9.72542969 29.97976563 -10.11523438 30.8125 C-10.50130859 31.64910156 -10.88738281 32.48570312 -11.28515625 33.34765625 C-18.50737037 48.86384645 -18.50737037 48.86384645 -22.84765625 56.09765625 C-23.502239 57.38491104 -24.14727758 58.67704277 -24.78515625 59.97265625 C-26.65802795 63.77624896 -28.71161119 67.43586472 -30.84765625 71.09765625 C-31.50765625 70.43765625 -32.16765625 69.77765625 -32.84765625 69.09765625 C-33.44578125 70.08765625 -34.04390625 71.07765625 -34.66015625 72.09765625 C-35.38203125 73.08765625 -36.10390625 74.07765625 -36.84765625 75.09765625 C-37.83765625 75.09765625 -38.82765625 75.09765625 -39.84765625 75.09765625 C-40.50765625 76.41765625 -41.16765625 77.73765625 -41.84765625 79.09765625 C-42.50765625 79.09765625 -43.16765625 79.09765625 -43.84765625 79.09765625 C-44.00621094 79.84789062 -44.16476563 80.598125 -44.328125 81.37109375 C-45.96772786 88.56360575 -48.30647768 94.64640025 -51.84765625 101.09765625 C-52.50765625 102.41765625 -53.16765625 103.73765625 -53.84765625 105.09765625 C-70.34765625 105.09765625 -86.84765625 105.09765625 -103.84765625 105.09765625 C-103.51765625 103.44765625 -103.18765625 101.79765625 -102.84765625 100.09765625 C-102.18765625 100.09765625 -101.52765625 100.09765625 -100.84765625 100.09765625 C-100.74453125 99.54078125 -100.64140625 98.98390625 -100.53515625 98.41015625 C-99.27645736 94.17635091 -97.00517932 91.11165555 -93.84765625 88.09765625 C-93.35265625 87.10765625 -93.35265625 87.10765625 -92.84765625 86.09765625 C-92.18765625 86.09765625 -91.52765625 86.09765625 -90.84765625 86.09765625 C-90.70328125 85.35515625 -90.55890625 84.61265625 -90.41015625 83.84765625 C-89.94578133 81.57737886 -89.42902056 79.34006146 -88.84765625 77.09765625 C-88.18765625 77.09765625 -87.52765625 77.09765625 -86.84765625 77.09765625 C-86.18765625 75.44765625 -85.52765625 73.79765625 -84.84765625 72.09765625 C-83.85765625 72.09765625 -82.86765625 72.09765625 -81.84765625 72.09765625 C-81.72390625 71.20046875 -81.72390625 71.20046875 -81.59765625 70.28515625 C-80.64309753 67.50102665 -79.27633354 66.66454483 -76.84765625 65.09765625 C-78.88154365 71.70779029 -81.72592501 77.93781157 -84.84765625 84.09765625 C-81.85184235 81.45429104 -80.06562204 78.3263048 -78.03515625 74.91015625 C-69.63930626 60.99348125 -69.63930626 60.99348125 -65.84765625 59.09765625 C-66.50177736 64.16709488 -68.68107447 68.52739505 -70.84765625 73.09765625 C-71.17894531 73.82855469 -71.51023438 74.55945313 -71.8515625 75.3125 C-72.84765625 77.09765625 -72.84765625 77.09765625 -74.84765625 78.09765625 C-75.62781246 79.92276622 -76.32561031 81.78372301 -76.97265625 83.66015625 C-77.50246094 85.17802734 -77.50246094 85.17802734 -78.04296875 86.7265625 C-78.30851562 87.50902344 -78.5740625 88.29148437 -78.84765625 89.09765625 C-77.85765625 89.09765625 -76.86765625 89.09765625 -75.84765625 89.09765625 C-75.47640625 87.79828125 -75.47640625 87.79828125 -75.09765625 86.47265625 C-73.7746739 82.90060389 -71.98434749 80.23592151 -69.84765625 77.09765625 C-69.16798949 75.43624862 -68.4982672 73.77065584 -67.84765625 72.09765625 C-67.18765625 71.43765625 -66.52765625 70.77765625 -65.84765625 70.09765625 C-65.55890625 69.35515625 -65.27015625 68.61265625 -64.97265625 67.84765625 C-63.84765625 65.09765625 -63.84765625 65.09765625 -61.91015625 62.22265625 C-59.72046259 58.90493859 -58.31914576 55.77638003 -56.84765625 52.09765625 C-56.18765625 52.09765625 -55.52765625 52.09765625 -54.84765625 52.09765625 C-54.60015625 51.08703125 -54.35265625 50.07640625 -54.09765625 49.03515625 C-52.94031745 44.95140362 -51.03798079 41.72538127 -48.84765625 38.09765625 C-48.16741955 36.77119469 -47.49273364 35.44156748 -46.84765625 34.09765625 C-46.18765625 34.09765625 -45.52765625 34.09765625 -44.84765625 34.09765625 C-44.57953125 33.31390625 -44.31140625 32.53015625 -44.03515625 31.72265625 C-42.84765625 29.09765625 -42.84765625 29.09765625 -39.84765625 27.09765625 C-41.72383719 34.26680294 -44.37802376 40.56407138 -47.84765625 47.09765625 C-48.60303805 48.55320922 -49.35347103 50.01134709 -50.09765625 51.47265625 C-50.56945312 52.38144531 -50.56945312 52.38144531 -51.05078125 53.30859375 C-51.89906718 55.21307883 -52.39991321 57.06490285 -52.84765625 59.09765625 C-50.01326345 57.68045985 -49.59336902 55.87995956 -48.22265625 53.03515625 C-47.43761719 51.42447266 -47.43761719 51.42447266 -46.63671875 49.78125 C-46.3521582 49.19327637 -46.06759766 48.60530273 -45.77441406 47.99951172 C-44.07781331 44.51781522 -42.33400683 41.05964898 -40.59765625 37.59765625 C-39.92559078 36.2540015 -39.25370584 34.91025644 -38.58203125 33.56640625 C-36.71484375 29.83203125 -36.71484375 29.83203125 -34.84765625 26.09765625 C-34.18765625 26.09765625 -33.52765625 26.09765625 -32.84765625 26.09765625 C-32.84765625 25.10765625 -32.84765625 24.11765625 -32.84765625 23.09765625 C-32.18765625 23.09765625 -31.52765625 23.09765625 -30.84765625 23.09765625 C-30.72003906 22.53433594 -30.59242188 21.97101562 -30.4609375 21.390625 C-29.81316199 18.96868725 -28.99581856 16.72569687 -28.03515625 14.41015625 C-27.71933594 13.62253906 -27.40351563 12.83492187 -27.078125 12.0234375 C-25.84765625 10.09765625 -25.84765625 10.09765625 -23.7109375 9.328125 C-22.78861328 9.21404297 -22.78861328 9.21404297 -21.84765625 9.09765625 C-22.85602498 12.54291607 -23.98332697 15.32236088 -25.84765625 18.41015625 C-28.24674435 22.40266854 -29.06354905 26.54777108 -29.84765625 31.09765625 C-27.86765625 30.10765625 -25.88765625 29.11765625 -23.84765625 28.09765625 C-25.39021528 32.93568231 -27.03394813 37.72911193 -28.84765625 42.47265625 C-29.31171875 43.69082031 -29.31171875 43.69082031 -29.78515625 44.93359375 C-30.87882561 47.1611409 -32.08779129 48.38627242 -33.84765625 50.09765625 C-34.56962787 52.70376702 -34.56962787 52.70376702 -34.84765625 55.09765625 C-35.50765625 55.09765625 -36.16765625 55.09765625 -36.84765625 55.09765625 C-36.95980469 55.82984375 -37.07195312 56.56203125 -37.1875 57.31640625 C-38.05484529 60.97054734 -39.82283875 63.65262413 -41.7890625 66.81640625 C-42.99966385 69.42522983 -43.04284636 71.25488751 -42.84765625 74.09765625 C-42.18765625 74.09765625 -41.52765625 74.09765625 -40.84765625 74.09765625 C-40.64140625 73.12828125 -40.43515625 72.15890625 -40.22265625 71.16015625 C-39.31728251 67.94961107 -37.9618944 65.62443005 -36.03515625 62.91015625 C-33.70175387 59.57271775 -32.02763883 56.38586723 -30.53515625 52.59765625 C-28.44699024 47.32655759 -26.00198756 42.34944082 -23.34765625 37.34765625 C-22.79597778 36.30254883 -22.79597778 36.30254883 -22.2331543 35.23632812 C-19.96645807 31.00663188 -17.53161034 26.94925831 -14.88085938 22.94824219 C-13.79755148 21.00791283 -13.28665805 19.26747663 -12.84765625 17.09765625 C-12.18765625 17.09765625 -11.52765625 17.09765625 -10.84765625 17.09765625 C-10.55890625 16.35515625 -10.27015625 15.61265625 -9.97265625 14.84765625 C-9.02462981 12.53025828 -7.99919714 10.3184851 -6.84765625 8.09765625 C-6.18765625 8.09765625 -5.52765625 8.09765625 -4.84765625 8.09765625 C-4.38359375 6.39609375 -4.38359375 6.39609375 -3.91015625 4.66015625 C-2.56064992 0.1353409 -2.56064992 0.1353409 0 0 Z \",fill:\"#4B3127\",transform:\"translate(179.84765625,520.90234375)\"})),_path56||(_path56=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 11.22 0 22.44 0 34 C-4.48481104 34.74746851 -8.52261651 35.1999971 -13.02856445 35.38891602 C-14.04994051 35.43301338 -14.04994051 35.43301338 -15.09195042 35.47800159 C-17.34891023 35.57408063 -19.60605496 35.66432016 -21.86328125 35.75390625 C-23.4720994 35.81981065 -25.08091485 35.88578096 -26.68972778 35.95181274 C-31.0045114 36.12687245 -35.31954187 36.29482654 -39.63471603 36.45995712 C-41.41740188 36.52822317 -43.2000686 36.59699058 -44.98271561 36.66626358 C-77.34070622 37.92363256 -109.61701397 38.38747514 -142 38 C-142 37.67 -142 37.34 -142 37 C-128.47 36.67 -114.94 36.34 -101 36 C-100.98487055 27.59866609 -100.98487055 27.59866609 -104 25 C-104 23.68 -104 22.36 -104 21 C-105.65 21 -107.3 21 -109 21 C-108.34 20.01 -107.68 19.02 -107 18 C-107.495 17.01 -107.495 17.01 -108 16 C-105.26143391 14.63071696 -102.67406919 14.46650621 -99.63671875 14.0625 C-97.71762695 13.80339844 -97.71762695 13.80339844 -95.75976562 13.5390625 C-94.40237414 13.35914557 -93.04495193 13.1794603 -91.6875 13 C-89.04528537 12.64791656 -86.4034661 12.29309432 -83.76171875 11.9375 C-82.58569092 11.78152344 -81.40966309 11.62554687 -80.19799805 11.46484375 C-78.22951279 11.17871535 -76.26634651 10.84603902 -74.31958008 10.4375 C-71.59996852 9.92454937 -69.01429443 10.01598878 -66.2578125 10.16015625 C-63.81388923 10.06830307 -63.81388923 10.06830307 -60.84057617 9.06396484 C-57.00498248 8.00138031 -53.22724056 7.34029624 -49.29296875 6.81640625 C-48.21425003 6.66614487 -48.21425003 6.66614487 -47.11373901 6.5128479 C-45.58882161 6.30077003 -44.0636054 6.09083099 -42.53811646 5.88290405 C-38.59952808 5.34604927 -34.66302518 4.79438235 -30.7265625 4.2421875 C-29.57864983 4.08157082 -29.57864983 4.08157082 -28.407547 3.91770935 C-21.90929902 3.0019524 -15.43472733 1.97254725 -8.9753418 0.81274414 C-5.88909229 0.26660117 -3.15923613 0 0 0 Z \",fill:\"#241D1E\",transform:\"translate(626,221)\"})),_path57||(_path57=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0 3.96 0 6 0 C6.12117188 0.71027344 6.24234375 1.42054688 6.3671875 2.15234375 C6.53476562 3.07144531 6.70234375 3.99054688 6.875 4.9375 C7.03742188 5.85402344 7.19984375 6.77054687 7.3671875 7.71484375 C7.57601563 8.46894531 7.78484375 9.22304688 8 10 C8.66 10.33 9.32 10.66 10 11 C10 11.99 10 12.98 10 14 C10.84304688 14.12117188 11.68609375 14.24234375 12.5546875 14.3671875 C13.65039062 14.53476562 14.74609375 14.70234375 15.875 14.875 C16.96554687 15.03742188 18.05609375 15.19984375 19.1796875 15.3671875 C22 16 22 16 24 18 C27.63925209 19.14569047 31.29869526 20.07467382 35 21 C35 17.37 35 13.74 35 10 C37.34852528 8.82573736 38.73774065 8.88491827 41.3515625 8.90234375 C42.62773437 8.90717773 42.62773437 8.90717773 43.9296875 8.91210938 C44.81914062 8.92048828 45.70859375 8.92886719 46.625 8.9375 C47.5221875 8.94201172 48.419375 8.94652344 49.34375 8.95117188 C51.56256648 8.96297409 53.78125018 8.97943845 56 9 C56 9.33 56 9.66 56 10 C46.1 10.495 46.1 10.495 36 11 C36 11.99 36 12.98 36 14 C36.804375 13.67 37.60875 13.34 38.4375 13 C45.72209082 10.95520258 51.307147 11.58237293 58 15 C58 15.66 58 16.32 58 17 C59.98 17.33 61.96 17.66 64 18 C64.33 17.34 64.66 16.68 65 16 C65.495 17.98 65.495 17.98 66 20 C62.37 20 58.74 20 55 20 C55 20.66 55 21.32 55 22 C55.66 22 56.32 22 57 22 C57.81674796 23.74802146 58.62823451 25.49850189 59.4375 27.25 C59.88996094 28.22453125 60.34242188 29.1990625 60.80859375 30.203125 C62 33 62 33 62.53515625 35.296875 C62.68855469 35.85890625 62.84195313 36.4209375 63 37 C63.66 37.33 64.32 37.66 65 38 C65 38.66 65 39.32 65 40 C73.58 40.66 82.16 41.32 91 42 C91 38.92841921 90.50755581 36.53227995 89.75 33.5625 C89.51796875 32.61503906 89.2859375 31.66757812 89.046875 30.69140625 C87.84157483 27.59270543 86.57137599 26.08540952 84 24 C79.04580308 22.45688948 74.13978691 21.64247336 69 21 C68.9175 19.88625 68.835 18.7725 68.75 17.625 C68.42126213 13.94246056 68.42126213 13.94246056 65.9375 12.5625 C65.298125 12.376875 64.65875 12.19125 64 12 C64.99 12 65.98 12 67 12 C67 11.34 67 10.68 67 10 C66.01 9.505 66.01 9.505 65 9 C70.13314424 4.16880542 75.12065622 4.59199004 81.953125 4.6640625 C85 5 85 5 87 7 C87 7.99 87 8.98 87 10 C84.36 10 81.72 10 79 10 C79.495 10.99 79.495 10.99 80 12 C82.47623996 12.41475483 84.87984485 12.70690182 87.375 12.9375 C88.91824399 13.10424283 90.46120533 13.27361787 92.00390625 13.4453125 C92.81617676 13.53458008 93.62844727 13.62384766 94.46533203 13.71582031 C98.75579694 14.19685491 103.03561577 14.7226564 107.3125 15.3125 C108.52075439 15.4525647 108.52075439 15.4525647 109.75341797 15.59545898 C113.76607164 16.17241121 115.5127987 16.5181779 118.4765625 19.44921875 C119.95610294 21.92650057 120.98874548 24.30332128 122 27 C122.98363788 28.67637534 123.98179961 30.34438961 125 32 C115.11559933 37.2887962 105.92605467 41.26848633 95 44 C99.29 44 103.58 44 108 44 C108.33 44.66 108.66 45.32 109 46 C101.575 46.99 101.575 46.99 94 48 C94.33 48.99 94.66 49.98 95 51 C95.73605469 50.7834375 96.47210938 50.566875 97.23046875 50.34375 C98.20628906 50.0653125 99.18210937 49.786875 100.1875 49.5 C101.15042969 49.2215625 102.11335938 48.943125 103.10546875 48.65625 C105.85345876 48.03322392 108.19598416 47.87697188 111 48 C108.51340379 50.48659621 106.39516054 51.0343111 103.0625 52.125 C102.00160156 52.47820312 100.94070313 52.83140625 99.84765625 53.1953125 C97 54 97 54 94 54 C94 57.3 94 60.6 94 64 C94.66 64.33 95.32 64.66 96 65 C88.08 65.33 80.16 65.66 72 66 C72 66.33 72 66.66 72 67 C67.05 67.495 67.05 67.495 62 68 C61.67 69.65 61.34 71.3 61 73 C60.67 72.01 60.34 71.02 60 70 C56.535 70.495 56.535 70.495 53 71 C52.98598145 69.96613159 52.98598145 69.96613159 52.97167969 68.91137695 C53.198511 48.57384224 53.198511 48.57384224 46 30 C45.01 29.67 44.02 29.34 43 29 C43.2475 28.071875 43.2475 28.071875 43.5 27.125 C44.07634644 25.03936614 44.07634644 25.03936614 44 23 C41.69 22.34 39.38 21.68 37 21 C36.34 23.31 35.68 25.62 35 28 C33.68 28 32.36 28 31 28 C30.67 27.01 30.34 26.02 30 25 C26.18152515 22.93165945 22.78437976 22.78259721 18.5 22.6875 C11.40172918 22.24536535 11.40172918 22.24536535 8.6875 19.625 C7 17 7 17 7 14 C6.01 14.495 6.01 14.495 5 15 C4.68758545 17.71446979 4.48663408 20.33909361 4.375 23.0625 C4.33632813 23.82111328 4.29765625 24.57972656 4.2578125 25.36132812 C4.16326438 27.24047195 4.08053244 29.12020336 4 31 C3.34 31 2.68 31 2 31 C0.90684754 26.4161086 0.67717375 21.87488993 0.4375 17.1875 C0.39431641 16.39923828 0.35113281 15.61097656 0.30664062 14.79882812 C0.20121679 12.86605785 0.10016906 10.93304974 0 9 C0.66 8.67 1.32 8.34 2 8 C2 5.69 2 3.38 2 1 C1.34 0.67 0.68 0.34 0 0 Z \",fill:\"#060F0D\",transform:\"translate(369,308)\"})),_path58||(_path58=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C17.82 0 35.64 0 54 0 C54 1.98 54 3.96 54 6 C44.76 6 35.52 6 26 6 C26.495 7.98 26.495 7.98 27 10 C46.8 10.495 46.8 10.495 67 11 C67.67991438 17.11922939 68.13896049 22.86756719 68.09765625 28.97265625 C68.0962413 29.78117538 68.09482635 30.58969452 68.09336853 31.42271423 C68.08783414 33.96934942 68.0752946 36.51589203 68.0625 39.0625 C68.0574765 40.80403518 68.05291509 42.54557175 68.04882812 44.28710938 C68.03788634 48.52477448 68.02066826 52.76237163 68 57 C66.35 56.67 64.7 56.34 63 56 C63 52.7 63 49.4 63 46 C60.86917969 46.05220703 60.86917969 46.05220703 58.6953125 46.10546875 C56.83855345 46.13360146 54.98178167 46.16090217 53.125 46.1875 C51.71927734 46.22520508 51.71927734 46.22520508 50.28515625 46.26367188 C49.38925781 46.27333984 48.49335938 46.28300781 47.5703125 46.29296875 C46.32918701 46.31653442 46.32918701 46.31653442 45.06298828 46.34057617 C44.04180908 46.17199097 44.04180908 46.17199097 43 46 C41 43 41 43 41 40 C48.59 40 56.18 40 64 40 C63.505 37.03 63.505 37.03 63 34 C55.08 33.67 47.16 33.34 39 33 C39 32.67 39 32.34 39 32 C50.385 31.505 50.385 31.505 62 31 C54.08 31 46.16 31 38 31 C36 25 36 25 36 21 C46.00887894 20.37722531 55.96588331 19.82292735 66 20 C65.01 17.525 65.01 17.525 64 15 C64.66 15 65.32 15 66 15 C66 14.34 66 13.68 66 13 C60.32169922 12.97535295 54.64342931 12.95716538 48.96508789 12.94506836 C47.03181415 12.94002744 45.09854424 12.93319481 43.1652832 12.92456055 C40.39273128 12.91248435 37.62022959 12.90676943 34.84765625 12.90234375 C33.97786636 12.89718246 33.10807648 12.89202118 32.21192932 12.88670349 C30.14094186 12.88650815 28.07005676 12.93791832 26 13 C25.67 13.33 25.34 13.66 25 14 C25.7425 14.04125 26.485 14.0825 27.25 14.125 C31.25097924 15.39803885 32.0376156 17.33688244 34 21 C36.10456554 26.03656711 37.42498341 30.47521569 37 36 C32.545 36.495 32.545 36.495 28 37 C28.33 34.36 28.66 31.72 29 29 C28.34 29 27.68 29 27 29 C27 31.31 27 33.62 27 36 C24.03 36 21.06 36 18 36 C18 34.35 18 32.7 18 31 C7.77 30.67 -2.46 30.34 -13 30 C-13 30.66 -13 31.32 -13 32 C-3.43 32 6.14 32 16 32 C16 34.31 16 36.62 16 39 C15.67 39 15.34 39 15 39 C15 37.02 15 35.04 15 33 C6.09 33 -2.82 33 -12 33 C-12 35.64 -12 38.28 -12 41 C-11.22285645 41 -10.44571289 41 -9.64501953 41 C-1.09667969 41 7.45166016 41 16 41 C16.495 40.01 16.495 40.01 17 39 C19.64 39 22.28 39 25 39 C25 40.65 25 42.3 25 44 C25.66 44 26.32 44 27 44 C27 44.66 27 45.32 27 46 C27.66 46 28.32 46 29 46 C29.495 49.465 29.495 49.465 30 53 C30.66 53 31.32 53 32 53 C32 53.66 32 54.32 32 55 C32.66 55 33.32 55 34 55 C34 55.66 34 56.32 34 57 C34.66 57 35.32 57 36 57 C36 57.99 36 58.98 36 60 C34.35 60 32.7 60 31 60 C31 63.63 31 67.26 31 71 C30.67 71 30.34 71 30 71 C30 67.37 30 63.74 30 60 C27.74981858 60.47831397 25.49986133 60.95768264 23.25 61.4375 C21.99703125 61.70433594 20.7440625 61.97117187 19.453125 62.24609375 C16.95442915 62.7916235 14.47446899 63.35638812 12 64 C12.33 64.556875 12.66 65.11375 13 65.6875 C14.1309601 68.30284522 14.15662974 70.1806646 14 73 C16.64 72.67 19.28 72.34 22 72 C22 72.66 22 73.32 22 74 C22.99 74.495 22.99 74.495 24 75 C24.625 78.0625 24.625 78.0625 25 81 C25.33 78.69 25.66 76.38 26 74 C25.34 74 24.68 74 24 74 C24 73.34 24 72.68 24 72 C24.66 72 25.32 72 26 72 C26 70.35 26 68.7 26 67 C26.33 67 26.66 67 27 67 C27.19693992 69.66626359 27.38274782 72.33256639 27.5625 75 C27.64661133 76.11568359 27.64661133 76.11568359 27.73242188 77.25390625 C28.06347285 82.33002118 27.77163045 86.97011262 27 92 C26.34 92 25.68 92 25 92 C25 89.36 25 86.72 25 84 C19.06 84 13.12 84 7 84 C5.39773503 78.3920726 4.53261579 74.03689965 4.1875 68.375 C4.12369141 67.63765625 4.05988281 66.9003125 3.99414062 66.140625 C3.69726522 61.47424545 4.1149425 58.71136038 7 55 C7.515625 54.505 8.03125 54.01 8.5625 53.5 C10.49240409 51.67349571 10.49240409 51.67349571 12 47 C4.41 46.67 -3.18 46.34 -11 46 C-11 49.63 -11 53.26 -11 57 C-11.33 58.32 -11.66 59.64 -12 61 C-5.07 61.495 -5.07 61.495 2 62 C2.05383848 64.45862401 2.09359038 66.9160755 2.125 69.375 C2.15013672 70.42300781 2.15013672 70.42300781 2.17578125 71.4921875 C2.19344267 73.32897486 2.10303261 75.16601963 2 77 C-0.5654594 79.5654594 -2.47686668 79.54046087 -6 80 C-6.14695312 79.44570313 -6.29390625 78.89140625 -6.4453125 78.3203125 C-7.85318163 73.51326131 -7.85318163 73.51326131 -11.6875 70.5625 C-15.4582752 69.92217968 -19.19494119 69.39362677 -23 69 C-23 68.67 -23 68.34 -23 68 C-21.865625 67.87625 -20.73125 67.7525 -19.5625 67.625 C-17.7990625 67.315625 -17.7990625 67.315625 -16 67 C-14.84708316 64.69416631 -14.84602662 63.30133113 -14.79467773 60.73388672 C-14.77473251 59.85312469 -14.75478729 58.97236267 -14.73423767 58.06491089 C-14.70916893 56.63672531 -14.70916893 56.63672531 -14.68359375 55.1796875 C-14.66281265 54.20589142 -14.64203156 53.23209534 -14.62062073 52.22879028 C-14.55511402 49.11093353 -14.49623503 45.99299097 -14.4375 42.875 C-14.39431585 40.76431396 -14.3507016 38.65363667 -14.30664062 36.54296875 C-14.19862023 31.36206593 -14.09955507 26.18110016 -14 21 C-3.44 20.67 7.12 20.34 18 20 C18.33 19.34 18.66 18.68 19 18 C17.35 18.33 15.7 18.66 14 19 C14 17.68 14 16.36 14 15 C16.97 15 19.94 15 23 15 C23 14.34 23 13.68 23 13 C11.45 13 -0.1 13 -12 13 C-12 12.34 -12 11.68 -12 11 C-0.12 11 11.76 11 24 11 C24 9.68 24 8.36 24 7 C16.08 7 8.16 7 0 7 C0 4.69 0 2.38 0 0 Z \",fill:\"#1C1514\",transform:\"translate(284,277)\"})),_path59||(_path59=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 7.26 0 14.52 0 22 C-1.57007813 22.38671875 -3.14015625 22.7734375 -4.7578125 23.171875 C-17.28713226 26.27126457 -29.77085193 29.3933459 -42.08203125 33.28515625 C-42.78585937 33.50743896 -43.4896875 33.72972168 -44.21484375 33.95874023 C-46.18285965 34.5838235 -48.14817344 35.21739616 -50.11328125 35.8515625 C-53.6192137 36.93532886 -57.15719061 37.72595934 -60.7434082 38.49511719 C-64.34574364 39.30109249 -67.88706567 40.30552889 -71.4375 41.3125 C-73.02994181 41.75913635 -74.6223899 42.20575034 -76.21484375 42.65234375 C-77.01519043 42.87776855 -77.81553711 43.10319336 -78.64013672 43.33544922 C-89.51248237 46.39716294 -100.40315188 49.38534233 -111.3125 52.3125 C-121.06936902 54.93340164 -130.81986975 57.57670598 -140.5625 60.25 C-141.7688208 60.57911377 -142.9751416 60.90822754 -144.21801758 61.24731445 C-149.8921692 62.80873314 -155.49875178 64.45620148 -161.06665039 66.36132812 C-169.15072562 69.03185986 -177.52279927 70.44505909 -186 71 C-186.33 70.01 -186.66 69.02 -187 68 C-187.66 67.34 -188.32 66.68 -189 66 C-188.01 65.01 -188.01 65.01 -187 64 C-186.01 64 -185.02 64 -184 64 C-184 63.34 -184 62.68 -184 62 C-182.4068396 61.45641846 -182.4068396 61.45641846 -180.78149414 60.90185547 C-176.75352067 59.52725719 -172.72595015 58.15148136 -168.69848633 56.77539062 C-166.97170409 56.18556263 -165.24481982 55.59603322 -163.51782227 55.00683594 C-154.73102876 52.00883827 -145.95145107 48.9953967 -137.203125 45.88671875 C-128.14787397 42.67135298 -119.02607745 39.67493935 -109.88867188 36.70117188 C-103.03450907 34.44261641 -96.36833188 31.97165847 -89.73266602 29.13647461 C-85.7608559 27.48465865 -81.71665102 26.13283462 -77.625 24.8125 C-75.80981973 24.21637753 -73.99472066 23.62000776 -72.1796875 23.0234375 C-71.2009668 22.70342773 -70.22224609 22.38341797 -69.21386719 22.05371094 C-63.70967087 20.24908382 -58.2130532 18.42168303 -52.71707153 16.59222412 C-51.4052264 16.1555869 -50.09327556 15.71926711 -48.78121948 15.28326416 C-41.38914167 12.82604524 -34.01598263 10.32907004 -26.6875 7.6875 C-21.02961989 5.65254224 -15.32917726 3.82806175 -9.5625 2.125 C-8.83313232 1.90932373 -8.10376465 1.69364746 -7.35229492 1.47143555 C-2.26299545 0 -2.26299545 0 0 0 Z \",fill:\"#1A1012\",transform:\"translate(626,155)\"})),_path60||(_path60=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C19.71982622 -1.47577054 19.71982622 -1.47577054 24.87890625 1.86328125 C26.56858078 4.17288111 27.75086499 6.43374985 29 9 C30.32004086 10.34649459 31.65390838 11.67954822 33 13 C34.11725721 14.60916436 35.18036537 16.25721626 36.1875 17.9375 C36.69667969 18.77152344 37.20585937 19.60554687 37.73046875 20.46484375 C39.03467282 23.06923896 39.75621624 25.09849525 40 28 C39.34 28.99 38.68 29.98 38 31 C37.34 29.35 36.68 27.7 36 26 C35.34 26 34.68 26 34 26 C34.309375 26.556875 34.61875 27.11375 34.9375 27.6875 C36.05761821 30.12540433 36.56037364 32.36224186 37 35 C37.66 35 38.32 35 39 35 C39.40992188 35.77085937 39.81984375 36.54171875 40.2421875 37.3359375 C40.78101563 38.33882812 41.31984375 39.34171875 41.875 40.375 C42.40867187 41.37273438 42.94234375 42.37046875 43.4921875 43.3984375 C44.8820138 46.05348395 44.8820138 46.05348395 47 48 C47.99 48 48.98 48 50 48 C51.6875 50.5 51.6875 50.5 53 53 C53.66 51.68 54.32 50.36 55 49 C55.33 49.99 55.66 50.98 56 52 C56.99 51.67 57.98 51.34 59 51 C59.598125 51.825 60.19625 52.65 60.8125 53.5 C61.534375 54.325 62.25625 55.15 63 56 C63.99 56 64.98 56 66 56 C67 59 67 59 67 62 C67.99 62 68.98 62 70 62 C70 62.66 70 63.32 70 64 C70.66 64 71.32 64 72 64 C73.2890625 65.6796875 73.2890625 65.6796875 74.625 67.875 C75.07101562 68.59429688 75.51703125 69.31359375 75.9765625 70.0546875 C77 72 77 72 77 74 C77.66 74 78.32 74 79 74 C80.2890625 75.6796875 80.2890625 75.6796875 81.625 77.875 C82.07101562 78.59429688 82.51703125 79.31359375 82.9765625 80.0546875 C84 82 84 82 84 84 C84.66 84 85.32 84 86 84 C86.31453125 84.59167969 86.6290625 85.18335938 86.953125 85.79296875 C89.34677355 90.21256683 91.82912602 94.08925542 95 98 C96 100 97 102 98 104 C98.66 104.33 99.32 104.66 100 105 C100 105.99 100 106.98 100 108 C89.44 108 78.88 108 68 108 C67.67 106.35 67.34 104.7 67 103 C65.515 102.505 65.515 102.505 64 102 C62.7890625 100.109375 62.7890625 100.109375 61.625 97.75 C59.98631302 94.60710796 58.74458647 92.74458647 56.1875 90.1875 C55.1046875 89.1046875 55.1046875 89.1046875 54 88 C54 86.68 54 85.36 54 84 C53.34 84 52.68 84 52 84 C52 82.68 52 81.36 52 80 C51.34 80 50.68 80 50 80 C48 77 48 77 48 74 C47.34 74 46.68 74 46 74 C45.34 72.02 44.68 70.04 44 68 C43.34 68 42.68 68 42 68 C42 66.68 42 65.36 42 64 C40.68 64 39.36 64 38 64 C38 62.68 38 61.36 38 60 C37.34 60 36.68 60 36 60 C35.505 58.02 35.505 58.02 35 56 C34.34 56 33.68 56 33 56 C32.01 52.7 31.02 49.4 30 46 C29.34 46 28.68 46 28 46 C27.68546875 45.32453125 27.3709375 44.6490625 27.046875 43.953125 C24.80211839 39.27429495 22.89927408 35.50934667 19 32 C16.02274043 27.8776406 15.07904457 23.8972023 14 19 C13.401875 18.93167969 12.80375 18.86335937 12.1875 18.79296875 C9.14091417 17.68858139 8.54321581 16.1179657 7 13.3125 C5.2977979 10.29260338 3.61285773 7.34080377 1.625 4.5 C0 2 0 2 0 0 Z \",fill:\"#37231F\",transform:\"translate(432,518)\"})),_path61||(_path61=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.8474884 0.02122421 1.8474884 0.02122421 3.7322998 0.0428772 C7.64697506 0.09863693 11.55582015 0.22405064 15.46875 0.3515625 C18.13012457 0.40741251 20.79144438 0.44736757 23.453125 0.48828125 C29.96030568 0.5982383 36.4641114 0.76532939 42.96875 0.9765625 C42.47375 1.5540625 41.97875 2.1315625 41.46875 2.7265625 C39.59894987 5.08056879 39.59894987 5.08056879 39.96875 8.9765625 C38.5078125 10.57421875 38.5078125 10.57421875 36.59375 12.0390625 C34.08019723 13.98887607 32.78264948 15.25571327 30.96875 17.9765625 C29.48375 17.4815625 29.48375 17.4815625 27.96875 16.9765625 C30.60875 14.3365625 33.24875 11.6965625 35.96875 8.9765625 C31.23237602 13.00431445 31.23237602 13.00431445 26.60546875 17.15625 C25.81785156 17.88070313 25.03023437 18.60515625 24.21875 19.3515625 C23.48140625 20.03992188 22.7440625 20.72828125 21.984375 21.4375 C19.96875 22.9765625 19.96875 22.9765625 16.96875 22.9765625 C16.30875 24.2965625 15.64875 25.6165625 14.96875 26.9765625 C14.30875 26.9765625 13.64875 26.9765625 12.96875 26.9765625 C12.96875 27.6365625 12.96875 28.2965625 12.96875 28.9765625 C11.3281714 30.16678619 9.68319737 31.35336281 7.98828125 32.46484375 C5.8166756 34.01478841 5.8166756 34.01478841 3.59375 36.359375 C0.92284004 39.02233583 -1.84021547 41.26038611 -4.84375 43.5390625 C-5.39417969 43.95744385 -5.94460938 44.3758252 -6.51171875 44.80688477 C-7.70639245 45.71334344 -8.90257607 46.61781483 -10.10009766 47.52050781 C-12.15740332 49.07167987 -14.20952679 50.62957033 -16.26171875 52.1875 C-17.68455656 53.26346962 -19.10772839 54.33899772 -20.53125 55.4140625 C-21.5363562 56.17601929 -21.5363562 56.17601929 -22.56176758 56.95336914 C-25.96018088 59.50763695 -29.37421038 61.80226491 -33.03125 63.9765625 C-37.14621927 66.96301262 -37.14621927 66.96301262 -41.21484375 70.01171875 C-42.875 71.2109375 -42.875 71.2109375 -46.03125 72.9765625 C-47.68125 72.6465625 -49.33125 72.3165625 -51.03125 71.9765625 C-50.37125 68.3465625 -49.71125 64.7165625 -49.03125 60.9765625 C-49.69125 60.9765625 -50.35125 60.9765625 -51.03125 60.9765625 C-51.03125 60.3165625 -51.03125 59.6565625 -51.03125 58.9765625 C-50.37125 58.9765625 -49.71125 58.9765625 -49.03125 58.9765625 C-49.03125 58.3165625 -49.03125 57.6565625 -49.03125 56.9765625 C-47.421875 55.28515625 -47.421875 55.28515625 -45.28125 53.4140625 C-44.23710937 52.48400391 -44.23710937 52.48400391 -43.171875 51.53515625 C-41.03125 49.9765625 -41.03125 49.9765625 -38.890625 49.51171875 C-38.27703125 49.33511719 -37.6634375 49.15851562 -37.03125 48.9765625 C-36.60440918 48.10390747 -36.60440918 48.10390747 -36.16894531 47.21362305 C-34.79818517 44.51828503 -33.1025443 42.78881759 -30.96875 40.6484375 C-30.17210937 39.84921875 -29.37546875 39.05 -28.5546875 38.2265625 C-27.72195313 37.4015625 -26.88921875 36.5765625 -26.03125 35.7265625 C-25.19851563 34.88609375 -24.36578125 34.045625 -23.5078125 33.1796875 C-22.71117187 32.385625 -21.91453125 31.5915625 -21.09375 30.7734375 C-20.36285156 30.04479492 -19.63195312 29.31615234 -18.87890625 28.56542969 C-17.03125 26.9765625 -17.03125 26.9765625 -15.03125 26.9765625 C-13.61739089 24.59494241 -13.61739089 24.59494241 -13.03125 21.9765625 C-13.65692871 22.61271484 -14.28260742 23.24886719 -14.92724609 23.90429688 C-17.24536255 26.25644626 -19.56787791 28.60406548 -21.89355469 30.94873047 C-22.90024728 31.96549649 -23.90513966 32.98404812 -24.90820312 34.00439453 C-26.34819371 35.46857468 -27.79448256 36.92626455 -29.2421875 38.3828125 C-30.11149902 39.26259766 -30.98081055 40.14238281 -31.87646484 41.04882812 C-34.03125 42.9765625 -34.03125 42.9765625 -36.03125 42.9765625 C-36.03125 43.6365625 -36.03125 44.2965625 -36.03125 44.9765625 C-37.68125 45.6365625 -39.33125 46.2965625 -41.03125 46.9765625 C-41.03125 47.6365625 -41.03125 48.2965625 -41.03125 48.9765625 C-41.69125 48.9765625 -42.35125 48.9765625 -43.03125 48.9765625 C-42.36458333 46.30989583 -41.69791667 43.64322917 -41.03125 40.9765625 C-41.69125 40.9765625 -42.35125 40.9765625 -43.03125 40.9765625 C-43.03125 40.3165625 -43.03125 39.6565625 -43.03125 38.9765625 C-43.69125 38.6465625 -44.35125 38.3165625 -45.03125 37.9765625 C-43.05125 35.5015625 -43.05125 35.5015625 -41.03125 32.9765625 C-41.69125 32.9765625 -42.35125 32.9765625 -43.03125 32.9765625 C-43.03125 32.3165625 -43.03125 31.6565625 -43.03125 30.9765625 C-42.37125 30.9765625 -41.71125 30.9765625 -41.03125 30.9765625 C-41.03125 30.3165625 -41.03125 29.6565625 -41.03125 28.9765625 C-39.71125 28.9765625 -38.39125 28.9765625 -37.03125 28.9765625 C-34.76247465 26.55775321 -34.76247465 26.55775321 -33.03125 23.9765625 C-34.02125 23.9765625 -35.01125 23.9765625 -36.03125 23.9765625 C-35.70125 23.3165625 -35.37125 22.6565625 -35.03125 21.9765625 C-34.37125 22.3065625 -33.71125 22.6365625 -33.03125 22.9765625 C-32.70125 22.3165625 -32.37125 21.6565625 -32.03125 20.9765625 C-31.37125 20.9765625 -30.71125 20.9765625 -30.03125 20.9765625 C-28.59621986 19.57725925 -27.23297324 18.10394945 -25.90625 16.6015625 C-24.75298559 15.3087572 -23.59945515 14.01618608 -22.44345093 12.72583008 C-20.92640309 10.91590603 -20.92640309 10.91590603 -19.47769165 8.5144043 C-13.97320054 0.33304923 -9.53410844 -0.41573619 0 0 Z \",fill:\"#244D46\",transform:\"translate(527.03125,-0.9765625)\"})),_path62||(_path62=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C8 2 8 2 10 4 C11.93125966 3.6425235 11.93125966 3.6425235 14 3 C28.5 3 28.5 3 33 4 C32.67 5.65 32.34 7.3 32 9 C31.01 8.34 30.02 7.68 29 7 C28.01 7 27.02 7 26 7 C27.32 7.66 28.64 8.32 30 9 C30 9.66 30 10.32 30 11 C31.65 10.67 33.3 10.34 35 10 C35 10.66 35 11.32 35 12 C33.68 12 32.36 12 31 12 C31.2165625 12.55429688 31.433125 13.10859375 31.65625 13.6796875 C32.07390625 14.76636719 32.07390625 14.76636719 32.5 15.875 C32.7784375 16.59429687 33.056875 17.31359375 33.34375 18.0546875 C34 20 34 20 34 22 C34.64533078 24.33932406 35.31060191 26.67328146 36 29 C36.99 29 37.98 29 39 29 C39 28.01 39 27.02 39 26 C39.66 26 40.32 26 41 26 C40.57847656 25.54109375 40.15695313 25.0821875 39.72265625 24.609375 C39.17480469 23.99578125 38.62695312 23.3821875 38.0625 22.75 C37.51722656 22.14671875 36.97195312 21.5434375 36.41015625 20.921875 C34.93787201 18.91532695 34.42470811 17.42997551 34 15 C34.66 15 35.32 15 36 15 C36.79356801 13.25328412 36.79356801 13.25328412 37 11 C35.60907108 8.37612865 35.60907108 8.37612865 34 6 C34 5.34 34 4.68 34 4 C34.99 4.33 35.98 4.66 37 5 C37 5.99 37 6.98 37 8 C37.66 8 38.32 8 39 8 C39 8.66 39 9.32 39 10 C39.66 9.67 40.32 9.34 41 9 C41.65213292 6.97536745 41.65213292 6.97536745 42 5 C43.32 5.66 44.64 6.32 46 7 C46.66 6.34 47.32 5.68 48 5 C48.99 5.66 49.98 6.32 51 7 C51 6.34 51 5.68 51 5 C51.99 4.67 52.98 4.34 54 4 C54.226875 4.61875 54.45375 5.2375 54.6875 5.875 C56.37929835 8.61410209 57.99244161 9.05024472 61 10 C61 10.99 61 11.98 61 13 C60.01 13 59.02 13 58 13 C58.495 13.99 58.495 13.99 59 15 C59.99 14.67 60.98 14.34 62 14 C62 15.65 62 17.3 62 19 C60.68 18.67 59.36 18.34 58 18 C58.495 22.95 58.495 22.95 59 28 C56.03 28.495 56.03 28.495 53 29 C53 28.34 53 27.68 53 27 C53.66 27 54.32 27 55 27 C54.814375 25.906875 54.62875 24.81375 54.4375 23.6875 C54 20 54 20 55 17 C55 15.68 55 14.36 55 13 C53.68 12.67 52.36 12.34 51 12 C51.66 15.63 52.32 19.26 53 23 C52.34 23 51.68 23 51 23 C51.185625 23.9075 51.37125 24.815 51.5625 25.75 C52 29 52 29 51.5 30.9375 C50.74206877 34.06396632 51.4579673 36.86825549 52 40 C50.52093108 40.02689216 49.04172517 40.04634621 47.5625 40.0625 C46.73878906 40.07410156 45.91507813 40.08570313 45.06640625 40.09765625 C43 40 43 40 42 39 C41.92773498 37.14712498 41.9161878 35.29166122 41.9375 33.4375 C41.94652344 32.42558594 41.95554688 31.41367187 41.96484375 30.37109375 C41.97644531 29.58863281 41.98804688 28.80617188 42 28 C41.34 27.67 40.68 27.34 40 27 C40.495 28.485 40.495 28.485 41 30 C41.13143471 33.33844165 41.04340976 36.65744868 41 40 C36.71 40 32.42 40 28 40 C28.495 54.355 28.495 54.355 29 69 C24.05 69.495 24.05 69.495 19 70 C17.46472656 70.15662109 17.46472656 70.15662109 15.8984375 70.31640625 C15.06570313 70.39761719 14.23296875 70.47882813 13.375 70.5625 C12.53710938 70.64628906 11.69921875 70.73007812 10.8359375 70.81640625 C7.23098629 71.04978463 3.61249757 71 0 71 C0 47.57 0 24.14 0 0 Z \",fill:\"#AB6754\",transform:\"translate(0,229)\"})),_path63||(_path63=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.89589844 0.00322266 1.79179687 0.00644531 2.71484375 0.00976562 C4.12056641 0.02233398 4.12056641 0.02233398 5.5546875 0.03515625 C6.49957031 0.03966797 7.44445312 0.04417969 8.41796875 0.04882812 C10.7552352 0.0606325 13.09246919 0.07856826 15.4296875 0.09765625 C15.4296875 3.39765625 15.4296875 6.69765625 15.4296875 10.09765625 C16.0896875 10.09765625 16.7496875 10.09765625 17.4296875 10.09765625 C17.4296875 11.74765625 17.4296875 13.39765625 17.4296875 15.09765625 C14.1296875 15.09765625 10.8296875 15.09765625 7.4296875 15.09765625 C7.4296875 19.38765625 7.4296875 23.67765625 7.4296875 28.09765625 C6.1096875 28.42765625 4.7896875 28.75765625 3.4296875 29.09765625 C4.3990625 29.69578125 5.3684375 30.29390625 6.3671875 30.91015625 C9.4296875 33.09765625 9.4296875 33.09765625 10.4296875 36.09765625 C9.4396875 36.59265625 9.4396875 36.59265625 8.4296875 37.09765625 C8.7596875 38.08765625 9.0896875 39.07765625 9.4296875 40.09765625 C10.3578125 40.18015625 11.2859375 40.26265625 12.2421875 40.34765625 C15.4296875 41.09765625 15.4296875 41.09765625 17.3046875 42.66015625 C18.95740906 46.24105297 18.62586958 49.1740146 18.4296875 53.09765625 C16.7796875 53.09765625 15.1296875 53.09765625 13.4296875 53.09765625 C13.4296875 51.77765625 13.4296875 50.45765625 13.4296875 49.09765625 C12.4396875 49.59265625 12.4396875 49.59265625 11.4296875 50.09765625 C10.77755458 52.1222888 10.77755458 52.1222888 10.4296875 54.09765625 C8.7796875 54.09765625 7.1296875 54.09765625 5.4296875 54.09765625 C5.7596875 55.08765625 6.0896875 56.07765625 6.4296875 57.09765625 C7.9146875 57.59265625 7.9146875 57.59265625 9.4296875 58.09765625 C9.4296875 58.75765625 9.4296875 59.41765625 9.4296875 60.09765625 C7.65848947 59.95632126 5.88773463 59.80942417 4.1171875 59.66015625 C3.13105469 59.57894531 2.14492188 59.49773437 1.12890625 59.4140625 C-1.5703125 59.09765625 -1.5703125 59.09765625 -4.5703125 58.09765625 C-4.5703125 57.43765625 -4.5703125 56.77765625 -4.5703125 56.09765625 C-6.2203125 56.09765625 -7.8703125 56.09765625 -9.5703125 56.09765625 C-10.5603125 52.13765625 -10.5603125 52.13765625 -11.5703125 48.09765625 C-13.0553125 48.59265625 -13.0553125 48.59265625 -14.5703125 49.09765625 C-17.14297068 49.16794746 -19.68672681 49.19136457 -22.2578125 49.16015625 C-23.3106543 49.15338867 -23.3106543 49.15338867 -24.38476562 49.14648438 C-26.11331788 49.13472552 -27.84182615 49.11679079 -29.5703125 49.09765625 C-29.5703125 48.43765625 -29.5703125 47.77765625 -29.5703125 47.09765625 C-28.9103125 46.76765625 -28.2503125 46.43765625 -27.5703125 46.09765625 C-26.84871826 44.45402491 -26.17679829 42.78715239 -25.5703125 41.09765625 C-23.6116082 41.2384194 -21.65335157 41.38542385 -19.6953125 41.53515625 C-18.60476563 41.61636719 -17.51421875 41.69757813 -16.390625 41.78125 C-13.5703125 42.09765625 -13.5703125 42.09765625 -11.5703125 43.09765625 C-11.5703125 42.10765625 -11.5703125 41.11765625 -11.5703125 40.09765625 C-14.5403125 39.76765625 -17.5103125 39.43765625 -20.5703125 39.09765625 C-19.9103125 38.10765625 -19.2503125 37.11765625 -18.5703125 36.09765625 C-17.9103125 36.09765625 -17.2503125 36.09765625 -16.5703125 36.09765625 C-16.44785156 35.535625 -16.32539063 34.97359375 -16.19921875 34.39453125 C-15.5183256 31.90779106 -14.57678925 29.69250849 -13.5078125 27.34765625 C-13.14558594 26.5484375 -12.78335938 25.74921875 -12.41015625 24.92578125 C-12.13300781 24.3225 -11.85585938 23.71921875 -11.5703125 23.09765625 C-12.2303125 23.09765625 -12.8903125 23.09765625 -13.5703125 23.09765625 C-14.0653125 25.57265625 -14.0653125 25.57265625 -14.5703125 28.09765625 C-24.99569115 28.52806179 -35.21927712 27.20917683 -45.5703125 26.09765625 C-45.5703125 32.69765625 -45.5703125 39.29765625 -45.5703125 46.09765625 C-44.9103125 46.42765625 -44.2503125 46.75765625 -43.5703125 47.09765625 C-43.5703125 49.07765625 -43.5703125 51.05765625 -43.5703125 53.09765625 C-44.2303125 53.09765625 -44.8903125 53.09765625 -45.5703125 53.09765625 C-47.10798596 44.11047739 -48.05175048 35.19978425 -48.5703125 26.09765625 C-49.8903125 25.76765625 -51.2103125 25.43765625 -52.5703125 25.09765625 C-52.5703125 24.10765625 -52.5703125 23.11765625 -52.5703125 22.09765625 C-54.18099609 22.13246094 -54.18099609 22.13246094 -55.82421875 22.16796875 C-57.26040965 22.18674249 -58.69660815 22.20494095 -60.1328125 22.22265625 C-60.83728516 22.23941406 -61.54175781 22.25617188 -62.26757812 22.2734375 C-67.07114078 22.31770997 -70.95110643 21.55742745 -75.5703125 20.09765625 C-82.13189951 18.37309662 -88.63113335 17.58621594 -95.3828125 17.03515625 C-97.22289611 16.88043067 -99.06275337 16.72298337 -100.90234375 16.5625 C-101.70389893 16.49667725 -102.5054541 16.43085449 -103.33129883 16.36303711 C-105.4824704 16.1080678 -107.48423099 15.67276719 -109.5703125 15.09765625 C-109.5703125 14.43765625 -109.5703125 13.77765625 -109.5703125 13.09765625 C-108.5803125 13.09765625 -107.5903125 13.09765625 -106.5703125 13.09765625 C-106.5703125 12.43765625 -106.5703125 11.77765625 -106.5703125 11.09765625 C-98.6503125 10.60265625 -98.6503125 10.60265625 -90.5703125 10.09765625 C-90.5703125 8.44765625 -90.5703125 6.79765625 -90.5703125 5.09765625 C-91.2303125 4.76765625 -91.8903125 4.43765625 -92.5703125 4.09765625 C-82.3403125 4.09765625 -72.1103125 4.09765625 -61.5703125 4.09765625 C-61.5703125 4.42765625 -61.5703125 4.75765625 -61.5703125 5.09765625 C-63.8803125 5.09765625 -66.1903125 5.09765625 -68.5703125 5.09765625 C-68.5703125 7.07765625 -68.5703125 9.05765625 -68.5703125 11.09765625 C-67.8690625 11.07445312 -67.1678125 11.05125 -66.4453125 11.02734375 C-60.41472388 10.91263147 -55.34587377 11.35409058 -49.5703125 13.09765625 C-48.9103125 10.78765625 -48.2503125 8.47765625 -47.5703125 6.09765625 C-49.8803125 6.09765625 -52.1903125 6.09765625 -54.5703125 6.09765625 C-54.9003125 6.75765625 -55.2303125 7.41765625 -55.5703125 8.09765625 C-55.5703125 7.43765625 -55.5703125 6.77765625 -55.5703125 6.09765625 C-56.5603125 5.76765625 -57.5503125 5.43765625 -58.5703125 5.09765625 C-43.0603125 5.09765625 -27.5503125 5.09765625 -11.5703125 5.09765625 C-11.5703125 5.42765625 -11.5703125 5.75765625 -11.5703125 6.09765625 C-13.2203125 6.09765625 -14.8703125 6.09765625 -16.5703125 6.09765625 C-16.5703125 7.74765625 -16.5703125 9.39765625 -16.5703125 11.09765625 C-17.2303125 11.09765625 -17.8903125 11.09765625 -18.5703125 11.09765625 C-18.5703125 9.44765625 -18.5703125 7.79765625 -18.5703125 6.09765625 C-19.0653125 6.26265625 -19.5603125 6.42765625 -20.0703125 6.59765625 C-23.60475339 7.30454443 -26.96721951 7.1577078 -30.5703125 7.09765625 C-30.5703125 8.41765625 -30.5703125 9.73765625 -30.5703125 11.09765625 C-22.9803125 11.42765625 -15.3903125 11.75765625 -7.5703125 12.09765625 C-11.35873723 14.62327273 -14.35564579 14.35157198 -18.73828125 14.29296875 C-19.93050041 14.28872391 -19.93050041 14.28872391 -21.14680481 14.28439331 C-23.68396088 14.2732033 -26.22076322 14.24810116 -28.7578125 14.22265625 C-30.47851052 14.21262491 -32.19921409 14.20349933 -33.91992188 14.1953125 C-38.13685493 14.17326786 -42.35352375 14.13874631 -46.5703125 14.09765625 C-46.0753125 15.08765625 -46.0753125 15.08765625 -45.5703125 16.09765625 C-33.3603125 16.09765625 -21.1503125 16.09765625 -8.5703125 16.09765625 C-8.5703125 16.42765625 -8.5703125 16.75765625 -8.5703125 17.09765625 C-20.4503125 17.09765625 -32.3303125 17.09765625 -44.5703125 17.09765625 C-44.5703125 18.41765625 -44.5703125 19.73765625 -44.5703125 21.09765625 C-43.29184448 21.08980103 -43.29184448 21.08980103 -41.98754883 21.08178711 C-38.80997977 21.06469293 -35.63243425 21.05218063 -32.45483398 21.04272461 C-31.08243028 21.03771171 -29.71003188 21.03089967 -28.33764648 21.0222168 C-26.35923599 21.01001768 -24.3807857 21.00493377 -22.40234375 21 C-21.21358643 20.99476318 -20.0248291 20.98952637 -18.80004883 20.98413086 C-15.92293763 21.08526146 -13.36357837 21.43215432 -10.5703125 22.09765625 C-10.0753125 20.61265625 -10.0753125 20.61265625 -9.5703125 19.09765625 C-8.9103125 19.42765625 -8.2503125 19.75765625 -7.5703125 20.09765625 C-6.5803125 15.64265625 -6.5803125 15.64265625 -5.5703125 11.09765625 C-3.0953125 10.60265625 -3.0953125 10.60265625 -0.5703125 10.09765625 C-0.0753125 11.58265625 -0.0753125 11.58265625 0.4296875 13.09765625 C1.0896875 12.76765625 1.7496875 12.43765625 2.4296875 12.09765625 C2.4296875 11.43765625 2.4296875 10.77765625 2.4296875 10.09765625 C6.8846875 9.60265625 6.8846875 9.60265625 11.4296875 9.09765625 C7.7996875 8.76765625 4.1696875 8.43765625 0.4296875 8.09765625 C-0.0653125 6.61265625 -0.0653125 6.61265625 -0.5703125 5.09765625 C-1.5603125 4.60265625 -1.5603125 4.60265625 -2.5703125 4.09765625 C-2.9003125 4.75765625 -3.2303125 5.41765625 -3.5703125 6.09765625 C-4.5603125 5.63359375 -4.5603125 5.63359375 -5.5703125 5.16015625 C-9.27507265 3.8480537 -12.66295241 3.4950149 -16.5703125 3.09765625 C-16.5703125 2.76765625 -16.5703125 2.43765625 -16.5703125 2.09765625 C-15.52230469 2.00677734 -15.52230469 2.00677734 -14.453125 1.9140625 C-13.54304688 1.83027344 -12.63296875 1.74648438 -11.6953125 1.66015625 C-10.79039062 1.57894531 -9.88546875 1.49773437 -8.953125 1.4140625 C-5.68599397 0.98023035 -3.4108398 -0.02158759 0 0 Z \",fill:\"#0B2A21\",transform:\"translate(468.5703125,261.90234375)\"})),_path64||(_path64=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.06731323 0.90371338 0.06731323 0.90371338 0.13598633 1.82568359 C1.27518763 16.88589308 1.27518763 16.88589308 3.5 31.8125 C5.45701345 42.42331651 6.06243987 53.14760788 6.77856445 63.90039062 C6.99982582 66.99756192 7.27164412 70.08725217 7.55078125 73.1796875 C7.99293459 78.38395176 8.11972401 83.52995462 8.0625 88.75 C8.041875 91.4725 8.02125 94.195 8 97 C-1.57 97 -11.14 97 -21 97 C-21.0451399 85.18688871 -21.08185213 73.37383447 -21.10362434 61.56065655 C-21.11407258 56.0756428 -21.12825077 50.59069099 -21.15087891 45.10571289 C-21.17257017 39.81486716 -21.18456079 34.5240811 -21.18975449 29.23319435 C-21.19345693 27.21212639 -21.20068664 25.19106179 -21.21146011 23.17001915 C-21.2259256 20.34463759 -21.22798001 17.51950428 -21.22705078 14.6940918 C-21.23424133 13.85396042 -21.24143188 13.01382904 -21.24884033 12.14823914 C-21.23489311 8.24301568 -21.21654725 6.32482088 -19 3 C-19.66 2.34 -20.32 1.68 -21 1 C-14.03220597 -0.32719886 -7.07011089 -0.08825381 0 0 Z \",fill:\"#2F1D1B\",transform:\"translate(325,529)\"})),_path65||(_path65=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-8.42660847 8.27141598 -19.23513076 13.26260164 -29 17 C-29 17.66 -29 18.32 -29 19 C-28.52433594 18.731875 -28.04867187 18.46375 -27.55859375 18.1875 C-25.04518357 16.7803606 -22.52359653 15.38880279 -20 14 C-19.08420166 13.49412354 -19.08420166 13.49412354 -18.14990234 12.97802734 C-16.14531501 11.87424496 -14.13571937 10.78006605 -12.125 9.6875 C-11.47072021 9.32591797 -10.81644043 8.96433594 -10.14233398 8.59179688 C-5.34241074 6 -5.34241074 6 -2 6 C-1.01 6.495 -1.01 6.495 0 7 C0 7.99 0 8.98 0 10 C-0.79664063 10.38671875 -1.59328125 10.7734375 -2.4140625 11.171875 C-10.52407374 15.06017117 -10.52407374 15.06017117 -18 20 C-18 20.66 -18 21.32 -18 22 C-21.07617188 22.29296875 -21.07617188 22.29296875 -24.15234375 22.5859375 C-24.76207031 22.72257812 -25.37179687 22.85921875 -26 23 C-26.33 23.66 -26.66 24.32 -27 25 C-26.34 25.33 -25.68 25.66 -25 26 C-25 27.32 -25 28.64 -25 30 C-29.67698963 34.39089717 -37.63386727 38 -44 38 C-44 38.66 -44 39.32 -44 40 C-44.78375 40.37125 -45.5675 40.7425 -46.375 41.125 C-49.36933583 42.63288749 -52.28539129 44.25912087 -55.1875 45.9375 C-56.44626953 46.66259766 -56.44626953 46.66259766 -57.73046875 47.40234375 C-60.0726258 49.05112556 -61.3591383 50.68149629 -63 53 C-63.99 53.495 -63.99 53.495 -65 54 C-65 54.66 -65 55.32 -65 56 C-66.010625 56.33 -67.02125 56.66 -68.0625 57 C-73.04822818 58.85412311 -77.63352429 61.38853104 -82.27954102 63.95507812 C-86.30767698 66.16379751 -90.39057724 68.10577692 -94.6003418 69.94360352 C-107.95750853 75.82380094 -120.94004336 82.39751869 -133.68554688 89.49560547 C-141.53296466 93.83092189 -149.55815144 97.72616684 -157.67773438 101.5234375 C-158.59232422 101.95140625 -159.50691406 102.379375 -160.44921875 102.8203125 C-161.66097778 103.38129639 -161.66097778 103.38129639 -162.8972168 103.95361328 C-165.21228217 105.05057511 -165.21228217 105.05057511 -168 107 C-170.26171875 107.1953125 -170.26171875 107.1953125 -172.6875 107.125 C-173.49574219 107.10695313 -174.30398438 107.08890625 -175.13671875 107.0703125 C-175.75160156 107.04710937 -176.36648438 107.02390625 -177 107 C-174.09675366 104.71116161 -171.14048314 102.91544516 -167.875 101.1875 C-164.12380894 99.17454395 -160.44598279 97.09327775 -156.8125 94.875 C-152.64000355 92.33812216 -148.39898073 90.11802776 -144 88 C-146.82300989 86.6709341 -146.82300989 86.6709341 -148.69140625 87.8203125 C-149.30886719 88.25085938 -149.92632812 88.68140625 -150.5625 89.125 C-153.62725355 91.16067117 -156.68743453 92.89731039 -160 94.5 C-165.36875755 97.13110103 -170.35625477 100.14570647 -175.25 103.578125 C-179.8020475 106.746104 -183.55859766 108.84225482 -189 110 C-188.67 108.02 -188.34 106.04 -188 104 C-187.39414062 103.86464844 -186.78828125 103.72929687 -186.1640625 103.58984375 C-180.10289206 102.03258919 -175.86338089 99.72672806 -170.87109375 96.01171875 C-167.50947789 93.65630083 -164.02800925 91.66884413 -160.4375 89.6875 C-154.84794159 86.59667902 -149.30646465 83.44548848 -143.8125 80.1875 C-136.35839201 75.77232076 -128.84550873 71.4654721 -121.3059082 67.19799805 C-117.48707827 65.02882005 -113.70081929 62.83776055 -109.9921875 60.484375 C-105.49883634 57.64400956 -100.85511035 55.10304164 -96.1875 52.5625 C-95.30094727 52.0773291 -94.41439453 51.5921582 -93.50097656 51.09228516 C-89.08825952 48.67865038 -84.66938418 46.27640054 -80.25 43.875 C-68.07518469 37.24287926 -55.87784532 30.53065769 -44.109375 23.19921875 C-43.20703125 22.63847656 -42.3046875 22.07773438 -41.375 21.5 C-40.57835937 20.9946875 -39.78171875 20.489375 -38.9609375 19.96875 C-38.31382812 19.6490625 -37.66671875 19.329375 -37 19 C-36.34 19.33 -35.68 19.66 -35 20 C-35.33 20.66 -35.66 21.32 -36 22 C-35.01 21.505 -35.01 21.505 -34 21 C-33.90460938 20.38640625 -33.80921875 19.7728125 -33.7109375 19.140625 C-32.63637761 15.90513699 -30.58414013 15.28782085 -27.625 13.75 C-26.64789062 13.22921875 -25.67078125 12.7084375 -24.6640625 12.171875 C-22 11 -22 11 -19 11 C-19 10.34 -19 9.68 -19 9 C-16.2118978 7.4933028 -13.41896042 5.99580196 -10.625 4.5 C-9.8309375 4.07074219 -9.036875 3.64148438 -8.21875 3.19921875 C-7.45820312 2.79316406 -6.69765625 2.38710937 -5.9140625 1.96875 C-5.2123291 1.59169922 -4.5105957 1.21464844 -3.78759766 0.82617188 C-2 0 -2 0 0 0 Z \",fill:\"#252722\",transform:\"translate(605,85)\"})),_path66||(_path66=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.66 1.32 1.32 2 2 C3.96690374 2.67292501 3.96690374 2.67292501 6.125 3.125 C7.40375 3.41375 8.6825 3.7025 10 4 C9.67 6.97 9.34 9.94 9 13 C9.66 13 10.32 13 11 13 C11 12.01 11 11.02 11 10 C12.32 10.33 13.64 10.66 15 11 C15 11.66 15 12.32 15 13 C16.32 13 17.64 13 19 13 C19 11.35 19 9.7 19 8 C19.66 7.67 20.32 7.34 21 7 C21.65213292 4.97536745 21.65213292 4.97536745 22 3 C25.875 3.875 25.875 3.875 27 5 C27.4014624 4.35329346 27.8029248 3.70658691 28.21655273 3.0402832 C30 1 30 1 32.10961914 0.43823242 C32.91004639 0.41092041 33.71047363 0.3836084 34.53515625 0.35546875 C35.42783203 0.31873047 36.32050781 0.28199219 37.24023438 0.24414062 C38.63725586 0.21610352 38.63725586 0.21610352 40.0625 0.1875 C40.96677734 0.14947266 41.87105469 0.11144531 42.80273438 0.07226562 C52.69951881 -0.26022106 60.43551643 0.49152064 69.54101562 4.53808594 C75.83221392 7.19701418 82.34099162 9.23453565 88.83447266 11.33935547 C91.23579771 12.12038074 93.63149286 12.91720849 96.02734375 13.71484375 C105.92628088 16.96290867 115.70962561 19.37101499 126 21 C126 21.66 126 22.32 126 23 C116.37014049 23.68784711 106.97454232 21.13649023 97.94140625 17.90625 C94.62083902 16.88318015 91.58903026 16.58708349 88.125 16.375 C86.97257812 16.30023438 85.82015625 16.22546875 84.6328125 16.1484375 C83.32957031 16.07496094 83.32957031 16.07496094 82 16 C82 16.99 82 17.98 82 19 C83.06009277 19.05498657 83.06009277 19.05498657 84.14160156 19.11108398 C92.24727424 19.64490759 99.86881294 21.14123777 107.75 23.0625 C108.9359375 23.34416016 110.121875 23.62582031 111.34375 23.91601562 C114.23111875 24.60292997 117.11634762 25.29767871 120 26 C119.01 27.485 119.01 27.485 118 29 C113.87484996 28.68946109 109.74991025 28.37620677 105.625 28.0625 C104.46871094 27.97548828 103.31242187 27.88847656 102.12109375 27.79882812 C95.40368511 27.2864834 88.69938434 26.71129502 82 26 C82.495 26.99 82.495 26.99 83 28 C83.06950541 29.54023996 83.08452357 31.08334988 83.0625 32.625 C83.05347656 33.44226563 83.04445313 34.25953125 83.03515625 35.1015625 C83.02355469 35.72804688 83.01195312 36.35453125 83 37 C82.34 37 81.68 37 81 37 C80.95101562 36.28972656 80.90203125 35.57945312 80.8515625 34.84765625 C80.73941406 33.46900391 80.73941406 33.46900391 80.625 32.0625 C80.52058594 30.68771484 80.52058594 30.68771484 80.4140625 29.28515625 C80.20910156 28.15400391 80.20910156 28.15400391 80 27 C79.34 26.67 78.68 26.34 78 26 C78.495 27.485 78.495 27.485 79 29 C77.515 28.505 77.515 28.505 76 28 C76 27.01 76 26.02 76 25 C72.87802522 26.3089572 72.87802522 26.3089572 71 29 C70.34 28.67 69.68 28.34 69 28 C68.375 25.4375 68.375 25.4375 68 23 C66.515 23.495 66.515 23.495 65 24 C65 23.34 65 22.68 65 22 C62.03 22.66 59.06 23.32 56 24 C55.505 23.01 55.505 23.01 55 22 C54.01 21.67 53.02 21.34 52 21 C52 20.01 52 19.02 52 18 C51.34 18 50.68 18 50 18 C49.67 19.32 49.34 20.64 49 22 C48.01 22 47.02 22 46 22 C45.505 21.01 45.505 21.01 45 20 C42.58354218 19.83312552 42.58354218 19.83312552 40 20 C39.34 20.66 38.68 21.32 38 22 C37.505 21.01 37.505 21.01 37 20 C36.67 20.66 36.34 21.32 36 22 C35.01 22 34.02 22 33 22 C32.505 21.01 32.505 21.01 32 20 C31.01 20.99 30.02 21.98 29 23 C28.505 21.02 28.505 21.02 28 19 C27.34 19 26.68 19 26 19 C26.309375 19.680625 26.61875 20.36125 26.9375 21.0625 C28.13370649 24.36965912 28.59005397 27.51545878 29 31 C27.68 31.33 26.36 31.66 25 32 C25.02320313 31.31292969 25.04640625 30.62585938 25.0703125 29.91796875 C25.08835938 29.01691406 25.10640625 28.11585938 25.125 27.1875 C25.14820313 26.29417969 25.17140625 25.40085937 25.1953125 24.48046875 C25.18285827 21.74597286 25.18285827 21.74597286 23 19 C21.99686093 23.76491057 22.16836673 27.35298149 22.87890625 32.125 C23 34 23 34 22 36 C23.98 36 25.96 36 28 36 C28.495 35.01 28.495 35.01 29 34 C29 34.66 29 35.32 29 36 C29.99 35.67 30.98 35.34 32 35 C34.1875 35.4375 34.1875 35.4375 36 36 C36 35.34 36 34.68 36 34 C36.66 34 37.32 34 38 34 C38.495 35.98 38.495 35.98 39 38 C35.7 38 32.4 38 29 38 C29 38.99 29 39.98 29 41 C32.63 41 36.26 41 40 41 C40 41.66 40 42.32 40 43 C37.11788698 43.96070434 35.30149956 44.10581883 32.3125 44.0625 C31.10013672 44.04896484 31.10013672 44.04896484 29.86328125 44.03515625 C29.24839844 44.02355469 28.63351563 44.01195312 28 44 C28.32164617 45.95965452 28.32164617 45.95965452 29 48 C30.66279327 49.0064275 32.32983484 50.00585407 34 51 C36.27272629 53.87878663 37.09662353 55.13038823 36.6875 58.8125 C36.460625 59.534375 36.23375 60.25625 36 61 C31.74433453 62.16063604 28.3164922 61.76173392 24 61 C24 61.66 24 62.32 24 63 C21.03 63.99 21.03 63.99 18 65 C18.33 61.7 18.66 58.4 19 55 C11.08 55.495 11.08 55.495 3 56 C3 50.39 3 44.78 3 39 C5.31 39 7.62 39 10 39 C10 43.95 10 48.9 10 54 C13.3 54 16.6 54 20 54 C20.66 52.02 21.32 50.04 22 48 C22.66 48 23.32 48 24 48 C24 46.68 24 45.36 24 44 C21.03 44 18.06 44 15 44 C15 43.01 15 42.02 15 41 C18.3 41 21.6 41 25 41 C25 40.01 25 39.02 25 38 C20.71 38 16.42 38 12 38 C12.33 37.01 12.66 36.02 13 35 C15.64 35.66 18.28 36.32 21 37 C20.67 35.68 20.34 34.36 20 33 C19.34 33 18.68 33 18 33 C17.67 33.66 17.34 34.32 17 35 C16.67 33.02 16.34 31.04 16 29 C15.34 29 14.68 29 14 29 C14 27.68 14 26.36 14 25 C15.32 25.66 16.64 26.32 18 27 C17.34 24.03 16.68 21.06 16 18 C12.7 17.67 9.4 17.34 6 17 C6 16.34 6 15.68 6 15 C4.7625 15.04125 3.525 15.0825 2.25 15.125 C-0.99046026 15.11926467 -3.33349851 15.02654113 -6 13 C-6.33 12.01 -6.66 11.02 -7 10 C-5.35 9.34 -3.7 8.68 -2 8 C-1.855625 6.865625 -1.71125 5.73125 -1.5625 4.5625 C-1 1 -1 1 0 0 Z M14 31 C16 32 16 32 16 32 Z \",fill:\"#40302A\",transform:\"translate(131,231)\"})),_path67||(_path67=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.42124078 0.09102988 2.83848308 0.24820717 4.25 0.4375 C7.52972675 0.84550429 10.68871285 1.10681571 14 1 C14 2.32 14 3.64 14 5 C14.99 5 15.98 5 17 5 C16.67 6.32 16.34 7.64 16 9 C15.34 9 14.68 9 14 9 C14 9.99 14 10.98 14 12 C15.32 12.33 16.64 12.66 18 13 C17.979375 11.88625 17.95875 10.7725 17.9375 9.625 C18 6 18 6 19 4 C18.01 3.67 17.02 3.34 16 3 C19 1 19 1 21 1 C21 1.66 21 2.32 21 3 C21.99 3.33 22.98 3.66 24 4 C24 6.31 24 8.62 24 11 C25.65 11.33 27.3 11.66 29 12 C29.22245393 13.60226955 29.42746669 15.20696767 29.625 16.8125 C29.74101562 17.70582031 29.85703125 18.59914063 29.9765625 19.51953125 C30 22 30 22 28 25 C32.29 24.67 36.58 24.34 41 24 C40.01 20.04 40.01 20.04 39 16 C38.505 16.495 38.505 16.495 38 17 C38.28730055 19.33944736 38.61936779 21.6739143 39 24 C33.25 23.25 33.25 23.25 31 21 C29.66965537 17.4080695 29.92720577 13.78529987 30 10 C29.0409375 9.8453125 29.0409375 9.8453125 28.0625 9.6875 C27.381875 9.460625 26.70125 9.23375 26 9 C25.505 7.515 25.505 7.515 25 6 C25.66 6 26.32 6 27 6 C27.33 5.01 27.66 4.02 28 3 C28 3.66 28 4.32 28 5 C29.918125 4.7215625 29.918125 4.7215625 31.875 4.4375 C37.02751066 3.84770546 41.87985373 4.30519936 47 5 C50.07692308 11.4 50.07692308 11.4 49.6875 14.4375 C49.460625 14.953125 49.23375 15.46875 49 16 C47.68 15.01 46.36 14.02 45 13 C45 14.32 45 15.64 45 17 C45.66 17 46.32 17 47 17 C47.99 18.98 47.99 18.98 49 21 C49.66 21 50.32 21 51 21 C51.495 22.98 51.495 22.98 52 25 C49.36 24.67 46.72 24.34 44 24 C43.67 24.66 43.34 25.32 43 26 C47.29 26 51.58 26 56 26 C56 26.99 56 27.98 56 29 C52.7 29 49.4 29 46 29 C46 29.99 46 30.98 46 32 C48.97 32 51.94 32 55 32 C55 33.32 55 34.64 55 36 C54.34 36 53.68 36 53 36 C52.01 38.97 52.01 38.97 51 42 C47.7 42 44.4 42 41 42 C41 37.05 41 32.1 41 27 C38.69 27 36.38 27 34 27 C34 32.94 34 38.88 34 45 C-7.88463263 50.13753453 -7.88463263 50.13753453 -21.9375 51.3125 C-22.82566406 51.38839355 -23.71382812 51.46428711 -24.62890625 51.54248047 C-30.80210808 52.02147697 -36.76341748 52 -43 52 C-43 43.75 -43 35.5 -43 27 C-40.03 27 -37.06 27 -34 27 C-34 33.27 -34 39.54 -34 46 C-32.68 46 -31.36 46 -30 46 C-30 45.34 -30 44.68 -30 44 C-30.66 44 -31.32 44 -32 44 C-32 38.72 -32 33.44 -32 28 C-29.69 28 -27.38 28 -25 28 C-24.09586327 31.83724172 -23.89423102 35.37502274 -23.9375 39.3125 C-23.94652344 40.38113281 -23.95554687 41.44976562 -23.96484375 42.55078125 C-23.97644531 43.35902344 -23.98804687 44.16726563 -24 45 C-22.02 45 -20.04 45 -18 45 C-18 43.02 -18 41.04 -18 39 C-17.67 39 -17.34 39 -17 39 C-17 41.31 -17 43.62 -17 46 C-16.34 46 -15.68 46 -15 46 C-15 40.06 -15 34.12 -15 28 C-11.535 27.505 -11.535 27.505 -8 27 C-8 27.66 -8 28.32 -8 29 C-8.99 29 -9.98 29 -11 29 C-11.66 34.28 -12.32 39.56 -13 45 C-10.69 45 -8.38 45 -6 45 C-6 39.06 -6 33.12 -6 27 C-3.69 27 -1.38 27 1 27 C1 32.94 1 38.88 1 45 C1.99 45 2.98 45 4 45 C3.98839844 44.03578125 3.97679687 43.0715625 3.96484375 42.078125 C3.95582031 40.81484375 3.94679687 39.5515625 3.9375 38.25 C3.92589844 36.99703125 3.91429687 35.7440625 3.90234375 34.453125 C3.97978973 31.71463499 4.17219185 29.58119707 5 27 C4.34 26.67 3.68 26.34 3 26 C3 25.01 3 24.02 3 23 C3.66 23 4.32 23 5 23 C5 23.66 5 24.32 5 25 C6.65 24.67 8.3 24.34 10 24 C9.67 22.35 9.34 20.7 9 19 C8.01 19 7.02 19 6 19 C6 19.99 6 20.98 6 22 C5.34 22 4.68 22 4 22 C4.64270983 16.0870696 6.19003784 10.65755469 8 5 C7.38125 5.20625 6.7625 5.4125 6.125 5.625 C5.42375 5.74875 4.7225 5.8725 4 6 C3.34 5.34 2.68 4.68 2 4 C2.495 5.485 2.495 5.485 3 7 C2.34 7 1.68 7 1 7 C0.34 8.98 -0.32 10.96 -1 13 C-1.66 12.67 -2.32 12.34 -3 12 C-3.625 9.4375 -3.625 9.4375 -4 7 C-3.01 7.33 -2.02 7.66 -1 8 C-1.020625 6.865625 -1.04125 5.73125 -1.0625 4.5625 C-1 1 -1 1 0 0 Z \",fill:\"#B06D54\",transform:\"translate(100,243)\"})),_path68||(_path68=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.6 0 13.2 0 20 0 C20.495 11.88 20.495 11.88 21 24 C23.97 24 26.94 24 30 24 C30 24.33 30 24.66 30 25 C30.59372406 25.03314301 31.18744812 25.06628601 31.79916382 25.10043335 C102.55136628 29.05606988 102.55136628 29.05606988 124 32 C124 36.29 124 40.58 124 45 C114.25977819 45.12885441 104.75487766 44.78524361 95.05535889 43.83279419 C91.34170053 43.46842779 87.62602953 43.12608598 83.91015625 42.78515625 C83.1581897 42.71592453 82.40622314 42.64669281 81.63146973 42.57536316 C74.38789592 41.92105652 67.13521661 41.48823252 59.875 41.0625 C44.14775018 40.09830103 28.59960826 38.17470322 13 36 C12.02369629 35.8644873 11.04739258 35.72897461 10.04150391 35.58935547 C-1.44240529 33.96453378 -12.71242194 31.656694 -24 29 C-24.36116046 27.5225254 -24.71375048 26.04295325 -25.0625 24.5625 C-25.25972656 23.73878906 -25.45695312 22.91507812 -25.66015625 22.06640625 C-25.77230469 21.38449219 -25.88445312 20.70257813 -26 20 C-25 19 -25 19 -21.9375 18.9375 C-20.4834375 18.9684375 -20.4834375 18.9684375 -19 19 C-18.67 19.99 -18.34 20.98 -18 22 C-12.06 22 -6.12 22 0 22 C0 14.74 0 7.48 0 0 Z \",fill:\"#0E1818\",transform:\"translate(502,262)\"})),_path69||(_path69=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.99 0 1.98 0 3 C-0.99 3.33 -1.98 3.66 -3 4 C-3.33 4.99 -3.66 5.98 -4 7 C-6.1953125 7.703125 -6.1953125 7.703125 -9.125 8.25 C-14.37781361 9.445251 -19.06725172 11.1283045 -23.9375 13.375 C-24.87650146 13.79507324 -24.87650146 13.79507324 -25.83447266 14.22363281 C-32.30014839 17.29061733 -36.26894582 22.20088546 -40.66796875 27.64453125 C-41.10753906 28.09183594 -41.54710937 28.53914063 -42 29 C-42.66 29 -43.32 29 -44 29 C-44.185625 30.2375 -44.185625 30.2375 -44.375 31.5 C-45.63894625 38.57809903 -47.43401542 44.46887732 -50.75 50.8125 C-51.10126953 51.49957031 -51.45253906 52.18664062 -51.81445312 52.89453125 C-54.77353424 58.65158199 -57.84019081 64.35064417 -61 70 C-53.00844821 71.64703849 -53.00844821 71.64703849 -45.4609375 69.54296875 C-43.36764688 67.67445105 -43.36764688 67.67445105 -41.5859375 65.6640625 C-39.03541423 62.98789769 -36.37703693 62.87006686 -32.8671875 62.75390625 C-32.06023437 62.72103516 -31.25328125 62.68816406 -30.421875 62.65429688 C-28.74750324 62.59394759 -27.07302132 62.53656851 -25.3984375 62.48242188 C-19.74030968 62.24517443 -14.48380262 61.41264473 -9 60 C-10.0033896 62.51522326 -11.01147831 65.02811104 -12.03515625 67.53515625 C-12.37417969 68.36917969 -12.71320313 69.20320313 -13.0625 70.0625 C-13.40410156 70.89910156 -13.74570313 71.73570312 -14.09765625 72.59765625 C-14.89618456 74.72360823 -15.50421703 76.78686571 -16 79 C-28.6389578 82.89308872 -40.81312166 83.78848481 -54 84 C-54 84.66 -54 85.32 -54 86 C-54.99 86 -55.98 86 -57 86 C-55.54955729 81.89041233 -53.48889248 78.56741255 -51 75 C-56.21356754 73.60971532 -62.91194411 72.4780747 -67.91015625 74.94140625 C-71.40365105 77.67955082 -72.31136099 79.77840247 -74 84 C-69.38 84 -64.76 84 -60 84 C-60.33 84.66 -60.66 85.32 -61 86 C-66.94 86 -72.88 86 -79 86 C-79 75.875 -79 75.875 -77 71 C-76.34 71 -75.68 71 -75 71 C-75.66 70.67 -76.32 70.34 -77 70 C-77 68.02 -77 66.04 -77 64 C-76.01 63.505 -76.01 63.505 -75 63 C-75 62.34 -75 61.68 -75 61 C-71.69649386 57.88002198 -70.67590167 57 -66 57 C-66.33 56.34 -66.66 55.68 -67 55 C-69.3140622 54.26924352 -71.64828869 53.59861742 -74 53 C-73.04578192 51.85073734 -72.08647955 50.70569459 -71.125 49.5625 C-70.59132813 48.92441406 -70.05765625 48.28632813 -69.5078125 47.62890625 C-68 46 -68 46 -66 45 C-65.34 45.33 -64.68 45.66 -64 46 C-64 45.34 -64 44.68 -64 44 C-65.32 44 -66.64 44 -68 44 C-68 41.69 -68 39.38 -68 37 C-67.01 36.505 -67.01 36.505 -66 36 C-66 34.35 -66 32.7 -66 31 C-65.34 31 -64.68 31 -64 31 C-64 30.34 -64 29.68 -64 29 C-62.04707031 28.92265625 -62.04707031 28.92265625 -60.0546875 28.84375 C-50.73816618 28.62302434 -50.73816618 28.62302434 -42.40234375 25.15625 C-40.43058705 22.4820247 -39 20.37447232 -39 17 C-44.94 17 -50.88 17 -57 17 C-55 13 -55 13 -54 12 C-51.13732433 11.92674832 -48.299281 11.90761795 -45.4375 11.9375 C-44.63119141 11.94201172 -43.82488281 11.94652344 -42.99414062 11.95117188 C-40.99606244 11.96299482 -38.99802217 11.98093086 -37 12 C-43.93 11.505 -43.93 11.505 -51 11 C-51 10.34 -51 9.68 -51 9 C-53.31 9.66 -55.62 10.32 -58 11 C-56.1875 8.5 -56.1875 8.5 -54 6 C-53.01 6 -52.02 6 -51 6 C-51.33 4.35 -51.66 2.7 -52 1 C-51.34 1.33 -50.68 1.66 -50 2 C-47.94193236 2.0974081 -45.88068299 2.13076877 -43.8203125 2.1328125 C-41.96212891 2.13474609 -41.96212891 2.13474609 -40.06640625 2.13671875 C-38.76574219 2.13285156 -37.46507812 2.12898438 -36.125 2.125 C-34.18560547 2.13080078 -34.18560547 2.13080078 -32.20703125 2.13671875 C-30.96566406 2.13542969 -29.72429687 2.13414062 -28.4453125 2.1328125 C-27.30594238 2.13168457 -26.16657227 2.13055664 -24.99267578 2.12939453 C-22.44271806 2.01914183 -20.43879356 1.65270282 -18 1 C-16.64338552 0.9337186 -15.28381913 0.91449595 -13.92578125 0.9375 C-12.80139648 0.94910156 -12.80139648 0.94910156 -11.65429688 0.9609375 C-10.88150391 0.97382813 -10.10871094 0.98671875 -9.3125 1 C-6.535726 1.0456331 -3.77805879 1.04723586 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#F85D32\",transform:\"translate(168,317)\"})),_path70||(_path70=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.6 0 13.2 0 20 0 C20 0.66 20 1.32 20 2 C23.96 2 27.92 2 32 2 C32 1.34 32 0.68 32 0 C32.66 0 33.32 0 34 0 C34 2.97 34 5.94 34 9 C34.99 9 35.98 9 37 9 C37.21432579 15.64409958 36.51233701 21.53205867 35 28 C36.32 28.33 37.64 28.66 39 29 C39.20496094 28.44570313 39.40992188 27.89140625 39.62109375 27.3203125 C39.89050781 26.59585937 40.15992188 25.87140625 40.4375 25.125 C40.70433594 24.40570313 40.97117188 23.68640625 41.24609375 22.9453125 C42 21 42 21 43 19 C50.59 19 58.18 19 66 19 C66 19.33 66 19.66 66 20 C64.46279297 20.07347656 64.46279297 20.07347656 62.89453125 20.1484375 C61.5338294 20.22351071 60.17315356 20.29905655 58.8125 20.375 C58.13896484 20.4059375 57.46542969 20.436875 56.77148438 20.46875 C52.80321025 20.70103922 49.59270121 21.28387476 46 23 C46.41977529 25.09209605 46.41977529 25.09209605 48 27 C50.72000047 27.44377366 53.08395803 27.65105465 55.8125 27.6875 C64.662296 27.95179255 64.662296 27.95179255 69 29 C69 29.33 69 29.66 69 30 C67.02 30.66 65.04 31.32 63 32 C63 33.65 63 35.3 63 37 C63.66 37 64.32 37 65 37 C65 37.99 65 38.98 65 40 C67.31 40.33 69.62 40.66 72 41 C72 41.66 72 42.32 72 43 C73.11181641 42.65388672 73.11181641 42.65388672 74.24609375 42.30078125 C77 42 77 42 79.09765625 43.29296875 C79.74605469 43.91816406 80.39445312 44.54335938 81.0625 45.1875 C81.74441406 45.84492188 82.42632812 46.50234375 83.12890625 47.1796875 C83.74636719 47.78039062 84.36382812 48.38109375 85 49 C85.825 49.598125 86.65 50.19625 87.5 50.8125 C90.0212319 54.48929652 89.2966837 58.68160391 89 63 C89.99 63 90.98 63 92 63 C92 54.42 92 45.84 92 37 C92.33 37 92.66 37 93 37 C93.99 51.355 93.99 51.355 95 66 C93.515 65.505 93.515 65.505 92 65 C90.43881572 64.93259135 88.8749748 64.91485544 87.3125 64.9375 C86.50425781 64.94652344 85.69601563 64.95554687 84.86328125 64.96484375 C84.24839844 64.97644531 83.63351563 64.98804688 83 65 C85.31 65.33 87.62 65.66 90 66 C90.33 67.32 90.66 68.64 91 70 C91.83144531 70.12117188 92.66289062 70.24234375 93.51953125 70.3671875 C94.60621094 70.53476562 95.69289063 70.70234375 96.8125 70.875 C97.89144531 71.03742188 98.97039062 71.19984375 100.08203125 71.3671875 C103 72 103 72 106 74 C106.1875 76.625 106.1875 76.625 106 79 C105.34 77.68 104.68 76.36 104 75 C103.34 75 102.68 75 102 75 C102.2165625 75.55429687 102.433125 76.10859375 102.65625 76.6796875 C102.9346875 77.40414062 103.213125 78.12859375 103.5 78.875 C103.7784375 79.59429687 104.056875 80.31359375 104.34375 81.0546875 C105 83 105 83 105 85 C100.71 85 96.42 85 92 85 C95.76687864 83.11656068 97.02958963 82.77942165 101 83 C100.505 78.545 100.505 78.545 100 74 C93.64624313 73.97530677 87.29251411 73.95714322 80.9387207 73.94506836 C78.77660638 73.94003528 76.61449547 73.93320831 74.45239258 73.92456055 C71.34715941 73.91245021 68.2419712 73.90676148 65.13671875 73.90234375 C64.16788254 73.89718246 63.19904633 73.89202118 62.20085144 73.88670349 C60.84979057 73.88659019 60.84979057 73.88659019 59.47143555 73.88647461 C58.28229805 73.88314369 58.28229805 73.88314369 57.06913757 73.87974548 C54.80155302 73.92134223 54.80155302 73.92134223 52 75 C50.79117904 77.00016466 50.79117904 77.00016466 50 79 C49.67 79 49.34 79 49 79 C48.96261719 78.24976563 48.92523438 77.49953125 48.88671875 76.7265625 C48.43885457 69.753932 47.30091805 63.59012941 45 57 C44.67 56.01 44.34 55.02 44 54 C45.32 54 46.64 54 48 54 C48 53.34 48 52.68 48 52 C46.02 52 44.04 52 42 52 C42.598125 51.773125 43.19625 51.54625 43.8125 51.3125 C46.56351888 49.66188867 47.52484637 47.8027919 49 45 C48.01 44.505 48.01 44.505 47 44 C48.875 44.1875 48.875 44.1875 51 45 C52.125 47.5 52.125 47.5 53 50 C53.99 50.495 53.99 50.495 55 51 C55 48.36 55 45.72 55 43 C53.33419766 42.7034367 51.66726546 42.41322408 50 42.125 C48.37191406 41.84076172 48.37191406 41.84076172 46.7109375 41.55078125 C44.06197428 41.15761934 41.51293547 40.8622971 38.8515625 40.66796875 C26.66833593 39.69859302 26.66833593 39.69859302 23 35.5 C21.59844288 33.43270324 21 32.50311778 21 30 C23.52475462 28.73762269 25.31200466 28.90143596 28.125 28.9375 C29.73375 28.958125 31.3425 28.97875 33 29 C32.67 22.73 32.34 16.46 32 10 C17.15 9.505 17.15 9.505 2 9 C0 5 0 5 0 0 Z \",fill:\"#020F0C\",transform:\"translate(169,277)\"})),_path71||(_path71=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.99 0 1.98 0 3 C1.98 3 3.96 3 6 3 C6 3.33 6 3.66 6 4 C3.36 4.33 0.72 4.66 -2 5 C-1.505 6.98 -1.505 6.98 -1 9 C3.95 9 8.9 9 14 9 C14.33 6.69 14.66 4.38 15 2 C17.84428029 -1.03440598 21.81276783 -1.85609307 25.8359375 -2.34375 C31.4303058 -2.52372968 33.32005325 -2.50996006 38 1 C34.37 1.33 30.74 1.66 27 2 C27 3.32 27 4.64 27 6 C27.99 6.495 27.99 6.495 29 7 C29 7.33 29 7.66 29 8 C32.3 8 35.6 8 39 8 C39.33 7.34 39.66 6.68 40 6 C43.28519475 4.90493508 45.73663415 4.90039392 49.1875 4.9375 C50.81751953 4.95103516 50.81751953 4.95103516 52.48046875 4.96484375 C53.31191406 4.97644531 54.14335937 4.98804688 55 5 C55 5.33 55 5.66 55 6 C51.7 6 48.4 6 45 6 C45 7.32 45 8.64 45 10 C48.3 10.33 51.6 10.66 55 11 C55 12.65 55 14.3 55 16 C57.97 16.33 60.94 16.66 64 17 C64 17.99 64 18.98 64 20 C57.565 19.505 57.565 19.505 51 19 C51 18.34 51 17.68 51 17 C50.34 17 49.68 17 49 17 C48.690625 17.804375 48.38125 18.60875 48.0625 19.4375 C47 22 47 22 46 23 C44.00041636 23.04080783 41.99954746 23.04254356 40 23 C40.33 22.01 40.66 21.02 41 20 C41.99 19.505 41.99 19.505 43 19 C40.35409469 18.97265999 37.70848066 18.95299947 35.0625 18.9375 C34.32708984 18.92912109 33.59167969 18.92074219 32.83398438 18.91210938 C29.08045713 18.89571843 25.44356265 19.0229158 21.71875 19.5 C15.96448785 20.20558736 10.22642271 20.10786226 4.4375 20.0625 C3.33341797 20.05798828 2.22933594 20.05347656 1.09179688 20.04882812 C-1.605527 20.0371514 -4.30273347 20.02077525 -7 20 C-7 19.34 -7 18.68 -7 18 C-4.03 18 -1.06 18 2 18 C2 16.02 2 14.04 2 12 C1.16855469 11.93941406 0.33710937 11.87882812 -0.51953125 11.81640625 C-1.60621094 11.73261719 -2.69289063 11.64882813 -3.8125 11.5625 C-4.89144531 11.48128906 -5.97039062 11.40007812 -7.08203125 11.31640625 C-10 11 -10 11 -13 10 C-13 8.35 -13 6.7 -13 5 C-22.81973536 5.48335485 -32.56912921 6.22419889 -42.3449707 7.27124023 C-48.20935163 7.87735896 -54.04731033 8.2151301 -59.9375 8.4375 C-70.40823222 8.84588467 -80.66184973 10.34963264 -91 12 C-86.05 12.33 -81.1 12.66 -76 13 C-76 13.33 -76 13.66 -76 14 C-83.66022817 15.37696946 -91.24031631 16.38739339 -99 17 C-94.71 17.33 -90.42 17.66 -86 18 C-86 18.66 -86 19.32 -86 20 C-87.65 20.33 -89.3 20.66 -91 21 C-84.73 20.67 -78.46 20.34 -72 20 C-71.505 20.99 -71.505 20.99 -71 22 C-74.29609458 22.96758862 -77.38790247 23.16173156 -80.8125 23.3125 C-87.26140566 23.76024037 -93.08387778 25.25181 -99.28515625 27.01171875 C-107.60669947 29.22554676 -115.38717418 30 -124 30 C-124 22.74 -124 15.48 -124 8 C-121.71642578 7.76216797 -121.71642578 7.76216797 -119.38671875 7.51953125 C-105.22856542 6.02971784 -91.08629118 4.43532742 -76.94781494 2.76947021 C-22.54682435 -3.62822461 -22.54682435 -3.62822461 0 0 Z \",fill:\"#594134\",transform:\"translate(124,300)\"})),_path72||(_path72=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 2.97 0 5.94 0 9 C0.99 9 1.98 9 3 9 C2.505 8.01 2.505 8.01 2 7 C1.960008 5.00039988 1.95653201 2.99952758 2 1 C11.17416578 0.9481794 20.33055472 1.0804782 29.5 1.375 C30.73492187 1.4059375 31.96984375 1.436875 33.2421875 1.46875 C34.43070312 1.50742187 35.61921875 1.54609375 36.84375 1.5859375 C37.90787109 1.6173584 38.97199219 1.6487793 40.06835938 1.68115234 C43.09867471 2.01073194 45.31151362 2.56593966 48 4 C48.495 5.485 48.495 5.485 49 7 C49.66 7 50.32 7 51 7 C50.505 5.515 50.505 5.515 50 4 C51.32 4.33 52.64 4.66 54 5 C53.67 6.32 53.34 7.64 53 9 C51.02 9 49.04 9 47 9 C47 11.64 47 14.28 47 17 C52.28 17.33 57.56 17.66 63 18 C63 20.31 63 22.62 63 25 C70.92 25 78.84 25 87 25 C87 26.32 87 27.64 87 29 C75.12 29 63.24 29 51 29 C51 29.66 51 30.32 51 31 C62.55 31 74.1 31 86 31 C86 31.66 86 32.32 86 33 C83.03 33 80.06 33 77 33 C77 34.32 77 35.64 77 37 C75.35 37 73.7 37 72 37 C71.67 36.01 71.34 35.02 71 34 C70.34 33.67 69.68 33.34 69 33 C68.67 33.66 68.34 34.32 68 35 C68 34.34 68 33.68 68 33 C62.39 33 56.78 33 51 33 C50.67 33.99 50.34 34.98 50 36 C49.7525 35.0925 49.505 34.185 49.25 33.25 C47.96018658 29.89648511 46.68028958 28.32291764 44 26 C46.31 26 48.62 26 51 26 C51 25.34 51 24.68 51 24 C50.36191406 24.01160156 49.72382813 24.02320313 49.06640625 24.03515625 C48.24011719 24.04417969 47.41382813 24.05320312 46.5625 24.0625 C45.32693359 24.07990234 45.32693359 24.07990234 44.06640625 24.09765625 C42 24 42 24 41 23 C39.88625 23 38.7725 23 37.625 23 C34 23 34 23 31 22 C30.319375 22.45375 29.63875 22.9075 28.9375 23.375 C24.7730294 25.67874969 20.69085289 25.73585489 16 26 C16.99 25.34 17.98 24.68 19 24 C12.02431316 24.39741544 5.14509919 24.90372886 -1.75 26.0625 C-7.25620583 26.9745709 -12.42517916 27.16641256 -18 27 C-18 24.03 -18 21.06 -18 18 C-18.66 18 -19.32 18 -20 18 C-20 18.66 -20 19.32 -20 20 C-23.96 20 -27.92 20 -32 20 C-32 19.34 -32 18.68 -32 18 C-38.6 18 -45.2 18 -52 18 C-52 20.31 -52 22.62 -52 25 C-52.66 25.99 -53.32 26.98 -54 28 C-54.5775 27.05125 -55.155 26.1025 -55.75 25.125 C-57.82816551 22.23865902 -58.75468075 21.15904259 -62 20 C-62 18.68 -62 17.36 -62 16 C-56.06 15.505 -56.06 15.505 -50 15 C-50 14.34 -50 13.68 -50 13 C-53.63 13 -57.26 13 -61 13 C-61 12.01 -61 11.02 -61 10 C-48.91095423 8.70667186 -36.82839013 8.88691693 -24.6875 8.9375 C-22.57877711 8.94252579 -20.47005305 8.94708678 -18.36132812 8.95117188 C-13.24085629 8.96209027 -8.12044124 8.97929526 -3 9 C-3 6.36 -3 3.72 -3 1 C-1 0 -1 0 0 0 Z \",fill:\"#D9A17D\",transform:\"translate(221,259)\"})),_path73||(_path73=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 5.94 0 11.88 0 18 C-1.60875 18.433125 -3.2175 18.86625 -4.875 19.3125 C-8.54543342 20.30842652 -12.18480652 21.35917792 -15.8125 22.5 C-23.73548981 24.8930157 -31.87569741 26.39590552 -39.9921875 27.97265625 C-41.74487827 28.31466064 -43.49748179 28.65711248 -45.25 29 C-46.11810303 29.16918945 -46.98620605 29.33837891 -47.88061523 29.51269531 C-52.15704288 30.36428896 -56.2955161 31.30233409 -60.4375 32.6875 C-66.14116978 34.57165662 -72.03656328 34.72893469 -78 35 C-78 34.34 -78 33.68 -78 33 C-79.29585916 33.42492126 -80.5866044 33.86545882 -81.875 34.3125 C-82.59429688 34.55613281 -83.31359375 34.79976562 -84.0546875 35.05078125 C-86.33994905 35.96335547 -86.33994905 35.96335547 -88 39 C-90.90448512 39.63627666 -93.68645695 40.11916482 -96.625 40.5 C-102.13940611 41.23585979 -107.01716622 42.24705317 -112.18603516 44.32666016 C-114.71701851 45.26615573 -117.20083253 45.61500555 -119.875 45.9375 C-125.30227062 46.69216104 -130.59854426 47.72607398 -135.9375 48.9375 C-137.08690063 49.19817261 -137.08690063 49.19817261 -138.25952148 49.46411133 C-139.78256251 49.81076341 -141.30543355 50.15816325 -142.828125 50.50634766 C-151.05281379 52.37576321 -159.28973723 54.07559285 -167.59765625 55.52734375 C-169.74512141 55.94985316 -171.78506174 56.4822878 -173.875 57.125 C-176.77026831 57.93567513 -179.01835219 58.18070593 -182 58 C-181.01 57.34 -180.02 56.68 -179 56 C-179.99 54.68 -180.98 53.36 -182 52 C-178.78548731 50.39274365 -175.56387464 50.94251815 -172 51 C-172 50.34 -172 49.68 -172 49 C-167.2234188 48.45186773 -162.50071521 47.92637529 -157.6875 48 C-154.53468781 48 -152.05316292 47.62628983 -149 47 C-146.66698014 46.96175377 -144.33288492 46.95425716 -142 47 C-142 46.34 -142 45.68 -142 45 C-142.75023437 45.144375 -143.50046875 45.28875 -144.2734375 45.4375 C-150.93486552 46.64561793 -157.23371881 47.26945368 -164 47 C-160.96617736 44.97745157 -158.86252939 44.30243374 -155.36328125 43.4140625 C-154.23712402 43.1253125 -153.1109668 42.8365625 -151.95068359 42.5390625 C-150.75008301 42.23742187 -149.54948242 41.93578125 -148.3125 41.625 C-147.08096191 41.31046875 -145.84942383 40.9959375 -144.58056641 40.671875 C-138.35257353 39.08474927 -132.11670089 37.53211441 -125.875 36 C-112.24471027 32.6103057 -98.74006782 28.70736495 -85.2734375 24.72265625 C-82.62011477 23.93900503 -79.9664622 23.15648279 -77.3125 22.375 C-76.65699158 22.18183197 -76.00148315 21.98866394 -75.32611084 21.78964233 C-65.93961231 19.03350599 -56.53045872 16.5684419 -46.94848633 14.58349609 C-41.71971984 13.48583634 -36.98404365 11.9243206 -32 10 C-29.65928705 9.52704101 -27.37906367 9.24781913 -25 9 C-25 8.34 -25 7.68 -25 7 C-25.99 6.505 -25.99 6.505 -27 6 C-23.44039436 4.98949663 -19.87689478 3.99346596 -16.3125 3 C-15.30509766 2.71382812 -14.29769531 2.42765625 -13.25976562 2.1328125 C-12.28330078 1.86210937 -11.30683594 1.59140625 -10.30078125 1.3125 C-9.40528564 1.06113281 -8.50979004 0.80976563 -7.5871582 0.55078125 C-5 0 -5 0 0 0 Z \",fill:\"#313533\",transform:\"translate(626,177)\"})),_path74||(_path74=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.375 0.8125 3.375 0.8125 7 2 C8.66246041 2.35371498 10.32774271 2.69595322 12 3 C12.33 2.34 12.66 1.68 13 1 C18.51713396 1.50155763 18.51713396 1.50155763 20.9375 4 C24.35500227 7.3139416 28.36771959 6.96527063 32.9375 7.0625 C33.618125 7.041875 34.29875 7.02125 35 7 C35 7.99 35 8.98 35 10 C35.99 10 36.98 10 38 10 C39.02104551 10.97850195 40.0206121 11.97980427 41 13 C41.99 13.33 42.98 13.66 44 14 C44 14.66 44 15.32 44 16 C44.763125 16.103125 45.52625 16.20625 46.3125 16.3125 C49.28812061 17.07370527 49.9034959 17.9034959 52 20 C54.60611077 20.72197162 54.60611077 20.72197162 57 21 C57 22.65 57 24.3 57 26 C57.99 25.67 58.98 25.34 60 25 C60.73323796 22.98491642 60.73323796 22.98491642 61 21 C61.556875 21.144375 62.11375 21.28875 62.6875 21.4375 C63.450625 21.623125 64.21375 21.80875 65 22 C65.845625 22.2475 66.69125 22.495 67.5625 22.75 C70.06357966 23.29310388 70.06357966 23.29310388 71.8125 21.5625 C72.204375 21.046875 72.59625 20.53125 73 20 C72.505 19.01 72.505 19.01 72 18 C73.65 18 75.3 18 77 18 C77 17.34 77 16.68 77 16 C76.01 15.505 76.01 15.505 75 15 C79.24645065 15 81.38524772 16.81750806 85 19 C84.979375 19.969375 84.95875 20.93875 84.9375 21.9375 C84.64381501 24.87465895 84.64381501 24.87465895 86 26 C86.33 24.35 86.66 22.7 87 21 C87.66 21 88.32 21 89 21 C89 22.65 89 24.3 89 26 C89.62648438 26.19335938 90.25296875 26.38671875 90.8984375 26.5859375 C91.71570313 26.84632813 92.53296875 27.10671875 93.375 27.375 C94.18710938 27.63023437 94.99921875 27.88546875 95.8359375 28.1484375 C98 29 98 29 100 31 C102.19704511 31.67651207 102.19704511 31.67651207 104.625 32.125 C105.44226563 32.29257813 106.25953125 32.46015625 107.1015625 32.6328125 C108.04128906 32.81457031 108.04128906 32.81457031 109 33 C107.98679687 32.32453125 106.97359375 31.6490625 105.9296875 30.953125 C97.8671875 25.578125 97.8671875 25.578125 95.90136719 24.25976562 C94.66677762 23.4417787 93.42297278 22.63747303 92.16894531 21.84960938 C90.74715689 20.94855828 89.36828616 19.98039195 88 19 C88 18.34 88 17.68 88 17 C93.00863065 18.66294456 97.05308532 21.55451469 101.375 24.5 C102.97773282 25.58222641 104.58059971 26.66425429 106.18359375 27.74609375 C106.98651855 28.28991699 107.78944336 28.83374023 108.61669922 29.39404297 C110.87205963 30.91378901 113.13778353 32.41600042 115.41015625 33.91015625 C116.43133545 34.58304688 116.43133545 34.58304688 117.47314453 35.26953125 C118.75256459 36.11166506 120.03342086 36.95162223 121.31591797 37.7890625 C124.1378738 39.65507981 126.74075039 41.46542965 129 44 C126.525 44.495 126.525 44.495 124 45 C124 45.66 124 46.32 124 47 C124.72453369 47.27328125 125.44906738 47.5465625 126.19555664 47.828125 C128.90918108 48.96205007 131.33808469 50.26037744 133.87109375 51.75 C134.77537109 52.2759375 135.67964844 52.801875 136.61132812 53.34375 C138.49253584 54.44621312 140.37274881 55.55037543 142.25195312 56.65625 C146.7466712 59.26670548 150.93604641 61.64735797 156 63 C156 63.66 156 64.32 156 65 C160.29 65 164.58 65 169 65 C169 65.33 169 65.66 169 66 C162.565 66.495 162.565 66.495 156 67 C155.67 68.32 155.34 69.64 155 71 C148.84765625 70.4140625 148.84765625 70.4140625 147 70 C146.67 69.34 146.34 68.68 146 68 C143.93684183 67.06943757 143.93684183 67.06943757 141.375 66.25 C136.80084441 64.65642321 132.30214678 62.94371163 127.8125 61.125 C122.55114265 58.995419 117.26219156 56.96552475 111.9375 55 C102.11083014 51.35854827 92.54038649 47.15934433 82.9765625 42.87890625 C79.99769046 41.554309 76.99975948 40.2764934 74 39 C74 38.01 74 37.02 74 36 C73.40356689 35.91363281 72.80713379 35.82726562 72.19262695 35.73828125 C65.216991 34.558195 59.47974286 32.16846527 53.1875 29 C51.17862149 28.01254043 49.16950088 27.02557324 47.16015625 26.0390625 C46.1458252 25.53665039 45.13149414 25.03423828 44.08642578 24.51660156 C38.22118701 21.63455258 32.29969957 18.86990892 26.38745117 16.0859375 C25.14765503 15.498125 25.14765503 15.498125 23.8828125 14.8984375 C23.15465332 14.55474121 22.42649414 14.21104492 21.67626953 13.85693359 C20 13 20 13 19 12 C18.67 16.29 18.34 20.58 18 25 C16.68 24.67 15.36 24.34 14 24 C14 19.05 14 14.1 14 9 C12.02 8.34 10.04 7.68 8 7 C6.32836805 6.34588315 4.65984798 5.68346682 3 5 C3 4.34 3 3.68 3 3 C0.03 2.505 0.03 2.505 -3 2 C-2.01 1.34 -1.02 0.68 0 0 Z \",fill:\"#422B23\",transform:\"translate(101,179)\"})),_path75||(_path75=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.30126 1.76708667 10.42082713 3.49482525 15.58203125 5.55859375 C17.35223633 6.26145508 17.35223633 6.26145508 19.15820312 6.97851562 C21.58294839 7.94659939 24.00743027 8.91534314 26.43164062 9.88476562 C33.05049988 12.51141146 39.67490052 14.9691672 46.45874023 17.13745117 C48.79826222 17.9315266 51.00886606 18.83932017 53.25 19.875 C57.67366985 21.91129247 62.19753254 23.5970943 66.76464844 25.28320312 C74.21435524 28.0499443 81.60616575 30.96317977 89 33.875 C89.64216461 34.12782745 90.28432922 34.38065491 90.94595337 34.6411438 C94.63129352 36.09243025 98.31593575 37.545478 102 39 C102 39.33 102 39.66 102 40 C100.82630859 40.18175781 100.82630859 40.18175781 99.62890625 40.3671875 C98.11103516 40.61855469 98.11103516 40.61855469 96.5625 40.875 C95.55316406 41.03742188 94.54382813 41.19984375 93.50390625 41.3671875 C92.67761719 41.57601562 91.85132812 41.78484375 91 42 C90.505 42.99 90.505 42.99 90 44 C86.82212459 45.0592918 84.57411057 45.11458939 81.23828125 45.09765625 C80.12001953 45.09443359 79.00175781 45.09121094 77.84960938 45.08789062 C76.68236328 45.07951172 75.51511719 45.07113281 74.3125 45.0625 C73.13365234 45.05798828 71.95480469 45.05347656 70.74023438 45.04882812 C67.82677211 45.03703273 64.91341137 45.0205727 62 45 C62 45.99 62 46.98 62 48 C60.68 47.34 59.36 46.68 58 46 C58 45.34 58 44.68 58 44 C56.68 44 55.36 44 54 44 C54 43.34 54 42.68 54 42 C52.7625 42.185625 51.525 42.37125 50.25 42.5625 C47.23720423 42.94711223 44.89989173 43.0874594 42 42 C42 41.34 42 40.68 42 40 C40.82244141 40.01740234 40.82244141 40.01740234 39.62109375 40.03515625 C27.75503392 40.13707333 27.75503392 40.13707333 23 39 C21 36 21 36 21 33 C17.7 32.67 14.4 32.34 11 32 C11 31.67 11 31.34 11 31 C12.65 31 14.3 31 16 31 C16 30.34 16 29.68 16 29 C14.845 29.185625 13.69 29.37125 12.5 29.5625 C7.93770374 30.29572618 5.01677653 29.62709707 0 29 C0 19.43 0 9.86 0 0 Z \",fill:\"#251716\",transform:\"translate(0,160)\"})),_path76||(_path76=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.495 0.99 0.495 0.99 1 2 C5.95 2 10.9 2 16 2 C16 2.66 16 3.32 16 4 C16.66 4 17.32 4 18 4 C18 4.66 18 5.32 18 6 C17.34 6 16.68 6 16 6 C14.40110663 11.29633429 13.86803038 15.23676204 14.5 20.6875 C14.5928125 21.49574219 14.685625 22.30398438 14.78125 23.13671875 C14.88953125 24.05904297 14.88953125 24.05904297 15 25 C16.32 24.67 17.64 24.34 19 24 C18.34 33.24 17.68 42.48 17 52 C14.03 51.505 14.03 51.505 11 51 C11.33 51.66 11.66 52.32 12 53 C18.41761437 54.98362626 25.33342779 55.46100054 32 56 C32 57.32 32 58.64 32 60 C31.01 60.33 30.02 60.66 29 61 C28.67 61.99 28.34 62.98 28 64 C18.1 64 8.2 64 -2 64 C-2 63.34 -2 62.68 -2 62 C-1.34 62 -0.68 62 0 62 C0 61.34 0 60.68 0 60 C0.66 60 1.32 60 2 60 C2 58.02 2 56.04 2 54 C1.34 54 0.68 54 0 54 C-0.66 52.35 -1.32 50.7 -2 49 C-4.92990195 49.53270945 -7.70348746 50.20981205 -10.5625 51.0625 C-14 52 -14 52 -18 52 C-18 52.66 -18 53.32 -18 54 C-21.61973402 55.31626692 -24.09567131 56 -28 56 C-28 62.6 -28 69.2 -28 76 C-29.32 76 -30.64 76 -32 76 C-32 68.74 -32 61.48 -32 54 C-27.71 53.01 -23.42 52.02 -19 51 C-19 48.69 -19 46.38 -19 44 C-20.32 43.67 -21.64 43.34 -23 43 C-22.01 43 -21.02 43 -20 43 C-20.03480469 41.66195312 -20.03480469 41.66195312 -20.0703125 40.296875 C-20.09738281 38.54117188 -20.09738281 38.54117188 -20.125 36.75 C-20.14820313 35.58984375 -20.17140625 34.4296875 -20.1953125 33.234375 C-20.0033915 30.05616321 -19.50669986 28.70319681 -18 26 C-17.57336714 24.26186612 -17.19923141 22.51011335 -16.875 20.75 C-16.70742188 19.85796875 -16.53984375 18.9659375 -16.3671875 18.046875 C-16.24601562 17.37140625 -16.12484375 16.6959375 -16 16 C-16.99 15.67 -17.98 15.34 -19 15 C-18.4225 14.979375 -17.845 14.95875 -17.25 14.9375 C-14.2422794 13.68428308 -13.53476696 11.7178339 -12.07421875 8.91796875 C-9.10357126 3.61401268 -6.35517725 0 0 0 Z \",fill:\"#0D1711\",transform:\"translate(32,326)\"})),_path77||(_path77=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.63678015 -0.39876548 11.26522227 -0.68712021 16.9128418 -0.87890625 C18.82770772 -0.95887371 20.74161134 -1.06771692 22.65307617 -1.20703125 C38.05830216 -2.30079827 38.05830216 -2.30079827 42.90136719 1.48712158 C46.31589352 5.27021619 48.71948415 9.55849094 51.01046753 14.08703613 C52.22408511 16.43320127 53.67193107 18.52753188 55.2421875 20.6484375 C55.90033447 21.58212158 55.90033447 21.58212158 56.57177734 22.53466797 C57.00184082 23.14197754 57.4319043 23.74928711 57.875 24.375 C58.36564941 25.06867676 58.85629883 25.76235352 59.36181641 26.47705078 C68.18808082 38.9309294 77.16542692 51.2731947 86.24365234 63.54443359 C87.83277969 65.69360582 89.41650761 67.84667481 91 70 C91.50015625 70.67111816 92.0003125 71.34223633 92.515625 72.03369141 C96 76.77454573 96 76.77454573 96 79 C91.71 79 87.42 79 83 79 C82.360625 77.576875 81.72125 76.15375 81.0625 74.6875 C77.52188586 67.5759236 72.52667461 61.45575428 66.86328125 55.90625 C64.06367362 53.04208119 61 49.12339103 61 45 C60.34 45 59.68 45 59 45 C59 44.01 59 43.02 59 42 C58.01 41.67 57.02 41.34 56 41 C54.38671875 39.1796875 54.38671875 39.1796875 52.6875 36.875 C49.98490054 33.27153405 47.18281435 29.84942551 44.1640625 26.5078125 C43 25 43 25 42 22 C40.68 21.67 39.36 21.34 38 21 C38 25.95 38 30.9 38 36 C39.32 36.66 40.64 37.32 42 38 C42.99 38.495 42.99 38.495 44 39 C44.103125 39.598125 44.20625 40.19625 44.3125 40.8125 C45.29692268 43.94475397 47.45240402 45.04031078 50 47 C50 47.66 50 48.32 50 49 C50.66 49 51.32 49 52 49 C52 49.66 52 50.32 52 51 C52.99 51.495 52.99 51.495 54 52 C53.773125 52.70125 53.54625 53.4025 53.3125 54.125 C52.89709361 57.94673879 54.02535985 59.75594832 56 63 C57.56102491 64.81554159 57.56102491 64.81554159 59 66 C58.67 66.66 58.34 67.32 58 68 C51.92650124 61.49511255 46.03975991 54.92524161 40.453125 47.9921875 C34.29985205 40.48676222 27.83908905 33.23124204 21.4375 25.9375 C18.25691442 22.30368097 15.09265955 18.6559021 11.9375 15 C11.44241943 14.43015381 10.94733887 13.86030762 10.43725586 13.27319336 C6.75422644 8.99413729 3.34004167 4.55090836 0 0 Z \",fill:\"#1C0E0F\",transform:\"translate(66,0)\"})),_path78||(_path78=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.63001953 0.01353516 1.63001953 0.01353516 3.29296875 0.02734375 C4.12441406 0.03894531 4.95585937 0.05054688 5.8125 0.0625 C5.8125 0.7225 5.8125 1.3825 5.8125 2.0625 C2.1825 2.3925 -1.4475 2.7225 -5.1875 3.0625 C3.98460724 5.29959933 13.15769863 7.07646176 22.47119141 8.61621094 C23.39206543 8.77508789 24.31293945 8.93396484 25.26171875 9.09765625 C26.09018311 9.2356665 26.91864746 9.37367676 27.7722168 9.51586914 C29.8125 10.0625 29.8125 10.0625 31.8125 12.0625 C32.37770003 14.71787372 32.55038198 17.35394713 32.8125 20.0625 C33.8025 20.0625 34.7925 20.0625 35.8125 20.0625 C36.3075 25.0125 36.3075 25.0125 36.8125 30.0625 C43.0988532 32.29314146 49.24645316 33.89733511 55.8125 35.0625 C55.8125 34.4025 55.8125 33.7425 55.8125 33.0625 C59.4425 33.0625 63.0725 33.0625 66.8125 33.0625 C65.8225 28.1125 65.8225 28.1125 64.8125 23.0625 C71.46283252 22.53747375 71.46283252 22.53747375 74.8125 23.0625 C78.8125 27.44345238 78.8125 27.44345238 78.8125 31.0625 C80.1325 31.0625 81.4525 31.0625 82.8125 31.0625 C83.3075 29.5775 83.3075 29.5775 83.8125 28.0625 C84.1425 28.3925 84.4725 28.7225 84.8125 29.0625 C85.1425 28.4025 85.4725 27.7425 85.8125 27.0625 C92.9195072 25.48316507 100.5794813 25.9506492 107.8125 26.0625 C107.8125 25.4025 107.8125 24.7425 107.8125 24.0625 C125.53977273 20.75340909 125.53977273 20.75340909 133.8125 24.0625 C133.8125 24.7225 133.8125 25.3825 133.8125 26.0625 C137.4425 26.7225 141.0725 27.3825 144.8125 28.0625 C144.8125 28.3925 144.8125 28.7225 144.8125 29.0625 C143.18054688 29.22685547 143.18054688 29.22685547 141.515625 29.39453125 C133.61864842 30.23162518 126.00624922 31.26193771 118.328125 33.37890625 C111.7203177 35.17450606 105.31245621 35.37235264 98.49804688 35.58007812 C97.66982422 35.61423828 96.84160156 35.64839844 95.98828125 35.68359375 C95.23458252 35.7086499 94.48088379 35.73370605 93.7043457 35.75952148 C91.57282413 35.91124814 91.57282413 35.91124814 89.8125 38.0625 C87.82428687 38.46014263 85.82305661 38.80025349 83.8125 39.0625 C83.8125 39.3925 83.8125 39.7225 83.8125 40.0625 C77.69273503 40.13697293 71.57323722 40.19125469 65.453125 40.22729492 C63.37365113 40.24232843 61.29420869 40.26276074 59.21484375 40.28881836 C56.21606666 40.32544136 53.21771089 40.34228111 50.21875 40.35546875 C48.83701599 40.37869453 48.83701599 40.37869453 47.42736816 40.40238953 C42.29630807 40.40371027 38.37371292 39.798726 33.65240479 37.79151917 C30.82461041 36.67107189 27.98165493 36.32063959 24.9765625 35.9296875 C23.74808594 35.76339844 22.51960938 35.59710938 21.25390625 35.42578125 C19.99449219 35.26464844 18.73507812 35.10351562 17.4375 34.9375 C14.90846155 34.60453112 12.3797922 34.26874259 9.8515625 33.9296875 C8.73990723 33.78644043 7.62825195 33.64319336 6.48291016 33.49560547 C3.8125 33.0625 3.8125 33.0625 1.8125 32.0625 C1.27405697 29.9353542 0.83247002 27.78339497 0.4375 25.625 C-1.29964018 17.05278064 -3.3485745 9.73555771 -9.1875 3.0625 C-9.1875 2.4025 -9.1875 1.7425 -9.1875 1.0625 C-5.90230525 -0.03256492 -3.45086585 -0.03710608 0 0 Z \",fill:\"#030809\",transform:\"translate(476.1875,372.9375)\"})),_path79||(_path79=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.39010758 4.63348015 14.16350843 9.98381147 20.97998047 15.40234375 C24.63431909 18.29260142 28.31899855 21.14383573 32 24 C50.80195955 38.61011215 50.80195955 38.61011215 58.63671875 44.92578125 C66.3609508 51.15137245 74.19110411 57.1963718 82.1484375 63.12109375 C86.25216487 66.17895338 90.30701499 69.29755952 94.35473633 72.42895508 C97.81091115 75.09844529 101.30254945 77.71428627 104.8125 80.3125 C106.30080679 81.43921816 107.78896847 82.56613667 109.27392578 83.69726562 C110.5364752 84.65016007 111.80681246 85.59276018 113.08154297 86.52929688 C115.32359246 88.18293741 117.53749204 89.86960543 119.75 91.5625 C120.82471558 92.33944214 120.82471558 92.33944214 121.92114258 93.13208008 C126.77824119 96.91759427 126.77824119 96.91759427 127.44726562 100.18310547 C127.453125 102.40234375 127.453125 102.40234375 127 106 C120.903382 103.00213583 116.12050098 99.48999564 111.15234375 94.87109375 C108.29427097 92.38648964 105.36418974 90.71788412 102 89 C102.10613836 91.45224694 102.10613836 91.45224694 103 94 C105.26225382 95.07254351 105.26225382 95.07254351 108 96 C110.19865499 97.52770394 112.02725759 99.16489078 114 101 C114 101.66 114 102.32 114 103 C115.98 103.99 115.98 103.99 118 105 C118 105.66 118 106.32 118 107 C114.21119031 106.42437585 112.32700195 104.7699377 109.5625 102.1875 C108.77617188 101.46820312 107.98984375 100.74890625 107.1796875 100.0078125 C106.46039062 99.34523438 105.74109375 98.68265625 105 98 C100.98250552 94.49829554 100.98250552 94.49829554 96 93 C96 93.99 96 94.98 96 96 C96.556875 96.2475 97.11375 96.495 97.6875 96.75 C100.42410913 98.22924818 102.67650869 99.93467439 105 102 C105 102.66 105 103.32 105 104 C106.485 104.495 106.485 104.495 108 105 C108 105.66 108 106.32 108 107 C103.89889238 105.59601721 101.01910841 103.62912962 97.6875 100.875 C96.80449219 100.15054688 95.92148437 99.42609375 95.01171875 98.6796875 C94.34785156 98.12539063 93.68398438 97.57109375 93 97 C93.63808594 97.75925781 94.27617188 98.51851562 94.93359375 99.30078125 C95.75988281 100.29464844 96.58617187 101.28851562 97.4375 102.3125 C98.26121094 103.29863281 99.08492187 104.28476562 99.93359375 105.30078125 C102 108 102 108 103 111 C96.22514217 110.03216317 92.71545326 106.71545326 88 102 C87.071875 101.443125 86.14375 100.88625 85.1875 100.3125 C84.465625 99.879375 83.74375 99.44625 83 99 C83 98.34 83 97.68 83 97 C82.34 97 81.68 97 81 97 C81 96.34 81 95.68 81 95 C80.34 95 79.68 95 79 95 C79 94.34 79 93.68 79 93 C78.4225 92.773125 77.845 92.54625 77.25 92.3125 C74.4336339 90.66961977 72.91922886 88.60466773 71 86 C71.66 85.67 72.32 85.34 73 85 C66.93985843 79.54394168 66.93985843 79.54394168 60.6875 74.3125 C58 72 58 72 56.125 69.625 C53.63839058 66.55330601 50.83248374 64.17350531 47.8046875 61.6484375 C46 60 46 60 44 57 C42.700625 56.38125 42.700625 56.38125 41.375 55.75 C34.97996764 52.4340573 29.99845049 47.12036391 25 42 C23.85917969 40.89205078 23.85917969 40.89205078 22.6953125 39.76171875 C21.45394531 38.54935547 21.45394531 38.54935547 20.1875 37.3125 C19.00220703 36.16201172 19.00220703 36.16201172 17.79296875 34.98828125 C16 33 16 33 16 31 C18.94956528 32.36944102 21.52468811 33.87830409 24 36 C24 36.66 24 37.32 24 38 C24.54785156 38.23847656 25.09570312 38.47695313 25.66015625 38.72265625 C28.57231611 40.312433 30.9036209 42.29723319 33.4375 44.4375 C36.12738104 46.70837315 38.6655874 48.80177572 41.6953125 50.59765625 C44 52 44 52 46.4375 55 C50.45258872 59.92239449 55.56873162 63.49839879 60.578125 67.33984375 C63.98342162 69.95722261 67.19910273 72.74306113 70.3515625 75.66015625 C72.13187799 77.10718993 73.91808181 78.04995437 76 79 C76 78.34 76 77.68 76 77 C75.34 77 74.68 77 74 77 C72.31267723 75.01739574 70.64633943 73.0167658 69 71 C68.34 70.67 67.68 70.34 67 70 C67 69.34 67 68.68 67 68 C66.360625 67.731875 65.72125 67.46375 65.0625 67.1875 C63 66 63 66 62 63 C64.95409701 64.37154504 67.44008376 65.98863724 70 68 C70.33 67.67 70.66 67.34 71 67 C68.93821926 65.24914666 66.87560123 63.49929619 64.8125 61.75 C64.23435547 61.25886719 63.65621094 60.76773438 63.06054688 60.26171875 C62.20493164 59.53662109 62.20493164 59.53662109 61.33203125 58.796875 C60.77080566 58.32056641 60.20958008 57.84425781 59.63134766 57.35351562 C58.14345007 56.11901933 56.61074262 54.9390451 55.07421875 53.765625 C54.04748047 52.89164062 54.04748047 52.89164062 53 52 C53 51.34 53 50.68 53 50 C52.43667969 49.74089844 51.87335937 49.48179687 51.29296875 49.21484375 C48.75539889 47.87040725 46.58886526 46.31210305 44.3125 44.5625 C43.52488281 43.96566406 42.73726562 43.36882812 41.92578125 42.75390625 C40 41 40 41 39 38 C43.89885858 39.54897243 47.29299917 42.40664154 51.1875 45.625 C51.84588867 46.16044434 52.50427734 46.69588867 53.18261719 47.24755859 C54.50630872 48.32414812 55.82812033 49.40305359 57.14794922 50.484375 C59.66900981 52.5474839 62.2076921 54.58815832 64.75 56.625 C65.50796875 57.23601562 66.2659375 57.84703125 67.046875 58.4765625 C68.64450986 59.72271769 70.31412978 60.87608652 72 62 C72 62.66 72 63.32 72 64 C74.93720508 65.52299523 77.9168649 66.80100302 81 68 C77.33215797 64.095523 73.36170774 60.87350652 69.0859375 57.6484375 C67 56 67 56 65.5390625 54.4765625 C63.99081584 52.87674663 63.99081584 52.87674663 61.734375 51.671875 C58.24121822 49.53605914 55.31721591 46.94859833 52.25 44.25 C46.95381754 39.65523527 41.5901811 35.23473056 36 31 C34.69740666 30.00196737 33.3953793 29.00319585 32.09375 28.00390625 C30.6250604 26.87752541 29.15630863 25.75122562 27.6875 24.625 C26.95354004 24.06184082 26.21958008 23.49868164 25.46337891 22.91845703 C22.10099314 20.34511906 18.73104754 17.78850243 15.3046875 15.30078125 C14.75208252 14.89714355 14.19947754 14.49350586 13.63012695 14.07763672 C12.16575403 13.01259676 10.69445449 11.95709875 9.22265625 10.90234375 C6.99834378 8.99858247 6.17096097 7.62340294 5 5 C3.67479497 4.31731862 2.34187818 3.6492959 1 3 C0.67 2.01 0.34 1.02 0 0 Z \",fill:\"#623F2F\",transform:\"translate(499,451)\"})),_path80||(_path80=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.28190186 0.58265625 0.56380371 1.1653125 0.85424805 1.765625 C4.24447879 8.66956497 7.95139292 15.34961228 11.8125 22 C12.39064453 23.01578125 12.96878906 24.0315625 13.56445312 25.078125 C19.23015972 34.84442587 25.41141588 45.06355437 36 50 C38.76783806 50.68620278 41.12934121 50.89561241 44 51 C44 51.33 44 51.66 44 52 C40.37 52 36.74 52 33 52 C33 52.66 33 53.32 33 54 C34.485 54.495 34.485 54.495 36 55 C34.80375 54.979375 33.6075 54.95875 32.375 54.9375 C28.81995131 54.93117429 25.49444376 55.30111125 22 56 C23.64138086 59.55544878 23.64138086 59.55544878 26.71875 61.65625 C29.58840588 62.0886639 32.34878246 62.09403497 35.25 62.0625 C36.32765625 62.05347656 37.4053125 62.04445313 38.515625 62.03515625 C39.33546875 62.02355469 40.1553125 62.01195312 41 62 C41.495 61.01 41.495 61.01 42 60 C43 61 43 61 43.0625 63.5625 C43.041875 64.366875 43.02125 65.17125 43 66 C41.02 66 39.04 66 37 66 C37 66.66 37 67.32 37 68 C37.66 68.33 38.32 68.66 39 69 C31.66250018 68.32060187 24.21754971 67.14503314 18 63 C17.234375 61.125 17.234375 61.125 16.75 59 C16.57984375 58.29875 16.4096875 57.5975 16.234375 56.875 C16 55 16 55 17 53 C16.01 53 15.02 53 14 53 C13.01 50.03 12.02 47.06 11 44 C10.01604248 43.83395264 9.03208496 43.66790527 8.01831055 43.49682617 C4.36528476 42.87709601 0.71514918 42.24159714 -2.93432617 41.60131836 C-4.51366088 41.32650342 -6.09374511 41.05596013 -7.67456055 40.78979492 C-9.94791274 40.40626048 -12.21811863 40.00739872 -14.48828125 39.60546875 C-15.54780754 39.43183052 -15.54780754 39.43183052 -16.6287384 39.25468445 C-20.69774926 38.51600649 -21.95887352 38.04112648 -25 35 C-21.04 35 -17.08 35 -13 35 C-13 34.34 -13 33.68 -13 33 C-14.89611434 33.14213297 -16.79188394 33.28886907 -18.6875 33.4375 C-19.74324219 33.51871094 -20.79898438 33.59992188 -21.88671875 33.68359375 C-24.88213807 33.92287906 -24.88213807 33.92287906 -27.29492188 34.52734375 C-30.413142 35.07218799 -33.23233563 35.01378663 -36.39453125 34.87890625 C-38.19760742 34.80639648 -38.19760742 34.80639648 -40.03710938 34.73242188 C-41.28298828 34.67634766 -42.52886719 34.62027344 -43.8125 34.5625 C-45.07771484 34.51029297 -46.34292969 34.45808594 -47.64648438 34.40429688 C-50.76458806 34.27486616 -53.88235178 34.13990871 -57 34 C-57 33.67 -57 33.34 -57 33 C-44.625 32.505 -44.625 32.505 -32 32 C-32 28.7 -32 25.4 -32 22 C-27.05 20.35 -22.1 18.7 -17 17 C-19.3203125 17.4640625 -19.3203125 17.4640625 -21.6875 17.9375 C-25.125 18.625 -28.5625 19.3125 -32 20 C-32.495 17.525 -32.495 17.525 -33 15 C-28.05 14.34 -23.1 13.68 -18 13 C-22.95 13 -27.9 13 -33 13 C-30.30415334 10.30415334 -27.25823249 9.76790299 -23.6875 8.75 C-16.94495872 6.75354102 -10.79323539 4.24803282 -4.4765625 1.13671875 C-2 0 -2 0 0 0 Z \",fill:\"#020305\",transform:\"translate(495,340)\"})),_path81||(_path81=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.58694802 -0.24856408 12.55597352 0.68452977 19 2 C19.96550781 2.19078125 20.93101562 2.3815625 21.92578125 2.578125 C24.28528478 3.04535342 26.64318339 3.51943436 29 4 C29 4.33 29 4.66 29 5 C24.05 4.67 19.1 4.34 14 4 C15.81115956 5.81115956 18.61278227 5.38199448 21.0625 5.5625 C22.16722656 5.64628906 23.27195312 5.73007812 24.41015625 5.81640625 C25.26480469 5.87699219 26.11945312 5.93757813 27 6 C23.375 9 23.375 9 20 9 C23.71784836 10.20201112 27.18138604 10.02981191 31.0625 9.9375 C37.57507433 9.84183236 43.6575792 10.52317853 50 12 C50 11.34 50 10.68 50 10 C48.906875 10.04125 47.81375 10.0825 46.6875 10.125 C43 10 43 10 40 8 C38.34450469 7.61500109 36.6777567 7.27206865 35 7 C35 6.67 35 6.34 35 6 C41.50967563 5.77051672 47.4293818 6.65309034 53.8125 7.875 C62.21018074 9.41842716 70.55679529 10.62849986 79.05981445 11.40380859 C82.49934148 11.71881573 85.6360097 12.15900243 89 13 C89 34.45 89 55.9 89 78 C84.04423274 77.17403879 81.13614533 76.34584284 76.75 74.25 C75.62722656 73.71632813 74.50445313 73.18265625 73.34765625 72.6328125 C68.88158828 70.45449697 64.42631067 68.25811786 60 66 C64.17587745 64.60804085 66.13474776 66.17676781 70 68 C70.02913821 64.4375173 70.04684529 60.87506546 70.0625 57.3125 C70.07506836 55.80139648 70.07506836 55.80139648 70.08789062 54.25976562 C70.09272461 52.79506836 70.09272461 52.79506836 70.09765625 51.30078125 C70.10551147 49.95753784 70.10551147 49.95753784 70.11352539 48.5871582 C69.99840198 45.96358241 69.58234285 43.55706947 69 41 C67.87972412 40.82609741 67.87972412 40.82609741 66.73681641 40.64868164 C63.3656636 40.12339923 59.99533308 39.59301539 56.625 39.0625 C54.8615625 38.78889648 54.8615625 38.78889648 53.0625 38.50976562 C51.94101562 38.33251953 50.81953125 38.15527344 49.6640625 37.97265625 C48.62717285 37.81031494 47.5902832 37.64797363 46.52197266 37.48071289 C44 37 44 37 42 36 C40.89453125 34.22265625 40.89453125 34.22265625 39.8125 32.0625 C39.44769531 31.35222656 39.08289063 30.64195312 38.70703125 29.91015625 C38.35705078 28.96462891 38.35705078 28.96462891 38 28 C38.33 27.34 38.66 26.68 39 26 C39.495 27.485 39.495 27.485 40 29 C40.99 29 41.98 29 43 29 C43.495 29.99 43.495 29.99 44 31 C47.29621444 33.10462518 50.53998433 33.49939189 54.375 34 C58.81452178 34.58223237 62.7864457 35.47242745 67 37 C65.41309324 29.98148554 63.59614424 23.67312853 59 18 C56.1883282 16.5941641 53.70583664 16.80592495 50.5625 16.6875 C42.77771997 16.28198321 35.40612232 14.74963673 27.81640625 13.046875 C22.38912392 11.83518217 16.92252214 10.90358603 11.43017578 10.03955078 C7.9673561 9.4673736 5.02915981 8.81284756 2 7 C3.32 6.67 4.64 6.34 6 6 C5.34 5.34 4.68 4.68 4 4 C4.66 3.67 5.32 3.34 6 3 C4.02 2.34 2.04 1.68 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#875F4C\",transform:\"translate(537,309)\"})),_path82||(_path82=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.93 0.495 6.93 0.495 14 1 C14.495 2.98 14.495 2.98 15 5 C15.78375 4.938125 16.5675 4.87625 17.375 4.8125 C18.674375 4.9053125 18.674375 4.9053125 20 5 C22.29633824 8.44450737 22.54016485 10.93812283 23 15 C21.35 15.99 19.7 16.98 18 18 C18.33 18 18.66 18 19 18 C20.32 18 21.64 18 23 18 C23 18.66 23 19.32 23 20 C27.62 20 32.24 20 37 20 C37.495 20.99 37.495 20.99 38 22 C36.73542969 21.95359375 35.47085938 21.9071875 34.16796875 21.859375 C32.50783609 21.82185788 30.84767792 21.78545765 29.1875 21.75 C28.35412109 21.71648437 27.52074219 21.68296875 26.66210938 21.6484375 C25.45844727 21.62910156 25.45844727 21.62910156 24.23046875 21.609375 C23.12288208 21.5779541 23.12288208 21.5779541 21.99291992 21.54589844 C19.39189213 21.91260255 19.39189213 21.91260255 17 26 C23.27 25.67 29.54 25.34 36 25 C34.69442995 30.22228021 33.6208069 33.92181004 29 37 C22.78999195 38.33051402 16.31776023 38.10008333 10 38 C10 38.66 10 39.32 10 40 C9.34 40 8.68 40 8 40 C8 41.65 8 43.3 8 45 C8.99 45.495 8.99 45.495 10 46 C8.68 46 7.36 46 6 46 C6 48.31 6 50.62 6 53 C7.32 53 8.64 53 10 53 C10 53.66 10 54.32 10 55 C9.443125 55.061875 8.88625 55.12375 8.3125 55.1875 C5.05012827 56.33373872 3.31332126 58.49390197 1 61 C3.31 61.99 5.62 62.98 8 64 C8 64.66 8 65.32 8 66 C7.2575 66.28875 6.515 66.5775 5.75 66.875 C3.43260203 67.82302644 1.22082885 68.84845911 -1 70 C-0.67 70.99 -0.34 71.98 0 73 C-0.99 73.495 -0.99 73.495 -2 74 C-2.65555119 76.52733235 -2.65555119 76.52733235 -3 79 C-2.01 79.33 -1.02 79.66 0 80 C-1.58671308 82.38006962 -2.87846958 84.14366088 -5 86 C-5.66 86 -6.32 86 -7 86 C-7 85.01 -7 84.02 -7 83 C-7.99 83 -8.98 83 -10 83 C-10.66 80.03 -11.32 77.06 -12 74 C-6.5 70 -6.5 70 -2 70 C-1.505 68.02 -1.505 68.02 -1 66 C-0.01 66 0.98 66 2 66 C2 65.34 2 64.68 2 64 C0.68 64 -0.64 64 -2 64 C-1.36757331 59.27497299 -0.08186437 55.09429803 1.5625 50.625 C1.91344727 49.66400391 1.91344727 49.66400391 2.27148438 48.68359375 C2.84299619 47.1206839 3.42084229 45.56009273 4 44 C-10.08465428 45.4375209 -10.08465428 45.4375209 -24 48 C-15.27457699 48.12852505 -6.68991301 47.79645684 2 47 C2 47.66 2 48.32 2 49 C-7.70953473 50.28846906 -17.18003888 51.34057669 -27 51 C-27 50.34 -27 49.68 -27 49 C-29.31 49 -31.62 49 -34 49 C-34 47.68 -34 46.36 -34 45 C-33.01 45 -32.02 45 -31 45 C-31 44.34 -31 43.68 -31 43 C-31.66 43 -32.32 43 -33 43 C-32.67 41.35 -32.34 39.7 -32 38 C-31.34 38 -30.68 38 -30 38 C-29.67 39.65 -29.34 41.3 -29 43 C-21.08 42.01 -21.08 42.01 -13 41 C-13 40.34 -13 39.68 -13 39 C-13.86625 38.7215625 -13.86625 38.7215625 -14.75 38.4375 C-18.08401241 36.30743652 -19.7464663 33.66967119 -21 30 C-21.49298551 25.15793686 -21.54550965 20.63652896 -20 16 C-19.34 16 -18.68 16 -18 16 C-18 15.34 -18 14.68 -18 14 C-17.34 14 -16.68 14 -16 14 C-16 13.34 -16 12.68 -16 12 C-14.68 12 -13.36 12 -12 12 C-12 12.66 -12 13.32 -12 14 C-1.77 14 8.46 14 19 14 C19 12.02 19 10.04 19 8 C12.73 8 6.46 8 0 8 C0 5.36 0 2.72 0 0 Z \",fill:\"#060708\",transform:\"translate(94,308)\"})),_path83||(_path83=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.62 0 9.24 0 14 0 C14 0.66 14 1.32 14 2 C14.66 2 15.32 2 16 2 C16.34933594 3.07121094 16.69867188 4.14242187 17.05859375 5.24609375 C17.51807145 6.64328104 17.97771546 8.04041365 18.4375 9.4375 C18.66759766 10.14455078 18.89769531 10.85160156 19.13476562 11.58007812 C20.07421147 15.06306795 20.07421147 15.06306795 22 18 C23.60795677 24.6956325 24.27171188 31.40678114 24.55859375 38.2734375 C25.07122861 41.43997848 26.32028571 43.29355498 28 46 C28.625 48.4375 28.625 48.4375 29 51 C29.88007744 56.48929659 31.10272132 61.84883239 32.4140625 67.25 C33 70 33 70 33 73 C33.99 73.33 34.98 73.66 36 74 C36.19335938 75.02480469 36.38671875 76.04960938 36.5859375 77.10546875 C36.84869863 78.46619601 37.11173398 79.82687033 37.375 81.1875 C37.50132812 81.86103516 37.62765625 82.53457031 37.7578125 83.22851562 C38.3319139 86.17078531 38.95842637 88.8990144 40.1015625 91.67578125 C41 94 41 94 41 99 C34.07 99 27.14 99 20 99 C19.67 96.69 19.34 94.38 19 92 C18.33581976 89.66595769 17.66900033 87.33266531 17 85 C16.40905757 82.09470229 15.91990388 79.17505211 15.4375 76.25 C14.51494496 70.55736919 14.51494496 70.55736919 13 65 C12.87218214 62.32605036 12.95608129 59.67904143 13 57 C12.34 57 11.68 57 11 57 C10.87882812 56.23816406 10.75765625 55.47632813 10.6328125 54.69140625 C9.61250208 48.40472436 8.44720271 42.20229732 7 36 C6.67 36 6.34 36 6 36 C5.95101563 35.33355469 5.90203125 34.66710937 5.8515625 33.98046875 C5.09911936 24.70466113 3.9370927 15.79658793 0.5859375 7.0703125 C0 5 0 5 0 0 Z \",fill:\"#F8D4AC\",transform:\"translate(344,527)\"})),_path84||(_path84=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.37930507 1.67898325 8.26550599 3.85976774 12.25 6.3125 C17.76733118 9.66932067 23.3142317 12.93369135 29 16 C29 16.66 29 17.32 29 18 C29.53625 18.0825 30.0725 18.165 30.625 18.25 C33.82904327 19.26180314 36.23377725 21.1166143 39 23 C39.99 23.33 40.98 23.66 42 24 C42 24.66 42 25.32 42 26 C42.825 26.20625 43.65 26.4125 44.5 26.625 C48.95935597 28.37688985 52.29553846 31.01010465 56 34 C54 35 54 35 51.0625 34.0625 C46.1194571 32.50209027 41.12832145 32.83307453 36 33 C36.24556641 34.6396875 36.24556641 34.6396875 36.49609375 36.3125 C37.15009907 41.54454258 37.10970402 46.73493662 37.0625 52 C37.05798828 52.96550781 37.05347656 53.93101562 37.04882812 54.92578125 C37.03715436 57.28388144 37.01922324 59.64194927 37 62 C33.7 61.34 30.4 60.68 27 60 C27 60.66 27 61.32 27 62 C25.515 61.505 25.515 61.505 24 61 C24.33 60.01 24.66 59.02 25 58 C22.03 58 19.06 58 16 58 C15.95875 56.906875 15.9175 55.81375 15.875 54.6875 C15.39434602 50.75003667 15.39434602 50.75003667 11.9375 49.0625 C10.4834375 48.5365625 10.4834375 48.5365625 9 48 C9 49.32 9 50.64 9 52 C2.25 51.25 2.25 51.25 0 49 C-0.24050903 46.89926147 -0.24050903 46.89926147 -0.22705078 44.27490234 C-0.22682419 42.80360367 -0.22682419 42.80360367 -0.22659302 41.30258179 C-0.21627045 40.24108917 -0.20594788 39.17959656 -0.1953125 38.0859375 C-0.1924826 37.00116119 -0.18965271 35.91638489 -0.18673706 34.79873657 C-0.17551578 31.32404687 -0.15040762 27.84961218 -0.125 24.375 C-0.11497272 22.02344121 -0.10584643 19.6718784 -0.09765625 17.3203125 C-0.07557011 11.54678756 -0.04207345 5.77341199 0 0 Z \",fill:\"#150D0D\",transform:\"translate(0,80)\"})),_path85||(_path85=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.33 6.27 2.66 12.54 3 19 C4.52625 18.979375 6.0525 18.95875 7.625 18.9375 C17.42595749 18.92569162 27.21386536 19.50886457 37 20 C37 20.66 37 21.32 37 22 C39.64 22 42.28 22 45 22 C45 23.32 45 24.64 45 26 C38.34993326 26.11335341 31.75956261 25.96666839 25.125 25.5 C11.86923975 24.02472483 11.86923975 24.02472483 -1 26 C-2.28436734 27.9837767 -2.28436734 27.9837767 -3 30 C-2.34 30 -1.68 30 -1 30 C-1 29.34 -1 28.68 -1 28 C15.9145281 27.76543798 32.04170217 29.47515195 48.7421875 32.0625 C59.58602564 33.704309 70.17516674 34.25312234 81.14892578 34.32592773 C95.00478486 34.43525413 95.00478486 34.43525413 101 39 C101 39.66 101 40.32 101 41 C100.10925781 40.82726562 99.21851563 40.65453125 98.30078125 40.4765625 C94.92160298 39.99394286 91.7017146 40.0154508 88.29296875 40.1484375 C68.67929823 40.8386919 49.98679905 38.55024802 30.6159668 35.57763672 C28.54743387 35.26093182 26.47883182 34.94467805 24.41015625 34.62890625 C23.42196396 34.47770325 22.43377167 34.32650024 21.41563416 34.17071533 C13.28469149 32.962692 5.21480324 32.2894186 -3 32 C-4.37579827 34.66211372 -5.37063561 37.06296616 -6 40 C-4.91203125 40.10957031 -3.8240625 40.21914063 -2.703125 40.33203125 C5.18590828 41.16927888 12.74373876 42.17979049 20.38671875 44.4140625 C23.32296057 45.07241268 26.00032621 45.096622 29 45 C29 45.66 29 46.32 29 47 C30.01320312 47.10183594 31.02640625 47.20367187 32.0703125 47.30859375 C39.41223711 48.22431554 46.63923733 49.93541901 53.86767578 51.49145508 C64.30381572 53.72924143 73.53147932 55.65096665 83.8125 52 C87.73487845 50.62406213 90.83074446 49.75338969 95 50 C95 49.34 95 48.68 95 48 C91.37 48 87.74 48 84 48 C85.875 45.4375 85.875 45.4375 89 43 C92.42743722 42.8534836 95.64141186 43.34132543 99 44 C99 44.66 99 45.32 99 46 C99.66 46 100.32 46 101 46 C101.495 47.98 101.495 47.98 102 50 C102.66 50 103.32 50 104 50 C103.67 51.65 103.34 53.3 103 55 C103.78375 55.309375 104.5675 55.61875 105.375 55.9375 C108 57 108 57 110 58 C110 58.66 110 59.32 110 60 C106.39225156 60.45096856 104.36801654 59.76017586 101.3125 58 C96.56817866 55.4982863 92.27566699 55.11789491 87 56 C84.99289167 56.87329194 84.99289167 56.87329194 83.125 58 C73.52884432 63.35023759 59.23862994 59.3002865 49 57 C46.99554125 56.34686176 44.99506043 55.68130635 43 55 C40.81945759 54.5290464 38.63092683 54.09424468 36.4375 53.6875 C31.85469814 52.82567184 27.32662264 51.85327026 22.80859375 50.6953125 C7.00934296 46.28520534 7.00934296 46.28520534 -9 48 C-8.49396008 45.83125748 -8.00016187 44.00032373 -7 42 C-7.99 42 -8.98 42 -10 42 C-10.12375 43.134375 -10.2475 44.26875 -10.375 45.4375 C-10.58125 46.613125 -10.7875 47.78875 -11 49 C-11.99 49.495 -11.99 49.495 -13 50 C-13.26870936 45.87544552 -13.50122964 41.75050833 -13.7019043 37.62207031 C-13.77491631 36.22114222 -13.85741094 34.82067219 -13.94995117 33.42089844 C-14.86813269 19.35214988 -14.86813269 19.35214988 -10.38745117 13.57519531 C-9.92959229 13.05538086 -9.4717334 12.53556641 -9 12 C-8.27296875 11.04351562 -7.5459375 10.08703125 -6.796875 9.1015625 C-6.12140625 8.28429687 -5.4459375 7.46703125 -4.75 6.625 C-2.10804616 3.48477587 -2.10804616 3.48477587 0 0 Z \",fill:\"#792821\",transform:\"translate(163,444)\"})),_path86||(_path86=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3 0.66 3 1.32 3 2 C4.32 2 5.64 2 7 2 C7 1.34 7 0.68 7 0 C7.99 0 8.98 0 10 0 C9.67 0.99 9.34 1.98 9 3 C8.84584611 6.32287269 8.74677585 9.64315247 8.671875 12.96875 C8.45015625 13.9690625 8.2284375 14.969375 8 16 C7.1757251 16.43868408 6.3514502 16.87736816 5.50219727 17.3293457 C2.7451445 18.76497697 2.7451445 18.76497697 2.34057617 21.63549805 C2.32486572 22.66715088 2.30915527 23.69880371 2.29296875 24.76171875 C2.26396484 25.87998047 2.23496094 26.99824219 2.20507812 28.15039062 C2.19637695 29.90125977 2.19637695 29.90125977 2.1875 31.6875 C2.16236328 32.86634766 2.13722656 34.04519531 2.11132812 35.25976562 C2.0523454 38.173512 2.01614629 41.08575228 2 44 C3.12019531 43.37480469 4.24039063 42.74960938 5.39453125 42.10546875 C6.02464111 41.75379639 6.65475098 41.40212402 7.30395508 41.03979492 C9.1046409 40.02656492 9.1046409 40.02656492 10.6875 38.3125 C12.34052058 36.65947942 13.76312956 36.52193644 16 36 C16.33 35.34 16.66 34.68 17 34 C17.99 33.01 17.99 33.01 19 32 C19.99 32 20.98 32 22 32 C22 31.34 22 30.68 22 30 C23.6796875 28.7109375 23.6796875 28.7109375 25.875 27.375 C26.59429687 26.92898437 27.31359375 26.48296875 28.0546875 26.0234375 C30 25 30 25 32 25 C32 24.34 32 23.68 32 23 C34.375 21.3125 34.375 21.3125 37 20 C37.66 20.33 38.32 20.66 39 21 C29.3180814 28.70034101 19.25656587 35.72632749 8.99194336 42.62475586 C6.94863691 43.99812616 6.94863691 43.99812616 4.93188477 45.67407227 C3 47 3 47 0 47 C-1.68291125 48.65026218 -3.34613985 50.32062447 -5 52 C-7.44315748 53.87018948 -9.99159878 55.56134512 -12.5625 57.25 C-13.22185547 57.69601563 -13.88121094 58.14203125 -14.56054688 58.6015625 C-15.20185547 59.02695313 -15.84316406 59.45234375 -16.50390625 59.890625 C-17.07955322 60.27250977 -17.6552002 60.65439453 -18.24829102 61.04785156 C-20 62 -20 62 -24 63 C-24 58.05 -24 53.1 -24 48 C-24.66 48 -25.32 48 -26 48 C-26.02712066 46.56260487 -26.04645067 45.12506137 -26.0625 43.6875 C-26.07410156 42.88699219 -26.08570313 42.08648437 -26.09765625 41.26171875 C-26 39 -26 39 -25 36 C-25.66 36 -26.32 36 -27 36 C-27.495 36.99 -27.495 36.99 -28 38 C-28.33 37.01 -28.66 36.02 -29 35 C-34.59524 35.48990581 -40.1344881 36.15346576 -45.6875 37 C-75.16750047 41.20694362 -126.50281192 45.66479205 -153 28 C-153 27.34 -153 26.68 -153 26 C-147.33949297 25.78083484 -142.33035435 26.59760012 -136.8125 27.8125 C-119.36530921 31.64164435 -102.3582436 33.55398638 -84.5 33.4375 C-83.54865173 33.43545563 -82.59730347 33.43341125 -81.61712646 33.43130493 C-65.42903085 33.37493522 -49.91045331 32.13165576 -34 29 C-32.8548291 28.7844043 -32.8548291 28.7844043 -31.68652344 28.56445312 C-24.52458471 27.20574649 -17.47215283 25.41010799 -10.42578125 23.55078125 C-8 23 -8 23 -5 23 C-4.67 24.65 -4.34 26.3 -4 28 C-2.5192152 25.0384304 -2.64685963 22.16493705 -2.4375 18.875 C-2.35371094 17.59367187 -2.26992188 16.31234375 -2.18359375 14.9921875 C-2.12300781 14.00476563 -2.06242188 13.01734375 -2 12 C-2.66 12 -3.32 12 -4 12 C-4 11.34 -4 10.68 -4 10 C-4.66 10 -5.32 10 -6 10 C-6 8.02 -6 6.04 -6 4 C-4.68 4 -3.36 4 -2 4 C-2 3.34 -2 2.68 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#ABBEA3\",transform:\"translate(376,156)\"})),_path87||(_path87=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C23.31319555 -0.34340223 23.31319555 -0.34340223 28 2 C27.88490339 3.41750563 27.75746342 4.83401169 27.625 6.25 C27.55539063 7.03890625 27.48578125 7.8278125 27.4140625 8.640625 C27 11 27 11 26.0234375 12.89453125 C24.65863097 15.70228208 24.4000012 18.348205 24 21.4375 C23.45566405 25.63180289 22.67291943 29.11882693 21 33 C20.63128912 34.65919896 20.28718326 36.3247643 20 38 C19.34 37.67 18.68 37.34 18 37 C15.64784456 44.57360688 14.22210695 52.13326461 13.1784668 59.97998047 C12.88069127 62.00294273 12.44929538 64.00521173 12 66 C10.515 66.99 10.515 66.99 9 68 C8.29644885 70.57679229 7.75482468 73.00489097 7.3125 75.625 C7.18294922 76.33140625 7.05339844 77.0378125 6.91992188 77.765625 C6.60198437 79.50839354 6.29950171 81.25396874 6 83 C4 81 4 81 3.76953125 79.109375 C3.90414214 71.71801348 4.40546392 64.36800069 5 57 C2.85184789 65.80116688 0.81920951 74.53733343 -0.5703125 83.49609375 C-1.12830941 86.74769395 -2.04720689 89.84387283 -3 93 C-3.70456629 95.99199384 -4.35921351 98.99375702 -5 102 C-6.32 101.67 -7.64 101.34 -9 101 C-8.505 100.505 -8.505 100.505 -8 100 C-7.47855962 97.71758095 -7.00875002 95.42330323 -6.5625 93.125 C-6.43125732 92.44969238 -6.30001465 91.77438477 -6.16479492 91.07861328 C-5.89891244 89.7044806 -5.63499247 88.32996671 -5.37304688 86.95507812 C-5.04078734 85.21375984 -4.70063181 83.4739524 -4.359375 81.734375 C-4.17890625 80.79078125 -3.9984375 79.8471875 -3.8125 78.875 C-3.57466797 77.63363281 -3.57466797 77.63363281 -3.33203125 76.3671875 C-2.98341807 73.88178062 -2.94202177 71.50644366 -3 69 C-3.66 70.32 -4.32 71.64 -5 73 C-5.99 73 -6.98 73 -8 73 C-7.88444496 71.29100181 -7.75706997 69.58280131 -7.625 67.875 C-7.55539063 66.92367187 -7.48578125 65.97234375 -7.4140625 64.9921875 C-6.97039816 61.78608485 -6.06401788 59.05376974 -5 56 C-4.33059446 53.48227634 -3.68279123 50.96704332 -3.0625 48.4375 C-2.89065186 47.7458374 -2.71880371 47.0541748 -2.54174805 46.34155273 C-1.15004169 40.70562634 0.14138041 35.04902213 1.38671875 29.37890625 C2 27 2 27 3 26 C3.23075082 24.65252916 3.41153063 23.29622435 3.5625 21.9375 C3.706875 20.638125 3.85125 19.33875 4 18 C3.34 18.33 2.68 18.66 2 19 C1.24253858 21.56530879 0.59044215 24.08355786 0 26.6875 C-1.13370244 31.55444916 -2.39283647 36.26208192 -4 41 C-4.5621517 43.11967291 -5.10427735 45.24477097 -5.625 47.375 C-6.01558594 48.96441406 -6.01558594 48.96441406 -6.4140625 50.5859375 C-6.60742188 51.38257813 -6.80078125 52.17921875 -7 53 C-7.66 52.34 -8.32 51.68 -9 51 C-9.99 51.99 -10.98 52.98 -12 54 C-10.9559791 47.89554836 -9.44640246 42.7082724 -7 37 C-5.39369327 30.95027335 -4.77754148 24.88972644 -4.27734375 18.66796875 C-3.613654 12.28346033 -1.82741437 6.13489112 0 0 Z \",fill:\"#462E25\",transform:\"translate(216,524)\"})),_path88||(_path88=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C16.72487644 10.91762768 16.72487644 10.91762768 20 17 C23.18404926 20.39374402 26.498635 23.25614446 30.25 26 C31.29414062 26.77214844 32.33828125 27.54429687 33.4140625 28.33984375 C33.98415039 28.76120605 34.55423828 29.18256836 35.14160156 29.61669922 C46.13160627 37.79712048 57.18060114 46.03363399 67.50390625 55.046875 C68.4326355 55.85499634 68.4326355 55.85499634 69.38012695 56.67944336 C70.59364405 57.73927047 71.80214717 58.80487668 73.00463867 59.87719727 C76.47979269 62.91776971 79.79250843 65.0139674 84 67 C85.68933922 68.6436814 87.35259924 70.3142876 89 72 C91.37435322 73.85696882 93.77911439 75.66293734 96.20703125 77.44921875 C96.79871094 77.96097656 97.39039063 78.47273437 98 79 C98 79.66 98 80.32 98 81 C93.45015892 80.72425206 91.28436308 78.77600399 88.05859375 75.85546875 C81.5066413 69.95000876 74.47221168 64.54311456 67.5625 59.0625 C66.97138428 58.58981689 66.38026855 58.11713379 65.77124023 57.63012695 C62.96748939 55.41820322 60.29223992 53.41558227 57 52 C57 52.66 57 53.32 57 54 C57.56847656 54.26167969 58.13695312 54.52335937 58.72265625 54.79296875 C64.92006959 58.07770412 70.13539203 63.01674306 75 68 C76.65964565 69.5077646 78.32709989 71.00695513 80 72.5 C83.44119245 75.57652877 86.7905012 78.6835179 90 82 C86.84669446 81.39305845 84.81111133 80.3583335 82.25 78.4375 C81.63640625 77.98246094 81.0228125 77.52742187 80.390625 77.05859375 C79.70226562 76.53458984 79.70226562 76.53458984 79 76 C79.825 76.78375 80.65 77.5675 81.5 78.375 C84 81 84 81 84 83 C85.485 83.495 85.485 83.495 87 84 C87 84.66 87 85.32 87 86 C88.98 86.99 88.98 86.99 91 88 C91 88.66 91 89.32 91 90 C91.66 90 92.32 90 93 90 C93 90.66 93 91.32 93 92 C89.33390455 91.41638391 87.54803439 89.95764866 84.875 87.4375 C81.67088612 84.49076576 78.42166622 81.69149757 75 79 C64.80084746 70.91101695 64.80084746 70.91101695 61 67 C61 66.34 61 65.68 61 65 C60.41734375 64.90074219 59.8346875 64.80148437 59.234375 64.69921875 C56.57250359 63.86622053 55.2795894 62.71209504 53.25 60.8125 C49.82220005 57.68108877 46.2669563 54.92776741 42.46875 52.26171875 C41.74171875 51.63716797 41.74171875 51.63716797 41 51 C41 50.34 41 49.68 41 49 C40.4225 48.731875 39.845 48.46375 39.25 48.1875 C36.96587952 46.98199197 35.04568469 45.56864477 33 44 C36.93470135 48.71207396 40.8822812 52.97111356 45.71484375 56.7734375 C46.13894531 57.17820312 46.56304688 57.58296875 47 58 C47 58.66 47 59.32 47 60 C47.55558594 60.24105469 48.11117187 60.48210937 48.68359375 60.73046875 C51.50448525 62.27648854 53.66900636 64.16449289 56.0625 66.3125 C56.91972656 67.07175781 57.77695312 67.83101563 58.66015625 68.61328125 C60.9376911 70.93644284 62.46046685 73.14807793 64 76 C62.35 75.67 60.7 75.34 59 75 C58.67 74.01 58.34 73.02 58 72 C56.68841241 71.29150849 55.34977849 70.63270867 54 70 C52.30533324 68.7452948 50.64017626 67.4501424 49 66.125 C48.154375 65.44695312 47.30875 64.76890625 46.4375 64.0703125 C44 62 44 62 41.875 59.8671875 C39.94114801 57.82060471 39.94114801 57.82060471 37 56 C37 55.34 37 54.68 37 54 C36.45214844 53.76925781 35.90429688 53.53851563 35.33984375 53.30078125 C32.33786086 51.63189928 30.0826802 49.51892884 27.5625 47.1875 C26.63566406 46.33542969 25.70882813 45.48335938 24.75390625 44.60546875 C23.84511719 43.74566406 22.93632812 42.88585937 22 42 C21.06027344 41.15050781 20.12054688 40.30101562 19.15234375 39.42578125 C17 37 17 37 17 33 C15.34467377 31.98133771 13.67739862 30.98189187 12 30 C11.1875 27.8125 11.1875 27.8125 11 26 C10.15888672 25.81244141 10.15888672 25.81244141 9.30078125 25.62109375 C4.59600063 24.35104261 0.93220475 23.05801873 -2 19 C-2.95539926 13.06195797 -1.97303515 6.88025562 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#946349\",transform:\"translate(482,438)\"})),_path89||(_path89=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C16.33729094 0.93496545 32.66828489 1.97319591 49 3 C49 3.33 49 3.66 49 4 C41.74 4 34.48 4 27 4 C27 5.65 27 7.3 27 9 C26.67 9 26.34 9 26 9 C26 7.35 26 5.7 26 4 C25.34 4 24.68 4 24 4 C24.05800781 4.83144531 24.11601562 5.66289062 24.17578125 6.51953125 C24.22089844 7.60621094 24.26601563 8.69289063 24.3125 9.8125 C24.37050781 10.89144531 24.42851562 11.97039062 24.48828125 13.08203125 C24 16 24 16 21.7421875 17.765625 C20.83726562 18.17296875 19.93234375 18.5803125 19 19 C18.28457031 19.33902344 17.56914062 19.67804688 16.83203125 20.02734375 C15.48014941 20.63660578 14.12594513 21.24073934 12.76953125 21.83984375 C10.60154382 23.26123948 9.96451086 24.63076564 9 27 C10.66289062 27.07347656 10.66289062 27.07347656 12.359375 27.1484375 C13.82294065 27.22349215 15.28648112 27.29903881 16.75 27.375 C17.84441406 27.42140625 17.84441406 27.42140625 18.9609375 27.46875 C22.73942656 27.6748494 25.77946668 27.91512843 29 30 C28.01 32.475 28.01 32.475 27 35 C27.78761719 34.65066406 28.57523437 34.30132812 29.38671875 33.94140625 C30.47597656 33.48636719 31.56523437 33.03132813 32.6875 32.5625 C34.27111328 31.88380859 34.27111328 31.88380859 35.88671875 31.19140625 C48.00202365 27.16323675 62.40957112 29.00718693 74.95849609 29.296875 C78.38757618 29.37528758 81.81674635 29.44224929 85.24609375 29.5078125 C87.44272261 29.55401372 89.6393379 29.60086572 91.8359375 29.6484375 C92.85271576 29.66828705 93.86949402 29.6881366 94.91708374 29.70858765 C100.03047982 29.83220396 104.95620457 30.13959301 110 31 C109.67 32.65 109.34 34.3 109 36 C98.44 36.99 87.88 37.98 77 39 C83.93 39.33 90.86 39.66 98 40 C98.495 42.97 98.495 42.97 99 46 C97.68 46 96.36 46 95 46 C94.505 44.02 94.505 44.02 94 42 C81.16220632 41.49101259 68.52531443 42.1007762 55.75964355 43.43835449 C54.18679348 43.60268452 52.61329566 43.76094366 51.03918457 43.91271973 C41.24891793 44.87201907 32.91394704 46.51925596 24 51 C25.09699219 50.98839844 26.19398438 50.97679687 27.32421875 50.96484375 C28.77864412 50.95546036 30.23307135 50.94636075 31.6875 50.9375 C32.40873047 50.92912109 33.12996094 50.92074219 33.87304688 50.91210938 C37.74108349 50.89444711 41.23202547 51.17877478 45 52 C47.43505237 52.21698487 49.87301384 52.40290745 52.3125 52.5625 C53.56675781 52.64628906 54.82101562 52.73007812 56.11328125 52.81640625 C57.54220703 52.90728516 57.54220703 52.90728516 59 53 C59 53.99 59 54.98 59 56 C52.43668532 56.70051799 46.54233931 57.11096328 40 56 C33.39306836 55.44840088 28.14283271 56.56029339 22 59 C22 57.68 22 56.36 22 55 C17.05 55 12.1 55 7 55 C7 52.36 7 49.72 7 47 C12.28 47 17.56 47 23 47 C23.33 46.01 23.66 45.02 24 44 C28.09586523 41.74666787 32.43445085 41.49504098 37.01171875 41.1484375 C38.16411797 41.05280014 38.16411797 41.05280014 39.33979797 40.95523071 C40.96247665 40.82221027 42.58547208 40.69300531 44.20874023 40.56738281 C46.66277413 40.37691904 49.11551198 40.17387303 51.56835938 39.96875 C59.39803732 39.32970242 67.13737538 38.82474393 75 39 C75 36.36 75 33.72 75 31 C70.03558325 31.3078084 65.07424815 31.64456756 60.11352539 32.00708008 C58.4294869 32.12618281 56.74489022 32.23766843 55.05981445 32.34106445 C41.74920369 33.09797398 41.74920369 33.09797398 30 39 C28.65411566 39.7852049 27.30023215 40.5569125 25.9375 41.3125 C24.968125 41.869375 23.99875 42.42625 23 43 C23 42.01 23 41.02 23 40 C18.38 40 13.76 40 9 40 C8.67 40.99 8.34 41.98 8 43 C7.67 43 7.34 43 7 43 C-0.76432632 13.36155639 -0.76432632 13.36155639 0 0 Z \",fill:\"#100C0B\",transform:\"translate(339,432)\"})),_path90||(_path90=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1.67 1.66 1.34 2.32 1 3 C4.465 2.505 4.465 2.505 8 2 C6.05210271 3.53049073 4.24876109 4.88339324 2 5.9375 C-0.46550555 7.24729982 -2.06762109 9.00320846 -4 11 C-4.99 11.495 -4.99 11.495 -6 12 C-5.67 12.99 -5.34 13.98 -5 15 C-2.98491642 15.73323796 -2.98491642 15.73323796 -1 16 C-1 17.98 -1 19.96 -1 22 C0.32 22.33 1.64 22.66 3 23 C3 24.98 3 26.96 3 29 C8.8729976 29.86110389 14.5085117 30.09711693 20.4375 30 C23.29737372 29.95471301 26.13896133 29.95236564 29 30 C29.33 30.33 29.66 30.66 30 31 C32.32817964 31.36760731 34.6618385 31.70241581 37 32 C35.66485211 36.00544366 33.77948847 36.69498355 30.25 38.9375 C27.11490173 40.94133744 24.11996729 42.90223005 21.234375 45.25390625 C19 47 19 47 17 47 C17 47.66 17 48.32 17 49 C15.02 49.495 15.02 49.495 13 50 C13 50.66 13 51.32 13 52 C12.01 52 11.02 52 10 52 C9.773125 52.639375 9.54625 53.27875 9.3125 53.9375 C8 56 8 56 5.375 56.75 C4.59125 56.8325 3.8075 56.915 3 57 C3 57.66 3 58.32 3 59 C0.63944406 60.89735251 -1.7255511 62.68092809 -4.1875 64.4375 C-4.86103516 64.92798828 -5.53457031 65.41847656 -6.22851562 65.92382812 C-9.75516769 68.47333952 -13.25171561 70.75102937 -17 73 C-17 51.55 -17 30.1 -17 8 C-11.98631998 5.49315999 -8.11279097 3.66462962 -3 2 C-2.01 1.34 -1.02 0.68 0 0 Z \",fill:\"#402A23\",transform:\"translate(17,484)\"})),_path91||(_path91=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.495 2.97 1.495 2.97 2 6 C3.32 5.34 4.64 4.68 6 4 C5.505 2.515 5.505 2.515 5 1 C5.66 1 6.32 1 7 1 C7.495 4.465 7.495 4.465 8 8 C7.01 7.67 6.02 7.34 5 7 C5 9.97 5 12.94 5 16 C8.96 16 12.92 16 17 16 C17 16.33 17 16.66 17 17 C14.69 17 12.38 17 10 17 C9.67 22.94 9.34 28.88 9 35 C8.01 35 7.02 35 6 35 C6 29.06 6 23.12 6 17 C3.69 17 1.38 17 -1 17 C-1 22.94 -1 28.88 -1 35 C-3.31 35 -5.62 35 -8 35 C-7.34 29.72 -6.68 24.44 -6 19 C-5.01 19 -4.02 19 -3 19 C-3 18.34 -3 17.68 -3 17 C-4.32 17 -5.64 17 -7 17 C-7 18.65 -7 20.3 -7 22 C-7.495 20.02 -7.495 20.02 -8 18 C-8.66 18 -9.32 18 -10 18 C-10 23.94 -10 29.88 -10 36 C-12.97 35.67 -15.94 35.34 -19 35 C-19.33 29.39 -19.66 23.78 -20 18 C-22.31 18 -24.62 18 -27 18 C-27 23.28 -27 28.56 -27 34 C-26.34 34 -25.68 34 -25 34 C-25 34.66 -25 35.32 -25 36 C-26.32 36 -27.64 36 -29 36 C-29 29.73 -29 23.46 -29 17 C-31.97 17 -34.94 17 -38 17 C-38 25.25 -38 33.5 -38 42 C-6.84369434 39.21379599 -6.84369434 39.21379599 24.25 35.8125 C24.95711121 35.72818726 25.66422241 35.64387451 26.39276123 35.55700684 C31.85148339 34.90293984 37.30678853 34.24666238 42.74731445 33.45410156 C45.53977917 33.0642506 48.12579276 32.89424297 50.9375 32.9375 C51.70964844 32.94652344 52.48179687 32.95554687 53.27734375 32.96484375 C53.84582031 32.97644531 54.41429687 32.98804688 55 33 C55 33.66 55 34.32 55 35 C25.58095202 38.86446228 -3.80248054 42.37268834 -33.375 44.8125 C-34.56985016 44.91114349 -35.76470032 45.00978699 -36.99575806 45.11141968 C-43.84448361 45.67211091 -50.69463043 46.21200217 -57.54626465 46.73590088 C-59.93349259 46.91844666 -62.3206119 47.10241666 -64.7076416 47.28753662 C-68.40121994 47.57367742 -72.09508003 47.85584783 -75.7890625 48.13671875 C-76.91170502 48.22371536 -78.03434753 48.31071198 -79.19100952 48.40034485 C-84.47727798 48.79645723 -89.69880952 49.10451053 -95 49 C-95 48.34 -95 47.68 -95 47 C-85.76 46.01 -76.52 45.02 -67 44 C-67 34.76 -67 25.52 -67 16 C-62.71 16 -58.42 16 -54 16 C-54.33 11.71 -54.66 7.42 -55 3 C-54.01 3.33 -53.02 3.66 -52 4 C-52 7.63 -52 11.26 -52 15 C-49.03 15.33 -46.06 15.66 -43 16 C-43.495 14.453125 -43.495 14.453125 -44 12.875 C-44.9715192 9.51573291 -45.17116771 6.50893798 -45 3 C-41.4281377 6.5718623 -41 11.10186234 -41 16 C-26.81 15.67 -12.62 15.34 2 15 C1.01 13.35 0.02 11.7 -1 10 C-1.25926574 6.24064683 -1.19211438 3.57634313 0 0 Z \",fill:\"#BBB87F\",transform:\"translate(95,253)\"})),_path92||(_path92=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C1.54554036 1.41791408 1.08625056 2.83428046 0.625 4.25 C0.24214844 5.43335938 0.24214844 5.43335938 -0.1484375 6.640625 C-1.60460107 10.67513325 -2.33883055 12.55922036 -6 15 C-3.36 15.66 -0.72 16.32 2 17 C2 17.99 2 18.98 2 20 C-4.93 19.505 -4.93 19.505 -12 19 C-12.66 20.65 -13.32 22.3 -14 24 C-14.66 24 -15.32 24 -16 24 C-15.505 25.485 -15.505 25.485 -15 27 C-16.6396875 27.8971875 -16.6396875 27.8971875 -18.3125 28.8125 C-20.91074129 30.29044697 -23.04349493 31.69822933 -25 34 C-24.38125 33.649375 -23.7625 33.29875 -23.125 32.9375 C-22.42375 32.628125 -21.7225 32.31875 -21 32 C-20.01 32.495 -20.01 32.495 -19 33 C-19 33.66 -19 34.32 -19 35 C-18.34 35.66 -17.68 36.32 -17 37 C-16.875 40.625 -16.875 40.625 -17 44 C-16.11957031 44.03738281 -15.23914063 44.07476562 -14.33203125 44.11328125 C-13.17058594 44.17902344 -12.00914062 44.24476563 -10.8125 44.3125 C-9.08966797 44.39951172 -9.08966797 44.39951172 -7.33203125 44.48828125 C-3.76085876 45.03672626 -1.83644385 45.78777355 1 48 C3.74059604 52.19334752 5.65326421 56.93720238 5 62 C5.66 62.33 6.32 62.66 7 63 C6.67 64.65 6.34 66.3 6 68 C5.67 67.01 5.34 66.02 5 65 C4.46375 65.02320313 3.9275 65.04640625 3.375 65.0703125 C-4.86197799 65.25997976 -12.86219924 64.13081102 -21 63 C-21 62.34 -21 61.68 -21 61 C-21.99 60.67 -22.98 60.34 -24 60 C-25.1328125 57.890625 -25.1328125 57.890625 -26.125 55.25 C-26.45757812 54.38890625 -26.79015625 53.5278125 -27.1328125 52.640625 C-27.96617277 50.10300543 -28.53680766 47.62790754 -29 45 C-29.66 45 -30.32 45 -31 45 C-31 44.34 -31 43.68 -31 43 C-27.37 43 -23.74 43 -20 43 C-21.90045308 40.7102606 -21.90045308 40.7102606 -25.0625 40.5 C-26.031875 40.335 -27.00125 40.17 -28 40 C-28.33 39.34 -28.66 38.68 -29 38 C-36.10984263 35.75478654 -42.66559405 35.16639851 -50 37 C-50 36.01 -50 35.02 -50 34 C-47.525 33.505 -47.525 33.505 -45 33 C-46.98 33 -48.96 33 -51 33 C-51.20753906 32.44570313 -51.41507812 31.89140625 -51.62890625 31.3203125 C-53.36545561 26.95391552 -53.36545561 26.95391552 -56.82421875 24.0234375 C-58.95011148 23.40683068 -58.95011148 23.40683068 -62 23 C-62 20.03 -62 17.06 -62 14 C-61.01 14.33 -60.02 14.66 -59 15 C-59 16.32 -59 17.64 -59 19 C-52.4 19.33 -45.8 19.66 -39 20 C-39 23.63 -39 27.26 -39 31 C-37.02 31 -35.04 31 -33 31 C-33 29.35 -33 27.7 -33 26 C-32.67 27.32 -32.34 28.64 -32 30 C-30.71677453 28.9404123 -30.71677453 28.9404123 -30.875 26.5 C-30.71677453 24.0595877 -30.71677453 24.0595877 -32 23 C-32.08669432 21.5112814 -32.10703494 20.018555 -32.09765625 18.52734375 C-32.09443359 17.62822266 -32.09121094 16.72910156 -32.08789062 15.80273438 C-32.07951172 14.85720703 -32.07113281 13.91167969 -32.0625 12.9375 C-32.05798828 11.98810547 -32.05347656 11.03871094 -32.04882812 10.06054688 C-32.0370011 7.70696935 -32.02052025 5.35351523 -32 3 C-25.07673547 2.88544754 -18.32554559 3.3253271 -11.4375 4 C-9.92446289 4.14308594 -9.92446289 4.14308594 -8.38085938 4.2890625 C-5.92019019 4.52230129 -3.4599534 4.75934891 -1 5 C-0.67 3.35 -0.34 1.7 0 0 Z \",fill:\"#1D5741\",transform:\"translate(455,285)\"})),_path93||(_path93=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.41017023 -0.11459026 14.64206267 0.08839714 22 1 C20.07012289 5.31221345 17.82520363 7.26771169 14 10 C13.01 9.67 12.02 9.34 11 9 C11.639375 8.7525 12.27875 8.505 12.9375 8.25 C15.19303909 7.19716567 15.19303909 7.19716567 15.62890625 4.921875 C15.75136719 4.28765625 15.87382813 3.6534375 16 3 C15.00419922 3.99580078 15.00419922 3.99580078 13.98828125 5.01171875 C9.99414062 9.00585938 9.99414062 9.00585938 6 13 C5.12085937 13.886875 4.24171875 14.77375 3.3359375 15.6875 C-3.04054054 22 -3.04054054 22 -6 22 C-6 22.66 -6 23.32 -6 24 C-6.66 24 -7.32 24 -8 24 C-8.66 25.32 -9.32 26.64 -10 28 C-10.66 28 -11.32 28 -12 28 C-12.2784375 29.0209375 -12.2784375 29.0209375 -12.5625 30.0625 C-14.2833638 33.57904776 -16.5196389 35.62575627 -19.328125 38.30078125 C-21.32451207 40.32981951 -22.59961302 42.53265151 -24 45 C-27.32028836 48.85581874 -27.32028836 48.85581874 -30.0625 49.4375 C-33.0243011 50.29737774 -33.47758263 52.34986606 -35 55 C-36.71410632 57.0250182 -38.48573949 58.98448857 -40.28125 60.9375 C-42.06808271 62.96518259 -42.06808271 62.96518259 -43.3828125 65.375 C-45.3660115 68.59410562 -47.79898969 71.25689712 -50.375 74 C-50.84421875 74.50789062 -51.3134375 75.01578125 -51.796875 75.5390625 C-54.79302363 78.76695743 -57.87274296 81.89833426 -61 85 C-61.96873047 85.98613281 -61.96873047 85.98613281 -62.95703125 86.9921875 C-66.22101859 90.3042757 -69.51647583 93.49000274 -73.0625 96.5 C-76.60231974 99.50537637 -79.44437612 102.81187647 -82.26171875 106.49609375 C-84 108 -84 108 -86.70703125 108.22265625 C-87.46371094 108.14917969 -88.22039062 108.07570313 -89 108 C-86.33741895 103.40431216 -83.37742821 99.30389049 -79.671875 95.49609375 C-79.08043701 94.88781738 -78.48899902 94.27954102 -77.87963867 93.65283203 C-76.67888755 92.43675492 -75.46297684 91.23544197 -74.23168945 90.05029297 C-72.62633964 88.42438248 -71.2102722 86.9394424 -70 85 C-70.2671241 82.99008562 -70.60034827 80.98781025 -71 79 C-69.58210933 76.57877144 -68.29033448 74.72858786 -66.5 72.625 C-66.04165771 72.06208252 -65.58331543 71.49916504 -65.11108398 70.91918945 C-63.75645045 69.26563171 -62.37921624 67.63305344 -61 66 C-60.30003906 65.13503906 -59.60007812 64.27007813 -58.87890625 63.37890625 C-55.54431723 59.35588595 -55.54431723 59.35588595 -54 58 C-53.01 58 -52.02 58 -51 58 C-50.67 57.01 -50.34 56.02 -50 55 C-49 54 -48 53 -47 52 C-46.67 51.01 -46.34 50.02 -46 49 C-45.34 49 -44.68 49 -44 49 C-44 48.34 -44 47.68 -44 47 C-43.34 47 -42.68 47 -42 47 C-42.495 44.03 -42.495 44.03 -43 41 C-42.21625 40.7525 -41.4325 40.505 -40.625 40.25 C-37.49469091 38.75937663 -37.45996121 38.00580249 -36 35 C-35.030625 34.195625 -34.06125 33.39125 -33.0625 32.5625 C-29.96312798 30.26851379 -29.96312798 30.26851379 -28.5625 27.5 C-26.67788038 24.48460861 -24.56571118 23.14647839 -21.64453125 21.203125 C-19.65284813 19.74602666 -18.41151092 18.00583131 -17 16 C-16.34 16 -15.68 16 -15 16 C-14.67 15.01 -14.34 14.02 -14 13 C-13.030625 12.71125 -12.06125 12.4225 -11.0625 12.125 C-10.051875 11.75375 -9.04125 11.3825 -8 11 C-6.89363605 8.60931266 -6.89363605 8.60931266 -6 6 C-4.37667033 4.61423077 -2.71275535 3.27358732 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#684435\",transform:\"translate(102,518)\"})),_path94||(_path94=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.23556641 0.01740234 1.23556641 0.01740234 2.49609375 0.03515625 C3.32238281 0.04417969 4.14867187 0.05320312 5 0.0625 C5.63808594 0.07410156 6.27617187 0.08570313 6.93359375 0.09765625 C6.93359375 0.75765625 6.93359375 1.41765625 6.93359375 2.09765625 C10.23359375 2.09765625 13.53359375 2.09765625 16.93359375 2.09765625 C16.93359375 2.42765625 16.93359375 2.75765625 16.93359375 3.09765625 C12.47859375 3.59265625 12.47859375 3.59265625 7.93359375 4.09765625 C7.93359375 6.40765625 7.93359375 8.71765625 7.93359375 11.09765625 C8.26359375 11.09765625 8.59359375 11.09765625 8.93359375 11.09765625 C8.95697516 19.6701495 8.9746382 28.24262898 8.98540592 36.81514645 C8.99057919 40.79759298 8.99757311 44.78001737 9.0090332 48.76245117 C9.02006306 52.62042515 9.02591216 56.4783781 9.02847099 60.33636665 C9.03028967 61.79322197 9.03383874 63.25007641 9.03932381 64.70692253 C9.07723698 75.2144347 8.6272813 85.6107327 7.93359375 96.09765625 C1.33359375 96.09765625 -5.26640625 96.09765625 -12.06640625 96.09765625 C-12.06640625 85.97279309 -12.06640625 85.97279309 -11.63916016 81.8034668 C-11.54551178 80.86766281 -11.4518634 79.93185883 -11.3553772 78.96769714 C-11.25228241 77.98320084 -11.14918762 76.99870453 -11.04296875 75.984375 C-10.93673187 74.93474075 -10.830495 73.88510651 -10.72103882 72.80366516 C-10.38204491 69.46371643 -10.03687451 66.12444087 -9.69140625 62.78515625 C-9.46703055 60.5866311 -9.24306891 58.38806364 -9.01953125 56.18945312 C-8.58067875 51.87760809 -8.13929866 47.56603336 -7.69604492 43.25463867 C-7.02767747 36.74097016 -6.37704003 30.22557489 -5.73733521 23.70903015 C-3.40635926 0.16098106 -3.40635926 0.16098106 0 0 Z \",fill:\"#FAD6AE\",transform:\"translate(274.06640625,529.90234375)\"})),_path95||(_path95=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.74216797 0.05414062 1.74216797 0.05414062 3.51953125 0.109375 C4.39996094 0.15578125 5.28039062 0.2021875 6.1875 0.25 C5.8575 0.91 5.5275 1.57 5.1875 2.25 C4.5275 2.25 3.8675 2.25 3.1875 2.25 C2.5275 4.56 1.8675 6.87 1.1875 9.25 C0.5275 9.25 -0.1325 9.25 -0.8125 9.25 C-0.8125 10.57 -0.8125 11.89 -0.8125 13.25 C-1.4725 13.25 -2.1325 13.25 -2.8125 13.25 C-3.07804687 13.79914062 -3.34359375 14.34828125 -3.6171875 14.9140625 C-7.32689879 22.16375973 -11.04609888 28.48703609 -18.015625 32.93359375 C-21.38494572 35.40198741 -23.08317696 38.16579097 -23.8125 42.25 C-24.4725 42.25 -25.1325 42.25 -25.8125 42.25 C-25.91691406 43.23419922 -25.91691406 43.23419922 -26.0234375 44.23828125 C-27.11960727 48.42217675 -29.21035386 51.75530133 -31.4375 55.4375 C-31.88609375 56.18765381 -32.3346875 56.93780762 -32.796875 57.71069336 C-40.38559393 70.28763985 -40.38559393 70.28763985 -43.8125 74.25 C-44.4725 74.25 -45.1325 74.25 -45.8125 74.25 C-45.4825 72.27 -45.1525 70.29 -44.8125 68.25 C-48.46720191 71.68971945 -51.4507383 75.30960672 -54.3828125 79.3828125 C-55.75960619 81.1809201 -57.10381604 82.76298315 -58.8125 84.25 C-59.4725 84.25 -60.1325 84.25 -60.8125 84.25 C-60.998125 85.28125 -61.18375 86.3125 -61.375 87.375 C-62.52750753 91.48754486 -64.7656236 93.27533676 -68.06640625 95.828125 C-70.34932457 97.68714573 -71.98848872 99.9530969 -73.8125 102.25 C-74.4725 102.25 -75.1325 102.25 -75.8125 102.25 C-75.544375 101.734375 -75.27625 101.21875 -75 100.6875 C-73.7205459 98.15004689 -73.7205459 98.15004689 -72.5625 95 C-70.70738414 90.56886832 -67.80093623 86.97345614 -64.8125 83.25 C-68.09023504 84.00150023 -68.09023504 84.00150023 -69.8125 87.25 C-70.4725 87.25 -71.1325 87.25 -71.8125 87.25 C-71.91820313 87.83265625 -72.02390625 88.4153125 -72.1328125 89.015625 C-72.90936245 91.56842139 -73.95551767 92.98366236 -75.6875 95 C-76.20054688 95.61359375 -76.71359375 96.2271875 -77.2421875 96.859375 C-78.8125 98.25 -78.8125 98.25 -81.8125 98.25 C-80.91856391 90.87502725 -76.92315479 86.23897254 -71.8125 81.25 C-67.73906749 76.37094029 -67.73906749 76.37094029 -64.86328125 70.76171875 C-63.68341448 67.94144242 -62.27765019 66.28172321 -60.1875 64.0625 C-55.03407249 58.44994895 -50.29044175 52.53556721 -45.703125 46.453125 C-45.07921875 45.72609375 -44.4553125 44.9990625 -43.8125 44.25 C-43.1525 44.25 -42.4925 44.25 -41.8125 44.25 C-41.626875 43.59 -41.44125 42.93 -41.25 42.25 C-38.21973793 35.92597481 -32.71863642 31.15613642 -27.8125 26.25 C-18.29480912 16.16615109 -18.29480912 16.16615109 -11.8125 4.25 C-7.96785546 0.34209805 -5.40300964 -0.21830342 0 0 Z \",fill:\"#7C533D\",transform:\"translate(137.8125,518.75)\"})),_path96||(_path96=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-9.8068199 5.07145234 -19.62091525 7.93155108 -29.60253906 10.37841797 C-36.5104796 12.07454919 -43.33137509 13.95033043 -50.14208984 16.0012207 C-56.30716943 17.83847299 -62.51977563 19.46190915 -68.75 21.0625 C-75.88410012 22.89555935 -82.93399469 24.85610116 -89.95703125 27.08203125 C-93.95238361 28.28730443 -97.9875091 29.2900446 -102.04077148 30.28076172 C-109.21149614 32.03585201 -116.35513242 33.89278139 -123.5 35.75 C-124.72477051 36.06815674 -125.94954102 36.38631348 -127.21142578 36.71411133 C-130.14110119 37.47549472 -133.07057244 38.23766359 -136 39 C-129.73 38.67 -123.46 38.34 -117 38 C-117 38.66 -117 39.32 -117 40 C-127.04273512 42.2054634 -136.78451249 42.20430975 -147 42 C-147 42.66 -147 43.32 -147 44 C-149.64 44.33 -152.28 44.66 -155 45 C-154.04134491 47.33075929 -154.04134491 47.33075929 -151 49 C-157.39761509 52.02963984 -163.66762347 53.65669226 -170.63427734 54.85693359 C-175.51930124 55.70291808 -180.31205098 56.75134609 -185.125 57.9375 C-191.32295058 59.44026942 -197.53318322 60.69954604 -203.8125 61.8125 C-213.33356135 63.50231001 -222.83761742 65.27085661 -232.33309937 67.09848022 C-233.92714138 67.40451971 -235.52155702 67.70862031 -237.11636353 68.01065063 C-252.25782038 69.96316256 -252.25782038 69.96316256 -265 77 C-260.05 76.505 -260.05 76.505 -255 76 C-255 76.66 -255 77.32 -255 78 C-255.99 78.495 -255.99 78.495 -257 79 C-253.7 79.66 -250.4 80.32 -247 81 C-247 82.65 -247 84.3 -247 86 C-248 87 -248 87 -250.5625 87.0625 C-251.366875 87.041875 -252.17125 87.02125 -253 87 C-253 85.35 -253 83.7 -253 82 C-255.97 82.495 -255.97 82.495 -259 83 C-259.33 84.32 -259.66 85.64 -260 87 C-261.98 87 -263.96 87 -266 87 C-266 87.99 -266 88.98 -266 90 C-266.66 90 -267.32 90 -268 90 C-268 89.01 -268 88.02 -268 87 C-271.96 87 -275.92 87 -280 87 C-280 87.66 -280 88.32 -280 89 C-282.01822917 88.96744792 -284.03645833 88.93489583 -286.0546875 88.90234375 C-288.08185404 88.87350758 -288.08185404 88.87350758 -290 90 C-290 89.01 -290 88.02 -290 87 C-285.05 86.67 -280.1 86.34 -275 86 C-275.495 83.525 -275.495 83.525 -276 81 C-276.25999016 78.22510499 -276.18451589 75.8138673 -276 73 C-273.09907498 71.06604999 -272.10325263 70.69868059 -268.8125 70.375 C-267.554375 70.25125 -266.29625 70.1275 -265 70 C-265.34444881 67.52733235 -265.34444881 67.52733235 -266 65 C-266.66 64.67 -267.32 64.34 -268 64 C-266.68 64 -265.36 64 -264 64 C-264 64.66 -264 65.32 -264 66 C-262.515 65.505 -262.515 65.505 -261 65 C-260.67 64.34 -260.34 63.68 -260 63 C-258.515 63.495 -258.515 63.495 -257 64 C-253.28247365 63.36938758 -249.63454904 62.52229426 -245.95703125 61.69140625 C-242.63259883 61.01707419 -239.49696224 60.9835521 -236.10083008 61.05249023 C-232.13498085 60.95340161 -228.30761437 60.06901808 -224.4375 59.25 C-223.55908447 59.06880615 -222.68066895 58.8876123 -221.77563477 58.70092773 C-215.4004473 57.3597299 -209.11722227 55.80735223 -202.83984375 54.0625 C-200.02411339 53.28337624 -197.20933061 52.53392368 -194.37890625 51.8125 C-187.03343118 49.93487076 -179.78576124 47.99921536 -172.625 45.5 C-162.56156741 42.03249116 -152.15605402 39.72717479 -141.75073242 37.52368164 C-135.75992112 36.24653721 -129.92882063 34.56878404 -124.0625 32.8125 C-112.06926416 29.26636458 -100.00792665 26.01009286 -87.92529297 22.78466797 C-76.33061671 19.67456202 -64.78479747 16.38813738 -53.25268555 13.05444336 C-48.89181114 11.79957344 -44.52701896 10.61451603 -40.12011719 9.53320312 C-33.8103999 7.94632812 -27.55124048 6.15784566 -21.2890625 4.39453125 C-19.40104167 3.8671875 -17.51302083 3.33984375 -15.625 2.8125 C-14.18833984 2.40354492 -14.18833984 2.40354492 -12.72265625 1.98632812 C-11.79582031 1.72916016 -10.86898438 1.47199219 -9.9140625 1.20703125 C-9.0885791 0.9747583 -8.2630957 0.74248535 -7.41259766 0.50317383 C-4.8771389 -0.02562404 -2.5825727 -0.08884602 0 0 Z \",fill:\"#475649\",transform:\"translate(601,184)\"})),_path97||(_path97=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.078125 1.3984375 1.078125 1.3984375 2.25 3.375 C2.90355469 4.45587891 2.90355469 4.45587891 3.5703125 5.55859375 C4.57497483 7.27420566 5.56883114 8.9961691 6.5546875 10.72265625 C7.33199219 12.06650391 7.33199219 12.06650391 8.125 13.4375 C8.60195313 14.28183594 9.07890625 15.12617187 9.5703125 15.99609375 C10.91688338 18.29930511 10.91688338 18.29930511 14 19 C15.0625 21.109375 15.0625 21.109375 16 23.75 C18.41220871 30.14918009 21.07810077 34.20430332 26 39 C28 42 28 42 28 46 C28.66 46 29.32 46 30 46 C30.50403768 47.29009643 31.00309926 48.58213789 31.5 49.875 C31.7784375 50.59429688 32.056875 51.31359375 32.34375 52.0546875 C33 54 33 54 33 56 C33.66 56 34.32 56 35 56 C35.495 57.98 35.495 57.98 36 60 C37.32 60 38.64 60 40 60 C40 61.32 40 62.64 40 64 C40.66 64 41.32 64 42 64 C42 65.32 42 66.64 42 68 C42.66 68 43.32 68 44 68 C46 71 46 71 46 74 C46.66 74 47.32 74 48 74 C48.66 75.98 49.32 77.96 50 80 C50.66 80 51.32 80 52 80 C52 81.32 52 82.64 52 84 C52.66 84 53.32 84 54 84 C54 85.32 54 86.64 54 88 C54.598125 88.23074219 55.19625 88.46148438 55.8125 88.69921875 C58.57784751 90.34361289 59.45389139 92.01017815 61 94.8125 C62.67243585 97.75836417 64.23665624 100.2927064 66.375 102.9375 C68 105 68 105 68 108 C61.4 108 54.8 108 48 108 C46.828125 105.03776042 45.65625 102.07552083 44.484375 99.11328125 C42.98054235 95.95919013 41.22236792 93.67812696 39 91 C38.03932 89.40062615 37.12318242 87.77377386 36.25 86.125 C35.73695313 85.16207031 35.22390625 84.19914063 34.6953125 83.20703125 C34.13585937 82.14871094 33.57640625 81.09039063 33 80 C32.37867188 78.84886719 31.75734375 77.69773437 31.1171875 76.51171875 C27.2224745 69.2903923 23.49548999 62.00476791 19.86865234 54.64550781 C17.56742377 50.02025494 15.02168798 45.61571051 12.30078125 41.22265625 C10.61585135 38.34360185 9.30454985 35.37193699 8.01171875 32.30078125 C6.50063754 28.86438422 4.7224284 25.57116879 2.953125 22.26171875 C2 20 2 20 2 16 C1.01 16 0.02 16 -1 16 C-1 14.68 -1 13.36 -1 12 C-1.66 12 -2.32 12 -3 12 C-3.99 9.03 -4.98 6.06 -6 3 C-7.65 2.67 -9.3 2.34 -11 2 C-11 1.67 -11 1.34 -11 1 C-9.54182203 0.83197949 -8.0834516 0.66562857 -6.625 0.5 C-5.81289063 0.4071875 -5.00078125 0.314375 -4.1640625 0.21875 C-2 0 -2 0 0 0 Z \",fill:\"#291A1A\",transform:\"translate(432,518)\"})),_path98||(_path98=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.99998437 -0.02927916 7.99994076 -0.04689219 12 -0.0625 C13.12535156 -0.07087891 14.25070312 -0.07925781 15.41015625 -0.08789062 C21.35253526 -0.105266 27.15030721 -0.11791004 33 1 C33.495 1.99 33.495 1.99 34 3 C36.32156597 3.40729228 38.6568787 3.74438677 41 4 C37.11236713 7.66194631 34.67741882 8.47107899 29.375 8.5625 C24.93779124 8.43635217 24.93779124 8.43635217 21.31494141 10.52319336 C20.66404541 11.25421265 20.66404541 11.25421265 20 12 C28.62411363 15.69463745 37.22481701 15.52128169 46.4375 15.625 C48.78176918 15.6615578 51.12587397 15.70211765 53.46998596 15.74765015 C54.92003133 15.77477771 56.37019795 15.79617178 57.82041931 15.81118774 C62.77857156 15.88928578 62.77857156 15.88928578 65 17 C64.67 19.97 64.34 22.94 64 26 C58.06 26 52.12 26 46 26 C46 25.34 46 24.68 46 24 C45.505 25.485 45.505 25.485 45 27 C43.99735107 27.03963867 42.99470215 27.07927734 41.96166992 27.12011719 C38.19041684 27.27392587 34.42054029 27.45106978 30.65063477 27.63476562 C29.02851828 27.71065412 27.4061046 27.7804718 25.78344727 27.84375 C16.99852319 28.19048768 9.15382754 28.63165155 0.9621582 32.16894531 C-1 33 -1 33 -3 33 C-2.67 31.35 -2.34 29.7 -2 28 C-5.68084338 26.77305221 -9.35391347 26.38949492 -13.1875 25.9375 C-13.93708984 25.84662109 -14.68667969 25.75574219 -15.45898438 25.66210938 C-17.30565535 25.4386269 -19.15278554 25.21894487 -21 25 C-20.1875 21.1875 -20.1875 21.1875 -18.5 19.5 C-14.81647694 17.28988617 -10.95108743 15.68502258 -7 14 C-6.67 10.04 -6.34 6.08 -6 2 C-4.02 1.67 -2.04 1.34 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#442A1E\",transform:\"translate(369,434)\"})),_path99||(_path99=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.9609375 -0.35644531 1.9609375 -0.35644531 4.375 -0.328125 C5.27009277 -0.32361328 6.16518555 -0.31910156 7.08740234 -0.31445312 C8.52913818 -0.28254883 8.52913818 -0.28254883 10 -0.25 C11.46687256 -0.23356445 11.46687256 -0.23356445 12.96337891 -0.21679688 C21.99033932 -0.08221895 30.99479796 0.37741813 40 1 C40 3.31 40 5.62 40 8 C29.98707052 9.09945892 20.05598201 9.10055982 10 9 C10.99 11.97 11.98 14.94 13 18 C14.02154175 17.98428955 14.02154175 17.98428955 15.0637207 17.96826172 C18.14660966 17.92671122 21.22943971 17.90067689 24.3125 17.875 C25.38435547 17.85824219 26.45621094 17.84148437 27.56054688 17.82421875 C28.58857422 17.81777344 29.61660156 17.81132812 30.67578125 17.8046875 C31.62364502 17.79421387 32.57150879 17.78374023 33.5480957 17.77294922 C36 18 36 18 39 20 C38.34 20.33 37.68 20.66 37 21 C37.33 21.33 37.66 21.66 38 22 C38 23.98 38 25.96 38 28 C30.41 28 22.82 28 15 28 C15.66 29.65 16.32 31.3 17 33 C23.6 33.33 30.2 33.66 37 34 C37 37.3 37 40.6 37 44 C38.98 44.495 38.98 44.495 41 45 C42.703125 47.28515625 42.703125 47.28515625 44.25 50.0625 C44.77078125 50.98160156 45.2915625 51.90070313 45.828125 52.84765625 C46.21484375 53.55792969 46.6015625 54.26820313 47 55 C40.375 55.125 40.375 55.125 37 54 C37 52.35 37 50.7 37 49 C31.72 48.67 26.44 48.34 21 48 C20.67 49.98 20.34 51.96 20 54 C15.80530429 53.40075776 11.99000166 52.42500059 8 51 C8 50.34 8 49.68 8 49 C9.093125 48.855625 10.18625 48.71125 11.3125 48.5625 C14.93122987 48.11711896 14.93122987 48.11711896 18 47 C18 45.02 18 43.04 18 41 C17.34 41 16.68 41 16 41 C16 42.32 16 43.64 16 45 C15.01 45 14.02 45 13 45 C13.495 40.05 13.495 40.05 14 35 C13.01 35.66 12.02 36.32 11 37 C8.8125 36.625 8.8125 36.625 7 36 C7 35.34 7 34.68 7 34 C6.01 33.505 6.01 33.505 5 33 C5.66 33 6.32 33 7 33 C6.67 32.34 6.34 31.68 6 31 C5.01 31 4.02 31 3 31 C3 30.34 3 29.68 3 29 C1.68 29 0.36 29 -1 29 C-1 28.34 -1 27.68 -1 27 C-3.64 27 -6.28 27 -9 27 C-9.66 28.32 -10.32 29.64 -11 31 C-11.33 30.34 -11.66 29.68 -12 29 C-20.58 29 -29.16 29 -38 29 C-38 26.36 -38 23.72 -38 21 C-36.78098999 21.00785522 -36.78098999 21.00785522 -35.53735352 21.01586914 C-31.87907678 21.03656994 -28.22081233 21.04963803 -24.5625 21.0625 C-23.28310547 21.07087891 -22.00371094 21.07925781 -20.68554688 21.08789062 C-19.47060547 21.09111328 -18.25566406 21.09433594 -17.00390625 21.09765625 C-15.87799072 21.10289307 -14.7520752 21.10812988 -13.59204102 21.11352539 C-11.07029129 21.29545448 -11.07029129 21.29545448 -10 20 C-19.57 20 -29.14 20 -39 20 C-39 19.34 -39 18.68 -39 18 C-35.06731133 17.97526132 -31.13465287 17.95712165 -27.2019043 17.94506836 C-25.20685232 17.93757271 -23.21182214 17.92486655 -21.21679688 17.91210938 C-19.96318359 17.90888672 -18.70957031 17.90566406 -17.41796875 17.90234375 C-16.26063232 17.89710693 -15.1032959 17.89187012 -13.91088867 17.88647461 C-11 18 -11 18 -8 19 C-8 20.65 -8 22.3 -8 24 C-5.03 24 -2.06 24 1 24 C1 21.69 1 19.38 1 17 C1.66 17 2.32 17 3 17 C3 19.31 3 21.62 3 24 C5.64 24 8.28 24 11 24 C9.29218989 16.77464952 7.45380564 9.60986942 4 3 C2.02 3 0.04 3 -2 3 C-1.34 2.01 -0.68 1.02 0 0 Z \",fill:\"#E57D4F\",transform:\"translate(310,289)\"})),_path100||(_path100=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.66 1.98 1.32 3 2 C3.1875 4.625 3.1875 4.625 3 7 C3.66 7 4.32 7 5 7 C6.8815863 16.32509434 8.47703913 25.47850555 9 35 C7.68 35 6.36 35 5 35 C5 31.7 5 28.4 5 25 C-1.6 25 -8.2 25 -15 25 C-15 25.99 -15 26.98 -15 28 C-10.545 28.99 -10.545 28.99 -6 30 C-5.505 31.98 -5.505 31.98 -5 34 C-7.77206426 36.77206426 -9.56563895 36.34062615 -13.44921875 36.484375 C-14.42372734 36.52053925 -14.42372734 36.52053925 -15.41792297 36.55743408 C-16.8022982 36.60581837 -18.18685613 36.64919103 -19.5715332 36.68798828 C-21.63522197 36.74846791 -23.69700443 36.83196858 -25.75976562 36.91796875 C-35.05166084 37.24439663 -43.82092572 36.51287961 -53 35 C-52.67 34.34 -52.34 33.68 -52 33 C-51.97445924 31.25520093 -52.01058609 29.50930347 -52.078125 27.765625 C-52.10390625 26.71632813 -52.1296875 25.66703125 -52.15625 24.5859375 C-52.21832521 22.37709475 -52.29623412 20.16863539 -52.390625 17.9609375 C-52.56734191 8.92628536 -52.56734191 8.92628536 -49.75390625 5.2578125 C-47 3 -47 3 -44.76171875 2.4140625 C-44.07722656 2.48367188 -43.39273437 2.55328125 -42.6875 2.625 C-41.470625 2.74875 -40.25375 2.8725 -39 3 C-38.01 4.98 -37.02 6.96 -36 9 C-35.01 8.34 -34.02 7.68 -33 7 C-33 9.64 -33 12.28 -33 15 C-32.34 15 -31.68 15 -31 15 C-31 15.66 -31 16.32 -31 17 C-30.03578125 16.97679687 -29.0715625 16.95359375 -28.078125 16.9296875 C-26.18320312 16.90261719 -26.18320312 16.90261719 -24.25 16.875 C-22.99703125 16.85179687 -21.7440625 16.82859375 -20.453125 16.8046875 C-17.27179508 16.98462698 -15.63478104 17.31001418 -13 19 C-11.01063133 14.09289062 -10.69619331 9.61879543 -10.5390625 4.390625 C-10 2 -10 2 -8.15234375 0.6875 C-5.30503786 -0.22198428 -2.97129275 -0.25287598 0 0 Z \",fill:\"#050408\",transform:\"translate(337,463)\"})),_path101||(_path101=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C9.24 1.67 18.48 1.34 28 1 C28 13.87 28 26.74 28 40 C27.34 40 26.68 40 26 40 C26.185625 40.78375 26.37125 41.5675 26.5625 42.375 C27.11687121 46.96836149 26.98237033 51.46401177 26 56 C25.01 56.495 25.01 56.495 24 57 C24 58.98 24 60.96 24 63 C22.02 63.495 22.02 63.495 20 64 C20 67.3 20 70.6 20 74 C19.67 74 19.34 74 19 74 C19 68.72 19 63.44 19 58 C19.66 58 20.32 58 21 58 C21.88835139 49.80516769 22.49092403 41.59722616 23.0625 33.375 C23.15337891 32.08464844 23.24425781 30.79429687 23.33789062 29.46484375 C23.5598992 26.30998505 23.78057179 23.15503904 24 20 C23.45794922 20.1546875 22.91589844 20.309375 22.35742188 20.46875 C19.6534088 21.07810506 17.04621775 21.30059473 14.28125 21.5 C13.18425781 21.5825 12.08726562 21.665 10.95703125 21.75 C8.65234375 21.91666667 6.34765625 22.08333333 4.04296875 22.25 C2.94597656 22.3325 1.84898437 22.415 0.71875 22.5 C-0.28220703 22.5721875 -1.28316406 22.644375 -2.31445312 22.71875 C-5.24684458 22.962425 -5.24684458 22.962425 -9 24 C6.84 24.495 6.84 24.495 23 25 C23 25.33 23 25.66 23 26 C19.34634644 26.85005407 16.03827675 27.09784309 12.29174805 27.02172852 C11.17096359 27.00163223 10.05017914 26.98153595 8.89543152 26.96083069 C7.6963063 26.93379562 6.49718109 26.90676056 5.26171875 26.87890625 C4.02581497 26.85529526 2.78991119 26.83168427 1.51655579 26.80735779 C-1.75665742 26.7438506 -5.02972734 26.67562859 -8.30279541 26.60510254 C-11.64775068 26.53419481 -14.99282135 26.46960547 -18.33789062 26.40429688 C-24.8920553 26.27525512 -31.44604818 26.13941888 -38 26 C-38 22.37 -38 18.74 -38 15 C-37.67 15.66 -37.34 16.32 -37 17 C-31.29086337 15.28725901 -26.51392805 12.66018258 -21.5 9.5 C-20.86433105 9.10820557 -20.22866211 8.71641113 -19.57373047 8.31274414 C-17.56937326 7.05610096 -17.56937326 7.05610096 -15 5 C-15 4.01 -15 3.02 -15 2 C-9.77487721 0.53329887 -5.4185766 -0.22577402 0 0 Z \",fill:\"#030408\",transform:\"translate(262,406)\"})),_path102||(_path102=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-17.70290416 3.49529192 -35.23378532 4.30469761 -53 4 C-53 4.66 -53 5.32 -53 6 C-51.68 6 -50.36 6 -49 6 C-48.97107615 10.12498538 -48.95322733 14.24994485 -48.9375 18.375 C-48.92912109 19.550625 -48.92074219 20.72625 -48.91210938 21.9375 C-48.90888672 23.05898438 -48.90566406 24.18046875 -48.90234375 25.3359375 C-48.89710693 26.37282715 -48.89187012 27.4097168 -48.88647461 28.47802734 C-49 31 -49 31 -50 33 C-59.55428818 33.09438924 -69.08270904 33.10632906 -78.625 32.5625 C-79.35259521 32.52326416 -80.08019043 32.48402832 -80.82983398 32.44360352 C-85.87373399 32.12626601 -85.87373399 32.12626601 -87 31 C-87.08737645 29.14630389 -87.10698153 27.28932459 -87.09765625 25.43359375 C-87.09282227 23.7465332 -87.09282227 23.7465332 -87.08789062 22.02539062 C-87.07532227 20.24938477 -87.07532227 20.24938477 -87.0625 18.4375 C-87.05798828 17.24962891 -87.05347656 16.06175781 -87.04882812 14.83789062 C-87.03699675 11.89187774 -87.02051287 8.94596319 -87 6 C-95.58035338 6.10793527 -104.16062539 6.22065269 -112.74083614 6.33933926 C-116.72571695 6.39431312 -120.71060535 6.44768968 -124.69555664 6.49731445 C-128.54706698 6.54533795 -132.39849716 6.59768966 -136.24991035 6.65294075 C-137.71335393 6.6731937 -139.17681933 6.69193283 -140.64030266 6.70907402 C-148.14845931 6.79799108 -155.55006935 6.9862322 -163 8 C-163 7.34 -163 6.68 -163 6 C-159.80026268 4.93342089 -157.39442605 4.82558644 -154.02832031 4.75048828 C-152.77914322 4.7200946 -151.52996613 4.68970093 -150.24293518 4.65838623 C-149.23074512 4.63700718 -149.23074512 4.63700718 -148.19810677 4.61519623 C-146.02912224 4.56927503 -143.86033546 4.5176647 -141.69151306 4.46466064 C-138.53587239 4.38801704 -135.38019101 4.31359501 -132.22445679 4.24090576 C-123.75474228 4.04485799 -115.28550536 3.83029252 -106.81640625 3.609375 C-105.93658396 3.58646267 -105.05676167 3.56355034 -104.15027809 3.5399437 C-79.69885372 2.89676675 -55.25968173 1.93264254 -30.81933594 0.96533203 C-29.99968133 0.9329821 -29.18002672 0.90063217 -28.3355341 0.86730194 C-24.49321497 0.71558433 -20.65095804 0.56261565 -16.80882263 0.40631104 C-15.45352272 0.35206662 -14.09822188 0.29784565 -12.74291992 0.24365234 C-11.57903244 0.19639008 -10.41514496 0.14912781 -9.21598816 0.10043335 C-6.14143182 0.00441683 -3.07580682 -0.01816482 0 0 Z \",fill:\"#553314\",transform:\"translate(626,255)\"})),_path103||(_path103=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1.32 0.33 -2.64 0.66 -4 1 C-4 1.66 -4 2.32 -4 3 C-3.24976563 2.95359375 -2.49953125 2.9071875 -1.7265625 2.859375 C5.77917484 2.59468905 11.27343192 3.66647953 18 7 C18 8.65 18 10.3 18 12 C17.30479248 12.01981934 16.60958496 12.03963867 15.89331055 12.06005859 C12.49120278 12.16006371 9.08934719 12.26647939 5.6875 12.375 C4.37354248 12.41681396 3.05958496 12.45862793 1.70581055 12.50170898 C-5.09927915 12.73072278 -11.88655726 13.03321881 -18.6796875 13.51171875 C-36.40419015 14.75104835 -54.07960129 15.23607046 -71.84951782 15.29855347 C-74.36661019 15.30770013 -76.8836907 15.32163303 -79.40072632 15.34085083 C-95.84624976 15.45202788 -111.73545639 14.46670045 -128 12 C-128.33 8.04 -128.66 4.08 -129 0 C-125.01476968 0.50237543 -121.03142272 1.01761018 -117.04931641 1.54418945 C-115.697874 1.72112955 -114.34598679 1.89470925 -112.99365234 2.06469727 C-111.03626464 2.31135994 -109.08060493 2.5716115 -107.125 2.83203125 C-105.36542969 3.05983276 -105.36542969 3.05983276 -103.5703125 3.29223633 C-100.76398183 3.84855147 -98.76644151 4.46345605 -96.19140625 5.5546875 C-91.40161174 7.43858839 -86.90485235 7.38064896 -81.8125 7.29296875 C-80.86938965 7.28872391 -79.9262793 7.28447906 -78.95458984 7.28010559 C-75.96942482 7.2634357 -72.98495782 7.22580575 -70 7.1875 C-67.96485356 7.17243804 -65.92969645 7.15875229 -63.89453125 7.14648438 C-58.9294223 7.11357055 -53.96482913 7.06186999 -49 7 C-49 6.67 -49 6.34 -49 6 C-47.88625 5.87625 -46.7725 5.7525 -45.625 5.625 C-41.96896323 5.3534187 -41.96896323 5.3534187 -40 3 C-37.08522088 2.7647931 -34.23168805 2.62990727 -31.3125 2.5625 C-23.66963227 2.29707732 -16.62093159 1.33523302 -9.19921875 -0.4765625 C-5.81915218 -1.02958926 -3.32085966 -0.75359902 0 0 Z \",fill:\"#060608\",transform:\"translate(608,405)\"})),_path104||(_path104=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.495 1.485 0.495 1.485 1 3 C2.918125 2.938125 2.918125 2.938125 4.875 2.875 C7.0546875 2.8046875 7.0546875 2.8046875 9 3 C11 5 11 5 11.1953125 8.9140625 C11.18200376 10.48449351 11.15813602 12.05486221 11.125 13.625 C11.11597656 14.42679687 11.10695313 15.22859375 11.09765625 16.0546875 C11.07406223 18.03658523 11.03819065 20.01832981 11 22 C-12.0576218 22.83716356 -34.95678217 23.5584785 -58 22 C-57.34 21.67 -56.68 21.34 -56 21 C-56 18.69 -56 16.38 -56 14 C-63.26 14 -70.52 14 -78 14 C-77.67 13.34 -77.34 12.68 -77 12 C-74.21817162 11.29515261 -71.48984014 10.71445207 -68.671875 10.1953125 C-67.81949249 10.03114838 -66.96710999 9.86698425 -66.08889771 9.69784546 C-63.31083217 9.16492896 -60.53060339 8.64449853 -57.75 8.125 C-55.85291115 7.7655867 -53.95593822 7.40556104 -52.05908203 7.04492188 C-49.2530157 6.51186105 -46.44679017 5.97978065 -43.63980103 5.45159912 C-38.79453248 4.53889605 -33.958846 3.59660134 -29.1328125 2.5859375 C-19.25284456 0.53098783 -10.11346008 -0.55926968 0 0 Z \",fill:\"#583732\",transform:\"translate(426,242)\"})),_path105||(_path105=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.495 2.475 0.495 2.475 1 5 C-2.32514673 6.13357275 -5.5879008 7.1469752 -9 8 C3.54 7.67 16.08 7.34 29 7 C29 7.33 29 7.66 29 8 C26.08397391 8.50400451 23.16727908 9.00334666 20.25 9.5 C19.0125 9.71462891 19.0125 9.71462891 17.75 9.93359375 C16.95078125 10.06894531 16.1515625 10.20429688 15.328125 10.34375 C14.5949707 10.46943359 13.86181641 10.59511719 13.10644531 10.72460938 C11 11 11 11 7 11 C6.34 12.65 5.68 14.3 5 16 C6.28583984 15.52820313 6.28583984 15.52820313 7.59765625 15.046875 C15.28047983 12.68292928 23.45274059 12.01619977 31 15 C31 15.66 31 16.32 31 17 C25.39 17.99 19.78 18.98 14 20 C14 19.34 14 18.68 14 18 C5.67082454 17.53148388 -1.2696069 18.05726341 -9.31225586 20.28710938 C-15.6648655 22.01118389 -22.07225498 23.16747389 -28.5625 24.25 C-29.58585449 24.42499023 -30.60920898 24.59998047 -31.66357422 24.78027344 C-45.75524839 27.08673221 -45.75524839 27.08673221 -51.5 24 C-55.607134 22.06071244 -58.39143267 21.35318353 -63 22 C-65.64436355 22.97594428 -68.20599457 24.04220557 -70.765625 25.22265625 C-73 26 -73 26 -76 25 C-73.58969913 21.7288774 -71.83407374 19.4386259 -68 18 C-59.78797008 17.63393626 -52.48372825 19.83267407 -45 23 C-45 21.02 -45 19.04 -45 17 C-46.98 16.67 -48.96 16.34 -51 16 C-47.53777385 14.93276039 -44.35960734 14.89826514 -40.75 14.9375 C-39.13351562 14.95103516 -39.13351562 14.95103516 -37.484375 14.96484375 C-36.66453125 14.97644531 -35.8446875 14.98804688 -35 15 C-35 14.01 -35 13.02 -35 12 C-35.95261719 12.01160156 -36.90523438 12.02320313 -37.88671875 12.03515625 C-39.14097656 12.04417969 -40.39523437 12.05320312 -41.6875 12.0625 C-42.92886719 12.07410156 -44.17023438 12.08570313 -45.44921875 12.09765625 C-49 12 -49 12 -51.40625 11.5 C-55.20719183 10.76728832 -58.95218594 10.89543455 -62.8125 10.9375 C-63.60076172 10.94201172 -64.38902344 10.94652344 -65.20117188 10.95117188 C-67.13414761 10.96288688 -69.06708393 10.98082002 -71 11 C-63.58515823 2.81629797 -51.04152085 2.78782277 -40.75 1.75 C-39.95807251 1.66528442 -39.16614502 1.58056885 -38.35021973 1.49328613 C-25.54230431 0.12570186 -12.88411712 -0.51082403 0 0 Z \",fill:\"#250F0A\",transform:\"translate(433,473)\"})),_path106||(_path106=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1 3 1 3 -0.2578125 5.890625 C-0.87398438 6.99921875 -1.49015625 8.1078125 -2.125 9.25 C-2.44831299 9.83410645 -2.77162598 10.41821289 -3.10473633 11.02001953 C-5.48051769 15.24873372 -8.11971242 19.10771948 -11 23 C-13.80689525 27.59310132 -16.02789056 32.20022904 -18.0703125 37.1796875 C-19 39 -19 39 -21 40 C-21.72693904 41.97888961 -22.39816251 43.97954558 -23 46 C-21.68 45.34 -20.36 44.68 -19 44 C-20.26207656 47.49498124 -21.78492852 50.04657136 -24 53 C-24.67349161 54.66392045 -25.3409159 56.33032028 -26 58 C-26.99 58.99 -26.99 58.99 -28 60 C-28.72475102 61.68010465 -29.44643952 63.36172495 -30.140625 65.0546875 C-31.52155826 68.18061825 -33.26814958 71.05585429 -35 74 C-35.33 74.66 -35.66 75.32 -36 76 C-36.99 76 -37.98 76 -39 76 C-38.53680089 71.27536912 -37.90108294 67.82942948 -35 64 C-34.34 64 -33.68 64 -33 64 C-32.81824219 63.41992188 -32.63648438 62.83984375 -32.44921875 62.2421875 C-30.9581894 57.60852707 -29.31666424 53.30237645 -27 49 C-27.33 48.67 -27.66 48.34 -28 48 C-33.03145468 54.63890643 -37.49012407 61.33329341 -41.45703125 68.6640625 C-43 71 -43 71 -46 72 C-44.44777764 67.99009223 -42.69622277 64.08951146 -40.90234375 60.18359375 C-40.05457328 58.13206262 -39.47607428 56.16442017 -39 54 C-39.433125 54.804375 -39.86625 55.60875 -40.3125 56.4375 C-42 59 -42 59 -45 60 C-46.20882096 62.00016466 -46.20882096 62.00016466 -47 64 C-47.66 64 -48.32 64 -49 64 C-49.144375 64.7425 -49.28875 65.485 -49.4375 66.25 C-49.90187492 68.52027739 -50.41863569 70.75759479 -51 73 C-51.66 73 -52.32 73 -53 73 C-53.268125 73.763125 -53.53625 74.52625 -53.8125 75.3125 C-54.99092624 77.97946464 -55.99148055 78.99148055 -58 81 C-59.04622875 82.97620986 -60.05439935 84.9737129 -61 87 C-61.66 87 -62.32 87 -63 87 C-63.33 88.65 -63.66 90.3 -64 92 C-74.56 92 -85.12 92 -96 92 C-96 90 -96 90 -94.0625 88 C-93.39347656 87.35998047 -93.39347656 87.35998047 -92.7109375 86.70703125 C-88.96723198 82.971873 -85.5176562 78.94682558 -82 75 C-82 78.20395416 -82.74335022 80.09399739 -84 83 C-79.02350414 80.37351608 -75.80420129 77.41260386 -74 72 C-72.37109375 70.39453125 -72.37109375 70.39453125 -70.4375 68.8125 C-69.79683594 68.28269531 -69.15617187 67.75289062 -68.49609375 67.20703125 C-68.00238281 66.80871094 -67.50867188 66.41039062 -67 66 C-66.505 66.99 -66.505 66.99 -66 68 C-66.55429688 68.73605469 -67.10859375 69.47210937 -67.6796875 70.23046875 C-68.40414062 71.20628906 -69.12859375 72.18210937 -69.875 73.1875 C-70.59429687 74.15042969 -71.31359375 75.11335937 -72.0546875 76.10546875 C-73.81693872 78.72761363 -74.90345494 81.06106167 -76 84 C-76.66 84.99 -77.32 85.98 -78 87 C-77.319375 86.29875 -76.63875 85.5975 -75.9375 84.875 C-73.86634317 82.77433951 -71.68860363 80.95230478 -69.375 79.125 C-65.80672485 76.13977634 -64.48619988 73.37117611 -63 69 C-62.34 69 -61.68 69 -61 69 C-60.505 67.515 -60.505 67.515 -60 66 C-58.66666667 64.66666667 -57.33333333 63.33333333 -56 62 C-54.48556363 59.95774398 -53.01257638 57.89311272 -51.5625 55.8046875 C-49.86068144 53.83908707 -48.37959752 52.99491793 -46 52 C-46.66 54.31 -47.32 56.62 -48 59 C-44.69453446 55.95838537 -42.48475986 52.78810054 -40.1875 48.9375 C-39.49139581 47.78614959 -38.79477097 46.63511383 -38.09765625 45.484375 C-37.74977051 44.90623047 -37.40188477 44.32808594 -37.04345703 43.73242188 C-35.42154746 41.03961178 -33.78235599 38.35864578 -32.125 35.6875 C-31.57070312 34.78386719 -31.01640625 33.88023437 -30.4453125 32.94921875 C-29.96835938 32.30597656 -29.49140625 31.66273438 -29 31 C-28.34 31 -27.68 31 -27 31 C-26.64228516 29.92685547 -26.64228516 29.92685547 -26.27734375 28.83203125 C-24.79950243 25.55547176 -22.96698878 23.35257377 -20.5625 20.6875 C-19.78003906 19.80449219 -18.99757813 18.92148437 -18.19140625 18.01171875 C-15.5223632 15.56152771 -14.44657064 16 -11 16 C-9.57973329 14.21896847 -9.57973329 14.21896847 -8.1875 11.9375 C-5.5667359 7.86791053 -2.83686172 3.92154414 0 0 Z \",fill:\"#613F30\",transform:\"translate(140,534)\"})),_path107||(_path107=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1.8125 2.5 -1.8125 2.5 -4 5 C-4.99 5 -5.98 5 -7 5 C-7 5.66 -7 6.32 -7 7 C-7.66 7 -8.32 7 -9 7 C-9.495 6.01 -9.495 6.01 -10 5 C-10.09796875 5.86882812 -10.1959375 6.73765625 -10.296875 7.6328125 C-11.47030455 16.67631266 -12.98956275 21.8941353 -20 28 C-23.04072853 29.01357618 -25.07527659 29.1154568 -28.25390625 29.09765625 C-29.27291016 29.09443359 -30.29191406 29.09121094 -31.34179688 29.08789062 C-32.40462891 29.07951172 -33.46746094 29.07113281 -34.5625 29.0625 C-35.62919922 29.05798828 -36.69589844 29.05347656 -37.79492188 29.04882812 C-40.52999411 29.03670304 -43.26496911 29.01894671 -46 29 C-46.66 29 -47.32 29 -48 29 C-45.41909233 30.31746333 -42.83549542 31.62909617 -40.25 32.9375 C-39.52039063 33.31068359 -38.79078125 33.68386719 -38.0390625 34.06835938 C-37.33007812 34.42607422 -36.62109375 34.78378906 -35.890625 35.15234375 C-35.24125977 35.48226318 -34.59189453 35.81218262 -33.92285156 36.15209961 C-29.50999658 38.0979916 -25.55214149 38.10696427 -20.75 38.0625 C-19.48671875 38.05347656 -18.2234375 38.04445313 -16.921875 38.03515625 C-15.47554688 38.01775391 -15.47554688 38.01775391 -14 38 C-14 37.34 -14 36.68 -14 36 C-12.02 36 -10.04 36 -8 36 C-7.773125 35.4225 -7.54625 34.845 -7.3125 34.25 C-5.66511725 31.42591529 -3.56545162 30.0023037 -1 28 C-0.443125 27.2575 0.11375 26.515 0.6875 25.75 C1.120625 25.1725 1.55375 24.595 2 24 C2.66 24 3.32 24 4 24 C4 29.28 4 34.56 4 40 C3.34 40 2.68 40 2 40 C2.495 42.97 2.495 42.97 3 46 C-0.4019487 48.09350689 -3.05272412 48.17942163 -7 48 C-5.88873341 49.33901792 -5.88873341 49.33901792 -3.05859375 49.09765625 C-1.86363281 49.08605469 -0.66867187 49.07445312 0.5625 49.0625 C1.76003906 49.05347656 2.95757812 49.04445313 4.19140625 49.03515625 C5.58166016 49.01775391 5.58166016 49.01775391 7 49 C7 49.66 7 50.32 7 51 C0.36382504 53.84407498 -7.95190127 56.39935276 -15 54 C-21.28379673 50.72054041 -27.01153985 46.65912801 -32.67578125 42.41796875 C-35.15598887 40.90483368 -37.13990931 40.38978227 -40 40 C-40 39.34 -40 38.68 -40 38 C-50.89 38 -61.78 38 -73 38 C-73 34.37 -73 30.74 -73 27 C-72.01 27 -71.02 27 -70 27 C-70 23.04 -70 19.08 -70 15 C-67.33333333 16.33333333 -64.66666667 17.66666667 -62 19 C-64.31 17.02 -66.62 15.04 -69 13 C-67.65925162 8.97775485 -65.2724102 7.60457138 -62 5 C-61.34 4.34 -60.68 3.68 -60 3 C-58.02728999 4.97271001 -58.6352328 8.72533112 -58.5 11.4375 C-58.42292674 16.36914431 -58.42292674 16.36914431 -57 21 C-54.6356149 22.10553772 -54.6356149 22.10553772 -51.8125 23.0625 C-50.87019531 23.40410156 -49.92789062 23.74570312 -48.95703125 24.09765625 C-43.00694343 25.91333694 -37.17646456 26.26288596 -31 26.375 C-30.21882813 26.41238281 -29.43765625 26.44976562 -28.6328125 26.48828125 C-24.53835008 26.55031856 -21.83555324 26.31839168 -18.5625 23.7265625 C-14.08745762 18.96500826 -13.75356378 16.30755602 -13.875 9.75 C-13.91625 7.5225 -13.9575 5.295 -14 3 C-19.28 3 -24.56 3 -30 3 C-30 2.34 -30 1.68 -30 1 C-19.96557967 0.12198822 -10.06394247 -0.1176305 0 0 Z \",fill:\"#645448\",transform:\"translate(410,367)\"})),_path108||(_path108=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C9.64682103 4.26990439 19.2744695 8.54437218 28.6875 13.3125 C37.34659339 17.69089613 45.62810727 21.41734898 55 24 C55 24.99 55 25.98 55 27 C56.2375 27.391875 57.475 27.78375 58.75 28.1875 C65.8585793 30.56439666 72.71864276 33.52356973 79.55078125 36.59765625 C88.27335085 40.52003757 97.09744941 43.95736178 106.11083984 47.15942383 C112.13513451 49.29990997 118.0780034 51.59163765 124 54 C124.87962402 54.32766357 125.75924805 54.65532715 126.66552734 54.99291992 C129 56 129 56 131 58 C133.57061311 58.64767793 133.57061311 58.64767793 136 59 C136 57.68 136 56.36 136 55 C142.27 55 148.54 55 155 55 C154.67 55.99 154.34 56.98 154 58 C151.36 58 148.72 58 146 58 C146 58.66 146 59.32 146 60 C145.34 60 144.68 60 144 60 C144 62.64 144 65.28 144 68 C139.53160785 68.21278058 136.17737474 67.59138085 132 66 C133.65 64.35 135.3 62.7 137 61 C136.31429932 60.98146973 135.62859863 60.96293945 134.92211914 60.94384766 C125.96597319 60.47383718 117.89747962 58.14259461 109.4375 55.375 C108.00823686 54.91691778 106.57879154 54.45940363 105.14916992 54.00244141 C94.65335426 50.62676076 84.28020836 46.98302445 74 43 C70.52205189 41.66347811 67.04244747 40.33130624 63.5625 39 C62.69085205 38.66556885 61.8192041 38.3311377 60.92114258 37.98657227 C53.98032597 35.33740071 46.98646422 32.8647587 39.96606445 30.43579102 C34.34654966 28.486849 28.780614 26.43460799 23.24609375 24.25390625 C20.74707476 23.28858123 18.24535394 22.36441468 15.72265625 21.46484375 C14.99079102 21.2006665 14.25892578 20.93648926 13.50488281 20.66430664 C12.0734955 20.14897533 10.63932607 19.64128934 9.20214844 19.14233398 C5.60056731 17.83539523 4.18745376 17.28118065 2 14 C2 13.01 2 12.02 2 11 C1.01 11.495 1.01 11.495 0 12 C0 8.04 0 4.08 0 0 Z \",fill:\"#E8BF93\",transform:\"translate(120,191)\"})),_path109||(_path109=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.87398438 0.03609375 1.74796875 0.0721875 2.6484375 0.109375 C3.30070312 0.15578125 3.95296875 0.2021875 4.625 0.25 C2.87639846 4.03596297 0.65329075 6.36591357 -2.375 9.25 C-3.426875 10.36375 -3.426875 10.36375 -4.5 11.5 C-6.375 13.25 -6.375 13.25 -9.375 14.25 C-11.1219369 16.01125389 -11.1219369 16.01125389 -12.8125 18.125 C-15.12534604 20.9293905 -17.31794768 23.25381389 -20.375 25.25 C-21.035 25.25 -21.695 25.25 -22.375 25.25 C-22.54 25.930625 -22.705 26.61125 -22.875 27.3125 C-24.76240127 31.00866082 -27.24336831 32.97728747 -30.40625 35.6015625 C-32.51123346 37.30761815 -32.51123346 37.30761815 -34.75 39.6875 C-36.375 41.25 -36.375 41.25 -38.375 41.25 C-37.88 44.22 -37.88 44.22 -37.375 47.25 C-38.035 47.25 -38.695 47.25 -39.375 47.25 C-39.375 47.91 -39.375 48.57 -39.375 49.25 C-40.035 49.25 -40.695 49.25 -41.375 49.25 C-41.4575 49.9925 -41.54 50.735 -41.625 51.5 C-42.52937599 54.81604529 -43.7464526 56.08531391 -46.375 58.25 C-47.365 58.58 -48.355 58.91 -49.375 59.25 C-51.9565979 61.69114828 -54.13189255 64.49942148 -56.375 67.25 C-57.19742188 68.23613281 -58.01984375 69.22226562 -58.8671875 70.23828125 C-59.70522188 71.28217425 -60.54117676 72.32774022 -61.375 73.375 C-62.15875 74.34695313 -62.9425 75.31890625 -63.75 76.3203125 C-65.74308349 79.91361206 -65.1258318 81.33494845 -64.375 85.25 C-65.640625 87.09375 -65.640625 87.09375 -67.625 88.75 C-71.67260083 92.42507827 -74.98611873 96.37172234 -78.3125 100.6875 C-78.79686523 101.31527344 -79.28123047 101.94304687 -79.78027344 102.58984375 C-80.23305664 103.17765625 -80.68583984 103.76546875 -81.15234375 104.37109375 C-83.375 107.25 -83.375 107.25 -84.375 108.25 C-86.56139453 108.32258946 -88.75000389 108.33373783 -90.9375 108.3125 C-92.13503906 108.30347656 -93.33257812 108.29445313 -94.56640625 108.28515625 C-95.95666016 108.26775391 -95.95666016 108.26775391 -97.375 108.25 C-96.68329755 104.77692559 -95.58507079 103.24576758 -92.9765625 100.8203125 C-90.17350838 98.07195212 -87.69103004 95.02767957 -85.14453125 92.04296875 C-84.56058594 91.45128906 -83.97664063 90.85960937 -83.375 90.25 C-82.715 90.25 -82.055 90.25 -81.375 90.25 C-81.01728516 89.41275391 -81.01728516 89.41275391 -80.65234375 88.55859375 C-79.08973098 85.73442204 -77.144932 83.66491932 -74.9375 81.3125 C-72.53613544 78.75289066 -70.49952497 76.46125295 -68.71484375 73.43359375 C-68.27269531 72.71300781 -67.83054687 71.99242187 -67.375 71.25 C-66.715 71.25 -66.055 71.25 -65.375 71.25 C-65.1275 70.30125 -64.88 69.3525 -64.625 68.375 C-63.375 65.25 -63.375 65.25 -61.25 63.875 C-60.63125 63.66875 -60.0125 63.4625 -59.375 63.25 C-59.705 62.59 -60.035 61.93 -60.375 61.25 C-61.365 61.58 -62.355 61.91 -63.375 62.25 C-62.00345496 59.29590299 -60.38636276 56.80991624 -58.375 54.25 C-59.035 54.25 -59.695 54.25 -60.375 54.25 C-57.76997897 47.85585746 -51.57533244 43.62288349 -46.5234375 39.18359375 C-44.77539107 37.61035196 -43.1240522 36.01037275 -41.5 34.3125 C-39.375 32.25 -39.375 32.25 -36.375 31.25 C-35.88 29.765 -35.88 29.765 -35.375 28.25 C-34.715 28.25 -34.055 28.25 -33.375 28.25 C-33.13491211 27.68539062 -32.89482422 27.12078125 -32.64746094 26.5390625 C-31.10864058 23.77083923 -29.2522907 21.86805878 -27.015625 19.625 C-26.14679688 18.75359375 -25.27796875 17.8821875 -24.3828125 16.984375 C-23.47273438 16.08203125 -22.56265625 15.1796875 -21.625 14.25 C-20.28308594 12.89648438 -20.28308594 12.89648438 -18.9140625 11.515625 C-6.98564785 -0.37760259 -6.98564785 -0.37760259 0 0 Z \",fill:\"#392420\",transform:\"translate(97.375,517.75)\"})),_path110||(_path110=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.93412394 0.52411028 8.58018255 2.18080105 12.8125 4.625 C20.92541571 9.14718976 29.36212618 12.61674465 38 16 C35.83929533 13.83929533 34.5219586 13.3377297 31.6875 12.3125 C25.14287006 9.79238628 19.11198868 6.41045136 13 3 C16.50740921 1.8308636 16.84254069 2.12618281 20 3.6875 C25.21289781 6.1522474 30.56361919 8.08964562 36 10 C36 10.66 36 11.32 36 12 C36.72574219 12.11730469 37.45148437 12.23460937 38.19921875 12.35546875 C41.05072738 13.01167366 43.22507471 13.96235724 45.8125 15.3125 C47.11380859 15.98345703 47.11380859 15.98345703 48.44140625 16.66796875 C49.28574219 17.10753906 50.13007812 17.54710937 51 18 C52.41516597 18.71132681 53.83170375 19.41993526 55.25 20.125 C55.89710938 20.44984375 56.54421875 20.7746875 57.2109375 21.109375 C58.75822124 21.87963852 60.31574435 22.62926904 61.875 23.375 C64.54279361 24.76225268 67.06385211 26.24236953 69.625 27.8125 C78.35640715 33.09591904 87.45276141 37.40922443 97 41 C94.26667107 38.85744037 91.53241997 37.12159688 88.453125 35.51953125 C87.60878906 35.07802734 86.76445313 34.63652344 85.89453125 34.18164062 C85.02183594 33.72982422 84.14914062 33.27800781 83.25 32.8125 C82.36183594 32.34908203 81.47367188 31.88566406 80.55859375 31.40820312 C78.37403255 30.26894272 76.18781392 29.13299777 74 28 C78.27800976 26.57399675 80.86765922 28.54362936 84.6875 30.4375 C85.38939453 30.77587891 86.09128906 31.11425781 86.81445312 31.46289062 C88.54723706 32.29981348 90.27419752 33.14877393 92 34 C92 34.66 92 35.32 92 36 C92.886875 36.28875 93.77375 36.5775 94.6875 36.875 C97.49042733 37.82693759 100.25155423 38.90062169 103 40 C103 47.59 103 55.18 103 63 C100.03 62.01 97.06 61.02 94 60 C94 59.34 94 58.68 94 58 C92.35 57.67 90.7 57.34 89 57 C89 56.34 89 55.68 89 55 C87.02 54.505 87.02 54.505 85 54 C85 53.34 85 52.68 85 52 C83.948125 51.9175 82.89625 51.835 81.8125 51.75 C77.53231112 50.90799563 76.28877017 49.75338898 73 47 C71.6001159 46.25905124 70.18038055 45.5552147 68.75 44.875 C61.58788668 41.41779943 54.83705241 37.25303265 48.01025391 33.18701172 C45.02554097 31.42460289 42.01457245 29.71075999 39 28 C40.32 27.67 41.64 27.34 43 27 C43 27.66 43 28.32 43 29 C45.31 29.33 47.62 29.66 50 30 C39.96618789 24.50219881 29.85699153 19.43523976 19.33886719 14.92016602 C18.52579102 14.56623779 17.71271484 14.21230957 16.875 13.84765625 C16.15054688 13.53836182 15.42609375 13.22906738 14.6796875 12.91040039 C13 12 13 12 12 10 C25.67249094 13.72061147 38.25936133 19.91649599 51 26 C51 26.66 51 27.32 51 28 C51.639375 28.103125 52.27875 28.20625 52.9375 28.3125 C57.06477326 29.23903073 61.00642949 30.61660629 65 32 C63.90300781 31.45730469 62.80601562 30.91460937 61.67578125 30.35546875 C60.22130061 29.6329203 58.7668765 28.91025804 57.3125 28.1875 C56.59126953 27.83107422 55.87003906 27.47464844 55.12695312 27.10742188 C52.13048543 25.61602928 49.20542385 24.1255536 46.34765625 22.37890625 C43.68245842 20.81349055 41.03121877 19.80008413 38.125 18.75 C30.54325884 15.90255875 23.30850246 12.47153867 16 9 C13.96081112 8.05712262 11.91940129 7.11902155 9.875 6.1875 C8.63363281 5.62095703 8.63363281 5.62095703 7.3671875 5.04296875 C4.93252022 3.97026881 2.4757867 2.97357448 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#6D4835\",transform:\"translate(523,429)\"})),_path111||(_path111=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 13.2 1 26.4 1 40 C5.57095789 37.71452106 9.17573753 35.58720532 13.25 32.625 C14.1315979 31.98776001 14.1315979 31.98776001 15.03100586 31.33764648 C17.0238342 29.89607536 19.01203177 28.44826502 21 27 C23.38720109 25.26517675 25.77537279 23.53171917 28.16503906 21.80029297 C29.73505302 20.66227267 31.30347661 19.5220543 32.87011719 18.37939453 C43.03627847 11 43.03627847 11 46 11 C46.2784375 10.1028125 46.2784375 10.1028125 46.5625 9.1875 C48.72273753 5.90018201 51.35107655 5.35145313 55 4 C51.67881566 11.25800284 46.26822689 16.76967694 39 20 C36.0625 20.25 36.0625 20.25 34 20 C33.75894531 20.59039062 33.51789063 21.18078125 33.26953125 21.7890625 C31.75571891 24.42542491 30.15111057 25.61113764 27.6875 27.375 C24.79926163 29.52266443 22.38314947 31.52065569 20.1875 34.375 C17.81689556 37.21972533 17.36282966 37.26438101 14 38 C13.195625 38.804375 12.39125 39.60875 11.5625 40.4375 C9 43 9 43 6.4375 43.9375 C3.70600754 44.85853004 3.70600754 44.85853004 2.125 47.9375 C-0.80170038 52.15539173 -4.27614213 53.47036097 -9.25 54.4375 C-11.19427133 54.86358233 -11.19427133 54.86358233 -12.2890625 56.91015625 C-14.39536463 59.48292255 -15.98093672 59.99676613 -19.125 61 C-22.85476031 62.25978606 -26.51075831 63.56114542 -30.125 65.125 C-30.84945313 65.43695313 -31.57390625 65.74890625 -32.3203125 66.0703125 C-34.18297076 66.89428482 -34.18297076 66.89428482 -35 69 C-27.16724554 68.62099575 -19.71400009 66.71400009 -14 61 C-12.68 61 -11.36 61 -10 61 C-9.67 60.01 -9.34 59.02 -9 58 C-8.2575 57.855625 -7.515 57.71125 -6.75 57.5625 C-5.8425 57.376875 -4.935 57.19125 -4 57 C-3.2575 56.855625 -2.515 56.71125 -1.75 56.5625 C-1.1725 56.376875 -0.595 56.19125 0 56 C0.495 55.01 0.495 55.01 1 54 C2.84765625 53.3671875 2.84765625 53.3671875 5.0625 52.875 C6.16271484 52.62363281 6.16271484 52.62363281 7.28515625 52.3671875 C8.13400391 52.18542969 8.13400391 52.18542969 9 52 C9 52.66 9 53.32 9 54 C6.8828125 55.5078125 6.8828125 55.5078125 4.125 57.125 C3.22007812 57.66382813 2.31515625 58.20265625 1.3828125 58.7578125 C-1 60 -1 60 -3 60 C-3 60.66 -3 61.32 -3 62 C-2.01 62.495 -2.01 62.495 -1 63 C-2.98 63.495 -2.98 63.495 -5 64 C-5 63.34 -5 62.68 -5 62 C-8.24849977 63.72226496 -8.24849977 63.72226496 -9 67 C-3.47878102 65.50655552 1.62494074 63.84492009 6.6796875 61.1640625 C9.68869519 59.65449299 12.77267055 58.36909664 15.875 57.0625 C20.88091285 54.94071798 25.75468539 52.68155293 30.59375 50.20703125 C33.99279285 48.5019919 37.45576264 46.95276823 40.92578125 45.3984375 C43.2482314 44.34197352 45.5540695 43.26470711 47.85546875 42.1640625 C48.85380737 41.68912354 48.85380737 41.68912354 49.87231445 41.20458984 C51.17897161 40.58176533 52.48360751 39.95467723 53.78588867 39.32275391 C60.47979926 36.14401647 64.83866832 35.90759347 72 37 C68.19901934 40.32842631 63.74933202 41.88934357 59.125 43.75 C53.29958271 46.14273948 47.59862699 48.61465559 42 51.5 C28.84798769 58.22112127 15.06207295 63.45258065 1.1875 68.46875 C-2.0941341 69.65783234 -5.33535734 70.91880365 -8.5625 72.25 C-17.85799227 76.00052905 -25.97896807 78.50525798 -36 76 C-34.02 75.505 -34.02 75.505 -32 75 C-32 74.34 -32 73.68 -32 73 C-32.99 73 -33.98 73 -35 73 C-36.60546875 71.03125 -36.60546875 71.03125 -38.1875 68.5 C-38.71730469 67.6646875 -39.24710937 66.829375 -39.79296875 65.96875 C-40.19128906 65.3190625 -40.58960938 64.669375 -41 64 C-39.87464844 63.52691406 -38.74929688 63.05382812 -37.58984375 62.56640625 C-27.2027267 58.12193507 -17.46342454 53.17951638 -8 47 C-7.39777618 46.68119873 -6.79555237 46.36239746 -6.17507935 46.03393555 C-3.34303608 44.38272636 -1.36065942 43.1452459 -0.34849548 39.93119812 C-0.09318257 37.37307849 -0.05661706 34.89475626 -0.09765625 32.32421875 C-0.08536484 31.3990596 -0.07307343 30.47390045 -0.06040955 29.52070618 C-0.02870081 26.57549516 -0.04494992 23.63278884 -0.0625 20.6875 C-0.04938985 18.68682571 -0.03314942 16.68616931 -0.01367188 14.68554688 C0.02716482 9.7898307 0.02500605 4.89580477 0 0 Z \",fill:\"#584539\",transform:\"translate(375,163)\"})),_path112||(_path112=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.33333333 0 6.66666667 0 10 0 C10 0.66 10 1.32 10 2 C11.32 2.66 12.64 3.32 14 4 C14 4.66 14 5.32 14 6 C14.99 6.33 15.98 6.66 17 7 C18.38576923 8.62332967 19.72641268 10.28724465 21 12 C19 13 19 13 16 13 C14.39919849 17.00200378 15.70720308 20.04556236 17 24 C15.576875 23.690625 15.576875 23.690625 14.125 23.375 C12.578125 23.189375 12.578125 23.189375 11 23 C8.8334403 24.75509765 8.8334403 24.75509765 8.77294922 26.87939453 C8.78342285 27.62302246 8.79389648 28.36665039 8.8046875 29.1328125 C8.81113281 29.93847656 8.81757813 30.74414062 8.82421875 31.57421875 C8.84097656 32.41597656 8.85773438 33.25773437 8.875 34.125 C8.88853516 35.39923828 8.88853516 35.39923828 8.90234375 36.69921875 C8.92594353 38.79959884 8.96181517 40.89983444 9 43 C9.495 42.505 9.495 42.505 10 42 C12.66666667 42 15.33333333 42 18 42 C18.33 41.01 18.66 40.02 19 39 C21 38.375 21 38.375 23 38 C23.33 37.67 23.66 37.34 24 37 C23.34 36.67 22.68 36.34 22 36 C22 35.34 22 34.68 22 34 C24.01822917 34.32552083 26.03645833 34.65104167 28.0546875 34.9765625 C29.01761719 34.98816406 29.01761719 34.98816406 30 35 C30.66 34.34 31.32 33.68 32 33 C32 32.01 32 31.02 32 30 C32.495 30.99 32.495 30.99 33 32 C34.94603274 32.59070014 34.94603274 32.59070014 37 33 C37.99 33.495 37.99 33.495 39 34 C39 34.66 39 35.32 39 36 C39.66 36 40.32 36 41 36 C40.67 37.98 40.34 39.96 40 42 C57.89820914 46.63330775 75.64898677 49.7686048 94 52 C94 52.33 94 52.66 94 53 C84.67299543 53.38222751 75.97645539 52.22492669 66.8125 50.5625 C64.21555978 50.10127109 61.61761937 49.64617053 59.01953125 49.19140625 C57.80990723 48.97887207 56.6002832 48.76633789 55.35400391 48.54736328 C52.4687935 48.07650568 49.60641937 47.69928149 46.69921875 47.40234375 C43 47 43 47 41 46 C43.73375078 49.65918392 47.73515755 50.3799727 51.9375 51.5 C52.72801758 51.71430664 53.51853516 51.92861328 54.33300781 52.14941406 C72.69391329 56.92137813 91.58813856 58.19991751 110.5 58.1875 C111.7979248 58.18669434 113.09584961 58.18588867 114.43310547 58.18505859 C128.95768823 58.093844 143.28075464 57.02581653 157.5703125 54.375 C161.08876339 53.83195935 164.44770228 53.86337316 168 54 C146.767181 68.15521267 105.23225359 61.57771524 80.4375 60.1875 C79.76241394 60.15274567 79.08732788 60.11799133 78.39178467 60.08218384 C70.98645596 59.68600978 64.79828206 58.99030964 58 56 C56.3443848 55.56022721 54.67874482 55.15349504 53 54.8125 C52.236875 54.65394531 51.47375 54.49539062 50.6875 54.33203125 C50.130625 54.22246094 49.57375 54.11289063 49 54 C49.495 57.465 49.495 57.465 50 61 C47.95880212 59.38405168 45.95927063 57.7143618 44 56 C44 55.34 44 54.68 44 54 C43.34 54 42.68 54 42 54 C42 53.34 42 52.68 42 52 C41.34 52 40.68 52 40 52 C38.37890625 50.35546875 38.37890625 50.35546875 36.5625 48.1875 C33.48379116 44.39371436 33.48379116 44.39371436 30 41 C23.8681318 41.24046542 18.53625713 43.50284899 12.9609375 45.86328125 C8.39355503 47.72374013 4.93470532 48.30841908 0 48 C0 47.34 0 46.68 0 46 C-1.32 45.67 -2.64 45.34 -4 45 C-2.02 44.505 -2.02 44.505 0 44 C0 42.68 0 41.36 0 40 C0.66 40 1.32 40 2 40 C2 32.08 2 24.16 2 16 C-0.31 16 -2.62 16 -5 16 C-6 15 -6 15 -6.1328125 12.56640625 C-6.13023437 11.57511719 -6.12765625 10.58382812 -6.125 9.5625 C-6.12757813 8.57378906 -6.13015625 7.58507812 -6.1328125 6.56640625 C-6 4 -6 4 -5 2 C-3.35 2 -1.7 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#8FA88D\",transform:\"translate(182,136)\"})),_path113||(_path113=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C8.36384658 1.47771141 15.9976634 5.39171982 23.65234375 8.94921875 C26.07437554 10.07975468 26.07437554 10.07975468 29 11 C29 19.25 29 27.5 29 36 C22 34 22 34 19 33 C16.94106379 32.77674186 14.87766347 32.59294241 12.8125 32.4375 C11.72582031 32.35371094 10.63914062 32.26992188 9.51953125 32.18359375 C8.68808594 32.12300781 7.85664062 32.06242187 7 32 C7 31.34 7 30.68 7 30 C7.99 29.505 7.99 29.505 9 29 C8.01 28.01 8.01 28.01 7 27 C10.96 26.34 14.92 25.68 19 25 C15.7 24.67 12.4 24.34 9 24 C10.32 23.67 11.64 23.34 13 23 C13 22.34 13 21.68 13 21 C6.45553244 19.69110649 0.54327778 19.65778917 -6 21 C-8.33301986 21.03824623 -10.66711508 21.04574284 -13 21 C-13 21.66 -13 22.32 -13 23 C-20.35575165 23.70776992 -27.6094524 24.14715692 -35 24 C-35.33 25.32 -35.66 26.64 -36 28 C-36.495 27.01 -36.495 27.01 -37 26 C-37.33 26.66 -37.66 27.32 -38 28 C-39.32 28 -40.64 28 -42 28 C-46 22.88888889 -46 22.88888889 -46 20 C-49.3 20 -52.6 20 -56 20 C-55.34 23.3 -54.68 26.6 -54 30 C-55.65 30 -57.3 30 -59 30 C-59.495 27.525 -59.495 27.525 -60 25 C-60.56847656 25.32484375 -61.13695312 25.6496875 -61.72265625 25.984375 C-66.23503128 27.99675495 -71.21936465 27.41674444 -75.9375 26.3125 C-78.61361992 24.6095146 -79.13362193 22.99294243 -80 20 C-76.17679443 18.57741188 -73.08718695 17.75957724 -69 18 C-69 17.34 -69 16.68 -69 16 C-66.72926348 15.83201949 -64.45840707 15.66565887 -62.1875 15.5 C-60.29064453 15.36078125 -60.29064453 15.36078125 -58.35546875 15.21875 C-56.24021483 15.08085219 -54.11974408 15 -52 15 C-51.34 14.34 -50.68 13.68 -50 13 C-47 13 -47 13 -44.4375 15.375 C-43.2309375 16.674375 -43.2309375 16.674375 -42 18 C-39.37037365 20.62962635 -37.46137722 20.25933875 -33.87988281 20.27734375 C-33.05327148 20.26832031 -32.22666016 20.25929688 -31.375 20.25 C-30.52776367 20.24613281 -29.68052734 20.24226563 -28.80761719 20.23828125 C-21.94851027 20.14597177 -15.29295791 19.45835349 -8.515625 18.4375 C-4.97213011 17.99653175 -1.56680941 17.92683468 2 18 C2 17.34 2 16.68 2 16 C1.01 16 0.02 16 -1 16 C-1.495 14.515 -1.495 14.515 -2 13 C-6.95 13 -11.9 13 -17 13 C-17.33 13.66 -17.66 14.32 -18 15 C-24.27 15.33 -30.54 15.66 -37 16 C-37.495 17.485 -37.495 17.485 -38 19 C-39.35439668 16.29120665 -39.06501451 13.99066732 -39 11 C-38.16863525 11.00523682 -37.33727051 11.01047363 -36.48071289 11.01586914 C-33.35522728 11.03305289 -30.22976599 11.04551856 -27.10424805 11.05493164 C-25.10268542 11.06235104 -23.10114467 11.07506659 -21.09960938 11.08789062 C-14.30874075 11.10499609 -7.72834499 10.93798004 -1 10 C-0.67 6.7 -0.34 3.4 0 0 Z \",fill:\"#06130C\",transform:\"translate(597,376)\"})),_path114||(_path114=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C19.71982622 -1.47577054 19.71982622 -1.47577054 24.87890625 1.86328125 C26.56858078 4.17288111 27.75086499 6.43374985 29 9 C30.32004086 10.34649459 31.65390838 11.67954822 33 13 C34.11725721 14.60916436 35.18036537 16.25721626 36.1875 17.9375 C36.69667969 18.77152344 37.20585937 19.60554687 37.73046875 20.46484375 C39.03467282 23.06923896 39.75621624 25.09849525 40 28 C39.34 28.99 38.68 29.98 38 31 C37.34 29.35 36.68 27.7 36 26 C35.34 26 34.68 26 34 26 C34.309375 26.556875 34.61875 27.11375 34.9375 27.6875 C36.05761821 30.12540433 36.56037364 32.36224186 37 35 C37.66 35 38.32 35 39 35 C39.39832031 35.74765625 39.79664063 36.4953125 40.20703125 37.265625 C40.73683594 38.25046875 41.26664062 39.2353125 41.8125 40.25 C42.59560547 41.71179688 42.59560547 41.71179688 43.39453125 43.203125 C44.89052794 45.96331055 44.89052794 45.96331055 46.6484375 48.10546875 C48.93259204 51.30724607 48.81459333 54.10645985 49 58 C48.34 58.99 47.68 59.98 47 61 C46.01 59.68 45.02 58.36 44 57 C45.70100159 61.61582471 48.10432723 65.47777122 50.7578125 69.59765625 C52 72 52 72 52 76 C51.34 76 50.68 76 50 76 C46.50012458 71.80858293 43.31237656 67.22468522 41.3125 62.125 C40.22012901 58.95178723 40.22012901 58.95178723 37.9375 57 C35.34204037 54.32081587 35.00159042 51.53895283 34 48 C33.01 47.67 32.02 47.34 31 47 C29.8125 44.4375 29.8125 44.4375 29 42 C27.515 42.495 27.515 42.495 26 43 C25.5875 41.9275 25.175 40.855 24.75 39.75 C23.33922167 36.43600185 21.63977672 34.47479068 19 32 C16.02274043 27.8776406 15.07904457 23.8972023 14 19 C13.401875 18.93167969 12.80375 18.86335937 12.1875 18.79296875 C9.14091417 17.68858139 8.54321581 16.1179657 7 13.3125 C5.2977979 10.29260338 3.61285773 7.34080377 1.625 4.5 C0 2 0 2 0 0 Z \",fill:\"#774E3D\",transform:\"translate(432,518)\"})),_path115||(_path115=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.4140625 3.16015625 0.4140625 3.16015625 0.625 7.0625 C0.73714844 8.99802734 0.73714844 8.99802734 0.8515625 10.97265625 C0.90054688 11.97167969 0.94953125 12.97070312 1 14 C1.66 14 2.32 14 3 14 C3 14.66 3 15.32 3 16 C3.556875 16.20625 4.11375 16.4125 4.6875 16.625 C7.92501302 18.55000774 9.68231141 21.03850902 12 24 C7.33333333 24 2.66666667 24 -2 24 C-2 24.66 -2 25.32 -2 26 C-18.94406157 27.03486763 -35.84109682 27.11916757 -52.8125 27.0625 C-55.46288977 27.05747018 -58.11328048 27.05290992 -60.76367188 27.04882812 C-67.17580208 27.03795095 -73.58789649 27.02133256 -80 27 C-80 26.67 -80 26.34 -80 26 C-66.47 25.67 -52.94 25.34 -39 25 C-38.98487055 16.59866609 -38.98487055 16.59866609 -42 14 C-42 12.68 -42 11.36 -42 10 C-43.65 10 -45.3 10 -47 10 C-46.34 9.01 -45.68 8.02 -45 7 C-45.495 6.01 -45.495 6.01 -46 5 C-43.26143391 3.63071696 -40.67406919 3.46650621 -37.63671875 3.0625 C-36.35732422 2.88976562 -35.07792969 2.71703125 -33.75976562 2.5390625 C-32.40237414 2.35914557 -31.04495193 2.1794603 -29.6875 2 C-27.04528537 1.64791656 -24.4034661 1.29309432 -21.76171875 0.9375 C-19.997677 0.70353516 -19.997677 0.70353516 -18.19799805 0.46484375 C-3.37848229 -1.68924114 -3.37848229 -1.68924114 0 0 Z \",fill:\"#2C2222\",transform:\"translate(564,232)\"})),_path116||(_path116=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.99 0 1.98 0 3 C-0.99 3.33 -1.98 3.66 -3 4 C-3.33 4.99 -3.66 5.98 -4 7 C-6.1953125 7.703125 -6.1953125 7.703125 -9.125 8.25 C-14.37781361 9.445251 -19.06725172 11.1283045 -23.9375 13.375 C-24.87650146 13.79507324 -24.87650146 13.79507324 -25.83447266 14.22363281 C-32.30014839 17.29061733 -36.26894582 22.20088546 -40.66796875 27.64453125 C-41.10753906 28.09183594 -41.54710937 28.53914063 -42 29 C-42.66 29 -43.32 29 -44 29 C-44.12375 29.825 -44.2475 30.65 -44.375 31.5 C-45.0791066 35.44299695 -45.82988288 39.16461611 -47 43 C-48.485 43.495 -48.485 43.495 -50 44 C-50.45375 44.763125 -50.9075 45.52625 -51.375 46.3125 C-53.19540255 49.32316576 -55.22525715 50.88243309 -58 53 C-58.33 53.66 -58.66 54.32 -59 55 C-64.52677733 55.19392201 -68.75614911 54.7479503 -74 53 C-73.04578192 51.85073734 -72.08647955 50.70569459 -71.125 49.5625 C-70.59132813 48.92441406 -70.05765625 48.28632813 -69.5078125 47.62890625 C-68 46 -68 46 -66 45 C-65.34 45.33 -64.68 45.66 -64 46 C-64 45.34 -64 44.68 -64 44 C-65.32 44 -66.64 44 -68 44 C-68 41.69 -68 39.38 -68 37 C-67.01 36.505 -67.01 36.505 -66 36 C-66 34.35 -66 32.7 -66 31 C-65.34 31 -64.68 31 -64 31 C-64 30.34 -64 29.68 -64 29 C-62.04707031 28.92265625 -62.04707031 28.92265625 -60.0546875 28.84375 C-50.73816618 28.62302434 -50.73816618 28.62302434 -42.40234375 25.15625 C-40.43058705 22.4820247 -39 20.37447232 -39 17 C-44.94 17 -50.88 17 -57 17 C-55 13 -55 13 -54 12 C-51.13732433 11.92674832 -48.299281 11.90761795 -45.4375 11.9375 C-44.63119141 11.94201172 -43.82488281 11.94652344 -42.99414062 11.95117188 C-40.99606244 11.96299482 -38.99802217 11.98093086 -37 12 C-43.93 11.505 -43.93 11.505 -51 11 C-51 10.34 -51 9.68 -51 9 C-53.31 9.66 -55.62 10.32 -58 11 C-56.1875 8.5 -56.1875 8.5 -54 6 C-53.01 6 -52.02 6 -51 6 C-51.33 4.35 -51.66 2.7 -52 1 C-51.34 1.33 -50.68 1.66 -50 2 C-47.94193236 2.0974081 -45.88068299 2.13076877 -43.8203125 2.1328125 C-41.96212891 2.13474609 -41.96212891 2.13474609 -40.06640625 2.13671875 C-38.76574219 2.13285156 -37.46507812 2.12898438 -36.125 2.125 C-34.18560547 2.13080078 -34.18560547 2.13080078 -32.20703125 2.13671875 C-30.96566406 2.13542969 -29.72429687 2.13414062 -28.4453125 2.1328125 C-27.30594238 2.13168457 -26.16657227 2.13055664 -24.99267578 2.12939453 C-22.44271806 2.01914183 -20.43879356 1.65270282 -18 1 C-16.64338552 0.9337186 -15.28381913 0.91449595 -13.92578125 0.9375 C-12.80139648 0.94910156 -12.80139648 0.94910156 -11.65429688 0.9609375 C-10.88150391 0.97382813 -10.10871094 0.98671875 -9.3125 1 C-6.535726 1.0456331 -3.77805879 1.04723586 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#FA7942\",transform:\"translate(168,317)\"})),_path117||(_path117=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.05078125 0.03255208 4.1015625 0.06510417 6.15234375 0.09765625 C5.13239404 3.34295079 4.28150889 4.98173882 1.71484375 7.28515625 C-1.33936536 10.63733698 -2.04487626 13.35736913 -3.07421875 17.6953125 C-3.84765625 20.09765625 -3.84765625 20.09765625 -5.26342773 21.98120117 C-6.81638285 24.05587646 -7.88073841 26.01762325 -8.96875 28.36328125 C-9.34708984 29.17152344 -9.72542969 29.97976563 -10.11523438 30.8125 C-10.50130859 31.64910156 -10.88738281 32.48570312 -11.28515625 33.34765625 C-18.50737037 48.86384645 -18.50737037 48.86384645 -22.84765625 56.09765625 C-23.502239 57.38491104 -24.14727758 58.67704277 -24.78515625 59.97265625 C-26.65802795 63.77624896 -28.71161119 67.43586472 -30.84765625 71.09765625 C-31.50765625 70.43765625 -32.16765625 69.77765625 -32.84765625 69.09765625 C-33.44578125 70.08765625 -34.04390625 71.07765625 -34.66015625 72.09765625 C-35.38203125 73.08765625 -36.10390625 74.07765625 -36.84765625 75.09765625 C-37.83765625 75.09765625 -38.82765625 75.09765625 -39.84765625 75.09765625 C-40.50765625 76.41765625 -41.16765625 77.73765625 -41.84765625 79.09765625 C-42.50765625 79.09765625 -43.16765625 79.09765625 -43.84765625 79.09765625 C-44.07453125 80.21140625 -44.30140625 81.32515625 -44.53515625 82.47265625 C-45.84765625 86.09765625 -45.84765625 86.09765625 -48.47265625 87.53515625 C-49.25640625 87.72078125 -50.04015625 87.90640625 -50.84765625 88.09765625 C-51.17765625 86.77765625 -51.50765625 85.45765625 -51.84765625 84.09765625 C-53.82765625 85.74765625 -55.80765625 87.39765625 -57.84765625 89.09765625 C-57.33968616 84.77991045 -56.65082846 81.06463511 -54.84765625 77.09765625 C-54.18765625 77.09765625 -53.52765625 77.09765625 -52.84765625 77.09765625 C-52.7496875 76.55238281 -52.65171875 76.00710938 -52.55078125 75.4453125 C-51.08872251 68.07199901 -48.20872214 61.77477375 -44.84765625 55.09765625 C-44.18765625 55.09765625 -43.52765625 55.09765625 -42.84765625 55.09765625 C-42.72390625 54.56140625 -42.60015625 54.02515625 -42.47265625 53.47265625 C-41.72559609 50.63382765 -40.79462261 47.87542423 -39.84765625 45.09765625 C-39.18765625 45.09765625 -38.52765625 45.09765625 -37.84765625 45.09765625 C-37.76515625 44.45828125 -37.68265625 43.81890625 -37.59765625 43.16015625 C-36.10271962 37.0558317 -33.24700708 31.36665004 -29.84765625 26.09765625 C-29.51765625 26.75765625 -29.18765625 27.41765625 -28.84765625 28.09765625 C-29.17765625 29.08765625 -29.50765625 30.07765625 -29.84765625 31.09765625 C-27.86765625 30.10765625 -25.88765625 29.11765625 -23.84765625 28.09765625 C-25.39021528 32.93568231 -27.03394813 37.72911193 -28.84765625 42.47265625 C-29.15703125 43.28476562 -29.46640625 44.096875 -29.78515625 44.93359375 C-30.87882561 47.1611409 -32.08779129 48.38627242 -33.84765625 50.09765625 C-34.56962787 52.70376702 -34.56962787 52.70376702 -34.84765625 55.09765625 C-35.50765625 55.09765625 -36.16765625 55.09765625 -36.84765625 55.09765625 C-36.95980469 55.82984375 -37.07195312 56.56203125 -37.1875 57.31640625 C-38.05484529 60.97054734 -39.82283875 63.65262413 -41.7890625 66.81640625 C-42.99966385 69.42522983 -43.04284636 71.25488751 -42.84765625 74.09765625 C-42.18765625 74.09765625 -41.52765625 74.09765625 -40.84765625 74.09765625 C-40.53828125 72.64359375 -40.53828125 72.64359375 -40.22265625 71.16015625 C-39.31728251 67.94961107 -37.9618944 65.62443005 -36.03515625 62.91015625 C-33.70175387 59.57271775 -32.02763883 56.38586723 -30.53515625 52.59765625 C-28.44699024 47.32655759 -26.00198756 42.34944082 -23.34765625 37.34765625 C-22.97987061 36.65091797 -22.61208496 35.95417969 -22.2331543 35.23632812 C-19.96645807 31.00663188 -17.53161034 26.94925831 -14.88085938 22.94824219 C-13.79755148 21.00791283 -13.28665805 19.26747663 -12.84765625 17.09765625 C-12.18765625 17.09765625 -11.52765625 17.09765625 -10.84765625 17.09765625 C-10.41453125 15.98390625 -10.41453125 15.98390625 -9.97265625 14.84765625 C-9.02462981 12.53025828 -7.99919714 10.3184851 -6.84765625 8.09765625 C-6.18765625 8.09765625 -5.52765625 8.09765625 -4.84765625 8.09765625 C-4.53828125 6.96328125 -4.22890625 5.82890625 -3.91015625 4.66015625 C-2.56064992 0.1353409 -2.56064992 0.1353409 0 0 Z \",fill:\"#57392D\",transform:\"translate(179.84765625,520.90234375)\"})),_path118||(_path118=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.23495347 0.40225506 11.04360793 1.5833395 16.73828125 4.16015625 C19.22286788 5.23207015 19.22286788 5.23207015 23 5 C20.03 4.01 17.06 3.02 14 2 C14 1.67 14 1.34 14 1 C17.27066566 0.91293108 20.54103365 0.85958759 23.8125 0.8125 C25.2056543 0.77479492 25.2056543 0.77479492 26.62695312 0.73632812 C27.51962891 0.72666016 28.41230469 0.71699219 29.33203125 0.70703125 C30.56530151 0.68346558 30.56530151 0.68346558 31.82348633 0.65942383 C34 1 34 1 35.31396484 2.37719727 C37.92588889 4.89116471 41.22295489 5.37086192 44.64453125 6.2578125 C52.93103954 8.55278996 60.73351998 11.55136325 68.61254883 14.97412109 C70.69362243 15.87765817 72.78067959 16.76603435 74.86914062 17.65234375 C82.71567806 21.00557619 90.39331067 24.59923949 97.9921875 28.48120117 C101.58754233 30.29668026 105.2384143 31.9569031 108.9140625 33.6015625 C113.02461814 35.46432063 117.10569762 37.38770997 121.1875 39.3125 C121.95553955 39.674646 122.7235791 40.03679199 123.51489258 40.40991211 C125.34353097 41.2727043 127.1718049 42.1362689 129 43 C128.67 42.01 128.34 41.02 128 40 C129.4589426 40.47730838 130.91713496 40.95691042 132.375 41.4375 C133.18710937 41.70433594 133.99921875 41.97117187 134.8359375 42.24609375 C137 43 137 43 139 44 C139 45.98 139 47.96 139 50 C134.87248551 49.39301257 131.6678852 47.96189209 128 46 C128 45.34 128 44.68 128 44 C127.01 43.7525 126.02 43.505 125 43.25 C121.30431956 42.21129552 118.07117814 40.61984835 114.69921875 38.8046875 C113.01209396 37.85733432 113.01209396 37.85733432 111 38 C121.89 43.445 121.89 43.445 133 49 C133 49.99 133 50.98 133 52 C125.76917006 49.27841497 118.94591132 46.05805537 112.125 42.4375 C110.74054688 41.71530273 110.74054688 41.71530273 109.328125 40.97851562 C105.30892894 38.86115654 101.62583909 36.74090788 98 34 C96.37601473 33.2817496 94.72799658 32.61590012 93.0625 32 C89.42513052 30.65074394 86.31484622 29.00822739 83 27 C81.07494 26.07773778 79.13713225 25.18161317 77.1875 24.3125 C76.21167969 23.87550781 75.23585938 23.43851562 74.23046875 22.98828125 C73.49441406 22.66214844 72.75835938 22.33601563 72 22 C72 21.34 72 20.68 72 20 C70.96939453 19.83177734 70.96939453 19.83177734 69.91796875 19.66015625 C66.55100364 18.89841983 63.51648845 17.71982605 60.3125 16.4375 C56.27152242 14.65438509 56.27152242 14.65438509 52 14 C54.56126064 15.294174 57.12393358 16.58540784 59.6875 17.875 C60.40873047 18.23980469 61.12996094 18.60460937 61.87304688 18.98046875 C64.85860682 20.48006507 67.79982337 21.92035983 70.90625 23.15625 C73.19142836 24.07714277 74.40198149 25.14966278 76 27 C71.1323901 26.3252818 66.99497754 24.38694795 62.5625 22.375 C61.37901978 21.84410767 61.37901978 21.84410767 60.17163086 21.30249023 C53.93581204 18.48162936 47.81050402 15.47346347 41.72265625 12.34765625 C39.00798985 10.92631029 39.00798985 10.92631029 36 10 C36 10.66 36 11.32 36 12 C36.53625 12.12375 37.0725 12.2475 37.625 12.375 C44.15075065 14.0923028 49.84732054 16.80410085 55.81225586 19.8737793 C62.40959257 23.25669045 69.15378728 26.15231152 76 29 C81.16092636 31.15831367 86.1858238 33.50151011 91.1875 36 C91.88552734 36.34289062 92.58355469 36.68578125 93.30273438 37.0390625 C96.78616567 38.77580655 99.98190499 40.50441757 103 43 C98.1587274 42.52536543 95.06134888 41.63438847 91 39 C88.80869466 38.30420546 88.80869466 38.30420546 87 38 C87 37.34 87 36.68 87 36 C86.34128906 35.91234375 85.68257812 35.8246875 85.00390625 35.734375 C81.0277781 34.76231766 77.60221212 33.04449324 73.9375 31.25 C62.84761276 25.0432133 62.84761276 25.0432133 51 22 C52.10214844 22.47308594 53.20429687 22.94617188 54.33984375 23.43359375 C62.54915564 26.99652076 70.63951214 30.70900606 78.5625 34.875 C79.6596936 35.4462561 79.6596936 35.4462561 80.77905273 36.02905273 C85.87551762 38.75103524 85.87551762 38.75103524 87 41 C84.36 40.34 81.72 39.68 79 39 C79 38.34 79 37.68 79 37 C78.154375 36.90589844 77.30875 36.81179688 76.4375 36.71484375 C72.57132792 35.91085569 69.44876421 34.40039526 66 32.5625 C59.44663316 29.17052515 52.80157069 26.06731894 46.0625 23.0625 C36.4805075 18.77152075 27.20077664 14.05188532 18 9 C18 8.01 18 7.02 18 6 C17.45472656 5.89042969 16.90945313 5.78085937 16.34765625 5.66796875 C10.74464935 4.48990063 5.3945613 2.912965 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#895C44\",transform:\"translate(487,419)\"})),_path119||(_path119=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.98226563 0.09925781 1.96453125 0.19851563 2.9765625 0.30078125 C5.375 0.6875 5.375 0.6875 6.375 1.6875 C8.90096259 1.92403523 11.40607207 2.10923692 13.9375 2.25 C14.64841797 2.29318359 15.35933594 2.33636719 16.09179688 2.38085938 C17.85261912 2.48721777 19.6137832 2.58788846 21.375 2.6875 C21.375 3.3475 21.375 4.0075 21.375 4.6875 C12.795 5.0175 4.215 5.3475 -4.625 5.6875 C17.155 6.1825 17.155 6.1825 39.375 6.6875 C41.46682531 10.87115063 40.80435408 16.13157619 40.375 20.6875 C38.21696841 25.16341738 35.53159498 27.99694731 31.375 30.6875 C28.50571467 31.24489365 25.72664035 31.20893261 22.8125 31.125 C22.01618164 31.11251221 21.21986328 31.10002441 20.39941406 31.0871582 C11.65814208 30.82866076 2.9029366 29.36702816 -4.625 24.6875 C-6.37399588 21.18950824 -5.99415932 16.97102502 -6.14257812 13.09765625 C-6.23861553 8.93975443 -6.23861553 8.93975443 -8.625 5.6875 C-8.625 4.3675 -8.625 3.0475 -8.625 1.6875 C-5.1026143 -0.66075713 -4.08383133 -0.44717414 0 0 Z \",fill:\"#040203\",transform:\"translate(356.625,363.3125)\"})),_path120||(_path120=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.33 2.64 -0.66 5.28 -1 8 C-0.01 7.67 0.98 7.34 2 7 C2 7.66 2 8.32 2 9 C2.99 9.33 3.98 9.66 5 10 C3.89591797 10.18175781 3.89591797 10.18175781 2.76953125 10.3671875 C1.79371094 10.53476562 0.81789062 10.70234375 -0.1875 10.875 C-1.15042969 11.03742188 -2.11335937 11.19984375 -3.10546875 11.3671875 C-5.91032604 11.98039517 -8.37224747 12.85666343 -11 14 C-11.33 16.31 -11.66 18.62 -12 21 C-16.95 21 -21.9 21 -27 21 C-27.495 19.02 -27.495 19.02 -28 17 C-27.34 16.34 -26.68 15.68 -26 15 C-26 14.01 -26 13.02 -26 12 C-26.99580078 12.01740234 -26.99580078 12.01740234 -28.01171875 12.03515625 C-29.33623047 12.04869141 -29.33623047 12.04869141 -30.6875 12.0625 C-31.55761719 12.07410156 -32.42773438 12.08570313 -33.32421875 12.09765625 C-36 12 -36 12 -38.43359375 11.51171875 C-57.44687281 7.72063876 -79.57143997 12.9577724 -98.64453125 15.27734375 C-99.55847656 15.38811752 -100.47242188 15.4988913 -101.4140625 15.61302185 C-105.90441121 16.15883914 -110.39327639 16.71393091 -114.88037109 17.28588867 C-126.57930765 18.74986659 -138.21863869 19.56472997 -150 20 C-150 18.02 -150 16.04 -150 14 C-136.31293603 12.56380278 -122.61806799 11.37308339 -108.89715576 10.3117981 C-79.98115548 8.06585512 -51.18835597 5.43998178 -22.43310547 1.62524414 C-21.60796448 1.51786926 -20.78282349 1.41049438 -19.93267822 1.29986572 C-18.39685037 1.09994219 -16.86158542 0.89561676 -15.3270874 0.68572998 C-10.18364742 0.02180778 -5.18652976 -0.08077016 0 0 Z \",fill:\"#60493D\",transform:\"translate(150,288)\"})),_path121||(_path121=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.75230148 0.06009392 5.4992444 0.14712621 8.25 0.25 C9.41595703 0.27126953 9.41595703 0.27126953 10.60546875 0.29296875 C14.34386884 0.45272944 16.39161791 0.5432275 19.4453125 2.8359375 C22.71277597 7.38411529 24.32130242 12.70564611 26 18 C26.63526611 17.9285376 27.27053223 17.8570752 27.92504883 17.78344727 C35.53117117 17.0015988 43.0461508 16.88172373 50.6875 16.9375 C51.87794922 16.94201172 53.06839844 16.94652344 54.29492188 16.95117188 C57.19663683 16.96282535 60.09832546 16.98075529 63 17 C63 20.63 63 24.26 63 28 C55.50009325 29.20263656 48.0817215 29.11258251 40.5 29.0625 C39.200625 29.05798828 37.90125 29.05347656 36.5625 29.04882812 C33.37495175 29.0371092 30.18750045 29.02070219 27 29 C27 30.65 27 32.3 27 34 C27.83917969 33.68160156 28.67835938 33.36320312 29.54296875 33.03515625 C33.22648324 31.93218298 36.47859857 31.62777811 40.3125 31.4375 C44.47595878 31.59558811 44.47595878 31.59558811 48 30 C50.52596259 29.76346477 53.03107207 29.57826308 55.5625 29.4375 C56.62887695 29.37272461 56.62887695 29.37272461 57.71679688 29.30664062 C59.47761912 29.20028223 61.2387832 29.09961154 63 29 C63.495 30.98 63.495 30.98 64 33 C64.99 33 65.98 33 67 33 C67 33.66 67 34.32 67 35 C55.88747861 36.6909381 44.75086747 38.29109502 33.5 38.5625 C32.36437622 38.62050781 32.36437622 38.62050781 31.20581055 38.6796875 C25.9037828 38.70826023 23.20512168 37.15431484 19.33007812 33.58569336 C18 32 18 32 17 29 C17.66 29 18.32 29 19 29 C16.89781532 24.43271276 14.31585849 20.59235123 11.1875 16.6875 C0 2.44440128 0 2.44440128 0 0 Z \",fill:\"#7E4B38\",transform:\"translate(532,359)\"})),_path122||(_path122=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.32841781 -0.10914665 11.57125764 1.58969139 17.34375 6.01953125 C23.10644356 10.31612777 29.53657216 13.86018316 36 17 C35.505 17.495 35.505 17.495 35 18 C34.92851801 19.35243917 34.91600546 20.70834367 34.9375 22.0625 C34.958125 23.361875 34.97875 24.66125 35 26 C29.20573222 26.02511184 23.41149755 26.04305026 17.6171875 26.05493164 C15.65461677 26.05989571 13.6920496 26.06666917 11.72949219 26.07543945 C-0.88701486 26.1303219 -13.41174005 25.86758248 -26 25 C-26 23.35 -26 21.7 -26 20 C-20.94766644 19.82873446 -16.37827932 20.0499694 -11.40625 20.96875 C-2.36772442 22.40883176 6.68107394 22.46014492 15.8125 22.625 C17.58400142 22.66328169 19.35548626 22.70233889 21.12695312 22.7421875 C25.41783037 22.83705004 29.708794 22.92147313 34 23 C34 22.34 34 21.68 34 21 C32.92854736 21.01571045 31.85709473 21.0314209 30.75317383 21.04760742 C-8.45435868 21.5729306 -8.45435868 21.5729306 -26 18 C-26 17.34 -26 16.68 -26 16 C-22.91545869 13.94363913 -21.15190326 13.48865646 -17.5625 12.875 C-16.61503906 12.70742188 -15.66757812 12.53984375 -14.69140625 12.3671875 C-12 12 -12 12 -8 12 C-8 11.01 -8 10.02 -8 9 C-14.6 9 -21.2 9 -28 9 C-28 6.36 -28 3.72 -28 1 C-14.14 1.99 -14.14 1.99 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#1E0909\",transform:\"translate(365,406)\"})),_path123||(_path123=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.79497894 0.00444122 1.58995789 0.00888245 2.4090271 0.01345825 C3.30980988 0.01360931 4.21059265 0.01376038 5.13867188 0.01391602 C6.11266937 0.02423859 7.08666687 0.03456116 8.09017944 0.04519653 C9.08617157 0.04802643 10.0821637 0.05085632 11.1083374 0.05377197 C14.29771813 0.06499063 17.48682072 0.09009822 20.67611694 0.11550903 C22.83496706 0.12553666 24.99382157 0.13466288 27.15267944 0.14285278 C32.45225393 0.16493543 37.75166557 0.19842945 43.05111694 0.24050903 C44.09746585 15.30461153 44.09746585 15.30461153 41.87484741 19.41677856 C37.20290421 23.02306914 30.87032952 23.48196028 25.17611694 24.11550903 C24.23381226 24.24441528 23.29150757 24.37332153 22.32064819 24.50613403 C15.62860152 25.33916889 8.60934594 26.16358241 2.49252319 22.85769653 C-1.70726444 18.96350675 -4.22249931 16.15534809 -4.94888306 10.24050903 C-4.72060434 0.58256342 -4.72060434 0.58256342 0 0 Z \",fill:\"#010002\",transform:\"translate(230.94888305664063,369.7594909667969)\"})),_path124||(_path124=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.95 0 9.9 0 15 0 C15.81665819 6.40045258 16.13581031 12.61844456 16.09765625 19.06640625 C16.0962413 19.98590561 16.09482635 20.90540497 16.09336853 21.85276794 C16.08782312 24.75604671 16.07528117 27.65924501 16.0625 30.5625 C16.05747793 32.54492075 16.05291627 34.52734273 16.04882812 36.50976562 C16.03787164 41.3398742 16.02064542 46.16992351 16 51 C10.39 51 4.78 51 -1 51 C-2.61737724 46.14786828 -3.22942798 43.81798756 -3 39 C-3.66 39 -4.32 39 -5 39 C-5 37.68 -5 36.36 -5 35 C-5.66 35 -6.32 35 -7 35 C-9.125 33.375 -9.125 33.375 -11 31 C-11.25 27.75 -11.25 27.75 -11 25 C-11.66 25 -12.32 25 -13 25 C-13 23.02 -13 21.04 -13 19 C-13.66 19 -14.32 19 -15 19 C-15 18.01 -15 17.02 -15 16 C-15.66 16 -16.32 16 -17 16 C-17 15.34 -17 14.68 -17 14 C-12.71 14 -8.42 14 -4 14 C-4 9.71 -4 5.42 -4 1 C-3.67 1 -3.34 1 -3 1 C-3 5.29 -3 9.58 -3 14 C-1.02 13.67 0.96 13.34 3 13 C3.33 14.98 3.66 16.96 4 19 C4.33 17.02 4.66 15.04 5 13 C5.66 13 6.32 13 7 13 C6.979375 11.948125 6.95875 10.89625 6.9375 9.8125 C6.98896802 6.67295096 7.26517187 4.03116604 8 1 C6.02 1 4.04 1 2 1 C2 4.63 2 8.26 2 12 C1.34 12 0.68 12 0 12 C0 8.04 0 4.08 0 0 Z \",fill:\"#FA2B47\",transform:\"translate(309,371)\"})),_path125||(_path125=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.05598389 -0.00064453 2.11196777 -0.00128906 3.19995117 -0.00195312 C4.34439697 0.01544922 5.48884277 0.03285156 6.66796875 0.05078125 C8.43394409 0.06334961 8.43394409 0.06334961 10.2355957 0.07617188 C24.14195487 0.25863411 37.99475735 1.28297528 51.85546875 2.36328125 C52.35046875 11.76828125 52.35046875 11.76828125 52.85546875 21.36328125 C54.83546875 21.69328125 56.81546875 22.02328125 58.85546875 22.36328125 C58.53204498 22.84162415 58.20862122 23.31996704 57.87539673 23.81280518 C56.3860379 27.53716035 56.54682982 31.21755011 56.53662109 35.17089844 C56.52657547 36.05905746 56.51652985 36.94721649 56.50617981 37.86228943 C56.47531483 40.79490518 56.4583034 43.7274295 56.44140625 46.66015625 C56.42269728 48.69468982 56.40312407 50.72921562 56.38272095 52.76373291 C56.3313652 58.11646948 56.29175783 63.46923122 56.25457764 68.82208252 C56.21455963 74.28509769 56.16345722 79.74800786 56.11328125 85.2109375 C56.01648116 95.92831169 55.93208937 106.64574513 55.85546875 117.36328125 C55.19546875 117.36328125 54.53546875 117.36328125 53.85546875 117.36328125 C53.85546875 86.01328125 53.85546875 54.66328125 53.85546875 22.36328125 C46.92546875 22.36328125 39.99546875 22.36328125 32.85546875 22.36328125 C29.88546875 22.03328125 26.91546875 21.70328125 23.85546875 21.36328125 C24.35046875 14.92828125 24.35046875 14.92828125 24.85546875 8.36328125 C13.63546875 8.36328125 2.41546875 8.36328125 -9.14453125 8.36328125 C-7.82865944 1.78392221 -6.70734911 -0.02162718 0 0 Z \",fill:\"#1C3533\",transform:\"translate(248.14453125,508.63671875)\"})),_path126||(_path126=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.06004646 3.00232298 0.0393124 5.99751513 0 9 C0.020625 10.093125 0.04125 11.18625 0.0625 12.3125 C-1.19490394 15.49299232 -1.81970998 15.75052862 -4.8125 17.1875 C-9.33996803 18.9271885 -13.97024583 20.04652999 -18.68359375 21.16015625 C-27.55571784 23.40692501 -36.08346029 26.14136709 -43.953125 30.875 C-46.80516808 32.44253513 -49.75819396 33.35829045 -52.859375 34.3125 C-56.00951458 35.32422366 -58.97279052 36.66802783 -62 38 C-63.485 38.495 -63.485 38.495 -65 39 C-65 39.99 -65 40.98 -65 42 C-63.02 42 -61.04 42 -59 42 C-60 45 -60 45 -61.72265625 45.88671875 C-62.88087891 46.28310547 -62.88087891 46.28310547 -64.0625 46.6875 C-69.78290683 48.80985384 -75.13008989 51.49467094 -80.55297852 54.27026367 C-83.34588808 55.69442656 -86.02054389 57.00684796 -89 58 C-89 57.34 -89 56.68 -89 56 C-90.98 56.66 -92.96 57.32 -95 58 C-91.56276113 54.00779027 -87.66462919 52.0974592 -83 49.875 C-82.2884375 49.52824219 -81.576875 49.18148437 -80.84375 48.82421875 C-78.09397789 47.4852439 -75.34290124 46.15716307 -72.5625 44.8828125 C-70.80929539 44.08420499 -70.80929539 44.08420499 -70 42 C-71.32 42 -72.64 42 -74 42 C-74.33 40.68 -74.66 39.36 -75 38 C-73.515 37.505 -73.515 37.505 -72 37 C-72 36.34 -72 35.68 -72 35 C-71.0925 34.7525 -70.185 34.505 -69.25 34.25 C-66.02873831 33.28202918 -66.02873831 33.28202918 -64.3828125 31.2734375 C-60.8803267 27.93172154 -56.81439853 25.76346807 -52.625 23.375 C-51.78710938 22.88515625 -50.94921875 22.3953125 -50.0859375 21.890625 C-45.77702877 19.41096997 -41.74528346 17.52309384 -37 16 C-35.15343118 14.90992025 -33.33990303 13.76205357 -31.5625 12.5625 C-27.44536516 9.86622419 -23.57679388 7.77467518 -19 6 C-17.68 5.34 -16.36 4.68 -15 4 C-17.97 3.67 -20.94 3.34 -24 3 C-24 2.67 -24 2.34 -24 2 C-20.56272197 1.66435098 -17.12514387 1.33187951 -13.6875 1 C-12.71103516 0.90460938 -11.73457031 0.80921875 -10.72851562 0.7109375 C-9.32182617 0.57558594 -9.32182617 0.57558594 -7.88671875 0.4375 C-7.02264404 0.35371094 -6.15856934 0.26992188 -5.26831055 0.18359375 C-3 0 -3 0 0 0 Z \",fill:\"#4B352A\",transform:\"translate(147,412)\"})),_path127||(_path127=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 1.98 1.98 3.96 3 6 C2.525625 6.433125 2.05125 6.86625 1.5625 7.3125 C-0.23686957 9.02309613 -0.23686957 9.02309613 -1 12 C0.32 11.34 1.64 10.68 3 10 C3.495 12.475 3.495 12.475 4 15 C-35.77646015 20.81767527 -35.77646015 20.81767527 -54.7427063 23.17224121 C-56.15860673 23.34838019 -57.57420203 23.52699043 -58.98947144 23.70812988 C-60.94774759 23.95762592 -62.90744409 24.19589745 -64.8671875 24.43359375 C-65.96144043 24.56822021 -67.05569336 24.70284668 -68.18310547 24.84155273 C-70.81539038 24.98961591 -72.51458369 24.76607992 -75 24 C-77.33094534 23.6503582 -79.66404762 23.31445513 -82 23 C-81.67 22.34 -81.34 21.68 -81 21 C-84.96 21 -88.92 21 -93 21 C-90.22396879 18.22396879 -87.0911052 17.8870735 -83.375 17.0625 C-82.24179321 16.80255249 -82.24179321 16.80255249 -81.08569336 16.53735352 C-75.25973941 15.22310556 -69.40499594 14.12260689 -63.52636719 13.07446289 C-59.96686941 12.42394922 -56.56012143 11.63329647 -53.125 10.5 C-48.59811761 9.03408003 -44.06356673 8.2932304 -39.375 7.5625 C-30.75921085 6.21810956 -22.42924854 4.20587239 -14 2 C-4.70785071 -0.3037323 -4.70785071 -0.3037323 0 0 Z \",fill:\"#3E1C1E\",transform:\"translate(507,222)\"})),_path128||(_path128=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.66 0 -1.32 0 -2 0 C-2 0.66 -2 1.32 -2 2 C-2.66 2 -3.32 2 -4 2 C-4.75780257 12.96449251 -4.75780257 12.96449251 -0.2890625 22.64453125 C0.97797897 24.13063231 0.97797897 24.13063231 3 25 C3 25.66 3 26.32 3 27 C-2.45461169 28.38529821 -7.36718401 29.2396943 -13 29 C-13.33 27.35 -13.66 25.7 -14 24 C-14.66 24 -15.32 24 -16 24 C-16.33 25.65 -16.66 27.3 -17 29 C-16.34 29 -15.68 29 -15 29 C-15 29.66 -15 30.32 -15 31 C-16.65 30.67 -18.3 30.34 -20 30 C-20.33 28.68 -20.66 27.36 -21 26 C-21.11069824 26.55349121 -21.22139648 27.10698242 -21.33544922 27.67724609 C-23.22363281 37.11816406 -25.11181641 46.55908203 -27 56 C-25.64455078 56.18175781 -25.64455078 56.18175781 -24.26171875 56.3671875 C-23.08222656 56.53476562 -21.90273438 56.70234375 -20.6875 56.875 C-19.51574219 57.03742188 -18.34398437 57.19984375 -17.13671875 57.3671875 C-14 58 -14 58 -11 60 C-10.52874538 65.56080455 -11.41150642 69.63883418 -13 75 C-13.16847091 78.29219428 -13.16847091 78.29219428 -13 81 C-13.66 81 -14.32 81 -15 81 C-15.22728463 74.95170347 -14.91543597 69.57439911 -13.33984375 63.71484375 C-13.22769531 63.14894531 -13.11554688 62.58304687 -13 62 C-14.56801381 60.43198619 -16.26145757 60.72884334 -18.4375 60.5625 C-23.72016067 60.08988101 -28.82362184 59.13439777 -34 58 C-34.495 56.515 -34.495 56.515 -35 55 C-33.02 55.33 -31.04 55.66 -29 56 C-29.01160156 55.30777344 -29.02320312 54.61554688 -29.03515625 53.90234375 C-29.11216762 45.55211039 -28.63658548 37.32108166 -28 29 C-28.66 29.66 -29.32 30.32 -30 31 C-30.66 30.67 -31.32 30.34 -32 30 C-32.37890625 27.8203125 -32.37890625 27.8203125 -32.5625 25.125 C-32.77628346 22.13203161 -33.04428957 19.8671313 -34 17 C-33.34 17 -32.68 17 -32 17 C-31.855625 16.21625 -31.71125 15.4325 -31.5625 14.625 C-31 12 -31 12 -30 10 C-29.34 10 -28.68 10 -28 10 C-28 9.34 -28 8.68 -28 8 C-28.66 8 -29.32 8 -30 8 C-30 7.34 -30 6.68 -30 6 C-37.92 6.495 -37.92 6.495 -46 7 C-46 6.01 -46 5.02 -46 4 C-45.12432373 3.92483154 -45.12432373 3.92483154 -44.23095703 3.84814453 C-41.52843666 3.61284118 -38.82675227 3.36895876 -36.125 3.125 C-34.74828125 3.00705078 -34.74828125 3.00705078 -33.34375 2.88671875 C-27.8721162 2.38579453 -22.58005349 1.58872257 -17.20556641 0.45019531 C-14.52069642 -0.09783438 -11.85335309 -0.4405719 -9.125 -0.6875 C-8.24070313 -0.77386719 -7.35640625 -0.86023438 -6.4453125 -0.94921875 C-4.07600491 -0.99842162 -2.25290262 -0.69682802 0 0 Z \",fill:\"#4A3B2F\",transform:\"translate(78,322)\"})),_path129||(_path129=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.98484375 0.00902344 1.9696875 0.01804687 2.984375 0.02734375 C4.10585937 0.04474609 4.10585937 0.04474609 5.25 0.0625 C5.25 2.3725 5.25 4.6825 5.25 7.0625 C6.57 7.3925 7.89 7.7225 9.25 8.0625 C-6.48358842 14.41845294 -22.95822207 17.12890133 -39.75 19.0625 C-39.75 16.0925 -39.75 13.1225 -39.75 10.0625 C-40.41 10.0625 -41.07 10.0625 -41.75 10.0625 C-41.75 10.7225 -41.75 11.3825 -41.75 12.0625 C-45.71 12.0625 -49.67 12.0625 -53.75 12.0625 C-53.75 11.4025 -53.75 10.7425 -53.75 10.0625 C-60.35 10.0625 -66.95 10.0625 -73.75 10.0625 C-73.75 12.3725 -73.75 14.6825 -73.75 17.0625 C-74.41 18.0525 -75.07 19.0425 -75.75 20.0625 C-76.3275 19.11375 -76.905 18.165 -77.5 17.1875 C-79.57816551 14.30115902 -80.50468075 13.22154259 -83.75 12.0625 C-83.75 10.7425 -83.75 9.4225 -83.75 8.0625 C-77.81 7.5675 -77.81 7.5675 -71.75 7.0625 C-71.75 6.4025 -71.75 5.7425 -71.75 5.0625 C-75.38 5.0625 -79.01 5.0625 -82.75 5.0625 C-82.75 4.0725 -82.75 3.0825 -82.75 2.0625 C-73.64213219 1.22057083 -64.63952172 0.93845199 -55.49609375 1 C-53.50417901 1.00578475 -51.51226423 1.011564 -49.52034855 1.01701355 C-46.07604524 1.02782922 -42.63177685 1.04539483 -39.1875 1.0625 C-35.03622458 1.0829443 -30.88496912 1.10211322 -26.73365784 1.11352539 C-24.16164889 1.12104445 -21.58964829 1.13308571 -19.01768494 1.15014648 C-17.85870193 1.15344971 -16.69971893 1.15675293 -15.50561523 1.16015625 C-14.48781479 1.16539307 -13.47001434 1.17062988 -12.42137146 1.17602539 C-8.16330507 0.99507016 -4.32857196 -0.05153062 0 0 Z \",fill:\"#E6CF81\",transform:\"translate(242.75,266.9375)\"})),_path130||(_path130=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C0.66 2.33 1.32 2.66 2 3 C1.67 3.33 1.34 3.66 1 4 C1.99 4.33 2.98 4.66 4 5 C4.495 6.485 4.495 6.485 5 8 C6.32 8 7.64 8 9 8 C10.703125 9.53125 10.703125 9.53125 12.25 11.5 C12.77078125 12.1496875 13.2915625 12.799375 13.828125 13.46875 C14.40820312 14.22671875 14.40820312 14.22671875 15 15 C15.33 13.35 15.66 11.7 16 10 C17.32 10 18.64 10 20 10 C20.66 9.34 21.32 8.68 22 8 C25.125 8.375 25.125 8.375 28 9 C27.01 8.319375 27.01 8.319375 26 7.625 C25.01 6.820625 25.01 6.820625 24 6 C24 5.34 24 4.68 24 4 C27.16168368 5.43130275 29.62274483 7.17514138 32.25 9.4375 C32.95640625 10.03433594 33.6628125 10.63117188 34.390625 11.24609375 C36 13 36 13 36 16 C34.29577881 16.24121582 34.29577881 16.24121582 32.55712891 16.48730469 C27.24614495 17.23960909 21.93553243 17.99451557 16.625 18.75 C15.67082184 18.8856134 14.71664368 19.02122681 13.73355103 19.16094971 C0.992029 20.97374003 -11.73976871 22.82605299 -24.44482422 24.88183594 C-25.38729004 25.03168945 -26.32975586 25.18154297 -27.30078125 25.3359375 C-28.49441284 25.53002197 -28.49441284 25.53002197 -29.7121582 25.72802734 C-32.21861768 26.0259887 -34.48194109 26.24734938 -37 26 C-37.66 25.01 -38.32 24.02 -39 23 C-40.98 23.99 -40.98 23.99 -43 25 C-43.33 24.34 -43.66 23.68 -44 23 C-43.34 23 -42.68 23 -42 23 C-40.17265301 18.6600509 -39.79516785 16.51812057 -41 12 C-32.66730546 9.09975119 -24.53921062 7.24985258 -15.83056641 5.9519043 C-12.10425693 5.69929897 -12.10425693 5.69929897 -9 4 C-10.32 3.34 -11.64 2.68 -13 2 C-11.58461283 1.66127487 -10.16762037 1.32925376 -8.75 1 C-7.96109375 0.814375 -7.1721875 0.62875 -6.359375 0.4375 C-4 0 -4 0 0 0 Z \",fill:\"#311216\",transform:\"translate(548,210)\"})),_path131||(_path131=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3.33 3.3 3.66 6.6 4 10 C3.67 9.34 3.34 8.68 3 8 C2.34 8 1.68 8 1 8 C1.33 8.99 1.66 9.98 2 11 C2.14573058 12.47965926 2.24663268 13.96403843 2.31640625 15.44921875 C2.35830078 16.29677734 2.40019531 17.14433594 2.44335938 18.01757812 C2.48267578 18.89865234 2.52199219 19.77972656 2.5625 20.6875 C2.60568359 21.58017578 2.64886719 22.47285156 2.69335938 23.39257812 C2.79935353 25.59490108 2.90142051 27.79733473 3 30 C3.66 30 4.32 30 5 30 C5 24.72 5 19.44 5 14 C5.99 13.67 6.98 13.34 8 13 C11 17.75 11 17.75 11 20 C11.556875 19.98839844 12.11375 19.97679687 12.6875 19.96484375 C17.89778343 19.90323567 22.8437951 20.25000656 28 21 C28 21.66 28 22.32 28 23 C29.32 23.33 30.64 23.66 32 24 C32 24.99 32 25.98 32 27 C33.32 27 34.64 27 36 27 C36.33 23.04 36.66 19.08 37 15 C37.33 15 37.66 15 38 15 C38 16.65 38 18.3 38 20 C38.928125 19.938125 39.85625 19.87625 40.8125 19.8125 C44 20 44 20 45.875 21.5 C46.431875 22.2425 46.431875 22.2425 47 23 C46.52820313 23.55300781 46.05640625 24.10601562 45.5703125 24.67578125 C43.81236266 27.27772193 43.36454707 29.10335344 42.875 32.1875 C42.64296875 33.62609375 42.64296875 33.62609375 42.40625 35.09375 C41.85218215 39.05746617 41.39178426 43.01686002 41 47 C40.01 47 39.02 47 38 47 C37.3397583 46.18958252 36.6795166 45.37916504 35.99926758 44.54418945 C31.57178269 40.78848575 27.6490766 41.27132146 22.01171875 41.29296875 C20.95338333 41.27784744 19.89504791 41.26272614 18.80464172 41.24714661 C15.43204494 41.20423841 12.06034266 41.19542819 8.6875 41.1875 C6.39776262 41.16435826 4.10804656 41.13899361 1.81835938 41.11132812 C-3.78776887 41.04844505 -9.39354712 41.01353557 -15 41 C-15 42.32 -15 43.64 -15 45 C-16.485 45.495 -16.485 45.495 -18 46 C-17.125 40.125 -17.125 40.125 -16 39 C-14.31391034 38.92794489 -12.62499341 38.91613932 -10.9375 38.9375 C-10.01839844 38.94652344 -9.09929687 38.95554687 -8.15234375 38.96484375 C-7.44207031 38.97644531 -6.73179687 38.98804688 -6 39 C-6 36.36 -6 33.72 -6 31 C-5.67 31.66 -5.34 32.32 -5 33 C0.94 33.33 6.88 33.66 13 34 C13 35.65 13 37.3 13 39 C13.66 39 14.32 39 15 39 C14.505 35.535 14.505 35.535 14 32 C8.06 31.67 2.12 31.34 -4 31 C-3.01 30.67 -2.02 30.34 -1 30 C-1.00785522 29.16976318 -1.00785522 29.16976318 -1.01586914 28.32275391 C-1.17618231 8.82136731 -1.17618231 8.82136731 0 0 Z \",fill:\"#070B0A\",transform:\"translate(368,309)\"})),_path132||(_path132=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.66 1.32 1.32 2 2 C3.96690374 2.67292501 3.96690374 2.67292501 6.125 3.125 C7.40375 3.41375 8.6825 3.7025 10 4 C9.67 6.97 9.34 9.94 9 13 C9.66 13 10.32 13 11 13 C11 12.01 11 11.02 11 10 C12.32 10.33 13.64 10.66 15 11 C15 11.66 15 12.32 15 13 C16.32 13 17.64 13 19 13 C19 11.35 19 9.7 19 8 C19.66 7.67 20.32 7.34 21 7 C21.65213292 4.97536745 21.65213292 4.97536745 22 3 C23.32 3.33 24.64 3.66 26 4 C26 4.66 26 5.32 26 6 C26.99 6.33 27.98 6.66 29 7 C29 10.3 29 13.6 29 17 C30.65 17.33 32.3 17.66 34 18 C33.67 19.32 33.34 20.64 33 22 C32.505 21.01 32.505 21.01 32 20 C31.01 20.99 30.02 21.98 29 23 C28.505 21.02 28.505 21.02 28 19 C27.34 19 26.68 19 26 19 C26.309375 19.680625 26.61875 20.36125 26.9375 21.0625 C28.13370649 24.36965912 28.59005397 27.51545878 29 31 C27.68 31.33 26.36 31.66 25 32 C25.02320313 31.31292969 25.04640625 30.62585938 25.0703125 29.91796875 C25.08835938 29.01691406 25.10640625 28.11585938 25.125 27.1875 C25.14820313 26.29417969 25.17140625 25.40085937 25.1953125 24.48046875 C25.18285827 21.74597286 25.18285827 21.74597286 23 19 C21.99686093 23.76491057 22.16836673 27.35298149 22.87890625 32.125 C23 34 23 34 22 36 C23.98 36 25.96 36 28 36 C28.495 35.01 28.495 35.01 29 34 C29 34.66 29 35.32 29 36 C29.99 35.67 30.98 35.34 32 35 C34.1875 35.4375 34.1875 35.4375 36 36 C36 35.34 36 34.68 36 34 C36.66 34 37.32 34 38 34 C38.495 35.98 38.495 35.98 39 38 C35.7 38 32.4 38 29 38 C29 38.99 29 39.98 29 41 C32.63 41 36.26 41 40 41 C40 41.66 40 42.32 40 43 C37.11788698 43.96070434 35.30149956 44.10581883 32.3125 44.0625 C31.10013672 44.04896484 31.10013672 44.04896484 29.86328125 44.03515625 C29.24839844 44.02355469 28.63351563 44.01195312 28 44 C28.32164617 45.95965452 28.32164617 45.95965452 29 48 C30.66279327 49.0064275 32.32983484 50.00585407 34 51 C36.27272629 53.87878663 37.09662353 55.13038823 36.6875 58.8125 C36.460625 59.534375 36.23375 60.25625 36 61 C31.74433453 62.16063604 28.3164922 61.76173392 24 61 C24 61.66 24 62.32 24 63 C21.03 63.99 21.03 63.99 18 65 C18.33 61.7 18.66 58.4 19 55 C11.08 55.495 11.08 55.495 3 56 C3 50.39 3 44.78 3 39 C5.31 39 7.62 39 10 39 C10 43.95 10 48.9 10 54 C13.3 54 16.6 54 20 54 C20.66 52.02 21.32 50.04 22 48 C22.66 48 23.32 48 24 48 C24 46.68 24 45.36 24 44 C21.03 44 18.06 44 15 44 C15 43.01 15 42.02 15 41 C18.3 41 21.6 41 25 41 C25 40.01 25 39.02 25 38 C20.71 38 16.42 38 12 38 C12.33 37.01 12.66 36.02 13 35 C15.64 35.66 18.28 36.32 21 37 C20.67 35.68 20.34 34.36 20 33 C19.34 33 18.68 33 18 33 C17.67 33.66 17.34 34.32 17 35 C16.67 33.02 16.34 31.04 16 29 C15.34 29 14.68 29 14 29 C14 27.68 14 26.36 14 25 C15.32 25.66 16.64 26.32 18 27 C17.34 24.03 16.68 21.06 16 18 C12.7 17.67 9.4 17.34 6 17 C6 16.34 6 15.68 6 15 C4.7625 15.04125 3.525 15.0825 2.25 15.125 C-0.99046026 15.11926467 -3.33349851 15.02654113 -6 13 C-6.33 12.01 -6.66 11.02 -7 10 C-5.35 9.34 -3.7 8.68 -2 8 C-1.855625 6.865625 -1.71125 5.73125 -1.5625 4.5625 C-1 1 -1 1 0 0 Z M14 31 C16 32 16 32 16 32 Z \",fill:\"#3E332F\",transform:\"translate(131,231)\"})),_path133||(_path133=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.30126 1.76708667 10.42082713 3.49482525 15.58203125 5.55859375 C17.35223633 6.26145508 17.35223633 6.26145508 19.15820312 6.97851562 C21.58294839 7.94659939 24.00743027 8.91534314 26.43164062 9.88476562 C33.01829789 12.49863234 39.60885418 14.94733994 46.36108398 17.10083008 C50.36283807 18.46436605 54.18378108 20.1882597 58 22 C57.01 22.495 57.01 22.495 56 23 C56 23.99 56 24.98 56 26 C57.32 26.33 58.64 26.66 60 27 C59.67 27.66 59.34 28.32 59 29 C58.443125 28.855625 57.88625 28.71125 57.3125 28.5625 C47.83418566 26.25696408 39.49374329 26.91897147 30 29 C29.67 29.33 29.34 29.66 29 30 C27.53262975 30.09918457 26.06056091 30.13079841 24.58984375 30.1328125 C23.68169922 30.13410156 22.77355469 30.13539063 21.83789062 30.13671875 C20.88076172 30.13285156 19.92363281 30.12898438 18.9375 30.125 C17.54241211 30.13080078 17.54241211 30.13080078 16.11914062 30.13671875 C15.20197266 30.13542969 14.28480469 30.13414062 13.33984375 30.1328125 C12.50831787 30.13168457 11.67679199 30.13055664 10.82006836 30.12939453 C7.19759568 29.9631829 3.59828124 29.44978516 0 29 C0 19.43 0 9.86 0 0 Z \",fill:\"#1D1110\",transform:\"translate(0,160)\"})),_path134||(_path134=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C22.11 0 44.22 0 67 0 C67.495 12.375 67.495 12.375 68 25 C79.88 25.66 91.76 26.32 104 27 C104.33 24.36 104.66 21.72 105 19 C105.33 19 105.66 19 106 19 C106 22.3 106 25.6 106 29 C103.72923859 29.0275801 101.45837359 29.04665143 99.1875 29.0625 C97.29064453 29.07990234 97.29064453 29.07990234 95.35546875 29.09765625 C91.19498564 29.06316772 87.09824053 28.65967851 82.9597168 28.25610352 C77.75256637 27.80553016 72.53441894 27.6325625 67.3125 27.4375 C66.21744141 27.39431641 65.12238281 27.35113281 63.99414062 27.30664062 C61.32951403 27.20191731 58.66481689 27.09974221 56 27 C56 26.67 56 26.34 56 26 C54.35 25.67 52.7 25.34 51 25 C50.13036913 22.00293305 49.88236901 19.35043474 49.90234375 16.234375 C49.90484131 15.43225586 49.90733887 14.63013672 49.90991211 13.80371094 C49.91901611 12.79598633 49.92812012 11.78826172 49.9375 10.75 C49.958125 7.5325 49.97875 4.315 50 1 C43.4 1 36.8 1 30 1 C30 8.26 30 15.52 30 23 C24.06 23 18.12 23 12 23 C11.67 22.34 11.34 21.68 11 21 C8.69 21 6.38 21 4 21 C4 19.35 4 17.7 4 16 C7.3 16 10.6 16 14 16 C14 14.35 14 12.7 14 11 C13.34 11 12.68 11 12 11 C12 7.7 12 4.4 12 1 C8.04 1 4.08 1 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#391D0E\",transform:\"translate(472,261)\"})),_path135||(_path135=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C10.23 0 20.46 0 31 0 C31 0.33 31 0.66 31 1 C28.69 1 26.38 1 24 1 C24 2.98 24 4.96 24 7 C24.70125 6.97679687 25.4025 6.95359375 26.125 6.9296875 C32.15558862 6.81497522 37.22443873 7.25643433 43 9 C43.66 6.69 44.32 4.38 45 2 C42.69 2 40.38 2 38 2 C37.67 2.66 37.34 3.32 37 4 C37 3.34 37 2.68 37 2 C36.01 1.67 35.02 1.34 34 1 C49.51 1 65.02 1 81 1 C81 1.33 81 1.66 81 2 C79.35 2 77.7 2 76 2 C76 3.65 76 5.3 76 7 C75.34 7 74.68 7 74 7 C74 5.35 74 3.7 74 2 C73.505 2.165 73.01 2.33 72.5 2.5 C68.96555911 3.20688818 65.60309299 3.06005155 62 3 C62 4.32 62 5.64 62 7 C69.59 7.33 77.18 7.66 85 8 C81.21157527 10.52561648 78.21466671 10.25391573 73.83203125 10.1953125 C72.63981209 10.19106766 72.63981209 10.19106766 71.42350769 10.18673706 C68.88635162 10.17554705 66.34954928 10.15044491 63.8125 10.125 C62.09180198 10.11496866 60.37109841 10.10584308 58.65039062 10.09765625 C54.43345757 10.07561161 50.21678875 10.04109006 46 10 C46 12.64 46 15.28 46 18 C47.7015625 18.185625 47.7015625 18.185625 49.4375 18.375 C51.2009375 18.684375 51.2009375 18.684375 53 19 C53.495 19.99 53.495 19.99 54 21 C51.69 21 49.38 21 47 21 C47 27.93 47 34.86 47 42 C47.66 42.33 48.32 42.66 49 43 C49 44.98 49 46.96 49 49 C48.34 49 47.68 49 47 49 C45.46232654 40.01282114 44.51856202 31.102128 44 22 C42.68 21.67 41.36 21.34 40 21 C40 20.01 40 19.02 40 18 C38.38931641 18.03480469 38.38931641 18.03480469 36.74609375 18.0703125 C35.30990285 18.08908624 33.87370435 18.1072847 32.4375 18.125 C31.73302734 18.14175781 31.02855469 18.15851563 30.30273438 18.17578125 C25.49917172 18.22005372 21.61920607 17.4597712 17 16 C10.43841299 14.27544037 3.93917915 13.48855969 -2.8125 12.9375 C-4.65258361 12.78277442 -6.49244087 12.62532712 -8.33203125 12.46484375 C-9.13358643 12.399021 -9.9351416 12.33319824 -10.76098633 12.26538086 C-12.9121579 12.01041155 -14.91391849 11.57511094 -17 11 C-17 10.34 -17 9.68 -17 9 C-16.01 9 -15.02 9 -14 9 C-14 8.34 -14 7.68 -14 7 C-6.08 6.505 -6.08 6.505 2 6 C2 4.35 2 2.7 2 1 C1.34 0.67 0.68 0.34 0 0 Z \",fill:\"#313B31\",transform:\"translate(376,266)\"})),_path136||(_path136=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.94 0 11.88 0 18 0 C16.68 1.65 15.36 3.3 14 5 C13.34 5 12.68 5 12 5 C11.92523438 5.71027344 11.85046875 6.42054688 11.7734375 7.15234375 C10.78935996 10.77553832 9.06446323 12.72435427 6.625 15.5625 C3.36515764 19.36109882 3.36515764 19.36109882 0.3359375 23.33984375 C-0.32535156 24.16162109 -0.32535156 24.16162109 -1 25 C-1.66 25 -2.32 25 -3 25 C-3.20625 25.721875 -3.4125 26.44375 -3.625 27.1875 C-5.08916319 30.18237926 -6.66978102 31.41233321 -9.27734375 33.3984375 C-12.24852538 36.16076056 -14.28816051 39.59997736 -16.484375 42.98828125 C-16.98453125 43.65214844 -17.4846875 44.31601562 -18 45 C-18.66 45 -19.32 45 -20 45 C-20.25523438 45.57492187 -20.51046875 46.14984375 -20.7734375 46.7421875 C-22.13037589 49.23999129 -23.69453146 51.04070926 -25.625 53.125 C-29.3820092 57.25908129 -32.88565218 61.5416967 -36.3359375 65.93359375 C-38 68 -38 68 -40 70 C-40.37125 70.99 -40.7425 71.98 -41.125 73 C-43.29820502 78.32604131 -47.06889944 82.85189602 -51 87 C-51.66 87 -52.32 87 -53 87 C-53.2165625 87.53496094 -53.433125 88.06992187 -53.65625 88.62109375 C-55.48317222 91.85538338 -57.95883813 94.38672878 -60.5 97.0625 C-63.21130519 99.93844517 -65.79846483 102.69769724 -68 106 C-68.66 106 -69.32 106 -70 106 C-70 106.66 -70 107.32 -70 108 C-71.98 108 -73.96 108 -76 108 C-77.125 104.25 -77.125 104.25 -76 102 C-75.34 102 -74.68 102 -74 102 C-73.62875 100.9171875 -73.62875 100.9171875 -73.25 99.8125 C-70.55024738 93.73805661 -65.3570078 88.95797439 -61 84 C-59.87204719 82.71091108 -58.74683078 81.41942013 -57.625 80.125 C-57.14289062 79.57070313 -56.66078125 79.01640625 -56.1640625 78.4453125 C-54.9045572 76.98639963 -54.9045572 76.98639963 -54 75 C-53.01 75 -52.02 75 -51 75 C-49.79371992 72.66785852 -48.8345262 70.50357861 -48 68 C-46.36739286 66.62517293 -44.69774938 65.29352333 -43 64 C-40.91138015 62.22080531 -40.08367783 61.22712555 -39.125 58.625 C-37.69144628 55.28004132 -35.72021914 53.38019175 -33 51 C-32.34 51 -31.68 51 -31 51 C-30.7628125 50.46890625 -30.525625 49.9378125 -30.28125 49.390625 C-28.62621616 46.30257405 -26.59451872 43.5471528 -24.5 40.75 C-24.09652344 40.19570313 -23.69304687 39.64140625 -23.27734375 39.0703125 C-22.23549829 37.67430835 -21.12254588 36.33197608 -20 35 C-19.34 35 -18.68 35 -18 35 C-17.690625 34.38125 -17.38125 33.7625 -17.0625 33.125 C-16.375 31.75 -15.6875 30.375 -15 29 C-14.34 29 -13.68 29 -13 29 C-12.67 27.68 -12.34 26.36 -12 25 C-11.34 25 -10.68 25 -10 25 C-9.34 23.68 -8.68 22.36 -8 21 C-7.34 21 -6.68 21 -6 21 C-5.73832031 20.42121094 -5.47664063 19.84242188 -5.20703125 19.24609375 C-3.92707261 16.86429369 -2.48643946 15.07683354 -0.6875 13.0625 C-0.06875 12.36898437 0.55 11.67546875 1.1875 10.9609375 C3.39343705 8.57434181 5.70222873 6.29777127 8 4 C8.66 3.01 9.32 2.02 10 1 C6.7 1 3.4 1 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#3F2822\",transform:\"translate(114,518)\"})),_path137||(_path137=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.90722293 -0.02500545 9.81440752 -0.04300225 14.72167969 -0.05493164 C16.38574877 -0.05991292 18.04981359 -0.06670037 19.71386719 -0.07543945 C47.16216206 -0.21581882 47.16216206 -0.21581882 53.75 3.5625 C54.56984375 4.01753906 55.3896875 4.47257812 56.234375 4.94140625 C57.10835937 5.46541016 57.10835937 5.46541016 58 6 C58 6.66 58 7.32 58 8 C59.32 8.66 60.64 9.32 62 10 C62 10.66 62 11.32 62 12 C62.99 12.33 63.98 12.66 65 13 C65.495 14.485 65.495 14.485 66 16 C65.34 16 64.68 16 64 16 C64 16.99 64 17.98 64 19 C63.401875 18.690625 62.80375 18.38125 62.1875 18.0625 C58.37909947 16.21270546 55.42153564 15.86914121 51.234375 15.82421875 C31.36609597 15.46786128 12.16564995 13.43333191 -7.48876953 10.47485352 C-10.85820681 10.0191759 -14.19900775 9.70820519 -17.58984375 9.46484375 C-18.78544922 9.37783203 -19.98105469 9.29082031 -21.21289062 9.20117188 C-22.44201172 9.11416016 -23.67113281 9.02714844 -24.9375 8.9375 C-26.19369141 8.84662109 -27.44988281 8.75574219 -28.74414062 8.66210938 C-31.82927722 8.43922878 -34.91455717 8.2185933 -38 8 C-38 8.66 -38 9.32 -38 10 C-38.66 10 -39.32 10 -40 10 C-39.25 7.5625 -39.25 7.5625 -38 5 C-28.54407809 1.33504158 -14.99141258 4.22739203 -5.125 5 C-3.85269531 5.09539062 -2.58039063 5.19078125 -1.26953125 5.2890625 C1.82069542 5.52141037 4.91048215 5.75844069 8 6 C8 4.68 8 3.36 8 2 C5.36 2 2.72 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#310B0E\",transform:\"translate(200,464)\"})),_path138||(_path138=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.81621826 0.22719727 0.81621826 0.22719727 1.64892578 0.45898438 C4.13883818 1.14724424 6.63181483 1.82369611 9.125 2.5 C10.40890625 2.85771484 10.40890625 2.85771484 11.71875 3.22265625 C16.29316199 4.45422871 20.22754377 5.17354386 25 5 C27.0078864 5.64252365 29.00882592 6.30741771 31 7 C32.32 7 33.64 7 35 7 C35 7.66 35 8.32 35 9 C51.99486913 10.22643385 68.97272067 10.10250747 86 10 C86 9.67 86 9.34 86 9 C93.92 9 101.84 9 110 9 C109.67 9.99 109.34 10.98 109 12 C114.46137814 12.09752461 119.59255982 11.77249145 125 11 C114.97479088 21.02520912 81.91275592 18.98071147 68.375 19.1875 C50.31046942 19.12714332 32.88964182 16.31151218 15.28637695 12.42724609 C12.89616644 11.90815678 12.89616644 11.90815678 10 12 C10 12.99 10 13.98 10 15 C11.32 15.33 12.64 15.66 14 16 C13.01 16.66 12.02 17.32 11 18 C11.33 18.99 11.66 19.98 12 21 C12.95261719 21.1340625 13.90523437 21.268125 14.88671875 21.40625 C17.82962792 21.82634862 20.76876493 22.26734867 23.70703125 22.71875 C24.9590332 22.91017578 24.9590332 22.91017578 26.23632812 23.10546875 C27.94232674 23.36673617 29.64806139 23.62973359 31.35351562 23.89453125 C41.77452864 25.48051171 52.09111206 26.20432432 62.625 26.5625 C63.81996094 26.60568359 65.01492188 26.64886719 66.24609375 26.69335938 C69.16397406 26.79840307 72.08192438 26.90055648 75 27 C75 27.33 75 27.66 75 28 C48.86376044 28.31094638 25.51255099 26.25529736 0 20 C0.185625 19.21625 0.37125 18.4325 0.5625 17.625 C1.25962266 15.02910225 1.25962266 15.02910225 0 13 C1.98 12.01 3.96 11.02 6 10 C5.01 9.67 4.02 9.34 3 9 C3 8.34 3 7.68 3 7 C10.40774509 8.39304941 17.70170537 10.11899623 25 12 C24.67 11.01 24.34 10.02 24 9 C21.94259062 8.14717967 21.94259062 8.14717967 19.4140625 7.68359375 C18.48335937 7.47669922 17.55265625 7.26980469 16.59375 7.05664062 C15.6140625 6.85232422 14.634375 6.64800781 13.625 6.4375 C11.69933278 6.02503945 9.77478924 5.60728804 7.8515625 5.18359375 C6.99385254 5.00368896 6.13614258 4.82378418 5.25244141 4.63842773 C3 4 3 4 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#9EB399\",transform:\"translate(230,157)\"})),_path139||(_path139=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C9.64815684 -0.14575478 19.09679088 0.26058585 28.7109375 1.09375 C30.05852115 1.20635594 31.40614793 1.31844684 32.7538147 1.43005371 C36.24918255 1.72087784 39.74393211 2.01854992 43.23858643 2.31781006 C46.82536731 2.62368501 50.41270669 2.92286181 54 3.22265625 C61.0005527 3.80866784 68.00041201 4.40255946 75 5 C75 9.29 75 13.58 75 18 C60.163063 16.9568851 45.69330217 15.15747153 31.08691406 12.33544922 C28.85862043 11.92064889 28.85862043 11.92064889 26 12 C29.44450737 14.29633824 31.93812283 14.54016485 36 15 C36 15.66 36 16.32 36 17 C36.99 17.33 37.98 17.66 39 18 C37.54166667 17.85416667 36.08333333 17.70833333 34.625 17.5625 C33.71105469 17.47226562 32.79710937 17.38203125 31.85546875 17.2890625 C30.04459757 17.10574586 28.23453955 16.91404541 26.42578125 16.7109375 C22.53394326 16.283263 18.78916961 15.9690274 14.875 16.125 C7.83712941 16.2522671 0.85828741 14.41373287 -6 13 C-6 12.67 -6 12.34 -6 12 C-1.6141714 11.91049329 2.65964391 11.85865847 7 12.5625 C7.99 12.706875 8.98 12.85125 10 13 C10.33 12.67 10.66 12.34 11 12 C10.00419922 11.92652344 10.00419922 11.92652344 8.98828125 11.8515625 C0.21792619 11.10896309 0.21792619 11.10896309 -4 9 C-4 8.67 -4 8.34 -4 8 C0.95 8.33 5.9 8.66 11 9 C2.585 7.515 2.585 7.515 -6 6 C-3.33333333 4.66666667 -0.66666667 3.33333333 2 2 C1.34 1.34 0.68 0.68 0 0 Z \",fill:\"#B37959\",transform:\"translate(551,304)\"})),_path140||(_path140=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C9.64363986 1.68763698 18.15137978 6.5519644 26.6875 11.125 C35.72616948 15.96679002 44.94998446 20.19762829 54.38549805 24.20751953 C60.47559919 26.81098953 66.2869935 29.64499838 72 33 C72 33.66 72 34.32 72 35 C72.72703125 35.27199219 73.4540625 35.54398437 74.203125 35.82421875 C76.90791598 36.9612887 79.25862476 38.26963853 81.75 39.8125 C87.36233296 43.2362718 93.07525411 46.43004103 98.8671875 49.5390625 C99.83914063 50.06242187 100.81109375 50.58578125 101.8125 51.125 C102.70582031 51.60195313 103.59914063 52.07890625 104.51953125 52.5703125 C107 54 107 54 109.08984375 55.60546875 C111.82467824 57.60206571 114.74695086 58.18673771 118 59 C118 59.66 118 60.32 118 61 C118.9590625 61.185625 118.9590625 61.185625 119.9375 61.375 C120.618125 61.58125 121.29875 61.7875 122 62 C122.33 62.66 122.66 63.32 123 64 C125.02463255 64.65213292 125.02463255 64.65213292 127 65 C127 65.66 127 66.32 127 67 C127.56589844 67.13277344 128.13179687 67.26554687 128.71484375 67.40234375 C129.81505859 67.66724609 129.81505859 67.66724609 130.9375 67.9375 C131.66839844 68.11152344 132.39929688 68.28554688 133.15234375 68.46484375 C135 69 135 69 136 70 C136.07205511 71.68608966 136.08386068 73.37500659 136.0625 75.0625 C136.05347656 75.98160156 136.04445313 76.90070313 136.03515625 77.84765625 C136.01775391 78.91306641 136.01775391 78.91306641 136 80 C132.56001929 78.79135813 130.50075729 77.61442808 128 75 C126.515 74.505 126.515 74.505 125 74 C125 73.34 125 72.68 125 72 C124.175 71.938125 123.35 71.87625 122.5 71.8125 C118.08929114 70.78858544 114.51558698 68.86422188 111 66 C111 65.34 111 64.68 111 64 C109.02 63.67 107.04 63.34 105 63 C105 62.34 105 61.68 105 61 C104.26910156 60.89945312 103.53820312 60.79890625 102.78515625 60.6953125 C99.67664447 59.9192745 97.98393845 58.79667775 95.4375 56.875 C88.18699677 51.61462006 80.44301258 47.30056636 72.5625 43.0625 C68.2503989 40.72362645 64.01277659 38.28276392 59.8125 35.75 C58.70519531 35.08484375 57.59789062 34.4196875 56.45703125 33.734375 C55.24080078 32.87585938 55.24080078 32.87585938 54 32 C54 31.34 54 30.68 54 30 C53.05125 29.690625 52.1025 29.38125 51.125 29.0625 C48 28 48 28 46 27 C46 26.34 46 25.68 46 25 C45.34773437 24.90203125 44.69546875 24.8040625 44.0234375 24.703125 C38.36475452 23.73497275 34.72011618 22.40287445 30 19 C27.42938689 18.35232207 27.42938689 18.35232207 25 18 C22.6875 16.9375 22.6875 16.9375 21 16 C21.33 15.34 21.66 14.68 22 14 C21.24074219 13.60167969 20.48148437 13.20335937 19.69921875 12.79296875 C18.70535156 12.26316406 17.71148437 11.73335938 16.6875 11.1875 C15.70136719 10.66542969 14.71523438 10.14335937 13.69921875 9.60546875 C11.34121055 8.20294868 9.88512334 6.92701497 8 5 C5.96767758 3.80400932 5.96767758 3.80400932 3.8125 2.8125 C3.09707031 2.46832031 2.38164062 2.12414062 1.64453125 1.76953125 C1.10183594 1.51558594 0.55914062 1.26164062 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#624133\",transform:\"translate(490,422)\"})),_path141||(_path141=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.67449684 -0.72285184 5.45932488 -0.98892952 9 0 C13.2242756 3.53533795 16.57369789 7.70600625 20 12 C21.16208984 13.41539063 21.16208984 13.41539063 22.34765625 14.859375 C23.82428632 16.6615408 25.29306342 18.47016971 26.75390625 20.28515625 C29.0883059 23.10673495 31.51990598 25.80590712 34 28.5 C38.01974536 32.87170463 41.79988195 37.37786886 45.53125 41.99609375 C48.93962446 46.14330888 52.46108232 50.18737805 55.98706055 54.23461914 C59.22237314 57.94829749 62.43673375 61.67796739 65.62841797 65.42919922 C69.89131212 70.43757828 74.21254196 75.36728832 78.6875 80.1875 C83.71285374 85.61458987 88.36953652 91.23089796 93 97 C93 91.72 93 86.44 93 81 C95 82 97 83 99 84 C99.06058594 85.07636719 99.12117188 86.15273437 99.18359375 87.26171875 C99.69298302 96.183718 100.27192948 105.09275423 101 114 C94.43682066 107.64853612 88.40946376 100.80101212 82.6875 93.6875 C78.2751195 88.23191221 73.55741476 83.11468091 68.7734375 77.98828125 C66.63645686 75.6964159 64.54776652 73.37241243 62.5 71 C59.44845091 67.47211154 56.29457847 64.04645247 53.125 60.625 C46.24594306 53.19861172 39.46122204 45.6962179 32.8125 38.0625 C30.72788836 35.69035571 28.61571356 33.34443935 26.5 31 C23.2373201 27.38459795 20.0142505 23.7391044 16.81640625 20.06640625 C14.71083512 17.67103608 12.57551312 15.30394858 10.4375 12.9375 C0 1.35616438 0 1.35616438 0 0 Z \",fill:\"#EBC687\",transform:\"translate(57,0)\"})),_path142||(_path142=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.375 0.6875 2.375 0.6875 5 2 C5.71247732 3.6476038 6.37400383 5.31763529 7 7 C8.62449243 8.70779973 10.29220027 10.37550757 12 12 C15 15.62068966 15 15.62068966 15 18 C15.99 18.33 16.98 18.66 18 19 C19.6875 20.375 19.6875 20.375 21 22 C21 22.99 21 23.98 21 25 C21.66 25 22.32 25 23 25 C24.5078125 27.1171875 24.5078125 27.1171875 26.125 29.875 C26.66382813 30.77992187 27.20265625 31.68484375 27.7578125 32.6171875 C29 35 29 35 29 37 C29.57363281 37.22816406 30.14726562 37.45632812 30.73828125 37.69140625 C33.60384519 39.34937502 35.15128793 41.33588571 37.1875 43.9375 C37.88230469 44.81277344 38.57710937 45.68804687 39.29296875 46.58984375 C41.63570935 49.89755759 42.15818657 52.7223528 42.53515625 56.66796875 C42.66567383 58.00698242 42.66567383 58.00698242 42.79882812 59.37304688 C42.9293457 60.76620117 42.9293457 60.76620117 43.0625 62.1875 C43.15337891 63.12787109 43.24425781 64.06824219 43.33789062 65.03710938 C43.56171111 67.35777437 43.78126402 69.67885024 44 72 C44.33 68.04 44.66 64.08 45 60 C45.99 60.495 45.99 60.495 47 61 C47 66.61 47 72.22 47 78 C43.29552564 75.03642051 41.19648444 73.216227 38.5 69.625 C34.44799897 64.40086841 30.00333733 59.63966165 25.39257812 54.91064453 C22.36310715 51.73911055 20.41911319 49.22761991 19 45 C18.319375 44.2575 17.63875 43.515 16.9375 42.75 C13.96952312 38.53738766 14 34.04509037 14 29 C13.34 29 12.68 29 12 29 C8.19066634 25.7481298 6.91112036 23.81592188 6 19 C4.11629529 17.6830333 4.11629529 17.6830333 2 17 C0 16 0 16 -0.6171875 14.29296875 C-1.06672196 11.60034908 -1.13228876 9.04214107 -1.125 6.3125 C-1.12757812 5.33925781 -1.13015625 4.36601562 -1.1328125 3.36328125 C-1 1 -1 1 0 0 Z \",fill:\"#4F3525\",transform:\"translate(104,20)\"})),_path143||(_path143=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.53491862 -0.22876444 7.6904582 0.39683858 11.875 2.125 C13.02484375 2.58777344 14.1746875 3.05054688 15.359375 3.52734375 C16.56078125 4.01332031 17.7621875 4.49929687 19 5 C21.37182993 5.90419308 23.74703807 6.7995589 26.125 7.6875 C27.07560303 8.04509399 27.07560303 8.04509399 28.04541016 8.40991211 C32.64702163 10.13700762 37.26236497 11.82394301 41.8828125 13.5 C43.70208252 14.1638269 43.70208252 14.1638269 45.55810547 14.84106445 C47.990002 15.72797818 50.42388505 16.60946666 52.85986328 17.48510742 C53.98376465 17.89607666 55.10766602 18.3070459 56.265625 18.73046875 C57.27399414 19.09551514 58.28236328 19.46056152 59.32128906 19.83666992 C61.89903782 20.95615341 63.84289838 22.2153545 66 24 C65.29617187 23.98839844 64.59234375 23.97679687 63.8671875 23.96484375 C55.93009387 23.89231156 47.86676859 23.85140844 40 25 C39.34 25.66 38.68 26.32 38 27 C38.495 27.99 38.495 27.99 39 29 C37.68 29.33 36.36 29.66 35 30 C35 29.01 35 28.02 35 27 C32.36 26.34 29.72 25.68 27 25 C27 24.34 27 23.68 27 23 C24.03 22.01 21.06 21.02 18 20 C18 20.66 18 21.32 18 22 C15.36 21.67 12.72 21.34 10 21 C9.505 19.515 9.505 19.515 9 18 C10.32 17.67 11.64 17.34 13 17 C12.0821875 16.90203125 11.164375 16.8040625 10.21875 16.703125 C3.94838571 15.93908902 -1.38600934 15.2484903 -6.875 12.078125 C-11.61503568 9.67325395 -16.90715321 8.4606388 -22 7 C-22.78890625 6.77054688 -23.5778125 6.54109375 -24.390625 6.3046875 C-25.92482478 5.86189 -27.46194753 5.42922395 -29 5 C-29 4.67 -29 4.34 -29 4 C-28.43603516 3.97494385 -27.87207031 3.9498877 -27.29101562 3.92407227 C-24.69385118 3.80681699 -22.0969369 3.68468734 -19.5 3.5625 C-18.613125 3.52318359 -17.72625 3.48386719 -16.8125 3.44335938 C-11.50009226 3.18945753 -6.24491292 2.90823607 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#3B2722\",transform:\"translate(121,208)\"})),_path144||(_path144=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.29161047 -0.05783842 8.58312145 -0.0935412 12.875 -0.125 C14.09832031 -0.14175781 15.32164063 -0.15851562 16.58203125 -0.17578125 C17.74863281 -0.18222656 18.91523437 -0.18867187 20.1171875 -0.1953125 C21.19597168 -0.20578613 22.27475586 -0.21625977 23.38623047 -0.22705078 C26 0 26 0 28 2 C28 2.99 28 3.98 28 5 C28.66 5 29.32 5 30 5 C31.5859375 6.79296875 31.5859375 6.79296875 33.375 9.1875 C34.30119141 10.41339844 34.30119141 10.41339844 35.24609375 11.6640625 C36.11427734 12.82035156 36.11427734 12.82035156 37 14 C38.32917292 15.66998649 39.66014102 17.33857487 41 19 C40.67 19.66 40.34 20.32 40 21 C39.34 21 38.68 21 38 21 C38 25.95 38 30.9 38 36 C39.32 36.66 40.64 37.32 42 38 C42.99 38.495 42.99 38.495 44 39 C44.103125 39.598125 44.20625 40.19625 44.3125 40.8125 C45.29692268 43.94475397 47.45240402 45.04031078 50 47 C50 47.66 50 48.32 50 49 C50.66 49 51.32 49 52 49 C52 49.66 52 50.32 52 51 C52.99 51.495 52.99 51.495 54 52 C53.773125 52.70125 53.54625 53.4025 53.3125 54.125 C52.89709361 57.94673879 54.02535985 59.75594832 56 63 C57.56102491 64.81554159 57.56102491 64.81554159 59 66 C58.67 66.66 58.34 67.32 58 68 C51.92650124 61.49511255 46.03975991 54.92524161 40.453125 47.9921875 C34.29985205 40.48676222 27.83908905 33.23124204 21.4375 25.9375 C18.25691442 22.30368097 15.09265955 18.6559021 11.9375 15 C11.44241943 14.43015381 10.94733887 13.86030762 10.43725586 13.27319336 C6.75422644 8.99413729 3.34004167 4.55090836 0 0 Z \",fill:\"#3A211D\",transform:\"translate(66,0)\"})),_path145||(_path145=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.99 1.32 1.98 2 3 C5.0863706 3.49565508 5.0863706 3.49565508 8.72265625 3.4765625 C9.38333603 3.49214203 10.04401581 3.50772156 10.72471619 3.52377319 C12.83729875 3.57135494 14.94954991 3.59907718 17.0625 3.625 C19.17878766 3.66145051 21.29488577 3.70202944 23.41099548 3.74765015 C25.3286139 3.78737336 27.24646956 3.81509595 29.16430664 3.84228516 C32 4 32 4 33 5 C33.08651611 6.41570123 33.10704904 7.835595 33.09765625 9.25390625 C33.09443359 10.10791016 33.09121094 10.96191406 33.08789062 11.84179688 C33.07532227 13.18854492 33.07532227 13.18854492 33.0625 14.5625 C33.05798828 15.46419922 33.05347656 16.36589844 33.04882812 17.29492188 C33.03700225 19.53001314 33.0205222 21.76497437 33 24 C31.62714844 24.07347656 31.62714844 24.07347656 30.2265625 24.1484375 C29.03804687 24.22320312 27.84953125 24.29796875 26.625 24.375 C25.44164062 24.44460938 24.25828125 24.51421875 23.0390625 24.5859375 C19.89437681 24.70217346 19.89437681 24.70217346 18 27 C17.01 25.02 16.02 23.04 15 21 C14.33613281 21.49113281 13.67226562 21.98226563 12.98828125 22.48828125 C9.30606324 24.35105036 6.2053057 24.33744682 2.1875 24.1875 C1.14819336 24.16719727 1.14819336 24.16719727 0.08789062 24.14648438 C-1.60841265 24.11138845 -3.30431136 24.05758943 -5 24 C-5.33 24.99 -5.66 25.98 -6 27 C-7.62463842 27.05395478 -9.24978541 27.09277195 -10.875 27.125 C-11.77992188 27.14820313 -12.68484375 27.17140625 -13.6171875 27.1953125 C-16 27 -16 27 -18 25 C-18.125 22.375 -18.125 22.375 -18 20 C-15.03 19.34 -12.06 18.68 -9 18 C-11.64 17.01 -14.28 16.02 -17 15 C-17 14.01 -17 13.02 -17 12 C-16.01 12 -15.02 12 -14 12 C-14 11.34 -14 10.68 -14 10 C-13.07767578 10.01740234 -13.07767578 10.01740234 -12.13671875 10.03515625 C-10.92435547 10.04869141 -10.92435547 10.04869141 -9.6875 10.0625 C-8.88699219 10.07410156 -8.08648437 10.08570313 -7.26171875 10.09765625 C-4.83138666 10.09657855 -4.83138666 10.09657855 -2 9 C-1.19436362 6.89415562 -1.19436362 6.89415562 -0.8125 4.4375 C-0.65394531 3.61121094 -0.49539062 2.78492188 -0.33203125 1.93359375 C-0.16767578 0.97646484 -0.16767578 0.97646484 0 0 Z \",fill:\"#EB2912\",transform:\"translate(169,282)\"})),_path146||(_path146=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C13.16353018 5.26541207 26.31146179 10.6557309 39 17 C39.495 25.91 39.495 25.91 40 35 C40.33 29.72 40.66 24.44 41 19 C41.66 19 42.32 19 43 19 C43 24.94 43 30.88 43 37 C43.66 37 44.32 37 45 37 C45 31.39 45 25.78 45 20 C45.33 20 45.66 20 46 20 C46 25.94 46 31.88 46 38 C41.11118047 39.22220488 38.42102752 37.94759107 33.9453125 36.140625 C33.16614471 35.83558044 32.38697693 35.53053589 31.584198 35.21624756 C29.09359362 34.2378014 26.60951019 33.24380408 24.125 32.25 C22.46001034 31.59539975 20.79464935 30.94174313 19.12890625 30.2890625 C17.52570221 29.65711048 15.92282657 29.02432459 14.3203125 28.390625 C13.57637238 28.09673889 12.83243225 27.80285278 12.06594849 27.50006104 C11.00487381 27.0751236 11.00487381 27.0751236 9.92236328 26.64160156 C9.30821564 26.3965387 8.69406799 26.15147583 8.06130981 25.89898682 C5.32528844 24.70574205 2.66977842 23.33488921 0 22 C0 14.74 0 7.48 0 0 Z \",fill:\"#CDA077\",transform:\"translate(0,138)\"})),_path147||(_path147=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.26924576 2.88262318 4.06537502 5.81279065 5.78515625 9.05078125 C8.89518003 14.82845887 12.1272655 20.52244 15.4375 26.1875 C16.23897461 27.58645508 16.23897461 27.58645508 17.05664062 29.01367188 C22.03900916 37.5249689 27.65462622 45.93679401 37 50 C39.73018799 50.62537639 42.18658917 50.84928156 45 51 C45 51.33 45 51.66 45 52 C41.37 52 37.74 52 34 52 C34 52.66 34 53.32 34 54 C34.99 54.33 35.98 54.66 37 55 C35.80375 54.979375 34.6075 54.95875 33.375 54.9375 C29.81995131 54.93117429 26.49444376 55.30111125 23 56 C24.64138086 59.55544878 24.64138086 59.55544878 27.71875 61.65625 C30.58840588 62.0886639 33.34878246 62.09403497 36.25 62.0625 C37.32765625 62.05347656 38.4053125 62.04445313 39.515625 62.03515625 C40.33546875 62.02355469 41.1553125 62.01195312 42 62 C42.495 61.01 42.495 61.01 43 60 C44 61 44 61 44.0625 63.5625 C44.041875 64.366875 44.02125 65.17125 44 66 C42.02 66 40.04 66 38 66 C38 66.66 38 67.32 38 68 C38.99 68.495 38.99 68.495 40 69 C32.66250018 68.32060187 25.21754971 67.14503314 19 63 C18.234375 61.125 18.234375 61.125 17.75 59 C17.57984375 58.29875 17.4096875 57.5975 17.234375 56.875 C17 55 17 55 18 53 C17.01 53 16.02 53 15 53 C13.515 48.545 13.515 48.545 12 44 C8.7 43.34 5.4 42.68 2 42 C2 41.34 2 40.68 2 40 C1.34 40 0.68 40 0 40 C0 39.34 0 38.68 0 38 C-0.66 37.67 -1.32 37.34 -2 37 C-1.38125 37.165 -0.7625 37.33 -0.125 37.5 C1.96063386 38.07634644 1.96063386 38.07634644 4 38 C3.67 37.278125 3.34 36.55625 3 35.8125 C1.99396471 32.98302573 1.83022598 30.97104534 2 28 C1.34 28 0.68 28 0 28 C-1.76462683 24.91190305 -2 23.76687864 -2 20 C-2.66 20 -3.32 20 -4 20 C-4.66 18.68 -5.32 17.36 -6 16 C-3.69 16 -1.38 16 1 16 C0.40219906 9.99921625 0.40219906 9.99921625 -0.625 4.0625 C-1 2 -1 2 0 0 Z \",fill:\"#050F0E\",transform:\"translate(494,340)\"})),_path148||(_path148=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C19.14 0 38.28 0 58 0 C58 0.99 58 1.98 58 3 C57.01 3 56.02 3 55 3 C53.66018514 3.3062434 52.32488113 3.63451555 51 4 C51 3.34 51 2.68 51 2 C50.34 2.33 49.68 2.66 49 3 C49 4.32 49 5.64 49 7 C49.66 7.33 50.32 7.66 51 8 C48.65509272 10.34490728 43.00620598 10.4292014 40 11 C39.67 14.96 39.34 18.92 39 23 C23.45771387 23.49720584 11.87336517 21.60083304 -2 14 C-1.77734375 11.640625 -1.77734375 11.640625 -1 9 C0.99609375 7.671875 0.99609375 7.671875 3.4375 6.75 C4.64212891 6.27820313 4.64212891 6.27820313 5.87109375 5.796875 C6.92490234 5.40242187 6.92490234 5.40242187 8 5 C8.66 4.67 9.32 4.34 10 4 C11.81171098 3.84693099 13.6283794 3.75053339 15.4453125 3.68359375 C16.41484863 3.64548584 17.38438477 3.60737793 18.38330078 3.56811523 C19.61806152 3.52501221 20.85282227 3.48190918 22.125 3.4375 C26.04375 3.293125 29.9625 3.14875 34 3 C22.78 3 11.56 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#E3D7B0\",transform:\"translate(286,246)\"})),_path149||(_path149=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4 0.66 4 1.32 4 2 C7.63 1.67 11.26 1.34 15 1 C14.67 2.65 14.34 4.3 14 6 C17.63 6 21.26 6 25 6 C25 6.33 25 6.66 25 7 C21.04 7 17.08 7 13 7 C14.32 7.66 15.64 8.32 17 9 C17 11.31 17 13.62 17 16 C17.66 16 18.32 16 19 16 C19 15.01 19 14.02 19 13 C20.32 13.33 21.64 13.66 23 14 C22.01 14 21.02 14 20 14 C20 14.66 20 15.32 20 16 C21.32 16.66 22.64 17.32 24 18 C23.125 21.875 23.125 21.875 22 23 C22 24.65 22 26.3 22 28 C18.7 28 15.4 28 12 28 C12 27.34 12 26.68 12 26 C11.34 26 10.68 26 10 26 C9.505 22.535 9.505 22.535 9 19 C8.01 19.66 7.02 20.32 6 21 C5.34 18.69 4.68 16.38 4 14 C2.7625 14.061875 1.525 14.12375 0.25 14.1875 C-0.79414063 14.23970703 -0.79414063 14.23970703 -1.859375 14.29296875 C-5.34364466 15.44379504 -6.2118493 16.76878032 -8 20 C-8.6277588 24.09962629 -8.69674062 28.1703724 -8.75 32.3125 C-8.79447266 33.99569336 -8.79447266 33.99569336 -8.83984375 35.71289062 C-8.91037417 38.47533207 -8.96315493 41.23693774 -9 44 C-7.515 44.495 -7.515 44.495 -6 45 C-5.505 45.495 -5.505 45.495 -5 46 C-2.41977858 46.28221172 0.16030185 46.44820197 2.75 46.62109375 C3.86375 46.80865234 3.86375 46.80865234 5 47 C5.33 47.66 5.66 48.32 6 49 C4.35 49.66 2.7 50.32 1 51 C4.3 51.33 7.6 51.66 11 52 C11.495 51.01 11.495 51.01 12 50 C12 50.66 12 51.32 12 52 C28.17 52 44.34 52 61 52 C61 52.33 61 52.66 61 53 C53.16045302 53.85746279 45.4334171 54.13530402 37.55078125 54.09765625 C36.41215134 54.0962413 35.27352142 54.09482635 34.10038757 54.09336853 C30.50439702 54.08782209 26.90847137 54.07527989 23.3125 54.0625 C20.85742278 54.05747807 18.40234458 54.05291638 15.94726562 54.04882812 C9.96482203 54.03787028 3.98241566 54.02118647 -2 54 C-2 53.34 -2 52.68 -2 52 C-8.27 52 -14.54 52 -21 52 C-21 51.34 -21 50.68 -21 50 C-21.78375 49.690625 -22.5675 49.38125 -23.375 49.0625 C-26 48 -26 48 -28 47 C-27.67 45.35 -27.34 43.7 -27 42 C-22.71 42 -18.42 42 -14 42 C-13.67 42.66 -13.34 43.32 -13 44 C-12.98541748 43.22285645 -12.97083496 42.44571289 -12.95581055 41.64501953 C-12.88153022 38.13783312 -12.78480411 34.6316199 -12.6875 31.125 C-12.65366211 29.29001953 -12.65366211 29.29001953 -12.61914062 27.41796875 C-12.58369141 26.25136719 -12.54824219 25.08476562 -12.51171875 23.8828125 C-12.48553467 22.80402832 -12.45935059 21.72524414 -12.43237305 20.61376953 C-12.21834839 19.31995361 -12.21834839 19.31995361 -12 18 C-11.01 17.34 -10.02 16.68 -9 16 C-8.83328148 13.4582293 -8.83328148 13.4582293 -9 11 C-8 10 -8 10 -4.9375 9.9375 C-3.4834375 9.9684375 -3.4834375 9.9684375 -2 10 C-2 9.34 -2 8.68 -2 8 C-1.34 8 -0.68 8 0 8 C0 5.36 0 2.72 0 0 Z \",fill:\"#161012\",transform:\"translate(294,452)\"})),_path150||(_path150=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 2 2 2 2 5 C-0.64 5 -3.28 5 -6 5 C-5.67 5.66 -5.34 6.32 -5 7 C-2.52376004 7.41475483 -0.12015515 7.70690182 2.375 7.9375 C3.91824399 8.10424283 5.46120533 8.27361787 7.00390625 8.4453125 C7.81617676 8.53458008 8.62844727 8.62384766 9.46533203 8.71582031 C13.75579694 9.19685491 18.03561577 9.7226564 22.3125 10.3125 C23.52075439 10.4525647 23.52075439 10.4525647 24.75341797 10.59545898 C28.69976479 11.1628774 30.51622961 11.54060859 33.48046875 14.35546875 C34.80455249 16.65985099 35.61339752 18.39043329 36 21 C35.46632813 21.21914063 34.93265625 21.43828125 34.3828125 21.6640625 C29.97906101 23.53832351 25.88477368 25.60377441 21.8125 28.125 C16.4850281 31.39075677 12.2875452 33.10531902 6 33 C5.82984375 32.32453125 5.6596875 31.6490625 5.484375 30.953125 C3.78665812 23.98914402 3.78665812 23.98914402 -1 19 C-5.95419692 17.45688948 -10.86021309 16.64247336 -16 16 C-16.12375 14.329375 -16.12375 14.329375 -16.25 12.625 C-16.57873787 8.94246056 -16.57873787 8.94246056 -19.0625 7.5625 C-19.701875 7.376875 -20.34125 7.19125 -21 7 C-20.01 7 -19.02 7 -18 7 C-18 6.34 -18 5.68 -18 5 C-18.66 4.67 -19.32 4.34 -20 4 C-14.32208915 -1.3439161 -7.4531195 -0.8217542 0 0 Z \",fill:\"#042116\",transform:\"translate(454,313)\"})),_path151||(_path151=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0 5.94 0 9 0 C8.67 1.32 8.34 2.64 8 4 C7.34 4 6.68 4 6 4 C6 4.66 6 5.32 6 6 C13.26 6 20.52 6 28 6 C28 6.33 28 6.66 28 7 C38.62467187 7.86851631 49.22198347 8.28454589 59.875 8.5625 C61.44922646 8.60584074 63.0234453 8.64945903 64.59765625 8.69335938 C68.39835766 8.7987599 72.19914106 8.90044912 76 9 C76 9.33 76 9.66 76 10 C73.69 10.33 71.38 10.66 69 11 C69 11.66 69 12.32 69 13 C66.0703994 14.4648003 63.12499166 14.13878209 59.91430664 14.12939453 C59.18375565 14.13114685 58.45320465 14.13289917 57.70051575 14.13470459 C55.2703721 14.13912488 52.84030073 14.13617936 50.41015625 14.1328125 C48.70975226 14.13348672 47.00934836 14.13445773 45.3089447 14.13571167 C41.7284962 14.13718987 38.14807257 14.1350347 34.56762695 14.13037109 C30.03395826 14.12474707 25.50034974 14.12790464 20.96668339 14.13394356 C17.44278028 14.13760924 13.91889069 14.13638225 10.39498711 14.13381577 C8.72766551 14.13315909 7.06034259 14.1339296 5.39302254 14.13629532 C-6.43566079 14.14936566 -18.19350952 13.72347041 -30 13 C-30 9.37 -30 5.74 -30 2 C-20.1 2 -10.2 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#050406\",transform:\"translate(30,402)\"})),_path152||(_path152=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.70371859 3.93480494 9.17947355 8.02031512 13.51953125 12.3515625 C14.3964991 13.22353775 14.3964991 13.22353775 15.29118347 14.11312866 C16.51337482 15.33030001 17.73425447 16.54878979 18.95385742 17.76855469 C20.81996643 19.6324576 22.69395939 21.48818943 24.56835938 23.34375 C25.76090514 24.53336469 26.95297942 25.72345226 28.14453125 26.9140625 C28.70284134 27.46518707 29.26115143 28.01631165 29.83638 28.58413696 C32.43927444 31.20249665 34.64161713 33.53003004 36 37 C32.66864109 36.40300869 30.78724333 35.27987719 28.25 33.0625 C27.63640625 32.53785156 27.0228125 32.01320312 26.390625 31.47265625 C25 30 25 30 25 28 C24.44699219 27.75378906 23.89398438 27.50757813 23.32421875 27.25390625 C15.48101649 23.02253158 8.89795043 16.12517079 2.77734375 9.75 C1.10626788 7.92444046 1.10626788 7.92444046 -1 7 C2.7547235 11.45805787 6.40872887 15.38263487 11 19 C11 19.66 11 20.32 11 21 C11.53753906 21.20882812 12.07507813 21.41765625 12.62890625 21.6328125 C15.91440484 23.52725156 18.33281582 26.16300673 20.9375 28.875 C23.801384 31.83614799 26.55839098 34.65964388 29.828125 37.1796875 C32 39 32 39 32.8125 42.25 C32.874375 43.1575 32.93625 44.065 33 45 C28.48065061 44.45296516 25.27265486 42.54324825 21.5625 40.0625 C20.94761719 39.65918457 20.33273438 39.25586914 19.69921875 38.84033203 C14.99912654 35.73131695 10.40342712 32.48304383 5.84326172 29.17211914 C-0.92164185 24.27989542 -7.86181603 19.64218129 -14.80078125 15.00146484 C-15.71859375 14.38223145 -16.63640625 13.76299805 -17.58203125 13.125 C-18.40936768 12.57070312 -19.2367041 12.01640625 -20.08911133 11.4453125 C-22 10 -22 10 -23 8 C-21.92621094 7.67386719 -20.85242188 7.34773437 -19.74609375 7.01171875 C-18.30983371 6.57051469 -16.87363927 6.12909701 -15.4375 5.6875 C-14.73302734 5.47416016 -14.02855469 5.26082031 -13.30273438 5.04101562 C-8.72183069 3.62663522 -4.37569678 1.96072615 0 0 Z \",fill:\"#3F2820\",transform:\"translate(208,176)\"})),_path153||(_path153=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.8605891 1.35937085 4.85927699 2.64520469 7 5 C6.67 5.66 6.34 6.32 6 7 C4.68 6.01 3.36 5.02 2 4 C2.66 7.3 3.32 10.6 4 14 C4.33 12.68 4.66 11.36 5 10 C5.66 10 6.32 10 7 10 C7 10.66 7 11.32 7 12 C7.66 12 8.32 12 9 12 C8.773125 12.928125 8.54625 13.85625 8.3125 14.8125 C7.63680017 17.96826848 7.63680017 17.96826848 9.4375 19.875 C9.953125 20.24625 10.46875 20.6175 11 21 C8.03824877 20.38722388 6.61941217 19.74627478 4 18 C4 18.99 4 19.98 4 21 C7.63 22.98 11.26 24.96 15 27 C15 27.66 15 28.32 15 29 C15.99 29.309375 15.99 29.309375 17 29.625 C21.11606263 31.51152871 24.4587703 34.20567979 28 37 C27.01 37.495 27.01 37.495 26 38 C23.3984375 36.78515625 23.3984375 36.78515625 20.375 35.0625 C19.37210938 34.49660156 18.36921875 33.93070313 17.3359375 33.34765625 C16.17964844 32.68056641 16.17964844 32.68056641 15 32 C15.5053125 32.33773437 16.010625 32.67546875 16.53125 33.0234375 C17.1809375 33.46945313 17.830625 33.91546875 18.5 34.375 C19.1496875 34.81585938 19.799375 35.25671875 20.46875 35.7109375 C21.22671875 36.34902344 21.22671875 36.34902344 22 37 C22 37.66 22 38.32 22 39 C22.53109375 39.24492188 23.0621875 39.48984375 23.609375 39.7421875 C26.6382465 41.33580943 29.41223973 43.21259634 32.25 45.125 C33.32765625 45.84945312 34.4053125 46.57390625 35.515625 47.3203125 C36.33546875 47.87460938 37.1553125 48.42890625 38 49 C38.33 48.67 38.66 48.34 39 48 C38.01 47.505 38.01 47.505 37 47 C37 46.34 37 45.68 37 45 C35.68 44.34 34.36 43.68 33 43 C33.495 42.01 33.495 42.01 34 41 C34.99 41.495 34.99 41.495 36 42 C36 42.66 36 43.32 36 44 C36.598125 44.268125 37.19625 44.53625 37.8125 44.8125 C40.07100952 46.03854802 41.47062652 46.93534581 43 49 C42.93554688 49.78117187 42.87109375 50.56234375 42.8046875 51.3671875 C42.73280357 54.14009591 42.73280357 54.14009591 44.8984375 56.01953125 C45.71570313 56.61121094 46.53296875 57.20289063 47.375 57.8125 C48.59316406 58.71935547 48.59316406 58.71935547 49.8359375 59.64453125 C51.8569075 61.17694124 51.8569075 61.17694124 54 61 C54.66 57.7 55.32 54.4 56 51 C56.66 51 57.32 51 58 51 C58.0825 51.78375 58.165 52.5675 58.25 53.375 C58.72806339 56.14749104 58.72806339 56.14749104 61.0625 57.3125 C61.701875 57.539375 62.34125 57.76625 63 58 C63 58.66 63 59.32 63 60 C65.76264289 60.59732819 68.16032769 61 71 61 C70.96744792 62.98567708 70.93489583 64.97135417 70.90234375 66.95703125 C70.91736783 69.20305461 70.91736783 69.20305461 72 72 C72 73.32 72 74.64 72 76 C73.4166747 77.7511573 73.4166747 77.7511573 75 79 C74.67 79.66 74.34 80.32 74 81 C69.01422914 79.03590845 64.8113835 76.70112357 60.5 73.5 C59.89526855 73.06059082 59.29053711 72.62118164 58.66748047 72.16845703 C55.62853427 69.95525182 52.61223662 67.71238293 49.6015625 65.4609375 C39.92667193 58.25052268 29.93944141 51.56581557 19.87890625 44.90625 C12.5205965 40.03177301 5.25060053 35.03276978 -2 30 C0 29 0 29 2 29 C1.01 27.68 0.02 26.36 -1 25 C-0.401875 25.309375 0.19625 25.61875 0.8125 25.9375 C4.76502608 27.87827269 4.76502608 27.87827269 9 27 C8.36191406 26.60167969 7.72382813 26.20335938 7.06640625 25.79296875 C6.24011719 25.26316406 5.41382813 24.73335937 4.5625 24.1875 C3.73878906 23.66542969 2.91507813 23.14335938 2.06640625 22.60546875 C0 21 0 21 -1 18 C-0.67 17.34 -0.34 16.68 0 16 C0.07181821 13.28239892 0.09299506 10.59140612 0.0625 7.875 C0.05798828 7.12089844 0.05347656 6.36679687 0.04882812 5.58984375 C0.03703499 3.72652873 0.01909942 1.86325445 0 0 Z \",fill:\"#211A19\",transform:\"translate(19,35)\"})),_path154||(_path154=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-3.46537085 2.31024723 -6.82941667 3.1499932 -10.8125 4.125 C-11.51181641 4.30675781 -12.21113281 4.48851562 -12.93164062 4.67578125 C-17.04458953 5.69920913 -20.72734085 6.20122414 -25 6 C-25 6.66 -25 7.32 -25 8 C-30.36439644 10.68219822 -34.01006953 11.3152595 -40 11 C-39.649375 12.2375 -39.29875 13.475 -38.9375 14.75 C-38.04406727 17.903292 -37.99118706 19.86774164 -39 23 C-39 22.34 -39 21.68 -39 21 C-49.23 21.66 -59.46 22.32 -70 23 C-69.61897642 32.98281777 -69.01676816 42.63924862 -67.4375 52.5 C-65.86902176 62.38566203 -65.69178229 72.01146318 -66 82 C-66.33 82 -66.66 82 -67 82 C-67.03867187 80.52080078 -67.03867187 80.52080078 -67.078125 79.01171875 C-67.42612906 69.48895837 -68.51828297 60.27811865 -70.0625 50.875 C-72.02444752 38.79732308 -72.40249028 27.10080057 -71.94995117 14.88818359 C-71.78364268 12.98698322 -71.78364268 12.98698322 -73 12 C-73.04092937 9.66702567 -73.04241723 7.33294775 -73 5 C-69.84613452 4.09597697 -66.88128028 3.79304317 -63.6081543 3.62695312 C-62.52990891 3.57019409 -61.45166351 3.51343506 -60.34074402 3.45495605 C-58.60006401 3.36897156 -58.60006401 3.36897156 -56.82421875 3.28125 C-55.0264373 3.18704773 -55.0264373 3.18704773 -53.19233704 3.09094238 C-49.35757334 2.89024599 -45.5225763 2.69462514 -41.6875 2.5 C-37.86315146 2.30511341 -34.03888391 2.10903419 -30.21479797 1.90905762 C-27.83538765 1.78467634 -25.45582247 1.66321388 -23.07609558 1.54504395 C-15.35750039 1.14226814 -7.71773844 -0.15750487 0 0 Z \",fill:\"#91745D\",transform:\"translate(397,506)\"})),_path155||(_path155=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.475 0.495 2.475 0.495 5 1 C4.319375 1.53625 3.63875 2.0725 2.9375 2.625 C1.968125 3.40875 0.99875 4.1925 0 5 C-0.58910156 5.47050781 -1.17820313 5.94101562 -1.78515625 6.42578125 C-4.55272471 8.69977062 -6.71539056 10.52185614 -8.5625 13.625 C-10.49829639 16.82327229 -12.83688708 18.00841038 -16 20 C-18.37076396 21.84392753 -20.71250087 23.71964356 -23.046875 25.609375 C-25 27 -25 27 -27 27 C-27 27.66 -27 28.32 -27 29 C-27.804375 29.639375 -28.60875 30.27875 -29.4375 30.9375 C-32.23720732 32.81035932 -32.23720732 32.81035932 -33 36 C-32.18917969 35.28714844 -31.37835937 34.57429687 -30.54296875 33.83984375 C-15.23132811 20.52790105 -15.23132811 20.52790105 -9 18 C-6.69140625 18.83203125 -6.69140625 18.83203125 -5 20 C-7.35606987 24.67848161 -10.38856271 27.20516617 -14.5 30.25 C-15.08136719 30.69601562 -15.66273437 31.14203125 -16.26171875 31.6015625 C-18.82226061 33.53515246 -20.93581996 34.97860665 -24 36 C-24 36.66 -24 37.32 -24 38 C-25.65032722 39.02674137 -27.32034497 40.02197302 -29 41 C-30.51369152 42.25102949 -31.99126259 43.54656703 -33.4375 44.875 C-34.71753906 46.04482422 -34.71753906 46.04482422 -36.0234375 47.23828125 C-38.26454958 49.3118119 -40.49583943 51.39577111 -42.7265625 53.48046875 C-43.67897827 54.36919678 -43.67897827 54.36919678 -44.65063477 55.27587891 C-45.91670814 56.45901324 -47.18025796 57.64485429 -48.44116211 58.83349609 C-52.89002516 63 -52.89002516 63 -54 63 C-55.63151654 43.54228279 -55.63151654 43.54228279 -52.0546875 37.96875 C-49.4667941 35.97441013 -46.905506 34.48577011 -44 33 C-42.4797661 31.85982457 -40.97749836 30.69503544 -39.5 29.5 C-36.25531915 27 -36.25531915 27 -34 27 C-34 26.34 -34 25.68 -34 25 C-33.030625 24.54625 -32.06125 24.0925 -31.0625 23.625 C-27.92920418 22.34213779 -27.92920418 22.34213779 -27 20 C-26.01 20 -25.02 20 -24 20 C-24 19.34 -24 18.68 -24 18 C-22.68 17.67 -21.36 17.34 -20 17 C-20 16.34 -20 15.68 -20 15 C-17.98801629 13.45369798 -15.98372421 12.02776002 -13.875 10.625 C-13.30523437 10.23828125 -12.73546875 9.8515625 -12.1484375 9.453125 C-9.86869047 7.90911451 -7.58519636 6.37485536 -5.26660156 4.88964844 C-2.10722082 2.95209491 -2.10722082 2.95209491 0 0 Z \",fill:\"#281A18\",transform:\"translate(54,516)\"})),_path156||(_path156=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C9.24 0 18.48 0 28 0 C28.33 9.24 28.66 18.48 29 28 C24.05 28.495 24.05 28.495 19 29 C17.97648437 29.10441406 16.95296875 29.20882813 15.8984375 29.31640625 C15.06570313 29.39761719 14.23296875 29.47882813 13.375 29.5625 C12.11816406 29.68818359 12.11816406 29.68818359 10.8359375 29.81640625 C7.23098629 30.04978463 3.61249757 30 0 30 C0 20.1 0 10.2 0 0 Z \",fill:\"#E7443D\",transform:\"translate(0,270)\"})),_path157||(_path157=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.495 0.99 0.495 2 1 C-6.95627634 7.85601747 -16.84521708 13.16960043 -26.66333008 18.66894531 C-29.13228039 20.07535187 -31.56864327 21.5297145 -34 23 C-32.02 23 -30.04 23 -28 23 C-29.37278091 26.37534275 -30.5776937 27.6632735 -33.875 29.1875 C-34.55304688 29.51105469 -35.23109375 29.83460938 -35.9296875 30.16796875 C-37.93810364 30.97512467 -39.88939815 31.53150318 -42 32 C-42 32.66 -42 33.32 -42 34 C-45.65511055 36.61275257 -49.40619879 37.91336133 -53.6875 39.1875 C-54.82574219 39.53167969 -55.96398437 39.87585938 -57.13671875 40.23046875 C-60 41 -60 41 -62 41 C-62.04060547 42.10601562 -62.04060547 42.10601562 -62.08203125 43.234375 C-63.40268892 47.21320747 -66.17135301 48.3861912 -69.6875 50.25 C-70.60692383 50.7759375 -70.60692383 50.7759375 -71.54492188 51.3125 C-75.34260963 53.40666504 -78.69171706 54.54997966 -83 55 C-83 55.66 -83 56.32 -83 57 C-89.05449217 60.4109815 -93.00245665 62 -100 62 C-102.08222832 63.03015506 -103.91750609 64.25960283 -105.83203125 65.57421875 C-108.14846241 67.09763744 -110.5037981 68.29585973 -113 69.5 C-118.36875755 72.13110103 -123.35625477 75.14570647 -128.25 78.578125 C-132.8020475 81.746104 -136.55859766 83.84225482 -142 85 C-141.67 83.02 -141.34 81.04 -141 79 C-140.39414062 78.86464844 -139.78828125 78.72929687 -139.1640625 78.58984375 C-133.10289206 77.03258919 -128.86338089 74.72672806 -123.87109375 71.01171875 C-120.50947789 68.65630083 -117.02800925 66.66884413 -113.4375 64.6875 C-107.84794159 61.59667902 -102.30646465 58.44548848 -96.8125 55.1875 C-89.35839201 50.77232076 -81.84550873 46.4654721 -74.3059082 42.19799805 C-70.48707827 40.02882005 -66.70081929 37.83776055 -62.9921875 35.484375 C-58.49883634 32.64400956 -53.85511035 30.10304164 -49.1875 27.5625 C-48.30094727 27.0773291 -47.41439453 26.5921582 -46.50097656 26.09228516 C-42.08825952 23.67865038 -37.66938418 21.27640054 -33.25 18.875 C-28.83561573 16.47030402 -24.4459965 14.02290756 -20.0625 11.5625 C-19.38268066 11.18158203 -18.70286133 10.80066406 -18.00244141 10.40820312 C-14.76950038 8.58914117 -11.55574332 6.74761921 -8.37890625 4.83203125 C-6.76822266 3.86330078 -6.76822266 3.86330078 -5.125 2.875 C-3.70574219 2.00488281 -3.70574219 2.00488281 -2.2578125 1.1171875 C-1.51273438 0.74851562 -0.76765625 0.37984375 0 0 Z \",fill:\"#3B302C\",transform:\"translate(558,110)\"})),_path158||(_path158=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.13362622 0.06433874 11.88968532 1.03133111 17.87890625 2.25390625 C25.31890351 3.76072129 32.81944795 4.95642183 40.30587769 6.20834351 C42.1913638 6.52414573 44.07616554 6.84402566 45.9609375 7.1640625 C47.06356934 7.3492041 48.16620117 7.5343457 49.30224609 7.72509766 C51.9375 8.25 51.9375 8.25 53.9375 9.25 C64.4133929 11.02892521 75.35254916 10.34581142 85.9375 10.25 C85.6075 11.24 85.2775 12.23 84.9375 13.25 C87.9075 13.58 90.8775 13.91 93.9375 14.25 C93.9375 14.91 93.9375 15.57 93.9375 16.25 C91.15003596 17.1002069 88.35890011 17.93013626 85.5625 18.75 C84.78777344 18.98847656 84.01304687 19.22695313 83.21484375 19.47265625 C82.43496094 19.69824219 81.65507812 19.92382812 80.8515625 20.15625 C80.1498291 20.36572266 79.4480957 20.57519531 78.72509766 20.79101562 C71.19199988 22.03135753 64.03310915 21.15759459 56.6484375 19.5 C55.81913727 19.32243164 54.98983704 19.14486328 54.13540649 18.96191406 C51.52559303 18.40083483 48.91912113 17.82570732 46.3125 17.25 C44.52754688 16.8636437 42.74239188 16.4782188 40.95703125 16.09375 C36.61478336 15.15656605 32.27546952 14.20678342 27.9375 13.25 C27.9375 12.59 27.9375 11.93 27.9375 11.25 C27.05578125 11.44207031 26.1740625 11.63414062 25.265625 11.83203125 C21.81687688 12.26514868 19.96785623 11.94942276 16.6875 10.9375 C8.56526635 8.70183468 0.29849025 8.03964908 -8.0625 7.25 C-5.77845521 0.09332633 -5.77845521 0.09332633 0 0 Z \",fill:\"#903539\",transform:\"translate(164.0625,477.75)\"})),_path159||(_path159=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 2.64 0 5.28 0 8 C-0.84778267 8.06850662 -0.84778267 8.06850662 -1.71269226 8.13839722 C-7.60215451 8.61586023 -13.49063221 9.10431389 -19.37866211 9.59912109 C-21.57536933 9.78227458 -23.77231113 9.96263705 -25.96948242 10.14013672 C-29.13005537 10.39595519 -32.28964503 10.66184324 -35.44921875 10.9296875 C-36.42960617 11.00686005 -37.40999359 11.08403259 -38.42008972 11.1635437 C-44.94518555 11.66719109 -44.94518555 11.66719109 -51 14 C-51.33 14.66 -51.66 15.32 -52 16 C-57.28 16 -62.56 16 -68 16 C-68 18.64 -68 21.28 -68 24 C-63.05 24 -58.1 24 -53 24 C-53 25.32 -53 26.64 -53 28 C-52.2575 27.525625 -51.515 27.05125 -50.75 26.5625 C-45.0775648 23.33952545 -38.69276738 23.04054987 -32.4140625 24.671875 C-30.25084535 25.39522206 -28.11964214 26.15815631 -26 27 C-26 28.98 -26 30.96 -26 33 C-28.94917053 32.58848783 -31.58086139 32.17932944 -34.328125 31.00390625 C-37.30866664 29.88402438 -39.89266288 29.55695014 -43.0625 29.3125 C-44.59583984 29.18294922 -44.59583984 29.18294922 -46.16015625 29.05078125 C-48.72652577 29.00489019 -50.61081785 29.08957262 -53 30 C-53.33 30.66 -53.66 31.32 -54 32 C-58.95 32 -63.9 32 -69 32 C-69.9375 24.625 -69.9375 24.625 -70.22631836 22.30712891 C-70.68716455 18.53421662 -70.68716455 18.53421662 -72 15 C-72.13415472 12.3276379 -72.04318541 9.67749512 -72 7 C-72.66 7 -73.32 7 -74 7 C-73.67 5.68 -73.34 4.36 -73 3 C-71.515 3.99 -71.515 3.99 -70 5 C-69.67 4.01 -69.34 3.02 -69 2 C-68.34 4.97 -67.68 7.94 -67 11 C-66.67 10.34 -66.34 9.68 -66 9 C-61.38 9 -56.76 9 -52 9 C-51.67 9.66 -51.34 10.32 -51 11 C-50.16855469 10.43410156 -49.33710938 9.86820312 -48.48046875 9.28515625 C-47.39378906 8.55167969 -46.30710937 7.81820313 -45.1875 7.0625 C-44.10855469 6.33160156 -43.02960938 5.60070312 -41.91796875 4.84765625 C-36.73523622 1.56595279 -31.65604092 1.47287087 -25.6875 0.9375 C-24.70378418 0.84807129 -23.72006836 0.75864258 -22.70654297 0.66650391 C-15.11157466 0.01401522 -7.62425848 -0.23419224 0 0 Z \",fill:\"#7E5A4D\",transform:\"translate(414,463)\"})),_path160||(_path160=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C8.72542301 -0.12852505 17.31008699 0.20354316 26 1 C26 1.33 26 1.66 26 2 C22.7 2 19.4 2 16 2 C15.87625 3.010625 15.7525 4.02125 15.625 5.0625 C14.89914523 9.63538503 13.65956503 13.90073926 12.2734375 18.3125 C10.67794776 23.46963857 9.42495005 28.5452964 8.52734375 33.87109375 C8 36 8 36 6 39 C5.45914413 41.15209667 4.98888001 43.32233032 4.5625 45.5 C3.6409505 50.03290086 2.64006159 54.48818581 1.375 58.9375 C0.23709823 62.9648382 -0.53807574 66.8426817 -1 71 C-1.66 70.34 -2.32 69.68 -3 69 C-3.66 70.32 -4.32 71.64 -5 73 C-5.99 73 -6.98 73 -8 73 C-7.88444496 71.29100181 -7.75706997 69.58280131 -7.625 67.875 C-7.55539063 66.92367187 -7.48578125 65.97234375 -7.4140625 64.9921875 C-6.97039816 61.78608485 -6.06401788 59.05376974 -5 56 C-4.33059446 53.48227634 -3.68279123 50.96704332 -3.0625 48.4375 C-2.89065186 47.7458374 -2.71880371 47.0541748 -2.54174805 46.34155273 C-1.15004169 40.70562634 0.14138041 35.04902213 1.38671875 29.37890625 C2 27 2 27 3 26 C3.23075082 24.65252916 3.41153063 23.29622435 3.5625 21.9375 C3.706875 20.638125 3.85125 19.33875 4 18 C3.34 18.33 2.68 18.66 2 19 C1.24253858 21.56530879 0.59044215 24.08355786 0 26.6875 C-1.13370244 31.55444916 -2.39283647 36.26208192 -4 41 C-4.5621517 43.11967291 -5.10427735 45.24477097 -5.625 47.375 C-6.01558594 48.96441406 -6.01558594 48.96441406 -6.4140625 50.5859375 C-6.60742188 51.38257813 -6.80078125 52.17921875 -7 53 C-7.66 52.34 -8.32 51.68 -9 51 C-9.99 51.99 -10.98 52.98 -12 54 C-10.9559791 47.89554836 -9.44640246 42.7082724 -7 37 C-5.39369327 30.95027335 -4.77754148 24.88972644 -4.27734375 18.66796875 C-3.613654 12.28346033 -1.82741437 6.13489112 0 0 Z \",fill:\"#422B23\",transform:\"translate(216,524)\"})),_path161||(_path161=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.99271078 0.11799295 13.98527612 0.24281467 20.9777832 0.37231445 C23.35503396 0.41554308 25.73231335 0.45722636 28.10961914 0.49731445 C31.5328025 0.55531024 34.95584334 0.61891954 38.37890625 0.68359375 C39.9652462 0.70866249 39.9652462 0.70866249 41.58363342 0.73423767 C46.81262957 0.83847811 51.8443473 1.10737005 57 2 C56.67 3.65 56.34 5.3 56 7 C45.44 7.99 34.88 8.98 24 10 C30.93 10.33 37.86 10.66 45 11 C45.495 13.97 45.495 13.97 46 17 C44.68 17 43.36 17 42 17 C41.505 15.02 41.505 15.02 41 13 C28.16220632 12.49101259 15.52531443 13.1007762 2.75964355 14.43835449 C1.18679348 14.60268452 -0.38670434 14.76094366 -1.96081543 14.91271973 C-11.75108207 15.87201907 -20.08605296 17.51925596 -29 22 C-27.90300781 21.98839844 -26.80601562 21.97679687 -25.67578125 21.96484375 C-24.22135588 21.95546036 -22.76692865 21.94636075 -21.3125 21.9375 C-20.59126953 21.92912109 -19.87003906 21.92074219 -19.12695312 21.91210938 C-15.25891651 21.89444711 -11.76797453 22.17877478 -8 23 C-5.56494763 23.21698487 -3.12698616 23.40290745 -0.6875 23.5625 C0.56675781 23.64628906 1.82101562 23.73007812 3.11328125 23.81640625 C4.54220703 23.90728516 4.54220703 23.90728516 6 24 C6 24.99 6 25.98 6 27 C-0.56331468 27.70051799 -6.45766069 28.11096328 -13 27 C-19.60693164 26.44840088 -24.85716729 27.56029339 -31 30 C-31 28.68 -31 27.36 -31 26 C-35.95 26 -40.9 26 -46 26 C-46 23.36 -46 20.72 -46 18 C-40.72 18 -35.44 18 -30 18 C-29.67 17.01 -29.34 16.02 -29 15 C-24.90413477 12.74666787 -20.56554915 12.49504098 -15.98828125 12.1484375 C-15.22001511 12.08467926 -14.45174896 12.02092102 -13.66020203 11.95523071 C-12.03752335 11.82221027 -10.41452792 11.69300531 -8.79125977 11.56738281 C-6.33722587 11.37691904 -3.88448802 11.17387303 -1.43164062 10.96875 C6.39803732 10.32970242 14.13737538 9.82474393 22 10 C22 7.36 22 4.72 22 2 C14.08 2.495 14.08 2.495 6 3 C6 2.34 6 1.68 6 1 C4.02 1 2.04 1 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#0C0707\",transform:\"translate(392,461)\"})),_path162||(_path162=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.33 0.66 -0.66 1.32 -1 2 C-1.66 2 -2.32 2 -3 2 C-3.66 4.31 -4.32 6.62 -5 9 C-5.66 9 -6.32 9 -7 9 C-7 10.32 -7 11.64 -7 13 C-7.66 13 -8.32 13 -9 13 C-9.26554687 13.54914062 -9.53109375 14.09828125 -9.8046875 14.6640625 C-13.51439879 21.91375973 -17.23359888 28.23703609 -24.203125 32.68359375 C-27.57244572 35.15198741 -29.27067696 37.91579097 -30 42 C-30.66 42 -31.32 42 -32 42 C-32.10441406 42.98419922 -32.10441406 42.98419922 -32.2109375 43.98828125 C-33.30710727 48.17217675 -35.39785386 51.50530133 -37.625 55.1875 C-38.07359375 55.93765381 -38.5221875 56.68780762 -38.984375 57.46069336 C-46.57309393 70.03763985 -46.57309393 70.03763985 -50 74 C-50.66 74 -51.32 74 -52 74 C-51.67 72.02 -51.34 70.04 -51 68 C-54.65470191 71.43971945 -57.6382383 75.05960672 -60.5703125 79.1328125 C-61.94710619 80.9309201 -63.29131604 82.51298315 -65 84 C-65.66 84 -66.32 84 -67 84 C-67.185625 85.03125 -67.37125 86.0625 -67.5625 87.125 C-68.71500753 91.23754486 -70.9531236 93.02533676 -74.25390625 95.578125 C-76.53682457 97.43714573 -78.17598872 99.7030969 -80 102 C-80.66 102 -81.32 102 -82 102 C-81.731875 101.484375 -81.46375 100.96875 -81.1875 100.4375 C-79.89945697 97.87859494 -79.89945697 97.87859494 -78.6875 94.625 C-75.92131983 88.6828352 -71.58152776 84.58152776 -67 80 C-64.86981326 77.54209222 -63.85117201 75.62793003 -62.625 72.5625 C-60.88698809 68.75224312 -58.96857047 66.89616631 -56 64 C-55.10630695 62.3781126 -54.21430003 60.75524086 -53.3359375 59.125 C-51.24511897 55.79925356 -48.67565154 52.89181835 -46.1328125 49.9050293 C-42.75452262 45.93075114 -39.51234921 41.86898422 -36.3125 37.75 C-32.95372777 33.43703769 -29.52186668 29.25459953 -25.87109375 25.18359375 C-23.33277691 22.2213409 -20.95654407 19.14171639 -18.5625 16.0625 C-11.75504554 7.37040421 -11.75504554 7.37040421 -8.625 3.625 C-8.03976563 2.91601562 -7.45453125 2.20703125 -6.8515625 1.4765625 C-4.46211907 -0.42894302 -2.97835591 -0.2968121 0 0 Z \",fill:\"#9C6B4F\",transform:\"translate(144,519)\"})),_path163||(_path163=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.26650391 0.00322266 2.53300781 0.00644531 3.83789062 0.00976562 C5.11212891 0.01814453 6.38636719 0.02652344 7.69921875 0.03515625 C9.03710767 0.04019018 10.37499845 0.04474968 11.71289062 0.04882812 C14.93752006 0.06046939 18.1621258 0.07839856 21.38671875 0.09765625 C21.38671875 7.68765625 21.38671875 15.27765625 21.38671875 23.09765625 C9.04405358 19.73147484 9.04405358 19.73147484 4.73828125 17.94140625 C3.80185791 17.55992432 2.86543457 17.17844238 1.90063477 16.78540039 C0.94729248 16.39344482 -0.0060498 16.00148926 -0.98828125 15.59765625 C-9.16758936 12.31187266 -16.93701799 9.70971121 -25.61328125 8.09765625 C-27.05365503 7.7338505 -28.49157354 7.36005718 -29.92578125 6.97265625 C-36.68167993 5.36956165 -43.35690802 4.93607776 -50.26953125 4.78125 C-51.05726929 4.7604689 -51.84500732 4.73968781 -52.65661621 4.71827698 C-55.14209331 4.65354651 -57.62766458 4.59425719 -60.11328125 4.53515625 C-61.81120717 4.49189802 -63.509124 4.44828157 -65.20703125 4.40429688 C-69.3423545 4.29794512 -73.47777126 4.19646876 -77.61328125 4.09765625 C-77.61328125 3.76765625 -77.61328125 3.43765625 -77.61328125 3.09765625 C-76.92804886 3.07482071 -76.24281647 3.05198517 -75.53681946 3.02845764 C-69.02151882 2.81083044 -62.50631686 2.59046625 -55.99120808 2.36716557 C-52.64319171 2.25250763 -49.29514347 2.13914402 -45.94702148 2.02758789 C-42.08177419 1.89862624 -38.21666468 1.76604452 -34.3515625 1.6328125 C-32.58199944 1.57493309 -32.58199944 1.57493309 -30.77668762 1.5158844 C-23.9983353 1.27829168 -17.26024492 0.85682512 -10.50032043 0.30812073 C-6.9840837 0.0517879 -3.52547261 -0.01609805 0 0 Z \",fill:\"#8F5E43\",transform:\"translate(604.61328125,416.90234375)\"})),_path164||(_path164=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.69287109 0.00451172 1.38574219 0.00902344 2.09960938 0.01367188 C3.79561068 0.02536844 5.49156703 0.04330076 7.1875 0.0625 C7.24284912 0.73829102 7.29819824 1.41408203 7.35522461 2.11035156 C7.60840531 5.17802698 7.8666479 8.24525596 8.125 11.3125 C8.21201172 12.37597656 8.29902344 13.43945312 8.38867188 14.53515625 C8.47568359 15.55996094 8.56269531 16.58476562 8.65234375 17.640625 C8.730896 18.58325195 8.80944824 19.52587891 8.89038086 20.49707031 C9.15362311 22.76999522 9.56981108 24.86325595 10.1875 27.0625 C9.5275 27.0625 8.8675 27.0625 8.1875 27.0625 C8.70759746 31.44617859 9.27777338 35.74129856 10.1875 40.0625 C10.52694795 42.06147128 10.86171616 44.06125639 11.1875 46.0625 C6.7212128 44.58205471 3.37533246 42.09624628 -0.25 39.1875 C-1.35133672 38.31317615 -2.45419322 37.4407631 -3.55859375 36.5703125 C-4.03997803 36.18504395 -4.5213623 35.79977539 -5.01733398 35.40283203 C-6.96735787 33.88188768 -6.96735787 33.88188768 -9.97924805 32.32666016 C-12.8125 30.0625 -12.8125 30.0625 -13.49365234 26.94628906 C-13.46223145 25.75229492 -13.43081055 24.55830078 -13.3984375 23.328125 C-13.37910156 22.03261719 -13.35976562 20.73710937 -13.33984375 19.40234375 C-13.289715 18.03903835 -13.23892536 16.67575711 -13.1875 15.3125 C-13.15739131 13.93365135 -13.13001703 12.5547401 -13.10546875 11.17578125 C-13.03471326 7.80310269 -12.93601802 4.43359173 -12.8125 1.0625 C-8.4977274 0.12139111 -4.401532 -0.0547559 0 0 Z \",fill:\"#835646\",transform:\"translate(144.8125,116.9375)\"})),_path165||(_path165=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 4.95 2 9.9 2 15 C0.23914063 15.80824219 -1.52171875 16.61648437 -3.3359375 17.44921875 C-5.68233122 18.52855986 -8.02868317 19.60799177 -10.375 20.6875 C-11.53128906 21.21794922 -12.68757812 21.74839844 -13.87890625 22.29492188 C-19.83301102 25.03650119 -25.74156087 27.8372104 -31.59082031 30.7956543 C-35.92018981 32.95990032 -40.31040232 34.99702359 -44.6875 37.0625 C-54.18786006 41.55443301 -63.50751228 46.33192167 -72.7253418 51.37915039 C-73.63582275 51.86762451 -74.54630371 52.35609863 -75.484375 52.859375 C-76.28584961 53.29733398 -77.08732422 53.73529297 -77.91308594 54.18652344 C-80 55 -80 55 -83 54 C-81.515 53.505 -81.515 53.505 -80 53 C-79.69964844 52.37351563 -79.39929688 51.74703125 -79.08984375 51.1015625 C-77.68775105 48.39788554 -76.25071141 47.74338348 -73.5625 46.375 C-70.91431661 45.00509953 -68.48943944 43.65962629 -66 42 C-65.01 42 -64.02 42 -63 42 C-63 41.34 -63 40.68 -63 40 C-61.78763672 39.51080078 -61.78763672 39.51080078 -60.55078125 39.01171875 C-59.48214844 38.57472656 -58.41351562 38.13773438 -57.3125 37.6875 C-56.25675781 37.25824219 -55.20101562 36.82898438 -54.11328125 36.38671875 C-50.99437593 35.07381037 -50.99437593 35.07381037 -48.23046875 33.33203125 C-46 32 -46 32 -44 32 C-44 31.34 -44 30.68 -44 30 C-44.66 29.67 -45.32 29.34 -46 29 C-45.67 27.35 -45.34 25.7 -45 24 C-43.906875 23.9175 -42.81375 23.835 -41.6875 23.75 C-37.33708348 22.86516952 -37.48214225 22.32364902 -35 19 C-32.51171875 17.40234375 -32.51171875 17.40234375 -29.6875 15.9375 C-28.70394531 15.42316406 -27.72039063 14.90882812 -26.70703125 14.37890625 C-25.81371094 13.92386719 -24.92039062 13.46882813 -24 13 C-22.96875 12.46375 -21.9375 11.9275 -20.875 11.375 C-19.17062288 10.55986312 -17.45294001 9.77034683 -15.7109375 9.0390625 C-14.89882813 8.69617188 -14.08671875 8.35328125 -13.25 8 C-12.11304688 7.5359375 -12.11304688 7.5359375 -10.953125 7.0625 C-8.67768337 6.02117071 -8.67768337 6.02117071 -7 3 C-5.02111039 2.27306096 -3.02045442 1.60183749 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#19201D\",transform:\"translate(624,83)\"})),_path166||(_path166=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C3.63 2.66 7.26 3.32 11 4 C11 4.33 11 4.66 11 5 C9.36804688 5.16435547 9.36804688 5.16435547 7.703125 5.33203125 C-0.19385158 6.16912518 -7.80625078 7.19943771 -15.484375 9.31640625 C-22.0921823 11.11200606 -28.50004379 11.30985264 -35.31445312 11.51757812 C-36.14267578 11.55173828 -36.97089844 11.58589844 -37.82421875 11.62109375 C-38.95476685 11.65867798 -38.95476685 11.65867798 -40.1081543 11.69702148 C-42.23967587 11.84874814 -42.23967587 11.84874814 -44 14 C-50.09968013 15.30181093 -56.22547276 15.11504154 -62.4375 15.0625 C-63.45521484 15.05798828 -64.47292969 15.05347656 -65.52148438 15.04882812 C-68.01438509 15.03712437 -70.50716074 15.02072848 -73 15 C-73 14.01 -73 13.02 -73 12 C-74.65 11.67 -76.3 11.34 -78 11 C-78 10.34 -78 9.68 -78 9 C-74.37 9 -70.74 9 -67 9 C-67.66 5.7 -68.32 2.4 -69 -1 C-62.34966748 -1.52502625 -62.34966748 -1.52502625 -59 -1 C-55 3.38095238 -55 3.38095238 -55 7 C-53.68 7 -52.36 7 -51 7 C-50.67 6.01 -50.34 5.02 -50 4 C-49.67 4.33 -49.34 4.66 -49 5 C-48.67 4.34 -48.34 3.68 -48 3 C-40.8929928 1.42066507 -33.2330187 1.8881492 -26 2 C-26 1.34 -26 0.68 -26 0 C-8.27272727 -3.30909091 -8.27272727 -3.30909091 0 0 Z \",fill:\"#8C9971\",transform:\"translate(610,397)\"})),_path167||(_path167=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.92 0 15.84 0 24 0 C20.90243902 7.22764228 20.90243902 7.22764228 17 11 C15.49279568 14.82315241 16.07890548 18.80412041 16.375 22.8125 C16.41882813 23.49892578 16.46265625 24.18535156 16.5078125 24.89257812 C16.8098298 29.32635981 17.36719694 33.57037855 18 38 C23.61 38.33 29.22 38.66 35 39 C35 40.32 35 41.64 35 43 C33.68 43 32.36 43 31 43 C31 43.66 31 44.32 31 45 C26.13707545 47.43146227 19.32701194 46.51533659 14 46 C11.0150716 44.6821074 9.45770853 43.24399475 7 41 C5.34630643 40.30177383 3.68272986 39.62501395 2 39 C-0.95183101 36.04816899 -1.08663988 33.04488053 -2 29 C-1.34 29 -0.68 29 0 29 C0.33 29.66 0.66 30.32 1 31 C1 30.01 1 29.02 1 28 C-3.55491614 25.79600832 -8.02906176 25.41153737 -13 25 C-13.495 22.525 -13.495 22.525 -14 20 C-19.61 19.67 -25.22 19.34 -31 19 C-31 18.67 -31 18.34 -31 18 C-24.73 18 -18.46 18 -12 18 C-11.67 18.99 -11.34 19.98 -11 21 C-11.33 21.66 -11.66 22.32 -12 23 C-10.824375 22.938125 -9.64875 22.87625 -8.4375 22.8125 C-4.00671958 22.84392397 -0.84610302 23.66217268 3 26 C4.45042114 28.31450182 5.1551581 30.36608114 6 33 C7.98 32.34 9.96 31.68 12 31 C12.33 26.05 12.66 21.1 13 16 C9.2890625 16.04882812 9.2890625 16.04882812 5.578125 16.09765625 C3 16 3 16 -1 15 C-0.67 10.05 -0.34 5.1 0 0 Z \",fill:\"#B57D68\",transform:\"translate(273,323)\"})),_path168||(_path168=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.57772587 3.65911094 -1.97617106 5.35093397 -4.57006836 7.94238281 C-5.32432602 8.70286926 -6.07858368 9.46335571 -6.85569763 10.24688721 C-8.08534996 11.46272491 -8.08534996 11.46272491 -9.33984375 12.703125 C-10.17713516 13.54091492 -11.01442657 14.37870483 -11.87709045 15.24188232 C-13.6481108 17.01056216 -15.42282522 18.77554959 -17.20092773 20.53710938 C-19.93193573 23.24448388 -22.64934347 25.96496998 -25.36523438 28.6875 C-27.0851458 30.4018363 -28.80582305 32.11540472 -30.52734375 33.828125 C-31.34508774 34.6467804 -32.16283173 35.46543579 -33.00535583 36.30889893 C-33.76276566 37.05677673 -34.52017548 37.80465454 -35.30053711 38.57519531 C-36.30194984 39.56969696 -36.30194984 39.56969696 -37.32359314 40.58428955 C-39 42 -39 42 -41 42 C-41 42.66 -41 43.32 -41 44 C-42.65 44.66 -44.3 45.32 -46 46 C-46 46.66 -46 47.32 -46 48 C-46.66 48 -47.32 48 -48 48 C-47 44 -47 44 -46 40 C-46.66 40 -47.32 40 -48 40 C-48 39.34 -48 38.68 -48 38 C-48.66 37.67 -49.32 37.34 -50 37 C-48.02 34.525 -48.02 34.525 -46 32 C-46.66 32 -47.32 32 -48 32 C-48 31.34 -48 30.68 -48 30 C-47.34 30 -46.68 30 -46 30 C-46 29.34 -46 28.68 -46 28 C-44.68 28 -43.36 28 -42 28 C-39.73122465 25.58119071 -39.73122465 25.58119071 -38 23 C-38.99 23 -39.98 23 -41 23 C-40.67 22.34 -40.34 21.68 -40 21 C-39.34 21.33 -38.68 21.66 -38 22 C-37.67 21.34 -37.34 20.68 -37 20 C-36.34 20 -35.68 20 -35 20 C-33.56496986 18.60069675 -32.20172324 17.12738695 -30.875 15.625 C-29.64716797 14.27148438 -29.64716797 14.27148438 -28.39453125 12.890625 C-25.96377481 10.10320187 -25.96377481 10.10320187 -24.26171875 7.109375 C-18.27243579 -2.5285516 -10.22829646 -0.98349004 0 0 Z \",fill:\"#18423E\",transform:\"translate(532,0)\"})),_path169||(_path169=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.7076302 -0.17347648 13.41394562 -0.30027556 20.12329102 -0.38452148 C22.40379592 -0.41965101 24.68414399 -0.4673665 26.96411133 -0.52807617 C30.24860361 -0.61332254 33.53100683 -0.65276428 36.81640625 -0.68359375 C37.83021866 -0.71972275 38.84403107 -0.75585175 39.88856506 -0.79307556 C45.1311611 -0.7959615 48.18537415 -0.45172431 52.01147461 3.30834961 C53.04144748 4.5107532 54.03893458 5.74183794 55 7 C55.51538834 7.62785904 56.03077667 8.25571808 56.56178284 8.90260315 C58 10.75 58 10.75 60 14 C59.67 14.99 59.34 15.98 59 17 C58.34 16.34 57.68 15.68 57 15 C54.46220018 14.84894049 52.03470742 14.81688651 49.5 14.875 C48.37452759 14.88635986 48.37452759 14.88635986 47.22631836 14.89794922 C44.01665255 14.93055493 40.80749672 14.98621067 37.59814453 15.04101562 C18.47061828 15.33982179 18.47061828 15.33982179 12 13 C11.34 12.34 10.68 11.68 10 11 C7.57284794 10.32059533 7.57284794 10.32059533 4.875 9.875 C3.96492188 9.70742188 3.05484375 9.53984375 2.1171875 9.3671875 C1.41851562 9.24601562 0.71984375 9.12484375 0 9 C0 6.03 0 3.06 0 0 Z \",fill:\"#F6CEAD\",transform:\"translate(353,350)\"})),_path170||(_path170=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.33 1.32 -0.66 2.64 -1 4 C1.64 4.33 4.28 4.66 7 5 C7 5.66 7 6.32 7 7 C7.99 7.33 8.98 7.66 10 8 C3.03037836 9.86230283 -3.93955312 11.72314194 -10.91583252 13.56036377 C-13.50245618 14.24178394 -16.08841095 14.92572335 -18.67431641 15.60986328 C-19.992393 15.95794108 -21.31076067 16.30491821 -22.62939453 16.65087891 C-24.57922741 17.1627398 -26.52791175 17.67896951 -28.4765625 18.1953125 C-29.61174316 18.49453613 -30.74692383 18.79375977 -31.91650391 19.10205078 C-34.70521425 19.91415503 -37.31750574 20.89544354 -40 22 C-47.59357632 24.08002287 -55.14400124 25.48572469 -63 26 C-63.33 25.01 -63.66 24.02 -64 23 C-64.66 22.34 -65.32 21.68 -66 21 C-65.34 20.34 -64.68 19.68 -64 19 C-63.01 19 -62.02 19 -61 19 C-61 18.34 -61 17.68 -61 17 C-59.9169458 16.63237549 -58.8338916 16.26475098 -57.71801758 15.88598633 C-53.63736971 14.50010107 -49.55790491 13.11076041 -45.47875977 11.72045898 C-43.72484081 11.12318542 -41.97061707 10.52680602 -40.21606445 9.93139648 C-37.67054546 9.0673879 -35.12603133 8.20050136 -32.58203125 7.33203125 C-31.75266556 7.04955032 -30.92329987 6.7670694 -30.06880188 6.47602844 C-24.19546812 4.45799923 -18.4390224 2.24854434 -12.71484375 -0.1640625 C-8.36740236 -1.50269913 -4.37789157 -0.99811975 0 0 Z \",fill:\"#291A18\",transform:\"translate(503,200)\"})),_path171||(_path171=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.99 2.64 1.98 4 3 C0.37 3.33 -3.26 3.66 -7 4 C-7 5.32 -7 6.64 -7 8 C-6.34 8.33 -5.68 8.66 -5 9 C-5 9.33 -5 9.66 -5 10 C-1.7 10 1.6 10 5 10 C5.33 9.34 5.66 8.68 6 8 C9.28519475 6.90493508 11.73663415 6.90039392 15.1875 6.9375 C16.81751953 6.95103516 16.81751953 6.95103516 18.48046875 6.96484375 C19.31191406 6.97644531 20.14335937 6.98804688 21 7 C21 7.33 21 7.66 21 8 C17.7 8 14.4 8 11 8 C11 9.32 11 10.64 11 12 C14.3 12.33 17.6 12.66 21 13 C21 14.65 21 16.3 21 18 C23.97 18.33 26.94 18.66 30 19 C30 19.99 30 20.98 30 22 C25.71 21.67 21.42 21.34 17 21 C17 20.34 17 19.68 17 19 C16.34 19 15.68 19 15 19 C14.690625 19.804375 14.38125 20.60875 14.0625 21.4375 C13 24 13 24 12 25 C10.00041636 25.04080783 7.99954746 25.04254356 6 25 C6.495 23.515 6.495 23.515 7 22 C7.66 21.67 8.32 21.34 9 21 C6.35409469 20.97265999 3.70848066 20.95299947 1.0625 20.9375 C0.32708984 20.92912109 -0.40832031 20.92074219 -1.16601562 20.91210938 C-4.91954287 20.89571843 -8.55643735 21.0229158 -12.28125 21.5 C-18.03551215 22.20558736 -23.77357729 22.10786226 -29.5625 22.0625 C-30.66658203 22.05798828 -31.77066406 22.05347656 -32.90820312 22.04882812 C-35.605527 22.0371514 -38.30273347 22.02077525 -41 22 C-41 21.34 -41 20.68 -41 20 C-38.03 20 -35.06 20 -32 20 C-31.67 17.69 -31.34 15.38 -31 13 C-32.65 13 -34.3 13 -36 13 C-36 12.67 -36 12.34 -36 12 C-28.08 11.505 -28.08 11.505 -20 11 C-19.67 8.69 -19.34 6.38 -19 4 C-14.44298399 -0.86162938 -6.16117038 -1.06194086 0 0 Z \",fill:\"#090906\",transform:\"translate(158,298)\"})),_path172||(_path172=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C-3.74522285 6.11843381 -10.55512974 11.13031115 -17.4375 16.0625 C-25.22165181 21.64804917 -32.84625262 27.42535637 -40.44726562 33.25683594 C-45.38293024 37.03450363 -50.35314564 40.73764303 -55.4375 44.3125 C-61.91213926 48.86760361 -68.10837769 53.73841978 -74.30615234 58.66064453 C-81.06669406 64.00632511 -87.93396071 69.21315997 -94.8449707 74.36206055 C-101.51764084 79.33506558 -108.08263509 84.41279259 -114.56152344 89.63574219 C-118.54719096 92.84659426 -122.56326415 96.01092073 -126.625 99.125 C-127.15593262 99.53210205 -127.68686523 99.9392041 -128.23388672 100.35864258 C-130.86470955 102.37255232 -133.50004233 104.38048052 -136.13671875 106.38671875 C-142.84442209 111.51031503 -149.43213311 116.75852293 -155.9699707 122.09716797 C-165.1603261 129.59430088 -174.46528741 136.94431268 -184 144 C-184 141 -184 141 -183 138 C-181.02 137.67 -179.04 137.34 -177 137 C-176.22227595 134.66682784 -175.57584432 132.38564077 -175 130 C-171.25 128.875 -171.25 128.875 -169 130 C-169 129.34 -169 128.68 -169 128 C-167.50390625 126.5625 -167.50390625 126.5625 -165.5625 125 C-162.84811762 122.85474956 -162.84811762 122.85474956 -161 120 C-159.68 120 -158.36 120 -157 120 C-156.01 114.72 -155.02 109.44 -154 104 C-153.67 104 -153.34 104 -153 104 C-152.505 109.94 -152.505 109.94 -152 116 C-151.67 103.13 -151.34 90.26 -151 77 C-150.01 76.67 -149.02 76.34 -148 76 C-148.99 75.67 -149.98 75.34 -151 75 C-151 73.68 -151 72.36 -151 71 C-149.14375 71.0309375 -149.14375 71.0309375 -147.25 71.0625 C-144.3359175 71.06766681 -141.79046673 70.93015558 -139 70 C-139 70.66 -139 71.32 -139 72 C-137.68 72 -136.36 72 -135 72 C-135 72.66 -135 73.32 -135 74 C-136.32 74 -137.64 74 -139 74 C-139 75.98 -139 77.96 -139 80 C-139.99 80 -140.98 80 -142 80 C-142 80.66 -142 81.32 -142 82 C-144.64 82 -147.28 82 -150 82 C-149.34 89.26 -148.68 96.52 -148 104 C-147.67 104 -147.34 104 -147 104 C-147 105.65 -147 107.3 -147 109 C-144.03 108.505 -144.03 108.505 -141 108 C-141 107.34 -141 106.68 -141 106 C-140.34 106 -139.68 106 -139 106 C-139 105.34 -139 104.68 -139 104 C-138.34 104 -137.68 104 -137 104 C-137 103.34 -137 102.68 -137 102 C-136.34 102 -135.68 102 -135 102 C-135 101.34 -135 100.68 -135 100 C-133.68 100 -132.36 100 -131 100 C-131 99.34 -131 98.68 -131 98 C-130.34 98 -129.68 98 -129 98 C-128.34 96.35 -127.68 94.7 -127 93 C-127.66 93 -128.32 93 -129 93 C-129 92.01 -129 91.02 -129 90 C-127.68 90 -126.36 90 -125 90 C-125 90.66 -125 91.32 -125 92 C-123.68 92 -122.36 92 -121 92 C-121 91.34 -121 90.68 -121 90 C-120.34 90 -119.68 90 -119 90 C-119 89.34 -119 88.68 -119 88 C-118.39671875 87.67386719 -117.7934375 87.34773438 -117.171875 87.01171875 C-116.37265625 86.57472656 -115.5734375 86.13773437 -114.75 85.6875 C-113.56664062 85.04361328 -113.56664062 85.04361328 -112.359375 84.38671875 C-107.855631 81.93648627 -107.855631 81.93648627 -105.25 77.8125 C-105.1675 77.214375 -105.085 76.61625 -105 76 C-104.34 76 -103.68 76 -103 76 C-103 75.34 -103 74.68 -103 74 C-101.97777344 73.76796875 -100.95554687 73.5359375 -99.90234375 73.296875 C-95.81900758 72.12639393 -92.80864756 69.9237628 -89.5625 67.25 C-88.43245212 66.35136069 -87.30224403 65.45292281 -86.171875 64.5546875 C-85.36073242 63.90064941 -85.36073242 63.90064941 -84.53320312 63.23339844 C-82.48238975 61.58360399 -80.40519444 59.97125233 -78.3125 58.375 C-77.71050781 57.90835938 -77.10851562 57.44171875 -76.48828125 56.9609375 C-75 56 -75 56 -73 56 C-73 55.34 -73 54.68 -73 54 C-70.96926321 52.41681689 -68.93623589 50.94930063 -66.8125 49.5 C-60.64560628 45.21301548 -54.71264681 40.71171852 -48.83984375 36.03125 C-46.24872599 34.1779058 -44.00209863 33.01355257 -41 32 C-41 31.34 -41 30.68 -41 30 C-39.5222168 28.70654297 -39.5222168 28.70654297 -37.44921875 27.2421875 C-36.69334473 26.70303711 -35.9374707 26.16388672 -35.15869141 25.60839844 C-33.93545166 24.75036621 -33.93545166 24.75036621 -32.6875 23.875 C-31.02207349 22.69019121 -29.35670869 21.50529567 -27.69140625 20.3203125 C-26.88074707 19.74700195 -26.07008789 19.17369141 -25.23486328 18.58300781 C-22.51730525 16.65809561 -19.8179197 14.70920815 -17.125 12.75 C-16.29226563 12.14800781 -15.45953125 11.54601562 -14.6015625 10.92578125 C-12.63391481 9.46924925 -10.69902598 7.99083446 -8.7734375 6.48046875 C-8.22800293 6.05733398 -7.68256836 5.63419922 -7.12060547 5.19824219 C-5.58463986 4.00334517 -4.05766529 2.79691689 -2.53125 1.58984375 C-1.6959375 1.06519531 -0.860625 0.54054687 0 0 Z \",fill:\"#6D8670\",transform:\"translate(617,0)\"})),_path173||(_path173=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0 5.94 0 9 0 C9 6.27 9 12.54 9 19 C10.32 19 11.64 19 13 19 C13 18.34 13 17.68 13 17 C12.34 17 11.68 17 11 17 C11 11.72 11 6.44 11 1 C13.31 1 15.62 1 18 1 C18.90413673 4.83724172 19.10576898 8.37502274 19.0625 12.3125 C19.05347656 13.38113281 19.04445313 14.44976562 19.03515625 15.55078125 C19.02355469 16.35902344 19.01195313 17.16726563 19 18 C20.98 18 22.96 18 25 18 C25 16.02 25 14.04 25 12 C25.33 12 25.66 12 26 12 C26 14.31 26 16.62 26 19 C26.66 19 27.32 19 28 19 C28 13.06 28 7.12 28 1 C31.465 0.505 31.465 0.505 35 0 C35 0.66 35 1.32 35 2 C34.01 2 33.02 2 32 2 C31.34 7.28 30.68 12.56 30 18 C32.31 18 34.62 18 37 18 C37 12.06 37 6.12 37 0 C38.98 0 40.96 0 43 0 C43 6.6 43 13.2 43 20 C45.64 20 48.28 20 51 20 C51 20.33 51 20.66 51 21 C46.58359523 21.48160015 42.16683086 21.95982463 37.75 22.4375 C36.51507813 22.57220703 35.28015625 22.70691406 34.0078125 22.84570312 C28.26395206 23.46543544 22.51879388 24.07049937 16.765625 24.59765625 C15.91258789 24.67636963 15.05955078 24.75508301 14.18066406 24.83618164 C9.45971814 25.07933137 4.72720342 25 0 25 C0 16.75 0 8.5 0 0 Z \",fill:\"#6D8E53\",transform:\"translate(57,270)\"})),_path174||(_path174=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C9.24 0 18.48 0 28 0 C28 7.92 28 15.84 28 24 C19.91158223 25.26877142 12.18764057 26.33957956 4 26 C3.67 25.34 3.34 24.68 3 24 C2.67 24.99 2.34 25.98 2 27 C1.34 27 0.68 27 0 27 C0 18.09 0 9.18 0 0 Z \",fill:\"#FDC35F\",transform:\"translate(28,270)\"})),_path175||(_path175=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.2463623 0.01047363 2.49272461 0.02094727 3.77685547 0.03173828 C4.77143265 0.03598312 4.77143265 0.03598312 5.78610229 0.04031372 C7.9055988 0.05151643 10.02467401 0.07662027 12.14404297 0.10205078 C13.58023479 0.11208051 15.01643322 0.12120637 16.45263672 0.12939453 C19.97490925 0.15145578 23.496935 0.18598585 27.01904297 0.22705078 C27.14404297 7.97705078 27.14404297 7.97705078 26.01904297 10.22705078 C26.08111102 11.89724548 26.21530684 13.56528781 26.39404297 15.22705078 C26.48427734 16.11392578 26.57451172 17.00080078 26.66748047 17.91455078 C26.90071245 20.24680722 26.90071245 20.24680722 28.01904297 22.22705078 C21.08904297 22.22705078 14.15904297 22.22705078 7.01904297 22.22705078 C6.68904297 23.21705078 6.35904297 24.20705078 6.01904297 25.22705078 C1.06904297 25.22705078 -3.88095703 25.22705078 -8.98095703 25.22705078 C-8.98095703 24.56705078 -8.98095703 23.90705078 -8.98095703 23.22705078 C-5.68095703 22.56705078 -2.38095703 21.90705078 1.01904297 21.22705078 C0.35904297 20.89705078 -0.30095703 20.56705078 -0.98095703 20.22705078 C-0.98095703 19.56705078 -0.98095703 18.90705078 -0.98095703 18.22705078 C-2.63095703 18.22705078 -4.28095703 18.22705078 -5.98095703 18.22705078 C-5.86730553 15.60110294 -5.74056649 12.97693531 -5.60595703 10.35205078 C-5.57501953 9.60568359 -5.54408203 8.85931641 -5.51220703 8.09033203 C-5.0958722 0.38813769 -5.0958722 0.38813769 0 0 Z \",fill:\"#D7AE0C\",transform:\"translate(300.98095703125,423.77294921875)\"})),_path176||(_path176=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 2.97 0 5.94 0 9 C-2.03976214 9.96238036 -4.08190046 10.91972527 -6.125 11.875 C-7.26195312 12.40867187 -8.39890625 12.94234375 -9.5703125 13.4921875 C-13 15 -13 15 -15.8359375 15.93359375 C-20.19009281 17.40110535 -24.31846265 19.29004564 -28.5 21.1875 C-29.83720093 21.7918689 -29.83720093 21.7918689 -31.20141602 22.40844727 C-37.28840475 25.17735507 -43.2783568 28.08432654 -49.23828125 31.1171875 C-53.99181186 33.51955177 -58.81184538 35.78271812 -63.625 38.0625 C-72.0712511 42.0669039 -80.51306674 46.07828554 -88.765625 50.47265625 C-89.64734375 50.93542969 -90.5290625 51.39820313 -91.4375 51.875 C-92.19933594 52.28492188 -92.96117187 52.69484375 -93.74609375 53.1171875 C-96.30731489 54.12036944 -98.273049 54.16352087 -101 54 C-97.39750049 51.0718145 -93.4592011 48.97587472 -89.375 46.8125 C-88.694375 46.44447266 -88.01375 46.07644531 -87.3125 45.69726562 C-82.24824617 43 -82.24824617 43 -80 43 C-80.33 42.34 -80.66 41.68 -81 41 C-83.475 41.495 -83.475 41.495 -86 42 C-82.8320488 39.46621165 -79.53303508 37.60528146 -75.93359375 35.7421875 C-75.34692932 35.43778244 -74.76026489 35.13337738 -74.15582275 34.81974792 C-72.25187492 33.83391707 -70.34491914 32.85409552 -68.4375 31.875 C-67.46050644 31.37128372 -67.46050644 31.37128372 -66.46377563 30.85739136 C-57.12975436 26.04630486 -47.73382142 21.40775594 -38.2109375 16.98046875 C-34.03230094 15.03318956 -29.92188709 12.96352494 -25.8125 10.875 C-20.31604878 8.09387188 -14.76330478 5.4814894 -9.125 3 C-8.44026611 2.69690918 -7.75553223 2.39381836 -7.05004883 2.08154297 C-2.25076611 0 -2.25076611 0 0 0 Z \",fill:\"#40312C\",transform:\"translate(626,98)\"})),_path177||(_path177=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.9375 2.5 2.9375 2.5 5 5 C4.34 5.66 3.68 6.32 3 7 C3.495 8.485 3.495 8.485 4 10 C4.928125 10.0825 5.85625 10.165 6.8125 10.25 C10 11 10 11 11.875 12.5625 C13.52772156 16.14339672 13.19618208 19.07635835 13 23 C11.35 23 9.7 23 8 23 C8 21.68 8 20.36 8 19 C7.01 19.495 7.01 19.495 6 20 C5.34786708 22.02463255 5.34786708 22.02463255 5 24 C3.35 24 1.7 24 0 24 C0.495 25.485 0.495 25.485 1 27 C1.99 27.33 2.98 27.66 4 28 C4 28.66 4 29.32 4 30 C2.22880197 29.85866501 0.45804713 29.71176792 -1.3125 29.5625 C-2.29863281 29.48128906 -3.28476562 29.40007812 -4.30078125 29.31640625 C-7 29 -7 29 -10 28 C-10 27.34 -10 26.68 -10 26 C-11.65 26 -13.3 26 -15 26 C-15.66 23.36 -16.32 20.72 -17 18 C-17.99 18.33 -18.98 18.66 -20 19 C-22.57265818 19.07029121 -25.11641431 19.09370832 -27.6875 19.0625 C-28.38939453 19.05798828 -29.09128906 19.05347656 -29.81445312 19.04882812 C-31.54300538 19.03706927 -33.27151365 19.01913454 -35 19 C-35 18.34 -35 17.68 -35 17 C-34.34 16.67 -33.68 16.34 -33 16 C-32.27840576 14.35636866 -31.60648579 12.68949614 -31 11 C-29.92878906 11.08378906 -28.85757812 11.16757812 -27.75390625 11.25390625 C-26.35679134 11.35704896 -24.95965476 11.45989843 -23.5625 11.5625 C-22.85544922 11.61857422 -22.14839844 11.67464844 -21.41992188 11.73242188 C-19.61572163 11.86190993 -17.80768048 11.93521608 -16 12 C-15.67 11.67 -15.34 11.34 -15 11 C-15 10.34 -15 9.68 -15 9 C-13.5 7.375 -13.5 7.375 -12 6 C-13.32 5.67 -14.64 5.34 -16 5 C-6.23616236 -1.19926199 -6.23616236 -1.19926199 0 0 Z \",fill:\"#051A16\",transform:\"translate(474,292)\"})),_path178||(_path178=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 1.4375 2 1.4375 4 4 C4.35442445 7.02824418 4.23347235 9.96485939 4 13 C4.66 12.67 5.32 12.34 6 12 C5.34 8.37 4.68 4.74 4 1 C4.66 1 5.32 1 6 1 C6.66 1.66 7.32 2.32 8 3 C8.66 2.34 9.32 1.68 10 1 C10.33 1.99 10.66 2.98 11 4 C11.99 4 12.98 4 14 4 C14.33 3.01 14.66 2.02 15 1 C17.66666667 1 20.33333333 1 23 1 C23.33 1.99 23.66 2.98 24 4 C24.99 4 25.98 4 27 4 C27.33 2.68 27.66 1.36 28 0 C28.66 0 29.32 0 30 0 C30 0.99 30 1.98 30 3 C31.32 3.33 32.64 3.66 34 4 C34 4.66 34 5.32 34 6 C34.556875 5.67 35.11375 5.34 35.6875 5 C38.30284522 3.8690399 40.1806646 3.84337026 43 4 C45.21241073 9.60477385 45.35352658 13.53526584 46 20 C36.43 20 26.86 20 17 20 C16.67 18.68 16.34 17.36 16 16 C15.34 16 14.68 16 14 16 C14 16.66 14 17.32 14 18 C9.38 18 4.76 18 0 18 C-0.22786458 15.4609375 -0.45572917 12.921875 -0.68359375 10.3828125 C-0.86989285 7.98889139 -0.86989285 7.98889139 -2 6 C-1.34 5.67 -0.68 5.34 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#BF7555\",transform:\"translate(153,249)\"})),_path179||(_path179=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.216875 -0.04125 2.43375 -0.0825 3.6875 -0.125 C4.71423828 -0.15980469 4.71423828 -0.15980469 5.76171875 -0.1953125 C8 0 8 0 10.14892578 0.98852539 C13.73254394 2.25988436 17.09917046 2.33449249 20.85546875 2.37890625 C21.96973991 2.40439796 21.96973991 2.40439796 23.10652161 2.43040466 C25.46676264 2.48329648 27.82698798 2.52373994 30.1875 2.5625 C32.55863779 2.60645889 34.92964174 2.65313549 37.3006134 2.70530701 C38.77291244 2.73721659 40.24533015 2.76412154 41.71781921 2.78553772 C46.77649089 2.88824544 46.77649089 2.88824544 49 4 C48.67 6.97 48.34 9.94 48 13 C42.06 13 36.12 13 30 13 C30 12.34 30 11.68 30 11 C29.67 11.99 29.34 12.98 29 14 C27.99735107 14.03963867 26.99470215 14.07927734 25.96166992 14.12011719 C22.19041684 14.27392587 18.42054029 14.45106978 14.65063477 14.63476562 C13.02851828 14.71065412 11.4061046 14.7804718 9.78344727 14.84375 C0.99852319 15.19048768 -6.84617246 15.63165155 -15.0378418 19.16894531 C-17 20 -17 20 -19 20 C-18.69772786 16.66919348 -18.2583939 15.2655715 -15.890625 12.83203125 C-15.01921875 12.16558594 -14.1478125 11.49914062 -13.25 10.8125 C-12.38890625 10.13832031 -11.5278125 9.46414063 -10.640625 8.76953125 C-7.06958987 6.37651511 -4.32412306 5 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#F4E9D5\",transform:\"translate(385,447)\"})),_path180||(_path180=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.430516 1.60714539 10.84429564 3.25892112 16.2421875 4.97265625 C17.32886719 5.31490234 18.41554687 5.65714844 19.53515625 6.00976562 C21.75573985 6.70970397 23.97451496 7.41540675 26.19140625 8.12695312 C33.40808505 10.3859017 40.50895098 11.96450744 48 13 C48 13.66 48 14.32 48 15 C38.37014049 15.68784711 28.97454232 13.13649023 19.94140625 9.90625 C16.62083902 8.88318015 13.58903026 8.58708349 10.125 8.375 C8.97257812 8.30023438 7.82015625 8.22546875 6.6328125 8.1484375 C5.32957031 8.07496094 5.32957031 8.07496094 4 8 C4 8.99 4 9.98 4 11 C5.06009277 11.05498657 5.06009277 11.05498657 6.14160156 11.11108398 C14.24727424 11.64490759 21.86881294 13.14123777 29.75 15.0625 C31.52890625 15.48499023 31.52890625 15.48499023 33.34375 15.91601562 C36.23111875 16.60292997 39.11634762 17.29767871 42 18 C41.01 19.485 41.01 19.485 40 21 C35.87484996 20.68946109 31.74991025 20.37620677 27.625 20.0625 C26.46871094 19.97548828 25.31242187 19.88847656 24.12109375 19.79882812 C17.40368511 19.2864834 10.69938434 18.71129502 4 18 C4.495 18.99 4.495 18.99 5 20 C5.06950541 21.54023996 5.08452357 23.08334988 5.0625 24.625 C5.05347656 25.44226563 5.04445312 26.25953125 5.03515625 27.1015625 C5.02355469 27.72804688 5.01195312 28.35453125 5 29 C4.34 29 3.68 29 3 29 C2.95101562 28.28972656 2.90203125 27.57945312 2.8515625 26.84765625 C2.77679688 25.92855469 2.70203125 25.00945312 2.625 24.0625 C2.52058594 22.68771484 2.52058594 22.68771484 2.4140625 21.28515625 C2.20910156 20.15400391 2.20910156 20.15400391 2 19 C1.34 18.67 0.68 18.34 0 18 C0.495 19.485 0.495 19.485 1 21 C0.01 20.67 -0.98 20.34 -2 20 C-2 19.01 -2 18.02 -2 17 C-5.12197478 18.3089572 -5.12197478 18.3089572 -7 21 C-7.66 20.67 -8.32 20.34 -9 20 C-9.625 17.4375 -9.625 17.4375 -10 15 C-10.99 15.33 -11.98 15.66 -13 16 C-13 15.34 -13 14.68 -13 14 C-15.97 14.66 -18.94 15.32 -22 16 C-22.33 15.34 -22.66 14.68 -23 14 C-23.99 13.67 -24.98 13.34 -26 13 C-26 12.01 -26 11.02 -26 10 C-26.66 10 -27.32 10 -28 10 C-28.33 11.32 -28.66 12.64 -29 14 C-29.99 14 -30.98 14 -32 14 C-32.33 13.01 -32.66 12.02 -33 11 C-32.34 11 -31.68 11 -31 11 C-31 10.34 -31 9.68 -31 9 C-28.36 9 -25.72 9 -23 9 C-22.67 9.66 -22.34 10.32 -22 11 C-21.33613281 10.91621094 -20.67226562 10.83242187 -19.98828125 10.74609375 C-15.37336315 10.21386232 -11.55543736 9.89565155 -7 11 C-6.01 10.67 -5.02 10.34 -4 10 C-6.96178773 8.32889958 -9.37071192 7.67317248 -12.75 7.375 C-13.94882813 7.26285156 -13.94882813 7.26285156 -15.171875 7.1484375 C-15.77515625 7.09945312 -16.3784375 7.05046875 -17 7 C-17 5.35 -17 3.7 -17 2 C-11.39 2 -5.78 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#533930\",transform:\"translate(209,239)\"})),_path181||(_path181=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.86625 1.11375 0.86625 1.11375 1.75 2.25 C3.86589247 4.97194876 3.86589247 4.97194876 6.125 6.9375 C8 9 8 9 8.9375 11.9375 C9.80629002 15.16076224 9.80629002 15.16076224 12.4375 17.4375 C15.40767902 20.40767902 16.41545335 23.14197338 18 27 C19.31037934 28.68477344 20.63823078 30.35648543 22 32 C22 32.66 22 33.32 22 34 C22.66 34 23.32 34 24 34 C21.90992188 28.65868924 19.24342683 24.03992113 16.109375 19.234375 C15 17 15 17 16 14 C16.99 15.32 17.98 16.64 19 18 C19.144375 17.4225 19.28875 16.845 19.4375 16.25 C20.21875 13.125 20.21875 13.125 21 10 C24.14512215 14.29833361 25.75696561 17.82069003 27 23 C27.66 23 28.32 23 29 23 C30.4606285 25.64738916 31 26.89448334 31 30 C31.66 30 32.32 30 33 30 C34.31746333 32.58090767 35.62909617 35.16450458 36.9375 37.75 C37.31068359 38.47960937 37.68386719 39.20921875 38.06835938 39.9609375 C38.42607422 40.66992188 38.78378906 41.37890625 39.15234375 42.109375 C39.48226318 42.75874023 39.81218262 43.40810547 40.15209961 44.07714844 C41 46 41 46 41.49438477 48.18457031 C41.74466431 49.08320801 41.74466431 49.08320801 42 50 C42.639375 50.309375 43.27875 50.61875 43.9375 50.9375 C46.79920053 52.41170936 46.87237135 54.01510063 48 57 C49.26723063 58.86665084 50.60340421 60.65935057 51.9765625 62.44921875 C53 64 53 64 53 66 C48.71 66 44.42 66 40 66 C39.67 64.35 39.34 62.7 39 61 C38.01 60.67 37.02 60.34 36 60 C34.7890625 58.109375 34.7890625 58.109375 33.625 55.75 C31.98631302 52.60710796 30.74458647 50.74458647 28.1875 48.1875 C27.465625 47.465625 26.74375 46.74375 26 46 C26 44.68 26 43.36 26 42 C25.34 42 24.68 42 24 42 C24 40.68 24 39.36 24 38 C23.34 38 22.68 38 22 38 C20 35 20 35 20 32 C19.34 32 18.68 32 18 32 C17.34 30.02 16.68 28.04 16 26 C15.34 26 14.68 26 14 26 C14 24.68 14 23.36 14 22 C12.68 22 11.36 22 10 22 C10 20.68 10 19.36 10 18 C9.34 18 8.68 18 8 18 C7.67 16.68 7.34 15.36 7 14 C6.34 14 5.68 14 5 14 C4.01 10.7 3.02 7.4 2 4 C1.34 4 0.68 4 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#56382E\",transform:\"translate(460,560)\"})),_path182||(_path182=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.99 0 1.98 0 3 C-1.43359375 4.39453125 -1.43359375 4.39453125 -3.4375 5.8125 C-4.15808594 6.32683594 -4.87867188 6.84117187 -5.62109375 7.37109375 C-9.39042427 9.95206391 -13.18055564 12.49348964 -17 15 C-10.73 15.33 -4.46 15.66 2 16 C2 16.99 2 17.98 2 19 C1.26885986 19.01458252 0.53771973 19.02916504 -0.21557617 19.04418945 C-3.54007371 19.1188291 -6.86358467 19.21543801 -10.1875 19.3125 C-11.33798828 19.33505859 -12.48847656 19.35761719 -13.67382812 19.38085938 C-14.78564453 19.41630859 -15.89746094 19.45175781 -17.04296875 19.48828125 C-18.57473755 19.52755737 -18.57473755 19.52755737 -20.13745117 19.56762695 C-23.37061322 20.05597919 -25.32868942 21.15690298 -28 23 C-27.08710205 22.99476318 -26.1742041 22.98952637 -25.23364258 22.98413086 C-21.83243167 22.96704369 -18.43126669 22.9545278 -15.0300293 22.94506836 C-13.56062091 22.94005331 -12.09121748 22.93323967 -10.62182617 22.92456055 C-8.50438205 22.91237072 -6.38700417 22.90674331 -4.26953125 22.90234375 C-2.36071167 22.89448853 -2.36071167 22.89448853 -0.41333008 22.88647461 C2.5370919 22.98460394 5.13946675 23.30936165 8 24 C8 24.66 8 25.32 8 26 C4.79217914 26.95376567 1.91812604 27.11621181 -1.421875 27.09765625 C-2.44667969 27.09443359 -3.47148437 27.09121094 -4.52734375 27.08789062 C-5.59082031 27.07951172 -6.65429688 27.07113281 -7.75 27.0625 C-8.82894531 27.05798828 -9.90789062 27.05347656 -11.01953125 27.04882812 C-13.67974383 27.03705727 -16.33984365 27.02061399 -19 27 C-19 26.34 -19 25.68 -19 25 C-21.12750156 25.22773256 -23.25208056 25.48290818 -25.375 25.75 C-26.55835938 25.88921875 -27.74171875 26.0284375 -28.9609375 26.171875 C-30.46527344 26.58179688 -30.46527344 26.58179688 -32 27 C-32.66777593 28.33277813 -33.33431517 29.6661762 -34 31 C-35.81591797 32.46386719 -35.81591797 32.46386719 -37.9921875 33.796875 C-38.77980469 34.28027344 -39.56742188 34.76367188 -40.37890625 35.26171875 C-41.61447266 35.99841797 -41.61447266 35.99841797 -42.875 36.75 C-43.69097656 37.25660156 -44.50695312 37.76320313 -45.34765625 38.28515625 C-51.48565954 42 -51.48565954 42 -56 42 C-56.33 44.97 -56.66 47.94 -57 51 C-42.48 51 -27.96 51 -13 51 C-13 51.33 -13 51.66 -13 52 C-28.18 52 -43.36 52 -59 52 C-59.33 49.03 -59.66 46.06 -60 43 C-62.88718443 40.63952379 -62.88718443 40.63952379 -66.5625 39.4375 C-68.35880859 38.72400391 -68.35880859 38.72400391 -70.19140625 37.99609375 C-71.11824219 37.66738281 -72.04507813 37.33867187 -73 37 C-73 36.34 -73 35.68 -73 35 C-71.4584364 34.97258088 -69.91672526 34.95341752 -68.375 34.9375 C-67.08722656 34.92009766 -67.08722656 34.92009766 -65.7734375 34.90234375 C-63 35 -63 35 -60.2421875 35.75 C-55.42269071 36.12162385 -52.0181988 34.14496796 -47.75 32.0625 C-46.1419985 31.3004803 -44.53268405 30.54122308 -42.921875 29.78515625 C-42.21643555 29.44363525 -41.51099609 29.10211426 -40.78417969 28.75024414 C-39 28 -39 28 -37 28 C-37 27.34 -37 26.68 -37 26 C-37.72445312 26.144375 -38.44890625 26.28875 -39.1953125 26.4375 C-44.18491623 27.39550392 -48.89267738 28.27607149 -54 28 C-50.3503928 25.56692853 -46.84892796 25.10486744 -42.625 24.3125 C-34.08379707 22.59219313 -27.36731111 19.63385646 -20 15 C-20.72590332 15.02094727 -21.45180664 15.04189453 -22.19970703 15.06347656 C-25.50799555 15.1469365 -28.81606211 15.19875539 -32.125 15.25 C-33.26710937 15.28351563 -34.40921875 15.31703125 -35.5859375 15.3515625 C-42.03185971 15.42651508 -46.15500386 15.45215861 -51 11 C-52.875 8.75 -52.875 8.75 -54 7 C-53.67 6.34 -53.34 5.68 -53 5 C-52.52691406 5.49371094 -52.05382812 5.98742187 -51.56640625 6.49609375 C-47.54801025 10.38915966 -44.51495106 12.92971342 -38.828125 13.1484375 C-22.79113156 12.41509583 -22.79113156 12.41509583 -8.375 6.0625 C-7.64023437 5.55847656 -6.90546875 5.05445313 -6.1484375 4.53515625 C-4.07491647 3.05353123 -2.03097179 1.5393112 0 0 Z \",fill:\"#1A282C\",transform:\"translate(281,381)\"})),_path183||(_path183=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 12.21 0 24.42 0 37 C-11.25 37 -11.25 37 -16 36 C-16.3160849 34.64666562 -16.62764351 33.29227399 -16.9375 31.9375 C-17.19853516 30.80634766 -17.19853516 30.80634766 -17.46484375 29.65234375 C-18.7962143 23.0537992 -19.12876714 16.76567658 -19.0625 10.0625 C-19.05573242 8.75055664 -19.05573242 8.75055664 -19.04882812 7.41210938 C-19.03714834 5.27470953 -19.01921689 3.13734537 -19 1 C-13 0 -13 0 0 0 Z \",fill:\"#492911\",transform:\"translate(626,257)\"})),_path184||(_path184=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C1.8253125 1.7215625 1.8253125 1.7215625 3.6875 1.4375 C7.0566267 1.0021969 9.67762669 1.2182651 13 2 C13.66 1.67 14.32 1.34 15 1 C17 4 17 4 17 7 C17.66 7 18.32 7 19 7 C18.34 9.31 17.68 11.62 17 14 C17.66 14 18.32 14 19 14 C19.33 13.01 19.66 12.02 20 11 C20.33 12.32 20.66 13.64 21 15 C21.66 15 22.32 15 23 15 C23.33 15.99 23.66 16.98 24 18 C23.34 18 22.68 18 22 18 C21.979375 19.258125 21.95875 20.51625 21.9375 21.8125 C21.92589844 22.52019531 21.91429688 23.22789062 21.90234375 23.95703125 C21.91736783 26.20305461 21.91736783 26.20305461 23 29 C19.90765472 29.89893758 17.09202643 30.16349234 13.875 30.1875 C12.57175781 30.20876953 12.57175781 30.20876953 11.2421875 30.23046875 C9 30 9 30 7 28 C6.67 27.34 6.34 26.68 6 26 C5.34 26 4.68 26 4 26 C4 26.99 4 27.98 4 29 C3.34 29 2.68 29 2 29 C1.67 28.34 1.34 27.68 1 27 C0.67 27.66 0.34 28.32 0 29 C-1.98 28.67 -3.96 28.34 -6 28 C-6.04241723 25.66705225 -6.04092937 23.33297433 -6 21 C-5.67 20.67 -5.34 20.34 -5 20 C-5.66 19.67 -6.32 19.34 -7 19 C-7 16.03 -7 13.06 -7 10 C-6.34 10 -5.68 10 -5 10 C-4.67 9.34 -4.34 8.68 -4 8 C-2.5393715 10.64738916 -2 11.89448334 -2 15 C-1.06934867 12.39417629 -0.85082593 11.35801776 -1.9375 8.75 C-2.288125 8.1725 -2.63875 7.595 -3 7 C-2.01 7 -1.02 7 0 7 C0 7.66 0 8.32 0 9 C0.99 9 1.98 9 3 9 C1.86467415 5.59402245 1.51883178 5.46547428 -1.5 3.9375 C-4.89821183 2.20357634 -4.89821183 2.20357634 -6 0 C-3.50907189 -1.24546405 -2.58919267 -0.7767578 0 0 Z \",fill:\"#834F3D\",transform:\"translate(68,239)\"})),_path185||(_path185=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.66 1.98 1.32 3 2 C3.1875 4.625 3.1875 4.625 3 7 C3.66 7 4.32 7 5 7 C6.8815863 16.32509434 8.47703913 25.47850555 9 35 C7.68 35 6.36 35 5 35 C5 31.7 5 28.4 5 25 C-7.54 25 -20.08 25 -33 25 C-33 24.34 -33 23.68 -33 23 C-33.66 23 -34.32 23 -35 23 C-36.62477811 20.03837914 -37.51695886 17.30733073 -38.1875 14 C-38.36667969 13.154375 -38.54585938 12.30875 -38.73046875 11.4375 C-39.00334098 8.96978589 -38.76424119 7.34150494 -38 5 C-37.34 6.32 -36.68 7.64 -36 9 C-35.01 8.34 -34.02 7.68 -33 7 C-33 9.64 -33 12.28 -33 15 C-32.34 15 -31.68 15 -31 15 C-31 15.66 -31 16.32 -31 17 C-30.03578125 16.97679687 -29.0715625 16.95359375 -28.078125 16.9296875 C-26.18320312 16.90261719 -26.18320312 16.90261719 -24.25 16.875 C-22.99703125 16.85179687 -21.7440625 16.82859375 -20.453125 16.8046875 C-17.27179508 16.98462698 -15.63478104 17.31001418 -13 19 C-11.01063133 14.09289062 -10.69619331 9.61879543 -10.5390625 4.390625 C-10 2 -10 2 -8.15234375 0.6875 C-5.30503786 -0.22198428 -2.97129275 -0.25287598 0 0 Z \",fill:\"#060305\",transform:\"translate(337,463)\"})),_path186||(_path186=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.99 1.32 1.98 2 3 C2.9590625 2.7215625 2.9590625 2.7215625 3.9375 2.4375 C8.07334611 1.84666484 11.8851173 2.41728241 16 3 C16.09765625 9.15234375 16.09765625 9.15234375 16 11 C14.48578999 12.51421001 13.07527232 12.21309856 10.96484375 12.31640625 C10.15595703 12.35830078 9.34707031 12.40019531 8.51367188 12.44335938 C7.2384668 12.50233398 7.2384668 12.50233398 5.9375 12.5625 C4.65649414 12.62727539 4.65649414 12.62727539 3.34960938 12.69335938 C1.23327963 12.79976702 -0.88333813 12.90041731 -3 13 C-0.525 13.495 -0.525 13.495 2 14 C2 15.32 2 16.64 2 18 C1.01 18.495 1.01 18.495 0 19 C0.66 19.33 1.32 19.66 2 20 C2 21.65 2 23.3 2 25 C-3.28 25 -8.56 25 -14 25 C-14 25.66 -14 26.32 -14 27 C-14.66 27 -15.32 27 -16 27 C-15.67 27.99 -15.34 28.98 -15 30 C-15.78375 30.7425 -16.5675 31.485 -17.375 32.25 C-19.99852604 34.69630817 -19.99852604 34.69630817 -20.9375 37.0625 C-22 39 -22 39 -24.75 40.6875 C-28.47479159 43.33783248 -30.16357929 46.01090115 -32.56640625 49.82421875 C-35.81584534 54.75592876 -40.4649974 58.30871881 -45 62 C-45.495 60.515 -45.495 60.515 -46 59 C-45.608125 58.62875 -45.21625 58.2575 -44.8125 57.875 C-43.25162274 56.26029939 -41.85179373 54.61566921 -40.4375 52.875 C-38 50 -38 50 -36 49 C-36 48.34 -36 47.68 -36 47 C-35.34 47 -34.68 47 -34 47 C-34 46.34 -34 45.68 -34 45 C-33.34 45 -32.68 45 -32 45 C-32 44.34 -32 43.68 -32 43 C-31.34 43 -30.68 43 -30 43 C-30 42.34 -30 41.68 -30 41 C-29.34 41 -28.68 41 -28 41 C-27.7525 39.906875 -27.505 38.81375 -27.25 37.6875 C-26 34 -26 34 -23.9375 32.5 C-21.58547877 31.01625322 -21.58547877 31.01625322 -21.25 27.3125 C-21.1675 26.219375 -21.085 25.12625 -21 24 C-19.35 23.67 -17.7 23.34 -16 23 C-16 22.34 -16 21.68 -16 21 C-15.34 21 -14.68 21 -14 21 C-14 20.34 -14 19.68 -14 19 C-14.66 19 -15.32 19 -16 19 C-16 17.68 -16 16.36 -16 15 C-15.113125 14.855625 -14.22625 14.71125 -13.3125 14.5625 C-10.52882354 14.08980022 -7.76516243 13.56929815 -5 13 C-9.01804691 12.15901344 -12.01803543 11.94595055 -16 13 C-16.02688151 11.35425434 -16.04634123 9.70838587 -16.0625 8.0625 C-16.07410156 7.14597656 -16.08570313 6.22945312 -16.09765625 5.28515625 C-16 3 -16 3 -15 2 C-13.80375 2.020625 -12.6075 2.04125 -11.375 2.0625 C-7.21431325 2.13009238 -3.93496475 1.31165492 0 0 Z \",fill:\"#926C4E\",transform:\"translate(462,57)\"})),_path187||(_path187=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.495 0.99 0.495 0.99 1 2 C0.0625 4.625 0.0625 4.625 -1 7 C0.65 5.68 2.3 4.36 4 3 C2.80100302 6.0831351 1.52299523 9.06279492 0 12 C-0.66 12 -1.32 12 -2 12 C-2.144375 12.7425 -2.28875 13.485 -2.4375 14.25 C-2.90187492 16.52027739 -3.41863569 18.75759479 -4 21 C-4.66 21 -5.32 21 -6 21 C-6.268125 21.763125 -6.53625 22.52625 -6.8125 23.3125 C-7.99092624 25.97946464 -8.99148055 26.99148055 -11 29 C-12.04622875 30.97620986 -13.05439935 32.9737129 -14 35 C-14.66 35 -15.32 35 -16 35 C-16.33 36.65 -16.66 38.3 -17 40 C-27.56 40 -38.12 40 -49 40 C-49 38 -49 38 -47.0625 36 C-46.39347656 35.35998047 -46.39347656 35.35998047 -45.7109375 34.70703125 C-41.96723198 30.971873 -38.5176562 26.94682558 -35 23 C-35 26.20395416 -35.74335022 28.09399739 -37 31 C-32.02350414 28.37351608 -28.80420129 25.41260386 -27 20 C-25.37109375 18.39453125 -25.37109375 18.39453125 -23.4375 16.8125 C-22.79683594 16.28269531 -22.15617187 15.75289062 -21.49609375 15.20703125 C-21.00238281 14.80871094 -20.50867188 14.41039062 -20 14 C-19.67 14.66 -19.34 15.32 -19 16 C-19.55429688 16.73605469 -20.10859375 17.47210937 -20.6796875 18.23046875 C-21.40414062 19.20628906 -22.12859375 20.18210937 -22.875 21.1875 C-23.59429687 22.15042969 -24.31359375 23.11335937 -25.0546875 24.10546875 C-26.81693872 26.72761363 -27.90345494 29.06106167 -29 32 C-29.66 32.99 -30.32 33.98 -31 35 C-30.319375 34.29875 -29.63875 33.5975 -28.9375 32.875 C-26.86634317 30.77433951 -24.68860363 28.95230478 -22.375 27.125 C-18.80672485 24.13977634 -17.48619988 21.37117611 -16 17 C-15.34 17 -14.68 17 -14 17 C-13.505 15.515 -13.505 15.515 -13 14 C-11.66666667 12.66666667 -10.33333333 11.33333333 -9 10 C-7.4506912 7.95994156 -5.94965909 5.89209368 -4.46484375 3.8046875 C-3 2 -3 2 0 0 Z \",fill:\"#644333\",transform:\"translate(93,586)\"})),_path188||(_path188=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3 0.66 3 1.32 3 2 C6.465 1.505 6.465 1.505 10 1 C10 1.99 10 2.98 10 4 C9.40832031 4.18175781 8.81664062 4.36351562 8.20703125 4.55078125 C3.20847507 6.12501041 3.20847507 6.12501041 -1.4375 8.5 C-4.6841118 10.40045569 -7.97000954 11.21719815 -11.59765625 12.15625 C-14.2294891 13.08060105 -15.77869624 14.32115366 -18 16 C-23.4536608 19.08053926 -29.17387076 21.28532959 -35.0625 23.375 C-45.91560378 27.30324262 -56.60612798 31.50577961 -67.1875 36.125 C-80.89725236 42.01396181 -80.89725236 42.01396181 -86 43 C-86.99 42.34 -87.98 41.68 -89 41 C-89 40.01 -89 39.02 -89 38 C-83.02658924 35.26713757 -77.04980411 32.55953251 -71 30 C-70.39285156 29.72027344 -69.78570312 29.44054687 -69.16015625 29.15234375 C-65.7806866 27.61622118 -63.79314238 27 -60 27 C-60 26.34 -60 25.68 -60 25 C-46.3040802 19.05612469 -46.3040802 19.05612469 -41.9375 17.5 C-38.32873445 16.2011555 -34.90551002 14.572982 -31.4375 12.9375 C-25.50309344 10.16948398 -20.62371926 8 -14 8 C-14 7.34 -14 6.68 -14 6 C-12.60974609 5.47599609 -12.60974609 5.47599609 -11.19140625 4.94140625 C-9.99386719 4.48636719 -8.79632812 4.03132812 -7.5625 3.5625 C-6.36753906 3.11003906 -5.17257812 2.65757812 -3.94140625 2.19140625 C-1.15554277 1.2855174 -1.15554277 1.2855174 0 0 Z \",fill:\"#2E2220\",transform:\"translate(575,144)\"})),_path189||(_path189=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-2.92551421 1.9503428 -4.76899153 2.5622914 -8.125 3.375 C-12.54986043 4.53057379 -16.5223912 6.00791619 -20.65234375 7.94921875 C-24.99910171 9.89477265 -29.50944636 11.42201106 -34 13 C-33.24332031 12.84660156 -32.48664063 12.69320312 -31.70703125 12.53515625 C-28.81320521 11.96307231 -25.91135098 11.47394086 -23 11 C-23 11.66 -23 12.32 -23 13 C-24.65 13.66 -26.3 14.32 -28 15 C-27.01 15.66 -26.02 16.32 -25 17 C-26.47778411 17.46277164 -27.95733215 17.91991034 -29.4375 18.375 C-30.26121094 18.63023437 -31.08492188 18.88546875 -31.93359375 19.1484375 C-39.27537225 21.18730083 -46.78629171 22.60752919 -54.25 24.125 C-55.12140625 24.30675781 -55.9928125 24.48851562 -56.890625 24.67578125 C-60.97750732 25.50437172 -64.80456915 26.26004737 -69 26 C-68.67 25.34 -68.34 24.68 -68 24 C-66.35 24 -64.7 24 -63 24 C-63 23.34 -63 22.68 -63 22 C-63.94653442 22.2131636 -64.89306885 22.42632721 -65.86828613 22.64595032 C-76.33476148 24.87771064 -86.29494033 25.40126127 -96.96875 25.29296875 C-98.62739676 25.28735424 -100.28604858 25.28309296 -101.94470215 25.28010559 C-106.25187596 25.26880244 -110.55873276 25.2394658 -114.86578369 25.20599365 C-119.28417679 25.17497409 -123.70262251 25.16153305 -128.12109375 25.14648438 C-136.74753923 25.11457772 -145.37372988 25.06356411 -154 25 C-154 24.67 -154 24.34 -154 24 C-131.56 23.67 -109.12 23.34 -86 23 C-85.67 22.34 -85.34 21.68 -85 21 C-85.66 20.67 -86.32 20.34 -87 20 C-86.00033203 19.85304687 -86.00033203 19.85304687 -84.98046875 19.703125 C-77.92097975 18.5578093 -71.64764266 16.58693641 -65 14 C-61.67190319 12.71504795 -58.33717805 11.44865015 -55 10.1875 C-54.16210938 9.86112549 -53.32421875 9.53475098 -52.4609375 9.19848633 C-51.66945313 8.89966553 -50.87796875 8.60084473 -50.0625 8.29296875 C-49.35222656 8.0199292 -48.64195312 7.74688965 -47.91015625 7.46557617 C-46 7 -46 7 -43 8 C-40.36195411 7.60602665 -40.36195411 7.60602665 -38 7 C-40.3024119 9.60045875 -42.49896677 10.84739183 -45.6875 12.1875 C-46.49574219 12.53167969 -47.30398438 12.87585938 -48.13671875 13.23046875 C-48.75160156 13.48441406 -49.36648438 13.73835937 -50 14 C-43.43778951 12.65441542 -37.20775372 10.85864577 -30.875 8.6875 C-29.50891602 8.22718384 -29.50891602 8.22718384 -28.11523438 7.75756836 C-23.89544651 6.33453905 -19.68282956 4.89216259 -15.4765625 3.4296875 C-14.79867676 3.19677002 -14.12079102 2.96385254 -13.42236328 2.72387695 C-11.62311541 2.10485708 -9.82705553 1.47659265 -8.03125 0.84765625 C-5.17631726 0.04930521 -2.94174469 -0.18111488 0 0 Z \",fill:\"#493A2F\",transform:\"translate(431,220)\"})),_path190||(_path190=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3.33 3.31 3.66 5.62 4 8 C4.99 8 5.98 8 7 8 C9 10 9 10 9.1953125 12.3828125 C9.13020833 14.921875 9.06510417 17.4609375 9 20 C14.94 19.67 20.88 19.34 27 19 C22.71 18.67 18.42 18.34 14 18 C15.08200139 12.58999306 15.78439176 11.41530291 19.8359375 8.1640625 C25.41844581 5.16119702 32.07019084 7.01169847 38 8 C35.69 11.96 33.38 15.92 31 20 C33.97 19.67 36.94 19.34 40 19 C40 19.66 40 20.32 40 21 C38.68 21 37.36 21 36 21 C36 21.99 36 22.98 36 24 C32.0523573 25.3158809 28.28910644 25.12300273 24.17578125 25.09765625 C23.31438034 25.0962413 22.45297943 25.09482635 21.56547546 25.09336853 C18.81444831 25.0877714 16.06350256 25.07521946 13.3125 25.0625 C11.4472668 25.05748463 9.58203233 25.05292179 7.71679688 25.04882812 C3.14449989 25.03780292 -1.42773625 25.02054027 -6 25 C-6 24.34 -6 23.68 -6 23 C-7.32 23 -8.64 23 -10 23 C-10 23.66 -10 24.32 -10 25 C-12.64 25 -15.28 25 -18 25 C-18 24.34 -18 23.68 -18 23 C-17.34 23 -16.68 23 -16 23 C-16.02320313 22.38511719 -16.04640625 21.77023437 -16.0703125 21.13671875 C-16.08835938 20.32847656 -16.10640625 19.52023437 -16.125 18.6875 C-16.14820313 17.88699219 -16.17140625 17.08648437 -16.1953125 16.26171875 C-16 14 -16 14 -14 11 C-14 12.98 -14 14.96 -14 17 C-13.16855469 16.97679687 -12.33710937 16.95359375 -11.48046875 16.9296875 C-9.85044922 16.90261719 -9.85044922 16.90261719 -8.1875 16.875 C-7.10855469 16.85179687 -6.02960938 16.82859375 -4.91796875 16.8046875 C-2 17 -2 17 1 19 C2.43360753 16.13278494 1.28839253 14.26375121 0.48046875 11.30859375 C-0.30249913 7.54652857 -0.1592924 3.82301748 0 0 Z \",fill:\"#070403\",transform:\"translate(80,383)\"})),_path191||(_path191=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 5.28 2 10.56 2 16 C1.34 16 0.68 16 0 16 C0.495 18.97 0.495 18.97 1 22 C-2.4019487 24.09350689 -5.05272412 24.17942163 -9 24 C-7.88873341 25.33901792 -7.88873341 25.33901792 -5.05859375 25.09765625 C-3.86363281 25.08605469 -2.66867187 25.07445312 -1.4375 25.0625 C-0.23996094 25.05347656 0.95757812 25.04445313 2.19140625 25.03515625 C3.58166016 25.01775391 3.58166016 25.01775391 5 25 C5 25.66 5 26.32 5 27 C-1.63617496 29.84407498 -9.95190127 32.39935276 -17 30 C-23.28379673 26.72054041 -29.01153985 22.65912801 -34.67578125 18.41796875 C-37.15598887 16.90483368 -39.13990931 16.38978227 -42 16 C-42.09410156 15.38640625 -42.18820312 14.7728125 -42.28515625 14.140625 C-43.17888054 11.46433588 -43.95452533 11.00897307 -46.4375 9.75 C-51.25561996 7.51145425 -55.7846159 7.61525855 -61 8 C-61 7.67 -61 7.34 -61 7 C-58.36 6.67 -55.72 6.34 -53 6 C-53.33 5.34 -53.66 4.68 -54 4 C-49.36626752 5.40995835 -45.15679185 7.32952253 -40.875 9.5625 C-34.39511275 12.94002085 -30.11044771 14.13065229 -22.75 14.0625 C-21.48671875 14.05347656 -20.2234375 14.04445313 -18.921875 14.03515625 C-17.47554688 14.01775391 -17.47554688 14.01775391 -16 14 C-16 13.34 -16 12.68 -16 12 C-14.02 12 -12.04 12 -10 12 C-9.773125 11.4225 -9.54625 10.845 -9.3125 10.25 C-7.66511725 7.42591529 -5.56545162 6.0023037 -3 4 C-2.443125 3.2575 -1.88625 2.515 -1.3125 1.75 C-0.879375 1.1725 -0.44625 0.595 0 0 Z \",fill:\"#8E7966\",transform:\"translate(412,391)\"})),_path192||(_path192=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C9.89613084 -0.21105492 19.2648233 -0.10084738 29 2 C29.7013076 8.59229145 27.49602186 12.49376557 24 18 C23.01 18 22.02 18 21 18 C21 18.99 21 19.98 21 21 C21.804375 21.2475 22.60875 21.495 23.4375 21.75 C27.74324143 23.26078647 31.85364007 25.10188856 36 27 C35.0409375 27.4640625 35.0409375 27.4640625 34.0625 27.9375 C32.06389179 28.8345163 32.06389179 28.8345163 31 30 C31 30.33 31 30.66 31 31 C25.84598532 31.59699012 21.13905304 31.85473919 16 31 C12.58996142 28.22081856 10.97173047 24.87827977 9 21 C7.93331876 19.46744127 6.8506269 17.9458652 5.75 16.4375 C2.42492187 11.43210164 0 6.0759393 0 0 Z \",fill:\"#4C4A3F\",transform:\"translate(515,327)\"})),_path193||(_path193=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.01771484 0.00451172 2.03542969 0.00902344 3.08398438 0.01367188 C5.57684858 0.02537546 8.0696822 0.04330808 10.5625 0.0625 C10.5625 6.3325 10.5625 12.6025 10.5625 19.0625 C-0.95904389 20.73836093 -11.78949116 21.24450014 -23.4375 21.0625 C-23.4375 14.4625 -23.4375 7.8625 -23.4375 1.0625 C-23.1075 1.0625 -22.7775 1.0625 -22.4375 1.0625 C-22.4375 7.0025 -22.4375 12.9425 -22.4375 19.0625 C-21.4475 19.0625 -20.4575 19.0625 -19.4375 19.0625 C-19.44910156 18.09828125 -19.46070312 17.1340625 -19.47265625 16.140625 C-19.48167969 14.87734375 -19.49070312 13.6140625 -19.5 12.3125 C-19.51160156 11.05953125 -19.52320312 9.8065625 -19.53515625 8.515625 C-19.45771027 5.77713499 -19.26530815 3.64369707 -18.4375 1.0625 C-12.2698971 -0.03607724 -6.25334877 -0.05289104 0 0 Z \",fill:\"#CD8746\",transform:\"translate(123.4375,268.9375)\"})),_path194||(_path194=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.94875 0.165 1.8975 0.33 2.875 0.5 C5.98545139 0.95518801 8.98277623 1.03763142 12.125 1 C15.5528335 0.96874316 18.69518513 0.96724535 22 2 C22.66 2.66 23.32 3.32 24 4 C24.33 3.01 24.66 2.02 25 1 C25.66 1 26.32 1 27 1 C27 1.66 27 2.32 27 3 C27.99 2.67 28.98 2.34 30 2 C32.00875442 2.27571139 34.01178687 2.60235737 36 3 C36 3.66 36 4.32 36 5 C40.65499974 5.81462495 45.30976546 6.43393721 50 7 C46.81171722 8.88935276 44.64828967 9 41 9 C40.34 9.66 39.68 10.32 39 11 C39.495 11.99 39.495 11.99 40 13 C40.99 13.33 41.98 13.66 43 14 C43.66 17.63 44.32 21.26 45 25 C46.32 25.33 47.64 25.66 49 26 C49 26.66 49 27.32 49 28 C49.66 27.67 50.32 27.34 51 27 C50.505 23.535 50.505 23.535 50 20 C50.99 19.67 51.98 19.34 53 19 C53.66 22.3 54.32 25.6 55 29 C50.38 29 45.76 29 41 29 C41.33 27.35 41.66 25.7 42 24 C41.91635155 21.78184754 41.91635155 21.78184754 41.5625 19.6875 C41.2840625 17.8621875 41.2840625 17.8621875 41 16 C40.01 15.67 39.02 15.34 38 15 C37.67 15.66 37.34 16.32 37 17 C35.93453047 13.8035914 35.92572162 11.34252724 36 8 C35.34 7.67 34.68 7.34 34 7 C34 6.34 34 5.68 34 5 C33.34 5 32.68 5 32 5 C31.67 5.66 31.34 6.32 31 7 C31.495 8.485 31.495 8.485 32 10 C31.72230092 12.3406065 31.39460023 14.67624308 31 17 C29.68 16.67 28.36 16.34 27 16 C26.67 14.68 26.34 13.36 26 12 C26.99 12 27.98 12 29 12 C29.33 11.01 29.66 10.02 30 9 C29.01 9 28.02 9 27 9 C27 7.68 27 6.36 27 5 C25.205625 5.2784375 25.205625 5.2784375 23.375 5.5625 C19.71716293 6.0311197 16.62137834 5.81481013 13 5 C13 7.31 13 9.62 13 12 C12.01 12.495 12.01 12.495 11 13 C11 12.34 11 11.68 11 11 C10.34 11 9.68 11 9 11 C9.66 12.65 10.32 14.3 11 16 C14.13367555 12.22256121 14.13367555 12.22256121 14.75 7.625 C14.5025 7.08875 14.255 6.5525 14 6 C14.99 6.99 15.98 7.98 17 9 C17.66 8.67 18.32 8.34 19 8 C19.66 8.33 20.32 8.66 21 9 C19.68 14.61 18.36 20.22 17 26 C17.66 26 18.32 26 19 26 C19 25.01 19 24.02 19 23 C19.99 23 20.98 23 22 23 C22.66 24.98 23.32 26.96 24 29 C22.02 29 20.04 29 18 29 C18 28.34 18 27.68 18 27 C17.34 27 16.68 27 16 27 C16 27.99 16 28.98 16 30 C15.01 30 14.02 30 13 30 C12.67 27.03 12.34 24.06 12 21 C12.99 21 13.98 21 15 21 C15 20.34 15 19.68 15 19 C15 17.68 15 16.36 15 15 C14.67 15.99 14.34 16.98 14 18 C11.4375 19.6875 11.4375 19.6875 9 21 C8.67 19.68 8.34 18.36 8 17 C7.72570375 22.39449293 7.63944354 25.51925805 11 30 C7.37 30 3.74 30 0 30 C1.32 29.67 2.64 29.34 4 29 C3.34 28.01 2.68 27.02 2 26 C1.63296326 21.7790775 2.20114028 18.82257691 4 15 C3.34 15 2.68 15 2 15 C1.67 14.01 1.34 13.02 1 12 C0.67 12.66 0.34 13.32 0 14 C-0.66 14 -1.32 14 -2 14 C-2.33 14.66 -2.66 15.32 -3 16 C-2.30058404 12.85262818 -1.23921302 9.97411124 0 7 C-0.66 7 -1.32 7 -2 7 C-2.33 5.68 -2.66 4.36 -3 3 C-2.01 3 -1.02 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#623B2E\",transform:\"translate(87,239)\"})),_path195||(_path195=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3.01030746 1.92850266 3.02061493 2.85700531 3.03123474 3.81364441 C3.12925371 12.56825457 3.23177446 21.32279798 3.33933926 30.07729626 C3.3944795 34.577955 3.44788511 39.07862033 3.49731445 43.5793457 C3.54508946 47.92360788 3.59743671 52.26779321 3.65294075 56.61196327 C3.67330488 58.26850785 3.69202758 59.92507346 3.70907402 61.5816555 C3.73325 63.90371664 3.76328591 66.22563416 3.79467773 68.54760742 C3.8004332 69.23093643 3.80618866 69.91426544 3.81211853 70.61830139 C3.8671945 74.20758895 4.27533803 77.49349367 5 81 C4.69595322 82.67225729 4.36871088 84.34080104 4 86 C4.33 86.33 4.66 86.66 5 87 C5.04080783 88.99958364 5.04254356 91.00045254 5 93 C1.37 93 -2.26 93 -6 93 C-6.0271045 89.95827281 -6.04688964 86.91679003 -6.0625 83.875 C-6.07087891 83.0190625 -6.07925781 82.163125 -6.08789062 81.28125 C-6.09111328 80.44335938 -6.09433594 79.60546875 -6.09765625 78.7421875 C-6.10289307 77.9776123 -6.10812988 77.21303711 -6.11352539 76.42529297 C-5.97943102 73.56057574 -5.47615264 70.82747454 -5 68 C-4.80516968 65.79006269 -4.64052506 63.5773351 -4.5 61.36328125 C-4.41806396 60.07615234 -4.33612793 58.78902344 -4.25170898 57.46289062 C-4.16755867 56.0794421 -4.08366124 54.69597818 -4 53.3125 C-3.95642365 52.61068604 -3.91284729 51.90887207 -3.86795044 51.18579102 C-3.17648085 40.02225261 -2.66419267 28.86195625 -2.34179688 17.6809082 C-1.85613888 1.85613888 -1.85613888 1.85613888 0 0 Z \",fill:\"#ECC19A\",transform:\"translate(292,533)\"})),_path196||(_path196=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.08703739 0.54515672 13.32796106 2.60918605 20 5 C20 5.66 20 6.32 20 7 C20.804375 7.22042969 20.804375 7.22042969 21.625 7.4453125 C32.26143305 10.48929169 42.7202309 14.38025521 52.77734375 18.9921875 C55.60242505 20.27315582 58.45380563 21.4834771 61.3125 22.6875 C62.29863281 23.10386719 63.28476562 23.52023437 64.30078125 23.94921875 C67.17202978 25.13220542 67.17202978 25.13220542 71 26 C71 30.29 71 34.58 71 39 C66.49297245 38.0202114 63.10674362 36.57684909 59.1875 34.125 C55.08188042 31.55976417 51.04331409 29.7077714 46.5234375 28.00390625 C42.20976484 26.2877857 38.12249418 24.1263391 34 22 C33.28585937 21.70351563 32.57171875 21.40703125 31.8359375 21.1015625 C30 20 30 20 29.1171875 18.02734375 C27.4501441 15.00218458 25.3355708 14.67503593 22.125 13.5625 C20.95839844 13.14226562 19.79179688 12.72203125 18.58984375 12.2890625 C16.81287109 11.65097656 16.81287109 11.65097656 15 11 C8.17411717 8.28936061 1.51844349 5.38457643 -5 2 C-1.28731738 0.76243913 -0.30534179 1.43498726 3.25 2.875 C7.76887976 4.70042318 10.92995234 5.27570748 16 6 C10.72 4.35 5.44 2.7 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#87563E\",transform:\"translate(555,422)\"})),_path197||(_path197=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.6 0 13.2 0 20 0 C20 0.66 20 1.32 20 2 C23.96 2 27.92 2 32 2 C32 1.34 32 0.68 32 0 C32.66 0 33.32 0 34 0 C34 2.97 34 5.94 34 9 C34.99 9 35.98 9 37 9 C37.21432579 15.64409958 36.51233701 21.53205867 35 28 C36.32 28.33 37.64 28.66 39 29 C39.20496094 28.44570313 39.40992188 27.89140625 39.62109375 27.3203125 C39.89050781 26.59585937 40.15992188 25.87140625 40.4375 25.125 C40.70433594 24.40570313 40.97117188 23.68640625 41.24609375 22.9453125 C42 21 42 21 43 19 C50.59 19 58.18 19 66 19 C66 19.33 66 19.66 66 20 C64.46279297 20.07347656 64.46279297 20.07347656 62.89453125 20.1484375 C61.5338294 20.22351071 60.17315356 20.29905655 58.8125 20.375 C58.13896484 20.4059375 57.46542969 20.436875 56.77148438 20.46875 C52.8279865 20.6995889 49.46451445 21.03656402 46 23 C43.46127498 26.31402428 43.79403815 29.70190748 43.875 33.75 C43.89304688 34.92046875 43.91109375 36.0909375 43.9296875 37.296875 C43.95289063 38.18890625 43.97609375 39.0809375 44 40 C41.9377952 40.054348 39.87517184 40.09294961 37.8125 40.125 C36.66394531 40.14820313 35.51539063 40.17140625 34.33203125 40.1953125 C30.30590443 39.95931445 27.43916429 39.30768508 24.41796875 36.5625 C21 32.22222222 21 32.22222222 21 30 C23.52475462 28.73762269 25.31200466 28.90143596 28.125 28.9375 C29.73375 28.958125 31.3425 28.97875 33 29 C32.67 22.73 32.34 16.46 32 10 C17.15 9.505 17.15 9.505 2 9 C0 5 0 5 0 0 Z \",fill:\"#6E1D17\",transform:\"translate(169,277)\"})),_path198||(_path198=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.875 0.875 3.875 0.875 5 2 C5.04063832 3.66617115 5.042721 5.33388095 5 7 C5.88042969 7.03738281 6.76085937 7.07476562 7.66796875 7.11328125 C8.82941406 7.17902344 9.99085938 7.24476563 11.1875 7.3125 C12.33605469 7.37050781 13.48460937 7.42851562 14.66796875 7.48828125 C18.23914124 8.03672626 20.16355615 8.78777355 23 11 C25.74059604 15.19334752 27.65326421 19.93720238 27 25 C27.66 25.33 28.32 25.66 29 26 C28.505 28.475 28.505 28.475 28 31 C27.505 29.515 27.505 29.515 27 28 C26.46375 28.02320313 25.9275 28.04640625 25.375 28.0703125 C17.13802201 28.25997976 9.13780076 27.13081102 1 26 C1 25.34 1 24.68 1 24 C0.01 23.67 -0.98 23.34 -2 23 C-3.1328125 20.890625 -3.1328125 20.890625 -4.125 18.25 C-4.45757812 17.38890625 -4.79015625 16.5278125 -5.1328125 15.640625 C-5.96617277 13.10300543 -6.53680766 10.62790754 -7 8 C-7.66 8 -8.32 8 -9 8 C-9 7.34 -9 6.68 -9 6 C-5.37 6 -1.74 6 2 6 C1.34 4.02 0.68 2.04 0 0 Z \",fill:\"#BEB173\",transform:\"translate(433,322)\"})),_path199||(_path199=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2 3.31 2 5.62 2 8 C-1.96 8 -5.92 8 -10 8 C-10 8.66 -10 9.32 -10 10 C-9.34 10 -8.68 10 -8 10 C-7.67 10.66 -7.34 11.32 -7 12 C-5.515 12.495 -5.515 12.495 -4 13 C-4 13.99 -4 14.98 -4 16 C-3.46375 16.0825 -2.9275 16.165 -2.375 16.25 C0.87340691 17.27581271 3.28751859 18.96563894 6 21 C6 21.66 6 22.32 6 23 C8.31 23.66 10.62 24.32 13 25 C13.33 24.34 13.66 23.68 14 23 C14 24.98 14 26.96 14 29 C9.05835538 28.10151916 4.21675853 26.9094394 -0.4375 25 C-3.89432156 23.65099647 -7.38986239 22.85664282 -11 22 C-11 21.01 -11 20.02 -11 19 C-11.99 18.67 -12.98 18.34 -14 18 C-14.495 13.05 -14.495 13.05 -15 8 C-16.98 8.33 -18.96 8.66 -21 9 C-21.99 15.93 -22.98 22.86 -24 30 C-33 29 -33 29 -38 27 C-38 21.72 -38 16.44 -38 11 C-35.69 11.33 -33.38 11.66 -31 12 C-31 11.34 -31 10.68 -31 10 C-30.01 10 -29.02 10 -28 10 C-28 9.34 -28 8.68 -28 8 C-28.66 8 -29.32 8 -30 8 C-29.67 6.02 -29.34 4.04 -29 2 C-26.4973375 2.46345602 -25.04625889 2.96458304 -23 4.53125 C-18.59094191 6.68985136 -14.52297747 6.32077464 -9.6875 6.1875 C-8.29047852 6.16719727 -8.29047852 6.16719727 -6.86523438 6.14648438 C-4.57622354 6.11126882 -2.28841542 6.06202099 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#9B674B\",transform:\"translate(390,300)\"})),_path200||(_path200=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.14427102 -0.04976954 8.28837953 -0.08589288 12.43286133 -0.10986328 C13.84011876 -0.11986557 15.2473557 -0.13347178 16.65454102 -0.15087891 C18.68771448 -0.17538366 20.72061106 -0.18654083 22.75390625 -0.1953125 C23.97408447 -0.20578613 25.1942627 -0.21625977 26.45141602 -0.22705078 C30.94617434 0.06053953 35.23188158 0.7052926 38.92578125 3.41015625 C43.80729694 9.22672283 45.49021179 15.40171723 45 23 C44.505 22.01 44.505 22.01 44 21 C43.34 21 42.68 21 42 21 C41.896875 22.216875 41.79375 23.43375 41.6875 24.6875 C41.27726653 28.43738055 40.55199451 31.97040906 39.625 35.625 C37.20720832 45.59392433 36.21620717 55.82844104 35 66 C34.67 66 34.34 66 34 66 C33.7827615 54.54317557 33.89138886 43.4043173 35.5625 32.0546875 C36.07088789 29.01936033 36.07088789 29.01936033 36 26 C35.731875 27.134375 35.46375 28.26875 35.1875 29.4375 C34.795625 30.613125 34.40375 31.78875 34 33 C33.01 33.33 32.02 33.66 31 34 C30.80664062 33.21753906 30.61328125 32.43507813 30.4140625 31.62890625 C30.02347656 30.11103516 30.02347656 30.11103516 29.625 28.5625 C29.24214844 27.04849609 29.24214844 27.04849609 28.8515625 25.50390625 C28.27426046 22.84429676 28.27426046 22.84429676 26 22 C22.46731978 15.42861603 22.97681229 9.97199219 25 3 C19.71566323 1.96912119 14.48895352 1.68388642 9.125 1.4375 C8.24585938 1.39431641 7.36671875 1.35113281 6.4609375 1.30664062 C4.30744203 1.20130661 2.15373936 1.10022351 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#E8BF45\",transform:\"translate(165,375)\"})),_path201||(_path201=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.58694802 -0.24856408 12.55597352 0.68452977 19 2 C19.96550781 2.19078125 20.93101562 2.3815625 21.92578125 2.578125 C24.28528478 3.04535342 26.64318339 3.51943436 29 4 C29 4.33 29 4.66 29 5 C24.05 4.67 19.1 4.34 14 4 C15.81115956 5.81115956 18.61278227 5.38199448 21.0625 5.5625 C22.16722656 5.64628906 23.27195312 5.73007812 24.41015625 5.81640625 C25.26480469 5.87699219 26.11945312 5.93757813 27 6 C23.375 9 23.375 9 20 9 C23.71784836 10.20201112 27.18138604 10.02981191 31.0625 9.9375 C37.57507433 9.84183236 43.6575792 10.52317853 50 12 C50 11.34 50 10.68 50 10 C48.906875 10.04125 47.81375 10.0825 46.6875 10.125 C43 10 43 10 40 8 C38.34450469 7.61500109 36.6777567 7.27206865 35 7 C35 6.67 35 6.34 35 6 C41.50967563 5.77051672 47.4293818 6.65309034 53.8125 7.875 C62.21018074 9.41842716 70.55679529 10.62849986 79.05981445 11.40380859 C82.49934148 11.71881573 85.6360097 12.15900243 89 13 C89 16.3 89 19.6 89 23 C82.10435099 22.50745364 75.32151408 21.66020705 68.5 20.5625 C67.71061035 20.44028076 66.9212207 20.31806152 66.10791016 20.19213867 C62.47901037 19.5899307 60.09994733 19.06663155 57 17 C54.83927306 16.7967058 52.66940329 16.68630922 50.5 16.625 C42.72405601 16.27076468 35.39417187 14.74635969 27.81640625 13.046875 C22.38912392 11.83518217 16.92252214 10.90358603 11.43017578 10.03955078 C7.9673561 9.4673736 5.02915981 8.81284756 2 7 C3.32 6.67 4.64 6.34 6 6 C5.34 5.34 4.68 4.68 4 4 C4.66 3.67 5.32 3.34 6 3 C4.02 2.34 2.04 1.68 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#925E47\",transform:\"translate(537,309)\"})),_path202||(_path202=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.89747955 -0.00315216 1.79495911 -0.00630432 2.71963501 -0.009552 C3.68533417 -0.00752777 4.65103333 -0.00550354 5.64599609 -0.00341797 C6.6382016 -0.00437469 7.6304071 -0.00533142 8.65267944 -0.00631714 C10.74908512 -0.0069976 12.84549291 -0.00515266 14.94189453 -0.00097656 C18.16362188 0.00438486 21.38521053 -0.00093191 24.60693359 -0.00732422 C26.64078807 -0.00666364 28.67464246 -0.00538288 30.70849609 -0.00341797 C32.16311752 -0.00645432 32.16311752 -0.00645432 33.64712524 -0.009552 C34.53830048 -0.00639984 35.42947571 -0.00324768 36.34765625 0 C37.13580719 0.00079559 37.92395813 0.00159119 38.73599243 0.00241089 C40.54443359 0.12939453 40.54443359 0.12939453 41.54443359 1.12939453 C41.58536297 3.46236886 41.58685083 5.79644678 41.54443359 8.12939453 C36.91468368 9.90341085 32.58398517 10.52581074 27.66943359 10.75439453 C26.98107422 10.79306641 26.29271484 10.83173828 25.58349609 10.87158203 C23.90420114 10.9648762 22.22435593 11.04817691 20.54443359 11.12939453 C20.54443359 9.80939453 20.54443359 8.48939453 20.54443359 7.12939453 C19.88443359 8.44939453 19.22443359 9.76939453 18.54443359 11.12939453 C18.04943359 9.14939453 18.04943359 9.14939453 17.54443359 7.12939453 C16.55443359 9.43939453 15.56443359 11.74939453 14.54443359 14.12939453 C5.96443359 14.12939453 -2.61556641 14.12939453 -11.45556641 14.12939453 C-9.50340206 10.22506584 -7.58170033 8.09099509 -4.45556641 5.12939453 C-5.22642578 5.76748047 -5.99728516 6.40556641 -6.79150391 7.06298828 C-7.79439453 7.88927734 -8.79728516 8.71556641 -9.83056641 9.56689453 C-11.32716797 10.80246094 -11.32716797 10.80246094 -12.85400391 12.06298828 C-15.45556641 14.12939453 -15.45556641 14.12939453 -17.45556641 15.12939453 C-16.03182288 11.42766136 -13.64331847 9.26538016 -10.84228516 6.58642578 C-9.26116562 4.9251368 -8.44391838 3.18212556 -7.45556641 1.12939453 C-4.63706846 0.18989522 -2.9165025 0.00293811 0 0 Z \",fill:\"#D98576\",transform:\"translate(228.45556640625,349.87060546875)\"})),_path203||(_path203=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.0619557 -0.17456339 8.12294587 -0.2809442 12.1875 -0.375 C13.33798828 -0.42527344 14.48847656 -0.47554688 15.67382812 -0.52734375 C23.97261119 -0.67167041 23.97261119 -0.67167041 26.84179688 1.20410156 C36.49089369 12.39506437 37.5751413 29.98359362 37 44 C34.56198667 40.05677844 34.10550869 35.74486471 33.375 31.25 C33.17390625 30.06083984 33.17390625 30.06083984 32.96875 28.84765625 C32.64012702 26.89939142 32.31929295 24.94981561 32 23 C31.34 23.99 30.68 24.98 30 26 C30 25.01 30 24.02 30 23 C25.45158795 20.35054998 20.42406058 19.82649428 15.3125 18.87890625 C12.08104626 18.02150402 10.51761724 17.09801437 8 15 C5.35065178 14.28566879 5.35065178 14.28566879 3 14 C1.15976084 9.45352679 1.13361186 6.76513477 2 2 C1.34 1.34 0.68 0.68 0 0 Z \",fill:\"#CCAF6D\",transform:\"translate(442,375)\"})),_path204||(_path204=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.16337891 0.09345703 2.32675781 0.18691406 3.52539062 0.28320312 C4.74033203 0.38697266 5.95527344 0.49074219 7.20703125 0.59765625 C8.43357422 0.69755859 9.66011719 0.79746094 10.92382812 0.90039062 C13.95622342 1.1481739 16.98803418 1.40165159 20.01953125 1.66015625 C19.35953125 2.32015625 18.69953125 2.98015625 18.01953125 3.66015625 C17.02953125 3.33015625 16.03953125 3.00015625 15.01953125 2.66015625 C15.01953125 5.96015625 15.01953125 9.26015625 15.01953125 12.66015625 C14.02953125 12.66015625 13.03953125 12.66015625 12.01953125 12.66015625 C12.01953125 13.32015625 12.01953125 13.98015625 12.01953125 14.66015625 C11.01792969 14.6859375 10.01632813 14.71171875 8.984375 14.73828125 C-1.15293199 15.0589258 -1.15293199 15.0589258 -9.98046875 19.66015625 C-10.54894531 20.37042969 -11.11742188 21.08070313 -11.703125 21.8125 C-13.98046875 23.66015625 -13.98046875 23.66015625 -17.43359375 23.83203125 C-20.94921875 23.44140625 -24.46484375 23.05078125 -27.98046875 22.66015625 C-25.67046875 18.04015625 -23.36046875 13.42015625 -20.98046875 8.66015625 C-19.99046875 8.66015625 -19.00046875 8.66015625 -17.98046875 8.66015625 C-17.98046875 8.00015625 -17.98046875 7.34015625 -17.98046875 6.66015625 C-17.05234375 6.22703125 -16.12421875 5.79390625 -15.16796875 5.34765625 C-12.44644182 3.90684787 -11.03777984 2.81543454 -8.98046875 0.66015625 C-5.60891966 -0.46369345 -3.52673821 -0.29246122 0 0 Z \",fill:\"#060203\",transform:\"translate(133.98046875,365.33984375)\"})),_path205||(_path205=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 2.64 1 5.28 1 8 C2.03290161 7.75552124 2.03290161 7.75552124 3.08666992 7.50610352 C6.32016127 6.9443816 9.33156909 6.88735876 12.61328125 6.90234375 C13.86044922 6.90556641 15.10761719 6.90878906 16.39257812 6.91210938 C17.68615234 6.92048828 18.97972656 6.92886719 20.3125 6.9375 C22.28186523 6.94426758 22.28186523 6.94426758 24.29101562 6.95117188 C27.5273901 6.96294051 30.76367178 6.9793824 34 7 C34.495 7.99 34.495 7.99 35 9 C33.02 9 31.04 9 29 9 C29 9.99 29 10.98 29 12 C19.95971078 12.1723784 11.01134307 11.6331684 2 11 C1.67 13.31 1.34 15.62 1 18 C7.6 18 14.2 18 21 18 C21 18.99 21 19.98 21 21 C19.95199219 21.20496094 18.90398437 21.40992188 17.82421875 21.62109375 C16.44529231 21.89312686 15.06638717 22.16526791 13.6875 22.4375 C12.99720703 22.57220703 12.30691406 22.70691406 11.59570312 22.84570312 C8.65710993 23.42774332 5.84543315 24.05152228 3 25 C3 25.66 3 26.32 3 27 C4.02786621 26.98018066 5.05573242 26.96036133 6.11474609 26.93994141 C9.6098266 26.99396867 12.73011517 27.36338038 16.1640625 27.9609375 C25.53866152 29.36973624 34.91066635 29.45798235 44.375 29.625 C46.19012066 29.66328821 48.00522527 29.70234571 49.8203125 29.7421875 C54.21340741 29.83697376 58.60658655 29.9214207 63 30 C63 30.66 63 31.32 63 32 C22.17297641 32.61916858 22.17297641 32.61916858 3 29 C3 30.65 3 32.3 3 34 C4.03688965 33.99419922 5.0737793 33.98839844 6.14208984 33.98242188 C18.64308455 33.93534192 31.12850944 34.18600724 43.625 34.5 C45.61457851 34.54837585 47.60416184 34.59655398 49.59375 34.64453125 C54.39589169 34.76075122 59.19796105 34.87961284 64 35 C64 35.66 64 36.32 64 37 C58.04501516 37.05014237 52.09015826 37.08606363 46.13500977 37.10986328 C44.11708429 37.11980459 42.09917276 37.13336235 40.08129883 37.15087891 C27.55592185 37.25673593 15.39856581 36.84661706 3 35 C3.97782874 45.89416257 5.14844945 56.41124231 8 67 C7.34 67 6.68 67 6 67 C6 66.34 6 65.68 6 65 C5.34 65 4.68 65 4 65 C4 63.02 4 61.04 4 59 C3.34 59 2.68 59 2 59 C1.97494385 58.41508789 1.9498877 57.83017578 1.92407227 57.22753906 C1.80777038 54.56815529 1.68519933 51.90909597 1.5625 49.25 C1.50352539 47.86941406 1.50352539 47.86941406 1.44335938 46.4609375 C1.40146484 45.57148438 1.35957031 44.68203125 1.31640625 43.765625 C1.26141968 42.54020996 1.26141968 42.54020996 1.20532227 41.29003906 C1.07764608 39.05849493 1.07764608 39.05849493 0.48632812 37.20507812 C-0.26201405 33.81199253 -0.12160737 30.41003108 -0.09765625 26.953125 C-0.0962413 26.18192322 -0.09482635 25.41072144 -0.09336853 24.6161499 C-0.08778534 22.16072662 -0.07523595 19.70539558 -0.0625 17.25 C-0.05748283 15.58203257 -0.0529203 13.91406371 -0.04882812 12.24609375 C-0.03782141 8.16402713 -0.02056836 4.08202919 0 0 Z \",fill:\"#BCA18A\",transform:\"translate(336,397)\"})),_path206||(_path206=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C4.62 2 9.24 2 14 2 C14.495 2.99 14.495 2.99 15 4 C13.73542969 3.95359375 12.47085938 3.9071875 11.16796875 3.859375 C9.50783609 3.82185788 7.84767792 3.78545765 6.1875 3.75 C5.35412109 3.71648437 4.52074219 3.68296875 3.66210938 3.6484375 C2.45844727 3.62910156 2.45844727 3.62910156 1.23046875 3.609375 C0.12288208 3.5779541 0.12288208 3.5779541 -1.00708008 3.54589844 C-3.60810787 3.91260255 -3.60810787 3.91260255 -6 8 C0.27 7.67 6.54 7.34 13 7 C11.69442995 12.22228021 10.6208069 15.92181004 6 19 C-0.21000805 20.33051402 -6.68223977 20.10008333 -13 20 C-13 20.66 -13 21.32 -13 22 C-13.66 22 -14.32 22 -15 22 C-15 23.65 -15 25.3 -15 27 C-14.34 27.33 -13.68 27.66 -13 28 C-14.32 28 -15.64 28 -17 28 C-17 30.31 -17 32.62 -17 35 C-15.68 35 -14.36 35 -13 35 C-13 35.66 -13 36.32 -13 37 C-13.8353125 37.0928125 -13.8353125 37.0928125 -14.6875 37.1875 C-17.94987173 38.33373872 -19.68667874 40.49390197 -22 43 C-19.69 43.99 -17.38 44.98 -15 46 C-15 46.66 -15 47.32 -15 48 C-15.7425 48.28875 -16.485 48.5775 -17.25 48.875 C-19.56739797 49.82302644 -21.77917115 50.84845911 -24 52 C-23.67 52.99 -23.34 53.98 -23 55 C-23.99 55.495 -23.99 55.495 -25 56 C-25.65555119 58.52733235 -25.65555119 58.52733235 -26 61 C-25.01 61.33 -24.02 61.66 -23 62 C-24.58671308 64.38006962 -25.87846958 66.14366088 -28 68 C-28.66 68 -29.32 68 -30 68 C-30 67.01 -30 66.02 -30 65 C-30.99 65 -31.98 65 -33 65 C-33.66 62.03 -34.32 59.06 -35 56 C-29.5 52 -29.5 52 -25 52 C-24.67 50.68 -24.34 49.36 -24 48 C-23.01 48 -22.02 48 -21 48 C-21 47.34 -21 46.68 -21 46 C-22.32 46 -23.64 46 -25 46 C-24.4052039 41.42145325 -23.16773077 37.62195043 -21.375 33.375 C-18.40090735 26.22984552 -15.85906975 18.96839283 -13.44873047 11.61474609 C-13.17303223 10.79828613 -12.89733398 9.98182617 -12.61328125 9.140625 C-12.37391846 8.41391602 -12.13455566 7.68720703 -11.88793945 6.93847656 C-9.50631547 1.73911048 -5.49199997 0 0 0 Z \",fill:\"#444553\",transform:\"translate(117,326)\"})),_path207||(_path207=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.67542976 0.28604898 3.34385343 0.61781233 5 1 C5.33 2.65 5.66 4.3 6 6 C6.66 6 7.32 6 8 6 C8 7.98 8 9.96 8 12 C7.34 12 6.68 12 6 12 C6 12.66 6 13.32 6 14 C5.34 14 4.68 14 4 14 C4 14.66 4 15.32 4 16 C6.64 16 9.28 16 12 16 C12 16.66 12 17.32 12 18 C13.98 18 15.96 18 18 18 C18 18.66 18 19.32 18 20 C16.783125 19.855625 15.56625 19.71125 14.3125 19.5625 C8.2212315 18.88136774 2.11235086 18.44401931 -4 18 C-4 18.66 -4 19.32 -4 20 C-2.83984375 20.16435547 -2.83984375 20.16435547 -1.65625 20.33203125 C4.60651229 21.28539729 10.16421443 22.5310138 16 25 C16 25.33 16 25.66 16 26 C4.08394997 26.54072832 -7.26707812 24.89446549 -19 23 C-20.66732575 17.99802276 -21.3897403 13.2307974 -22 8 C-18.38026598 6.68373308 -15.90432869 6 -12 6 C-12 5.34 -12 4.68 -12 4 C-11.21753906 3.79503906 -10.43507813 3.59007812 -9.62890625 3.37890625 C-8.61699219 3.10949219 -7.60507812 2.84007812 -6.5625 2.5625 C-5.55316406 2.29566406 -4.54382813 2.02882813 -3.50390625 1.75390625 C-1.08247999 1.24021923 -1.08247999 1.24021923 0 0 Z \",fill:\"#681E17\",transform:\"translate(26,374)\"})),_path208||(_path208=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.72535458 0.09464032 11.45033991 0.20095603 17.17529297 0.31738281 C19.11664132 0.35530354 21.05805117 0.39021537 22.99951172 0.421875 C51.09066949 0.88547327 51.09066949 0.88547327 62.9453125 5.29296875 C65.02572281 6.00885139 67.02476264 6.42035531 69.1875 6.8125 C74.46366671 7.9151186 79.16243239 10.15585071 84.0703125 12.3359375 C90.88729477 15.29663614 97.97103735 17.60028152 105 20 C105 22.64 105 25.28 105 28 C100.60963342 27.71367175 97.46027728 26.87020983 93.5625 24.8125 C87.35251592 21.54359435 80.8350211 19.24646264 74.26171875 16.83984375 C70.15629881 15.31537866 66.07910944 13.71825025 62 12.125 C60.80600586 11.65924561 60.80600586 11.65924561 59.58789062 11.18408203 C57.72492934 10.45690231 55.86241298 9.72858286 54 9 C54 8.34 54 7.68 54 7 C53.34 6.87625 52.68 6.7525 52 6.625 C48.30301417 5.85479462 44.65994058 4.93049337 41 4 C44.63 5.32 48.26 6.64 52 8 C47.45660095 9.13584976 45.91125616 8.58296449 41.5625 7.125 C37.71630116 5.85036168 33.99374486 4.7017047 30 4 C30 4.33 30 4.66 30 5 C23.29481414 5.19818283 17.34823202 5.30844801 11 3 C11 3.66 11 4.32 11 5 C11.99 5.33 12.98 5.66 14 6 C8.54520815 5.43179252 4.08940744 4.05362055 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#A87151\",transform:\"translate(521,420)\"})),_path209||(_path209=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.475 0.99 2.475 0.99 5 2 C7.32700533 2.68842945 9.66148427 3.35174615 12 4 C15.29595593 4.94391226 18.58586933 5.90760863 21.875 6.875 C22.72191406 7.11863281 23.56882812 7.36226563 24.44140625 7.61328125 C30.18987329 9.31229218 35.58480792 11.43093975 41 14 C40.67 16.31 40.34 18.62 40 21 C19.15617838 23.10692415 19.15617838 23.10692415 12.265625 18.12890625 C11.84796875 17.75636719 11.4303125 17.38382812 11 17 C11.33 17.99 11.66 18.98 12 20 C11.34 20 10.68 20 10 20 C10 20.99 10 21.98 10 23 C10.66 23 11.32 23 12 23 C12 23.66 12 24.32 12 25 C11.01 25 10.02 25 9 25 C9 25.66 9 26.32 9 27 C6.69 26.67 4.38 26.34 2 26 C1.34 17.42 0.68 8.84 0 0 Z \",fill:\"#B67C5E\",transform:\"translate(350,285)\"})),_path210||(_path210=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C8.00022602 0.60247487 15.76276936 1.9979424 23.625 3.5625 C24.81996094 3.79646484 26.01492188 4.03042969 27.24609375 4.27148438 C30.16489275 4.84356898 33.0828012 5.41982075 36 6 C36 6.33 36 6.66 36 7 C29.45454545 8.96363636 29.45454545 8.96363636 25.875 9.25 C21.73121053 10.33098856 20.39352643 12.54268404 18 16 C15.90894678 19.86844846 15.60174022 23.69315447 15.24609375 28.01171875 C15 30 15 30 14 32 C12.515 32.495 12.515 32.495 11 33 C12.65 33.33 14.3 33.66 16 34 C16 34.66 16 35.32 16 36 C8.34167083 35.70544888 2.65738822 32.62827658 -4 29 C-4 28.01 -4 27.02 -4 26 C-3.01 26 -2.02 26 -1 26 C-0.71125 25.2575 -0.4225 24.515 -0.125 23.75 C1 21 1 21 2.0625 19.125 C3.37123644 16.15853073 3.63046254 13.20265802 4 10 C2.35 10 0.7 10 -1 10 C0.32 9.67 1.64 9.34 3 9 C2.690625 8.071875 2.38125 7.14375 2.0625 6.1875 C1.375 4.125 0.6875 2.0625 0 0 Z \",fill:\"#8F5F46\",transform:\"translate(540,319)\"})),_path211||(_path211=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.88566535 2.71153038 4.97577015 5.35519786 7 8.75 C10.65318853 14.6654475 14.79914656 20.13570907 19.08789062 25.60449219 C19.84682617 26.5891748 19.84682617 26.5891748 20.62109375 27.59375 C21.0792749 28.17833984 21.53745605 28.76292969 22.00952148 29.36523438 C23 31 23 31 23 34 C17.85714286 38 17.85714286 38 14 38 C12.26576658 37.69411946 10.53667265 37.35826964 8.8125 37 C7.46091797 36.7215625 7.46091797 36.7215625 6.08203125 36.4375 C5.39496094 36.293125 4.70789063 36.14875 4 36 C4 35.34 4 34.68 4 34 C5.32 34 6.64 34 8 34 C6.02 33.34 4.04 32.68 2 32 C2 31.01 2 30.02 2 29 C2.99 28.67 3.98 28.34 5 28 C2.69 27.34 0.38 26.68 -2 26 C-2 25.34 -2 24.68 -2 24 C-3.98 23.67 -5.96 23.34 -8 23 C-8 22.67 -8 22.34 -8 22 C-4.04 21.505 -4.04 21.505 0 21 C-2.31 20.67 -4.62 20.34 -7 20 C-6.67 19.01 -6.34 18.02 -6 17 C-6.66 16.67 -7.32 16.34 -8 16 C-8 15.34 -8 14.68 -8 14 C-9.65 13.67 -11.3 13.34 -13 13 C-13 11.02 -13 9.04 -13 7 C-3.58997722 6.81548975 -3.58997722 6.81548975 1 8 C0.67 5.36 0.34 2.72 0 0 Z \",fill:\"#EEEDCA\",transform:\"translate(528,354)\"})),_path212||(_path212=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.98613281 0.04640625 1.97226563 0.0928125 2.98828125 0.140625 C3.98214844 0.17671875 4.97601563 0.2128125 6 0.25 C6.75925781 0.29640625 7.51851562 0.3428125 8.30078125 0.390625 C8.30078125 3.77086017 7.42622503 6.22531437 6.30078125 9.390625 C5.64078125 9.390625 4.98078125 9.390625 4.30078125 9.390625 C3.86765625 10.7828125 3.86765625 10.7828125 3.42578125 12.203125 C2.30078125 15.390625 2.30078125 15.390625 0.30078125 18.390625 C-0.35921875 18.390625 -1.01921875 18.390625 -1.69921875 18.390625 C-1.78171875 19.256875 -1.86421875 20.123125 -1.94921875 21.015625 C-2.66770568 24.2488162 -3.68111492 25.93429781 -5.52685547 28.6015625 C-7.82595308 32.11005632 -9.6990472 35.86192147 -11.63671875 39.578125 C-12.07983398 40.42310547 -12.52294922 41.26808594 -12.97949219 42.13867188 C-15.67780531 47.32054659 -18.20082899 52.54287469 -20.546875 57.89453125 C-22.30038255 61.69280692 -24.32902007 65.32897618 -26.3671875 68.98046875 C-27.71332358 71.32929347 -27.71332358 71.32929347 -28.6875 73.64453125 C-29.69921875 75.390625 -29.69921875 75.390625 -32.69921875 76.390625 C-33.603896 70.6610024 -31.13684217 67.35269175 -28.109375 62.7578125 C-26.80615137 60.57012962 -26.15143299 58.87494122 -25.69921875 56.390625 C-25.03921875 56.390625 -24.37921875 56.390625 -23.69921875 56.390625 C-23.78171875 55.66875 -23.86421875 54.946875 -23.94921875 54.203125 C-23.69921875 51.390625 -23.69921875 51.390625 -21.88671875 49.234375 C-19.18292451 45.71944249 -17.90361749 42.22983976 -16.44921875 38.078125 C-16.18109375 37.33755859 -15.91296875 36.59699219 -15.63671875 35.83398438 C-14.98228827 34.02261429 -14.33954869 32.2070276 -13.69921875 30.390625 C-15.34921875 31.050625 -16.99921875 31.710625 -18.69921875 32.390625 C-17.28784612 24.93051252 -17.28784612 24.93051252 -14.859375 22.703125 C-11.96824399 19.60809867 -10.70574677 16.28322486 -9.13671875 12.390625 C-4.33101555 0.62677504 -4.33101555 0.62677504 0 0 Z \",fill:\"#78503C\",transform:\"translate(168.69921875,519.609375)\"})),_path213||(_path213=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.495 1.98 0.495 1.98 1 4 C-3.625 8 -3.625 8 -7 8 C-7.33 8.99 -7.66 9.98 -8 11 C-10.37109375 12.76171875 -10.37109375 12.76171875 -13.4375 14.6875 C-17.35337677 17.21995082 -21.09204005 19.780646 -24.6875 22.75 C-29.31748639 26.53885957 -34.12518019 30.03621857 -39 33.5 C-39.75498779 34.04108398 -40.50997559 34.58216797 -41.2878418 35.13964844 C-41.997229 35.64012695 -42.70661621 36.14060547 -43.4375 36.65625 C-44.07558594 37.10806641 -44.71367188 37.55988281 -45.37109375 38.02539062 C-47 39 -47 39 -49 39 C-49 39.66 -49 40.32 -49 41 C-52 43 -52 43 -55 43 C-55 43.66 -55 44.32 -55 45 C-55.66 45 -56.32 45 -57 45 C-57 45.66 -57 46.32 -57 47 C-57.66 47 -58.32 47 -59 47 C-59 47.66 -59 48.32 -59 49 C-61.046875 50.4375 -61.046875 50.4375 -63.75 52 C-64.63171875 52.515625 -65.5134375 53.03125 -66.421875 53.5625 C-69 55 -69 55 -71.30078125 56.06640625 C-71.86152344 56.37449219 -72.42226563 56.68257812 -73 57 C-73.144375 57.639375 -73.28875 58.27875 -73.4375 58.9375 C-74 61 -74 61 -76.25 62.5625 C-77.1575 63.036875 -78.065 63.51125 -79 64 C-79.86625 64.556875 -80.7325 65.11375 -81.625 65.6875 C-84 67 -84 67 -87 67 C-87.33 65.68 -87.66 64.36 -88 63 C-87.00742187 62.26136719 -86.01484375 61.52273437 -84.9921875 60.76171875 C-77.61738823 55.26010204 -70.29446757 49.70619343 -63.07495117 44.00219727 C-57.68222533 39.74164591 -52.24199648 35.54527863 -46.78515625 31.3671875 C-44.84532834 29.88154249 -42.90705968 28.3938752 -40.96875 26.90625 C-38.10247211 24.70715427 -35.23069301 22.5155074 -32.35546875 20.328125 C-29.44364372 18.11145658 -26.55367964 15.86988089 -23.67578125 13.609375 C-22.2840046 12.5310558 -20.89208308 11.45292357 -19.5 10.375 C-18.87826904 9.87822754 -18.25653809 9.38145508 -17.6159668 8.86962891 C-13.60161198 5.78741636 -9.87380166 4.03805794 -4.99804688 2.66259766 C-2.72153788 2.00546089 -2.72153788 2.00546089 0 0 Z \",fill:\"#241312\",transform:\"translate(583,31)\"})),_path214||(_path214=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.94 0.33 11.88 0.66 18 1 C17.67 5.95 17.34 10.9 17 16 C12.71 16 8.42 16 4 16 C4 16.66 4 17.32 4 18 C4.66 18 5.32 18 6 18 C6 18.99 6 19.98 6 21 C6.66 21 7.32 21 8 21 C8 22.98 8 24.96 8 27 C8.66 27 9.32 27 10 27 C10 28.98 10 30.96 10 33 C11.32 33.66 12.64 34.32 14 35 C14 35.66 14 36.32 14 37 C14.66 37 15.32 37 16 37 C16 38.32 16 39.64 16 41 C16.66 41 17.32 41 18 41 C19.13764351 45.26616316 20 48.56486311 20 53 C25.61 53 31.22 53 37 53 C37 53.33 37 53.66 37 54 C35.94872925 54.029729 35.94872925 54.029729 34.8762207 54.06005859 C31.68794838 54.15556166 28.50030853 54.26513871 25.3125 54.375 C24.20970703 54.4059375 23.10691406 54.436875 21.97070312 54.46875 C20.3706543 54.52675781 20.3706543 54.52675781 18.73828125 54.5859375 C17.75899658 54.6173584 16.77971191 54.6487793 15.77075195 54.68115234 C12.87577199 55.01429569 10.64227833 55.79800587 8 57 C7.94465088 56.3702124 7.88930176 55.7404248 7.83227539 55.09155273 C7.57762764 52.20669312 7.32008608 49.32209868 7.0625 46.4375 C6.97548828 45.44685547 6.88847656 44.45621094 6.79882812 43.43554688 C6.28130207 34.38348716 6.28130207 34.38348716 4.07421875 25.6953125 C2.42205364 21.54988004 1.68028896 17.24214013 0.8125 12.875 C0.62236328 11.96878906 0.43222656 11.06257813 0.23632812 10.12890625 C0.06166016 9.25878906 -0.11300781 8.38867188 -0.29296875 7.4921875 C-0.4530542 6.70183105 -0.61313965 5.91147461 -0.77807617 5.09716797 C-1 3 -1 3 0 0 Z \",fill:\"#8E1B26\",transform:\"translate(288,369)\"})),_path215||(_path215=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1.875 3.875 -1.875 3.875 -3 5 C-2.34 5.33 -1.68 5.66 -1 6 C-1 6.66 -1 7.32 -1 8 C-2.32 8 -3.64 8 -5 8 C-4.319375 9.2684375 -4.319375 9.2684375 -3.625 10.5625 C-0.03402213 18.15879935 0.2443737 24.73202309 0 33 C-0.66 33 -1.32 33 -2 33 C-2.06058594 32.39671875 -2.12117188 31.7934375 -2.18359375 31.171875 C-2.26738281 30.37265625 -2.35117188 29.5734375 -2.4375 28.75 C-2.51871094 27.96109375 -2.59992188 27.1721875 -2.68359375 26.359375 C-2.97634993 24.17635361 -3.42064419 22.1226818 -4 20 C-4.66 20 -5.32 20 -6 20 C-6.66 29.57 -7.32 39.14 -8 49 C-8.66 49 -9.32 49 -10 49 C-10.495 44.05 -10.495 44.05 -11 39 C-12.32 39 -13.64 39 -15 39 C-16.94092053 30.41039426 -17.98653063 21.73556788 -19 13 C-19.17208984 11.51886719 -19.17208984 11.51886719 -19.34765625 10.0078125 C-20 4.25616197 -20 4.25616197 -20 3 C-23.96 2.67 -27.92 2.34 -32 2 C-32 1.67 -32 1.34 -32 1 C-27.6042236 0.8318091 -23.20837046 0.6657129 -18.8125 0.5 C-17.56662109 0.45230469 -16.32074219 0.40460938 -15.03710938 0.35546875 C-13.83505859 0.31035156 -12.63300781 0.26523437 -11.39453125 0.21875 C-10.28956299 0.17685547 -9.18459473 0.13496094 -8.04614258 0.09179688 C-5.36141261 0.01089133 -2.68565859 -0.01748191 0 0 Z \",fill:\"#93663E\",transform:\"translate(218,323)\"})),_path216||(_path216=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 2.31 1.32 4.62 2 7 C8.6 7.33 15.2 7.66 22 8 C22 8.33 22 8.66 22 9 C19.03 9.66 16.06 10.32 13 11 C12.67 14.3 12.34 17.6 12 21 C11.01 21.33 10.02 21.66 9 22 C9 21.34 9 20.68 9 20 C6.03 19.67 3.06 19.34 0 19 C0 20.65 0 22.3 0 24 C-10.89 24.495 -10.89 24.495 -22 25 C-22.33 27.31 -22.66 29.62 -23 32 C-23.33 32 -23.66 32 -24 32 C-24 25.73 -24 19.46 -24 13 C-19.99998285 11.99999571 -17.94476647 12.19311595 -14 13 C-14 11.02 -14 9.04 -14 7 C-13.67 8.32 -13.34 9.64 -13 11 C-10.99955074 10.31888992 -10.99955074 10.31888992 -9 9 C-8.01862078 6.69460484 -7.49763167 4.42776181 -6.90625 1.99609375 C-6 0 -6 0 -4.03125 -0.83984375 C-2 -1 -2 -1 0 0 Z \",fill:\"#050406\",transform:\"translate(337,337)\"})),_path217||(_path217=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.85625 -0.00386719 1.85625 -0.00386719 3.75 -0.0078125 C7 0.125 7 0.125 10 1.125 C10.33 2.115 10.66 3.105 11 4.125 C11.66 4.455 12.32 4.785 13 5.125 C13 6.115 13 7.105 13 8.125 C13.66 8.125 14.32 8.125 15 8.125 C15 5.485 15 2.845 15 0.125 C15.66 0.455 16.32 0.785 17 1.125 C16.98839844 1.72828125 16.97679687 2.3315625 16.96484375 2.953125 C16.95582031 3.75234375 16.94679687 4.5515625 16.9375 5.375 C16.92589844 6.16390625 16.91429687 6.9528125 16.90234375 7.765625 C16.99614694 10.03191002 17.36758937 11.9538895 18 14.125 C19.32 14.125 20.64 14.125 22 14.125 C22.18175781 14.66769531 22.36351562 15.21039063 22.55078125 15.76953125 C22.80214844 16.48496094 23.05351562 17.20039063 23.3125 17.9375 C23.55613281 18.64519531 23.79976562 19.35289062 24.05078125 20.08203125 C25.08304105 22.30372621 26.12879279 23.55929601 28 25.125 C30.10332891 25.83947643 30.10332891 25.83947643 32 26.125 C32.495 28.105 32.495 28.105 33 30.125 C33.33 24.185 33.66 18.245 34 12.125 C34.99 12.785 35.98 13.445 37 14.125 C37.29296875 16.9453125 37.29296875 16.9453125 37.1875 20.25 C37.14689453 21.89355469 37.14689453 21.89355469 37.10546875 23.5703125 C37.07066406 24.41335938 37.03585937 25.25640625 37 26.125 C38.98 26.125 40.96 26.125 43 26.125 C43 18.535 43 10.945 43 3.125 C43.33 3.125 43.66 3.125 44 3.125 C44.04940499 8.76666991 44.08572193 14.40821413 44.10986328 20.05004883 C44.11992639 21.96966749 44.13357816 23.88927081 44.15087891 25.80883789 C44.17511364 28.56660752 44.18647992 31.32417464 44.1953125 34.08203125 C44.20563507 34.94149857 44.21595764 35.80096588 44.22659302 36.68647766 C44.22681961 37.88738289 44.22681961 37.88738289 44.22705078 39.11254883 C44.231492 39.8164827 44.23593323 40.52041656 44.24050903 41.24568176 C44 43.125 44 43.125 42 46.125 C38.375 46.3125 38.375 46.3125 35 46.125 C35.66 45.135 36.32 44.145 37 43.125 C37.02362973 39.91386461 37.02362973 39.91386461 36.625 36.4375 C36.51414062 35.25800781 36.40328125 34.07851563 36.2890625 32.86328125 C36.19367188 31.95964844 36.09828125 31.05601562 36 30.125 C35.67 33.755 35.34 37.385 35 41.125 C34.01 41.125 33.02 41.125 32 41.125 C32 37.825 32 34.525 32 31.125 C30.68 30.465 29.36 29.805 28 29.125 C26.54296875 27.43359375 26.54296875 27.43359375 25.1875 25.5625 C22.71975688 22.52042281 22.18508039 22.16977751 18.125 21.1875 C16.578125 21.1565625 16.578125 21.1565625 15 21.125 C15 20.465 15 19.805 15 19.125 C12.69 18.795 10.38 18.465 8 18.125 C8 17.135 8 16.145 8 15.125 C7.34 15.125 6.68 15.125 6 15.125 C5.375 12.8125 5.375 12.8125 5 10.125 C5.66 9.135 6.32 8.145 7 7.125 C1.72 6.465 -3.56 5.805 -9 5.125 C-9.33 3.805 -9.66 2.485 -10 1.125 C-6.49904689 -0.04198437 -3.6877768 -0.00768287 0 0 Z \",fill:\"#58633A\",transform:\"translate(226,298.875)\"})),_path218||(_path218=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.495 1.485 0.495 1.485 1 3 C-2.12147545 4.67333158 -5.24773498 6.33751716 -8.375 8 C-9.70917969 8.71542969 -9.70917969 8.71542969 -11.0703125 9.4453125 C-11.92109375 9.89648438 -12.771875 10.34765625 -13.6484375 10.8125 C-14.43395996 11.23144531 -15.21948242 11.65039062 -16.02880859 12.08203125 C-18 13 -18 13 -20 13 C-20 13.99 -20 14.98 -20 16 C-20.69633545 16.32049316 -21.3926709 16.64098633 -22.11010742 16.97119141 C-36.27776121 23.50015991 -50.39295946 30.11970577 -64.42437744 36.93670654 C-76.41377206 42.75789509 -88.49386729 48.36195751 -100.61938477 53.89355469 C-102.98939751 54.95598344 -102.98939751 54.95598344 -105.12866211 56.20800781 C-107 57 -107 57 -110 56 C-106.02139531 51.46990555 -102.04164379 49.33508583 -96.5625 46.9375 C-89.13658618 43.56076572 -81.94809111 39.8903318 -74.8125 35.9375 C-59.73144854 27.60749991 -44.29325717 20.18414507 -28.67724609 12.91943359 C-27.11888923 12.19409754 -25.56102055 11.46771165 -24.00366211 10.74023438 C-22.54337549 10.05810287 -21.08201296 9.378268 -19.61938477 8.70117188 C-16.75671986 7.36319853 -14.02295985 6.01390291 -11.31640625 4.375 C-8.97006772 2.98223244 -6.78536895 2.12675743 -4.1875 1.3125 C-3.00220703 0.93544922 -3.00220703 0.93544922 -1.79296875 0.55078125 C-1.20128906 0.36902344 -0.60960937 0.18726563 0 0 Z \",fill:\"#51473D\",transform:\"translate(545,138)\"})),_path219||(_path219=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1.34 10.24 0.68 19.48 0 29 C-0.99 29 -1.98 29 -3 29 C-3.0247366 34.33853824 -3.0428774 39.67704303 -3.05493164 45.015625 C-3.05995741 46.83138612 -3.06677903 48.6471432 -3.07543945 50.46289062 C-3.08758189 53.0742289 -3.09324591 55.68551362 -3.09765625 58.296875 C-3.10281754 59.10743347 -3.10797882 59.91799194 -3.11329651 60.75311279 C-3.11365416 64.35413307 -2.91450107 67.53087947 -2 71 C-1.92133041 72.58692639 -1.89215886 74.17678249 -1.90234375 75.765625 C-1.90556641 76.65507812 -1.90878906 77.54453125 -1.91210938 78.4609375 C-1.92048828 79.38132812 -1.92886719 80.30171875 -1.9375 81.25 C-1.94201172 82.18585938 -1.94652344 83.12171875 -1.95117188 84.0859375 C-1.96293082 86.39069041 -1.97936574 88.69531227 -2 91 C-1.34 91 -0.68 91 0 91 C0 92.98 0 94.96 0 97 C0.66 97 1.32 97 2 97 C2 97.66 2 98.32 2 99 C2.66 99 3.32 99 4 99 C4 100.32 4 101.64 4 103 C0.03135613 101.51607229 -1.2663892 99.4166745 -3.25 95.75 C-3.77078125 94.81671875 -4.2915625 93.8834375 -4.828125 92.921875 C-6.10912845 89.7279064 -6.2218571 87.40853178 -6 84 C-7.32 84 -8.64 84 -10 84 C-10 83.34 -10 82.68 -10 82 C-9.34 82 -8.68 82 -8 82 C-8.06856201 81.12819092 -8.13712402 80.25638184 -8.20776367 79.3581543 C-8.95409289 69.17346644 -9.27940686 59.02389081 -9.3125 48.8125 C-9.31545074 48.0035025 -9.31840149 47.194505 -9.32144165 46.36099243 C-9.33426744 30.86035272 -7.95190067 16.45015255 -2 2 C-1.34 1.34 -0.68 0.68 0 0 Z \",fill:\"#FCE8BF\",transform:\"translate(340,365)\"})),_path220||(_path220=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.6875 2.546875 1.6875 2.546875 3 5 C-6.88440067 10.2887962 -16.07394533 14.26848633 -27 17 C-22.71 17 -18.42 17 -14 17 C-13.505 17.99 -13.505 17.99 -13 19 C-17.95 19.66 -22.9 20.32 -28 21 C-27.505 22.485 -27.505 22.485 -27 24 C-26.26394531 23.7834375 -25.52789062 23.566875 -24.76953125 23.34375 C-23.79371094 23.0653125 -22.81789063 22.786875 -21.8125 22.5 C-20.84957031 22.2215625 -19.88664062 21.943125 -18.89453125 21.65625 C-16.14654124 21.03322392 -13.80401584 20.87697188 -11 21 C-13.44365166 23.44365166 -15.48960663 24.06420527 -18.75 25.1875 C-19.77609375 25.55230469 -20.8021875 25.91710937 -21.859375 26.29296875 C-25.2851166 27.0641867 -27.6080387 26.79721246 -31 26 C-31 25.01 -31 24.02 -31 23 C-32.57201172 22.90912109 -32.57201172 22.90912109 -34.17578125 22.81640625 C-35.55470048 22.73198262 -36.93360605 22.64733553 -38.3125 22.5625 C-39.00279297 22.52318359 -39.69308594 22.48386719 -40.40429688 22.44335938 C-43.47161535 22.25072585 -46.06968152 21.97677283 -49 21 C-49 20.34 -49 19.68 -49 19 C-49.886875 19.061875 -50.77375 19.12375 -51.6875 19.1875 C-55.44702321 18.9746968 -57.1769966 18.49088536 -60 16 C-60.3125 12.8125 -60.3125 12.8125 -60 10 C-59.01 10.33 -58.02 10.66 -57 11 C-57 11.66 -57 12.32 -57 13 C-48.42 13.66 -39.84 14.32 -31 15 C-31 14.01 -31 13.02 -31 12 C-31 11.67 -31 11.34 -31 11 C-30.18917969 10.79246094 -29.37835938 10.58492188 -28.54296875 10.37109375 C-22.44435359 8.674273 -17.36902847 6.84569685 -12.125 3.25 C-7.75569137 0.29466589 -5.23383244 -1.30845811 0 0 Z \",fill:\"#433520\",transform:\"translate(491,335)\"})),_path221||(_path221=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.76570313 0.01353516 1.53140625 0.02707031 2.3203125 0.04101562 C4.17219322 0.07573839 6.02370171 0.1295127 7.875 0.1875 C8.37 1.6725 8.37 1.6725 8.875 3.1875 C5.49682575 4.03204356 3.20034757 4.29594919 -0.125 3.1875 C-0.125 4.1775 -0.125 5.1675 -0.125 6.1875 C-2.105 6.5175 -4.085 6.8475 -6.125 7.1875 C-6.125 8.1775 -6.125 9.1675 -6.125 10.1875 C-14.45901218 12.29848246 -22.81135354 14.31323284 -31.1875 16.25 C-32.28126953 16.50587891 -33.37503906 16.76175781 -34.50195312 17.02539062 C-40.57719373 18.43126129 -46.64709618 19.69826515 -52.79516602 20.7434082 C-54.92195418 21.14879725 -56.93274849 21.67597575 -59 22.3125 C-61.89526831 23.12317513 -64.14335219 23.36820593 -67.125 23.1875 C-66.135 22.5275 -65.145 21.8675 -64.125 21.1875 C-65.115 19.8675 -66.105 18.5475 -67.125 17.1875 C-63.91048731 15.58024365 -60.68887464 16.13001815 -57.125 16.1875 C-57.125 15.5275 -57.125 14.8675 -57.125 14.1875 C-52.3484188 13.63936773 -47.62571521 13.11387529 -42.8125 13.1875 C-39.65968781 13.1875 -37.17816292 12.81378983 -34.125 12.1875 C-31.79198014 12.14925377 -29.45788492 12.14175716 -27.125 12.1875 C-27.125 11.5275 -27.125 10.8675 -27.125 10.1875 C-27.87523437 10.331875 -28.62546875 10.47625 -29.3984375 10.625 C-36.05986552 11.83311793 -42.35871881 12.45695368 -49.125 12.1875 C-46.03690362 10.12876908 -43.84830108 9.46167575 -40.27734375 8.56640625 C-39.11396484 8.27056641 -37.95058594 7.97472656 -36.75195312 7.66992188 C-35.53443359 7.36634766 -34.31691406 7.06277344 -33.0625 6.75 C-30.67531052 6.14900211 -28.28858322 5.54616513 -25.90234375 4.94140625 C-24.74573242 4.64999756 -23.58912109 4.35858887 -22.39746094 4.05834961 C-19.49986678 3.28725752 -16.67226089 2.41036942 -13.82421875 1.4765625 C-9.14033352 0.03820404 -4.8706841 -0.16840131 0 0 Z \",fill:\"#464A43\",transform:\"translate(511.125,211.8125)\"})),_path222||(_path222=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C13.34240825 0.23520271 26.02386769 3.07396196 39 6 C39 6.33 39 6.66 39 7 C33.06 7.495 33.06 7.495 27 8 C28.09699219 8.03738281 29.19398438 8.07476562 30.32421875 8.11328125 C31.77867857 8.17896653 33.23310416 8.24541299 34.6875 8.3125 C35.7693457 8.34633789 35.7693457 8.34633789 36.87304688 8.38085938 C41.30698957 8.60356883 44.4272502 9.09714079 48 12 C48.3125 14.6875 48.3125 14.6875 48 17 C47.505 16.01 47.505 16.01 47 15 C45.09878904 14.54857343 45.09878904 14.54857343 42.81640625 14.40234375 C41.97142578 14.32306641 41.12644531 14.24378906 40.25585938 14.16210938 C38.92264648 14.05092773 38.92264648 14.05092773 37.5625 13.9375 C35.8134977 13.7833636 34.06477886 13.62596567 32.31640625 13.46484375 C31.53724854 13.399021 30.75809082 13.33319824 29.95532227 13.26538086 C28 13 28 13 26 12 C26 14.97 26 17.94 26 21 C27.093125 21.0825 28.18625 21.165 29.3125 21.25 C33 22 33 22 34.68359375 23.7265625 C36.18471184 26.3189979 36.5192261 28.15156711 36.75 31.125 C36.82734375 31.99382812 36.9046875 32.86265625 36.984375 33.7578125 C37 36 37 36 36 38 C31.78057133 37.62769747 29.67284974 36.06804068 26.55859375 33.27734375 C24.25931691 31.39297401 21.69499434 30.21916411 19 29 C19 28.01 19 27.02 19 26 C17.68 25.67 16.36 25.34 15 25 C15 24.34 15 23.68 15 23 C14.34 23 13.68 23 13 23 C13 22.34 13 21.68 13 21 C16.96 21 20.92 21 25 21 C24.67 18.03 24.34 15.06 24 12 C22.700625 11.566875 21.40125 11.13375 20.0625 10.6875 C15.375 9.125 10.6875 7.5625 6 6 C6 5.34 6 4.68 6 4 C4.02 3.34 2.04 2.68 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#D59975\",transform:\"translate(367,287)\"})),_path223||(_path223=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.56143254 1.17716318 3.0808243 2.41140367 4.5625 3.6875 C12.42429594 10.02318261 18.98508264 15.23350511 29.3984375 15.65625 C30.12175766 15.68827011 30.84507782 15.72029022 31.59031677 15.75328064 C34.05993212 15.85474652 36.52928715 15.93035318 39 16 C40.37857681 16.04062057 40.37857681 16.04062057 41.78500366 16.08206177 C48.87677392 16.28282777 55.96923661 16.42680471 63.0625 16.5625 C65.20117793 16.60582198 67.33984988 16.64943991 69.47851562 16.69335938 C74.65228141 16.79897568 79.82611085 16.90061889 85 17 C85 17.33 85 17.66 85 18 C78.59772776 19.14962342 72.30490269 19.14454787 65.8125 19.1328125 C64.63719727 19.13376923 63.46189453 19.13472595 62.25097656 19.13571167 C59.76643826 19.13639075 57.28189816 19.13455544 54.79736328 19.13037109 C51.04064825 19.12505749 47.28405489 19.13030545 43.52734375 19.13671875 C20.25644009 19.14475154 4.67418023 18.29419285 -15.53515625 6.2421875 C-16.178479 5.8591748 -16.82180176 5.47616211 -17.48461914 5.08154297 C-19 4 -19 4 -20 2 C-17.60861159 1.27205535 -15.21413847 0.56756551 -12.8125 -0.125 C-12.13896484 -0.33253906 -11.46542969 -0.54007813 -10.77148438 -0.75390625 C-6.43841666 -1.97984736 -3.92026192 -2.30015368 0 0 Z \",fill:\"#59392C\",transform:\"translate(249,223)\"})),_path224||(_path224=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.70963773 -0.20098577 9.41667084 -0.3443857 14.12963867 -0.43945312 C15.72513396 -0.47916038 17.32034873 -0.53335006 18.91479492 -0.60351562 C31.96455309 -1.16249739 42.08415521 1.10752668 52.18115234 9.89916992 C54.92924516 12.91170806 56.81832697 16.10047899 58 20 C55.50949831 18.80455919 53.24713895 17.51934914 50.91015625 16.02734375 C46.73738877 13.64738896 42.72158536 12.93129808 38 12.3125 C37.15147461 12.19221436 36.30294922 12.07192871 35.42871094 11.94799805 C25.0037242 10.57733334 14.50216051 10.25869503 4 10 C3.32845067 8.71086513 2.66291141 7.41859796 2 6.125 C1.62875 5.40570313 1.2575 4.68640625 0.875 3.9453125 C0 2 0 2 0 0 Z \",fill:\"#431E24\",transform:\"translate(205,450)\"})),_path225||(_path225=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C0.67 2.99 0.34 3.98 0 5 C1.98 4.01 3.96 3.02 6 2 C4.45744097 6.83802606 2.81370812 11.63145568 1 16.375 C0.5359375 17.59316406 0.5359375 17.59316406 0.0625 18.8359375 C-1.03116936 21.06348465 -2.24013504 22.28861617 -4 24 C-4.72197162 26.60611077 -4.72197162 26.60611077 -5 29 C-5.66 29 -6.32 29 -7 29 C-7.16822266 30.09828125 -7.16822266 30.09828125 -7.33984375 31.21875 C-8.20718904 34.87289109 -9.9751825 37.55496788 -11.94140625 40.71875 C-13.1679712 43.36197483 -13.26426054 45.11715772 -13 48 C-12.67 48.66 -12.34 49.32 -12 50 C-12.85546875 52.56640625 -12.85546875 52.56640625 -14.1875 55.5625 C-14.61417969 56.55378906 -15.04085937 57.54507813 -15.48046875 58.56640625 C-17 61 -17 61 -19.17578125 61.83984375 C-19.77777344 61.89269531 -20.37976563 61.94554687 -21 62 C-21.33 60.68 -21.66 59.36 -22 58 C-24.97 60.475 -24.97 60.475 -28 63 C-27.49202991 58.6822542 -26.80317221 54.96697886 -25 51 C-24.34 51 -23.68 51 -23 51 C-22.90203125 50.45472656 -22.8040625 49.90945313 -22.703125 49.34765625 C-21.24106626 41.97434276 -18.36106589 35.6771175 -15 29 C-14.34 29 -13.68 29 -13 29 C-12.87625 28.46375 -12.7525 27.9275 -12.625 27.375 C-11.87793984 24.5361714 -10.94696636 21.77776798 -10 19 C-9.34 19 -8.68 19 -8 19 C-7.9175 18.360625 -7.835 17.72125 -7.75 17.0625 C-6.25506337 10.95817545 -3.39935083 5.26899379 0 0 Z \",fill:\"#53362B\",transform:\"translate(150,547)\"})),_path226||(_path226=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2 1.66 2 2.32 2 3 C2.66 3 3.32 3 4 3 C4.33 4.32 4.66 5.64 5 7 C6.32 7 7.64 7 9 7 C9 7.66 9 8.32 9 9 C10.093125 9.268125 11.18625 9.53625 12.3125 9.8125 C16 11 16 11 17.34375 12.53125 C19.79565812 14.70558362 21.969205 14.51447339 25.1875 14.6875 C26.27417969 14.75324219 27.36085938 14.81898438 28.48046875 14.88671875 C29.31191406 14.92410156 30.14335938 14.96148437 31 15 C31.495 17.97 31.495 17.97 32 21 C25.07 20.505 25.07 20.505 18 20 C18.33 21.98 18.66 23.96 19 26 C20.32 26.33 21.64 26.66 23 27 C23 27.66 23 28.32 23 29 C23.99 29.33 24.98 29.66 26 30 C25.34 30.99 24.68 31.98 24 33 C25.0725 32.95875 26.145 32.9175 27.25 32.875 C30.65747485 32.9885825 32.20739631 33.21273364 35 35 C32.36 35.33 29.72 35.66 27 36 C29.52952288 39.15111212 31.76756266 39.58798017 35.6875 40.1875 C36.68136719 40.34605469 37.67523437 40.50460937 38.69921875 40.66796875 C39.45847656 40.77753906 40.21773437 40.88710938 41 41 C41 41.33 41 41.66 41 42 C38.36 42 35.72 42 33 42 C33 42.99 33 43.98 33 45 C35.64 45.66 38.28 46.32 41 47 C37 48 37 48 35 47 C35 47.66 35 48.32 35 49 C37.31 49 39.62 49 42 49 C42 49.33 42 49.66 42 50 C35.77923959 50.67862841 32.36623511 49.71910315 27.35327148 45.94726562 C20.17528522 40.00768492 15.2957197 32.73199727 10.875 24.625 C10.36364502 23.70541504 9.85229004 22.78583008 9.32543945 21.83837891 C8.32481767 20.03608006 7.32860054 18.23132674 6.33740234 16.42382812 C5.2023641 14.36675261 4.04443538 12.32765148 2.86328125 10.296875 C2.03376953 8.85054688 2.03376953 8.85054688 1.1875 7.375 C0.72730469 6.57835937 0.26710938 5.78171875 -0.20703125 4.9609375 C-1 3 -1 3 0 0 Z \",fill:\"#68BE80\",transform:\"translate(497,341)\"})),_path227||(_path227=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C0 3 -2 5 -4 7 C-3.34 7.66 -2.68 8.32 -2 9 C-3.24685757 10.58580914 -4.49763026 12.1685404 -5.75 13.75 C-6.44609375 14.63171875 -7.1421875 15.5134375 -7.859375 16.421875 C-9.80839472 18.76923452 -11.73125314 20.96003434 -14 23 C-14.66 23 -15.32 23 -16 23 C-16.33 24.32 -16.66 25.64 -17 27 C-17.66 27 -18.32 27 -19 27 C-19.24105469 27.55042969 -19.48210937 28.10085938 -19.73046875 28.66796875 C-21.28819102 31.52938474 -23.21498577 33.82015956 -25.3125 36.3125 C-27.89202752 39.40628739 -30.38895254 42.46216802 -32.625 45.8125 C-34.98648499 48.98186143 -37.37978271 51.17998146 -40.42578125 53.64453125 C-42.26511045 55.22827128 -43.57315123 57.04747011 -45 59 C-45.66 59 -46.32 59 -47 59 C-47.66 60.32 -48.32 61.64 -49 63 C-49 62.01 -49 61.02 -49 60 C-49.66 60 -50.32 60 -51 60 C-50.67 58.35 -50.34 56.7 -50 55 C-50.7425 55.78375 -51.485 56.5675 -52.25 57.375 C-54.59421977 59.61266433 -56.14324985 60.69370826 -59 62 C-58.06558465 60.72689688 -57.12732889 59.456612 -56.1875 58.1875 C-55.66542969 57.47980469 -55.14335938 56.77210938 -54.60546875 56.04296875 C-53 54 -53 54 -51.35546875 52.3671875 C-49.86241772 51.03021675 -49.86241772 51.03021675 -49.125 48.9375 C-47.57951662 46.27583418 -45.83060937 46.07832738 -43 45 C-40.7335534 43.06685437 -39.1886078 41.32332765 -37.6875 38.75 C-35.69376013 35.50094244 -33.3183722 32.83503097 -30.77734375 30.00390625 C-29.1860904 28.20981182 -27.681302 26.37500963 -26.1875 24.5 C-25.465625 23.675 -24.74375 22.85 -24 22 C-23.34 22 -22.68 22 -22 22 C-22 21.34 -22 20.68 -22 20 C-20.00715862 18.6559907 -18.00580329 17.32458708 -16 16 C-14.30814879 14.35890432 -12.64475567 12.68829332 -11 11 C-10.0366367 10.03367807 -9.07176206 9.06886076 -8.10546875 8.10546875 C-7.62529297 7.62529297 -7.14511719 7.14511719 -6.65039062 6.65039062 C-4.43359375 4.43359375 -2.21679688 2.21679688 0 0 Z M-53 60 C-52.34 60.33 -51.68 60.66 -51 61 C-52.65 62.32 -54.3 63.64 -56 65 C-54.125 61.125 -54.125 61.125 -53 60 Z \",fill:\"#55372D\",transform:\"translate(118,520)\"})),_path228||(_path228=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.6 0 13.2 0 20 0 C20.33 7.92 20.66 15.84 21 24 C23.97 24 26.94 24 30 24 C30 24.33 30 24.66 30 25 C18.27961866 25.45369218 6.65214526 24.11367733 -5 23 C-5 22.67 -5 22.34 -5 22 C-3.35 22 -1.7 22 0 22 C0 14.74 0 7.48 0 0 Z \",fill:\"#002218\",transform:\"translate(502,262)\"})),_path229||(_path229=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.33333333 0 6.66666667 0 10 0 C10 0.66 10 1.32 10 2 C11.32 2.66 12.64 3.32 14 4 C14 4.66 14 5.32 14 6 C14.99 6.33 15.98 6.66 17 7 C18.38576923 8.62332967 19.72641268 10.28724465 21 12 C19 13 19 13 16 13 C14.39919849 17.00200378 15.70720308 20.04556236 17 24 C15.35 23.67 13.7 23.34 12 23 C12 20.69 12 18.38 12 16 C10.02 16 8.04 16 6 16 C6 25.9 6 35.8 6 46 C6.99 46.33 7.98 46.66 9 47 C6.04335481 48.4783226 3.25770263 48.06032783 0 48 C0 47.34 0 46.68 0 46 C-1.32 45.67 -2.64 45.34 -4 45 C-2.02 44.505 -2.02 44.505 0 44 C0 42.68 0 41.36 0 40 C0.66 40 1.32 40 2 40 C2 32.08 2 24.16 2 16 C-0.31 16 -2.62 16 -5 16 C-6 15 -6 15 -6.1328125 12.56640625 C-6.13023437 11.57511719 -6.12765625 10.58382812 -6.125 9.5625 C-6.12757813 8.57378906 -6.13015625 7.58507812 -6.1328125 6.56640625 C-6 4 -6 4 -5 2 C-3.35 2 -1.7 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#897C64\",transform:\"translate(182,136)\"})),_path230||(_path230=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.74437659 -0.02537362 13.48874084 -0.04287685 20.2331543 -0.05493164 C22.52710429 -0.05995761 24.82105108 -0.06677938 27.11499023 -0.07543945 C30.41390778 -0.08758096 33.71278293 -0.09324572 37.01171875 -0.09765625 C38.03585373 -0.10281754 39.05998871 -0.10797882 40.11515808 -0.11329651 C41.07577652 -0.11337204 42.03639496 -0.11344757 43.02612305 -0.11352539 C44.28854073 -0.11685631 44.28854073 -0.11685631 45.57646179 -0.12025452 C48.13426382 0.00666209 50.50454611 0.43812412 53 1 C53 1.99 53 2.98 53 4 C56.63 4 60.26 4 64 4 C64.495 4.99 64.495 4.99 65 6 C61.7 6 58.4 6 55 6 C55.495 7.485 55.495 7.485 56 9 C55.01 9 54.02 9 53 9 C52.505 8.01 52.505 8.01 52 7 C50.03385733 7.14657084 50.03385733 7.14657084 48 8 C46.8624787 10.08034294 46.8624787 10.08034294 46.25 12.5625 C46.00765625 13.38878906 45.7653125 14.21507812 45.515625 15.06640625 C45.34546875 15.70449219 45.1753125 16.34257812 45 17 C44.34 16.67 43.68 16.34 43 16 C42.67 16.66 42.34 17.32 42 18 C30.78 17.67 19.56 17.34 8 17 C7.67 15.35 7.34 13.7 7 12 C7 13.65 7 15.3 7 17 C6.67 17 6.34 17 6 17 C6 14.69 6 12.38 6 10 C17.88 9.67 29.76 9.34 42 9 C35.4 8.34 28.8 7.68 22 7 C22 5.68 22 4.36 22 3 C27.94 2.505 27.94 2.505 34 2 C34 3.65 34 5.3 34 7 C34.66 7 35.32 7 36 7 C36 5.35 36 3.7 36 2 C24.12 1.67 12.24 1.34 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#597B56\",transform:\"translate(416,266)\"})),_path231||(_path231=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.02338141 8.57249325 1.04104445 17.14497273 1.05181217 25.7174902 C1.05698544 29.69993673 1.06397936 33.68236112 1.07543945 37.66479492 C1.08646931 41.5227689 1.09231841 45.38072185 1.09487724 49.2387104 C1.09669592 50.69556572 1.10024499 52.15242016 1.10573006 53.60926628 C1.14361495 64.10893944 0.71888091 74.52500191 0 85 C-2.97 85 -5.94 85 -9 85 C-9.05789006 81.54173658 -9.09355821 78.08359707 -9.125 74.625 C-9.14175781 73.64015625 -9.15851563 72.6553125 -9.17578125 71.640625 C-9.18222656 70.69960938 -9.18867188 69.75859375 -9.1953125 68.7890625 C-9.20578613 67.91975098 -9.21625977 67.05043945 -9.22705078 66.15478516 C-9 64 -9 64 -7 62 C-6.45688965 59.57063409 -6.45688965 59.57063409 -6.18359375 56.70703125 C-6.05976318 55.61261719 -5.93593262 54.51820313 -5.80834961 53.390625 C-5.68596924 52.20984375 -5.56358887 51.0290625 -5.4375 49.8125 C-5.24136108 48.00072266 -5.24136108 48.00072266 -5.04125977 46.15234375 C-4.13367309 37.36768747 -3.56941474 28.60584614 -3.37866211 19.77661133 C-2.9281345 2.9281345 -2.9281345 2.9281345 0 0 Z \",fill:\"#EBBD97\",transform:\"translate(282,541)\"})),_path232||(_path232=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.33 0 0.66 0 1 C-7.66022817 2.37696946 -15.24031631 3.38739339 -23 4 C-18.71 4.33 -14.42 4.66 -10 5 C-10 5.66 -10 6.32 -10 7 C-11.65 7.33 -13.3 7.66 -15 8 C-8.73 7.67 -2.46 7.34 4 7 C4.495 7.99 4.495 7.99 5 9 C1.70390542 9.96758862 -1.38790247 10.16173156 -4.8125 10.3125 C-11.26140566 10.76024037 -17.08387778 12.25181 -23.28515625 14.01171875 C-31.42757287 16.17789268 -39.5790991 17.33023141 -48 17 C-48 12.38 -48 7.76 -48 3 C-42.64894531 1.2163151 -36.91500733 1.31358213 -31.3125 0.9375 C-29.35147339 0.80335693 -29.35147339 0.80335693 -27.35083008 0.66650391 C-18.21364988 0.07152473 -9.15383821 -0.25947888 0 0 Z \",fill:\"#50372A\",transform:\"translate(48,313)\"})),_path233||(_path233=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.60246686 -0.1074664 13.00121203 0.28754907 19.5625 1 C20.93245117 1.14308594 20.93245117 1.14308594 22.33007812 1.2890625 C24.55385532 1.52191875 26.77709776 1.75895855 29 2 C29 3.32 29 4.64 29 6 C27.53125 7.31640625 27.53125 7.31640625 25.5 8.5625 C20.81219187 11.79261514 18.11372674 15.76561281 15.0546875 20.51171875 C12.6322169 23.44539512 10.51517734 24.60317953 7 26 C3.625 26.1875 3.625 26.1875 1 26 C1.020625 25.195625 1.04125 24.39125 1.0625 23.5625 C1.29633621 21.06645115 1.29633621 21.06645115 0 20 C-0.08669432 18.5112814 -0.10703494 17.018555 -0.09765625 15.52734375 C-0.09443359 14.62822266 -0.09121094 13.72910156 -0.08789062 12.80273438 C-0.07951172 11.85720703 -0.07113281 10.91167969 -0.0625 9.9375 C-0.05798828 8.98810547 -0.05347656 8.03871094 -0.04882812 7.06054688 C-0.0370011 4.70696935 -0.02052025 2.35351523 0 0 Z \",fill:\"#C17F63\",transform:\"translate(423,288)\"})),_path234||(_path234=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.11487748 1.58409994 -0.24234508 3.16728963 -0.375 4.75 C-0.44460938 5.63171875 -0.51421875 6.5134375 -0.5859375 7.421875 C-1 10 -1 10 -1.9921875 11.9296875 C-3.36010254 14.73974553 -3.50378698 17.26837097 -3.75 20.375 C-3.84796875 21.47585938 -3.9459375 22.57671875 -4.046875 23.7109375 C-3.99704147 27.20758997 -3.1277264 29.71850106 -2 33 C-2.33 33.99 -2.66 34.98 -3 36 C-7.73798846 37.50036301 -10.96650066 38 -16 38 C-16 25.79 -16 13.58 -16 1 C-4.75 -1.25 -4.75 -1.25 0 0 Z \",fill:\"#46322A\",transform:\"translate(16,342)\"})),_path235||(_path235=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.495 2.475 0.495 2.475 1 5 C-4.36701942 7.00757287 -9.19946926 7.38866757 -14.87890625 7.65625 C-17.97984051 7.99777968 -20.14274818 8.80834995 -23 10 C-28.27016523 11.15681619 -33.40900201 11.12884518 -38.7734375 11.09765625 C-39.6971817 11.0962413 -40.6209259 11.09482635 -41.57266235 11.09336853 C-44.50680862 11.08779609 -47.44087701 11.07524869 -50.375 11.0625 C-52.37109264 11.05748144 -54.36718649 11.05291915 -56.36328125 11.04882812 C-61.24221725 11.03783569 -66.12109545 11.0205901 -71 11 C-63.23957665 2.96419243 -51.26274406 2.81013148 -40.75 1.75 C-39.95807251 1.66528442 -39.16614502 1.58056885 -38.35021973 1.49328613 C-25.54230431 0.12570186 -12.88411712 -0.51082403 0 0 Z \",fill:\"#F4BE9E\",transform:\"translate(433,473)\"})),_path236||(_path236=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.598125 0.309375 1.19625 0.61875 1.8125 0.9375 C4.08956772 2.10209704 4.08956772 2.10209704 7 3 C7.33 3.66 7.66 4.32 8 5 C9.32 4.34 10.64 3.68 12 3 C14.69725519 4.88807863 16.13216429 6.19824644 18 9 C18.66 8.67 19.32 8.34 20 8 C22.35981813 8.93578995 24.69631264 9.93347808 27 11 C27 11.66 27 12.32 27 13 C27.66 13 28.32 13 29 13 C29 12.34 29 11.68 29 11 C30.32 11.33 31.64 11.66 33 12 C33 11.01 33 10.02 33 9 C33.99 9 34.98 9 36 9 C36.495 11.475 36.495 11.475 37 14 C37.99 13.67 38.98 13.34 40 13 C40.66 13.33 41.32 13.66 42 14 C42 14.66 42 15.32 42 16 C42.66 16 43.32 16 44 16 C44 15.34 44 14.68 44 14 C44.66 14 45.32 14 46 14 C46 14.99 46 15.98 46 17 C46.66 17 47.32 17 48 17 C48.495 17.99 48.495 17.99 49 19 C50.65 19 52.3 19 54 19 C55.32 21.64 56.64 24.28 58 27 C59.32 26.67 60.64 26.34 62 26 C64.296875 27.07421875 64.296875 27.07421875 66.75 28.6875 C73.25132217 32.81168675 79.91233416 36.02318035 87 39 C87.66 39.33 88.32 39.66 89 40 C89 40.66 89 41.32 89 42 C87.66598223 41.56459142 86.33283226 41.12652414 85 40.6875 C84.2575 40.44386719 83.515 40.20023438 82.75 39.94921875 C76.34552354 37.7385827 70.32121007 35.26105587 64.3125 32.125 C58.31954552 29.05859207 52.29897896 26.41106067 45.96484375 24.10546875 C42.59873981 22.85038652 39.30200689 21.41514581 36 20 C36 25.61 36 31.22 36 37 C35.34 37 34.68 37 34 37 C34 31.06 34 25.12 34 19 C33.34 19 32.68 19 32 19 C32 24.61 32 30.22 32 36 C31.34 35.67 30.68 35.34 30 35 C30 29.06 30 23.12 30 17 C28.35 16.34 26.7 15.68 25 15 C21.28872375 13.50721209 17.58146141 12.00469834 13.875 10.5 C12.37259766 9.89478516 12.37259766 9.89478516 10.83984375 9.27734375 C9.87949219 8.88675781 8.91914063 8.49617187 7.9296875 8.09375 C7.05554199 7.73990234 6.18139648 7.38605469 5.28076172 7.02148438 C3 6 3 6 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#6C4224\",transform:\"translate(9,138)\"})),_path237||(_path237=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-8.42660847 8.27141598 -19.23513076 13.26260164 -29 17 C-29 17.66 -29 18.32 -29 19 C-28.52433594 18.731875 -28.04867187 18.46375 -27.55859375 18.1875 C-25.04518357 16.7803606 -22.52359653 15.38880279 -20 14 C-19.38946777 13.66274902 -18.77893555 13.32549805 -18.14990234 12.97802734 C-16.14531501 11.87424496 -14.13571937 10.78006605 -12.125 9.6875 C-11.47072021 9.32591797 -10.81644043 8.96433594 -10.14233398 8.59179688 C-5.34241074 6 -5.34241074 6 -2 6 C-1.01 6.495 -1.01 6.495 0 7 C0 7.99 0 8.98 0 10 C-0.79664063 10.38671875 -1.59328125 10.7734375 -2.4140625 11.171875 C-10.52407374 15.06017117 -10.52407374 15.06017117 -18 20 C-18 20.66 -18 21.32 -18 22 C-21.07617188 22.29296875 -21.07617188 22.29296875 -24.15234375 22.5859375 C-24.76207031 22.72257812 -25.37179687 22.85921875 -26 23 C-26.33 23.66 -26.66 24.32 -27 25 C-27.66 25 -28.32 25 -29 25 C-29 25.66 -29 26.32 -29 27 C-29.928125 27.103125 -30.85625 27.20625 -31.8125 27.3125 C-35.23138159 28.04990583 -35.71328243 28.61385993 -38 31 C-40.6875 31.6875 -40.6875 31.6875 -43 32 C-42.67 32.99 -42.34 33.98 -42 35 C-42.59167969 35.12117188 -43.18335938 35.24234375 -43.79296875 35.3671875 C-44.97826172 35.61855469 -44.97826172 35.61855469 -46.1875 35.875 C-47.35345703 36.11863281 -47.35345703 36.11863281 -48.54296875 36.3671875 C-53.07794784 37.53517894 -57.14801839 39.51499598 -61.3125 41.625 C-62.19550781 42.07101563 -63.07851563 42.51703125 -63.98828125 42.9765625 C-64.65214844 43.31429687 -65.31601562 43.65203125 -66 44 C-66 44.99 -66 45.98 -66 47 C-68.97 47.495 -68.97 47.495 -72 48 C-72.33 47.34 -72.66 46.68 -73 46 C-69.95901398 42.60643589 -66.9854374 40.80397677 -62.875 38.875 C-58.60132264 36.91625296 -58.60132264 36.91625296 -55 34 C-54.01 34 -53.02 34 -52 34 C-52 33.01 -52 32.02 -52 31 C-50.02 30.01 -48.04 29.02 -46 28 C-46 26.68 -46 25.36 -46 24 C-44.54735962 23.1361871 -43.0876837 22.28419546 -41.625 21.4375 C-40.81289063 20.96183594 -40.00078125 20.48617187 -39.1640625 19.99609375 C-38.44992187 19.66738281 -37.73578125 19.33867188 -37 19 C-36.34 19.33 -35.68 19.66 -35 20 C-35.33 20.66 -35.66 21.32 -36 22 C-35.34 21.67 -34.68 21.34 -34 21 C-33.85691406 20.07960938 -33.85691406 20.07960938 -33.7109375 19.140625 C-32.63637761 15.90513699 -30.58414013 15.28782085 -27.625 13.75 C-26.64789062 13.22921875 -25.67078125 12.7084375 -24.6640625 12.171875 C-22 11 -22 11 -19 11 C-19 10.34 -19 9.68 -19 9 C-16.2118978 7.4933028 -13.41896042 5.99580196 -10.625 4.5 C-9.8309375 4.07074219 -9.036875 3.64148438 -8.21875 3.19921875 C-7.07792969 2.59013672 -7.07792969 2.59013672 -5.9140625 1.96875 C-5.2123291 1.59169922 -4.5105957 1.21464844 -3.78759766 0.82617188 C-2 0 -2 0 0 0 Z \",fill:\"#322826\",transform:\"translate(605,85)\"})),_path238||(_path238=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.65394631 -0.34615998 9.03006806 0.56574762 14 3 C14 3.66 14 4.32 14 5 C14.66 5 15.32 5 16 5 C16 5.66 16 6.32 16 7 C16.66 7 17.32 7 18 7 C18 7.66 18 8.32 18 9 C18.66 9 19.32 9 20 9 C21.33895632 10.66215268 22.67130142 12.32963607 24 14 C26.72011163 16.3883907 28.55863154 17.85287718 32 19 C32 19.66 32 20.32 32 21 C34.64 21.66 37.28 22.32 40 23 C40 23.66 40 24.32 40 25 C40.66 25 41.32 25 42 25 C42 25.66 42 26.32 42 27 C42.66 27 43.32 27 44 27 C44 27.66 44 28.32 44 29 C44.66 29.04125 45.32 29.0825 46 29.125 C49.7601871 30.22172124 52.11580677 32.18322105 55.1328125 34.625 C57.05775029 36.19030864 57.05775029 36.19030864 60 37 C60.66 37.99 61.32 38.98 62 40 C64.05925139 40.72382467 64.05925139 40.72382467 66 41 C66 41.66 66 42.32 66 43 C66.66 43 67.32 43 68 43 C68 43.99 68 44.98 68 46 C69.98 46.495 69.98 46.495 72 47 C72 49.97 72 52.94 72 56 C67.11889928 52.88488758 62.70279 49.38245888 58.25 45.6875 C53.16514316 41.50795207 48.04869349 37.54625552 42.59765625 33.8515625 C39.2501393 31.46551283 36.06979018 28.89784143 32.875 26.3125 C27.53717909 21.99319119 22.13056202 17.79105671 16.625 13.6875 C15.9551709 13.18798828 15.2853418 12.68847656 14.59521484 12.17382812 C13.31518493 11.21961822 12.03507788 10.26551176 10.75488281 9.31152344 C8.32396097 7.4947577 5.90685272 5.66102325 3.5 3.8125 C2.8090625 3.28269531 2.118125 2.75289063 1.40625 2.20703125 C0.9421875 1.80871094 0.478125 1.41039062 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#EFCCA1\",transform:\"translate(554,493)\"})),_path239||(_path239=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 1.65 0 3.3 0 5 C-0.33 4.34 -0.66 3.68 -1 3 C-1.99 3.33 -2.98 3.66 -4 4 C-5.5779996 4.20129061 -7.16116861 4.36357067 -8.74609375 4.5 C-10.12571289 4.62375 -10.12571289 4.62375 -11.53320312 4.75 C-12.49162109 4.8325 -13.45003906 4.915 -14.4375 5 C-16.33228449 5.1637626 -18.22682957 5.33032483 -20.12109375 5.5 C-20.9608374 5.5721875 -21.80058105 5.644375 -22.66577148 5.71875 C-24.95147089 5.94151066 -24.95147089 5.94151066 -26.93505859 6.50170898 C-29.59937898 7.14463614 -32.18209089 7.29396386 -34.91796875 7.47265625 C-36.20010254 7.56377686 -37.48223633 7.65489746 -38.80322266 7.7487793 C-39.51053528 7.79900238 -40.2178479 7.84922546 -40.94659424 7.90097046 C-55.43515272 8.94533843 -69.87213652 10.37886736 -84.30859375 11.9765625 C-85.11611525 12.06584707 -85.92363674 12.15513165 -86.75562859 12.24712181 C-95.01324009 13.16161828 -103.26940377 14.08837288 -111.52384663 15.03104019 C-114.68288846 15.39079792 -117.84243727 15.74596666 -121.0020771 16.10042953 C-122.48321299 16.26789055 -123.96409445 16.4376205 -125.44468498 16.60983658 C-133.65106943 17.56436424 -141.72797878 18.25812172 -150 18 C-150 16.68 -150 15.36 -150 14 C-136.31293603 12.56380278 -122.61806799 11.37308339 -108.89715576 10.3117981 C-79.98115548 8.06585512 -51.18835597 5.43998178 -22.43310547 1.62524414 C-21.60796448 1.51786926 -20.78282349 1.41049438 -19.93267822 1.29986572 C-18.39685037 1.09994219 -16.86158542 0.89561676 -15.3270874 0.68572998 C-10.18364742 0.02180778 -5.18652976 -0.08077016 0 0 Z \",fill:\"#785A40\",transform:\"translate(150,288)\"})),_path240||(_path240=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.3 0.33 6.6 0.66 10 1 C10 2.32 10 3.64 10 5 C10.66 5.2475 11.32 5.495 12 5.75 C15.76360907 7.31817045 19.3711424 9.14505046 23 11 C23.66 10.34 24.32 9.68 25 9 C25.68513672 9.46374023 26.37027344 9.92748047 27.07617188 10.40527344 C29.6530355 12.14609184 32.23277589 13.88254087 34.81445312 15.61621094 C36.46705502 16.72783944 38.11637594 17.84434065 39.765625 18.9609375 C45.38018139 22.72679849 50.89808985 26.09701272 57 29 C58.69774938 30.29352333 60.36739286 31.62517293 62 33 C63.97455213 34.37606019 65.98275539 35.68644537 68 37 C67.01 37.99 67.01 37.99 66 39 C66.5053125 39.32613281 67.010625 39.65226562 67.53125 39.98828125 C68.1809375 40.42527344 68.830625 40.86226563 69.5 41.3125 C70.1496875 41.74175781 70.799375 42.17101562 71.46875 42.61328125 C71.9740625 43.07089844 72.479375 43.52851563 73 44 C73 44.99 73 45.98 73 47 C71.515 47.495 71.515 47.495 70 48 C67.51708984 46.63769531 67.51708984 46.63769531 64.5859375 44.578125 C63.51182617 43.83498047 62.43771484 43.09183594 61.33105469 42.32617188 C60.77671753 41.93776123 60.22238037 41.54935059 59.65124512 41.14916992 C57.11967451 39.387345 54.54739762 37.68821294 51.9765625 35.984375 C48.70983955 33.80690143 45.44341737 31.62898307 42.17822266 29.44921875 C36.36908653 25.57228746 30.55545994 21.70252788 24.72805786 17.85308838 C21.95049279 16.01775499 19.17519721 14.17900598 16.40008545 12.33996582 C15.05292048 11.44856886 13.70465654 10.5588305 12.35528564 9.67077637 C10.47105331 8.4305 8.59063432 7.18463547 6.7109375 5.9375 C5.63118652 5.22464844 4.55143555 4.51179688 3.43896484 3.77734375 C1 2 1 2 0 0 Z \",fill:\"#604233\",transform:\"translate(499,435)\"})),_path241||(_path241=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.99 0 1.98 0 3 C-1.55712891 4.37866211 -1.55712891 4.37866211 -3.7265625 5.77734375 C-4.51160156 6.29103516 -5.29664063 6.80472656 -6.10546875 7.33398438 C-7.35263672 8.12772461 -7.35263672 8.12772461 -8.625 8.9375 C-9.43324219 9.46279297 -10.24148437 9.98808594 -11.07421875 10.52929688 C-12.65697897 11.55744762 -14.24221466 12.58179909 -15.83007812 13.60205078 C-19.6835409 16.08460342 -23.48098331 18.64068076 -27.25 21.25 C-30 23 -30 23 -32 23 C-32 23.99 -32 24.98 -32 26 C-32.66 26 -33.32 26 -34 26 C-34 26.66 -34 27.32 -34 28 C-32.62714844 27.44119141 -32.62714844 27.44119141 -31.2265625 26.87109375 C-30.03804687 26.39800781 -28.84953125 25.92492187 -27.625 25.4375 C-26.44164062 24.96183594 -25.25828125 24.48617188 -24.0390625 23.99609375 C-21 23 -21 23 -19 24 C-27.10105879 30.48084703 -35.69703935 33.32439602 -46 34 C-46.33 33.34 -46.66 32.68 -47 32 C-47.474375 32.433125 -47.94875 32.86625 -48.4375 33.3125 C-53.10548002 36.38653562 -58.60199859 37.69957239 -64 39 C-64 38.01 -64 37.02 -64 36 C-62.19921875 34.60546875 -62.19921875 34.60546875 -59.6875 33.1875 C-58.31658203 32.40439453 -58.31658203 32.40439453 -56.91796875 31.60546875 C-53.1967169 29.55803299 -49.46960761 27.522412 -45.73046875 25.5078125 C-43.04799116 24.02650156 -40.42888855 22.4696748 -37.8125 20.875 C-33.64000355 18.33812216 -29.39898073 16.11802776 -25 14 C-26.76505435 14.86604534 -28.53728074 15.71748642 -30.3125 16.5625 C-31.29863281 17.03816406 -32.28476562 17.51382812 -33.30078125 18.00390625 C-36 19 -36 19 -39 18 C-38.29746094 17.59007812 -37.59492187 17.18015625 -36.87109375 16.7578125 C-32.80110337 14.26598165 -28.93557387 11.49009462 -25.03515625 8.7421875 C-21.90952717 6.94806836 -19.55954037 6.35011872 -16 6 C-16.66 6.66 -17.32 7.32 -18 8 C-12.90975188 6.69480817 -9.25086058 4.27436913 -5.05078125 1.2421875 C-3 0 -3 0 0 0 Z M-12 1 C-9.75 1.25 -9.75 1.25 -8 2 C-9.98 3.32 -11.96 4.64 -14 6 C-14.66 5.67 -15.32 5.34 -16 5 C-14.25 2.9375 -14.25 2.9375 -12 1 Z \",fill:\"#5F4032\",transform:\"translate(64,453)\"})),_path242||(_path242=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 4.29 1 8.58 1 13 C2.98 12.67 4.96 12.34 7 12 C7.33 13.98 7.66 15.96 8 18 C8.33 18 8.66 18 9 18 C9 20.64 9 23.28 9 26 C8.34 26 7.68 26 7 26 C7.33 29.96 7.66 33.92 8 38 C8.33 38 8.66 38 9 38 C9.02698189 39.62490954 9.04638757 41.24994633 9.0625 42.875 C9.07410156 43.77992188 9.08570313 44.68484375 9.09765625 45.6171875 C9 48 9 48 8 50 C6.35 50 4.7 50 3 50 C1.40861915 45.82262526 0.78721942 42.46839215 1 38 C0.34 38 -0.32 38 -1 38 C-1 36.68 -1 35.36 -1 34 C-1.66 34 -2.32 34 -3 34 C-5.125 32.375 -5.125 32.375 -7 30 C-7.25 26.75 -7.25 26.75 -7 24 C-7.66 24 -8.32 24 -9 24 C-9 22.02 -9 20.04 -9 18 C-9.66 18 -10.32 18 -11 18 C-11 17.01 -11 16.02 -11 15 C-11.66 15 -12.32 15 -13 15 C-13 14.34 -13 13.68 -13 13 C-8.71 13 -4.42 13 0 13 C0 8.71 0 4.42 0 0 Z \",fill:\"#C11F31\",transform:\"translate(305,372)\"})),_path243||(_path243=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C3.78409802 3.06246747 4.22880021 5.22079273 4.125 8.75 C4.10695312 9.54921875 4.08890625 10.3484375 4.0703125 11.171875 C4.04710937 11.77515625 4.02390625 12.3784375 4 13 C4.66 13.33 5.32 13.66 6 14 C3.03 17.465 3.03 17.465 0 21 C0.67546875 20.36191406 1.3509375 19.72382813 2.046875 19.06640625 C2.93890625 18.24011719 3.8309375 17.41382813 4.75 16.5625 C5.63171875 15.73878906 6.5134375 14.91507812 7.421875 14.06640625 C9.78875032 12.16931982 11.0509191 11.37897068 14 11 C13.2575 11.721875 12.515 12.44375 11.75 13.1875 C8.99591028 15.89539371 8.99591028 15.89539371 6.875 18.75 C5 21 5 21 2 22 C0.88220437 25.35338688 0.79732944 28.03251233 0.75 31.5625 C0.72421875 32.71878906 0.6984375 33.87507813 0.671875 35.06640625 C0.78015625 36.03449219 0.8884375 37.00257813 1 38 C1.99 38.66 2.98 39.32 4 40 C2.35 40 0.7 40 -1 40 C-0.9278125 40.70382812 -0.855625 41.40765625 -0.78125 42.1328125 C-0.03065288 50.11833184 0.08020124 57.97987589 0 66 C4.62 66 9.24 66 14 66 C10.36091722 69.63908278 6.70869957 71.84178708 1.625 72.3125 C-1 72 -1 72 -2 71 C-2.13299896 69.5454291 -2.20334692 68.08501299 -2.24609375 66.625 C-2.29540039 65.26955078 -2.29540039 65.26955078 -2.34570312 63.88671875 C-2.40590443 61.99357987 -2.46329419 60.10034904 -2.51757812 58.20703125 C-2.86241086 48.9811289 -3.38113904 41.78029659 -10 35 C-10.598125 34.38125 -11.19625 33.7625 -11.8125 33.125 C-12.204375 32.75375 -12.59625 32.3825 -13 32 C-12.01 31.67 -11.02 31.34 -10 31 C-10.144375 30.16339844 -10.28875 29.32679688 -10.4375 28.46484375 C-11.86498782 19.51330556 -12.22819383 11.05168853 -12 2 C-11.67 2 -11.34 2 -11 2 C-10.34 7.61 -9.68 13.22 -9 19 C-8.01 19 -7.02 19 -6 19 C-6 14.71 -6 10.42 -6 6 C-5.67 6 -5.34 6 -5 6 C-4.32546899 13.68483539 -3.8432436 21.28410183 -4 29 C-3.34 29 -2.68 29 -2 29 C-1.97494385 28.19256348 -1.9498877 27.38512695 -1.92407227 26.55322266 C-1.80834513 22.91031083 -1.68551365 19.26767274 -1.5625 15.625 C-1.52318359 14.35398437 -1.48386719 13.08296875 -1.44335938 11.7734375 C-1.38051758 9.95585937 -1.38051758 9.95585937 -1.31640625 8.1015625 C-1.27974854 6.98088379 -1.24309082 5.86020508 -1.20532227 4.70556641 C-1 2 -1 2 0 0 Z \",fill:\"#09120F\",transform:\"translate(212,343)\"})),_path244||(_path244=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.93 0.495 6.93 0.495 14 1 C14.495 2.98 14.495 2.98 15 5 C15.78375 4.938125 16.5675 4.87625 17.375 4.8125 C18.674375 4.9053125 18.674375 4.9053125 20 5 C22.29633824 8.44450737 22.54016485 10.93812283 23 15 C22.2575 15.4125 21.515 15.825 20.75 16.25 C17.94994288 17.87374445 17.94994288 17.87374445 15.9375 20.1875 C14 22 14 22 10 22 C10 21.34 10 20.68 10 20 C9.34 20 8.68 20 8 20 C8 19.34 8 18.68 8 18 C7.34 18.33 6.68 18.66 6 19 C4.50410924 19.1720634 3.00256654 19.29660885 1.5 19.39453125 C0.613125 19.46349609 -0.27375 19.53246094 -1.1875 19.60351562 C-3.06167025 19.74277689 -4.93674214 19.87039587 -6.8125 19.98632812 C-8.1428125 20.09557617 -8.1428125 20.09557617 -9.5 20.20703125 C-10.3146875 20.2635083 -11.129375 20.31998535 -11.96875 20.37817383 C-14.15003239 20.81833819 -14.15003239 20.81833819 -15.2734375 22.81518555 C-16.30063371 25.90402254 -16.1241295 28.77263308 -16 32 C-15.34 32 -14.68 32 -14 32 C-13.54625 32.804375 -13.0925 33.60875 -12.625 34.4375 C-11.26579005 37.15236193 -11.26579005 37.15236193 -8.8125 37.8125 C-7.9153125 37.9053125 -7.9153125 37.9053125 -7 38 C-7 38.66 -7 39.32 -7 40 C-8.65 40 -10.3 40 -12 40 C-12 39.34 -12 38.68 -12 38 C-12.66 38 -13.32 38 -14 38 C-14 37.34 -14 36.68 -14 36 C-14.66 36 -15.32 36 -16 36 C-16 35.34 -16 34.68 -16 34 C-16.99 34 -17.98 34 -19 34 C-20.9673374 30.71073629 -21.24447228 28.24428419 -21.1875 24.4375 C-21.18105469 23.48746094 -21.17460938 22.53742188 -21.16796875 21.55859375 C-21 19 -21 19 -20 16 C-19.34 16 -18.68 16 -18 16 C-18 15.34 -18 14.68 -18 14 C-17.34 14 -16.68 14 -16 14 C-16 13.34 -16 12.68 -16 12 C-14.68 12 -13.36 12 -12 12 C-12 12.66 -12 13.32 -12 14 C-1.77 14 8.46 14 19 14 C19 12.02 19 10.04 19 8 C12.73 8 6.46 8 0 8 C0 5.36 0 2.72 0 0 Z \",fill:\"#2C2D2E\",transform:\"translate(94,308)\"})),_path245||(_path245=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.52307692 0.49230769 6.52307692 0.49230769 8.9375 3.0625 C9.288125 3.701875 9.63875 4.34125 10 5 C9.34 5 8.68 5 8 5 C8.33 5.66 8.66 6.32 9 7 C9.99 7 10.98 7 12 7 C12.33 5.35 12.66 3.7 13 2 C15 4 15 4 15.5 7.0625 C15.7475 8.5165625 15.7475 8.5165625 16 10 C16.66 10.33 17.32 10.66 18 11 C18.625 13.0625 18.625 13.0625 19 15 C18.01 15.33 17.02 15.66 16 16 C15.67 15.01 15.34 14.02 15 13 C14.01 13.33 13.02 13.66 12 14 C11.34 13.67 10.68 13.34 10 13 C10 15.97 10 18.94 10 22 C9.67 21.01 9.34 20.02 9 19 C8.01 19 7.02 19 6 19 C6.33 21.31 6.66 23.62 7 26 C8.98 26 10.96 26 13 26 C13 26.66 13 27.32 13 28 C13.66 28 14.32 28 15 28 C15 29.65 15 31.3 15 33 C11.37 33 7.74 33 4 33 C3.8046875 31.01432292 3.609375 29.02864583 3.4140625 27.04296875 C3.07334609 24.70011858 3.07334609 24.70011858 1 22 C0.625 19.5 0.625 19.5 1 17 C3 15.1875 3 15.1875 5 14 C5 14.99 5 15.98 5 17 C5.66 16.67 6.32 16.34 7 16 C6.67 13.69 6.34 11.38 6 9 C4.68 8.67 3.36 8.34 2 8 C2 7.34 2 6.68 2 6 C1.34 6 0.68 6 0 6 C0.33 7.32 0.66 8.64 1 10 C0.01 10.66 -0.98 11.32 -2 12 C-2 10.68 -2 9.36 -2 8 C-2.66 8 -3.32 8 -4 8 C-4 8.66 -4 9.32 -4 10 C-4.99 10.495 -4.99 10.495 -6 11 C-5.67 16.94 -5.34 22.88 -5 29 C-3.71387324 27.94021067 -3.71387324 27.94021067 -3.90234375 25.49609375 C-3.91394531 24.48675781 -3.92554688 23.47742188 -3.9375 22.4375 C-3.94652344 21.42558594 -3.95554687 20.41367187 -3.96484375 19.37109375 C-3.97644531 18.58863281 -3.98804688 17.80617187 -4 17 C-2.68 17.33 -1.36 17.66 0 18 C-0.33 20.31 -0.66 22.62 -1 25 C-0.34 25 0.32 25 1 25 C1.66 27.64 2.32 30.28 3 33 C-0.96 33 -4.92 33 -9 33 C-9 22.77 -9 12.54 -9 2 C-8.01 1.67 -7.02 1.34 -6 1 C-5.67 2.65 -5.34 4.3 -5 6 C-4.34 6 -3.68 6 -3 6 C-3 4.35 -3 2.7 -3 1 C-2.01 1.66 -1.02 2.32 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#653829\",transform:\"translate(9,236)\"})),_path246||(_path246=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.50023856 0.14042495 7.00012399 0.28833226 10.5 0.4375 C11.48226563 0.47681641 12.46453125 0.51613281 13.4765625 0.55664062 C19.0373059 0.79760617 24.48855309 1.21921169 30 2 C30 2.66 30 3.32 30 4 C20.43 4 10.86 4 1 4 C1 4.99 1 5.98 1 7 C10.57 7 20.14 7 30 7 C30 9.31 30 11.62 30 14 C29.67 14 29.34 14 29 14 C29 12.02 29 10.04 29 8 C20.09 8 11.18 8 2 8 C2 10.64 2 13.28 2 16 C2.99 16.33 3.98 16.66 5 17 C4.34 17.33 3.68 17.66 3 18 C10.59 18.33 18.18 18.66 26 19 C26 19.33 26 19.66 26 20 C18.41 20 10.82 20 3 20 C3.020625 21.8975 3.04125 23.795 3.0625 25.75 C3.10346196 29.51850046 2.9230348 32.30786078 2 36 C8.93 36.495 8.93 36.495 16 37 C16.05383848 39.45862401 16.09359038 41.9160755 16.125 44.375 C16.15013672 45.42300781 16.15013672 45.42300781 16.17578125 46.4921875 C16.19344267 48.32897486 16.10303261 50.16601963 16 52 C13.4345406 54.5654594 11.52313332 54.54046087 8 55 C7.85304688 54.44570313 7.70609375 53.89140625 7.5546875 53.3203125 C6.14681837 48.51326131 6.14681837 48.51326131 2.3125 45.5625 C-1.4582752 44.92217968 -5.19494119 44.39362677 -9 44 C-9 43.67 -9 43.34 -9 43 C-7.865625 42.87625 -6.73125 42.7525 -5.5625 42.625 C-4.386875 42.41875 -3.21125 42.2125 -2 42 C-0.30973863 38.61947726 -0.75555041 34.77739858 -0.68359375 31.0546875 C-0.66281265 30.1696756 -0.64203156 29.2846637 -0.62062073 28.37283325 C-0.55513402 25.54030259 -0.49624438 22.70767775 -0.4375 19.875 C-0.39431394 17.95702143 -0.35069963 16.03905246 -0.30664062 14.12109375 C-0.19945353 9.41415949 -0.0981836 4.70713033 0 0 Z \",fill:\"#280807\",transform:\"translate(270,302)\"})),_path247||(_path247=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.28 0.33 10.56 0.66 16 1 C16 1.99 16 2.98 16 4 C12.85069107 5.04976964 10.61185544 5.10131595 7.3125 5.0625 C6.31863281 5.05347656 5.32476562 5.04445313 4.30078125 5.03515625 C3.16189453 5.01775391 3.16189453 5.01775391 2 5 C2 5.66 2 6.32 2 7 C5.96 7 9.92 7 14 7 C14.33 8.98 14.66 10.96 15 13 C15.66 13 16.32 13 17 13 C18.625 15 18.625 15 20 17 C18.68 17.33 17.36 17.66 16 18 C16.05220703 19.051875 16.05220703 19.051875 16.10546875 20.125 C16.28894664 26.5554631 15.6553877 31.13601882 13 37 C12.67 36.01 12.34 35.02 12 34 C8.535 33.505 8.535 33.505 5 33 C4.67 31.02 4.34 29.04 4 27 C4.66 26.67 5.32 26.34 6 26 C5.65213292 24.02463255 5.65213292 24.02463255 5 22 C4.34 21.67 3.68 21.34 3 21 C2.67 20.01 2.34 19.02 2 18 C2 18.99 2 19.98 2 21 C1.34 21 0.68 21 0 21 C-0.185625 19.2984375 -0.185625 19.2984375 -0.375 17.5625 C-0.58125 16.386875 -0.7875 15.21125 -1 14 C-1.66 13.67 -2.32 13.34 -3 13 C-3 14.98 -3 16.96 -3 19 C-3.33 19 -3.66 19 -4 19 C-4.19294408 14.17639811 -3.75747614 10.50353262 -2 6 C-2.99 6.495 -2.99 6.495 -4 7 C-5.99960012 7.039992 -8.00047242 7.04346799 -10 7 C-10.33 7.66 -10.66 8.32 -11 9 C-11 8.34 -11 7.68 -11 7 C-11.66 7 -12.32 7 -13 7 C-13 6.34 -13 5.68 -13 5 C-12.22914063 4.97421875 -11.45828125 4.9484375 -10.6640625 4.921875 C-9.66117187 4.86515625 -8.65828125 4.8084375 -7.625 4.75 C-6.62726563 4.70359375 -5.62953125 4.6571875 -4.6015625 4.609375 C-3.74304688 4.40828125 -2.88453125 4.2071875 -2 4 C-1.34 2.68 -0.68 1.36 0 0 Z \",fill:\"#F44047\",transform:\"translate(311,447)\"})),_path248||(_path248=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C1.52112486 4.66903261 0.07619577 8.29053847 -1.88671875 12.48046875 C-3.51932795 16.17532114 -4.78403557 19.98556038 -6.0703125 23.8125 C-7 26 -7 26 -9 27 C-10.44512404 30.6128101 -11 33.06687842 -11 37 C-9.02 35.35 -7.04 33.7 -5 32 C-4.67 33.32 -4.34 34.64 -4 36 C-2.02 35.505 -2.02 35.505 0 35 C-1.35814724 40.43258898 -3.39201904 45.05909857 -6 50 C-6.66 51.32 -7.32 52.64 -8 54 C-13.61 54 -19.22 54 -25 54 C-22.36459 45.46629142 -22.36459 45.46629142 -20.515625 43.1015625 C-18.56945778 40.40301105 -17.93243859 37.82846487 -17.0625 34.625 C-15.60595404 29.63591154 -14.09023615 26.12031486 -11 22 C-10.28426473 20.35380887 -9.5974304 18.69271945 -9 17 C-8.34 17 -7.68 17 -7 17 C-6.896875 16.484375 -6.79375 15.96875 -6.6875 15.4375 C-5.49023375 11.19264692 -4.14734075 7.14734075 -1 4 C-0.3574765 1.93125966 -0.3574765 1.93125966 0 0 Z \",fill:\"#442C24\",transform:\"translate(134,572)\"})),_path249||(_path249=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C1.69971924 1.99476318 2.39943848 1.98952637 3.12036133 1.98413086 C6.35106475 1.96309174 9.58175366 1.95025534 12.8125 1.9375 C14.46282227 1.92493164 14.46282227 1.92493164 16.14648438 1.91210938 C31.12356606 1.86792919 31.12356606 1.86792919 37 3 C37.66 3.66 38.32 4.32 39 5 C35.7 5.66 32.4 6.32 29 7 C34.445 7.495 34.445 7.495 40 8 C40.495 10.475 40.495 10.475 41 13 C37.0625162 13.02946879 33.12506144 13.04695407 29.1875 13.0625 C28.08728516 13.07087891 26.98707031 13.07925781 25.85351562 13.08789062 C19.57390864 13.10641454 13.45893628 12.86083996 7.22338867 12.09448242 C4.03635668 11.95905019 2.42285187 13.00471022 0 15 C-4.77777778 18 -4.77777778 18 -7 18 C-7 18.66 -7 19.32 -7 20 C-7.66 20 -8.32 20 -9 20 C-7.55676531 15.26210835 -5.62773267 11.01141849 -3.375 6.625 C-2.88773437 5.66400391 -2.88773437 5.66400391 -2.390625 4.68359375 C-1.59742593 3.12052499 -0.79922969 1.55999378 0 0 Z \",fill:\"#070304\",transform:\"translate(123,354)\"})),_path250||(_path250=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C16.9145281 -0.23456202 33.04170217 1.47515195 49.7421875 4.0625 C60.58602564 5.704309 71.17516674 6.25312234 82.14892578 6.32592773 C96.00478486 6.43525413 96.00478486 6.43525413 102 11 C102 11.66 102 12.32 102 13 C101.12931885 12.83048828 100.2586377 12.66097656 99.36157227 12.48632812 C94.60930868 11.80793146 89.90129777 12.03472171 85.11390686 12.14172363 C67.00074585 12.49955087 49.62051196 10.5455115 31.73986816 7.82794189 C28.02622967 7.26861635 24.30885337 6.73526778 20.59179688 6.19921875 C13.39081118 5.15709047 6.19419914 4.08810264 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#B3333C\",transform:\"translate(162,472)\"})),_path251||(_path251=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1.0033896 2.51522326 -2.01147831 5.02811104 -3.03515625 7.53515625 C-3.37417969 8.36917969 -3.71320313 9.20320313 -4.0625 10.0625 C-4.40410156 10.89910156 -4.74570313 11.73570312 -5.09765625 12.59765625 C-5.89618456 14.72360823 -6.50421703 16.78686571 -7 19 C-19.6389578 22.89308872 -31.81312166 23.78848481 -45 24 C-44.67 23.34 -44.34 22.68 -44 22 C-43.34 22 -42.68 22 -42 22 C-41.67 20.68 -41.34 19.36 -41 18 C-39.02 17.67 -37.04 17.34 -35 17 C-35 17.66 -35 18.32 -35 19 C-35.99 19.33 -36.98 19.66 -38 20 C-27.93474844 20.45983383 -19.3998828 20.23249696 -10 16 C-9.67 15.67 -9.34 15.34 -9 15 C-13.12973628 15.56739868 -13.12973628 15.56739868 -17 17 C-19.6723621 17.13415472 -22.32250488 17.04318541 -25 17 C-21.21933556 14.96019965 -17.36857026 13.90774025 -13.2421875 12.78125 C-10.83466896 12.12471853 -10.83466896 12.12471853 -9 10 C-9.65226562 10.28875 -10.30453125 10.5775 -10.9765625 10.875 C-15.79957307 12.92371246 -19.65561855 14.54814169 -25 14 C-25.33 14 -25.66 14 -26 14 C-26.33 14.99 -26.66 15.98 -27 17 C-28.65 17.33 -30.3 17.66 -32 18 C-32.125 11.25 -32.125 11.25 -31 9 C-34.54518884 10.39759905 -34.54518884 10.39759905 -38 12 C-36.50521886 8.19510255 -34.30557786 6.33809165 -31 4 C-28.31336187 3.10445396 -26.57047094 2.8441119 -23.796875 2.75390625 C-22.57291016 2.70459961 -22.57291016 2.70459961 -21.32421875 2.65429688 C-19.6238139 2.59366028 -17.92328847 2.53630589 -16.22265625 2.48242188 C-10.72864519 2.25386411 -5.28821876 0 0 0 Z \",fill:\"#E68E81\",transform:\"translate(159,377)\"})),_path252||(_path252=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.67449684 -0.72285184 5.45932488 -0.98892952 9 0 C13.2242756 3.53533795 16.57369789 7.70600625 20 12 C21.16208984 13.41539063 21.16208984 13.41539063 22.34765625 14.859375 C23.82428632 16.6615408 25.29306342 18.47016971 26.75390625 20.28515625 C29.0883059 23.10673495 31.51990598 25.80590712 34 28.5 C47.51281026 43.21441741 47.51281026 43.21441741 51 50 C50.6875 53.3125 50.6875 53.3125 50 56 C48.84960919 54.84960919 47.69955293 53.69888266 46.55078125 52.546875 C45.49083338 51.48959702 44.42545767 50.43774005 43.35546875 49.390625 C39.69128064 45.78433602 36.24062065 42.06031587 32.8828125 38.16796875 C30.7842468 35.75157049 28.645603 33.37470976 26.5 31 C23.2373201 27.38459795 20.0142505 23.7391044 16.81640625 20.06640625 C14.71083512 17.67103608 12.57551312 15.30394858 10.4375 12.9375 C0 1.35616438 0 1.35616438 0 0 Z \",fill:\"#E7BA80\",transform:\"translate(57,0)\"})),_path253||(_path253=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 1.32 0.66 2.64 1 4 C4.96 4 8.92 4 13 4 C13 4.66 13 5.32 13 6 C10.11788698 6.96070434 8.30149956 7.10581883 5.3125 7.0625 C4.10013672 7.04896484 4.10013672 7.04896484 2.86328125 7.03515625 C1.94095703 7.01775391 1.94095703 7.01775391 1 7 C1.32164617 8.95965452 1.32164617 8.95965452 2 11 C3.66279327 12.0064275 5.32983484 13.00585407 7 14 C9.27272629 16.87878663 10.09662353 18.13038823 9.6875 21.8125 C9.460625 22.534375 9.23375 23.25625 9 24 C4.74433453 25.16063604 1.3164922 24.76173392 -3 24 C-3 24.66 -3 25.32 -3 26 C-4.98 26.66 -6.96 27.32 -9 28 C-8.67 24.7 -8.34 21.4 -8 18 C-13.28 18.33 -18.56 18.66 -24 19 C-24 13.39 -24 7.78 -24 2 C-21.69 2 -19.38 2 -17 2 C-17 6.95 -17 11.9 -17 17 C-13.7 17 -10.4 17 -7 17 C-6.34 15.02 -5.68 13.04 -5 11 C-4.34 11 -3.68 11 -3 11 C-3 9.68 -3 8.36 -3 7 C-5.97 7 -8.94 7 -12 7 C-12 6.01 -12 5.02 -12 4 C-10.95199219 3.94392578 -10.95199219 3.94392578 -9.8828125 3.88671875 C-8.97273437 3.82097656 -8.06265625 3.75523437 -7.125 3.6875 C-5.76761719 3.60048828 -5.76761719 3.60048828 -4.3828125 3.51171875 C-1.63778399 3.2117961 -1.63778399 3.2117961 0 0 Z \",fill:\"#0E0604\",transform:\"translate(158,268)\"})),_path254||(_path254=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0 3.96 0 6 0 C6.12117188 0.71027344 6.24234375 1.42054688 6.3671875 2.15234375 C6.53476562 3.07144531 6.70234375 3.99054688 6.875 4.9375 C7.03742188 5.85402344 7.19984375 6.77054687 7.3671875 7.71484375 C7.57601563 8.46894531 7.78484375 9.22304688 8 10 C8.66 10.33 9.32 10.66 10 11 C10 11.99 10 12.98 10 14 C10.84304688 14.12117188 11.68609375 14.24234375 12.5546875 14.3671875 C13.65039062 14.53476562 14.74609375 14.70234375 15.875 14.875 C16.96554687 15.03742188 18.05609375 15.19984375 19.1796875 15.3671875 C22 16 22 16 24 18 C27.63925209 19.14569047 31.29869526 20.07467382 35 21 C35 17.37 35 13.74 35 10 C37.34852528 8.82573736 38.73774065 8.88491827 41.3515625 8.90234375 C42.62773437 8.90717773 42.62773437 8.90717773 43.9296875 8.91210938 C44.81914062 8.92048828 45.70859375 8.92886719 46.625 8.9375 C47.5221875 8.94201172 48.419375 8.94652344 49.34375 8.95117188 C51.56256648 8.96297409 53.78125018 8.97943845 56 9 C56 9.33 56 9.66 56 10 C46.1 10.495 46.1 10.495 36 11 C36 11.99 36 12.98 36 14 C36.804375 13.67 37.60875 13.34 38.4375 13 C45.72209082 10.95520258 51.307147 11.58237293 58 15 C58 15.66 58 16.32 58 17 C59.98 17.33 61.96 17.66 64 18 C64.33 17.34 64.66 16.68 65 16 C65.495 17.98 65.495 17.98 66 20 C59.84765625 20.09765625 59.84765625 20.09765625 58 20 C57.67 19.67 57.34 19.34 57 19 C54.64686445 18.92728259 52.29166332 18.91629132 49.9375 18.9375 C48.64714844 18.94652344 47.35679687 18.95554687 46.02734375 18.96484375 C45.02832031 18.97644531 44.02929688 18.98804688 43 19 C43 17.68 43 16.36 43 15 C41.68 14.67 40.36 14.34 39 14 C39 14.66 39 15.32 39 16 C38.01 16 37.02 16 36 16 C36.01160156 16.69867188 36.02320313 17.39734375 36.03515625 18.1171875 C36.04417969 19.02726562 36.05320312 19.93734375 36.0625 20.875 C36.07410156 21.77992188 36.08570313 22.68484375 36.09765625 23.6171875 C36 26 36 26 35 28 C33.68 28 32.36 28 31 28 C30.67 27.01 30.34 26.02 30 25 C26.18152515 22.93165945 22.78437976 22.78259721 18.5 22.6875 C11.40172918 22.24536535 11.40172918 22.24536535 8.6875 19.625 C7 17 7 17 7 14 C6.01 14.495 6.01 14.495 5 15 C4.68758545 17.71446979 4.48663408 20.33909361 4.375 23.0625 C4.33632813 23.82111328 4.29765625 24.57972656 4.2578125 25.36132812 C4.16326438 27.24047195 4.08053244 29.12020336 4 31 C3.34 31 2.68 31 2 31 C0.90684754 26.4161086 0.67717375 21.87488993 0.4375 17.1875 C0.39431641 16.39923828 0.35113281 15.61097656 0.30664062 14.79882812 C0.20121679 12.86605785 0.10016906 10.93304974 0 9 C0.66 8.67 1.32 8.34 2 8 C2 5.69 2 3.38 2 1 C1.34 0.67 0.68 0.34 0 0 Z \",fill:\"#31311E\",transform:\"translate(369,308)\"})),_path255||(_path255=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 13.2 1 26.4 1 40 C5.57095789 37.71452106 9.17573753 35.58720532 13.25 32.625 C14.1315979 31.98776001 14.1315979 31.98776001 15.03100586 31.33764648 C17.0238342 29.89607536 19.01203177 28.44826502 21 27 C23.38720109 25.26517675 25.77537279 23.53171917 28.16503906 21.80029297 C29.73505302 20.66227267 31.30347661 19.5220543 32.87011719 18.37939453 C43.03627847 11 43.03627847 11 46 11 C46.2784375 10.1028125 46.2784375 10.1028125 46.5625 9.1875 C48.72273753 5.90018201 51.35107655 5.35145313 55 4 C51.67881566 11.25800284 46.26822689 16.76967694 39 20 C36.0625 20.25 36.0625 20.25 34 20 C33.75894531 20.59039062 33.51789063 21.18078125 33.26953125 21.7890625 C31.75571891 24.42542491 30.15111057 25.61113764 27.6875 27.375 C24.79926163 29.52266443 22.38314947 31.52065569 20.1875 34.375 C17.81689556 37.21972533 17.36282966 37.26438101 14 38 C13.195625 38.804375 12.39125 39.60875 11.5625 40.4375 C9 43 9 43 6.4375 43.9375 C3.70600754 44.85853004 3.70600754 44.85853004 2.125 47.9375 C-0.80170038 52.15539173 -4.27614213 53.47036097 -9.25 54.4375 C-11.19281266 54.86216646 -11.19281266 54.86216646 -12.2734375 56.90234375 C-14.43073105 59.523309 -16.17085071 60.08035955 -19.375 61.125 C-20.31085938 61.43695313 -21.24671875 61.74890625 -22.2109375 62.0703125 C-23.13132812 62.37710938 -24.05171875 62.68390625 -25 63 C-26.31871094 63.58394531 -26.31871094 63.58394531 -27.6640625 64.1796875 C-30 65 -30 65 -33 64 C-31.99839844 63.46890625 -30.99679687 62.9378125 -29.96484375 62.390625 C-28.62236564 61.67714013 -27.27991943 60.96359525 -25.9375 60.25 C-25.28072266 59.90195313 -24.62394531 59.55390625 -23.94726562 59.1953125 C-21.96040471 58.13826334 -19.97967479 57.07043826 -18 56 C-17.34475342 55.65259766 -16.68950684 55.30519531 -16.0144043 54.94726562 C-11.56961338 52.52503624 -9.72872101 50.2251164 -7 46 C-5.98663574 45.47567383 -4.97327148 44.95134766 -3.92919922 44.41113281 C-0.90997007 42.38996751 -0.90997007 42.38996751 -0.43243408 40.02380371 C-0.20802182 37.47424036 -0.16939555 34.98125272 -0.1953125 32.421875 C-0.18160614 31.4953009 -0.16789978 30.56872681 -0.15377808 29.61407471 C-0.11643102 26.65889135 -0.12019606 23.70538616 -0.125 20.75 C-0.10687651 18.74476534 -0.08607492 16.73955297 -0.0625 14.734375 C-0.01060483 9.82263485 0.0044275 4.91199929 0 0 Z \",fill:\"#674333\",transform:\"translate(375,163)\"})),_path256||(_path256=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.25031013 7.50930393 2.25031013 7.50930393 1.11328125 9.73828125 C-0.55730222 13.13220346 -1.16606408 16.75890418 -1.9375 20.4375 C-2.28612665 22.04955093 -2.63508776 23.66152957 -2.984375 25.2734375 C-3.15517578 26.06975586 -3.32597656 26.86607422 -3.50195312 27.68652344 C-4.21162041 30.98299754 -4.94365693 34.27354681 -5.6875 37.5625 C-5.91824219 38.59503906 -6.14898437 39.62757813 -6.38671875 40.69140625 C-7 43 -7 43 -8 44 C-8.23287008 45.68183948 -8.41264166 47.3712416 -8.5625 49.0625 C-8.64628906 49.98160156 -8.73007813 50.90070312 -8.81640625 51.84765625 C-8.87699219 52.55792969 -8.93757812 53.26820313 -9 54 C-8.34 54 -7.68 54 -7 54 C-6.34 52.68 -5.68 51.36 -5 50 C-4.67 50 -4.34 50 -4 50 C-4.36102963 57.71856455 -5.26679103 64.87110636 -7.30859375 72.328125 C-7.90071279 74.61631384 -8.29626548 76.78213624 -8.5625 79.125 C-9 82 -9 82 -11 84 C-14.125 84.125 -14.125 84.125 -17 84 C-15.19573525 70.33365426 -15.19573525 70.33365426 -13.875 65.4375 C-13.10493238 62.41223437 -12.63656391 60.08920679 -13 57 C-13.66 56.34 -14.32 55.68 -15 55 C-14.6158717 53.17539058 -14.224214 51.34890667 -13.703125 49.55859375 C-13.09031867 47.3286596 -12.5691984 45.10967407 -12.07421875 42.8515625 C-10.97909295 37.86088846 -9.78828059 32.89754716 -8.5625 27.9375 C-8.35818359 27.09123047 -8.15386719 26.24496094 -7.94335938 25.37304688 C-6.95646088 21.38548504 -5.88434863 17.52444523 -4.41015625 13.6875 C-3.29176411 10.76295103 -2.46572681 8.11816866 -1.875 5.0625 C-1.10021322 1.10021322 -1.10021322 1.10021322 0 0 Z \",fill:\"#39251F\",transform:\"translate(218,542)\"})),_path257||(_path257=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.93217694 1.08909429 4.81383902 2.77793344 7.1875 4.8125 C11.08491956 8.08881684 15.02659598 11.2287061 19.125 14.25 C24.33877972 18.12155182 29.3311767 22.20269042 34.29296875 26.390625 C37.03466477 28.68462167 39.81754004 30.91230563 42.625 33.125 C46.05102475 35.8448554 49.19684528 38.6224683 52.1875 41.8125 C51.1975 42.1425 50.2075 42.4725 49.1875 42.8125 C49.1875 42.1525 49.1875 41.4925 49.1875 40.8125 C48.60484375 40.71324219 48.0221875 40.61398437 47.421875 40.51171875 C44.76000359 39.67872053 43.4670894 38.52459504 41.4375 36.625 C38.00970005 33.49358877 34.4544563 30.74026741 30.65625 28.07421875 C29.92921875 27.44966797 29.92921875 27.44966797 29.1875 26.8125 C29.1875 26.1525 29.1875 25.4925 29.1875 24.8125 C28.61 24.544375 28.0325 24.27625 27.4375 24 C25.15337952 22.79449197 23.23318469 21.38114477 21.1875 19.8125 C25.12220135 24.52457396 29.0697812 28.78361356 33.90234375 32.5859375 C34.32644531 32.99070312 34.75054688 33.39546875 35.1875 33.8125 C35.1875 34.4725 35.1875 35.1325 35.1875 35.8125 C35.74308594 36.05355469 36.29867187 36.29460937 36.87109375 36.54296875 C39.69198525 38.08898854 41.85650636 39.97699289 44.25 42.125 C45.53583984 43.26388672 45.53583984 43.26388672 46.84765625 44.42578125 C49.1251911 46.74894284 50.64796685 48.96057793 52.1875 51.8125 C50.5375 51.4825 48.8875 51.1525 47.1875 50.8125 C46.8575 49.8225 46.5275 48.8325 46.1875 47.8125 C44.87591241 47.10400849 43.53727849 46.44520867 42.1875 45.8125 C40.49283324 44.5577948 38.82767626 43.2626424 37.1875 41.9375 C35.9190625 40.92042969 35.9190625 40.92042969 34.625 39.8828125 C32.1875 37.8125 32.1875 37.8125 30.0625 35.6796875 C28.12864801 33.63310471 28.12864801 33.63310471 25.1875 31.8125 C25.1875 31.1525 25.1875 30.4925 25.1875 29.8125 C24.63964844 29.58175781 24.09179688 29.35101563 23.52734375 29.11328125 C20.52536086 27.44439928 18.2701802 25.33142884 15.75 23 C14.82316406 22.14792969 13.89632813 21.29585938 12.94140625 20.41796875 C12.03261719 19.55816406 11.12382812 18.69835937 10.1875 17.8125 C9.24777344 16.96300781 8.30804688 16.11351562 7.33984375 15.23828125 C5.1875 12.8125 5.1875 12.8125 5.1875 8.8125 C3.53217377 7.79383771 1.86489862 6.79439187 0.1875 5.8125 C-0.4375 3.6875 -0.4375 3.6875 -0.8125 1.8125 C-1.8025 1.4825 -2.7925 1.1525 -3.8125 0.8125 C-1.8125 -0.1875 -1.8125 -0.1875 0 0 Z \",fill:\"#9E6B4C\",transform:\"translate(493.8125,462.1875)\"})),_path258||(_path258=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.81274414 0.00676758 1.81274414 0.00676758 3.66210938 0.01367188 C6.62892772 0.02539843 9.5957204 0.04333201 12.5625 0.0625 C12.5625 3.6925 12.5625 7.3225 12.5625 11.0625 C5.06259325 12.26513656 -2.3557785 12.17508251 -9.9375 12.125 C-11.236875 12.12048828 -12.53625 12.11597656 -13.875 12.11132812 C-17.06254825 12.0996092 -20.24999955 12.08320219 -23.4375 12.0625 C-23.7675 9.0925 -24.0975 6.1225 -24.4375 3.0625 C-16.66333622 -0.82458189 -8.52863324 -0.06048676 0 0 Z \",fill:\"#D2D99C\",transform:\"translate(582.4375,375.9375)\"})),_path259||(_path259=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.99 0 1.98 0 3 C-0.99 3.33 -1.98 3.66 -3 4 C-3.33 4.66 -3.66 5.32 -4 6 C-8.62 5.01 -13.24 4.02 -18 3 C-18 3.66 -18 4.32 -18 5 C-18.64066406 5.20753906 -19.28132813 5.41507812 -19.94140625 5.62890625 C-25.70738682 7.68266088 -29.44552782 9.83683792 -33.4296875 14.51171875 C-36.24438082 17.17937585 -39.59506945 17.12432093 -43.328125 17.09765625 C-44.12734375 17.09443359 -44.9265625 17.09121094 -45.75 17.08789062 C-46.575 17.07951172 -47.4 17.07113281 -48.25 17.0625 C-49.09046875 17.05798828 -49.9309375 17.05347656 -50.796875 17.04882812 C-52.86461401 17.03707961 -54.93231624 17.01914522 -57 17 C-55.125 13.125 -55.125 13.125 -54 12 C-51.13732433 11.92674832 -48.299281 11.90761795 -45.4375 11.9375 C-44.63119141 11.94201172 -43.82488281 11.94652344 -42.99414062 11.95117188 C-40.99606244 11.96299482 -38.99802217 11.98093086 -37 12 C-43.93 11.505 -43.93 11.505 -51 11 C-51 10.34 -51 9.68 -51 9 C-53.31 9.66 -55.62 10.32 -58 11 C-56.1875 8.5 -56.1875 8.5 -54 6 C-53.01 6 -52.02 6 -51 6 C-51.33 4.35 -51.66 2.7 -52 1 C-51.34 1.33 -50.68 1.66 -50 2 C-47.94193236 2.0974081 -45.88068299 2.13076877 -43.8203125 2.1328125 C-41.96212891 2.13474609 -41.96212891 2.13474609 -40.06640625 2.13671875 C-38.76574219 2.13285156 -37.46507812 2.12898438 -36.125 2.125 C-34.18560547 2.13080078 -34.18560547 2.13080078 -32.20703125 2.13671875 C-30.96566406 2.13542969 -29.72429687 2.13414062 -28.4453125 2.1328125 C-27.30594238 2.13168457 -26.16657227 2.13055664 -24.99267578 2.12939453 C-22.44271806 2.01914183 -20.43879356 1.65270282 -18 1 C-16.64338552 0.9337186 -15.28381913 0.91449595 -13.92578125 0.9375 C-12.80139648 0.94910156 -12.80139648 0.94910156 -11.65429688 0.9609375 C-10.88150391 0.97382813 -10.10871094 0.98671875 -9.3125 1 C-6.535726 1.0456331 -3.77805879 1.04723586 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#D54128\",transform:\"translate(168,317)\"})),_path260||(_path260=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 2.64 0 5.28 0 8 C-4.77333748 10.37461486 -9.42827893 12.21225682 -14.625 13.4375 C-24.59276396 15.7925911 -34.19056263 18.64696123 -43.01171875 23.9296875 C-47.65408901 26.42872375 -52.74482917 27.32844818 -58 27 C-58 26.34 -58 25.68 -58 25 C-46.54513739 18.38812278 -35.0565591 11.85676692 -23.12109375 6.140625 C-20.89865524 4.94550153 -18.97848148 3.56125069 -17 2 C-16.34 2.33 -15.68 2.66 -15 3 C-15.33 3.66 -15.66 4.32 -16 5 C-14.68 5.33 -13.36 5.66 -12 6 C-12 5.34 -12 4.68 -12 4 C-10.18821242 3.33139964 -8.37554984 2.66516988 -6.5625 2 C-5.55316406 1.62875 -4.54382813 1.2575 -3.50390625 0.875 C-1 0 -1 0 0 0 Z \",fill:\"#654535\",transform:\"translate(146,419)\"})),_path261||(_path261=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 2.97 0 5.94 0 9 C0.99 9 1.98 9 3 9 C2.67 8.34 2.34 7.68 2 7 C1.960008 5.00039988 1.95653201 2.99952758 2 1 C11.17416578 0.9481794 20.33055472 1.0804782 29.5 1.375 C30.73492187 1.4059375 31.96984375 1.436875 33.2421875 1.46875 C34.43070313 1.50742187 35.61921875 1.54609375 36.84375 1.5859375 C37.90787109 1.6173584 38.97199219 1.6487793 40.06835938 1.68115234 C43.12423548 2.01351195 45.31738776 2.49208321 48 4 C48.495 5.98 48.495 5.98 49 8 C43.06 8 37.12 8 31 8 C30.67 9.65 30.34 11.3 30 13 C33.63 13 37.26 13 41 13 C41.125 18.75 41.125 18.75 40 21 C38.02 21 36.04 21 34 21 C34.33 19.35 34.66 17.7 35 16 C32.36 15.67 29.72 15.34 27 15 C27 12.69 27 10.38 27 8 C26.06800781 8.144375 25.13601562 8.28875 24.17578125 8.4375 C2.25763508 11.62881754 2.25763508 11.62881754 -3 9 C-3 6.36 -3 3.72 -3 1 C-1 0 -1 0 0 0 Z \",fill:\"#C78F74\",transform:\"translate(221,259)\"})),_path262||(_path262=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C3.32891096 4.02700444 3.32891096 4.02700444 6.0625 4.6875 C6.98160156 4.93886719 7.90070313 5.19023437 8.84765625 5.44921875 C9.55792969 5.63097656 10.26820313 5.81273437 11 6 C11 5.34 11 4.68 11 4 C14.06393013 3.74467249 15.63233212 3.78138667 18.3125 5.375 C18.869375 5.91125 19.42625 6.4475 20 7 C20 7.66 20 8.32 20 9 C21.98 9 23.96 9 26 9 C25.67 10.98 25.34 12.96 25 15 C24.01 15 23.02 15 22 15 C22 16.65 22 18.3 22 20 C20.68 20 19.36 20 18 20 C18 19.34 18 18.68 18 18 C16.68 17.67 15.36 17.34 14 17 C14 17.99 14 18.98 14 20 C13.34 20 12.68 20 12 20 C12.33 17.03 12.66 14.06 13 11 C11.081875 10.814375 11.081875 10.814375 9.125 10.625 C5.25 10.25 5.25 10.25 3 8 C2.67 10.31 2.34 12.62 2 15 C0.35 15.66 -1.3 16.32 -3 17 C-3 17.99 -3 18.98 -3 20 C-3.66 20 -4.32 20 -5 20 C-5 19.34 -5 18.68 -5 18 C-5.598125 18.20625 -6.19625 18.4125 -6.8125 18.625 C-9 19 -9 19 -12 17 C-12.29296875 14.3984375 -12.29296875 14.3984375 -12.1875 11.375 C-12.16042969 10.37210938 -12.13335937 9.36921875 -12.10546875 8.3359375 C-12.05326172 7.17964844 -12.05326172 7.17964844 -12 6 C-11.34 5.67 -10.68 5.34 -10 5 C-10.66 4.67 -11.32 4.34 -12 4 C-12 3.01 -12 2.02 -12 1 C-7.915021 0.45533613 -4.1274515 0 0 0 Z \",fill:\"#392E2B\",transform:\"translate(128,224)\"})),_path263||(_path263=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C9.57 0 19.14 0 29 0 C28.67 7.59 28.34 15.18 28 23 C22.72 23 17.44 23 12 23 C11.67 22.34 11.34 21.68 11 21 C8.69 21 6.38 21 4 21 C4 19.35 4 17.7 4 16 C7.3 16 10.6 16 14 16 C14 14.35 14 12.7 14 11 C13.34 11 12.68 11 12 11 C12 7.7 12 4.4 12 1 C8.04 1 4.08 1 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#65180F\",transform:\"translate(472,261)\"})),_path264||(_path264=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C2.3125 2.4375 2.3125 2.4375 1 5 C-1.625 5.8125 -1.625 5.8125 -4 6 C-4.33 6.99 -4.66 7.98 -5 9 C-6.8125 10.31640625 -6.8125 10.31640625 -9 11.5625 C-12.08502827 13.21374548 -12.08502827 13.21374548 -14 16 C-15.75687802 16.99024034 -17.51614234 17.97805252 -19.30859375 18.90234375 C-21.31766868 20.04751017 -21.31766868 20.04751017 -23 23 C-23.99 23 -24.98 23 -26 23 C-26 23.99 -26 24.98 -26 26 C-27.28913487 26.67154933 -28.58140204 27.33708859 -29.875 28 C-30.59429687 28.37125 -31.31359375 28.7425 -32.0546875 29.125 C-34 30 -34 30 -36 30 C-36.495 31.485 -36.495 31.485 -37 33 C-39.19858993 34.71810339 -41.38392668 36.31110619 -43.6875 37.875 C-52.33637008 43.59096587 -52.33637008 43.59096587 -59.125 51.25 C-61 54 -61 54 -62.90234375 54.4609375 C-65.59326904 55.1524602 -66.57832187 56.3397796 -68.4375 58.375 C-71.10949895 61.17831514 -73.61960416 63.08139695 -77 65 C-77.680625 65.680625 -78.36125 66.36125 -79.0625 67.0625 C-80.97109786 68.97109786 -82.56265694 69.90739794 -85 71 C-85.495 71.495 -85.495 71.495 -86 72 C-87.99958364 72.04080783 -90.00045254 72.04254356 -92 72 C-88.49233434 68.36266093 -84.81715844 65.14836079 -80.8125 62.0625 C-80.21373047 61.59650391 -79.61496094 61.13050781 -78.99804688 60.65039062 C-77.69469564 59.636673 -76.39012333 58.62452379 -75.08447266 57.61376953 C-72.91194768 55.93183112 -70.74271322 54.24572492 -68.57421875 52.55859375 C-67.82350098 51.97456787 -67.0727832 51.39054199 -66.29931641 50.78881836 C-65.54054199 50.1985083 -64.78176758 49.60819824 -64 49 C-62.4596445 47.80207165 -60.91928002 46.60415486 -59.37890625 45.40625 C-58.63656738 44.82875 -57.89422852 44.25125 -57.12939453 43.65625 C-55.78957477 42.61413383 -54.44944957 41.5724101 -53.10888672 40.53125 C-46.20980133 35.16889161 -39.41191223 29.70510791 -32.6875 24.125 C-26.7821345 19.23640319 -20.81674107 14.43718799 -14.75 9.75 C-14.04705811 9.20102051 -13.34411621 8.65204102 -12.61987305 8.08642578 C-9.16863211 5.4436176 -6.12738005 3.47621622 -2 2 C-1.34 1.34 -0.68 0.68 0 0 Z \",fill:\"#41201A\",transform:\"translate(492,98)\"})),_path265||(_path265=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C12.56369154 -0.58247636 24.42213824 1.04306489 36.80987549 2.99237061 C56.17835801 6.01516374 74.64278618 7.79099627 94.23925781 7.03027344 C97.92055251 6.98990551 101.37104221 7.40552525 105 8 C105 8.66 105 9.32 105 10 C103.35 10 101.7 10 100 10 C100 10.66 100 11.32 100 12 C66.37757505 14.11319394 66.37757505 14.11319394 52.05078125 10.6171875 C44.97070022 8.95243331 37.8567154 7.65329277 30.6875 6.4375 C29.42526611 6.22134033 28.16303223 6.00518066 26.86254883 5.7824707 C17.93164681 4.27400033 9.00797642 2.95044791 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#14090A\",transform:\"translate(160,476)\"})),_path266||(_path266=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.94956528 1.36944102 5.52468811 2.87830409 8 5 C8 5.66 8 6.32 8 7 C8.54785156 7.23847656 9.09570312 7.47695313 9.66015625 7.72265625 C12.57231611 9.312433 14.9036209 11.29723319 17.4375 13.4375 C20.12738104 15.70837315 22.6655874 17.80177572 25.6953125 19.59765625 C28 21 28 21 30.4375 24 C33.49592501 27.74954962 37.06467552 30.56197874 40.875 33.5 C41.48875488 33.97453613 42.10250977 34.44907227 42.73486328 34.93798828 C43.93879638 35.86717685 45.14320959 36.79574375 46.34814453 37.72363281 C48.53019351 39.40967362 50.68867355 41.1160262 52.8125 42.875 C53.41707031 43.36742187 54.02164063 43.85984375 54.64453125 44.3671875 C56.40323253 46.48573832 56.55677281 48.31506607 57 51 C60.22366545 55.77580067 64.46430801 60.15476934 70 62 C70 62.66 70 63.32 70 64 C70.59329102 64.27328125 71.18658203 64.5465625 71.79785156 64.828125 C75.2654679 66.67341973 77.89137614 69.33613952 80.75 72 C81.35199219 72.5465625 81.95398438 73.093125 82.57421875 73.65625 C84.09153882 75.06002911 85.5509654 76.52583763 87 78 C87 78.66 87 79.32 87 80 C80.22514217 79.03216317 76.71545326 75.71545326 72 71 C71.071875 70.443125 70.14375 69.88625 69.1875 69.3125 C68.465625 68.879375 67.74375 68.44625 67 68 C67 67.34 67 66.68 67 66 C66.34 66 65.68 66 65 66 C65 65.34 65 64.68 65 64 C64.34 64 63.68 64 63 64 C63 63.34 63 62.68 63 62 C62.4225 61.773125 61.845 61.54625 61.25 61.3125 C58.4336339 59.66961977 56.91922886 57.60466773 55 55 C55.66 54.67 56.32 54.34 57 54 C50.93985843 48.54394168 50.93985843 48.54394168 44.6875 43.3125 C42 41 42 41 40.125 38.625 C37.63839058 35.55330601 34.83248374 33.17350531 31.8046875 30.6484375 C30 29 30 29 28 26 C27.13375 25.5875 26.2675 25.175 25.375 24.75 C18.97996764 21.4340573 13.99845049 16.12036391 9 11 C8.23945312 10.26136719 7.47890625 9.52273438 6.6953125 8.76171875 C5.86773438 7.95347656 5.04015625 7.14523437 4.1875 6.3125 C3.39730469 5.54550781 2.60710938 4.77851563 1.79296875 3.98828125 C0 2 0 2 0 0 Z \",fill:\"#65412F\",transform:\"translate(515,482)\"})),_path267||(_path267=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.9609375 -0.35644531 1.9609375 -0.35644531 4.375 -0.328125 C5.27009277 -0.32361328 6.16518555 -0.31910156 7.08740234 -0.31445312 C8.52913818 -0.28254883 8.52913818 -0.28254883 10 -0.25 C11.46687256 -0.23356445 11.46687256 -0.23356445 12.96337891 -0.21679688 C21.99033932 -0.08221895 30.99479796 0.37741813 40 1 C40 3.31 40 5.62 40 8 C29.98707052 9.09945892 20.05598201 9.10055982 10 9 C10.99 11.97 11.98 14.94 13 18 C13.68102783 17.98952637 14.36205566 17.97905273 15.0637207 17.96826172 C18.14660966 17.92671122 21.22943971 17.90067689 24.3125 17.875 C25.38435547 17.85824219 26.45621094 17.84148437 27.56054688 17.82421875 C28.58857422 17.81777344 29.61660156 17.81132812 30.67578125 17.8046875 C31.62364502 17.79421387 32.57150879 17.78374023 33.5480957 17.77294922 C36 18 36 18 39 20 C37 22 37 22 34.47802734 22.22705078 C33.4411377 22.21657715 32.40424805 22.20610352 31.3359375 22.1953125 C30.21445312 22.18886719 29.09296875 22.18242187 27.9375 22.17578125 C26.761875 22.15902344 25.58625 22.14226562 24.375 22.125 C23.19164062 22.11597656 22.00828125 22.10695313 20.7890625 22.09765625 C17.85917477 22.07402812 14.9296866 22.04108514 12 22 C11.67 22.66 11.34 23.32 11 24 C10.5978125 22.2984375 10.5978125 22.2984375 10.1875 20.5625 C8.66777288 14.49436972 6.90408721 8.55782208 4 3 C2.02 3 0.04 3 -2 3 C-1.34 2.01 -0.68 1.02 0 0 Z \",fill:\"#885346\",transform:\"translate(310,289)\"})),_path268||(_path268=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.96687744 0.2175293 1.93375488 0.43505859 2.92993164 0.65917969 C8.17096223 1.84310169 13.40009213 3.07571846 18.62794495 4.31637573 C40.48732129 11.14987046 40.48732129 11.14987046 62.25390625 9.94140625 C65.63804145 8.61358526 68.50462171 8.74482938 72.125 8.8125 C73.37925781 8.83054687 74.63351563 8.84859375 75.92578125 8.8671875 C77.35470703 8.90199219 77.35470703 8.90199219 78.8125 8.9375 C78.8125 9.5975 78.8125 10.2575 78.8125 10.9375 C76.02503596 11.7877069 73.23390011 12.61763626 70.4375 13.4375 C69.66277344 13.67597656 68.88804687 13.91445313 68.08984375 14.16015625 C67.30996094 14.38574219 66.53007812 14.61132812 65.7265625 14.84375 C65.0248291 15.05322266 64.3230957 15.26269531 63.60009766 15.47851562 C56.06699988 16.71885753 48.90810915 15.84509459 41.5234375 14.1875 C40.69413727 14.00993164 39.86483704 13.83236328 39.01040649 13.64941406 C36.40059303 13.08833483 33.79412113 12.51320732 31.1875 11.9375 C29.40254688 11.5511437 27.61739188 11.1657188 25.83203125 10.78125 C21.48978336 9.84406605 17.15046952 8.89428342 12.8125 7.9375 C12.8125 7.2775 12.8125 6.6175 12.8125 5.9375 C11.93078125 6.12957031 11.0490625 6.32164062 10.140625 6.51953125 C6.69187688 6.95264868 4.84285623 6.63692276 1.5625 5.625 C-6.55973365 3.38933468 -14.82650975 2.72714908 -23.1875 1.9375 C-22.8575 0.9475 -22.5275 -0.0425 -22.1875 -1.0625 C-15.73831502 -4.28709249 -6.65124465 -1.5726253 0 0 Z \",fill:\"#0C0505\",transform:\"translate(179.1875,483.0625)\"})),_path269||(_path269=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1.96382007 1.50559539 -3.78263366 2.89131683 -6 4 C-6.33 4.66 -6.66 5.32 -7 6 C-9.25957265 6.84457608 -11.549302 7.46890506 -13.87109375 8.12109375 C-16.3425204 8.90991866 -16.3425204 8.90991866 -18 12 C-20.90448512 12.63627666 -23.68645695 13.11916482 -26.625 13.5 C-31.39632506 14.13670071 -35.83669973 14.81581448 -40.3359375 16.58203125 C-44.3692813 18.1429095 -46.76214872 18.2648657 -51 18 C-51 17.34 -51 16.68 -51 16 C-52.65 16 -54.3 16 -56 16 C-56 15.67 -56 15.34 -56 15 C-50.555 14.505 -50.555 14.505 -45 14 C-45 13.01 -45 12.02 -45 11 C-42.03 11 -39.06 11 -36 11 C-36.33 10.34 -36.66 9.68 -37 9 C-41.62 9 -46.24 9 -51 9 C-36.64717909 -0.56854727 -16.59802162 -1.07533815 0 0 Z \",fill:\"#39443D\",transform:\"translate(556,204)\"})),_path270||(_path270=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 3 0 3 -2.0625 5.3125 C-3.0215625 6.6428125 -3.0215625 6.6428125 -4 8 C-3.7525 8.928125 -3.505 9.85625 -3.25 10.8125 C-3 14 -3 14 -4.3125 15.66796875 C-5.68027932 16.96129234 -7.063372 18.23851299 -8.45703125 19.50390625 C-11.60442127 22.59327987 -14.2489073 25.94921427 -16.9375 29.4375 C-17.42186523 30.06527344 -17.90623047 30.69304688 -18.40527344 31.33984375 C-18.85805664 31.92765625 -19.31083984 32.51546875 -19.77734375 33.12109375 C-22 36 -22 36 -23 37 C-25.18639453 37.07258946 -27.37500389 37.08373783 -29.5625 37.0625 C-31.35880859 37.04896484 -31.35880859 37.04896484 -33.19140625 37.03515625 C-34.11824219 37.02355469 -35.04507813 37.01195312 -36 37 C-35.30829755 33.52692559 -34.21007079 31.99576758 -31.6015625 29.5703125 C-28.79850838 26.82195212 -26.31603004 23.77767957 -23.76953125 20.79296875 C-23.18558594 20.20128906 -22.60164063 19.60960937 -22 19 C-21.34 19 -20.68 19 -20 19 C-19.73703125 18.42507813 -19.4740625 17.85015625 -19.203125 17.2578125 C-16.60343493 12.37917334 -13.10012426 7.79804722 -7.875 5.8125 C-6.92625 5.544375 -5.9775 5.27625 -5 5 C-2.16540517 2.50041345 -2.16540517 2.50041345 0 0 Z \",fill:\"#482E27\",transform:\"translate(36,589)\"})),_path271||(_path271=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.10066772 1.16293579 -0.10066772 1.16293579 -0.20336914 2.34936523 C-0.98057083 11.79204864 -1.30825956 21.21515807 -1.51757812 30.68554688 C-1.55173828 31.83216797 -1.58589844 32.97878906 -1.62109375 34.16015625 C-1.65867798 35.70135132 -1.65867798 35.70135132 -1.69702148 37.27368164 C-1.99856077 39.98704926 -2.61162647 41.67493435 -4 44 C-7.34227002 33.97318993 -4.76936031 20.45505704 -4 10 C-4.71027344 10.01160156 -5.42054688 10.02320313 -6.15234375 10.03515625 C-7.07144531 10.04417969 -7.99054688 10.05320312 -8.9375 10.0625 C-10.31228516 10.07990234 -10.31228516 10.07990234 -11.71484375 10.09765625 C-14 10 -14 10 -15 9 C-17.53049402 8.92686433 -20.03304837 8.90752473 -22.5625 8.9375 C-23.27341797 8.94201172 -23.98433594 8.94652344 -24.71679688 8.95117188 C-26.47790013 8.96299136 -28.23896036 8.98092737 -30 9 C-30 9.99 -30 10.98 -30 12 C-31.98 12 -33.96 12 -36 12 C-36 12.99 -36 13.98 -36 15 C-49.86 14.67 -63.72 14.34 -78 14 C-78 13.67 -78 13.34 -78 13 C-72.57271071 12.25241751 -67.25547655 11.81384091 -61.78125 11.68359375 C-60.66623108 11.6524221 -60.66623108 11.6524221 -59.52868652 11.62062073 C-57.18587252 11.55594872 -54.84295976 11.49662908 -52.5 11.4375 C-50.89842784 11.39423616 -49.29686518 11.35061956 -47.6953125 11.30664062 C-43.79697267 11.20035364 -39.8985349 11.09886206 -36 11 C-36 10.01 -36 9.02 -36 8 C-34.68 8 -33.36 8 -32 8 C-32 7.34 -32 6.68 -32 6 C-33.98 6 -35.96 6 -38 6 C-38 5.67 -38 5.34 -38 5 C-37.38592285 4.95512451 -36.7718457 4.91024902 -36.13916016 4.86401367 C-33.30011352 4.64995222 -30.46269109 4.41881372 -27.625 4.1875 C-26.17673828 4.08211914 -26.17673828 4.08211914 -24.69921875 3.97460938 C-18.94442267 3.49182447 -13.81387503 2.55030006 -8.36474609 0.61450195 C-5.5169178 -0.12553354 -2.92982663 -0.09635851 0 0 Z \",fill:\"#200A09\",transform:\"translate(152,396)\"})),_path272||(_path272=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C17.16 0 34.32 0 52 0 C52 3.3 52 6.6 52 10 C49.37518273 10.33482863 46.75016613 10.6679277 44.125 11 C43.00544922 11.14308594 43.00544922 11.14308594 41.86328125 11.2890625 C36.2265625 12 36.2265625 12 34 12 C33.505 9.03 33.505 9.03 33 6 C22.11 6 11.22 6 0 6 C0 5.34 0 4.68 0 4 C1.32 4 2.64 4 4 4 C4 3.34 4 2.68 4 2 C2.68 1.67 1.36 1.34 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#FBCD61\",transform:\"translate(172,270)\"})),_path273||(_path273=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3 1.99 3 2.98 3 4 C3.66 4 4.32 4 5 4 C5 4.66 5 5.32 5 6 C5.66 5.67 6.32 5.34 7 5 C7.65213292 2.97536745 7.65213292 2.97536745 8 1 C9.32 1.66 10.64 2.32 12 3 C12.66 2.34 13.32 1.68 14 1 C14.99 1.66 15.98 2.32 17 3 C17 2.34 17 1.68 17 1 C17.99 0.67 18.98 0.34 20 0 C20.3403125 0.928125 20.3403125 0.928125 20.6875 1.875 C22.37929835 4.61410209 23.99244161 5.05024472 27 6 C27 6.99 27 7.98 27 9 C26.01 9 25.02 9 24 9 C24.33 9.66 24.66 10.32 25 11 C25.99 10.67 26.98 10.34 28 10 C28 11.65 28 13.3 28 15 C26.68 14.67 25.36 14.34 24 14 C24.33 17.3 24.66 20.6 25 24 C23.02 24.33 21.04 24.66 19 25 C19 24.34 19 23.68 19 23 C19.66 23 20.32 23 21 23 C20.814375 21.906875 20.62875 20.81375 20.4375 19.6875 C20 16 20 16 21 13 C21 11.68 21 10.36 21 9 C19.68 8.67 18.36 8.34 17 8 C17.66 11.63 18.32 15.26 19 19 C18.34 19 17.68 19 17 19 C17.33 20.98 17.66 22.96 18 25 C15 25 15 25 13.3125 23.5 C12.879375 23.005 12.44625 22.51 12 22 C11.67 22.66 11.34 23.32 11 24 C10.34 22.02 9.68 20.04 9 18 C8.34 18.99 7.68 19.98 7 21 C3.60582235 17.87378374 1.3937282 15.43458973 0 11 C0.66 11 1.32 11 2 11 C2.79356801 9.25328412 2.79356801 9.25328412 3 7 C1.60907108 4.37612865 1.60907108 4.37612865 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#AA604D\",transform:\"translate(34,233)\"})),_path274||(_path274=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.09145235 1.87992087 9.72322392 4.48239564 14.47265625 7.078125 C17.92021536 8.94468226 21.31234851 10.6384056 25 12 C25 14.64 25 17.28 25 20 C19.20573222 20.02511184 13.41149755 20.04305026 7.6171875 20.05493164 C5.65461677 20.05989571 3.6920496 20.06666917 1.72949219 20.07543945 C-10.88701486 20.1303219 -23.41174005 19.86758248 -36 19 C-36 17.35 -36 15.7 -36 14 C-30.94766644 13.82873446 -26.37827932 14.0499694 -21.40625 14.96875 C-12.36772442 16.40883176 -3.31892606 16.46014492 5.8125 16.625 C7.58400142 16.66328169 9.35548626 16.70233889 11.12695312 16.7421875 C15.41783037 16.83705004 19.708794 16.92147313 24 17 C24 16.34 24 15.68 24 15 C11.13 15 -1.74 15 -15 15 C-15 14.67 -15 14.34 -15 14 C-9.39 14 -3.78 14 2 14 C2 11.03 2 8.06 2 5 C2.33 5 2.66 5 3 5 C3.495 9.455 3.495 9.455 4 14 C4.66 13.67 5.32 13.34 6 13 C6.50125283 9.66857722 6.50125283 9.66857722 6 6 C3.09587454 3.64677204 3.09587454 3.64677204 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#5A4337\",transform:\"translate(375,412)\"})),_path275||(_path275=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 3.84772449 -0.97109641 4.41474588 -3.5625 7.1875 C-4.36945312 8.05761719 -5.17640625 8.92773438 -6.0078125 9.82421875 C-7.00517947 10.88283969 -8.00257854 11.9414304 -9 13 C-10.28958465 14.38102302 -11.57861177 15.7625668 -12.8671875 17.14453125 C-23.06643935 28.06643935 -23.06643935 28.06643935 -26 31 C-26 31.99 -26 32.98 -26 34 C-23.36098165 32.96324279 -22.04068509 32.05085636 -20.25 29.8125 C-18.316351 27.39543874 -16.53136211 25.66555704 -14.1875 23.6875 C-10.02101128 20.13855839 -6.49311818 16.20265782 -3 12 C-3 16.39895123 -5.79621101 18.36507664 -8.6875 21.375 C-9.48317383 22.22191406 -9.48317383 22.22191406 -10.29492188 23.0859375 C-13.46993071 26.45183643 -16.71714972 29.73903539 -20 33 C-20.64582031 33.65742187 -21.29164062 34.31484375 -21.95703125 34.9921875 C-25.22101859 38.3042757 -28.51647583 41.49000274 -32.0625 44.5 C-35.60231974 47.50537637 -38.44437612 50.81187647 -41.26171875 54.49609375 C-43 56 -43 56 -45.70703125 56.22265625 C-46.46371094 56.14917969 -47.22039063 56.07570313 -48 56 C-45.33741895 51.40431216 -42.37742821 47.30389049 -38.671875 43.49609375 C-38.08043701 42.88781738 -37.48899902 42.27954102 -36.87963867 41.65283203 C-35.67888755 40.43675492 -34.46297684 39.23544197 -33.23168945 38.05029297 C-31.62633964 36.42438248 -30.2102722 34.9394424 -29 33 C-29.2671241 30.99008562 -29.60034827 28.98781025 -30 27 C-28.58217788 24.57888849 -27.28968639 22.72893742 -25.5 20.625 C-25.04383301 20.06208252 -24.58766602 19.49916504 -24.11767578 18.91918945 C-22.76481685 17.26171171 -21.38846901 15.62770191 -20 14 C-19.26523437 13.13503906 -18.53046875 12.27007813 -17.7734375 11.37890625 C-16.20272205 9.56579644 -14.6167635 7.77201562 -13 6 C-12.505 7.485 -12.505 7.485 -12 9 C-11.4740625 8.38125 -11.4740625 8.38125 -10.9375 7.75 C-9.14232961 6.12855578 -7.53733825 5.10553503 -5.4375 3.9375 C-2.05436646 2.23356577 -2.05436646 2.23356577 0 0 Z \",fill:\"#604032\",transform:\"translate(61,570)\"})),_path276||(_path276=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.96 0 7.92 0 12 0 C10.08364692 3.83270616 8.84930553 5.25395077 5.6875 7.9375 C1.67989366 11.39832217 -2.07836975 14.93602677 -5.6875 18.8125 C-7 20 -7 20 -9 20 C-9.25378418 20.57975586 -9.50756836 21.15951172 -9.76904297 21.75683594 C-11.13758615 24.25072223 -12.66997769 25.89743836 -14.6953125 27.890625 C-15.76845703 28.95410156 -15.76845703 28.95410156 -16.86328125 30.0390625 C-17.60964844 30.76867187 -18.35601562 31.49828125 -19.125 32.25 C-19.87910156 32.99507812 -20.63320312 33.74015625 -21.41015625 34.5078125 C-23.26900772 36.3431342 -25.13237005 38.1736191 -27 40 C-27.66 39.67 -28.32 39.34 -29 39 C-26.63024363 35.27609713 -24.35037463 31.90365801 -21 29 C-20.34 29 -19.68 29 -19 29 C-19.33 28.34 -19.66 27.68 -20 27 C-20.54269531 27.51691406 -21.08539063 28.03382813 -21.64453125 28.56640625 C-22.71767578 29.55447266 -22.71767578 29.55447266 -23.8125 30.5625 C-24.87404297 31.55443359 -24.87404297 31.55443359 -25.95703125 32.56640625 C-26.63121094 33.03949219 -27.30539063 33.51257813 -28 34 C-28.99 33.67 -29.98 33.34 -31 33 C-27.45070423 28.30985915 -27.45070423 28.30985915 -25 26.625 C-22.93294753 24.94551987 -22.22348741 23.75543513 -21 21.4375 C-19.00665499 18.01143827 -18.43618 17.42186759 -15 16 C-14.67 15.01 -14.34 14.02 -14 13 C-13.030625 12.71125 -12.06125 12.4225 -11.0625 12.125 C-9.5465625 11.568125 -9.5465625 11.568125 -8 11 C-6.89363605 8.60931266 -6.89363605 8.60931266 -6 6 C-4.37667033 4.61423077 -2.71275535 3.27358732 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#764D3B\",transform:\"translate(102,518)\"})),_path277||(_path277=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3 1.66 3 2.32 3 3 C3.598125 3.268125 4.19625 3.53625 4.8125 3.8125 C7.07100952 5.03854802 8.47062652 5.93534581 10 8 C9.93554688 8.78117187 9.87109375 9.56234375 9.8046875 10.3671875 C9.73280357 13.14009591 9.73280357 13.14009591 11.8984375 15.01953125 C13.12433594 15.90705078 13.12433594 15.90705078 14.375 16.8125 C15.18710938 17.41707031 15.99921875 18.02164063 16.8359375 18.64453125 C18.8569075 20.17694124 18.8569075 20.17694124 21 20 C21.66 16.7 22.32 13.4 23 10 C23.66 10 24.32 10 25 10 C25.12375 11.175625 25.12375 11.175625 25.25 12.375 C25.72806339 15.14749104 25.72806339 15.14749104 28.0625 16.3125 C28.701875 16.539375 29.34125 16.76625 30 17 C30 17.66 30 18.32 30 19 C32.76264289 19.59732819 35.16032769 20 38 20 C37.96744792 21.98567708 37.93489583 23.97135417 37.90234375 25.95703125 C37.91736783 28.20305461 37.91736783 28.20305461 39 31 C39 32.32 39 33.64 39 35 C40.4166747 36.7511573 40.4166747 36.7511573 42 38 C41.505 38.99 41.505 38.99 41 40 C36.01443998 38.03599151 31.81069176 35.70208386 27.5 32.5 C26.9112207 32.07074219 26.32244141 31.64148438 25.71582031 31.19921875 C24.46265983 30.28423361 23.21172991 29.36618678 21.96289062 28.4453125 C19.92430161 26.94426189 17.87716561 25.45549575 15.828125 23.96875 C14.4684663 22.97955649 13.10908416 21.98998274 11.75 21 C11.10611328 20.53142578 10.46222656 20.06285156 9.79882812 19.58007812 C7.39539072 17.81824726 5.11065207 16.11065207 3 14 C3.66 13.34 4.32 12.68 5 12 C5 11.34 5 10.68 5 10 C5.66 10 6.32 10 7 10 C6.67 9.01 6.34 8.02 6 7 C5.34 6.67 4.68 6.34 4 6 C4 5.34 4 4.68 4 4 C2.68 3.34 1.36 2.68 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#2A1F1E\",transform:\"translate(52,76)\"})),_path278||(_path278=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.15224028 0.92961422 2.29659176 1.8690125 3.4375 2.8125 C4.07558594 3.33457031 4.71367188 3.85664062 5.37109375 4.39453125 C7 6 7 6 8 9 C10.29534258 10.13545562 10.29534258 10.13545562 13 11 C14.672233 11.65257873 16.33927151 12.31867549 18 13 C18.7425 13.268125 19.485 13.53625 20.25 13.8125 C22 15 22 15 22.75 17.4375 C23 20 23 20 23 23 C21.02 23.99 21.02 23.99 19 25 C19.33 24.01 19.66 23.02 20 22 C19.34 22 18.68 22 18 22 C18.02320312 22.61488281 18.04640625 23.22976562 18.0703125 23.86328125 C18.09738281 25.07564453 18.09738281 25.07564453 18.125 26.3125 C18.14820312 27.11300781 18.17140625 27.91351563 18.1953125 28.73828125 C18 31 18 31 16 34 C11.73097293 31.25562546 7.63929237 28.55264255 4 25 C3.875 22.4375 3.875 22.4375 4 20 C2.68870078 18.64499081 1.35308313 17.31328657 0 16 C-1.25 12.75 -1.25 12.75 -2 10 C-1.01 10 -0.02 10 1 10 C-0.32 8.68 -1.64 7.36 -3 6 C-2.67 5.34 -2.34 4.68 -2 4 C-0.515 4.99 -0.515 4.99 1 6 C0.34 4.35 -0.32 2.7 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#201718\",transform:\"translate(57,64)\"})),_path279||(_path279=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.39010758 4.63348015 14.16350843 9.98381147 20.97998047 15.40234375 C24.63431909 18.29260142 28.31899855 21.14383573 32 24 C50.80195955 38.61011215 50.80195955 38.61011215 58.63671875 44.92578125 C59.88270598 45.9298197 61.12880039 46.93372516 62.375 47.9375 C62.98730469 48.43072754 63.59960938 48.92395508 64.23046875 49.43212891 C69.6276057 53.75405498 75.14645265 57.90348688 80.72216797 61.99194336 C87.46968297 66.9764313 87.46968297 66.9764313 90 70 C90 70.99 90 71.98 90 73 C91.96876633 74.69630313 93.88673162 76.19536118 96 77.6875 C96.57234375 78.10322266 97.1446875 78.51894531 97.734375 78.94726562 C99.14996532 79.97356861 100.57419631 80.98793399 102 82 C101.505 83.485 101.505 83.485 101 85 C99.515 84.505 99.515 84.505 98 84 C98 83.34 98 82.68 98 82 C97.47664062 81.76152344 96.95328125 81.52304687 96.4140625 81.27734375 C93.24259074 79.59923491 90.32237584 77.59868934 87.375 75.5625 C86.49714844 74.96985352 86.49714844 74.96985352 85.6015625 74.36523438 C82.75397975 72.40262287 80.94206921 70.91310381 79 68 C79.66 68 80.32 68 81 68 C77.33215797 64.095523 73.36170774 60.87350652 69.0859375 57.6484375 C67 56 67 56 65.5390625 54.4765625 C63.99081584 52.87674663 63.99081584 52.87674663 61.734375 51.671875 C58.24121822 49.53605914 55.31721591 46.94859833 52.25 44.25 C46.95381754 39.65523527 41.5901811 35.23473056 36 31 C34.69740666 30.00196737 33.3953793 29.00319585 32.09375 28.00390625 C30.6250604 26.87752541 29.15630863 25.75122562 27.6875 24.625 C26.95354004 24.06184082 26.21958008 23.49868164 25.46337891 22.91845703 C22.10099314 20.34511906 18.73104754 17.78850243 15.3046875 15.30078125 C14.75208252 14.89714355 14.19947754 14.49350586 13.63012695 14.07763672 C12.16575403 13.01259676 10.69445449 11.95709875 9.22265625 10.90234375 C6.99834378 8.99858247 6.17096097 7.62340294 5 5 C3.67479497 4.31731862 2.34187818 3.6492959 1 3 C0.67 2.01 0.34 1.02 0 0 Z \",fill:\"#734C37\",transform:\"translate(499,451)\"})),_path280||(_path280=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.99 2.64 1.98 4 3 C3.34 3 2.68 3 2 3 C2.33 3.66 2.66 4.32 3 5 C4.65 5 6.3 5 8 5 C6.68 5.33 5.36 5.66 4 6 C4 6.66 4 7.32 4 8 C4.66 8.33 5.32 8.66 6 9 C5.04287109 9.29003906 5.04287109 9.29003906 4.06640625 9.5859375 C3.24011719 9.84632813 2.41382813 10.10671875 1.5625 10.375 C0.73878906 10.63023437 -0.08492188 10.88546875 -0.93359375 11.1484375 C-3.17798016 11.80882227 -3.17798016 11.80882227 -4 14 C-0.7 13.67 2.6 13.34 6 13 C6 13.66 6 14.32 6 15 C5.34 15.33 4.68 15.66 4 16 C8.95 16.99 8.95 16.99 14 18 C14 19.65 14 21.3 14 23 C13 24 13 24 10.4375 24.0625 C9.633125 24.041875 8.82875 24.02125 8 24 C8 22.35 8 20.7 8 19 C5.03 19.495 5.03 19.495 2 20 C1.67 21.32 1.34 22.64 1 24 C-0.98 24 -2.96 24 -5 24 C-5 24.99 -5 25.98 -5 27 C-5.66 27 -6.32 27 -7 27 C-7 26.01 -7 25.02 -7 24 C-10.96 24 -14.92 24 -19 24 C-19 24.66 -19 25.32 -19 26 C-21.01822917 25.96744792 -23.03645833 25.93489583 -25.0546875 25.90234375 C-27.08185404 25.87350758 -27.08185404 25.87350758 -29 27 C-29 26.01 -29 25.02 -29 24 C-24.05 23.67 -19.1 23.34 -14 23 C-14.33 21.35 -14.66 19.7 -15 18 C-15.25999016 15.22510499 -15.18451589 12.8138673 -15 10 C-12.09907498 8.06604999 -11.10325263 7.69868059 -7.8125 7.375 C-6.554375 7.25125 -5.29625 7.1275 -4 7 C-4.34444881 4.52733235 -4.34444881 4.52733235 -5 2 C-5.66 1.67 -6.32 1.34 -7 1 C-5.68 1 -4.36 1 -3 1 C-3 1.66 -3 2.32 -3 3 C-2.01 2.67 -1.02 2.34 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#735947\",transform:\"translate(340,247)\"})),_path281||(_path281=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C9.44609045 3.07030603 18.75964272 6.3468355 28 10 C29.46566406 10.56074219 29.46566406 10.56074219 30.9609375 11.1328125 C31.86070312 11.48085937 32.76046875 11.82890625 33.6875 12.1875 C34.47511719 12.49042969 35.26273438 12.79335937 36.07421875 13.10546875 C38 14 38 14 40 16 C42.57061311 16.64767793 42.57061311 16.64767793 45 17 C45 15.68 45 14.36 45 13 C51.27 13 57.54 13 64 13 C63.67 13.99 63.34 14.98 63 16 C60.36 16 57.72 16 55 16 C55 16.66 55 17.32 55 18 C54.34 18 53.68 18 53 18 C53 20.64 53 23.28 53 26 C48.53160785 26.21278058 45.17737474 25.59138085 41 24 C43.475 21.525 43.475 21.525 46 19 C45.32445068 18.98509521 44.64890137 18.97019043 43.95288086 18.95483398 C34.60020128 18.48731708 26.38392058 15.95253659 17.5625 13.0625 C16.11819914 12.60108329 14.67353885 12.1407901 13.22851562 11.68164062 C2.19166815 8.15216228 2.19166815 8.15216228 -3 6 C-2.67 5.34 -2.34 4.68 -2 4 C-2.99 3.01 -3.98 2.02 -5 1 C-2.525 1.495 -2.525 1.495 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#E0BA8B\",transform:\"translate(211,233)\"})),_path282||(_path282=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 2.31 2 4.62 2 7 C11.24 7 20.48 7 30 7 C33 14 33 14 33 17 C19.47 17 5.94 17 -8 17 C-7.34 15.02 -6.68 13.04 -6 11 C-4.02 10.67 -2.04 10.34 0 10 C0 6.7 0 3.4 0 0 Z \",fill:\"#51211F\",transform:\"translate(174,444)\"})),_path283||(_path283=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-2.03936418 2.75623839 -4.08167715 3.50452397 -6.125 4.25 C-7.26195312 4.66765625 -8.39890625 5.0853125 -9.5703125 5.515625 C-13.18871486 6.77915939 -16.85171489 7.81775085 -20.54296875 8.84765625 C-27.51485793 10.8148706 -34.35479063 13.09746538 -41.18994141 15.48867798 C-44.66950114 16.7059604 -48.15320531 17.91127546 -51.63671875 19.1171875 C-52.33912689 19.36062393 -53.04153503 19.60406036 -53.76522827 19.85487366 C-60.65597545 22.23776477 -67.57593877 24.52824827 -74.5 26.8125 C-82.51541914 29.46422192 -90.43579633 32.24113756 -98.31640625 35.26953125 C-106.53954797 38.36207674 -114.8912691 41.1190913 -123.20581055 43.95458984 C-129.45910023 46.08842692 -135.70313108 48.23942041 -141.921875 50.47265625 C-149.23630111 53.09591456 -156.57413246 55.64379713 -163.93554688 58.13183594 C-165.41451176 58.63383963 -166.89202539 59.14013633 -168.36816406 59.65039062 C-170.53643607 60.39937833 -172.70892363 61.13468799 -174.8828125 61.8671875 C-175.86871872 62.21231888 -175.86871872 62.21231888 -176.87454224 62.56442261 C-180.24936561 63.68442841 -182.62770875 64.373269 -186 63 C-175.90170106 59.03165888 -165.67745996 55.52358208 -155.375 52.125 C-144.54295821 48.55004381 -133.78927146 44.80892571 -123.0859375 40.86328125 C-117.24963105 38.71335608 -111.3771208 36.67212557 -105.50146484 34.6328125 C-100.51649781 32.8968802 -95.55555189 31.10662511 -90.60522461 29.27441406 C-74.69701859 23.40070666 -58.59286061 18.11326796 -42.48535156 12.81738281 C-39.92607598 11.97568786 -37.36732166 11.13242075 -34.80859375 10.2890625 C-30.5127516 8.87412597 -26.2150239 7.46505752 -21.915802 6.0604248 C-20.27072583 5.52247159 -18.62608787 4.98317635 -16.98190308 4.44250488 C-14.69636985 3.6916611 -12.40903491 2.94659376 -10.12109375 2.203125 C-9.10178772 1.86655884 -9.10178772 1.86655884 -8.06188965 1.52319336 C-5.24204981 0.61295857 -2.98582611 0 0 0 Z \",fill:\"#403535\",transform:\"translate(626,153)\"})),_path284||(_path284=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 2.64 1 5.28 1 8 C2.84464844 8.09087891 2.84464844 8.09087891 4.7265625 8.18359375 C6.35938427 8.26805005 7.99219627 8.35269547 9.625 8.4375 C10.43324219 8.47681641 11.24148438 8.51613281 12.07421875 8.55664062 C16.45150865 8.78796082 20.68547281 9.16920917 25 10 C25 10.66 25 11.32 25 12 C27.64 12.99 30.28 13.98 33 15 C33 15.33 33 15.66 33 16 C27.67927859 16.56007594 23.86063713 14.93552092 19.07421875 12.875 C17.22164165 11.93522042 17.22164165 11.93522042 16 12 C20.95 13.98 20.95 13.98 26 16 C26 16.66 26 17.32 26 18 C22.30099992 17.11223998 18.65449539 16.05418136 15 15 C16.093125 15.598125 17.18625 16.19625 18.3125 16.8125 C20.29324202 17.89630224 21.82723481 18.81545537 23.375 20.46875 C25.5717723 22.53878544 27.92842565 23.48649117 30.6875 24.6875 C31.68136719 25.12449219 32.67523438 25.56148438 33.69921875 26.01171875 C34.45847656 26.33785156 35.21773437 26.66398437 36 27 C35.01 27.66 34.02 28.32 33 29 C33.71027344 29.31453125 34.42054688 29.6290625 35.15234375 29.953125 C36.53099609 30.59507812 36.53099609 30.59507812 37.9375 31.25 C38.85402344 31.66765625 39.77054688 32.0853125 40.71484375 32.515625 C43 34 43 34 43.81640625 36.171875 C43.90728516 37.07679688 43.90728516 37.07679688 44 38 C38.98818616 36.62175119 33.87227364 34.55777426 30 31 C30 29.68 30 28.36 30 27 C29.42636719 27.17660156 28.85273438 27.35320312 28.26171875 27.53515625 C23.48579007 28.51673745 18.8300533 27.04181665 14.66015625 24.66796875 C13.14002414 23.64155476 11.63444039 22.59324967 10.14453125 21.5234375 C8.16860874 20.1197767 6.1834656 18.91806801 4.0625 17.75 C1 16 1 16 -1 14 C-0.9765625 10.7421875 -0.9765625 10.7421875 -0.625 6.875 C-0.51414062 5.59367187 -0.40328125 4.31234375 -0.2890625 2.9921875 C-0.19367188 2.00476563 -0.09828125 1.01734375 0 0 Z \",fill:\"#724D3C\",transform:\"translate(479,409)\"})),_path285||(_path285=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3.495 4.95 3.495 4.95 4 10 C6.18879809 10.74082397 8.37863934 11.4787409 10.57421875 12.19921875 C12.51521785 12.83996725 14.44684636 13.50907557 16.375 14.1875 C21.27907772 15.28668983 25.99670879 15.16285577 31 15 C30.01 15.33 29.02 15.66 28 16 C28 16.99 28 17.98 28 19 C35.59 19 43.18 19 51 19 C51 19.33 51 19.66 51 20 C44.88023503 20.07447293 38.76073722 20.12875469 32.640625 20.16479492 C30.56115113 20.17982843 28.48170869 20.20026074 26.40234375 20.22631836 C23.40356666 20.26294136 20.40521089 20.27978111 17.40625 20.29296875 C16.02451599 20.31619453 16.02451599 20.31619453 14.61486816 20.33988953 C9.48380807 20.34121027 5.56121292 19.736226 0.83990479 17.72901917 C-1.98788959 16.60857189 -4.83084507 16.25813959 -7.8359375 15.8671875 C-9.67865234 15.61775391 -9.67865234 15.61775391 -11.55859375 15.36328125 C-12.81800781 15.20214844 -14.07742188 15.04101562 -15.375 14.875 C-17.90403845 14.54203112 -20.4327078 14.20624259 -22.9609375 13.8671875 C-24.07259277 13.72394043 -25.18424805 13.58069336 -26.32958984 13.43310547 C-29 13 -29 13 -31 12 C-30.67 11.34 -30.34 10.68 -30 10 C-27.45813394 10.31094086 -24.91651402 10.62370536 -22.375 10.9375 C-21.66214844 11.02451172 -20.94929688 11.11152344 -20.21484375 11.20117188 C-17.07243408 11.5903694 -13.96225233 12.00672731 -10.84375 12.5625 C-7.88902597 13.01707293 -5.11184796 13.09892498 -2.125 13.0625 C-0.67480469 13.04896484 -0.67480469 13.04896484 0.8046875 13.03515625 C1.89136719 13.01775391 1.89136719 13.01775391 3 13 C3 12.01 3 11.02 3 10 C2.42668945 10.01047363 1.85337891 10.02094727 1.26269531 10.03173828 C-19.79900736 10.36544757 -19.79900736 10.36544757 -30 8 C-30 7.01 -30 6.02 -30 5 C-28.62511713 4.97250234 -27.25006609 4.9533836 -25.875 4.9375 C-24.72644531 4.92009766 -24.72644531 4.92009766 -23.5546875 4.90234375 C-20.6306788 5.01411778 -17.88404889 5.50083769 -15 6 C-12.04522291 6.3851178 -9.08541643 6.72380829 -6.125 7.0625 C-4.949375 7.19881836 -4.949375 7.19881836 -3.75 7.33789062 C-1.83348717 7.55992565 0.08323547 7.78014839 2 8 C1.67 7.236875 1.34 6.47375 1 5.6875 C0 3 0 3 0 0 Z \",fill:\"#0E3527\",transform:\"translate(509,393)\"})),_path286||(_path286=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 4.62 0 9.24 0 14 C1.32 14 2.64 14 4 14 C3.67 15.65 3.34 17.3 3 19 C2.67 18.34 2.34 17.68 2 17 C0.02 17 -1.96 17 -4 17 C-3.34 18.98 -2.68 20.96 -2 23 C-12.32141322 22.68428618 -19.29879192 16.14042991 -27 10 C-26.01 9.67 -25.02 9.34 -24 9 C-24 8.34 -24 7.68 -24 7 C-23.28972656 6.79503906 -22.57945312 6.59007812 -21.84765625 6.37890625 C-20.92855469 6.10949219 -20.00945312 5.84007812 -19.0625 5.5625 C-18.14597656 5.29566406 -17.22945312 5.02882813 -16.28515625 4.75390625 C-14.0597507 4.20973949 -14.0597507 4.20973949 -13 3 C-10.66702567 2.95907063 -8.33294775 2.95758277 -6 3 C-6 2.34 -6 1.68 -6 1 C-3 0 -3 0 0 0 Z \",fill:\"#FA1C1B\",transform:\"translate(168,325)\"})),_path287||(_path287=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.24998498 -0.02947599 8.49994303 -0.04695643 12.75 -0.0625 C14.53083984 -0.07506836 14.53083984 -0.07506836 16.34765625 -0.08789062 C38.28072924 -0.14781705 38.28072924 -0.14781705 44.75 3.5625 C45.56984375 4.01753906 46.3896875 4.47257812 47.234375 4.94140625 C48.10835938 5.46541016 48.10835938 5.46541016 49 6 C49 6.66 49 7.32 49 8 C50.32 8.66 51.64 9.32 53 10 C53 10.66 53 11.32 53 12 C53.99 12.33 54.98 12.66 56 13 C56 13.66 56 14.32 56 15 C55.44183594 14.70222656 54.88367188 14.40445312 54.30859375 14.09765625 C51.92162161 12.96273379 49.59661104 12.18328615 47.0625 11.4375 C45.81146484 11.06431641 45.81146484 11.06431641 44.53515625 10.68359375 C39.1726057 9.23760554 33.95567763 8.73755998 28.41796875 8.46484375 C27.60378983 8.42186661 26.7896109 8.37888947 25.95075989 8.33460999 C23.36317181 8.19880855 20.77535614 8.06808321 18.1875 7.9375 C16.42771691 7.84603855 14.66795103 7.75424534 12.90820312 7.66210938 C8.60565858 7.43756332 4.30290282 7.21756784 0 7 C0 4.69 0 2.38 0 0 Z \",fill:\"#3D1A22\",transform:\"translate(209,464)\"})),_path288||(_path288=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.63001953 0.01353516 1.63001953 0.01353516 3.29296875 0.02734375 C4.12441406 0.03894531 4.95585937 0.05054688 5.8125 0.0625 C5.8125 0.7225 5.8125 1.3825 5.8125 2.0625 C2.1825 2.3925 -1.4475 2.7225 -5.1875 3.0625 C3.98460724 5.29959933 13.15769863 7.07646176 22.47119141 8.61621094 C23.39206543 8.77508789 24.31293945 8.93396484 25.26171875 9.09765625 C26.09018311 9.2356665 26.91864746 9.37367676 27.7722168 9.51586914 C29.8125 10.0625 29.8125 10.0625 31.8125 12.0625 C32.37770003 14.71787372 32.55038198 17.35394713 32.8125 20.0625 C31.75933594 19.8459375 30.70617187 19.629375 29.62109375 19.40625 C14.02476555 15.80279733 14.02476555 15.80279733 -1.1875 18.0625 C-1.42984375 17.39863281 -1.6721875 16.73476563 -1.921875 16.05078125 C-3.81797656 11.0552829 -5.63059481 7.12753451 -9.1875 3.0625 C-9.1875 2.4025 -9.1875 1.7425 -9.1875 1.0625 C-5.90230525 -0.03256492 -3.45086585 -0.03710608 0 0 Z \",fill:\"#23322A\",transform:\"translate(476.1875,372.9375)\"})),_path289||(_path289=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 1.65 2 3.3 2 5 C2.61875 4.649375 3.2375 4.29875 3.875 3.9375 C4.926875 3.4734375 4.926875 3.4734375 6 3 C6.66 3.33 7.32 3.66 8 4 C8 4.66 8 5.32 8 6 C9.093125 6 10.18625 6 11.3125 6 C14.875 6 18.4375 6 22 6 C21.67 7.32 21.34 8.64 21 10 C15.375 10.25 15.375 10.25 12 8 C11.67 8.99 11.34 9.98 11 11 C10.67 10.34 10.34 9.68 10 9 C8.68 9 7.36 9 6 9 C6 8.34 6 7.68 6 7 C4.35 7.33 2.7 7.66 1 8 C1.5775 8.32613281 2.155 8.65226563 2.75 8.98828125 C3.4925 9.42527344 4.235 9.86226562 5 10.3125 C5.7425 10.74175781 6.485 11.17101562 7.25 11.61328125 C7.8275 12.07089844 8.405 12.52851563 9 13 C9 13.99 9 14.98 9 16 C8.01 16 7.02 16 6 16 C5.34 15.34 4.68 14.68 4 14 C4.33 14.763125 4.66 15.52625 5 16.3125 C6 19 6 19 6 22 C5.34 22 4.68 22 4 22 C2.5 19.5 2.5 19.5 1 17 C0.34 17 -0.32 17 -1 17 C-1 19.97 -1 22.94 -1 26 C-0.01 26.33 0.98 26.66 2 27 C1.47731534 29.76276177 0.89130413 32.3260876 0 35 C1.98 35.33 3.96 35.66 6 36 C6.33 35.01 6.66 34.02 7 33 C7.33 33.99 7.66 34.98 8 36 C8.33 34.35 8.66 32.7 9 31 C9.33 31.66 9.66 32.32 10 33 C11.64363134 33.72159424 13.31050386 34.39351421 15 35 C15 35.66 15 36.32 15 37 C7.41 37 -0.18 37 -8 37 C-10.25503356 29.10738255 -10.25503356 29.10738255 -10.625 24.75 C-10.73714844 23.50476563 -10.73714844 23.50476563 -10.8515625 22.234375 C-10.96726679 20.492721 -11 18.7454931 -11 17 C-11.15127402 15.43593472 -11.31902522 13.87340748 -11.5 12.3125 C-11.5928125 11.50425781 -11.685625 10.69601563 -11.78125 9.86328125 C-11.8534375 9.24839844 -11.925625 8.63351563 -12 8 C-10.02 8.66 -8.04 9.32 -6 10 C-5.91055658 13.84606725 -6.18850506 17.24683592 -7 21 C-7 21.99 -7 22.98 -7 24 C-7.66 24 -8.32 24 -9 24 C-9 24.66 -9 25.32 -9 26 C-8.38125 25.649375 -7.7625 25.29875 -7.125 24.9375 C-6.42375 24.628125 -5.7225 24.31875 -5 24 C-4.34 24.33 -3.68 24.66 -3 25 C-3.33 21.7 -3.66 18.4 -4 15 C-2.68 15.33 -1.36 15.66 0 16 C-0.33 14.68 -0.66 13.36 -1 12 C-1.99 12.33 -2.98 12.66 -4 13 C-4 12.01 -4 11.02 -4 10 C-3.01 10 -2.02 10 -1 10 C-1.33 8.68 -1.66 7.36 -2 6 C-1.34 5.67 -0.68 5.34 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#53412E\",transform:\"translate(62,232)\"})),_path290||(_path290=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.57636558 1.56605666 8.1865961 4.02263896 12.125 6.75 C17.33579359 10.29617304 22.57063027 13.49682982 28.16015625 16.421875 C32.34611335 18.74804648 36.32818774 21.37308033 40.31860352 24.01782227 C42.87369656 25.69875661 45.08205187 27.02735062 48 28 C48 31.3 48 34.6 48 38 C44.16922882 36.64113464 41.28787577 34.89753237 38.0625 32.4375 C33.84422707 29.30069033 29.56154027 26.37374262 25.125 23.5625 C23.34913622 22.425957 21.57421268 21.28795553 19.79931641 20.14990234 C18.58782443 19.37566528 17.37389969 18.60522326 16.15771484 17.83837891 C14.36417167 16.70111491 12.58747437 15.54097368 10.8125 14.375 C9.76707031 13.70210938 8.72164062 13.02921875 7.64453125 12.3359375 C4.3359245 9.41341632 3.5648246 7.0792022 2 3 C1.34 2.67 0.68 2.34 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#4F3226\",transform:\"translate(578,482)\"})),_path291||(_path291=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.23621094 0.11085938 2.47242188 0.22171875 3.74609375 0.3359375 C4.67550781 0.43132812 5.60492188 0.52671875 6.5625 0.625 C6.5625 1.285 6.5625 1.945 6.5625 2.625 C-12.43990248 8.70984802 -34.37345328 14.30513718 -54.4375 13.625 C-54.1075 12.965 -53.7775 12.305 -53.4375 11.625 C-54.06398438 11.34785156 -54.69046875 11.07070313 -55.3359375 10.78515625 C-56.15320313 10.42292969 -56.97046875 10.06070312 -57.8125 9.6875 C-58.62460937 9.32785156 -59.43671875 8.96820313 -60.2734375 8.59765625 C-61.67433785 7.9680097 -63.06375284 7.31187358 -64.4375 6.625 C-69.65259827 6.23140768 -72.07247244 6.93882919 -76.4375 9.625 C-79.75 9.8125 -79.75 9.8125 -82.4375 9.625 C-78.40057286 5.58807286 -72.42699344 3.90422715 -66.875 3.125 C-63.67060116 3.59109438 -62.10581412 4.23254328 -59.3125 5.6875 C-49.92100118 10.18062639 -37.33900357 6.07139928 -27.5625 4.1875 C-26.39203125 3.97029297 -25.2215625 3.75308594 -24.015625 3.52929688 C-17.22859869 2.27013492 -17.22859869 2.27013492 -10.58203125 0.44140625 C-6.84546036 -0.52870967 -3.83235427 -0.36498612 0 0 Z \",fill:\"#D07362\",transform:\"translate(440.4375,490.375)\"})),_path292||(_path292=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3 10.24 3 19.48 3 29 C2.34 29 1.68 29 1 29 C1 29.66 1 30.32 1 31 C0.34 31 -0.32 31 -1 31 C-1.495 30.01 -1.495 30.01 -2 29 C-5.45043117 27.84985628 -8.35282355 27 -12 27 C-12.33 26.01 -12.66 25.02 -13 24 C-15.50447516 22.78130071 -15.50447516 22.78130071 -18 22 C-18.66 22.99 -19.32 23.98 -20 25 C-20.33 23.68 -20.66 22.36 -21 21 C-21.598125 20.87625 -22.19625 20.7525 -22.8125 20.625 C-25 20 -25 20 -28 18 C-28 18.99 -28 19.98 -28 21 C-31.73487777 20.5020163 -33.81237635 20.12508244 -37 18 C-37.41137202 14.96133201 -37.13193156 12.07840297 -37 9 C-34.03 9.99 -31.06 10.98 -28 12 C-28 10.68 -28 9.36 -28 8 C-25.69 8.66 -23.38 9.32 -21 10 C-21 12.64 -21 15.28 -21 18 C-20.071875 17.814375 -19.14375 17.62875 -18.1875 17.4375 C-15 17 -15 17 -12 18 C-12 18.99 -12 19.98 -12 21 C-11.34 21.33 -10.68 21.66 -10 22 C-10 21.34 -10 20.68 -10 20 C-7.03 20 -4.06 20 -1 20 C-0.67 13.4 -0.34 6.8 0 0 Z \",fill:\"#3B2419\",transform:\"translate(37,120)\"})),_path293||(_path293=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.62 0 9.24 0 14 0 C14.33 8.58 14.66 17.16 15 26 C4.97080292 19.31386861 4.97080292 19.31386861 1.125 16.125 C-4.09960604 11.8697391 -9.51951466 7.91760929 -15 4 C-14.67 3.34 -14.34 2.68 -14 2 C-13.46375 2.309375 -12.9275 2.61875 -12.375 2.9375 C-9.6015043 4.17827439 -6.99957163 4.5909675 -4 5 C-3.67 4.01 -3.34 3.02 -3 2 C0.33537489 3.11179163 1.63707344 4.47411298 4 7 C3.01 5.824375 3.01 5.824375 2 4.625 C0 2 0 2 0 0 Z \",fill:\"#5A6C51\",transform:\"translate(114,118)\"})),_path294||(_path294=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.28798182 0.41474367 8.11690718 1.35224614 12 5 C11.49396008 7.16874252 11.00016187 8.99967627 10 11 C11.98 11.66 13.96 12.32 16 13 C16.33 12.01 16.66 11.02 17 10 C16.34 10 15.68 10 15 10 C14.875 7.625 14.875 7.625 15 5 C17 3 17 3 19.625 2.875 C20.40875 2.91625 21.1925 2.9575 22 3 C22.33 4.32 22.66 5.64 23 7 C26.96 7.33 30.92 7.66 35 8 C35 8.99 35 9.98 35 11 C30.38 11 25.76 11 21 11 C21 11.66 21 12.32 21 13 C21.66 13 22.32 13 23 13 C23 13.66 23 14.32 23 15 C25.31 15 27.62 15 30 15 C30.5625 16.9375 30.5625 16.9375 31 19 C30 20 30 20 26.40234375 20.09765625 C24.91403133 20.0909822 23.42573568 20.07902183 21.9375 20.0625 C21.17888672 20.05798828 20.42027344 20.05347656 19.63867188 20.04882812 C17.75908129 20.0370068 15.87953101 20.01907078 14 20 C14 19.01 14 18.02 14 17 C10.93448401 16.20497132 7.85676844 15.55067798 4.75 14.9375 C3.1825 14.628125 1.615 14.31875 0 14 C0 9.38 0 4.76 0 0 Z \",fill:\"#102314\",transform:\"translate(489,303)\"})),_path295||(_path295=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.763125 0.226875 1.52625 0.45375 2.3125 0.6875 C2.55020551 6.06701261 1.75264292 10.60996851 0.1953125 15.7734375 C-0.13051315 16.88702133 -0.13051315 16.88702133 -0.46292114 18.02310181 C-0.92071221 19.57909953 -1.38317591 21.13372949 -1.85009766 22.68701172 C-2.56559267 25.07281243 -3.26222988 27.46356975 -3.95703125 29.85546875 C-4.4051432 31.37011955 -4.85432382 32.88445469 -5.3046875 34.3984375 C-5.51310272 35.11502533 -5.72151794 35.83161316 -5.93624878 36.56991577 C-6.46068972 38.29493443 -7.06694882 39.99467871 -7.6875 41.6875 C-8.6775 42.1825 -8.6775 42.1825 -9.6875 42.6875 C-9.90336845 36.75111776 -9.39999434 31.39998111 -7.6875 25.6875 C-7.3575 25.3575 -7.0275 25.0275 -6.6875 24.6875 C-6.45674918 23.34002916 -6.27596937 21.98372435 -6.125 20.625 C-5.980625 19.325625 -5.83625 18.02625 -5.6875 16.6875 C-6.3475 17.0175 -7.0075 17.3475 -7.6875 17.6875 C-8.44496142 20.25280879 -9.09705785 22.77105786 -9.6875 25.375 C-10.82120244 30.24194916 -12.08033647 34.94958192 -13.6875 39.6875 C-14.2496517 41.80717291 -14.79177735 43.93227097 -15.3125 46.0625 C-15.70308594 47.65191406 -15.70308594 47.65191406 -16.1015625 49.2734375 C-16.29492188 50.07007813 -16.48828125 50.86671875 -16.6875 51.6875 C-17.3475 51.0275 -18.0075 50.3675 -18.6875 49.6875 C-19.6775 50.6775 -20.6675 51.6675 -21.6875 52.6875 C-20.6434791 46.58304836 -19.13390246 41.3957724 -16.6875 35.6875 C-16.34302476 34.08989437 -16.03287858 32.4846542 -15.75 30.875 C-14.93543179 26.44161238 -13.58940281 22.55437975 -11.828125 18.4140625 C-10.04735501 14.1572904 -8.50986909 9.80870546 -6.93359375 5.47265625 C-4.26330455 -0.49573309 -4.26330455 -0.49573309 0 0 Z \",fill:\"#482F26\",transform:\"translate(225.6875,525.3125)\"})),_path296||(_path296=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C0.66 2 1.32 2 2 2 C2 2.66 2 3.32 2 4 C2.99 4.33 3.98 4.66 5 5 C4.01 7.64 3.02 10.28 2 13 C1.34 12.34 0.68 11.68 0 11 C-2.56916657 10.69400937 -5.04758384 10.48912913 -7.625 10.375 C-8.33140625 10.33632813 -9.0378125 10.29765625 -9.765625 10.2578125 C-11.50998524 10.16352276 -13.25495691 10.08067109 -15 10 C-14.01 11.485 -14.01 11.485 -13 13 C-9.43230448 13.73606499 -9.43230448 13.73606499 -6 14 C-6 13.34 -6 12.68 -6 12 C-5.01 12.33 -4.02 12.66 -3 13 C-7.32437098 17.54684665 -10.70258028 19.65917321 -16.984375 20.28515625 C-19 20 -19 20 -20.765625 18.68359375 C-22 17 -22 17 -22 14 C-22.66 14 -23.32 14 -24 14 C-25.35384615 7.6 -25.35384615 7.6 -23.5625 4.5625 C-23.046875 4.046875 -22.53125 3.53125 -22 3 C-22.66 2.67 -23.32 2.34 -24 2 C-20.37513341 1.66520515 -16.75008583 1.33241184 -13.125 1 C-12.09246094 0.90460938 -11.05992188 0.80921875 -9.99609375 0.7109375 C-9.00996094 0.62070312 -8.02382812 0.53046875 -7.0078125 0.4375 C-5.64100342 0.31181641 -5.64100342 0.31181641 -4.24658203 0.18359375 C-2 0 -2 0 0 0 Z \",fill:\"#030303\",transform:\"translate(102,326)\"})),_path297||(_path297=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3 0.66 3 1.32 3 2 C4.32 2 5.64 2 7 2 C7 1.34 7 0.68 7 0 C7.99 0 8.98 0 10 0 C9.67 0.99 9.34 1.98 9 3 C8.84584611 6.32287269 8.74677585 9.64315247 8.671875 12.96875 C8.45015625 13.9690625 8.2284375 14.969375 8 16 C7.1757251 16.43868408 6.3514502 16.87736816 5.50219727 17.3293457 C2.7451445 18.76497697 2.7451445 18.76497697 2.34057617 21.63549805 C2.32486572 22.66715088 2.30915527 23.69880371 2.29296875 24.76171875 C2.26396484 25.87998047 2.23496094 26.99824219 2.20507812 28.15039062 C2.19927734 29.31763672 2.19347656 30.48488281 2.1875 31.6875 C2.16236328 32.86634766 2.13722656 34.04519531 2.11132812 35.25976562 C2.0523454 38.173512 2.01614629 41.08575228 2 44 C3.12019531 43.37480469 4.24039062 42.74960938 5.39453125 42.10546875 C6.02464111 41.75379639 6.65475098 41.40212402 7.30395508 41.03979492 C9.1046409 40.02656492 9.1046409 40.02656492 10.6875 38.3125 C12.34052058 36.65947942 13.76312956 36.52193644 16 36 C16.33 35.34 16.66 34.68 17 34 C17.66 33.34 18.32 32.68 19 32 C19.99 32 20.98 32 22 32 C22 31.34 22 30.68 22 30 C23.6796875 28.7109375 23.6796875 28.7109375 25.875 27.375 C26.59429687 26.92898437 27.31359375 26.48296875 28.0546875 26.0234375 C30 25 30 25 32 25 C32 24.34 32 23.68 32 23 C34.375 21.3125 34.375 21.3125 37 20 C37.66 20.33 38.32 20.66 39 21 C29.3180814 28.70034101 19.25656587 35.72632749 8.99194336 42.62475586 C6.94863691 43.99812616 6.94863691 43.99812616 4.93188477 45.67407227 C3 47 3 47 0 47 C-0.66 47.66 -1.32 48.32 -2 49 C-2 36.79 -2 24.58 -2 12 C-2.66 12 -3.32 12 -4 12 C-4 11.34 -4 10.68 -4 10 C-4.66 10 -5.32 10 -6 10 C-6 8.02 -6 6.04 -6 4 C-4.68 4 -3.36 4 -2 4 C-2 3.34 -2 2.68 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#BB9F7C\",transform:\"translate(376,156)\"})),_path298||(_path298=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.19844789 -0.14728985 11.80134446 0.32618364 17.875 1.5 C24.68984491 2.73668435 31.05006022 3.29785456 38 3 C35.03 2.67 32.06 2.34 29 2 C29 1.67 29 1.34 29 1 C40.80380812 0.76477017 52.48158211 1.494889 64.25 2.3125 C65.22568939 2.37869537 66.20137878 2.44489075 67.20663452 2.51309204 C85.49476327 3.75399291 103.75164777 5.27307915 122 7 C122 7.66 122 8.32 122 9 C114.07416087 9.10998108 106.28411015 8.82631306 98.390625 8.125 C97.33897156 8.03621582 96.28731812 7.94743164 95.20379639 7.85595703 C91.88543972 7.57537452 88.56769568 7.28828497 85.25 7 C81.91797911 6.71231574 78.58585343 6.42616694 75.25335693 6.14404297 C73.19174809 5.96935924 71.13040622 5.79148463 69.06939697 5.60986328 C58.65601174 4.1952431 58.65601174 4.1952431 49 7 C40.06785369 12.28076342 27.4553295 8.17007562 18 6 C18 5.34 18 4.68 18 4 C17.03578125 3.93941406 16.0715625 3.87882812 15.078125 3.81640625 C13.81484375 3.73261719 12.5515625 3.64882813 11.25 3.5625 C9.37054687 3.44068359 9.37054687 3.44068359 7.453125 3.31640625 C4.81682447 3.07484478 2.51962706 2.75716066 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#B57A5C\",transform:\"translate(504,300)\"})),_path299||(_path299=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.87398437 0.03609375 1.74796875 0.0721875 2.6484375 0.109375 C3.30070312 0.15578125 3.95296875 0.2021875 4.625 0.25 C2.87639846 4.03596297 0.65329075 6.36591357 -2.375 9.25 C-3.138125 10.013125 -3.90125 10.77625 -4.6875 11.5625 C-5.244375 12.119375 -5.80125 12.67625 -6.375 13.25 C-7.035 12.92 -7.695 12.59 -8.375 12.25 C-6.725 10.27 -5.075 8.29 -3.375 6.25 C-4.695 6.58 -6.015 6.91 -7.375 7.25 C-7.375 7.91 -7.375 8.57 -7.375 9.25 C-8.3340625 9.683125 -8.3340625 9.683125 -9.3125 10.125 C-11.52706079 11.07823451 -11.52706079 11.07823451 -12.375 13.25 C-13.035 13.25 -13.695 13.25 -14.375 13.25 C-14.375 13.91 -14.375 14.57 -14.375 15.25 C-16.07235848 16.48141693 -17.77360973 17.70806356 -19.5 18.8984375 C-23.28668897 21.62800913 -25.98728588 24.64562211 -28.5 28.5625 C-29.11875 29.449375 -29.7375 30.33625 -30.375 31.25 C-31.365 31.25 -32.355 31.25 -33.375 31.25 C-33.375 31.91 -33.375 32.57 -33.375 33.25 C-34.84375 34.73046875 -34.84375 34.73046875 -36.875 36.4375 C-37.96361328 37.365625 -37.96361328 37.365625 -39.07421875 38.3125 C-39.83347656 38.951875 -40.59273437 39.59125 -41.375 40.25 C-42.81641911 41.47456845 -44.25410092 42.70355348 -45.6875 43.9375 C-46.32300781 44.47761719 -46.95851563 45.01773438 -47.61328125 45.57421875 C-49.46619187 47.23579304 -49.46619187 47.23579304 -50.98046875 49.45703125 C-51.44066406 50.04871094 -51.90085937 50.64039063 -52.375 51.25 C-53.035 51.25 -53.695 51.25 -54.375 51.25 C-54.375 51.91 -54.375 52.57 -54.375 53.25 C-57.345 53.745 -57.345 53.745 -60.375 54.25 C-57.76997897 47.85585746 -51.57533244 43.62288349 -46.5234375 39.18359375 C-44.77539107 37.61035196 -43.1240522 36.01037275 -41.5 34.3125 C-39.375 32.25 -39.375 32.25 -36.375 31.25 C-36.045 30.26 -35.715 29.27 -35.375 28.25 C-34.715 28.25 -34.055 28.25 -33.375 28.25 C-33.13491211 27.68539062 -32.89482422 27.12078125 -32.64746094 26.5390625 C-31.10864058 23.77083923 -29.2522907 21.86805878 -27.015625 19.625 C-26.14679688 18.75359375 -25.27796875 17.8821875 -24.3828125 16.984375 C-23.47273438 16.08203125 -22.56265625 15.1796875 -21.625 14.25 C-20.28308594 12.89648438 -20.28308594 12.89648438 -18.9140625 11.515625 C-6.98564785 -0.37760259 -6.98564785 -0.37760259 0 0 Z \",fill:\"#442D25\",transform:\"translate(97.375,517.75)\"})),_path300||(_path300=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-2.6253048 2.6253048 -5.20347 3.09466095 -8.7109375 4.12109375 C-11.03071254 4.87332333 -11.03071254 4.87332333 -12.71875 6.4140625 C-16.20327978 8.83652669 -20.08112362 9.74725056 -24.125 10.9375 C-30.16660144 12.77035817 -36.02387254 14.72839685 -41.84375 17.1875 C-45.48032816 18.55780481 -49.19015219 19.2626101 -53 20 C-53 17.36 -53 14.72 -53 12 C-48.19599639 10.25632175 -43.38080318 8.5496455 -38.55297852 6.87304688 C-36.91973715 6.3005078 -35.28968323 5.71877554 -33.66333008 5.12695312 C-22.13673277 0.94193354 -12.26522508 -0.84865496 0 0 Z \",fill:\"#553C30\",transform:\"translate(53,417)\"})),_path301||(_path301=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C12.21 0 24.42 0 37 0 C37 0.33 37 0.66 37 1 C25.12 1 13.24 1 1 1 C1 2.32 1 3.64 1 5 C2.27846802 4.99214478 2.27846802 4.99214478 3.58276367 4.98413086 C6.76033273 4.96703668 9.93787825 4.95452438 13.11547852 4.94506836 C14.48788222 4.94005546 15.86028062 4.93324342 17.23266602 4.92456055 C19.21107651 4.91236143 21.1895268 4.90727752 23.16796875 4.90234375 C24.35672607 4.89710693 25.5454834 4.89187012 26.77026367 4.88647461 C29.64737487 4.98760521 32.20673413 5.33449807 35 6 C35.33 5.01 35.66 4.02 36 3 C36.98204842 6.28128878 37.13412615 9.26975521 37.125 12.6875 C37.12886719 14.14736328 37.12886719 14.14736328 37.1328125 15.63671875 C37 18 37 18 36 19 C36.99 19.33 37.98 19.66 39 20 C38.505 21.485 38.505 21.485 38 23 C37.34 23 36.68 23 36 23 C36.20625 23.5775 36.4125 24.155 36.625 24.75 C37.08661261 27.51967567 36.42944945 28.64561267 35 31 C34.505 27.535 34.505 27.535 34 24 C31.03 23.67 28.06 23.34 25 23 C25.66 22.01 26.32 21.02 27 20 C27.66 20 28.32 20 29 20 C29.18369141 19.15695312 29.18369141 19.15695312 29.37109375 18.296875 C30.0519869 15.81013481 30.99352325 13.59485224 32.0625 11.25 C32.42472656 10.45078125 32.78695312 9.6515625 33.16015625 8.828125 C33.43730469 8.22484375 33.71445312 7.6215625 34 7 C33.34 7 32.68 7 32 7 C31.67 8.65 31.34 10.3 31 12 C20.59546532 12.42954501 10.32277513 11.14073871 0 10 C0 9.67 0 9.34 0 9 C1.98 8.67 3.96 8.34 6 8 C0.06 7.01 0.06 7.01 -6 6 C-6 5.67 -6 5.34 -6 5 C-4.02 5 -2.04 5 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#07140D\",transform:\"translate(423,278)\"})),_path302||(_path302=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 6.27 1 12.54 1 19 C-1.97 19 -4.94 19 -8 19 C-8 19.66 -8 20.32 -8 21 C-4.04 21 -0.08 21 4 21 C4 19.35 4 17.7 4 16 C4.33 16 4.66 16 5 16 C5 17.65 5 19.3 5 21 C10.61 21.33 16.22 21.66 22 22 C22 23.32 22 24.64 22 26 C20.68 26 19.36 26 18 26 C18 26.66 18 27.32 18 28 C13.13707545 30.43146227 6.32701194 29.51533659 1 29 C-1.9849284 27.6821074 -3.54229147 26.24399475 -6 24 C-7.65369357 23.30177383 -9.31727014 22.62501395 -11 22 C-13.95183101 19.04816899 -14.08663988 16.04488053 -15 12 C-14.34 12 -13.68 12 -13 12 C-12.67 12.66 -12.34 13.32 -12 14 C-12 13.01 -12 12.02 -12 11 C-16.55491614 8.79600832 -21.02906176 8.41153737 -26 8 C-26.33 6.35 -26.66 4.7 -27 3 C-32.61 2.67 -38.22 2.34 -44 2 C-44 1.67 -44 1.34 -44 1 C-37.73 1 -31.46 1 -25 1 C-24.67 1.99 -24.34 2.98 -24 4 C-24.33 4.66 -24.66 5.32 -25 6 C-23.824375 5.938125 -22.64875 5.87625 -21.4375 5.8125 C-17.00671958 5.84392397 -13.84610302 6.66217268 -10 9 C-8.54957886 11.31450182 -7.8448419 13.36608114 -7 16 C-5.02 15.34 -3.04 14.68 -1 14 C-0.67 9.38 -0.34 4.76 0 0 Z \",fill:\"#973F47\",transform:\"translate(286,340)\"})),_path303||(_path303=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 3.66666667 2 7.33333333 2 11 C-1.96 10.67 -5.92 10.34 -10 10 C-10.66 11.32 -11.32 12.64 -12 14 C-12.33 13.34 -12.66 12.68 -13 12 C-21.58 12 -30.16 12 -39 12 C-39 9.36 -39 6.72 -39 4 C-37.78098999 4.00785522 -37.78098999 4.00785522 -36.53735352 4.01586914 C-32.87907678 4.03656994 -29.22081233 4.04963803 -25.5625 4.0625 C-24.28310547 4.07087891 -23.00371094 4.07925781 -21.68554688 4.08789062 C-20.47060547 4.09111328 -19.25566406 4.09433594 -18.00390625 4.09765625 C-16.87799072 4.10289307 -15.7520752 4.10812988 -14.59204102 4.11352539 C-12.07029129 4.29545448 -12.07029129 4.29545448 -11 3 C-20.57 3 -30.14 3 -40 3 C-40 2.34 -40 1.68 -40 1 C-36.06731133 0.97526132 -32.13465287 0.95712165 -28.2019043 0.94506836 C-26.20685232 0.93757271 -24.21182214 0.92486655 -22.21679688 0.91210938 C-20.96318359 0.90888672 -19.70957031 0.90566406 -18.41796875 0.90234375 C-17.26063232 0.89710693 -16.1032959 0.89187012 -14.91088867 0.88647461 C-12 1 -12 1 -9 2 C-9 3.65 -9 5.3 -9 7 C-6.03 7 -3.06 7 0 7 C0 4.69 0 2.38 0 0 Z \",fill:\"#8D5444\",transform:\"translate(311,306)\"})),_path304||(_path304=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.62 0 9.24 0 14 0 C14.28571429 10.57142857 14.28571429 10.57142857 12 16 C11.01 16 10.02 16 9 16 C9 19.63 9 23.26 9 27 C1.125 31 1.125 31 0 31 C0 26.05 0 21.1 0 16 C-0.66 16 -1.32 16 -2 16 C-2.2358396 10.22192976 -1.86783046 5.48675196 0 0 Z \",fill:\"#C4B391\",transform:\"translate(352,188)\"})),_path305||(_path305=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.70166232 0.37965767 6.77500866 1.24423418 10.1328125 2.77734375 C11.31846802 3.31512451 11.31846802 3.31512451 12.52807617 3.86376953 C13.34381104 4.23872559 14.1595459 4.61368164 15 5 C17.36294205 6.08358981 19.7260628 7.16665808 22.09179688 8.24414062 C23.68562314 8.97005484 25.27669016 9.70205167 26.86523438 10.43945312 C27.63029297 10.78556641 28.39535156 11.13167969 29.18359375 11.48828125 C29.86993896 11.80321533 30.55628418 12.11814941 31.26342773 12.44262695 C33.08296814 13.2498328 33.08296814 13.2498328 35 12 C36.96875 12.93359375 36.96875 12.93359375 39.5 14.4375 C45.37698951 17.7690914 51.43702553 20.50178298 57.62890625 23.19506836 C61.8167088 25.01853789 65.93430558 26.91221097 70 29 C69.505 27.515 69.505 27.515 69 26 C70.4589426 26.47730838 71.91713496 26.95691042 73.375 27.4375 C74.18710937 27.70433594 74.99921875 27.97117187 75.8359375 28.24609375 C78 29 78 29 80 30 C80 31.98 80 33.96 80 36 C75.87248551 35.39301257 72.6678852 33.96189209 69 32 C69 31.34 69 30.68 69 30 C67.515 29.62875 67.515 29.62875 66 29.25 C62.30431956 28.21129552 59.07117814 26.61984835 55.69921875 24.8046875 C54.01209396 23.85733432 54.01209396 23.85733432 52 24 C59.26 27.63 66.52 31.26 74 35 C74 35.99 74 36.98 74 38 C66.76917006 35.27841497 59.94591132 32.05805537 53.125 28.4375 C52.20203125 27.95603516 51.2790625 27.47457031 50.328125 26.97851562 C46.30892894 24.86115654 42.62583909 22.74090788 39 20 C37.37601473 19.2817496 35.72799658 18.61590012 34.0625 18 C30.42513052 16.65074394 27.31484622 15.00822739 24 13 C22.07494 12.07773778 20.13713225 11.18161317 18.1875 10.3125 C17.21167969 9.87550781 16.23585938 9.43851562 15.23046875 8.98828125 C14.49441406 8.66214844 13.75835938 8.33601563 13 8 C13 7.34 13 6.68 13 6 C12.319375 5.896875 11.63875 5.79375 10.9375 5.6875 C7.32945222 4.84306329 4.34382878 3.60760999 1 2 C0.67 1.34 0.34 0.68 0 0 Z \",fill:\"#936146\",transform:\"translate(546,433)\"})),_path306||(_path306=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.12508244 3.18762365 2.5020163 5.26512223 3 9 C3.825 9.10957031 4.65 9.21914063 5.5 9.33203125 C11.69623146 10.18262999 17.80717471 11.13538726 23.9375 12.375 C29.53029413 13.49720234 35.14550404 14.30484222 40.8046875 15.01171875 C41.49939651 15.09871033 42.19410553 15.1857019 42.90986633 15.27532959 C46.44682547 15.71500241 49.98493588 16.14155347 53.52514648 16.55419922 C55.48689819 16.79227295 55.48689819 16.79227295 57.48828125 17.03515625 C58.66946533 17.1731665 59.85064941 17.31117676 61.06762695 17.45336914 C64 18 64 18 67 20 C69.32387947 20.39387788 71.65793749 20.73486085 74 21 C74 21.33 74 21.66 74 22 C58.69819514 22.72008493 44.06990842 20.52339593 29 18 C29 18.66 29 19.32 29 20 C11.75720574 20.4797068 11.75720574 20.4797068 7 18 C5.32135632 15.662853 4.78566168 13.82838205 4 11 C3.4225 11.2475 2.845 11.495 2.25 11.75 C1.13625 11.87375 1.13625 11.87375 0 12 C-2.25 10.0625 -2.25 10.0625 -4 8 C-2.35 8 -0.7 8 1 8 C0.67 7.34 0.34 6.68 0 6 C-0.039992 4.00039988 -0.04346799 1.99952758 0 0 Z \",fill:\"#A76047\",transform:\"translate(475,282)\"})),_path307||(_path307=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.95211777 1.16767116 6.78324624 2.4487815 10 5 C10.99 5.33 11.98 5.66 13 6 C13 6.66 13 7.32 13 8 C15.97 8.495 15.97 8.495 19 9 C19 9.66 19 10.32 19 11 C19.9590625 11.37125 19.9590625 11.37125 20.9375 11.75 C24.99988351 13.40811572 28.99724906 15.2035584 33 17 C33 17.66 33 18.32 33 19 C33.8353125 19.12375 33.8353125 19.12375 34.6875 19.25 C37.69994803 20.22701017 39.59382333 21.97374596 42 24 C42.66 24.33 43.32 24.66 44 25 C44 27.64 44 30.28 44 33 C39.69308657 33 37.09695499 30.56981111 33.6875 28.1875 C29.23505248 25.10029356 24.89724013 22.3543173 20 20 C17.73133866 18.76278818 15.48133553 17.49082617 13.25 16.1875 C12.12078125 15.54167969 10.9915625 14.89585937 9.828125 14.23046875 C6.53762243 11.63533482 6.09848923 9.94702259 5 6 C2.32357511 3.81509993 2.32357511 3.81509993 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#3C271F\",transform:\"translate(582,477)\"})),_path308||(_path308=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-9.8068199 5.07145234 -19.62091525 7.93155108 -29.60253906 10.37841797 C-36.5104796 12.07454919 -43.33137509 13.95033043 -50.14208984 16.0012207 C-56.30716943 17.83847299 -62.51977563 19.46190915 -68.75 21.0625 C-75.88008831 22.89452854 -82.92610292 24.85385599 -89.9453125 27.078125 C-94.69170921 28.5105414 -99.49973753 29.67909501 -104.31640625 30.84765625 C-107.95981806 31.73328061 -111.58771115 32.67103887 -115.21484375 33.62109375 C-116.29403076 33.90033691 -117.37321777 34.17958008 -118.48510742 34.46728516 C-120.63425747 35.02365676 -122.78162794 35.586956 -124.92700195 36.15771484 C-126.40946411 36.53790771 -126.40946411 36.53790771 -127.921875 36.92578125 C-128.80456055 37.15692627 -129.68724609 37.38807129 -130.59667969 37.6262207 C-133.0923853 38.01436833 -134.62771579 37.79959609 -137 37 C-129.41108292 34.09585351 -121.79674999 31.73831744 -113.9375 29.6875 C-111.63539381 29.07690908 -109.33331114 28.46622948 -107.03125 27.85546875 C-105.86464844 27.54786621 -104.69804687 27.24026367 -103.49609375 26.92333984 C-97.97236751 25.4644898 -92.4545469 23.98388097 -86.9375 22.5 C-85.87450684 22.21439209 -84.81151367 21.92878418 -83.71630859 21.63452148 C-74.00150347 19.01639401 -64.31306363 16.3071116 -54.62890625 13.578125 C-49.09428189 12.02100626 -43.54879448 10.50572548 -38 9 C-32.42354631 7.48602842 -26.85080596 5.96179377 -21.2890625 4.39453125 C-19.40104167 3.8671875 -17.51302083 3.33984375 -15.625 2.8125 C-14.66722656 2.53986328 -13.70945312 2.26722656 -12.72265625 1.98632812 C-11.33240234 1.60057617 -11.33240234 1.60057617 -9.9140625 1.20703125 C-9.0885791 0.9747583 -8.2630957 0.74248535 -7.41259766 0.50317383 C-4.8771389 -0.02562404 -2.5825727 -0.08884602 0 0 Z \",fill:\"#598478\",transform:\"translate(601,184)\"})),_path309||(_path309=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.26779211 2.88002086 4.05824684 5.80598728 5.7734375 9.04296875 C8.91688124 14.88620157 12.24014137 20.60648247 15.625 26.3125 C16.18445313 27.26189453 16.74390625 28.21128906 17.3203125 29.18945312 C20.71922561 34.93366098 20.71922561 34.93366098 24.4140625 40.48828125 C26 43 26 43 25.75 45.875 C25.5025 46.57625 25.255 47.2775 25 48 C19.60678727 46.982859 15.72760961 43.51838135 12.66015625 39.046875 C11.71702172 37.39555049 10.85045581 35.70091161 10 34 C10.33 35.65 10.66 37.3 11 39 C5.95957423 34.89833547 4.40128681 26.80913788 3.74609375 20.58984375 C3.75 18.6875 3.75 18.6875 4 16 C3.34 16 2.68 16 2 16 C1.50113689 13.77691098 1.00542822 11.55323107 0.515625 9.328125 C0.12630359 7.57027986 -0.27720728 5.81556891 -0.6875 4.0625 C-1 2 -1 2 0 0 Z \",fill:\"#03251E\",transform:\"translate(494,340)\"})),_path310||(_path310=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.66 1.32 1.32 2 2 C1.56274274 3.88356975 1.11189302 5.7653561 0.58203125 7.625 C-0.41417784 11.69006796 -0.67573377 15.83573889 -1 20 C-0.34 20.33 0.32 20.66 1 21 C0.01 21 -0.98 21 -2 21 C-2 20.34 -2 19.68 -2 19 C-2.87140625 18.96261719 -3.7428125 18.92523438 -4.640625 18.88671875 C-12.78401155 18.43724612 -20.17748502 17.26027443 -28 15 C-29.28627205 14.63735944 -30.57273984 14.27541265 -31.859375 13.9140625 C-35.24427115 12.95868905 -38.62331277 11.98403459 -42 11 C-42 10.34 -42 9.68 -42 9 C-34.31604457 8.7862269 -27.43659188 8.98329712 -20 11 C-20 10.34 -20 9.68 -20 9 C-21.98 9 -23.96 9 -26 9 C-26 8.34 -26 7.68 -26 7 C-18.74 7 -11.48 7 -4 7 C-3.67 5.68 -3.34 4.36 -3 3 C-2.01 3 -1.02 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#611210\",transform:\"translate(64,383)\"})),_path311||(_path311=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 2.64 0 5.28 0 8 C-14.0550089 9.70733297 -27.84581231 10.26391916 -42 10 C-42.33 8.68 -42.66 7.36 -43 6 C-37.18049237 2.0616262 -32.38225912 1.20851452 -25.4375 0.75 C-24.47183105 0.67410645 -23.50616211 0.59821289 -22.51123047 0.52001953 C-14.99947028 -0.03218688 -7.53121848 -0.23133436 0 0 Z \",fill:\"#E9BFA8\",transform:\"translate(414,463)\"})),_path312||(_path312=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C2.27875 1.814375 3.5575 1.62875 4.875 1.4375 C10.02751066 0.84770546 14.87985373 1.30519936 20 2 C23.07692308 8.4 23.07692308 8.4 22.6875 11.4375 C22.460625 11.953125 22.23375 12.46875 22 13 C20.68 12.01 19.36 11.02 18 10 C18 11.32 18 12.64 18 14 C18.66 14 19.32 14 20 14 C20.66 15.32 21.32 16.64 22 18 C22.66 18 23.32 18 24 18 C24.33 19.32 24.66 20.64 25 22 C23.741875 21.835 22.48375 21.67 21.1875 21.5 C18.73543415 21.17841759 16.48349306 21 14 21 C13.34 18.36 12.68 15.72 12 13 C11.67 13.33 11.34 13.66 11 14 C11.28730055 16.33944736 11.61936779 18.6739143 12 21 C6.25 20.25 6.25 20.25 4 18 C2.66965537 14.4080695 2.92720577 10.78529987 3 7 C2.360625 6.896875 1.72125 6.79375 1.0625 6.6875 C0.381875 6.460625 -0.29875 6.23375 -1 6 C-1.33 5.01 -1.66 4.02 -2 3 C-1.34 3 -0.68 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#9E5844\",transform:\"translate(127,246)\"})),_path313||(_path313=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.91007812 0.00902344 1.82015625 0.01804687 2.7578125 0.02734375 C3.80582031 0.04474609 3.80582031 0.04474609 4.875 0.0625 C4.875 2.0425 4.875 4.0225 4.875 6.0625 C9.495 6.0625 14.115 6.0625 18.875 6.0625 C18.875 4.7425 18.875 3.4225 18.875 2.0625 C14.585 2.0625 10.295 2.0625 5.875 2.0625 C5.875 1.4025 5.875 0.7425 5.875 0.0625 C11.155 0.0625 16.435 0.0625 21.875 0.0625 C22.10286458 2.6015625 22.33072917 5.140625 22.55859375 7.6796875 C22.74489285 10.07360861 22.74489285 10.07360861 23.875 12.0625 C16.945 12.0625 10.015 12.0625 2.875 12.0625 C2.545 13.0525 2.215 14.0425 1.875 15.0625 C-3.075 15.0625 -8.025 15.0625 -13.125 15.0625 C-13.125 14.4025 -13.125 13.7425 -13.125 13.0625 C-9.825 12.4025 -6.525 11.7425 -3.125 11.0625 C-3.785 10.7325 -4.445 10.4025 -5.125 10.0625 C-5.125 9.4025 -5.125 8.7425 -5.125 8.0625 C-6.775 8.0625 -8.425 8.0625 -10.125 8.0625 C-10.125 5.7525 -10.125 3.4425 -10.125 1.0625 C-9.135 1.0625 -8.145 1.0625 -7.125 1.0625 C-4.60024538 -0.19987731 -2.81299534 -0.03606404 0 0 Z \",fill:\"#71131B\",transform:\"translate(305.125,433.9375)\"})),_path314||(_path314=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0 5.28 0 8 0 C8 0.66 8 1.32 8 2 C8.99 2 9.98 2 11 2 C11 2.99 11 3.98 11 5 C11.99 4.67 12.98 4.34 14 4 C14.33 5.65 14.66 7.3 15 9 C15.99 9 16.98 9 18 9 C17.34 11.31 16.68 13.62 16 16 C14.35 16 12.7 16 11 16 C11.33 16.99 11.66 17.98 12 19 C12.99 19.33 13.98 19.66 15 20 C15 20.66 15 21.32 15 22 C13.22880197 21.85866501 11.45804713 21.71176792 9.6875 21.5625 C8.70136719 21.48128906 7.71523438 21.40007812 6.69921875 21.31640625 C4 21 4 21 1 20 C1 19.34 1 18.68 1 18 C-0.65 18 -2.3 18 -4 18 C-4.33 15.36 -4.66 12.72 -5 10 C-4.34 9.67 -3.68 9.34 -3 9 C-2.09274566 6.88672575 -2.09274566 6.88672575 -1.375 4.4375 C-1.11460937 3.61121094 -0.85421875 2.78492188 -0.5859375 1.93359375 C-0.39257812 1.29550781 -0.19921875 0.65742188 0 0 Z \",fill:\"#080408\",transform:\"translate(463,300)\"})),_path315||(_path315=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C1.65 2.33 3.3 2.66 5 3 C5 3.66 5 4.32 5 5 C5.66 5 6.32 5 7 5 C7.33 7.31 7.66 9.62 8 12 C8.66 12 9.32 12 10 12 C10 12.66 10 13.32 10 14 C10.66 14 11.32 14 12 14 C12 14.66 12 15.32 12 16 C12.66 16 13.32 16 14 16 C14 16.99 14 17.98 14 19 C12.35 19 10.7 19 9 19 C9 22.63 9 26.26 9 30 C8.67 30 8.34 30 8 30 C8 26.37 8 22.74 8 19 C5.74981858 19.47831397 3.49986133 19.95768264 1.25 20.4375 C-0.00296875 20.70433594 -1.2559375 20.97117187 -2.546875 21.24609375 C-5.04557085 21.7916235 -7.52553101 22.35638812 -10 23 C-9.67 23.556875 -9.34 24.11375 -9 24.6875 C-7.8690399 27.30284522 -7.84337026 29.1806646 -8 32 C-4.04 31.505 -4.04 31.505 0 31 C0 31.66 0 32.32 0 33 C0.66 33.66 1.32 34.32 2 35 C-1.96 35 -5.92 35 -10 35 C-10 33.35 -10 31.7 -10 30 C-10.66 30 -11.32 30 -12 30 C-12 27.36 -12 24.72 -12 22 C-9.69 21.01 -7.38 20.02 -5 19 C-5.33 18.67 -5.66 18.34 -6 18 C-6.15349136 15.52642763 -6.23159885 13.09995481 -6.25 10.625 C-6.270625 9.93921875 -6.29125 9.2534375 -6.3125 8.546875 C-6.33549594 5.59189639 -6.34811183 3.51807232 -4.671875 1.0234375 C-3 0 -3 0 0 0 Z \",fill:\"#180908\",transform:\"translate(306,318)\"})),_path316||(_path316=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-13.44766488 4.62500765 -26.94048501 6.79969125 -40.5 8.75 C-41.27252106 8.86250092 -42.04504211 8.97500183 -42.8409729 9.09091187 C-45.07039648 9.41447438 -47.30061742 9.73176688 -49.53125 10.046875 C-51.47354492 10.32289551 -51.47354492 10.32289551 -53.45507812 10.60449219 C-56.67631041 10.96388587 -59.76301269 11.07612036 -63 11 C-63.33 11.66 -63.66 12.32 -64 13 C-65.08539062 12.96390625 -66.17078125 12.9278125 -67.2890625 12.890625 C-72.75059193 12.89541371 -78.00417673 13.83180601 -83.375 14.75 C-85.63011413 15.12166581 -87.8853254 15.49274255 -90.140625 15.86328125 C-91.28724609 16.0535791 -92.43386719 16.24387695 -93.61523438 16.43994141 C-112.03358744 19.48752522 -130.49117851 22.02573472 -149.01416016 24.33764648 C-150.24777031 24.4923642 -150.24777031 24.4923642 -151.50630188 24.65020752 C-153.05441605 24.8440346 -154.6027352 25.03623409 -156.15129089 25.22650146 C-159.8053704 25.68371976 -163.39298474 26.26473949 -167 27 C-168.76977761 27.06459042 -170.54170152 27.08611065 -172.3125 27.0625 C-173.19550781 27.05347656 -174.07851563 27.04445312 -174.98828125 27.03515625 C-175.65214844 27.02355469 -176.31601562 27.01195312 -177 27 C-173.95997368 25.28917187 -171.36968859 24.60210489 -167.91992188 24.1496582 C-166.89928146 24.01195511 -165.87864105 23.87425201 -164.82707214 23.7323761 C-163.71882584 23.5899498 -162.61057953 23.4475235 -161.46875 23.30078125 C-159.72643852 23.06738289 -159.72643852 23.06738289 -157.94892883 22.82926941 C-155.44326441 22.49373411 -152.93720958 22.16110415 -150.43081665 21.83105469 C-143.77827162 20.95344865 -137.12914824 20.05090045 -130.48046875 19.14453125 C-129.81262548 19.05364857 -129.14478222 18.96276588 -128.45670128 18.86912918 C-116.547122 17.24553229 -104.67445159 15.43934878 -92.8125 13.5 C-75.7743844 10.72071005 -58.71060931 8.15832933 -41.625 5.6875 C-40.44201324 5.51637695 -39.25902649 5.34525391 -38.04019165 5.16894531 C-31.59272617 4.23729998 -25.14457001 3.31057315 -18.69592285 2.387146 C-16.25230175 2.03623161 -13.80914805 1.68229981 -11.36621094 1.32666016 C-10.0980957 1.14280762 -8.82998047 0.95895508 -7.5234375 0.76953125 C-6.47849121 0.61718018 -5.43354492 0.4648291 -4.35693359 0.30786133 C-2 0 -2 0 0 0 Z \",fill:\"#72574B\",transform:\"translate(626,219)\"})),_path317||(_path317=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.6 0 13.2 0 20 0 C20 3.3 20 6.6 20 10 C21.32 10.33 22.64 10.66 24 11 C25.703125 13.28515625 25.703125 13.28515625 27.25 16.0625 C27.77078125 16.98160156 28.2915625 17.90070313 28.828125 18.84765625 C29.21484375 19.55792969 29.6015625 20.26820313 30 21 C23.375 21.125 23.375 21.125 20 20 C20 18.35 20 16.7 20 15 C14.72 14.67 9.44 14.34 4 14 C3.67 15.98 3.34 17.96 3 20 C1.02 19.67 -0.96 19.34 -3 19 C-1.68 18.67 -0.36 18.34 1 18 C1 17.01 1 16.02 1 15 C1.66 15 2.32 15 3 15 C3.93380961 10.46859347 3.93380961 10.46859347 3 6 C2.34 6 1.68 6 1 6 C0.67 4.02 0.34 2.04 0 0 Z \",fill:\"#BD7C63\",transform:\"translate(327,323)\"})),_path318||(_path318=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.79928419 -0.0505894 13.5985201 -0.08568667 20.39794922 -0.10986328 C22.71242079 -0.11993892 25.02687959 -0.13359975 27.34130859 -0.15087891 C30.66246693 -0.17505865 33.9834574 -0.1864673 37.3046875 -0.1953125 C38.34430634 -0.20563507 39.38392517 -0.21595764 40.45504761 -0.22659302 C41.41589264 -0.22674408 42.37673767 -0.22689514 43.36669922 -0.22705078 C44.63910965 -0.23371262 44.63910965 -0.23371262 45.93722534 -0.24050903 C48 0 48 0 50 2 C50.66 1.67 51.32 1.34 52 1 C52 6.61 52 12.22 52 18 C48.04 17.67 44.08 17.34 40 17 C39.505 13.535 39.505 13.535 39 10 C39.66 10 40.32 10 41 10 C41 9.34 41 8.68 41 8 C42.63631892 6.95107762 44.30485863 5.95093297 46 5 C46.33 4.67 46.66 4.34 47 4 C37.43 4 27.86 4 18 4 C18 4.66 18 5.32 18 6 C14.04903022 6.04939662 10.0981797 6.08571755 6.14697266 6.10986328 C4.1408864 6.12488107 2.13488676 6.15028981 0.12890625 6.17578125 C-1.12792969 6.18222656 -2.38476562 6.18867188 -3.6796875 6.1953125 C-4.84226074 6.20578613 -6.00483398 6.21625977 -7.20263672 6.22705078 C-10 6 -10 6 -12 4 C-2.76 4 6.48 4 16 4 C16 3.34 16 2.68 16 2 C11.05 2 6.1 2 1 2 C0.67 1.34 0.34 0.68 0 0 Z \",fill:\"#512A1D\",transform:\"translate(362,364)\"})),_path319||(_path319=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0.33 5.94 0.66 9 1 C9 1.66 9 2.32 9 3 C7.68 2.67 6.36 2.34 5 2 C7.73375078 5.65918392 11.73515755 6.3799727 15.9375 7.5 C16.72801758 7.71430664 17.51853516 7.92861328 18.33300781 8.14941406 C36.69391329 12.92137813 55.58813856 14.19991751 74.5 14.1875 C75.7979248 14.18669434 77.09584961 14.18588867 78.43310547 14.18505859 C92.95768823 14.093844 107.28075464 13.02581653 121.5703125 10.375 C125.08876339 9.83195935 128.44770228 9.86337316 132 10 C110.767181 24.15521267 69.23225359 17.57771524 44.4375 16.1875 C43.76241394 16.15274567 43.08732788 16.11799133 42.39178467 16.08218384 C34.98645596 15.68600978 28.79828206 14.99030964 22 12 C20.3443848 11.56022721 18.67874482 11.15349504 17 10.8125 C16.236875 10.65394531 15.47375 10.49539062 14.6875 10.33203125 C14.130625 10.22246094 13.57375 10.11289063 13 10 C13.33 12.31 13.66 14.62 14 17 C11.95880212 15.38405168 9.95927063 13.7143618 8 12 C8 11.34 8 10.68 8 10 C7.34 10 6.68 10 6 10 C6 9.34 6 8.68 6 8 C5.34 8 4.68 8 4 8 C2.68 5.36 1.36 2.72 0 0 Z \",fill:\"#9AAC91\",transform:\"translate(218,180)\"})),_path320||(_path320=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.375 0.6875 2.375 0.6875 5 2 C5.71247732 3.6476038 6.37400383 5.31763529 7 7 C8.62449243 8.70779973 10.29220027 10.37550757 12 12 C15 15.62068966 15 15.62068966 15 18 C15.99 18.33 16.98 18.66 18 19 C20.21171801 22.16775095 20.11823964 24.50137877 19.625 28.25 C19.51414062 29.14203125 19.40328125 30.0340625 19.2890625 30.953125 C19.14597656 31.96632813 19.14597656 31.96632813 19 33 C18.01 33 17.02 33 16 33 C16.33 33.763125 16.66 34.52625 17 35.3125 C18 38 18 38 18 41 C16.515 40.505 16.515 40.505 15 40 C14.83197949 38.54182203 14.66562857 37.0834516 14.5 35.625 C14.4071875 34.81289063 14.314375 34.00078125 14.21875 33.1640625 C14 31 14 31 14 29 C13.34 29 12.68 29 12 29 C8.19066634 25.7481298 6.91112036 23.81592188 6 19 C4.11629529 17.6830333 4.11629529 17.6830333 2 17 C0 16 0 16 -0.6171875 14.29296875 C-1.06672196 11.60034908 -1.13228876 9.04214107 -1.125 6.3125 C-1.12757812 5.33925781 -1.13015625 4.36601562 -1.1328125 3.36328125 C-1 1 -1 1 0 0 Z \",fill:\"#684735\",transform:\"translate(104,20)\"})),_path321||(_path321=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.72065967 1.54269924 9.41664092 3.07794619 14 5 C14 5.66 14 6.32 14 7 C11.54203147 7.19436491 9.08390706 7.3807742 6.625 7.5625 C5.92632812 7.61857422 5.22765625 7.67464844 4.5078125 7.73242188 C-0.7734375 8.11328125 -0.7734375 8.11328125 -3 7 C-3 8.65 -3 10.3 -3 12 C-2.11248047 11.94779297 -2.11248047 11.94779297 -1.20703125 11.89453125 C3.7601076 11.72436825 6.90728689 11.83144791 11 15 C7.74767922 16.97542809 5.79392736 17.12020178 2.0625 16.5625 C-1.55591135 16.10284952 -4.44972759 15.93491828 -8 17 C-8.33 16.01 -8.66 15.02 -9 14 C-11.64 14 -14.28 14 -17 14 C-17 14.66 -17 15.32 -17 16 C-18.11375 16.12375 -19.2275 16.2475 -20.375 16.375 C-24.03103677 16.6465813 -24.03103677 16.6465813 -26 19 C-26.33 18.01 -26.66 17.02 -27 16 C-24.09399739 14.74335022 -22.20395416 14 -19 14 C-18.67 12.02 -18.34 10.04 -18 8 C-16.35 7.67 -14.7 7.34 -13 7 C-14.32 6.01 -15.64 5.02 -17 4 C-10.83354621 1.47346685 -6.56407612 0.68718478 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#48342D\",transform:\"translate(195,234)\"})),_path322||(_path322=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C9.64815684 -0.14575478 19.09679088 0.26058585 28.7109375 1.09375 C30.05852115 1.20635594 31.40614793 1.31844684 32.7538147 1.43005371 C36.24918255 1.72087784 39.74393211 2.01854992 43.23858643 2.31781006 C46.82536731 2.62368501 50.41270669 2.92286181 54 3.22265625 C61.00055047 3.80866765 68.0004678 4.4019384 75 5 C75 7.31 75 9.62 75 12 C65.79836296 11.55151685 56.81125538 10.46604905 47.71044922 9.08666992 C41.62471766 8.17996579 35.65013007 7.60239458 29.49609375 7.40625 C26.57865343 6.93142403 25.15494832 5.98762293 23 4 C23 3.67 23 3.34 23 3 C21.84242188 2.93941406 20.68484375 2.87882812 19.4921875 2.81640625 C17.95311543 2.73194498 16.41405345 2.64729982 14.875 2.5625 C13.73417969 2.50352539 13.73417969 2.50352539 12.5703125 2.44335938 C8.31490797 2.20490998 4.19629174 1.79769763 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#AA6F4D\",transform:\"translate(551,304)\"})),_path323||(_path323=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.25282805 1.43136437 6.50221089 2.86978376 9.75 4.3125 C11.13058594 4.91868164 11.13058594 4.91868164 12.5390625 5.53710938 C13.42851562 5.93349609 14.31796875 6.32988281 15.234375 6.73828125 C16.45979004 7.28029175 16.45979004 7.28029175 17.70996094 7.83325195 C20.07066886 9.03600495 22.03663134 10.21657864 24 12 C24 12.99 24 13.98 24 15 C24.350625 15.680625 24.70125 16.36125 25.0625 17.0625 C25.371875 17.701875 25.68125 18.34125 26 19 C25.67 19.66 25.34 20.32 25 21 C25.66 21.33 26.32 21.66 27 22 C27 22.99 27 23.98 27 25 C21.24633753 23.40248198 15.60409189 21.56335308 10 19.5 C8.906875 19.0978125 7.81375 18.695625 6.6875 18.28125 C4 17 4 17 2 14 C2 13.01 2 12.02 2 11 C1.01 11.495 1.01 11.495 0 12 C0 8.04 0 4.08 0 0 Z \",fill:\"#E7B785\",transform:\"translate(120,191)\"})),_path324||(_path324=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.99271078 0.11799295 13.98527612 0.24281467 20.9777832 0.37231445 C23.35503396 0.41554308 25.73231335 0.45722636 28.10961914 0.49731445 C31.5328025 0.55531024 34.95584334 0.61891954 38.37890625 0.68359375 C39.9652462 0.70866249 39.9652462 0.70866249 41.58363342 0.73423767 C46.81262957 0.83847811 51.8443473 1.10737005 57 2 C56.67 3.65 56.34 5.3 56 7 C45.44 7.99 34.88 8.98 24 10 C30.93 10.33 37.86 10.66 45 11 C45.495 13.97 45.495 13.97 46 17 C44.68 17 43.36 17 42 17 C41.505 15.02 41.505 15.02 41 13 C32.75 13 24.5 13 16 13 C16 12.34 16 11.68 16 11 C14.68 10.67 13.36 10.34 12 10 C15.3 10 18.6 10 22 10 C22 7.36 22 4.72 22 2 C14.08 2.495 14.08 2.495 6 3 C6 2.34 6 1.68 6 1 C4.02 1 2.04 1 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#400B06\",transform:\"translate(392,461)\"})),_path325||(_path325=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 2.64 1 5.28 1 8 C2.98 8.495 2.98 8.495 5 9 C4.01 9.495 4.01 9.495 3 10 C2.27840576 11.64363134 1.60648579 13.31050386 1 15 C1.9004303 14.99555878 2.8008606 14.99111755 3.72857666 14.98654175 C12.2601906 14.9462837 20.79177213 14.91592406 29.32345963 14.89637566 C33.70851989 14.88598744 38.09350093 14.87192013 42.47851562 14.84912109 C46.71901974 14.82721416 50.95944819 14.81539417 55.20000458 14.81024551 C56.80892882 14.80658152 58.41784945 14.79942777 60.02674103 14.78853989 C84.92579707 14.62691062 84.92579707 14.62691062 94.16015625 21.66015625 C96.06617743 23.19030648 96.06617743 23.19030648 99 24 C98.34 25.32 97.68 26.64 97 28 C95.68 27.34 94.36 26.68 93 26 C93 25.34 93 24.68 93 24 C92.0925 23.71125 91.185 23.4225 90.25 23.125 C87 22 87 22 85.12225342 20.96751404 C76.40381336 16.9928647 63.83111904 18.78988998 54.296875 18.68359375 C52.72218348 18.66296882 51.1474968 18.64197115 49.57281494 18.62062073 C45.46962458 18.56597086 41.36638912 18.516315 37.26312256 18.46777344 C33.05948981 18.41713587 28.85592086 18.36167259 24.65234375 18.30664062 C16.43494881 18.19975959 8.21749832 18.09861252 0 18 C0 12.06 0 6.12 0 0 Z \",fill:\"#060202\",transform:\"translate(165,446)\"})),_path326||(_path326=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 1.65 2 3.3 2 5 C-1.3 5.33 -4.6 5.66 -8 6 C-8.33 7.65 -8.66 9.3 -9 11 C-8.34 11 -7.68 11 -7 11 C-7 12.65 -7 14.3 -7 16 C-6.33613281 16.03738281 -5.67226563 16.07476562 -4.98828125 16.11328125 C3.97585513 16.7806841 3.97585513 16.7806841 8 20 C8 20.33 8 20.66 8 21 C6.80761719 20.98839844 5.61523438 20.97679687 4.38671875 20.96484375 C2.82031406 20.95546408 1.25390769 20.94636407 -0.3125 20.9375 C-1.09818359 20.92912109 -1.88386719 20.92074219 -2.69335938 20.91210938 C-3.8293457 20.90727539 -3.8293457 20.90727539 -4.98828125 20.90234375 C-5.68477783 20.89710693 -6.38127441 20.89187012 -7.09887695 20.88647461 C-9.22497968 20.93104009 -9.22497968 20.93104009 -12 22 C-11.690625 23.03125 -11.38125 24.0625 -11.0625 25.125 C-11 29 -11 29 -12.4921875 30.80078125 C-14.2747702 32.30058477 -16.0747918 33.6893221 -18 35 C-16.69628054 37.96184809 -15.42071276 39.75770306 -12.875 41.75 C-11.92625 42.4925 -10.9775 43.235 -10 44 C-13.73664197 44 -15.60415297 43.2125365 -18.59375 41.02734375 C-21.27629613 37.16000641 -20.31783896 32.77388298 -19.953125 28.27734375 C-18.80414424 24.32654517 -17.4603415 23.12821617 -14 21 C-13.34 21 -12.68 21 -12 21 C-12 20.34 -12 19.68 -12 19 C-12.85609863 19.16749756 -13.71219727 19.33499512 -14.59423828 19.50756836 C-17.9986822 19.99980946 -21.05976901 20.0260099 -24.4921875 19.87890625 C-25.69101562 19.83056641 -26.88984375 19.78222656 -28.125 19.73242188 C-29.3625 19.67634766 -30.6 19.62027344 -31.875 19.5625 C-33.13570313 19.51029297 -34.39640625 19.45808594 -35.6953125 19.40429688 C-38.79715237 19.27505355 -41.89863488 19.14010469 -45 19 C-45 18.67 -45 18.34 -45 18 C-37.74 18 -30.48 18 -23 18 C-23 16.35 -23 14.7 -23 13 C-16.25 12.875 -16.25 12.875 -14 14 C-14 14.66 -14 15.32 -14 16 C-13.34 15.67 -12.68 15.34 -12 15 C-11.64438275 12.44765849 -11.55620247 9.92131348 -11.44140625 7.34765625 C-11.29574219 6.57292969 -11.15007812 5.79820312 -11 5 C-7.91111478 2.94074319 -7.29064073 2.7609626 -3.8125 2.875 C-1.9253125 2.936875 -1.9253125 2.936875 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#954C4C\",transform:\"translate(360,343)\"})),_path327||(_path327=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C8.25 0 16.5 0 25 0 C25 6.27 25 12.54 25 19 C22.875625 19.185625 20.75125 19.37125 18.5625 19.5625 C17.36753906 19.66691406 16.17257813 19.77132813 14.94140625 19.87890625 C13.48541016 19.93884766 13.48541016 19.93884766 12 20 C11 19 11 19 10.9375 15.9375 C10.9684375 14.4834375 10.9684375 14.4834375 11 13 C10.34 13 9.68 13 9 13 C9 11.68 9 10.36 9 9 C8.34 9 7.68 9 7 9 C7 8.34 7 7.68 7 7 C6.34 7 5.68 7 5 7 C5 6.34 5 5.68 5 5 C4.34 5 3.68 5 3 5 C3 4.34 3 3.68 3 3 C2.34 3 1.68 3 1 3 C0.67 2.01 0.34 1.02 0 0 Z \",fill:\"#6F5B45\",transform:\"translate(177,287)\"})),_path328||(_path328=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.99 2.97 3.98 5.94 5 9 C4.34 9 3.68 9 3 9 C3.33 11.31 3.66 13.62 4 16 C4.66 16 5.32 16 6 16 C7.80411967 18.75924185 8.0127245 19.88972103 7.625 23.25 C7.315625 24.61125 7.315625 24.61125 7 26 C0.9453125 26.1953125 0.9453125 26.1953125 -1 26 C-3 24 -3 24 -4 22 C-4.66 22 -5.32 22 -6 22 C-6 22.99 -6 23.98 -6 25 C-6.66 25 -7.32 25 -8 25 C-8.33 24.34 -8.66 23.68 -9 23 C-9.33 23.66 -9.66 24.32 -10 25 C-11.98 24.67 -13.96 24.34 -16 24 C-16.04241723 21.66705225 -16.04092937 19.33297433 -16 17 C-15.67 16.67 -15.34 16.34 -15 16 C-15.66 15.67 -16.32 15.34 -17 15 C-17 12.03 -17 9.06 -17 6 C-16.34 6 -15.68 6 -15 6 C-14.67 5.34 -14.34 4.68 -14 4 C-12.5393715 6.64738916 -12 7.89448334 -12 11 C-11.06934867 8.39417629 -10.85082593 7.35801776 -11.9375 4.75 C-12.288125 4.1725 -12.63875 3.595 -13 3 C-12.01 3 -11.02 3 -10 3 C-10 3.66 -10 4.32 -10 5 C-9.01 5 -8.02 5 -7 5 C-6.86722656 5.56589844 -6.73445313 6.13179687 -6.59765625 6.71484375 C-6.42105469 7.44832031 -6.24445313 8.18179688 -6.0625 8.9375 C-5.88847656 9.66839844 -5.71445313 10.39929688 -5.53515625 11.15234375 C-5.16112431 12.99969898 -5.16112431 12.99969898 -4 14 C-3.63239269 16.32817964 -3.29758419 18.6618385 -3 21 C-2.01 21.33 -1.02 21.66 0 22 C-0.33 19.36 -0.66 16.72 -1 14 C-0.01 14.33 0.98 14.66 2 15 C1.814375 14.05125 1.62875 13.1025 1.4375 12.125 C1 9 1 9 2 7 C1.01 6.34 0.02 5.68 -1 5 C-0.67 3.35 -0.34 1.7 0 0 Z \",fill:\"#8E614D\",transform:\"translate(78,243)\"})),_path329||(_path329=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.375 2.25 0.375 2.25 0 5 C-2.8125 7.0625 -2.8125 7.0625 -6 9 C-6.45503906 9.64066406 -6.91007813 10.28132813 -7.37890625 10.94140625 C-9.36260769 13.46046808 -11.27076162 14.43568321 -14.125 15.875 C-18.64100026 18.23169418 -22.84719951 20.79655742 -27.02734375 23.703125 C-29.76620086 25.50372017 -32.1209172 26.86119745 -35.375 27.375 C-40.08580154 28.49661941 -43.29235707 31.27550843 -46.625 34.6875 C-49.0266717 37.02596982 -49.8853451 37.35558864 -53 38 C-53.66 38.99 -54.32 39.98 -55 41 C-56.98 40.34 -58.96 39.68 -61 39 C-58.80925723 36.66360989 -56.5432438 34.92152431 -53.859375 33.1796875 C-53.04331787 32.64875488 -52.22726074 32.11782227 -51.38647461 31.57080078 C-50.51643799 31.01118652 -49.64640137 30.45157227 -48.75 29.875 C-47.85482666 29.2960498 -46.95965332 28.71709961 -46.03735352 28.12060547 C-39.54295234 23.94087399 -32.9684675 19.91981465 -26.32421875 15.984375 C-21.48183317 13.09373825 -16.73976853 10.05498355 -12 7 C-9.95967703 5.68541216 -7.9180307 4.37287573 -5.875 3.0625 C-4.96492187 2.47597656 -4.05484375 1.88945313 -3.1171875 1.28515625 C-1 0 -1 0 0 0 Z M-60 41 C-59.01 41.33 -58.02 41.66 -57 42 C-57.99 42.33 -58.98 42.66 -60 43 C-60 42.34 -60 41.68 -60 41 Z \",fill:\"#1D1516\",transform:\"translate(626,41)\"})),_path330||(_path330=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.495 0.495 0.495 0.495 1 1 C3.32817964 1.36760731 5.6618385 1.70241581 8 2 C4.11236713 5.66194631 1.67741882 6.47107899 -3.625 6.5625 C-8.06688685 6.46195739 -8.06688685 6.46195739 -11.76171875 8.484375 C-12.17035156 8.98453125 -12.57898438 9.4846875 -13 10 C-15.1875 10.6875 -15.1875 10.6875 -17 11 C-17.33 12.32 -17.66 13.64 -18 15 C-18 14.34 -18 13.68 -18 13 C-21.68754757 13.49831724 -23.60490662 14.10067643 -26 17 C-26.99 16.67 -27.98 16.34 -29 16 C-29 15.34 -29 14.68 -29 14 C-29.66 14 -30.32 14 -31 14 C-32.26237731 11.47524538 -32.09856404 9.68799534 -32.0625 6.875 C-32.05347656 5.96492188 -32.04445313 5.05484375 -32.03515625 4.1171875 C-32.02355469 3.41851562 -32.01195312 2.71984375 -32 2 C-31.34 2 -30.68 2 -30 2 C-30 2.66 -30 3.32 -30 4 C-28.35 4 -26.7 4 -25 4 C-25 3.01 -25 2.02 -25 1 C-21.95843125 0.83135856 -18.91676547 0.66502247 -15.875 0.5 C-15.0190625 0.45230469 -14.163125 0.40460938 -13.28125 0.35546875 C-3.9016783 -0.14958511 -3.9016783 -0.14958511 0 0 Z \",fill:\"#573628\",transform:\"translate(402,436)\"})),_path331||(_path331=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.50625443 0.00308167 1.50625443 0.00308167 3.04293823 0.00622559 C4.7670845 0.00713196 4.7670845 0.00713196 6.52606201 0.00805664 C7.79861847 0.01454224 9.07117493 0.02102783 10.3822937 0.02770996 C11.7255651 0.03150986 13.06883703 0.03512699 14.41210938 0.03857422 C30.98014847 0.09482735 47.54686393 0.34283881 64.11300659 0.58502197 C68.37852821 0.64690873 72.64408429 0.70632576 76.90963745 0.76599121 C85.18961964 0.88215317 93.46956179 1.00090637 101.7494812 1.12145996 C101.7494812 1.45145996 101.7494812 1.78145996 101.7494812 2.12145996 C101.20268707 2.13176743 100.65589294 2.14207489 100.0925293 2.1526947 C94.41506735 2.26065324 88.73776756 2.3752597 83.06051636 2.49377441 C80.94010807 2.53715748 78.81966408 2.57883004 76.69918823 2.61877441 C73.65594712 2.67639539 70.6128863 2.74011321 67.5697937 2.80505371 C66.14160812 2.83012245 66.14160812 2.83012245 64.68457031 2.85569763 C63.80380829 2.87564285 62.92304626 2.89558807 62.01559448 2.9161377 C61.23838043 2.93168198 60.46116638 2.94722626 59.66040039 2.96324158 C57.66391186 3.00929248 57.66391186 3.00929248 55.7494812 4.12145996 C58.0594812 4.12145996 60.3694812 4.12145996 62.7494812 4.12145996 C62.4194812 6.76145996 62.0894812 9.40145996 61.7494812 12.12145996 C60.4913562 11.81208496 59.2332312 11.50270996 57.9369812 11.18395996 C52.57882943 9.98093544 47.218998 9.509949 41.7494812 9.12145996 C41.7494812 7.14145996 41.7494812 5.16145996 41.7494812 3.12145996 C30.8594812 3.12145996 19.9694812 3.12145996 8.7494812 3.12145996 C8.7494812 4.77145996 8.7494812 6.42145996 8.7494812 8.12145996 C7.4913562 8.14208496 6.2332312 8.16270996 4.9369812 8.18395996 C4.22928589 8.19556152 3.52159058 8.20716309 2.79244995 8.21911621 C0.7494812 8.12145996 0.7494812 8.12145996 -2.2505188 7.12145996 C-2.2505188 6.46145996 -2.2505188 5.80145996 -2.2505188 5.12145996 C-0.9305188 5.12145996 0.3894812 5.12145996 1.7494812 5.12145996 C0.49406563 2.61062882 -0.75115368 2.2502055 -3.2505188 1.12145996 C-2.2505188 0.12145996 -2.2505188 0.12145996 0 0 Z \",fill:\"#5B5345\",transform:\"translate(358.2505187988281,263.8785400390625)\"})),_path332||(_path332=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3 0 3 0 5.5625 2.3125 C8 5 8 5 10 8 C9.125 10.6875 9.125 10.6875 8 13 C6.62437146 11.71034824 5.29233607 10.37310707 4 9 C4 8.34 4 7.68 4 7 C0.7 7 -2.6 7 -6 7 C-5.34 10.3 -4.68 13.6 -4 17 C-5.65 17 -7.3 17 -9 17 C-9.33 15.35 -9.66 13.7 -10 12 C-10.56847656 12.32484375 -11.13695312 12.6496875 -11.72265625 12.984375 C-16.23503128 14.99675495 -21.21936465 14.41674444 -25.9375 13.3125 C-28.61361992 11.6095146 -29.13362193 9.99294243 -30 7 C-26.17679443 5.57741188 -23.08718695 4.75957724 -19 5 C-19 4.34 -19 3.68 -19 3 C-16.72926348 2.83201949 -14.45840707 2.66565887 -12.1875 2.5 C-10.29064453 2.36078125 -10.29064453 2.36078125 -8.35546875 2.21875 C-6.24021483 2.08085219 -4.11974408 2 -2 2 C-1.34 1.34 -0.68 0.68 0 0 Z \",fill:\"#0B1311\",transform:\"translate(547,389)\"})),_path333||(_path333=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 2.31 1 4.62 1 7 C8.92 7 16.84 7 25 7 C25 8.32 25 9.64 25 11 C13.12 11 1.24 11 -11 11 C-11 11.66 -11 12.32 -11 13 C0.55 13 12.1 13 24 13 C24 13.66 24 14.32 24 15 C21.03 15 18.06 15 15 15 C15 16.32 15 17.64 15 19 C13.35 19 11.7 19 10 19 C9.67 18.01 9.34 17.02 9 16 C8.34 15.67 7.68 15.34 7 15 C6.67 15.66 6.34 16.32 6 17 C6 16.34 6 15.68 6 15 C0.39 15 -5.22 15 -11 15 C-11.33 15.99 -11.66 16.98 -12 18 C-12.37125 16.63875 -12.37125 16.63875 -12.75 15.25 C-14.03981342 11.89648511 -15.31971042 10.32291764 -18 8 C-15.69 8 -13.38 8 -11 8 C-10.67 6.35 -10.34 4.7 -10 3 C-6.7 3 -3.4 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#D19B81\",transform:\"translate(283,277)\"})),_path334||(_path334=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 2 2 2 2 5 C2.66 5 3.32 5 4 5 C4 5.99 4 6.98 4 8 C6.31 8.33 8.62 8.66 11 9 C11 9.66 11 10.32 11 11 C11.74121094 10.76925781 12.48242188 10.53851563 13.24609375 10.30078125 C16 10 16 10 18.09765625 11.29296875 C18.74605469 11.91816406 19.39445312 12.54335938 20.0625 13.1875 C20.74441406 13.84492188 21.42632812 14.50234375 22.12890625 15.1796875 C22.74636719 15.78039062 23.36382812 16.38109375 24 17 C24.825 17.598125 25.65 18.19625 26.5 18.8125 C29.0212319 22.48929652 28.2966837 26.68160391 28 31 C28.99 31 29.98 31 31 31 C31 22.42 31 13.84 31 5 C31.33 5 31.66 5 32 5 C32.99 19.355 32.99 19.355 34 34 C33.01 33.67 32.02 33.34 31 33 C29.52034074 32.85426942 28.03596157 32.75336732 26.55078125 32.68359375 C25.70322266 32.64169922 24.85566406 32.59980469 23.98242188 32.55664062 C22.66081055 32.49766602 22.66081055 32.49766602 21.3125 32.4375 C20.41982422 32.39431641 19.52714844 32.35113281 18.60742188 32.30664062 C16.40509892 32.20064647 14.20266527 32.09857949 12 32 C12 31.67 12 31.34 12 31 C13.98 30.67 15.96 30.34 18 30 C18 29.67 18 29.34 18 29 C19.98 29 21.96 29 24 29 C23.34 26.36 22.68 23.72 22 21 C20.7625 21.061875 20.7625 21.061875 19.5 21.125 C15.38008185 20.97786007 11.96852693 20.09476605 8 19 C8 18.34 8 17.68 8 17 C7.01 17 6.02 17 5 17 C4.67 15.02 4.34 13.04 4 11 C2.68 10.67 1.36 10.34 0 10 C-1.125 2.25 -1.125 2.25 0 0 Z \",fill:\"#39281E\",transform:\"translate(230,309)\"})),_path335||(_path335=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.79822348 9.37912587 2.12873737 18.58786748 2 28 C0.02 28 -1.96 28 -4 28 C-4 24.37 -4 20.74 -4 17 C-4.7734375 17.01160156 -5.546875 17.02320313 -6.34375 17.03515625 C-12.33936364 17.08709845 -18.07302983 16.91184156 -24 16 C-24 14.68 -24 13.36 -24 12 C-17.71739294 11.76731085 -12.11980533 12.59545452 -6 14 C-6.26676204 12.01508358 -6.26676204 12.01508358 -7 10 C-11.35545833 8.54818056 -15.81422741 8.64488407 -20.37109375 8.48242188 C-22.25206812 8.39129606 -24.12780752 8.20313498 -26 8 C-26.33 7.34 -26.66 6.68 -27 6 C-24.36 5.67 -21.72 5.34 -19 5 C-21.31 4.34 -23.62 3.68 -26 3 C-26 2.67 -26 2.34 -26 2 C-19.97258105 1.83410774 -14.42505207 2.42885867 -8.5 3.5 C-7.67757813 3.64308594 -6.85515625 3.78617187 -6.0078125 3.93359375 C-4.00415373 4.28306912 -2.00191702 4.64068156 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#AF7656\",transform:\"translate(420,288)\"})),_path336||(_path336=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.1765918 0.00580078 1.1765918 0.00580078 2.37695312 0.01171875 C3.53614258 0.00591797 3.53614258 0.00591797 4.71875 0 C5.46833984 0.00128906 6.21792969 0.00257813 6.99023438 0.00390625 C7.67512939 0.00503418 8.36002441 0.00616211 9.06567383 0.00732422 C11.16749387 0.14338928 13.04072368 0.5665983 15.06445312 1.13671875 C14.67178154 14.58492229 14.21395863 27.83774568 12.06445312 41.13671875 C11.36240301 45.68231594 10.79507361 49.62336936 12.06445312 54.13671875 C10.08445312 54.63171875 10.08445312 54.63171875 8.06445312 55.13671875 C8.06445312 58.43671875 8.06445312 61.73671875 8.06445312 65.13671875 C7.73445313 65.13671875 7.40445313 65.13671875 7.06445312 65.13671875 C7.06445312 59.85671875 7.06445312 54.57671875 7.06445312 49.13671875 C7.72445312 49.13671875 8.38445312 49.13671875 9.06445312 49.13671875 C9.95280451 40.94188644 10.55537716 32.73394491 11.12695312 24.51171875 C11.21783203 23.22136719 11.30871094 21.93101562 11.40234375 20.6015625 C11.62435233 17.4467038 11.84502492 14.29175779 12.06445312 11.13671875 C11.51007568 11.29068115 10.95569824 11.44464355 10.38452148 11.60327148 C-8.03348003 15.83807453 -30.22014099 15.59119821 -48.93554688 13.13671875 C-48.93554688 12.47671875 -48.93554688 11.81671875 -48.93554688 11.13671875 C-47.33453125 11.1524292 -47.33453125 11.1524292 -45.70117188 11.16845703 C-41.66051724 11.20523929 -37.61987666 11.22782611 -33.57910156 11.24658203 C-31.84535212 11.2565093 -30.11161881 11.27005556 -28.37792969 11.28759766 C-18.24115887 11.38743839 -8.4494838 11.08303827 1.58398438 9.56982422 C5.11475245 9.13045956 8.51039567 9.06447719 12.06445312 9.13671875 C12.06445312 8.14671875 12.06445312 7.15671875 12.06445312 6.13671875 C10.86046875 6.02714844 9.65648437 5.91757812 8.41601562 5.8046875 C6.84042165 5.6452524 5.26490452 5.48505663 3.68945312 5.32421875 C2.49835938 5.21883789 2.49835938 5.21883789 1.28320312 5.11132812 C-0.80334154 4.89029585 -2.87294005 4.52165635 -4.93554688 4.13671875 C-5.59554687 3.14671875 -6.25554687 2.15671875 -6.93554688 1.13671875 C-5.0775837 -0.72124442 -2.46851944 0.0042671 0 0 Z \",fill:\"#08181C\",transform:\"translate(273.935546875,414.86328125)\"})),_path337||(_path337=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 3 0 3 -1 6 C-0.01 6.33 0.98 6.66 2 7 C1.1875 10.4375 1.1875 10.4375 0 14 C-0.99 14.33 -1.98 14.66 -3 15 C-3.40610133 16.62440531 -3.80916669 18.2496419 -4.1953125 19.87890625 C-5.81865506 24.15791114 -9.06817471 27.54295468 -12 31 C-12.33 30.01 -12.66 29.02 -13 28 C-13.78375 28.825 -14.5675 29.65 -15.375 30.5 C-18 33 -18 33 -20 33 C-20.10570313 33.58265625 -20.21140625 34.1653125 -20.3203125 34.765625 C-21.09686245 37.31842139 -22.14301767 38.73366236 -23.875 40.75 C-24.38804688 41.36359375 -24.90109375 41.9771875 -25.4296875 42.609375 C-27 44 -27 44 -30 44 C-29.10606391 36.62502725 -25.11065479 31.98897254 -20 27 C-15.93020117 22.13235407 -15.93020117 22.13235407 -13.06640625 16.53125 C-11.83437869 13.60687689 -10.28452457 11.81435841 -8.125 9.5 C-5.29233599 6.41497138 -2.56606654 3.31450261 0 0 Z \",fill:\"#835943\",transform:\"translate(86,573)\"})),_path338||(_path338=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.93 0 13.86 0 21 0 C21.020625 2.784375 21.04125 5.56875 21.0625 8.4375 C21.071604 9.31591553 21.08070801 10.19433105 21.09008789 11.09936523 C21.09723091 13.06645974 21.05031893 15.03353621 21 17 C20 18 20 18 16.62109375 18.09765625 C15.22652923 18.09098369 13.83198257 18.07902532 12.4375 18.0625 C11.72658203 18.05798828 11.01566406 18.05347656 10.28320312 18.04882812 C8.52209987 18.03700864 6.76103964 18.01907263 5 18 C3.46733418 14.93466836 3.89723529 11.73245728 3.9375 8.375 C3.94201172 7.66859375 3.94652344 6.9621875 3.95117188 6.234375 C3.96296125 4.48954725 3.98089676 2.744763 4 1 C2.68 0.67 1.36 0.34 0 0 Z \",fill:\"#FBC160\",transform:\"translate(113,269)\"})),_path339||(_path339=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.4640625 0.9590625 0.4640625 0.9590625 0.9375 1.9375 C1.8345163 3.93610821 1.8345163 3.93610821 3 5 C3.15582303 6.34015221 3.25044142 7.68758903 3.31640625 9.03515625 C3.35830078 9.84404297 3.40019531 10.65292969 3.44335938 11.48632812 C3.48267578 12.33646484 3.52199219 13.18660156 3.5625 14.0625 C3.60568359 14.91650391 3.64886719 15.77050781 3.69335938 16.65039062 C3.79976702 18.76672037 3.90041731 20.88333813 4 23 C1.11788698 23.96070434 -0.69850044 24.10581883 -3.6875 24.0625 C-4.89986328 24.04896484 -4.89986328 24.04896484 -6.13671875 24.03515625 C-6.75160156 24.02355469 -7.36648438 24.01195312 -8 24 C-8 22.35 -8 20.7 -8 19 C-8.763125 18.979375 -9.52625 18.95875 -10.3125 18.9375 C-11.199375 18.628125 -12.08625 18.31875 -13 18 C-13.391875 16.865625 -13.78375 15.73125 -14.1875 14.5625 C-15.57089662 10.85284802 -15.57089662 10.85284802 -18.40625 10.09375 C-20.93915156 9.60993734 -23.43275715 9.23601294 -26 9 C-26 8.67 -26 8.34 -26 8 C-25.31897217 7.93530518 -24.63794434 7.87061035 -23.9362793 7.80395508 C-20.85044269 7.49729299 -17.76951635 7.15535369 -14.6875 6.8125 C-13.61564453 6.71130859 -12.54378906 6.61011719 -11.43945312 6.50585938 C-10.41142578 6.38662109 -9.38339844 6.26738281 -8.32421875 6.14453125 C-7.37635498 6.04503174 -6.42849121 5.94553223 -5.4519043 5.84301758 C-2.7530973 5.18077821 -2.7530973 5.18077821 -1.16723633 2.4284668 C-0.78204834 1.62707275 -0.39686035 0.82567871 0 0 Z \",fill:\"#020205\",transform:\"translate(567,351)\"})),_path340||(_path340=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.74765625 0.00322266 1.4953125 0.00644531 2.265625 0.00976562 C3.02617188 0.01814453 3.78671875 0.02652344 4.5703125 0.03515625 C5.3540625 0.03966797 6.1378125 0.04417969 6.9453125 0.04882812 C8.86201264 0.06051532 10.77867298 0.07844717 12.6953125 0.09765625 C12.6953125 1.74765625 12.6953125 3.39765625 12.6953125 5.09765625 C20.1203125 6.08765625 20.1203125 6.08765625 27.6953125 7.09765625 C27.6953125 9.07765625 27.6953125 11.05765625 27.6953125 13.09765625 C24.3953125 13.09765625 21.0953125 13.09765625 17.6953125 13.09765625 C16.7053125 10.62265625 16.7053125 10.62265625 15.6953125 8.09765625 C14.0453125 8.09765625 12.3953125 8.09765625 10.6953125 8.09765625 C10.2003125 6.11765625 10.2003125 6.11765625 9.6953125 4.09765625 C-5.54223182 3.54161954 -20.16454072 4.474842 -35.25201416 6.38354492 C-47.66153966 7.94252546 -59.78650558 8.58910069 -72.3046875 8.09765625 C-72.3046875 7.76765625 -72.3046875 7.43765625 -72.3046875 7.09765625 C-71.66966309 7.01201416 -71.03463867 6.92637207 -70.38037109 6.83813477 C-67.48001331 6.44643042 -64.57984975 6.05330561 -61.6796875 5.66015625 C-60.68066406 5.52544922 -59.68164062 5.39074219 -58.65234375 5.25195312 C-57.67910156 5.11982422 -56.70585938 4.98769531 -55.703125 4.8515625 C-54.36773682 4.67089233 -54.36773682 4.67089233 -53.00537109 4.48657227 C-51.15015084 4.21940847 -49.29993584 3.91573335 -47.45556641 3.58178711 C-43.80627356 3.02107522 -40.17476204 2.78578266 -36.4921875 2.59765625 C-35.7602417 2.55705078 -35.0282959 2.51644531 -34.27416992 2.47460938 C-31.16773952 2.30237952 -28.06091166 2.13787091 -24.95410156 1.97265625 C-22.67497506 1.85033835 -20.39608932 1.72408074 -18.1171875 1.59765625 C-17.42326904 1.56220703 -16.72935059 1.52675781 -16.0144043 1.49023438 C-10.63382063 1.19113086 -5.38331981 -0.04141015 0 0 Z \",fill:\"#64493D\",transform:\"translate(98.3046875,304.90234375)\"})),_path341||(_path341=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C1.09360816 10.2902133 0.15410469 20.10758076 -3 30 C-6.3 30 -9.6 30 -13 30 C-13.75741925 20.97859571 -14.13534286 12.05293337 -14 3 C-12.02 3 -10.04 3 -8 3 C-8 9.27 -8 15.54 -8 22 C-7.01 22 -6.02 22 -5 22 C-5 15.73 -5 9.46 -5 3 C-3.35 3 -1.7 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#451D0D\",transform:\"translate(595,260)\"})),_path342||(_path342=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.99 2 1.98 2 3 C16.52 2.67 31.04 2.34 46 2 C46 2.33 46 2.66 46 3 C41.25949706 3.71368649 36.64254265 4.07992742 31.84765625 4.17578125 C30.74099609 4.19962891 29.63433594 4.22347656 28.49414062 4.24804688 C26.21047543 4.29093871 23.92656227 4.32223105 21.64257812 4.34179688 C13.0843495 4.55587706 7.1027769 6.2648154 0 11 C-0.33 11.99 -0.66 12.98 -1 14 C-7.44070471 14.10655578 -13.62641289 13.96205088 -20 13 C-20 10.36 -20 7.72 -20 5 C-19.34 5 -18.68 5 -18 5 C-18 4.34 -18 3.68 -18 3 C-15.29889598 1.64944799 -12.99210994 2 -10 2 C-9.34 1.67 -8.68 1.34 -8 1 C-8 1.66 -8 2.32 -8 3 C-5.36 3 -2.72 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#846F5D\",transform:\"translate(284,246)\"})),_path343||(_path343=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.66 2 1.32 2 2 C2.99 1.67 3.98 1.34 5 1 C5.33 1.99 5.66 2.98 6 4 C6.66 4.33 7.32 4.66 8 5 C7.67 6.65 7.34 8.3 7 10 C6.67 9.34 6.34 8.68 6 8 C5.34 8 4.68 8 4 8 C4.66 9.65 5.32 11.3 6 13 C9.13367555 9.22256121 9.13367555 9.22256121 9.75 4.625 C9.5025 4.08875 9.255 3.5525 9 3 C9.99 3.99 10.98 4.98 12 6 C12.66 5.67 13.32 5.34 14 5 C14.66 5.33 15.32 5.66 16 6 C14.68 11.61 13.36 17.22 12 23 C12.66 23 13.32 23 14 23 C14 22.01 14 21.02 14 20 C14.99 20 15.98 20 17 20 C17.66 21.98 18.32 23.96 19 26 C17.02 26 15.04 26 13 26 C13 25.34 13 24.68 13 24 C12.34 24 11.68 24 11 24 C11 24.99 11 25.98 11 27 C10.01 27 9.02 27 8 27 C7.67 24.03 7.34 21.06 7 18 C7.99 18 8.98 18 10 18 C10 17.34 10 16.68 10 16 C10 14.68 10 13.36 10 12 C9.67 12.99 9.34 13.98 9 15 C6.4375 16.6875 6.4375 16.6875 4 18 C3.67 16.68 3.34 15.36 3 14 C2.72570375 19.39449293 2.63944354 22.51925805 6 27 C2.37 27 -1.26 27 -5 27 C-3.68 26.67 -2.36 26.34 -1 26 C-1.66 25.01 -2.32 24.02 -3 23 C-3.36703674 18.7790775 -2.79885972 15.82257691 -1 12 C-1.66 12 -2.32 12 -3 12 C-3.33 9.69 -3.66 7.38 -4 5 C-3.34 5 -2.68 5 -2 5 C-2 5.66 -2 6.32 -2 7 C-1.01 7 -0.02 7 1 7 C0.34 5.02 -0.32 3.04 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#A96D53\",transform:\"translate(92,242)\"})),_path344||(_path344=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-2.41632339 1.29231226 -4.83304396 2.58387191 -7.25 3.875 C-7.93191406 4.23980469 -8.61382812 4.60460937 -9.31640625 4.98046875 C-10.6347503 5.68443887 -11.95437027 6.3860259 -13.27539062 7.08496094 C-14.62132586 7.79908399 -15.9604861 8.52598048 -17.296875 9.2578125 C-19 10 -19 10 -22 10 C-21.34 11.32 -20.68 12.64 -20 14 C-20.82242188 14.30292969 -21.64484375 14.60585938 -22.4921875 14.91796875 C-31.01681794 18.11716608 -39.10286688 21.6673313 -46.9375 26.3125 C-50 28 -50 28 -53 28 C-53 25.03 -53 22.06 -53 19 C-29.3411632 8.90332906 -29.3411632 8.90332906 -17.21484375 5.09765625 C-13.02774349 3.66803878 -9.11583647 1.81619603 -5.171875 -0.1796875 C-3 -1 -3 -1 0 0 Z \",fill:\"#3C2922\",transform:\"translate(53,442)\"})),_path345||(_path345=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.63804589 -0.39397335 2.63804589 -0.39397335 5 -1 C2.6975881 1.60045875 0.50103323 2.84739183 -2.6875 4.1875 C-3.89986328 4.70376953 -3.89986328 4.70376953 -5.13671875 5.23046875 C-5.75160156 5.48441406 -6.36648438 5.73835937 -7 6 C-6.505 6.99 -6.505 6.99 -6 8 C-7.12277344 8.32613281 -8.24554688 8.65226563 -9.40234375 8.98828125 C-16.98351601 11.19906856 -24.51998454 13.46440154 -32 16 C-35.7456321 17.20717894 -39.44402254 17.13391052 -43.33886719 17.11352539 C-44.43702003 17.11374443 -44.43702003 17.11374443 -45.55735779 17.1139679 C-47.97056062 17.11327276 -50.3836857 17.10549908 -52.796875 17.09765625 C-54.47267617 17.09579065 -56.14847788 17.09436742 -57.82427979 17.09336853 C-62.23013826 17.08955452 -66.63596366 17.07973376 -71.04180908 17.06866455 C-75.53958692 17.05842643 -80.03737011 17.05386576 -84.53515625 17.04882812 C-93.35678535 17.0381105 -102.17838992 17.02104747 -111 17 C-111 16.67 -111 16.34 -111 16 C-88.56 15.67 -66.12 15.34 -43 15 C-42.67 14.34 -42.34 13.68 -42 13 C-42.99 12.505 -42.99 12.505 -44 12 C-43.00033203 11.85304687 -43.00033203 11.85304687 -41.98046875 11.703125 C-34.92097975 10.5578093 -28.64764266 8.58693641 -22 6 C-18.67190319 4.71504795 -15.33717805 3.44865015 -12 2.1875 C-11.16210938 1.86112549 -10.32421875 1.53475098 -9.4609375 1.19848633 C-8.66945313 0.89966553 -7.87796875 0.60084473 -7.0625 0.29296875 C-6.35222656 0.0199292 -5.64195312 -0.25311035 -4.91015625 -0.53442383 C-3 -1 -3 -1 0 0 Z \",fill:\"#47362A\",transform:\"translate(388,228)\"})),_path346||(_path346=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 1.32 1.98 2.64 3 4 C3.79857422 4.93585938 3.79857422 4.93585938 4.61328125 5.890625 C6.32949033 8.50119656 6.71151611 10.67441179 7.1875 13.75 C7.34605469 14.73484375 7.50460938 15.7196875 7.66796875 16.734375 C7.77753906 17.48203125 7.88710937 18.2296875 8 19 C11.75915495 16.4938967 11.72563254 15.18050197 12.6875 10.875 C12.93886719 9.77929688 13.19023437 8.68359375 13.44921875 7.5546875 C13.63097656 6.71164062 13.81273437 5.86859375 14 5 C14.33 5 14.66 5 15 5 C14.54654469 9.23224959 14.07646721 13.45188768 13.48828125 17.66796875 C12.2607752 26.52698038 11.74794195 35.03793597 12 44 C12.33 41.36 12.66 38.72 13 36 C13.33 36 13.66 36 14 36 C14 41.28 14 46.56 14 52 C13.34 52 12.68 52 12 52 C12 53.98 12 55.96 12 58 C11.34 58 10.68 58 10 58 C9.96261719 57.09636719 9.92523438 56.19273437 9.88671875 55.26171875 C9.82097656 54.08222656 9.75523437 52.90273438 9.6875 51.6875 C9.62949219 50.51574219 9.57148438 49.34398437 9.51171875 48.13671875 C8.95556161 44.72760287 8.42101044 44.21330982 6 42 C6 40.68 6 39.36 6 38 C5.34 38 4.68 38 4 38 C3.97302863 35.39576408 3.95317511 32.79180756 3.9375 30.1875 C3.92912109 29.44951172 3.92074219 28.71152344 3.91210938 27.95117188 C3.89740172 24.70077932 3.96468298 22.10595105 5 19 C5.06546898 16.48952515 5.06546898 16.48952515 4 14 C1.04150073 11.66585353 1.04150073 11.66585353 -2 10 C-1.34 6.7 -0.68 3.4 0 0 Z \",fill:\"#574327\",transform:\"translate(188,390)\"})),_path347||(_path347=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.99 1.32 -1.98 2.64 -3 4 C-1.02 3.34 0.96 2.68 3 2 C2.67 2.99 2.34 3.98 2 5 C2.66 5.66 3.32 6.32 4 7 C3.46632813 7.17015625 2.93265625 7.3403125 2.3828125 7.515625 C-1.85017632 8.89244489 -5.92522427 10.39281038 -10 12.1875 C-13.3925991 13.59061197 -15.8413213 14.16938809 -19.5 13.9375 C-25.1631626 13.64784971 -29.19449559 16.27297392 -34 19 C-45.81142041 25.2082798 -45.81142041 25.2082798 -52 27 C-52.99 26.67 -53.98 26.34 -55 26 C-42.84702227 15.72192404 -26.31015939 9.68758279 -12 3 C-11.1450293 2.58685547 -10.29005859 2.17371094 -9.40917969 1.74804688 C-8.61157227 1.37228516 -7.81396484 0.99652344 -6.9921875 0.609375 C-6.29206543 0.27389648 -5.59194336 -0.06158203 -4.87060547 -0.40722656 C-3 -1 -3 -1 0 0 Z \",fill:\"#342721\",transform:\"translate(460,186)\"})),_path348||(_path348=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.11310547 0.00902344 2.22621094 0.01804687 3.37304688 0.02734375 C6.10309023 0.0507776 8.8326801 0.083586 11.5625 0.125 C11.5625 0.455 11.5625 0.785 11.5625 1.125 C1.6625 1.62 1.6625 1.62 -8.4375 2.125 C-8.7675 4.435 -9.0975 6.745 -9.4375 9.125 C-9.1075 9.455 -8.7775 9.785 -8.4375 10.125 C-8.39686168 11.79117115 -8.394779 13.45888095 -8.4375 15.125 C-7.695 15.063125 -6.9525 15.00125 -6.1875 14.9375 C-3.4375 15.125 -3.4375 15.125 -1.703125 16.54296875 C1.29136601 18.63394954 3.98072201 18.98756493 7.5625 19.625 C12.0439952 20.42255423 15.13872869 21.04360582 18.5625 24.125 C19.2225 23.465 19.8825 22.805 20.5625 22.125 C23.05137372 26.80993876 22.41937773 30.0694214 21.5625 35.125 C20.9025 35.125 20.2425 35.125 19.5625 35.125 C18.9025 32.815 18.2425 30.505 17.5625 28.125 C12.2825 26.805 7.0025 25.485 1.5625 24.125 C1.5625 23.135 1.5625 22.145 1.5625 21.125 C0.88703125 21.08761719 0.2115625 21.05023438 -0.484375 21.01171875 C-1.82242187 20.91310547 -1.82242187 20.91310547 -3.1875 20.8125 C-4.06921875 20.75449219 -4.9509375 20.69648438 -5.859375 20.63671875 C-8.78125157 20.05677052 -10.12568832 18.93656672 -12.4375 17.125 C-13.4275 17.125 -14.4175 17.125 -15.4375 17.125 C-17.40844808 12.19762981 -17.6174928 8.34479128 -17.4375 3.125 C-18.0975 2.795 -18.7575 2.465 -19.4375 2.125 C-12.95878871 -0.23596509 -6.83952165 -0.10553565 0 0 Z \",fill:\"#868048\",transform:\"translate(453.4375,373.875)\"})),_path349||(_path349=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C11.15365457 1.55005471 21.72222467 6.57641538 32 11 C31.01 11.33 30.02 11.66 29 12 C28.34 11.67 27.68 11.34 27 11 C27 11.99 27 12.98 27 14 C12.21867882 14.18451025 12.21867882 14.18451025 6 13 C6 12.34 6 11.68 6 11 C4.948125 10.896875 3.89625 10.79375 2.8125 10.6875 C-13.34278747 8.65721253 -13.34278747 8.65721253 -17 5 C-9.08 4.505 -9.08 4.505 -1 4 C-0.67 2.68 -0.34 1.36 0 0 Z \",fill:\"#2D1E19\",transform:\"translate(131,211)\"})),_path350||(_path350=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.85734305 1.28048666 13.63615343 2.82653878 20.40600586 4.50292969 C31.26875001 7.13053419 42.10997638 8.38716999 53.25 9.125 C54.48363281 9.21136719 55.71726562 9.29773438 56.98828125 9.38671875 C59.9918732 9.59627168 62.99571912 9.80061217 66 10 C66 10.33 66 10.66 66 11 C47.3058509 11.64556764 30.06378265 9.65232206 11.89038086 5.36279297 C9.82977422 4.90576213 9.82977422 4.90576213 7 5 C7 5.99 7 6.98 7 8 C8.32 8.33 9.64 8.66 11 9 C10.01 9.66 9.02 10.32 8 11 C8.33 11.99 8.66 12.98 9 14 C9.95261719 14.1340625 10.90523437 14.268125 11.88671875 14.40625 C14.82962792 14.82634862 17.76876493 15.26734867 20.70703125 15.71875 C21.9590332 15.91017578 21.9590332 15.91017578 23.23632812 16.10546875 C24.94232674 16.36673617 26.64806139 16.62973359 28.35351562 16.89453125 C38.77452864 18.48051171 49.09111206 19.20432432 59.625 19.5625 C60.81996094 19.60568359 62.01492188 19.64886719 63.24609375 19.69335938 C66.16397406 19.79840307 69.08192438 19.90055648 72 20 C72 20.33 72 20.66 72 21 C45.86376044 21.31094638 22.51255099 19.25529736 -3 13 C-2.7215625 11.824375 -2.7215625 11.824375 -2.4375 10.625 C-1.74037734 8.02910225 -1.74037734 8.02910225 -3 6 C-1.02 5.01 0.96 4.02 3 3 C2.01 2.67 1.02 2.34 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#8BA58A\",transform:\"translate(233,164)\"})),_path351||(_path351=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.3125 -0.3125 3.3125 -0.3125 7 0 C9.38164192 2.84260487 10 4.28405267 10 8 C8.68 7.67 7.36 7.34 6 7 C6 7.99 6 8.98 6 10 C6.66 10 7.32 10 8 10 C8 10.66 8 11.32 8 12 C8.66 12 9.32 12 10 12 C10 12.66 10 13.32 10 14 C10.66 14 11.32 14 12 14 C12.38063221 16.3260857 12.71269945 18.66055264 13 21 C12.67 21.33 12.34 21.66 12 22 C11.92755947 24.01964199 11.91622812 26.04167124 11.9375 28.0625 C11.94652344 29.16722656 11.95554688 30.27195313 11.96484375 31.41015625 C11.97644531 32.26480469 11.98804688 33.11945313 12 34 C11.34 34 10.68 34 10 34 C10 33.34 10 32.68 10 32 C9.01 32 8.02 32 7 32 C7 31.34 7 30.68 7 30 C6.34 30 5.68 30 5 30 C5 30.99 5 31.98 5 33 C4.34 33 3.68 33 3 33 C2.690625 31.88625 2.38125 30.7725 2.0625 29.625 C1.17673517 26.2054845 1.17673517 26.2054845 0 24 C0.66 24 1.32 24 2 24 C1.67 23.484375 1.34 22.96875 1 22.4375 C-0.32010877 19.21973488 -0.13242105 16.4429472 0 13 C0.66 13 1.32 13 2 13 C1.34 12.67 0.68 12.34 0 12 C0 10.02 0 8.04 0 6 C0.66 6 1.32 6 2 6 C2.33 4.68 2.66 3.36 3 2 C2.01 1.67 1.02 1.34 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#A16353\",transform:\"translate(138,118)\"})),_path352||(_path352=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C5.55042969 0.99902344 6.10085937 1.99804688 6.66796875 3.02734375 C8.973911 7.05844999 11.59921265 10.79808659 14.3125 14.5625 C19.13173906 21.31545873 23.84256336 28.13452718 28.5 35 C33.06876276 41.72838289 37.67351988 48.42610097 42.375 55.0625 C42.85670654 55.7445752 43.33841309 56.42665039 43.8347168 57.12939453 C46.13084708 60.37707786 48.44174783 63.61260671 50.77734375 66.83203125 C51.62253539 68.01292096 52.46759506 69.19390514 53.3125 70.375 C54.42044922 71.90253906 54.42044922 71.90253906 55.55078125 73.4609375 C56.02902344 74.29882812 56.50726563 75.13671875 57 76 C56.505 77.485 56.505 77.485 56 79 C48.04037416 68.9475109 40.31884778 58.78982598 32.98828125 48.26953125 C29.92153577 43.86897884 26.77759614 39.5267715 23.625 35.1875 C18.19242436 27.69924369 12.8665296 20.1399766 7.58056641 12.54760742 C7.02546387 11.7507251 6.47036133 10.95384277 5.8984375 10.1328125 C5.16633057 9.07924561 5.16633057 9.07924561 4.41943359 8.00439453 C3.42338074 6.59785962 2.38562046 5.22038217 1.31884766 3.86669922 C0 2 0 2 0 0 Z \",fill:\"#DBBA86\",transform:\"translate(107,0)\"})),_path353||(_path353=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C15.51 0 31.02 0 47 0 C47 0.33 47 0.66 47 1 C45.35 1 43.7 1 42 1 C42 2.65 42 4.3 42 6 C41.34 6 40.68 6 40 6 C40 4.35 40 2.7 40 1 C39.505 1.165 39.01 1.33 38.5 1.5 C34.96555911 2.20688818 31.60309299 2.06005155 28 2 C28 3.32 28 4.64 28 6 C35.59 6.33 43.18 6.66 51 7 C47.21157527 9.52561648 44.21466671 9.25391573 39.83203125 9.1953125 C38.63981209 9.19106766 38.63981209 9.19106766 37.42350769 9.18673706 C34.88635162 9.17554705 32.34954928 9.15044491 29.8125 9.125 C28.09180198 9.11496866 26.37109841 9.10584308 24.65039062 9.09765625 C20.43345757 9.07561161 16.21678875 9.04109006 12 9 C12 11.31 12 13.62 12 16 C11.34 16 10.68 16 10 16 C10.33 14.35 10.66 12.7 11 11 C10.08476562 11.02320313 9.16953125 11.04640625 8.2265625 11.0703125 C6.44378906 11.09738281 6.44378906 11.09738281 4.625 11.125 C2.84996094 11.15980469 2.84996094 11.15980469 1.0390625 11.1953125 C-2 11 -2 11 -4 9 C0.62 9 5.24 9 10 9 C10.33 6.36 10.66 3.72 11 1 C8.69 1 6.38 1 4 1 C3.67 1.66 3.34 2.32 3 3 C3 2.34 3 1.68 3 1 C2.01 0.67 1.02 0.34 0 0 Z \",fill:\"#35482E\",transform:\"translate(410,267)\"})),_path354||(_path354=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.93412394 0.52411028 8.58018255 2.18080105 12.8125 4.625 C20.92541571 9.14718976 29.36212618 12.61674465 38 16 C35.83929533 13.83929533 34.5219586 13.3377297 31.6875 12.3125 C25.14287006 9.79238628 19.11198868 6.41045136 13 3 C16.50740921 1.8308636 16.84254069 2.12618281 20 3.6875 C25.21289781 6.1522474 30.56361919 8.08964562 36 10 C36 10.66 36 11.32 36 12 C36.72574219 12.11730469 37.45148437 12.23460937 38.19921875 12.35546875 C41.05072738 13.01167366 43.22507471 13.96235724 45.8125 15.3125 C47.11380859 15.98345703 47.11380859 15.98345703 48.44140625 16.66796875 C49.28574219 17.10753906 50.13007812 17.54710937 51 18 C52.41516597 18.71132681 53.83170375 19.41993526 55.25 20.125 C55.89710938 20.44984375 56.54421875 20.7746875 57.2109375 21.109375 C58.75822124 21.87963852 60.31574435 22.62926904 61.875 23.375 C64.58172273 24.78249582 67.14817612 26.28634741 69.75 27.875 C74.69645794 30.88196532 79.78547078 33.49258808 85 36 C85 36.33 85 36.66 85 37 C79.8201023 37.4210653 76.24456013 36.05380973 71.75 33.6875 C71.12609375 33.37876953 70.5021875 33.07003906 69.859375 32.75195312 C66.63765301 31.10290361 65.04606504 30.06909755 63 27 C59.39973317 25.02958369 55.91058507 24 51.8125 24 C48.30470644 24 46.97264766 22.81206389 44 21 C42.0574591 20.20999729 40.09724388 19.46261738 38.125 18.75 C30.54325884 15.90255875 23.30850246 12.47153867 16 9 C13.96081112 8.05712262 11.91940129 7.11902155 9.875 6.1875 C8.63363281 5.62095703 8.63363281 5.62095703 7.3671875 5.04296875 C4.93252022 3.97026881 2.4757867 2.97357448 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#764C36\",transform:\"translate(523,429)\"})),_path355||(_path355=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.77214844 0.00902344 1.54429687 0.01804687 2.33984375 0.02734375 C2.90832031 0.03894531 3.47679687 0.05054688 4.0625 0.0625 C4.0625 0.7225 4.0625 1.3825 4.0625 2.0625 C-25.35654798 5.92696228 -54.73998054 9.43518834 -84.3125 11.875 C-85.50735016 11.97364349 -86.70220032 12.07228699 -87.93325806 12.17391968 C-94.78198361 12.73461091 -101.63213043 13.27450217 -108.48376465 13.79840088 C-110.87099259 13.98094666 -113.2581119 14.16491666 -115.6451416 14.35003662 C-119.33871994 14.63617742 -123.03258003 14.91834783 -126.7265625 15.19921875 C-127.84920502 15.28621536 -128.97184753 15.37321198 -130.12850952 15.46284485 C-135.41477798 15.85895723 -140.63630952 16.16701053 -145.9375 16.0625 C-145.9375 15.4025 -145.9375 14.7425 -145.9375 14.0625 C-133.89176475 12.71527961 -121.83101954 11.74053037 -109.7432251 10.87176514 C-75.85239396 8.42827126 -41.82065264 5.40815097 -8.18359375 0.51660156 C-5.39336999 0.12627243 -2.80959561 -0.04322455 0 0 Z \",fill:\"#D2BFAB\",transform:\"translate(145.9375,285.9375)\"})),_path356||(_path356=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.625 0.5 2.625 0.5 4.75 2.9375 C8.09488385 8.68906858 10.1396764 14.80920685 9.625 21.5 C6.655 21.83 3.685 22.16 0.625 22.5 C0.955 19.86 1.285 17.22 1.625 14.5 C0.965 14.5 0.305 14.5 -0.375 14.5 C-0.375 16.81 -0.375 19.12 -0.375 21.5 C-3.345 21.5 -6.315 21.5 -9.375 21.5 C-8.94593882 14.84955176 -7.97402248 1.67874157 0 0 Z \",fill:\"#0E0504\",transform:\"translate(311.375,291.5)\"})),_path357||(_path357=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0.33 5.28 0.66 8 1 C8 1.66 8 2.32 8 3 C8.72703125 3.27199219 9.4540625 3.54398437 10.203125 3.82421875 C12.90791598 4.9612887 15.25862476 6.26963853 17.75 7.8125 C23.36233296 11.2362718 29.07525411 14.43004103 34.8671875 17.5390625 C35.83914063 18.06242187 36.81109375 18.58578125 37.8125 19.125 C39.15248047 19.84042969 39.15248047 19.84042969 40.51953125 20.5703125 C43 22 43 22 45.08984375 23.60546875 C47.82467824 25.60206571 50.74695086 26.18673771 54 27 C54 27.66 54 28.32 54 29 C54.639375 29.12375 55.27875 29.2475 55.9375 29.375 C56.9584375 29.684375 56.9584375 29.684375 58 30 C58.495 30.99 58.495 30.99 59 32 C61.02463255 32.65213292 61.02463255 32.65213292 63 33 C63 33.66 63 34.32 63 35 C63.56589844 35.13277344 64.13179687 35.26554687 64.71484375 35.40234375 C65.44832031 35.57894531 66.18179688 35.75554687 66.9375 35.9375 C67.66839844 36.11152344 68.39929688 36.28554688 69.15234375 36.46484375 C71 37 71 37 72 38 C72.04063832 39.66617115 72.042721 41.33388095 72 43 C70.68 43 69.36 43 68 43 C67.34 42.01 66.68 41.02 66 40 C64.515 39.505 64.515 39.505 63 39 C63 38.34 63 37.68 63 37 C62.43152344 36.87238281 61.86304688 36.74476563 61.27734375 36.61328125 C58.9247656 35.97973962 56.79596161 35.15907515 54.5625 34.1875 C53.45068359 33.71376953 53.45068359 33.71376953 52.31640625 33.23046875 C50 32 50 32 47.76025391 30.15087891 C44.80497712 27.84803188 41.81852711 26.12887096 38.51953125 24.35546875 C37.25974875 23.67125503 35.99998369 22.98700919 34.74023438 22.30273438 C32.78440233 21.24813101 30.8274998 20.19555506 28.86987305 19.14428711 C20.90324411 14.856583 13.31930331 10.34379001 6 5 C4.79614693 4.20153689 3.58844421 3.40881038 2.375 2.625 C1.59125 2.08875 0.8075 1.5525 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#493026\",transform:\"translate(554,454)\"})),_path358||(_path358=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.33 0.66 0.66 1 1 C2.85287502 1.07226502 4.70833878 1.0838122 6.5625 1.0625 C7.57441406 1.05347656 8.58632812 1.04445313 9.62890625 1.03515625 C10.41136719 1.02355469 11.19382813 1.01195312 12 1 C11.67 3.31 11.34 5.62 11 8 C-1.34119396 10.29034771 -13.45378429 11.20345215 -26 11 C-25.67 10.01 -25.34 9.02 -25 8 C-26.32 8 -27.64 8 -29 8 C-29 7.34 -29 6.68 -29 6 C-23.25 5.875 -23.25 5.875 -21 7 C-21 6.01 -21 5.02 -21 4 C-19.02 4 -17.04 4 -15 4 C-15 3.01 -15 2.02 -15 1 C-10.01657457 -0.02224111 -5.07454515 -0.3632306 0 0 Z \",fill:\"#030407\",transform:\"translate(137,404)\"})),_path359||(_path359=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.17145596 2.34291191 1.53097213 4.42034672 2 7 C2.3403125 8.5778125 2.3403125 8.5778125 2.6875 10.1875 C2.8421875 11.5796875 2.8421875 11.5796875 3 13 C-0.56105045 16.56105045 -6.31475645 16.97656856 -11.23828125 17.01953125 C-11.94339844 16.99246094 -12.64851563 16.96539062 -13.375 16.9375 C-19.14102242 16.76151727 -24.49592453 18.43538971 -30 20 C-30.33 18.35 -30.66 16.7 -31 15 C-26.05 14.34 -21.1 13.68 -16 13 C-20.95 13 -25.9 13 -31 13 C-28.30407917 10.30407917 -25.25822655 9.76813736 -21.6875 8.75 C-14.08238816 6.49352875 -7.10982815 3.54273971 0 0 Z \",fill:\"#0D1717\",transform:\"translate(493,340)\"})),_path360||(_path360=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2 1.66 2 2.32 2 3 C3.09699219 3.06058594 4.19398438 3.12117188 5.32421875 3.18359375 C6.77865654 3.26804498 8.23308305 3.35269066 9.6875 3.4375 C10.40873047 3.47681641 11.12996094 3.51613281 11.87304688 3.55664062 C15.66707282 3.78185678 19.28651492 4.12839305 23 5 C23 5.33 23 5.66 23 6 C20.36 6.66 17.72 7.32 15 8 C15.11398665 9.62580966 15.24155659 11.25067157 15.375 12.875 C15.44460937 13.77992188 15.51421875 14.68484375 15.5859375 15.6171875 C15.79568132 18.17941903 15.79568132 18.17941903 18 20 C17.01 20.33 16.02 20.66 15 21 C14.34 21.66 13.68 22.32 13 23 C12.67 21.02 12.34 19.04 12 17 C11.34 17.66 10.68 18.32 10 19 C6.9609375 18.7578125 6.9609375 18.7578125 3.375 18.125 C2.18648437 17.92132813 0.99796875 17.71765625 -0.2265625 17.5078125 C-1.14179688 17.34023438 -2.05703125 17.17265625 -3 17 C-3.08097324 14.72975032 -3.13917704 12.45867925 -3.1875 10.1875 C-3.22230469 8.92292969 -3.25710937 7.65835937 -3.29296875 6.35546875 C-3 3 -3 3 -1.48828125 1.05078125 C-0.75158203 0.53064453 -0.75158203 0.53064453 0 0 Z \",fill:\"#0F1811\",transform:\"translate(215,301)\"})),_path361||(_path361=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C10.23 0 20.46 0 31 0 C31 0.33 31 0.66 31 1 C28.69 1 26.38 1 24 1 C24 2.98 24 4.96 24 7 C22.02 7 20.04 7 18 7 C18 7.66 18 8.32 18 9 C14.7 9.33 11.4 9.66 8 10 C8 10.33 8 10.66 8 11 C6.35 11.33 4.7 11.66 3 12 C3 12.33 3 12.66 3 13 C-3.93302093 13.22731216 -10.2168636 12.42002108 -17 11 C-17 10.34 -17 9.68 -17 9 C-16.01 9 -15.02 9 -14 9 C-14 8.34 -14 7.68 -14 7 C-6.08 6.505 -6.08 6.505 2 6 C2 4.35 2 2.7 2 1 C1.34 0.67 0.68 0.34 0 0 Z \",fill:\"#3A4936\",transform:\"translate(376,266)\"})),_path362||(_path362=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0.66 3.96 1.32 6 2 C6.66666667 5.33333333 7.33333333 8.66666667 8 12 C6.68 11.34 5.36 10.68 4 10 C3.34 10.66 2.68 11.32 2 12 C2.18757062 15.82564665 2.18757062 15.82564665 4 19 C4.14115161 21.67058851 4.04247107 24.32432238 4 27 C7.63 27 11.26 27 15 27 C15 25.35 15 23.7 15 22 C14.34 22 13.68 22 13 22 C13 21.34 13 20.68 13 20 C10.69 20.33 8.38 20.66 6 21 C6 18.36 6 15.72 6 13 C6.99 13 7.98 13 9 13 C9.66 12.34 10.32 11.68 11 11 C13.125 11.375 13.125 11.375 15 12 C16.26305335 17.07476794 17.27036084 21.72796354 17 27 C17.66 27.33 18.32 27.66 19 28 C9.76 28 0.52 28 -9 28 C-9 27.67 -9 27.34 -9 27 C-5.37 26.67 -1.74 26.34 2 26 C1.67 23.69 1.34 21.38 1 19 C0.34 19 -0.32 19 -1 19 C-1 16.69 -1 14.38 -1 12 C-1.66 12 -2.32 12 -3 12 C-3.33 15.3 -3.66 18.6 -4 22 C-3.01 22.33 -2.02 22.66 -1 23 C-2.32 23 -3.64 23 -5 23 C-6.18695553 19.43913342 -6.35095418 16.02668976 -6.5625 12.3125 C-6.62727539 11.2596582 -6.62727539 11.2596582 -6.69335938 10.18554688 C-6.7991736 8.45724794 -6.90006581 6.7286489 -7 5 C-6.01 4.67 -5.02 4.34 -4 4 C-4 3.34 -4 2.68 -4 2 C-3.34 2 -2.68 2 -2 2 C-1.67 2.99 -1.34 3.98 -1 5 C-0.67 3.35 -0.34 1.7 0 0 Z \",fill:\"#D27D61\",transform:\"translate(9,242)\"})),_path363||(_path363=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.495 0.99 0.495 0.99 1 2 C0.08982541 3.88776952 -0.83068902 5.77141054 -1.80859375 7.625 C-3.81921166 11.63305143 -5.38918448 15.81873418 -7 20 C-7.66 20 -8.32 20 -9 20 C-9 21.32 -9 22.64 -9 24 C-9.66 24 -10.32 24 -11 24 C-11.268125 25.216875 -11.53625 26.43375 -11.8125 27.6875 C-12.69661636 31.24904675 -13.99403492 33.9074705 -16 37 C-16.69822617 38.65369357 -17.37498605 40.31727014 -18 42 C-14.67098753 39.78065836 -14.24976756 38.65316671 -13 35 C-12 38 -12 38 -12.63671875 39.796875 C-12.98347656 40.44140625 -13.33023438 41.0859375 -13.6875 41.75 C-14.05746094 42.44609375 -14.42742187 43.1421875 -14.80859375 43.859375 C-16.51341825 46.92246952 -18.23356842 49.97183158 -20 53 C-20.66 52.34 -21.32 51.68 -22 51 C-22.598125 51.99 -23.19625 52.98 -23.8125 54 C-24.534375 54.99 -25.25625 55.98 -26 57 C-26.99 57 -27.98 57 -29 57 C-30.70532323 58.94009522 -30.70532323 58.94009522 -32 61 C-31.37900962 56.56914973 -29.65756088 52.93073758 -27.625 49 C-27.32078125 48.39671875 -27.0165625 47.7934375 -26.703125 47.171875 C-25.39605872 44.60242847 -24.05104658 42.08356978 -22.5480957 39.62304688 C-21.01167723 37.01978554 -19.71204196 34.39803256 -18.44140625 31.65625 C-17.97283203 30.65722656 -17.50425781 29.65820312 -17.02148438 28.62890625 C-16.04952462 26.54446243 -15.08076772 24.45852211 -14.11523438 22.37109375 C-11.7951401 17.43810867 -9.60761285 13.13651889 -6 9 C-5.24466989 7.60782293 -4.53000009 6.19210105 -3.875 4.75 C-2.2189781 1.10948905 -2.2189781 1.10948905 0 0 Z \",fill:\"#472E25\",transform:\"translate(169,539)\"})),_path364||(_path364=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.9375 0.3125 1.9375 0.3125 4 1 C4.33 1.99 4.66 2.98 5 4 C5.62567871 4.11069824 6.25135742 4.22139648 6.89599609 4.33544922 C9.72385769 4.84048081 12.54937986 5.35758125 15.375 5.875 C16.35984375 6.04902344 17.3446875 6.22304687 18.359375 6.40234375 C19.77089844 6.66337891 19.77089844 6.66337891 21.2109375 6.9296875 C22.08024902 7.08679199 22.94956055 7.24389648 23.84521484 7.40576172 C26 8 26 8 28 10 C27.01 10.495 27.01 10.495 26 11 C26.33 12.65 26.66 14.3 27 16 C22.545 17.485 22.545 17.485 18 19 C17.505 16.525 17.505 16.525 17 14 C16.34 14 15.68 14 15 14 C14.67 14.66 14.34 15.32 14 16 C14 15.34 14 14.68 14 14 C12.68 14.33 11.36 14.66 10 15 C10 14.01 10 13.02 10 12 C8.35 12 6.7 12 5 12 C4.67 12.99 4.34 13.98 4 15 C2.68 14.01 1.36 13.02 0 12 C-0.66 13.65 -1.32 15.3 -2 17 C-2.33 17 -2.66 17 -3 17 C-3.22174933 15.54364629 -3.42698698 14.08477044 -3.625 12.625 C-3.74101562 11.81289062 -3.85703125 11.00078125 -3.9765625 10.1640625 C-3.98429688 9.44992188 -3.99203125 8.73578125 -4 8 C-3.34 7.34 -2.68 6.68 -2 6 C-1.28591666 4.01643517 -0.61382258 2.01684563 0 0 Z \",fill:\"#231919\",transform:\"translate(12,212)\"})),_path365||(_path365=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3.33 2.65 3.66 4.3 4 6 C6.97 6 9.94 6 13 6 C13 5.34 13 4.68 13 4 C22.89174892 5.28728239 32.36948221 7.45329054 42 10 C41.34 10.99 40.68 11.98 40 13 C35.87484996 12.68946109 31.74991025 12.37620677 27.625 12.0625 C26.46871094 11.97548828 25.31242187 11.88847656 24.12109375 11.79882812 C17.40368511 11.2864834 10.69938434 10.71129502 4 10 C4.33 10.66 4.66 11.32 5 12 C5.06950541 13.54023996 5.08452357 15.08334988 5.0625 16.625 C5.05347656 17.44226563 5.04445312 18.25953125 5.03515625 19.1015625 C5.02355469 19.72804688 5.01195312 20.35453125 5 21 C4.34 21 3.68 21 3 21 C2.95101562 20.28972656 2.90203125 19.57945312 2.8515625 18.84765625 C2.77679688 17.92855469 2.70203125 17.00945312 2.625 16.0625 C2.55539063 15.14597656 2.48578125 14.22945313 2.4140625 13.28515625 C2.20910156 12.15400391 2.20910156 12.15400391 2 11 C1.34 10.67 0.68 10.34 0 10 C0.33 10.99 0.66 11.98 1 13 C0.01 12.67 -0.98 12.34 -2 12 C-2 11.01 -2 10.02 -2 9 C-5.12197478 10.3089572 -5.12197478 10.3089572 -7 13 C-9 12 -9 12 -10.125 8.9375 C-10.41375 7.968125 -10.7025 6.99875 -11 6 C-8.24921116 5.08307039 -6.64051087 4.89113917 -3.8125 4.9375 C-1.9253125 4.9684375 -1.9253125 4.9684375 0 5 C0 4.34 0 3.68 0 3 C-0.66 3 -1.32 3 -2 3 C-2 2.34 -2 1.68 -2 1 C-1.34 0.67 -0.68 0.34 0 0 Z \",fill:\"#6E4C3E\",transform:\"translate(209,247)\"})),_path366||(_path366=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.04449911 3.13349732 0.93423645 3.98968256 0 7 C2.20857055 6.85780436 4.41684987 6.71108153 6.625 6.5625 C8.46964844 6.44068359 8.46964844 6.44068359 10.3515625 6.31640625 C13.61532388 6.03336056 16.77943859 5.58961047 20 5 C20 5.66 20 6.32 20 7 C18.35 7.33 16.7 7.66 15 8 C15.6290625 7.95359375 16.258125 7.9071875 16.90625 7.859375 C24.62911334 7.53371209 29.72814225 9.05532802 35.5 14.25 C35.995 14.8275 36.49 15.405 37 16 C36.34 16 35.68 16 35 16 C35.14084796 17.79206547 35.28783701 19.58364917 35.4375 21.375 C35.51871094 22.37273437 35.59992188 23.37046875 35.68359375 24.3984375 C35.84965626 26.97927613 35.84965626 26.97927613 37 29 C37.31327024 31.81943216 37.51029964 34.63978082 37.71875 37.46875 C37.85132612 39.99074004 37.85132612 39.99074004 39 42 C32.73 42 26.46 42 20 42 C21.47559669 37.57320993 23.90057368 37.08567304 28 35 C28.66 35 29.32 35 30 35 C30 34.34 30 33.68 30 33 C30.66 33 31.32 33 32 33 C32 34.98 32 36.96 32 39 C32.99 39.495 32.99 39.495 34 40 C34 35.05 34 30.1 34 25 C32.68 24.34 31.36 23.68 30 23 C28.75 19.875 28.75 19.875 28 17 C28.66 17 29.32 17 30 17 C30.66 16.67 31.32 16.34 32 16 C29.24216243 12.97951123 27.24358744 12.08771761 23.08911133 11.79467773 C21.9317749 11.75802002 20.77443848 11.7213623 19.58203125 11.68359375 C18.32841797 11.64169922 17.07480469 11.59980469 15.78320312 11.55664062 C13.81770508 11.49766602 13.81770508 11.49766602 11.8125 11.4375 C10.47720022 11.39429008 9.14191348 11.350675 7.80664062 11.30664062 C4.53786703 11.20043498 1.26901667 11.09839003 -2 11 C-2.14285714 3.34821429 -2.14285714 3.34821429 0 0 Z \",fill:\"#3A2A2F\",transform:\"translate(250,353)\"})),_path367||(_path367=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0.99 5.94 1.98 9 3 C9.33 4.65 9.66 6.3 10 8 C11.98 7.67 13.96 7.34 16 7 C15.67 10.3 15.34 13.6 15 17 C15.99 17 16.98 17 18 17 C18 15.68 18 14.36 18 13 C18.66 13 19.32 13 20 13 C20.1875 15.875 20.1875 15.875 20 19 C16.3558226 21.4294516 14.28758728 21.16179575 10 21 C10 21.66 10 22.32 10 23 C11.299375 23.185625 11.299375 23.185625 12.625 23.375 C15.89513853 23.98058121 18.87256899 24.88306035 22 26 C20.6875 28.5 20.6875 28.5 19 31 C18.01 31 17.02 31 16 31 C15.67 31.66 15.34 32.32 15 33 C11.7 33 8.4 33 5 33 C5 28.71 5 24.42 5 20 C7.31 20 9.62 20 12 20 C12 19.01 12 18.02 12 17 C11.34 17 10.68 17 10 17 C10 16.34 10 15.68 10 15 C9.34 15 8.68 15 8 15 C8 14.34 8 13.68 8 13 C7.34 13 6.68 13 6 13 C5.67 10.69 5.34 8.38 5 6 C4.34 6 3.68 6 3 6 C3 5.34 3 4.68 3 4 C2.34 4 1.68 4 1 4 C0.67 2.68 0.34 1.36 0 0 Z \",fill:\"#E05137\",transform:\"translate(308,317)\"})),_path368||(_path368=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C-0.62417955 4.36223005 -3.24483236 7.30388336 -6.5 10.0625 C-10.49672036 13.46853424 -14.22280812 17.10542852 -17.9375 20.8125 C-18.51757812 21.38814697 -19.09765625 21.96379395 -19.6953125 22.55688477 C-22.71697196 25.49787813 -22.71697196 25.49787813 -25 29 C-25.7425 29.433125 -26.485 29.86625 -27.25 30.3125 C-30.13303167 31.92715738 -30.13303167 31.92715738 -32.5 34.5625 C-35.76105074 37.74202447 -38.34153205 38.88809258 -42.89453125 39.1953125 C-43.85746094 39.17210937 -44.82039063 39.14890625 -45.8125 39.125 C-46.78832031 39.10695312 -47.76414062 39.08890625 -48.76953125 39.0703125 C-49.87361328 39.03550781 -49.87361328 39.03550781 -51 39 C-51 38.34 -51 37.68 -51 37 C-50.34 37 -49.68 37 -49 37 C-49 36.34 -49 35.68 -49 35 C-48.34 35 -47.68 35 -47 35 C-47 34.34 -47 33.68 -47 33 C-46.34 33 -45.68 33 -45 33 C-45 32.34 -45 31.68 -45 31 C-44.34 31 -43.68 31 -43 31 C-43 30.34 -43 29.68 -43 29 C-42.34 29 -41.68 29 -41 29 C-40.34 27.68 -39.68 26.36 -39 25 C-38.34 25 -37.68 25 -37 25 C-36.62875 23.7934375 -36.62875 23.7934375 -36.25 22.5625 C-35 20 -35 20 -32.875 19.1875 C-32.25625 19.125625 -31.6375 19.06375 -31 19 C-31 19.66 -31 20.32 -31 21 C-30.34 21 -29.68 21 -29 21 C-29.52268466 23.76276177 -30.10869587 26.3260876 -31 29 C-30.34 29 -29.68 29 -29 29 C-29 28.34 -29 27.68 -29 27 C-27.35 26.34 -25.7 25.68 -24 25 C-24 24.34 -24 23.68 -24 23 C-22.54882812 21.57006836 -22.54882812 21.57006836 -20.53125 19.90234375 C-15.95144237 16.00809374 -11.72332288 11.83665918 -7.5 7.5625 C-6.77296875 6.83095703 -6.0459375 6.09941406 -5.296875 5.34570312 C-3.52890501 3.56610176 -1.76333622 1.78419082 0 0 Z \",fill:\"#2B5653\",transform:\"translate(515,19)\"})),_path369||(_path369=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 1.32 2 2.64 2 4 C3.32 4 4.64 4 6 4 C6 6 6 8 6 10 C6.99 9.34 7.98 8.68 9 8 C11.33199388 7.92094936 13.66832622 7.91201231 16 8 C16.33 8.99 16.66 9.98 17 11 C18.32 10.34 19.64 9.68 21 9 C21.495 10.485 21.495 10.485 22 12 C24.97 12 27.94 12 31 12 C31 12.66 31 13.32 31 14 C33.64 14 36.28 14 39 14 C39 14.66 39 15.32 39 16 C41.31 16 43.62 16 46 16 C45.505 17.485 45.505 17.485 45 19 C40.25 18.125 40.25 18.125 38 17 C36.00051633 16.95455719 33.99963028 16.96154557 32 17 C26.22222222 17.11111111 26.22222222 17.11111111 24 16 C23.505 17.485 23.505 17.485 23 19 C23 17.68 23 16.36 23 15 C22.34 15 21.68 15 21 15 C21 15.99 21 16.98 21 18 C20.01 18 19.02 18 18 18 C18 16.68 18 15.36 18 14 C16.02 14.66 14.04 15.32 12 16 C11.67 15.67 11.34 15.34 11 15 C8.67182036 14.63239269 6.3381615 14.29758419 4 14 C4 13.34 4 12.68 4 12 C2.02 12.33 0.04 12.66 -2 13 C-2 11.35 -2 9.7 -2 8 C-2.66 8 -3.32 8 -4 8 C-3.67 9.98 -3.34 11.96 -3 14 C-5.31 14 -7.62 14 -10 14 C-11 12 -11 12 -10.8125 10 C-10 8 -10 8 -8.3125 6.75 C-5.45766881 5.8241088 -2.98225393 5.864443 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#4B2725\",transform:\"translate(66,224)\"})),_path370||(_path370=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.495 0.99 0.495 0.99 1 2 C0.34 2 -0.32 2 -1 2 C-1 2.66 -1 3.32 -1 4 C-3.97 4 -6.94 4 -10 4 C-10 4.66 -10 5.32 -10 6 C-13.95825385 6.4590213 -17.91662248 6.91704651 -21.875 7.375 C-23.6394043 7.57971924 -23.6394043 7.57971924 -25.43945312 7.78857422 C-30.84579951 8.41391319 -36.25219843 9.03351976 -41.6640625 9.609375 C-42.4905127 9.69783691 -43.31696289 9.78629883 -44.16845703 9.87744141 C-45.69252496 10.03926391 -47.21693254 10.19792692 -48.74169922 10.35302734 C-52.49248226 10.71830192 -52.49248226 10.71830192 -56 12 C-57.70702735 12.06996014 -59.41668003 12.08440154 -61.125 12.0625 C-62.03507812 12.05347656 -62.94515625 12.04445312 -63.8828125 12.03515625 C-64.58148438 12.02355469 -65.28015625 12.01195312 -66 12 C-66 12.66 -66 13.32 -66 14 C-69.96 14 -73.92 14 -78 14 C-77.67 13.34 -77.34 12.68 -77 12 C-74.21817162 11.29515261 -71.48984014 10.71445207 -68.671875 10.1953125 C-67.81949249 10.03114838 -66.96710999 9.86698425 -66.08889771 9.69784546 C-63.31083217 9.16492896 -60.53060339 8.64449853 -57.75 8.125 C-55.85291115 7.7655867 -53.95593822 7.40556104 -52.05908203 7.04492188 C-49.2530157 6.51186105 -46.44679017 5.97978065 -43.63980103 5.45159912 C-38.79453248 4.53889605 -33.958846 3.59660134 -29.1328125 2.5859375 C-19.25284456 0.53098783 -10.11346008 -0.55926968 0 0 Z \",fill:\"#46322B\",transform:\"translate(426,242)\"})),_path371||(_path371=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0 3.96 0 6 0 C6.33 0.99 6.66 1.98 7 3 C8.14988403 2.97498413 8.14988403 2.97498413 9.32299805 2.94946289 C17.91652805 2.84556875 26.27591543 3.50730367 34.8125 4.4375 C45.13617728 5.51181206 55.41782194 6.31062323 65.79467773 6.65820312 C93.49388223 7.60052577 121.55601084 9.10311936 149 13 C149 13.33 149 13.66 149 14 C138.37881271 14.17920708 127.93475095 13.74358091 117.35372925 12.83224487 C102.72608613 11.57760232 88.10193999 10.62931162 73.4375 9.9375 C62.61880243 9.42344686 51.84313928 8.84192216 41.0637207 7.75415039 C32.76412712 6.9290159 24.44785089 6.39900692 16.125 5.875 C15.41899658 5.83052734 14.71299316 5.78605469 13.9855957 5.74023438 C9.99063699 5.48952628 5.99543309 5.2430236 2 5 C2 4.34 2 3.68 2 3 C1.34 2.67 0.68 2.34 0 2 C-0.33 2.66 -0.66 3.32 -1 4 C-0.67 2.68 -0.34 1.36 0 0 Z \",fill:\"#1E4244\",transform:\"translate(477,281)\"})),_path372||(_path372=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.33 1.65 2.66 3.3 3 5 C3.9075 4.814375 4.815 4.62875 5.75 4.4375 C8.93526945 4.00871373 10.01503885 4.25375971 13 5 C15.4138176 5.22117559 17.83114597 5.40572242 20.25 5.5625 C22.14492187 5.68818359 22.14492187 5.68818359 24.078125 5.81640625 C25.04234375 5.87699219 26.0065625 5.93757812 27 6 C26.67 6.66 26.34 7.32 26 8 C25.34 8 24.68 8 24 8 C24.495 9.485 24.495 9.485 25 11 C23.68 10.34 22.36 9.68 21 9 C20.01 9.66 19.02 10.32 18 11 C17.01 10.67 16.02 10.34 15 10 C14.67 10.99 14.34 11.98 14 13 C13.34 13 12.68 13 12 13 C12 12.34 12 11.68 12 11 C11.34 11 10.68 11 10 11 C9.67 10.01 9.34 9.02 9 8 C8.34 7.67 7.68 7.34 7 7 C7.30035156 7.54269531 7.60070312 8.08539063 7.91015625 8.64453125 C8.29042969 9.35996094 8.67070313 10.07539063 9.0625 10.8125 C9.44535156 11.52019531 9.82820313 12.22789062 10.22265625 12.95703125 C11.37616854 15.98862385 10.00086263 17.99741211 9 21 C10.37249963 23.67676547 10.37249963 23.67676547 12 26 C12.66 25.67 13.32 25.34 14 25 C14 26.32 14 27.64 14 29 C13.34 29 12.68 29 12 29 C12 29.99 12 30.98 12 32 C11.01 32 10.02 32 9 32 C8.71125 30.865625 8.4225 29.73125 8.125 28.5625 C7.75375 27.386875 7.3825 26.21125 7 25 C6.34 24.67 5.68 24.34 5 24 C5 23.01 5 22.02 5 21 C4.67 21 4.34 21 4 21 C4 19.02 4 17.04 4 15 C5.32 15 6.64 15 8 15 C8 14.34 8 13.68 8 13 C6.35 13.33 4.7 13.66 3 14 C2.67 13.34 2.34 12.68 2 12 C1.01 12 0.02 12 -1 12 C-1 11.34 -1 10.68 -1 10 C-0.01 10 0.98 10 2 10 C2.33 9.34 2.66 8.68 3 8 C3.33 8.66 3.66 9.32 4 10 C4.66 9.01 5.32 8.02 6 7 C5.2575 7 4.515 7 3.75 7 C-3 7 -3 7 -5.0703125 6.96484375 C-9.16485019 6.80154265 -9.16485019 6.80154265 -13 8 C-13 7.34 -13 6.68 -13 6 C-14.65 6.66 -16.3 7.32 -18 8 C-18.33 6.68 -18.66 5.36 -19 4 C-12.25 3.875 -12.25 3.875 -10 5 C-9.67 4.01 -9.34 3.02 -9 2 C-8.01 2.33 -7.02 2.66 -6 3 C-5.67 2.67 -5.34 2.34 -5 2 C-3.33382885 1.95936168 -1.66611905 1.957279 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#40201F\",transform:\"translate(27,226)\"})),_path373||(_path373=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.51713396 0.50155763 5.51713396 0.50155763 7.9375 3 C11.35500227 6.3139416 15.36771959 5.96527063 19.9375 6.0625 C20.618125 6.041875 21.29875 6.02125 22 6 C22 6.99 22 7.98 22 9 C22.99 9 23.98 9 25 9 C26.02104551 9.97850195 27.0206121 10.97980427 28 12 C28.99 12.33 29.98 12.66 31 13 C31 13.66 31 14.32 31 15 C32.1446875 15.1546875 32.1446875 15.1546875 33.3125 15.3125 C36.28812061 16.07370527 36.9034959 16.9034959 39 19 C41.60611077 19.72197162 41.60611077 19.72197162 44 20 C44 21.32 44 22.64 44 24 C43.34 24 42.68 24 42 24 C41.67 24.66 41.34 25.32 41 26 C40.01 24.68 39.02 23.36 38 22 C37.01 22.495 37.01 22.495 36 23 C34.62437146 21.71034824 33.29233607 20.37310707 32 19 C32 18.34 32 17.68 32 17 C31.34 17 30.68 17 30 17 C29.67 17.99 29.34 18.98 29 20 C29 19.34 29 18.68 29 18 C27.741875 17.855625 26.48375 17.71125 25.1875 17.5625 C22.57332877 17.26251314 20.52560108 16.84186703 18 16 C18 15.34 18 14.68 18 14 C16.68 14 15.36 14 14 14 C14 13.34 14 12.68 14 12 C13.01 12 12.02 12 11 12 C11 11.34 11 10.68 11 10 C10.01 10.33 9.02 10.66 8 11 C8 10.34 8 9.68 8 9 C6.35 9 4.7 9 3 9 C2.731875 8.360625 2.46375 7.72125 2.1875 7.0625 C1.11332248 4.66868314 1.11332248 4.66868314 -2 4 C-1.34 2.68 -0.68 1.36 0 0 Z \",fill:\"#4C3429\",transform:\"translate(114,180)\"})),_path374||(_path374=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.47308594 0.36351562 0.94617188 0.72703125 1.43359375 1.1015625 C5.00863461 3.81942982 8.60707825 6.43021655 12.375 8.875 C19.15957081 13.35165698 25.32189374 18.5801412 31.52124023 23.82324219 C36.31278107 27.87020809 41.09556557 31.57601872 46.453125 34.84375 C47.21882812 35.41609375 47.21882812 35.41609375 48 36 C48 36.66 48 37.32 48 38 C48.53625 38.226875 49.0725 38.45375 49.625 38.6875 C53.32210091 40.73063471 57.37403893 43.00830569 58.6875 47.1875 C58.790625 47.785625 58.89375 48.38375 59 49 C59.99 49.66 60.98 50.32 62 51 C62 51.66 62 52.32 62 53 C62.99 53.33 63.98 53.66 65 54 C65 54.66 65 55.32 65 56 C66.32 56.66 67.64 57.32 69 58 C69 58.66 69 59.32 69 60 C69.66 60 70.32 60 71 60 C71 60.66 71 61.32 71 62 C67.33390455 61.41638391 65.54803439 59.95764866 62.875 57.4375 C59.64978771 54.47178755 56.37767942 51.65147821 52.9375 48.9375 C48.49754375 45.42861439 44.21870646 41.77091081 40 38 C40.33 37.01 40.66 36.02 41 35 C40.57291748 34.65332275 40.14583496 34.30664551 39.70581055 33.94946289 C38.42738434 32.91158876 37.14907437 31.87357144 35.87084961 30.83544922 C34.40194664 29.64265336 32.93270221 28.45027789 31.46313477 27.25830078 C27.43399767 23.98785431 23.42711049 20.69363055 19.4375 17.375 C12.84278216 11.96007113 5.91569233 6.9931112 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#8A5C41\",transform:\"translate(504,468)\"})),_path375||(_path375=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.45779424 4.69239096 0.51864702 7.16592121 -1.9765625 11.12109375 C-3.68604506 14.25949494 -4.26694388 17.51798341 -5 21 C-5.66 21 -6.32 21 -7 21 C-7.11601563 21.7115625 -7.23203125 22.423125 -7.3515625 23.15625 C-8.03955212 26.17345747 -9.07481451 28.6947513 -10.375 31.5 C-10.79523438 32.4178125 -11.21546875 33.335625 -11.6484375 34.28125 C-12.09445313 35.1784375 -12.54046875 36.075625 -13 37 C-13.46277344 37.93199219 -13.92554687 38.86398437 -14.40234375 39.82421875 C-16 42 -16 42 -18.04296875 42.48828125 C-20.02864583 42.32552083 -22.01432292 42.16276042 -24 42 C-22.78065514 37.96678237 -21.44045073 34.45730521 -19 31 C-18.34 31 -17.68 31 -17 31 C-16.82984375 30.443125 -16.6596875 29.88625 -16.484375 29.3125 C-14.99368476 24.61841158 -13.27879756 20.270993 -10.96484375 15.921875 C-9.9271196 13.95280745 -9.9271196 13.95280745 -9.1328125 11.56640625 C-7.81152225 8.57300041 -6.14026776 6.59815147 -3.9375 4.1875 C-2.86822266 3.00220703 -2.86822266 3.00220703 -1.77734375 1.79296875 C-1.19082031 1.20128906 -0.60429688 0.60960937 0 0 Z \",fill:\"#35211D\",transform:\"translate(120,584)\"})),_path376||(_path376=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-20.32860364 4.63267213 -40.62263462 7.11331675 -61.07037354 8.59677124 C-77.77395651 9.82480756 -94.37425764 11.84364742 -110.98974609 13.93139648 C-123.66155132 15.50304488 -136.23690792 16.57282061 -149 17 C-149 16.34 -149 15.68 -149 15 C-137.21079922 13.72539707 -125.42107224 12.45578106 -113.63069439 11.19211006 C-108.15287383 10.60485793 -102.67523163 10.01604371 -97.19799805 9.42333984 C-90.86558132 8.73836658 -84.53268108 8.05805046 -78.19921875 7.3828125 C-77.17071682 7.27313393 -76.14221489 7.16345535 -75.08254623 7.05045319 C-62.12706749 5.67548381 -49.18333723 4.39349327 -36.17546082 3.62576294 C-30.23581053 3.25968707 -24.47172031 2.50093082 -18.612854 1.449646 C-15.394877 0.89586439 -12.19439501 0.5929335 -8.9375 0.375 C-7.87402344 0.30023438 -6.81054688 0.22546875 -5.71484375 0.1484375 C-3.81209536 0.04440234 -1.90559039 0 0 0 Z \",fill:\"#B49C8A\",transform:\"translate(149,291)\"})),_path377||(_path377=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.96 0 7.92 0 12 0 C11.24840312 8.51809794 11.24840312 8.51809794 10.0234375 10.89453125 C8.65863097 13.70228208 8.4000012 16.348205 8 19.4375 C7.45566405 23.63180289 6.67291943 27.11882693 5 31 C4.63128912 32.65919896 4.28718326 34.3247643 4 36 C3.01 35.67 2.02 35.34 1 35 C1.61454317 27.99420781 2.91541533 21.22477301 4.37890625 14.35546875 C5.12133819 10.91321297 5.12133819 10.91321297 5 7 C2.49716669 15.09628653 0.92160496 23.31715472 -0.55371094 31.64916992 C-1.33870879 35.97899834 -2.11056206 39.98599407 -4 44 C-4.66 43.67 -5.32 43.34 -6 43 C-5.57242595 40.01911141 -5.13322963 37.04068357 -4.6875 34.0625 C-4.56955078 33.23169922 -4.45160156 32.40089844 -4.33007812 31.54492188 C-3.56475544 26.5016416 -2.38485146 21.90113528 -0.68432617 17.09594727 C0.29846946 14.08585076 0.75895853 11.0691492 1.1875 7.9375 C1.34605469 6.81214844 1.50460938 5.68679688 1.66796875 4.52734375 C1.77753906 3.69332031 1.88710937 2.85929688 2 2 C1.34 2 0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#6D4836\",transform:\"translate(232,526)\"})),_path378||(_path378=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.61269147 7.10722101 1.61269147 7.10722101 -1.1875 11.1875 C-2.5796875 12.5796875 -2.5796875 12.5796875 -4 14 C-4.804375 14.94875 -5.60875 15.8975 -6.4375 16.875 C-9 19 -9 19 -12.3125 19.3125 C-13.199375 19.209375 -14.08625 19.10625 -15 19 C-15 19.66 -15 20.32 -15 21 C-13.68 21.33 -12.36 21.66 -11 22 C-27.0976726 22.81301377 -38.33343531 19.97735965 -52 11 C-51.34 10.67 -50.68 10.34 -50 10 C-49.01 10.33 -48.02 10.66 -47 11 C-44.94106379 11.22325814 -42.87766347 11.40705759 -40.8125 11.5625 C-39.72582031 11.64628906 -38.63914062 11.73007812 -37.51953125 11.81640625 C-36.68808594 11.87699219 -35.85664063 11.93757813 -35 12 C-35 12.66 -35 13.32 -35 14 C-32.36 14 -29.72 14 -27 14 C-27 14.66 -27 15.32 -27 16 C-21.72 16 -16.44 16 -11 16 C-11 15.34 -11 14.68 -11 14 C-10.01 13.67 -9.02 13.34 -8 13 C-4.37398285 9.14004626 -2.21552987 4.74924755 0 0 Z \",fill:\"#090605\",transform:\"translate(411,384)\"})),_path379||(_path379=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.01037827 0.0199855 2.02075653 0.03997101 3.06175232 0.06056213 C4.77341331 0.09070656 4.77341331 0.09070656 6.51965332 0.12145996 C7.76129745 0.14849503 9.00294159 0.17553009 10.2822113 0.2033844 C12.17785072 0.23880089 12.17785072 0.23880089 14.11178589 0.27493286 C17.47711868 0.33871839 20.84230486 0.40690558 24.20750427 0.47718811 C27.63923723 0.54778908 31.07107796 0.61265525 34.50291443 0.67799377 C41.24065713 0.8074482 47.9782651 0.94270264 54.71580505 1.08229065 C54.71580505 1.74229065 54.71580505 2.40229065 54.71580505 3.08229065 C40.52580505 3.41229065 26.33580505 3.74229065 11.71580505 4.08229065 C9.62013944 8.27362187 9.56242988 9.39393918 10.09080505 13.83229065 C10.20166443 14.8171344 10.3125238 15.80197815 10.42674255 16.81666565 C10.52213318 17.5643219 10.6175238 18.31197815 10.71580505 19.08229065 C10.05580505 19.08229065 9.39580505 19.08229065 8.71580505 19.08229065 C8.05580505 17.43229065 7.39580505 15.78229065 6.71580505 14.08229065 C3.41580505 13.75229065 0.11580505 13.42229065 -3.28419495 13.08229065 C-3.31106048 11.10319667 -3.3305287 9.12400094 -3.34669495 7.14479065 C-3.35829651 6.04264221 -3.36989807 4.94049377 -3.3818512 3.8049469 C-3.24957439 0.11706951 -3.24957439 0.11706951 0 0 Z \",fill:\"#3E2627\",transform:\"translate(217.28419494628906,366.91770935058594)\"})),_path380||(_path380=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2 3.31 2 5.62 2 8 C-1.96 8 -5.92 8 -10 8 C-10 8.66 -10 9.32 -10 10 C-9.34 10 -8.68 10 -8 10 C-7.67 10.66 -7.34 11.32 -7 12 C-6.01 12.33 -5.02 12.66 -4 13 C-4 13.99 -4 14.98 -4 16 C-3.46375 16.0825 -2.9275 16.165 -2.375 16.25 C0.87340691 17.27581271 3.28751859 18.96563894 6 21 C6 21.66 6 22.32 6 23 C8.31 23.66 10.62 24.32 13 25 C13.33 24.34 13.66 23.68 14 23 C14 24.98 14 26.96 14 29 C9.05835538 28.10151916 4.21675853 26.9094394 -0.4375 25 C-3.89432156 23.65099647 -7.38986239 22.85664282 -11 22 C-11 21.01 -11 20.02 -11 19 C-11.99 18.67 -12.98 18.34 -14 18 C-14.07347656 16.93458984 -14.07347656 16.93458984 -14.1484375 15.84765625 C-14.26058594 14.46900391 -14.26058594 14.46900391 -14.375 13.0625 C-14.44460938 12.14597656 -14.51421875 11.22945313 -14.5859375 10.28515625 C-14.79089844 9.15400391 -14.79089844 9.15400391 -15 8 C-15.66 7.67 -16.32 7.34 -17 7 C-13.43954823 5.81318274 -10.56191663 5.90310168 -6.8125 5.9375 C-5.54019531 5.94652344 -4.26789063 5.95554687 -2.95703125 5.96484375 C-1.49330078 5.98224609 -1.49330078 5.98224609 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#516139\",transform:\"translate(390,300)\"})),_path381||(_path381=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C12.23402663 -1.35747419 12.23402663 -1.35747419 16.1953125 1.6875 C19.67823 6.72810422 21.04916898 12.00976457 22 18 C18.0946863 18.22316078 15.57288993 17.51847822 12 16 C11.154375 15.87625 10.30875 15.7525 9.4375 15.625 C6.30229853 14.82110219 5.11822873 13.40065923 3 11 C2.4225 10.5875 1.845 10.175 1.25 9.75 C-0.87822962 6.77047853 -0.17570827 3.57273492 0 0 Z \",fill:\"#CCC07E\",transform:\"translate(582,326)\"})),_path382||(_path382=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0.33 3.3 0.66 5 1 C4.67 5.62 4.34 10.24 4 15 C5.65 15 7.3 15 9 15 C9 15.66 9 16.32 9 17 C10.32 17.33 11.64 17.66 13 18 C8.8794254 19.99785435 5.54805635 20.17835515 1 20 C1 20.66 1 21.32 1 22 C2.13179688 21.91621094 3.26359375 21.83242188 4.4296875 21.74609375 C5.91143781 21.64293392 7.39320982 21.54008547 8.875 21.4375 C9.62136719 21.38142578 10.36773437 21.32535156 11.13671875 21.26757812 C16.7734375 20.88671875 16.7734375 20.88671875 19 22 C18.67 22.99 18.34 23.98 18 25 C13.05 25 8.1 25 3 25 C3 27.64 3 30.28 3 33 C2.34 33 1.68 33 1 33 C1 33.66 1 34.32 1 35 C-0.32 35 -1.64 35 -3 35 C-3 29.72 -3 24.44 -3 19 C-2.34 19 -1.68 19 -1 19 C-1.01160156 17.79601562 -1.02320313 16.59203125 -1.03515625 15.3515625 C-1.04453434 13.77604321 -1.05363452 12.20052225 -1.0625 10.625 C-1.07087891 9.8309375 -1.07925781 9.036875 -1.08789062 8.21875 C-1.11328125 2.2265625 -1.11328125 2.2265625 0 0 Z \",fill:\"#1C0E14\",transform:\"translate(291,427)\"})),_path383||(_path383=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.94 0.33 11.88 0.66 18 1 C17.67 5.95 17.34 10.9 17 16 C12.71 16 8.42 16 4 16 C4 18.31 4 20.62 4 23 C3.67 23 3.34 23 3 23 C2.29994196 19.73172393 1.61713756 16.46007824 0.9375 13.1875 C0.73833984 12.25873047 0.53917969 11.32996094 0.33398438 10.37304688 C0.15029297 9.48037109 -0.03339844 8.58769531 -0.22265625 7.66796875 C-0.39547119 6.84578857 -0.56828613 6.0236084 -0.74633789 5.17651367 C-1 3 -1 3 0 0 Z \",fill:\"#51181E\",transform:\"translate(288,369)\"})),_path384||(_path384=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C2.32 2 3.64 2 5 2 C5 3.32 5 4.64 5 6 C5.66 6 6.32 6 7 6 C7 7.98 7 9.96 7 12 C7.7734375 11.96519531 8.546875 11.93039062 9.34375 11.89453125 C16.03712905 11.72056967 20.91030021 12.18936933 27 15 C27 15.66 27 16.32 27 17 C21.62452409 16.9065993 16.24950579 16.8005365 10.87451172 16.68261719 C9.04515471 16.64428223 7.21572115 16.60943737 5.38623047 16.578125 C2.75981241 16.53257195 0.13392341 16.47456269 -2.4921875 16.4140625 C-3.31306854 16.40251129 -4.13394958 16.39096008 -4.97970581 16.37905884 C-10.77225659 16.22774341 -10.77225659 16.22774341 -13 14 C-12.09507813 13.23816406 -12.09507813 13.23816406 -11.171875 12.4609375 C-6.69550368 8.6054822 -2.95211487 5.13411282 0 0 Z \",fill:\"#1E0C0C\",transform:\"translate(137,338)\"})),_path385||(_path385=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1.98 0.99 -1.98 0.99 -4 2 C-1.69 2 0.62 2 3 2 C0.33691637 4.66308363 -2.50630078 5.04743824 -6.0625 5.875 C-6.76987305 6.04427002 -7.47724609 6.21354004 -8.20605469 6.38793945 C-9.70654276 6.74622802 -11.20770458 7.10170485 -12.70947266 7.45458984 C-14.95088744 7.98830554 -17.18455853 8.54709958 -19.41796875 9.11328125 C-27.61558963 11.16268647 -35.51616912 12.6730701 -44 13 C-44 10.69 -44 8.38 -44 6 C-42.70707031 5.81824219 -41.41414063 5.63648438 -40.08203125 5.44921875 C-28.43321328 3.79198018 -28.43321328 3.79198018 -16.9375 1.3125 C-11.22013419 -0.10943554 -5.86676534 -0.31744021 0 0 Z \",fill:\"#EB7B68\",transform:\"translate(433,483)\"})),_path386||(_path386=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 2.31 1.32 4.62 2 7 C8.6 7.33 15.2 7.66 22 8 C22 8.33 22 8.66 22 9 C19.03 9.66 16.06 10.32 13 11 C12.67 14.3 12.34 17.6 12 21 C11.01 21.33 10.02 21.66 9 22 C9 21.34 9 20.68 9 20 C6.03 19.67 3.06 19.34 0 19 C0 20.65 0 22.3 0 24 C-10.89 24.495 -10.89 24.495 -22 25 C-22.33 27.31 -22.66 29.62 -23 32 C-23.33 32 -23.66 32 -24 32 C-24 28.37 -24 24.74 -24 21 C-20.78548731 19.39274365 -17.56387464 19.94251815 -14 20 C-14 20.66 -14 21.32 -14 22 C-9.71 22.33 -5.42 22.66 -1 23 C-1.14188985 20.45805839 -1.28839155 17.91652007 -1.4375 15.375 C-1.47681641 14.66214844 -1.51613281 13.94929688 -1.55664062 13.21484375 C-1.80309681 9.08196318 -2.23470053 5.07730976 -3 1 C-3.66 1 -4.32 1 -5 1 C-5.33 2.32 -5.66 3.64 -6 5 C-6.33 4.34 -6.66 3.68 -7 3 C-6.67 2.01 -6.34 1.02 -6 0 C-3.42525708 -0.99667468 -2.51072708 -1.25536354 0 0 Z \",fill:\"#330610\",transform:\"translate(337,337)\"})),_path387||(_path387=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0 5.94 0 9 0 C9 6.93 9 13.86 9 21 C13.71787467 21.78631245 17.65019764 22.10707361 22.375 22.0625 C23.62023437 22.05347656 24.86546875 22.04445313 26.1484375 22.03515625 C27.08945313 22.02355469 28.03046875 22.01195312 29 22 C29 22.33 29 22.66 29 23 C26.22994983 23.34130431 23.45926176 23.67313088 20.6875 24 C19.53797852 24.14308594 19.53797852 24.14308594 18.36523438 24.2890625 C12.11826166 25.01485186 6.39837103 25 0 25 C0 16.75 0 8.5 0 0 Z \",fill:\"#2F6A39\",transform:\"translate(57,270)\"})),_path388||(_path388=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.60035358 0.93710906 8.0327527 2.5755711 12 5 C12.99 5 13.98 5 15 5 C15.33 6.32 15.66 7.64 16 9 C18.64 9.66 21.28 10.32 24 11 C24 11.66 24 12.32 24 13 C24.99 13 25.98 13 27 13 C27 13.66 27 14.32 27 15 C28.32 15 29.64 15 31 15 C31 15.66 31 16.32 31 17 C32.76896102 17.36340286 34.54026626 17.71540883 36.3125 18.0625 C37.29863281 18.25972656 38.28476563 18.45695312 39.30078125 18.66015625 C42.09276461 19.20922216 42.09276461 19.20922216 45 18 C45 18.66 45 19.32 45 20 C45.9075 20.268125 46.815 20.53625 47.75 20.8125 C50.73497101 21.90316248 52.54112724 23.06802855 55 25 C55.66 25 56.32 25 57 25 C57.495 26.485 57.495 26.485 58 28 C59.65 28 61.3 28 63 28 C63 28.99 63 29.98 63 31 C63.99 31 64.98 31 66 31 C66 31.99 66 32.98 66 34 C59.53627427 32.15322122 53.70980361 29.46197791 47.74389648 26.41186523 C40.81281448 22.87284561 33.78657493 19.54687881 26.74316406 16.23803711 C25.44910645 15.62714233 25.44910645 15.62714233 24.12890625 15.00390625 C23.35619385 14.64111572 22.58348145 14.2783252 21.78735352 13.90454102 C20 13 20 13 19 12 C18.67 16.29 18.34 20.58 18 25 C16.68 24.67 15.36 24.34 14 24 C14 19.05 14 14.1 14 9 C12.02 8.34 10.04 7.68 8 7 C6.32836805 6.34588315 4.65984798 5.68346682 3 5 C3 4.34 3 3.68 3 3 C0.03 2.505 0.03 2.505 -3 2 C-2.01 1.34 -1.02 0.68 0 0 Z \",fill:\"#886241\",transform:\"translate(101,179)\"})),_path389||(_path389=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3.19335938 2.12277344 3.38671875 3.24554688 3.5859375 4.40234375 C4.66709521 17.07052083 4.66709521 17.07052083 9 28 C11.15770887 38.33180308 11.22868989 48.50567508 11 59 C8.03 59.495 8.03 59.495 5 60 C4.77295405 56.12586026 4.57169522 52.25078985 4.375 48.375 C4.31054688 47.28058594 4.24609375 46.18617188 4.1796875 45.05859375 C3.69292903 35.01920021 3.69292903 35.01920021 6 30 C4.68 30 3.36 30 2 30 C2.185625 29.195625 2.37125 28.39125 2.5625 27.5625 C2.7790625 26.2940625 2.7790625 26.2940625 3 25 C2.67 24.67 2.34 24.34 2 24 C1.79103683 22.19188816 1.63219639 20.37783968 1.5 18.5625 C1.28580817 14.63565085 1.28580817 14.63565085 0 11 C-0.07033769 9.12620395 -0.0843022 7.24998898 -0.0625 5.375 C-0.05347656 4.37210937 -0.04445313 3.36921875 -0.03515625 2.3359375 C-0.02355469 1.56507813 -0.01195312 0.79421875 0 0 Z \",fill:\"#181217\",transform:\"translate(285,369)\"})),_path390||(_path390=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.4375 0.375 3.4375 0.375 6.3125 2.6875 C9.66432042 6.926567 9.53681195 10.1114668 9.4375 15.375 C6.91465927 15.11756727 4.39511856 14.84448683 1.875 14.5625 C1.17052734 14.49224609 0.46605469 14.42199219 -0.25976562 14.34960938 C-5.19451628 13.78108971 -9.1179161 12.62290095 -13.5625 10.375 C-14.8125 8.5 -14.8125 8.5 -14.5625 6.375 C-12.17431687 3.26312501 -10.49212925 1.63772131 -6.6875 0.5625 C-4.45447755 0.42851865 -2.22474677 0.23418387 0 0 Z \",fill:\"#F4E1A6\",transform:\"translate(449.5625,330.625)\"})),_path391||(_path391=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.99 0.99 0.99 2 2 C4.03929286 2.18437698 4.03929286 2.18437698 6.3515625 1.9765625 C7.20234375 1.925 8.053125 1.8734375 8.9296875 1.8203125 C10.26386719 1.72363281 10.26386719 1.72363281 11.625 1.625 C12.5221875 1.56828125 13.419375 1.5115625 14.34375 1.453125 C16.56328624 1.31145247 18.78172402 1.1600296 21 1 C21 1.66 21 2.32 21 3 C10.95726488 5.2054634 1.21548751 5.20430975 -9 5 C-9 5.66 -9 6.32 -9 7 C-9.84304688 7.06058594 -10.68609375 7.12117187 -11.5546875 7.18359375 C-12.65039062 7.26738281 -13.74609375 7.35117188 -14.875 7.4375 C-16.51082031 7.55931641 -16.51082031 7.55931641 -18.1796875 7.68359375 C-20.94728971 7.83001703 -20.94728971 7.83001703 -23 9 C-23.33 9.66 -23.66 10.32 -24 11 C-26.64 10.67 -29.28 10.34 -32 10 C-32 10.99 -32 11.98 -32 13 C-31.34 13 -30.68 13 -30 13 C-30 13.66 -30 14.32 -30 15 C-32.38564077 14.42415568 -34.66682784 13.77772405 -37 13 C-39.30884952 13.35009944 -39.30884952 13.35009944 -41.83203125 14.07421875 C-42.78924072 14.32800293 -43.7464502 14.58178711 -44.73266602 14.84326172 C-45.74901123 15.12186035 -46.76535645 15.40045898 -47.8125 15.6875 C-48.84753662 15.96352051 -49.88257324 16.23954102 -50.94897461 16.52392578 C-57.72320651 18.34102879 -64.46106614 20.25778344 -71.16015625 22.3359375 C-74.19607129 23.04584886 -76.89309023 23.1200292 -80 23 C-79 21 -79 21 -77.0625 20 C-74.49372708 19.16121701 -72.12175054 18.60714605 -69.4765625 18.11328125 C-64.01766617 17.04100688 -58.67428082 15.66469133 -53.3125 14.1875 C-52.34771729 13.92396729 -51.38293457 13.66043457 -50.38891602 13.38891602 C-45.00451216 11.8979125 -39.7122144 10.27724586 -34.4375 8.4375 C-25.15351649 5.23576908 -15.59167299 3.07273198 -6 1 C-4.84628906 0.74734375 -3.69257813 0.4946875 -2.50390625 0.234375 C-1.67761719 0.15703125 -0.85132813 0.0796875 0 0 Z \",fill:\"#4D6B61\",transform:\"translate(463,221)\"})),_path392||(_path392=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.70125 0.28875 1.4025 0.5775 2.125 0.875 C5.04572025 2.01789053 8.02457986 3.00819329 11 4 C11 9.94 11 15.88 11 22 C4.14240492 20.04068712 -2.42321498 17.75665244 -9 15 C-9 13.68 -9 12.36 -9 11 C-10.32 10.34 -11.64 9.68 -13 9 C-12.34 8.34 -11.68 7.68 -11 7 C-7.7 7.99 -4.4 8.98 -1 10 C-0.67 6.7 -0.34 3.4 0 0 Z \",fill:\"#D4A980\",transform:\"translate(78,172)\"})),_path393||(_path393=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C3.67 2.97 3.34 5.94 3 9 C4.65 8.34 6.3 7.68 8 7 C7.34 6.34 6.68 5.68 6 5 C6.99 4.34 7.98 3.68 9 3 C9.33 3.33 9.66 3.66 10 4 C16.34046126 3.94338874 22.1151417 2.21203894 28 0 C24.39190497 4.75612527 19.52563577 5.60804595 14 7 C15.2684375 6.7834375 15.2684375 6.7834375 16.5625 6.5625 C20.03593149 5.9941203 23.51445662 5.48797607 27 5 C23.68972825 9.96540763 18.67818998 10.82580639 13 12 C7.00550596 12.45424273 1.00029926 12.24001197 -5 12 C-4.34 11.34 -3.68 10.68 -3 10 C-2.01 10 -1.02 10 0 10 C0 9.34 0 8.68 0 8 C-1.98 8.33 -3.96 8.66 -6 9 C-6.12375 9.639375 -6.2475 10.27875 -6.375 10.9375 C-6.58125 11.618125 -6.7875 12.29875 -7 13 C-7.99 13.495 -7.99 13.495 -9 14 C-9.33 14.99 -9.66 15.98 -10 17 C-10.99 17 -11.98 17 -13 17 C-11.54955729 12.89041233 -9.48889248 9.56741255 -7 6 C-11.62 5.34 -16.24 4.68 -21 4 C-20.67 3.34 -20.34 2.68 -20 2 C-18.72382812 2.02320313 -17.44765625 2.04640625 -16.1328125 2.0703125 C-14.4635475 2.08906829 -12.7942762 2.10726869 -11.125 2.125 C-9.86236328 2.15013672 -9.86236328 2.15013672 -8.57421875 2.17578125 C-7.36572266 2.18544922 -7.36572266 2.18544922 -6.1328125 2.1953125 C-5.38918457 2.20578613 -4.64555664 2.21625977 -3.87939453 2.22705078 C-1.75509765 2.1665597 -1.75509765 2.1665597 0 0 Z \",fill:\"#A25F4A\",transform:\"translate(124,386)\"})),_path394||(_path394=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.67299227 3.13284634 5.76302344 6.20570044 8 10.5 C10.2253179 14.7571299 12.45009605 17.72316559 16 21 C17.89390456 23.26456149 19.41643676 25.48492897 21 28 C20.67 28.99 20.34 29.98 20 31 C19.34 31 18.68 31 18 31 C17.67 30.34 17.34 29.68 17 29 C16.34 30.32 15.68 31.64 15 33 C12 29.25 12 29.25 12 27 C10.68 27.33 9.36 27.66 8 28 C6.82807953 26.04480616 5.6626071 24.0857461 4.5 22.125 C3.52546875 20.48917969 3.52546875 20.48917969 2.53125 18.8203125 C1 16 1 16 1 14 C0.34 14 -0.32 14 -1 14 C-2.96189209 10.3321148 -4.39301257 7.12751449 -5 3 C-4.67 3.66 -4.34 4.32 -4 5 C-3.34 5 -2.68 5 -2 5 C-1.01 6.485 -1.01 6.485 0 8 C1.09658936 4.71023192 0.79953138 3.28696233 0 0 Z \",fill:\"#5F4032\",transform:\"translate(470,539)\"})),_path395||(_path395=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.21762707 5.505965 0.4338962 10.22840233 -0.875 15.5625 C-2.13974152 20.96564705 -3.27526902 26.30454455 -4 31.8125 C-4.8221458 37.98950695 -5.83178272 44.11834215 -6.9375 50.25 C-7.09541016 51.18046143 -7.25332031 52.11092285 -7.41601562 53.06958008 C-7.57650391 53.9386499 -7.73699219 54.80771973 -7.90234375 55.703125 C-8.04148193 56.48333008 -8.18062012 57.26353516 -8.32397461 58.06738281 C-9 60 -9 60 -12 62 C-12.70355115 64.57679229 -13.24517532 67.00489097 -13.6875 69.625 C-13.81705078 70.33140625 -13.94660156 71.0378125 -14.08007812 71.765625 C-14.39801563 73.50839354 -14.70049829 75.25396874 -15 77 C-17 75 -17 75 -17.23046875 72.93359375 C-17.08653459 64.57232739 -16.60357768 57.06800587 -13.765625 49.15234375 C-12.69374904 46.13905981 -11.85237808 43.0816746 -11 40 C-10.34 40 -9.68 40 -9 40 C-8.86948242 39.28569824 -8.73896484 38.57139648 -8.60449219 37.83544922 C-3.7804921 11.61603717 -3.7804921 11.61603717 0 0 Z \",fill:\"#55372B\",transform:\"translate(237,530)\"})),_path396||(_path396=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.09883934 1.14789743 13.41658619 3.11450374 20 6 C20 5.34 20 4.68 20 4 C25.66828055 4.59468016 30.60322154 6.09242801 35.9375 8.0625 C36.71673828 8.34416016 37.49597656 8.62582031 38.29882812 8.91601562 C40.20140125 9.60467706 42.10101725 10.30149903 44 11 C44 13.64 44 16.28 44 19 C38.52648333 18.64303152 34.82235652 17.00625627 30.00390625 14.4609375 C26.41023814 12.71317173 22.74795272 11.31501247 19 9.9375 C17.96939453 9.55658203 17.96939453 9.55658203 16.91796875 9.16796875 C13.87703681 8.04793084 10.83220343 6.93924255 7.78515625 5.8359375 C6.88667969 5.49820312 5.98820313 5.16046875 5.0625 4.8125 C4.29035156 4.53019531 3.51820313 4.24789063 2.72265625 3.95703125 C1 3 1 3 0 0 Z \",fill:\"#A77051\",transform:\"translate(582,429)\"})),_path397||(_path397=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C9.89613084 -0.21105492 19.2648233 -0.10084738 29 2 C29.7013076 8.59229145 27.49602186 12.49376557 24 18 C23.01 18 22.02 18 21 18 C21.33 19.32 21.66 20.64 22 22 C19 22 19 22 17.4375 20.625 C16.7259375 19.820625 16.7259375 19.820625 16 19 C15.34 18.34 14.68 17.68 14 17 C14.62648438 16.91363281 15.25296875 16.82726562 15.8984375 16.73828125 C18.36284506 16.31458973 20.6441944 15.84290292 23 15 C24.57223394 12.69464365 24.57223394 12.69464365 25 10 C25.66 8.68 26.32 7.36 27 6 C23.04 6 19.08 6 15 6 C14.67 7.98 14.34 9.96 14 12 C3.12287335 8.63327032 3.12287335 8.63327032 0.625 5 C0 3 0 3 0 0 Z \",fill:\"#0F120C\",transform:\"translate(515,327)\"})),_path398||(_path398=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.99 2 1.98 2 3 C3.32 3.33 4.64 3.66 6 4 C5 6 5 6 2 8 C1.42251197 9.96361864 1.42251197 9.96361864 1.3125 12.125 C1.209375 13.40375 1.10625 14.6825 1 16 C1.66 16 2.32 16 3 16 C3.33 15.01 3.66 14.02 4 13 C4.66 14.65 5.32 16.3 6 18 C4.02 18.33 2.04 18.66 0 19 C-0.495 16.525 -0.495 16.525 -1 14 C-1.99 14 -2.98 14 -4 14 C-4 14.66 -4 15.32 -4 16 C-3.34 16.33 -2.68 16.66 -2 17 C-2.66 17 -3.32 17 -4 17 C-4 17.66 -4 18.32 -4 19 C-4.66 18.67 -5.32 18.34 -6 18 C-5.98839844 17.38511719 -5.97679687 16.77023437 -5.96484375 16.13671875 C-5.95582031 15.32847656 -5.94679687 14.52023437 -5.9375 13.6875 C-5.92589844 12.88699219 -5.91429687 12.08648437 -5.90234375 11.26171875 C-5.90342145 8.83138666 -5.90342145 8.83138666 -7 6 C-7.99 6.99 -8.98 7.98 -10 9 C-9.01 9 -8.02 9 -7 9 C-7 9.66 -7 10.32 -7 11 C-7.99 11 -8.98 11 -10 11 C-10.33 11.66 -10.66 12.32 -11 13 C-12.32 13 -13.64 13 -15 13 C-15 12.01 -15 11.02 -15 10 C-16.65 10.33 -18.3 10.66 -20 11 C-20 10.34 -20 9.68 -20 9 C-20.66 9 -21.32 9 -22 9 C-22.66 6.36 -23.32 3.72 -24 1 C-23.34 1 -22.68 1 -22 1 C-21.34 1.66 -20.68 2.32 -20 3 C-19.34 2.34 -18.68 1.68 -18 1 C-17.67 1.99 -17.34 2.98 -17 4 C-16.01 4 -15.02 4 -14 4 C-13.67 3.01 -13.34 2.02 -13 1 C-10.33333333 1 -7.66666667 1 -5 1 C-4.67 1.99 -4.34 2.98 -4 4 C-3.01 4 -2.02 4 -1 4 C-0.67 2.68 -0.34 1.36 0 0 Z \",fill:\"#8D5944\",transform:\"translate(181,249)\"})),_path399||(_path399=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.56679892 0.24474085 3.1313453 0.50731238 4.6875 0.8125 C4.6875 1.4725 4.6875 2.1325 4.6875 2.8125 C5.3475 2.8125 6.0075 2.8125 6.6875 2.8125 C7.1825 4.7925 7.1825 4.7925 7.6875 6.8125 C8.3475 6.8125 9.0075 6.8125 9.6875 6.8125 C9.3575 8.4625 9.0275 10.1125 8.6875 11.8125 C9.47125 12.121875 10.255 12.43125 11.0625 12.75 C13.6875 13.8125 13.6875 13.8125 15.6875 14.8125 C15.6875 15.4725 15.6875 16.1325 15.6875 16.8125 C12.07975156 17.26346856 10.05551654 16.57267586 7 14.8125 C2.24852466 12.30701394 -2.03112348 11.94341272 -7.3125 12.8125 C-9.58963687 13.69299292 -11.6180269 14.69772899 -13.71875 15.9375 C-15.3125 16.8125 -15.3125 16.8125 -17.3125 16.8125 C-17.3125 16.1525 -17.3125 15.4925 -17.3125 14.8125 C-16.6525 14.8125 -15.9925 14.8125 -15.3125 14.8125 C-15.3125 14.1525 -15.3125 13.4925 -15.3125 12.8125 C-16.44429687 12.83570313 -17.57609375 12.85890625 -18.7421875 12.8828125 C-20.22395175 12.90156901 -21.70572312 12.91976934 -23.1875 12.9375 C-23.93386719 12.95425781 -24.68023437 12.97101563 -25.44921875 12.98828125 C-27.40444461 13.0058959 -29.35992021 12.91570189 -31.3125 12.8125 C-31.9725 12.1525 -32.6325 11.4925 -33.3125 10.8125 C-31.80623047 10.88210938 -31.80623047 10.88210938 -30.26953125 10.953125 C-21.8999719 11.2163769 -15.05326742 10.63450387 -7.08203125 7.6875 C-4.31552121 6.81345452 -2.19121521 6.64409253 0.6875 6.8125 C0.6875 6.1525 0.6875 5.4925 0.6875 4.8125 C-2.9425 4.8125 -6.5725 4.8125 -10.3125 4.8125 C-7.13891612 0.4752687 -5.21208833 -0.56187052 0 0 Z \",fill:\"#7D4B49\",transform:\"translate(257.3125,487.1875)\"})),_path400||(_path400=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.33 1.32 -0.66 2.64 -1 4 C-6.03422075 5.00295731 -11.0696207 5.99968311 -16.10620117 6.99072266 C-17.81845148 7.32854107 -19.53037065 7.66804245 -21.24194336 8.00927734 C-23.70601069 8.50023006 -26.17121601 8.98506421 -28.63671875 9.46875 C-29.39836838 9.62186646 -30.16001801 9.77498291 -30.94474792 9.93273926 C-34.67844154 10.65911584 -38.19275018 11.18427484 -42 11 C-43 9 -43 9 -44 6 C-43.34 6 -42.68 6 -42 6 C-42 5.34 -42 4.68 -42 4 C-27.26260779 0.77619545 -27.26260779 0.77619545 -22.8125 0.9375 C-19.28008123 0.9954085 -16.39213397 0.58577699 -12.9375 -0.0625 C-8.23664718 -0.91449234 -4.64445212 -1.0555573 0 0 Z \",fill:\"#666959\",transform:\"translate(386,244)\"})),_path401||(_path401=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0 4.62 0 7 0 C13.4375 24.625 13.4375 24.625 13 36 C12.67 36 12.34 36 12 36 C12.11509661 37.41750563 12.24253658 38.83401169 12.375 40.25 C12.44460938 41.03890625 12.51421875 41.8278125 12.5859375 42.640625 C12.87930047 44.98551687 12.87930047 44.98551687 13.94140625 46.85546875 C15.40897197 49.82850778 15.9108226 52.81776071 16.5625 56.0625 C17.57718913 61.08576611 17.57718913 61.08576611 19 66 C19.12781786 68.67394964 19.04391871 71.32095857 19 74 C16.89452361 70.84178541 16.31288227 68.67564156 15.5 65 C15.2421875 63.845 14.984375 62.69 14.71875 61.5 C13.89647286 57.49586782 13.21685101 53.48181523 12.625 49.4375 C12.1012597 46.88873872 12.1012597 46.88873872 10.47265625 44.5390625 C8.77727382 41.61598934 8.57758894 39.72809657 8.4375 36.375 C7.89035855 27.6529216 6.69338437 19.97771024 3 12 C2.41641362 10.42431677 1.85457936 8.8404404 1.3125 7.25 C1.06113281 6.51265625 0.80976563 5.7753125 0.55078125 5.015625 C0 3 0 3 0 0 Z \",fill:\"#6C4C3B\",transform:\"translate(359,526)\"})),_path402||(_path402=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.216875 -0.04125 2.43375 -0.0825 3.6875 -0.125 C4.71423828 -0.15980469 4.71423828 -0.15980469 5.76171875 -0.1953125 C8 0 8 0 10.14892578 0.98852539 C13.73254394 2.25988436 17.09917046 2.33449249 20.85546875 2.37890625 C21.96973991 2.40439796 21.96973991 2.40439796 23.10652161 2.43040466 C25.46676264 2.48329648 27.82698798 2.52373994 30.1875 2.5625 C32.55863779 2.60645889 34.92964174 2.65313549 37.3006134 2.70530701 C38.77291244 2.73721659 40.24533015 2.76412154 41.71781921 2.78553772 C46.77649089 2.88824544 46.77649089 2.88824544 49 4 C48.67 6.97 48.34 9.94 48 13 C42.06 13 36.12 13 30 13 C30.66 10.03 31.32 7.06 32 4 C27.71306732 4.26293391 23.42638632 4.52958673 19.13989258 4.79956055 C17.68422579 4.89073134 16.22849701 4.98091814 14.77270508 5.07006836 C12.66991034 5.19901672 10.56737033 5.3316025 8.46484375 5.46484375 C7.202771 5.543396 5.94069824 5.62194824 4.64038086 5.70288086 C1.05319271 5.99565854 -2.44466093 6.45317884 -6 7 C-3 5 -3 5 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#F29773\",transform:\"translate(385,447)\"})),_path403||(_path403=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C1.66 2 2.32 2 3 2 C6.29657492 8.39851811 8.55477698 13.73561438 8.56640625 21.00390625 C8.79632588 23.16788922 8.79632588 23.16788922 10.82421875 24.23828125 C13.51952104 25.181879 16.1752693 25.61480945 19 26 C19 26.66 19 27.32 19 28 C24.94 28.66 30.88 29.32 37 30 C37 30.99 37 31.98 37 33 C37.99 33.33 38.98 33.66 40 34 C40 37.3 40 40.6 40 44 C40.99 44.495 40.99 44.495 42 45 C40.68 45 39.36 45 38 45 C37.505 40.545 37.505 40.545 37 36 C35.68 35.67 34.36 35.34 33 35 C33 34.01 33 33.02 33 32 C31.783125 32.020625 30.56625 32.04125 29.3125 32.0625 C26.81800062 32.07128345 24.76845475 31.95153704 22.3125 31.4375 C19.61190415 30.92657646 17.65737525 31.40947217 15 32 C14.67 31.67 14.34 31.34 14 31 C12.00041636 30.95919217 9.99954746 30.95745644 8 31 C7.34 28.69 6.68 26.38 6 24 C5.67 24 5.34 24 5 24 C4.93941406 23.40832031 4.87882812 22.81664062 4.81640625 22.20703125 C4.37987629 18.09021792 3.91328654 14.04455467 3 10 C2.34 10 1.68 10 1 10 C1 8.68 1 7.36 1 6 C0.34 6 -0.32 6 -1 6 C-1.33 5.34 -1.66 4.68 -2 4 C-3.65 4 -5.3 4 -7 4 C-7 3.34 -7 2.68 -7 2 C-4.69 1.34 -2.38 0.68 0 0 Z \",fill:\"#272517\",transform:\"translate(423,328)\"})),_path404||(_path404=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1 1 2 2 3 3 C3.8353125 3.7734375 3.8353125 3.7734375 4.6875 4.5625 C6 6 6 6 6 8 C7.65 7.34 9.3 6.68 11 6 C14 9.75 14 9.75 14 12 C14.66 12 15.32 12 16 12 C16 10.35 16 8.7 16 7 C16.66 7 17.32 7 18 7 C18.33 7.99 18.66 8.98 19 10 C21.52690371 13.50958848 24.94962446 14.00651166 29 15 C29 15.66 29 16.32 29 17 C29.99 17.33 30.98 17.66 32 18 C32.33 16.68 32.66 15.36 33 14 C34.32 14.33 35.64 14.66 37 15 C37 15.66 37 16.32 37 17 C37.66 17.33 38.32 17.66 39 18 C39.495 18.99 39.495 18.99 40 20 C40 19.34 40 18.68 40 18 C40.99 18 41.98 18 43 18 C43.66 19.65 44.32 21.3 45 23 C45.99 22.67 46.98 22.34 48 22 C48 23.32 48 24.64 48 26 C48.66 26 49.32 26 50 26 C50 26.99 50 27.98 50 29 C49.40832031 28.7834375 48.81664062 28.566875 48.20703125 28.34375 C42.26339098 26.22239206 42.26339098 26.22239206 36 26 C36 25.34 36 24.68 36 24 C34.1746875 23.4740625 34.1746875 23.4740625 32.3125 22.9375 C26.90017405 21.14477374 22.08425276 18.47478557 17.109375 15.71875 C13.45585591 13.69921683 9.74769728 11.83710651 6 10 C5.67 10.66 5.34 11.32 5 12 C4.61908203 11.16855469 4.61908203 11.16855469 4.23046875 10.3203125 C3.88628906 9.59585938 3.54210937 8.87140625 3.1875 8.125 C2.85105469 7.40570313 2.51460938 6.68640625 2.16796875 5.9453125 C1.00532903 3.69457194 1.00532903 3.69457194 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#482F24\",transform:\"translate(62,154)\"})),_path405||(_path405=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 17.82 2 35.64 2 54 C0.02 54 -1.96 54 -4 54 C-4.42916747 37.95390517 -3.1399064 21.99355378 -2 6 C-1.34 6 -0.68 6 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#D0A383\",transform:\"translate(292,572)\"})),_path406||(_path406=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.23345754 1.44462876 7.25222851 3.54418603 10.75 6.3125 C11.89671062 7.21278092 13.04386977 8.11249074 14.19140625 9.01171875 C15.10817139 9.73367432 15.10817139 9.73367432 16.04345703 10.47021484 C18.83516574 12.65300081 21.65595972 14.79681854 24.47631836 16.94238281 C41.18705174 29.65855533 41.18705174 29.65855533 48.50390625 36.046875 C49.4326355 36.85499634 49.4326355 36.85499634 50.38012695 37.67944336 C51.59364405 38.73927047 52.80214717 39.80487668 54.00463867 40.87719727 C57.47979269 43.91776971 60.79250843 46.0139674 65 48 C66.68933922 49.6436814 68.35259924 51.3142876 70 53 C72.37435322 54.85696882 74.77911439 56.66293734 77.20703125 58.44921875 C77.79871094 58.96097656 78.39039063 59.47273437 79 60 C79 60.66 79 61.32 79 62 C74.45015892 61.72425206 72.28436308 59.77600399 69.05859375 56.85546875 C62.69591576 51.12060718 55.87806455 45.88918525 49.125 40.625 C44.47128133 36.99626795 39.91844174 33.27733804 35.4375 29.4375 C29.13794861 24.0479793 22.62242773 18.98481652 16 14 C15.44828125 13.58411621 14.8965625 13.16823242 14.328125 12.73974609 C8.05184926 7.97593758 8.05184926 7.97593758 1.66015625 3.37109375 C1.11230469 2.91863281 0.56445312 2.46617187 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#996B50\",transform:\"translate(501,457)\"})),_path407||(_path407=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C1.99 2.33 2.98 2.66 4 3 C3.34 3 2.68 3 2 3 C2 3.66 2 4.32 2 5 C3.02786621 4.98018066 4.05573242 4.96036133 5.11474609 4.93994141 C8.6098266 4.99396867 11.73011517 5.36338038 15.1640625 5.9609375 C24.53866152 7.36973624 33.91066635 7.45798235 43.375 7.625 C45.19012066 7.66328821 47.00522527 7.70234571 48.8203125 7.7421875 C53.21340741 7.83697376 57.60658655 7.9214207 62 8 C62 8.66 62 9.32 62 10 C21.17297641 10.61916858 21.17297641 10.61916858 2 7 C2 8.65 2 10.3 2 12 C3.03688965 11.99419922 4.0737793 11.98839844 5.14208984 11.98242188 C17.64308455 11.93534192 30.12850944 12.18600724 42.625 12.5 C44.61457851 12.54837585 46.60416184 12.59655398 48.59375 12.64453125 C53.39589169 12.76075122 58.19796105 12.87961284 63 13 C63 13.66 63 14.32 63 15 C57.04501516 15.05014237 51.09015826 15.08606363 45.13500977 15.10986328 C43.11708429 15.11980459 41.09917276 15.13336235 39.08129883 15.15087891 C26.55592185 15.25673593 14.39856581 14.84661706 2 13 C1.67 13.99 1.34 14.98 1 16 C0.67 10.72 0.34 5.44 0 0 Z \",fill:\"#AB876C\",transform:\"translate(337,419)\"})),_path408||(_path408=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C16.46875 -0.265625 16.46875 -0.265625 21 2 C21 2.99 21 3.98 21 5 C36.84 5.33 52.68 5.66 69 6 C69 6.66 69 7.32 69 8 C60.59413885 8.02317503 52.18829106 8.04094143 43.78240585 8.05181217 C39.87917705 8.05702969 35.97597012 8.06410684 32.07275391 8.07543945 C28.30561356 8.08630847 24.53849424 8.09228537 20.77133942 8.09487724 C19.33444131 8.09672424 17.89754436 8.10033095 16.46065521 8.10573006 C14.44741438 8.11299363 12.43415237 8.11340851 10.42089844 8.11352539 C9.27506287 8.115746 8.12922729 8.11796661 6.94866943 8.12025452 C4.44128864 8.01799691 2.38484323 7.73528797 0 7 C0 4.69 0 2.38 0 0 Z \",fill:\"#8B7D68\",transform:\"translate(268,269)\"})),_path409||(_path409=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 2.97 0 5.94 0 9 C-6.77871256 12.37873134 -13.00201123 15.27305583 -20.5078125 16.4296875 C-24.53241432 17.35067789 -28.07883134 19.22299024 -31.75 21.07421875 C-32.4925 21.37972656 -33.235 21.68523437 -34 22 C-34.66 21.67 -35.32 21.34 -36 21 C-35.195625 20.54625 -34.39125 20.0925 -33.5625 19.625 C-30.91143428 18.25274335 -30.91143428 18.25274335 -30 16 C-31.32 15.67 -32.64 15.34 -34 15 C-25.79592258 10.7997742 -17.56477343 6.70888481 -9.125 3 C-8.44179688 2.69763428 -7.75859375 2.39526855 -7.0546875 2.08374023 C-2.25140694 0 -2.25140694 0 0 0 Z \",fill:\"#3C312E\",transform:\"translate(626,98)\"})),_path410||(_path410=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C0.0625 4.625 0.0625 4.625 -1 7 C0.65 5.68 2.3 4.36 4 3 C2.80100302 6.0831351 1.52299523 9.06279492 0 12 C-0.66 12 -1.32 12 -2 12 C-2.2165625 13.11375 -2.2165625 13.11375 -2.4375 14.25 C-2.90187492 16.52027739 -3.41863569 18.75759479 -4 21 C-4.66 21 -5.32 21 -6 21 C-6.268125 21.763125 -6.53625 22.52625 -6.8125 23.3125 C-7.99092624 25.97946464 -8.99148055 26.99148055 -11 29 C-12.04622875 30.97620986 -13.05439935 32.9737129 -14 35 C-14.66 35 -15.32 35 -16 35 C-16.495 37.475 -16.495 37.475 -17 40 C-18.32 39.67 -19.64 39.34 -21 39 C-20.67 37.68 -20.34 36.36 -20 35 C-19.34 35 -18.68 35 -18 35 C-17.87238281 34.41734375 -17.74476562 33.8346875 -17.61328125 33.234375 C-17.01203166 31.04383509 -16.2309448 29.2620609 -15.1875 27.25 C-14.83558594 26.56421875 -14.48367187 25.8784375 -14.12109375 25.171875 C-13.75113281 24.45515625 -13.38117188 23.7384375 -13 23 C-12.24796127 21.5010211 -11.49787008 20.00106307 -10.75 18.5 C-10.1725 17.345 -9.595 16.19 -9 15 C-11.64 17.31 -14.28 19.62 -17 22 C-17 19 -17 19 -16 17 C-15.34 17 -14.68 17 -14 17 C-13.67 16.01 -13.34 15.02 -13 14 C-11.66666667 12.66666667 -10.33333333 11.33333333 -9 10 C-7.4506912 7.95994156 -5.94965909 5.89209368 -4.46484375 3.8046875 C-3 2 -3 2 0 0 Z \",fill:\"#7A503D\",transform:\"translate(93,586)\"})),_path411||(_path411=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.45880109 0.14107747 2.91703551 0.28802415 4.375 0.4375 C5.18710937 0.51871094 5.99921875 0.59992188 6.8359375 0.68359375 C9 1 9 1 11 2 C12.70363822 2.22622081 14.41328701 2.40888473 16.125 2.5625 C17.03507812 2.64628906 17.94515625 2.73007812 18.8828125 2.81640625 C19.58148438 2.87699219 20.28015625 2.93757813 21 3 C21 4.32 21 5.64 21 7 C20.01 7.33 19.02 7.66 18 8 C17.67 8.99 17.34 9.98 17 11 C7.1 11 -2.8 11 -13 11 C-13 10.34 -13 9.68 -13 9 C-12.34 9 -11.68 9 -11 9 C-10.67 8.34 -10.34 7.68 -10 7 C-9.34 7 -8.68 7 -8 7 C-7.38125 6.34 -6.7625 5.68 -6.125 5 C-4 3 -4 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#190F0E\",transform:\"translate(43,379)\"})),_path412||(_path412=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C1.67 3.63 1.34 7.26 1 11 C2.093125 11.0825 3.18625 11.165 4.3125 11.25 C8 12 8 12 9.68359375 13.7265625 C11.18471184 16.3189979 11.5192261 18.15156711 11.75 21.125 C11.82734375 21.99382812 11.9046875 22.86265625 11.984375 23.7578125 C12 26 12 26 11 28 C6.78057133 27.62769747 4.67284974 26.06804068 1.55859375 23.27734375 C-0.74068309 21.39297401 -3.30500566 20.21916411 -6 19 C-6 18.01 -6 17.02 -6 16 C-7.32 15.67 -8.64 15.34 -10 15 C-10 14.34 -10 13.68 -10 13 C-10.66 13 -11.32 13 -12 13 C-12 12.34 -12 11.68 -12 11 C-8.04 11 -4.08 11 0 11 C-0.185625 9.741875 -0.37125 8.48375 -0.5625 7.1875 C-1.00732761 4.17255732 -0.99843846 2.99531539 0 0 Z \",fill:\"#AC9B63\",transform:\"translate(392,297)\"})),_path413||(_path413=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.60004883 0.07250977 1.60004883 0.07250977 3.23242188 0.14648438 C4.33521484 0.20255859 5.43800781 0.25863281 6.57421875 0.31640625 C8.25741211 0.3947168 8.25741211 0.3947168 9.97460938 0.47460938 C12.73728584 0.60392615 15.49956793 0.73887768 18.26171875 0.87890625 C18.26171875 3.18890625 18.26171875 5.49890625 18.26171875 7.87890625 C14.79617704 9.6116771 10.83611431 9.34024501 7.01171875 9.59765625 C4.30305882 9.71078117 4.30305882 9.71078117 2.26171875 10.87890625 C1.60171875 10.54890625 0.94171875 10.21890625 0.26171875 9.87890625 C-1.44191947 9.65268544 -3.15156826 9.47002152 -4.86328125 9.31640625 C-5.77335937 9.23261719 -6.6834375 9.14882813 -7.62109375 9.0625 C-8.66910156 8.97162109 -8.66910156 8.97162109 -9.73828125 8.87890625 C-8.41828125 8.21890625 -7.09828125 7.55890625 -5.73828125 6.87890625 C-5.73828125 6.21890625 -5.73828125 5.55890625 -5.73828125 4.87890625 C-9.03828125 5.53890625 -12.33828125 6.19890625 -15.73828125 6.87890625 C-15.73828125 5.88890625 -15.73828125 4.89890625 -15.73828125 3.87890625 C-10.74036837 0.16617097 -6.07261911 -0.29226509 0 0 Z \",fill:\"#77423C\",transform:\"translate(351.73828125,255.12109375)\"})),_path414||(_path414=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.85392219 0.63420493 4.5568108 1.32501118 6.1875 3.80859375 C8.89825027 9.24006029 10.12441991 13.50784158 10.09765625 19.63671875 C10.09443359 20.93544922 10.09121094 22.23417969 10.08789062 23.57226562 C10.07953531 24.94401108 10.07107037 26.31575587 10.0625 27.6875 C10.05748335 29.07096195 10.05292073 30.45442563 10.04882812 31.83789062 C10.03702529 35.22530395 10.02056019 38.61263033 10 42 C9.34 42 8.68 42 8 42 C7.97494385 41.22285645 7.9498877 40.44571289 7.92407227 39.64501953 C7.80833204 36.13816931 7.68550648 32.63160255 7.5625 29.125 C7.52318359 27.90167969 7.48386719 26.67835938 7.44335938 25.41796875 C7.38051758 23.66806641 7.38051758 23.66806641 7.31640625 21.8828125 C7.27974854 20.80402832 7.24309082 19.72524414 7.20532227 18.61376953 C7.16623357 16.01930464 7.16623357 16.01930464 6 14 C4.46686802 17.06626395 4.66386705 20.29630185 4.4765625 23.6875 C4 26 4 26 1 28 C-1.4085023 25.79873021 -2.92224425 24.09719349 -3.15869141 20.76074219 C-2.97932697 18.10984894 -2.67687297 15.50679232 -2.3125 12.875 C-2.15491211 11.51568359 -2.15491211 11.51568359 -1.99414062 10.12890625 C-1.56693121 6.59066873 -1.13005148 3.39015443 0 0 Z \",fill:\"#1C1912\",transform:\"translate(411,336)\"})),_path415||(_path415=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.99 0 1.98 0 3 C2.64 3 5.28 3 8 3 C8 2.34 8 1.68 8 1 C9.32 1 10.64 1 12 1 C12 1.66 12 2.32 12 3 C14.64 3 17.28 3 20 3 C20 3.33 20 3.66 20 4 C32.87 4.495 32.87 4.495 46 5 C46 5.66 46 6.32 46 7 C47.32 7 48.64 7 50 7 C50 7.66 50 8.32 50 9 C54.95 9.495 54.95 9.495 60 10 C60 10.33 60 10.66 60 11 C51.75 11 43.5 11 35 11 C35.66 9.68 36.32 8.36 37 7 C23.14 6.34 9.28 5.68 -5 5 C-5 4.67 -5 4.34 -5 4 C-11.93 3.67 -18.86 3.34 -26 3 C-26 2.34 -26 1.68 -26 1 C-18.93761954 -3.42272836 -7.90657197 -1.26505151 0 0 Z \",fill:\"#1E0306\",transform:\"translate(62,405)\"})),_path416||(_path416=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.1875 -0.375 3.1875 -0.375 7 0 C11.66485062 4.45281195 14.86907588 9.29423476 15.1875 15.875 C15.0946875 17.421875 15.0946875 17.421875 15 19 C14.01 18.34 13.02 17.68 12 17 C11.2575 16.87625 10.515 16.7525 9.75 16.625 C6.75527334 15.9443803 4.58942406 14.63273111 1.98046875 13.0546875 C-1.49457582 11.20407205 -5.23929717 10.12565255 -9 9 C-8.67 7.68 -8.34 6.36 -8 5 C-6.865625 4.731875 -5.73125 4.46375 -4.5625 4.1875 C-3.386875 3.795625 -2.21125 3.40375 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#E6D0A2\",transform:\"translate(460,375)\"})),_path417||(_path417=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 3.3 2 6.6 2 10 C4.475 10.495 4.475 10.495 7 11 C6.67 12.32 6.34 13.64 6 15 C5.67 14.34 5.34 13.68 5 13 C4.01 13.99 3.02 14.98 2 16 C1.67 14.68 1.34 13.36 1 12 C0.34 12 -0.32 12 -1 12 C-0.690625 12.680625 -0.38125 13.36125 -0.0625 14.0625 C1.13370649 17.36965912 1.59005397 20.51545878 2 24 C0.68 24.33 -0.64 24.66 -2 25 C-1.97679687 24.31292969 -1.95359375 23.62585938 -1.9296875 22.91796875 C-1.91164062 22.01691406 -1.89359375 21.11585938 -1.875 20.1875 C-1.84019531 18.84751953 -1.84019531 18.84751953 -1.8046875 17.48046875 C-1.81714173 14.74597286 -1.81714173 14.74597286 -4 12 C-5.00313907 16.76491057 -4.83163327 20.35298149 -4.12109375 25.125 C-4 27 -4 27 -5 29 C-3.02 29 -1.04 29 1 29 C1.33 28.34 1.66 27.68 2 27 C2 27.66 2 28.32 2 29 C2.99 28.67 3.98 28.34 5 28 C7.1875 28.4375 7.1875 28.4375 9 29 C9 28.34 9 27.68 9 27 C9.66 27 10.32 27 11 27 C11.33 28.32 11.66 29.64 12 31 C8.7 31 5.4 31 2 31 C1.67 31.99 1.34 32.98 1 34 C0.505 32.515 0.505 32.515 0 31 C-0.66 31.66 -1.32 32.32 -2 33 C-2 32.34 -2 31.68 -2 31 C-6.29 31 -10.58 31 -15 31 C-14.505 29.515 -14.505 29.515 -14 28 C-11.36 28.66 -8.72 29.32 -6 30 C-6.33 28.68 -6.66 27.36 -7 26 C-7.66 26 -8.32 26 -9 26 C-9.33 26.66 -9.66 27.32 -10 28 C-10.33 26.02 -10.66 24.04 -11 22 C-11.66 22 -12.32 22 -13 22 C-13 20.68 -13 19.36 -13 18 C-11.68 18.66 -10.36 19.32 -9 20 C-9.66 16.7 -10.32 13.4 -11 10 C-7.37 10 -3.74 10 0 10 C0 6.7 0 3.4 0 0 Z M-13 24 C-11 25 -11 25 -11 25 Z \",fill:\"#744232\",transform:\"translate(158,238)\"})),_path418||(_path418=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.05392397 2.77109307 2.09363455 5.54113818 2.125 8.3125 C2.14175781 9.09818359 2.15851563 9.88386719 2.17578125 10.69335938 C2.18222656 11.45068359 2.18867188 12.20800781 2.1953125 12.98828125 C2.20578613 13.68477783 2.21625977 14.38127441 2.22705078 15.09887695 C2 17 2 17 0 20 C0 16.7 0 13.4 0 10 C-3.21227702 11.6712636 -3.21227702 11.6712636 -3.73046875 14.6015625 C-3.88128906 15.59929687 -4.03210938 16.59703125 -4.1875 17.625 C-4.34605469 18.62789063 -4.50460938 19.63078125 -4.66796875 20.6640625 C-4.77753906 21.43492187 -4.88710937 22.20578125 -5 23 C-6.32 23.33 -7.64 23.66 -9 24 C-9.06058594 25.05058594 -9.12117187 26.10117187 -9.18359375 27.18359375 C-10.15332922 43.63775171 -10.15332922 43.63775171 -11 49 C-11.99 49.495 -11.99 49.495 -13 50 C-13.26870936 45.87544552 -13.50122964 41.75050833 -13.7019043 37.62207031 C-13.77491631 36.22114222 -13.85741094 34.82067219 -13.94995117 33.42089844 C-14.86813269 19.35214988 -14.86813269 19.35214988 -10.38745117 13.57519531 C-9.92959229 13.05538086 -9.4717334 12.53556641 -9 12 C-8.27296875 11.04351562 -7.5459375 10.08703125 -6.796875 9.1015625 C-6.12140625 8.28429687 -5.4459375 7.46703125 -4.75 6.625 C-2.10804616 3.48477587 -2.10804616 3.48477587 0 0 Z \",fill:\"#EB3D38\",transform:\"translate(163,444)\"})),_path419||(_path419=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 2.64 0 5.28 0 8 C-2.71401294 9.35700647 -4.84846316 9.1123861 -7.8828125 9.09765625 C-9.04941406 9.09443359 -10.21601563 9.09121094 -11.41796875 9.08789062 C-12.64128906 9.07951172 -13.86460937 9.07113281 -15.125 9.0625 C-16.35605469 9.05798828 -17.58710938 9.05347656 -18.85546875 9.04882812 C-21.90369392 9.0370133 -24.95182314 9.02054028 -28 9 C-28.66 6.69 -29.32 4.38 -30 2 C-20.67109893 -0.78230383 -9.64570415 -0.18048095 0 0 Z \",fill:\"#EEC199\",transform:\"translate(354,509)\"})),_path420||(_path420=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.08752563 -0.00676758 1.08752563 -0.00676758 2.19702148 -0.01367188 C5.04892618 -0.00574349 7.75048935 0.04520359 10.54614258 0.64086914 C13.21839421 1.14253297 15.49704906 1.15353717 18.20703125 1.00390625 C19.60405273 0.93139648 19.60405273 0.93139648 21.02929688 0.85742188 C21.98900391 0.80134766 22.94871094 0.74527344 23.9375 0.6875 C24.91654297 0.63529297 25.89558594 0.58308594 26.90429688 0.52929688 C29.3115609 0.40012661 31.71835638 0.26518357 34.125 0.125 C34.125 0.785 34.125 1.445 34.125 2.125 C32.21074219 2.30675781 32.21074219 2.30675781 30.2578125 2.4921875 C28.58849474 2.66099491 26.91922635 2.8302911 25.25 3 C24.40824219 3.07863281 23.56648437 3.15726562 22.69921875 3.23828125 C21.89355469 3.32207031 21.08789062 3.40585937 20.2578125 3.4921875 C19.14237061 3.60216064 19.14237061 3.60216064 18.00439453 3.71435547 C15.89117496 3.99891282 15.89117496 3.99891282 14.125 6.125 C8.02531987 7.42681093 1.89952724 7.24004154 -4.3125 7.1875 C-5.33021484 7.18298828 -6.34792969 7.17847656 -7.39648438 7.17382812 C-9.88938509 7.16212437 -12.38216074 7.14572848 -14.875 7.125 C-14.875 6.135 -14.875 5.145 -14.875 4.125 C-16.525 3.795 -18.175 3.465 -19.875 3.125 C-19.875 2.465 -19.875 1.805 -19.875 1.125 C-13.24750143 0.3234019 -6.66954701 0.01725069 0 0 Z \",fill:\"#CCDDAB\",transform:\"translate(551.875,404.875)\"})),_path421||(_path421=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.63001953 0.01353516 1.63001953 0.01353516 3.29296875 0.02734375 C4.12441406 0.03894531 4.95585937 0.05054688 5.8125 0.0625 C5.8125 0.3925 5.8125 0.7225 5.8125 1.0625 C2.5125 1.0625 -0.7875 1.0625 -4.1875 1.0625 C-4.1875 2.3825 -4.1875 3.7025 -4.1875 5.0625 C-0.8875 5.3925 2.4125 5.7225 5.8125 6.0625 C5.8125 7.7125 5.8125 9.3625 5.8125 11.0625 C8.7825 11.3925 11.7525 11.7225 14.8125 12.0625 C14.8125 13.0525 14.8125 14.0425 14.8125 15.0625 C10.5225 14.7325 6.2325 14.4025 1.8125 14.0625 C1.8125 13.4025 1.8125 12.7425 1.8125 12.0625 C1.1525 12.0625 0.4925 12.0625 -0.1875 12.0625 C-0.496875 12.866875 -0.80625 13.67125 -1.125 14.5 C-2.1875 17.0625 -2.1875 17.0625 -3.1875 18.0625 C-5.18708364 18.10330783 -7.18795254 18.10504356 -9.1875 18.0625 C-8.8575 17.0725 -8.5275 16.0825 -8.1875 15.0625 C-7.5275 14.7325 -6.8675 14.4025 -6.1875 14.0625 C-9.1575 14.0625 -12.1275 14.0625 -15.1875 14.0625 C-13.8675 11.4225 -12.5475 8.7825 -11.1875 6.0625 C-12.8375 6.0625 -14.4875 6.0625 -16.1875 6.0625 C-15.8575 5.4025 -15.5275 4.7425 -15.1875 4.0625 C-13.52083333 3.72916667 -11.85416667 3.39583333 -10.1875 3.0625 C-9.8575 2.4025 -9.5275 1.7425 -9.1875 1.0625 C-5.90230525 -0.03256492 -3.45086585 -0.03710608 0 0 Z \",fill:\"#280909\",transform:\"translate(173.1875,304.9375)\"})),_path422||(_path422=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.49361571 1.20381448 4.68143083 2.45428722 7 4 C7 4.66 7 5.32 7 6 C7.55558594 6.23589844 8.11117187 6.47179687 8.68359375 6.71484375 C12.52965727 8.84866314 15.47085303 12.00644081 18.66015625 15.00390625 C20.91467193 17.17996121 20.91467193 17.17996121 24 18 C19.06304584 12.90876603 13.9119981 7.94133206 8 4 C8.33 3.01 8.66 2.02 9 1 C10.65 1.33 12.3 1.66 14 2 C14 2.66 14 3.32 14 4 C14.55171875 4.24492188 15.1034375 4.48984375 15.671875 4.7421875 C18.47639491 6.25738114 20.78103123 8.11084126 23.25 10.125 C24.14203125 10.84945312 25.0340625 11.57390625 25.953125 12.3203125 C26.62859375 12.87460937 27.3040625 13.42890625 28 14 C27.01 14.33 26.02 14.66 25 15 C25 15.99 25 16.98 25 18 C25.556875 18.2475 26.11375 18.495 26.6875 18.75 C29.42410913 20.22924818 31.67650869 21.93467439 34 24 C34 24.66 34 25.32 34 26 C34.99 26.33 35.98 26.66 37 27 C37 27.66 37 28.32 37 29 C32.89889238 27.59601721 30.01910841 25.62912962 26.6875 22.875 C25.80449219 22.15054688 24.92148437 21.42609375 24.01171875 20.6796875 C23.34785156 20.12539063 22.68398438 19.57109375 22 19 C24.475 22.465 24.475 22.465 27 26 C23.81293058 24.56438314 21.37830895 22.79733671 18.75 20.5 C18.04359375 19.8915625 17.3371875 19.283125 16.609375 18.65625 C15 17 15 17 15 15 C14.4121875 14.89171875 13.824375 14.7834375 13.21875 14.671875 C7.76715408 13.02103961 3.09508632 7.58072776 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#5F3D2D\",transform:\"translate(570,529)\"})),_path423||(_path423=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.4125 0.825 0.825 1.65 1.25 2.5 C4.97701141 5.88819219 7.12756881 5.32843831 12.0078125 5.109375 C17.27334576 4.96511381 22.4913698 5.23534062 27.75 5.5 C28.75144043 5.54801758 29.75288086 5.59603516 30.78466797 5.64550781 C33.18991624 5.76109278 35.59500389 5.87930078 38 6 C38 6.66 38 7.32 38 8 C40.64 8 43.28 8 46 8 C46 9.32 46 10.64 46 12 C38.75639145 12.1234706 31.60858335 11.87327764 24.3828125 11.35791016 C16.25950724 10.82113641 8.13656282 10.91524414 0 11 C0 7.37 0 3.74 0 0 Z \",fill:\"#AC3C37\",transform:\"translate(162,458)\"})),_path424||(_path424=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-2.31 3.96 -4.62 7.92 -7 12 C-2.545 11.505 -2.545 11.505 2 11 C2 11.66 2 12.32 2 13 C0.68 13 -0.64 13 -2 13 C-2 13.99 -2 14.98 -2 16 C-4.64 15.34 -7.28 14.68 -10 14 C-10 12.68 -10 11.36 -10 10 C-14.62 10 -19.24 10 -24 10 C-22.91799861 4.58999306 -22.21560824 3.41530291 -18.1640625 0.1640625 C-12.58155419 -2.83880298 -5.92980916 -0.98830153 0 0 Z \",fill:\"#0A0405\",transform:\"translate(118,391)\"})),_path425||(_path425=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.14427102 -0.04976954 8.28837953 -0.08589288 12.43286133 -0.10986328 C13.84011876 -0.11986557 15.2473557 -0.13347178 16.65454102 -0.15087891 C18.68771448 -0.17538366 20.72061106 -0.18654083 22.75390625 -0.1953125 C23.97408447 -0.20578613 25.1942627 -0.21625977 26.45141602 -0.22705078 C30.30506028 0.01951882 33.34213 0.81421825 37 2 C36.0409375 2.61875 36.0409375 2.61875 35.0625 3.25 C32.65516634 5.29258614 32.51119752 5.96443533 32 9 C31.67258504 15.74089626 31.97467928 22.33541529 33 29 C33.66 29 34.32 29 35 29 C34.6875 30.9375 34.6875 30.9375 34 33 C33.01 33.33 32.02 33.66 31 34 C30.80664062 33.21753906 30.61328125 32.43507813 30.4140625 31.62890625 C30.02347656 30.11103516 30.02347656 30.11103516 29.625 28.5625 C29.24214844 27.04849609 29.24214844 27.04849609 28.8515625 25.50390625 C28.27426046 22.84429676 28.27426046 22.84429676 26 22 C22.46731978 15.42861603 22.97681229 9.97199219 25 3 C19.71566323 1.96912119 14.48895352 1.68388642 9.125 1.4375 C8.24585938 1.39431641 7.36671875 1.35113281 6.4609375 1.30664062 C4.30744203 1.20130661 2.15373936 1.10022351 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#686F45\",transform:\"translate(165,375)\"})),_path426||(_path426=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.54269531 0.60585938 1.08539063 1.21171875 1.64453125 1.8359375 C12.18209119 11.51721148 28.58243788 11.41461841 42 12 C42.33 10.68 42.66 9.36 43 8 C43 9.65 43 11.3 43 13 C37.91913204 13.84681133 33.15171623 14.09038099 28 14 C28 14.66 28 15.32 28 16 C27.34 16 26.68 16 26 16 C26 15.34 26 14.68 26 14 C25.34 14 24.68 14 24 14 C24 14.99 24 15.98 24 17 C23.34 17 22.68 17 22 17 C22 16.01 22 15.02 22 14 C20.68 14 19.36 14 18 14 C17.67 14.66 17.34 15.32 17 16 C15.02 15.34 13.04 14.68 11 14 C10.67 14.66 10.34 15.32 10 16 C10 15.34 10 14.68 10 14 C8.35 14 6.7 14 5 14 C4.67 14.99 4.34 15.98 4 17 C4 15.68 4 14.36 4 13 C2.35 12.67 0.7 12.34 -1 12 C-1 11.01 -1 10.02 -1 9 C-2.65 8.67 -4.3 8.34 -6 8 C-5.67 6.68 -5.34 5.36 -5 4 C-3.35 4 -1.7 4 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#C09B7E\",transform:\"translate(283,257)\"})),_path427||(_path427=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4 0.66 4 1.32 4 2 C7.63 1.67 11.26 1.34 15 1 C14.67 2.65 14.34 4.3 14 6 C17.63 6 21.26 6 25 6 C25 6.33 25 6.66 25 7 C21.04 7 17.08 7 13 7 C14.32 7.66 15.64 8.32 17 9 C17 11.31 17 13.62 17 16 C17.66 16 18.32 16 19 16 C19 15.01 19 14.02 19 13 C20.32 13.33 21.64 13.66 23 14 C22.01 14 21.02 14 20 14 C20 14.66 20 15.32 20 16 C21.32 16.66 22.64 17.32 24 18 C23.49396008 20.16874252 23.00016187 21.99967627 22 24 C18.7 23.67 15.4 23.34 12 23 C12 22.67 12 22.34 12 22 C13.98 21.67 15.96 21.34 18 21 C18 20.34 18 19.68 18 19 C17.195625 19.020625 16.39125 19.04125 15.5625 19.0625 C13 19 13 19 12 18 C11.92728259 15.64686445 11.91629132 13.29166332 11.9375 10.9375 C11.94652344 9.64714844 11.95554687 8.35679687 11.96484375 7.02734375 C11.97644531 6.02832031 11.98804688 5.02929688 12 4 C10.68 4 9.36 4 8 4 C8.04125 4.78375 8.0825 5.5675 8.125 6.375 C8 9 8 9 6 11 C3.44132526 11.4657363 0.95312092 11.83484248 -1.625 12.125 C-2.33140625 12.21136719 -3.0378125 12.29773438 -3.765625 12.38671875 C-5.50950141 12.59881183 -7.2546484 12.80040991 -9 13 C-8.67 12.01 -8.34 11.02 -8 10 C-6.02 10 -4.04 10 -2 10 C-2 9.34 -2 8.68 -2 8 C-1.34 8 -0.68 8 0 8 C0 5.36 0 2.72 0 0 Z \",fill:\"#7A1B2A\",transform:\"translate(294,452)\"})),_path428||(_path428=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.44123517 1.811239 3.82113579 3.23649011 4.5234375 6.234375 C4.7913987 8.5084241 5.0232272 10.70979838 5 13 C4 14 4 14 1.71484375 14.09765625 C0.34005859 14.08025391 0.34005859 14.08025391 -1.0625 14.0625 C-1.98160156 14.05347656 -2.90070313 14.04445313 -3.84765625 14.03515625 C-4.55792969 14.02355469 -5.26820313 14.01195312 -6 14 C-6.66 16.31 -7.32 18.62 -8 21 C-9.62463842 21.05395478 -11.24978541 21.09277195 -12.875 21.125 C-13.77992188 21.14820313 -14.68484375 21.17140625 -15.6171875 21.1953125 C-18 21 -18 21 -20 19 C-20.125 16.375 -20.125 16.375 -20 14 C-17.03 13.34 -14.06 12.68 -11 12 C-12.32 11.34 -13.64 10.68 -15 10 C-15 8.68 -15 7.36 -15 6 C-10.71 6.99 -6.42 7.98 -2 9 C-1.34 6.03 -0.68 3.06 0 0 Z \",fill:\"#EDCEA1\",transform:\"translate(171,288)\"})),_path429||(_path429=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.56014989 1.38245364 8.65789695 3.25440953 12.83203125 5.51953125 C13.46807785 5.85997971 14.10412445 6.20042816 14.75944519 6.55119324 C16.77951814 7.63391496 18.79599223 8.72315558 20.8125 9.8125 C22.15407358 10.53231736 23.49586872 11.25172196 24.83789062 11.97070312 C31.58879435 15.59270566 38.32020045 19.24808264 45 23 C45 24.98 45 26.96 45 29 C42.03 28.01 39.06 27.02 36 26 C36 25.34 36 24.68 36 24 C34.35 23.67 32.7 23.34 31 23 C31 22.34 31 21.68 31 21 C29.68 20.67 28.36 20.34 27 20 C27 19.34 27 18.68 27 18 C25.948125 17.9175 24.89625 17.835 23.8125 17.75 C19.53231112 16.90799563 18.28877017 15.75338898 15 13 C12.40060841 11.64131957 9.76930813 10.38396857 7.109375 9.1484375 C5 8 5 8 4 6 C6.64 6.66 9.28 7.32 12 8 C11.13375 7.50628906 10.2675 7.01257813 9.375 6.50390625 C8.26125 5.86324219 7.1475 5.22257812 6 4.5625 C4.88625 3.92441406 3.7725 3.28632813 2.625 2.62890625 C1.75875 2.09136719 0.8925 1.55382812 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#664332\",transform:\"translate(581,463)\"})),_path430||(_path430=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.76586914 0.07006836 1.76586914 0.07006836 4.03515625 0.33984375 C5.24848633 0.4800293 5.24848633 0.4800293 6.48632812 0.62304688 C7.33646484 0.72681641 8.18660156 0.83058594 9.0625 0.9375 C10.34350586 1.08735352 10.34350586 1.08735352 11.65039062 1.24023438 C13.76750514 1.48861094 15.88383163 1.74368731 18 2 C18.33 3.32 18.66 4.64 19 6 C20.24716797 6.18175781 20.24716797 6.18175781 21.51953125 6.3671875 C23.14955078 6.61855469 23.14955078 6.61855469 24.8125 6.875 C25.89144531 7.03742188 26.97039062 7.19984375 28.08203125 7.3671875 C31 8 31 8 34 10 C34.1875 12.625 34.1875 12.625 34 15 C33.34 13.68 32.68 12.36 32 11 C31.34 11 30.68 11 30 11 C30.2165625 11.55429687 30.433125 12.10859375 30.65625 12.6796875 C31.07390625 13.76636719 31.07390625 13.76636719 31.5 14.875 C31.7784375 15.59429687 32.056875 16.31359375 32.34375 17.0546875 C33 19 33 19 33 21 C28.71 21 24.42 21 20 21 C23.76687864 19.11656068 25.02958963 18.77942165 29 19 C28.67 16.03 28.34 13.06 28 10 C18.43 9.67 8.86 9.34 -1 9 C-1 1 -1 1 0 0 Z \",fill:\"#2E1111\",transform:\"translate(241,341)\"})),_path431||(_path431=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0 4.62 0 7 0 C7 0.66 7 1.32 7 2 C6.34 2.66 5.68 3.32 5 4 C6.87702327 8.89562693 6.87702327 8.89562693 10 13 C10.4921875 14.78833008 10.4921875 14.78833008 10.875 16.95703125 C11.99980699 22.44595754 13.9428425 27.48870523 16 32.6875 C17.34165338 36.12184099 18.67528339 39.55909237 20 43 C20.433125 44.12019531 20.86625 45.24039063 21.3125 46.39453125 C22 49 22 49 21 53 C19.515 48.545 19.515 48.545 18 44 C16.515 44.495 16.515 44.495 15 45 C13.14223235 41.86501708 12.79859524 39.62528568 13 36 C12.34 36 11.68 36 11 36 C9.73700527 33.1131549 8.85484409 30.39163544 8.12109375 27.31640625 C6.89975027 22.33191211 5.03436919 17.66520587 3.12304688 12.91210938 C1.43381033 8.57738518 0.48781681 4.63124846 0 0 Z \",fill:\"#674332\",transform:\"translate(385,524)\"})),_path432||(_path432=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.87992378 3.086303 6.99066975 6.02338502 10 10 C10.66 10.66 11.32 11.32 12 12 C11.67 12.33 11.34 12.66 11 13 C10.84259395 14.70563778 10.74906608 16.41727244 10.68359375 18.12890625 C10.64169922 19.16337891 10.59980469 20.19785156 10.55664062 21.26367188 C10.51732422 22.35228516 10.47800781 23.44089844 10.4375 24.5625 C10.39431641 25.65498047 10.35113281 26.74746094 10.30664062 27.87304688 C10.20017932 30.58189564 10.09816484 33.29083992 10 36 C9.01 36.495 9.01 36.495 8 37 C8 36.01 8 35.02 8 34 C7.34 33.67 6.68 33.34 6 33 C6 32.01 6 31.02 6 30 C5.34 30 4.68 30 4 30 C3.67 27.69 3.34 25.38 3 23 C2.67 23 2.34 23 2 23 C2 19.7 2 16.4 2 13 C1.34 13 0.68 13 0 13 C0 8.71 0 4.42 0 0 Z \",fill:\"#1E060D\",transform:\"translate(464,450)\"})),_path433||(_path433=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.59 0 15.18 0 23 0 C23 0.33 23 0.66 23 1 C21.46279297 1.07347656 21.46279297 1.07347656 19.89453125 1.1484375 C18.5338294 1.22351071 17.17315356 1.29905655 15.8125 1.375 C15.13896484 1.4059375 14.46542969 1.436875 13.77148438 1.46875 C9.8279865 1.6995889 6.46451445 2.03656402 3 4 C0.46127498 7.31402428 0.79403815 10.70190748 0.875 14.75 C0.90207031 16.50570313 0.90207031 16.50570313 0.9296875 18.296875 C0.95289063 19.18890625 0.97609375 20.0809375 1 21 C-1.0622048 21.054348 -3.12482816 21.09294961 -5.1875 21.125 C-6.33605469 21.14820313 -7.48460937 21.17140625 -8.66796875 21.1953125 C-12.74016284 20.95661414 -15.6129663 20.10006121 -18.8125 17.5625 C-20 16 -20 16 -20 13 C-14.555 12.505 -14.555 12.505 -9 12 C-8.67 11.01 -8.34 10.02 -8 9 C-6.68 9.33 -5.36 9.66 -4 10 C-3.79503906 9.44570313 -3.59007812 8.89140625 -3.37890625 8.3203125 C-3.10949219 7.59585937 -2.84007812 6.87140625 -2.5625 6.125 C-2.29566406 5.40570313 -2.02882812 4.68640625 -1.75390625 3.9453125 C-1 2 -1 2 0 0 Z \",fill:\"#6F5540\",transform:\"translate(212,296)\"})),_path434||(_path434=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.88763638 1.95505455 6.33987418 2.70287367 9 7 C8.75 9.3125 8.75 9.3125 8 11 C8.66 11 9.32 11 10 11 C11.52260012 13.28390018 12.80257827 15.53464878 13.875 18.0625 C15.41978456 20.7229623 17.54707953 22.19258492 20 24 C19.67 24.66 19.34 25.32 19 26 C13.06 25.67 7.12 25.34 1 25 C-0.35439668 22.29120665 -0.06501451 19.99066732 0 17 C3.3 17 6.6 17 10 17 C8.906875 16.195625 7.81375 15.39125 6.6875 14.5625 C6.07261719 14.11003906 5.45773437 13.65757812 4.82421875 13.19140625 C2.90322899 11.82663692 2.90322899 11.82663692 0 11 C0 7.37 0 3.74 0 0 Z \",fill:\"#945F4C\",transform:\"translate(477,478)\"})),_path435||(_path435=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.04940499 5.64166991 1.08572193 11.28321413 1.10986328 16.92504883 C1.11992639 18.84466749 1.13357816 20.76427081 1.15087891 22.68383789 C1.17511364 25.44160752 1.18647992 28.19917464 1.1953125 30.95703125 C1.20563507 31.81649857 1.21595764 32.67596588 1.22659302 33.56147766 C1.22674408 34.36208115 1.22689514 35.16268463 1.22705078 35.98754883 C1.231492 36.6914827 1.23593323 37.39541656 1.24050903 38.12068176 C1 40 1 40 -1 43 C-4.625 43.1875 -4.625 43.1875 -8 43 C-7.34 42.01 -6.68 41.02 -6 40 C-5.97637027 36.78886461 -5.97637027 36.78886461 -6.375 33.3125 C-6.48585938 32.13300781 -6.59671875 30.95351563 -6.7109375 29.73828125 C-6.80632812 28.83464844 -6.90171875 27.93101562 -7 27 C-7.33 30.63 -7.66 34.26 -8 38 C-8.99 38 -9.98 38 -11 38 C-11 34.37 -11 30.74 -11 27 C-10.67 27 -10.34 27 -10 27 C-9.505 18.09 -9.505 18.09 -9 9 C-8.01 9.66 -7.02 10.32 -6 11 C-5.70703125 13.8203125 -5.70703125 13.8203125 -5.8125 17.125 C-5.83957031 18.22070312 -5.86664063 19.31640625 -5.89453125 20.4453125 C-5.92933594 21.28835938 -5.96414063 22.13140625 -6 23 C-4.02 23 -2.04 23 0 23 C0 15.41 0 7.82 0 0 Z \",fill:\"#715E4C\",transform:\"translate(269,302)\"})),_path436||(_path436=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0 3.96 0 6 0 C6 15.51 6 31.02 6 47 C6.66 47 7.32 47 8 47 C7.67 47.99 7.34 48.98 7 50 C3.28019064 46.88015989 2.48794876 44.7818978 2 40 C1.814375 39.21625 1.62875 38.4325 1.4375 37.625 C0.84124403 34.04746418 0.93854522 30.6258321 1 27 C1.66 27 2.32 27 3 27 C2.67854004 26.45182617 2.35708008 25.90365234 2.02587891 25.33886719 C0.83099217 22.61468467 0.68485993 20.5457978 0.5859375 17.578125 C0.54726562 16.55332031 0.50859375 15.52851563 0.46875 14.47265625 C0.42234375 12.87744141 0.42234375 12.87744141 0.375 11.25 C0.33632812 10.17105469 0.29765625 9.09210938 0.2578125 7.98046875 C0.16365369 5.32048225 0.07802613 2.6605006 0 0 Z \",fill:\"#A07F64\",transform:\"translate(152,117)\"})),_path437||(_path437=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1 3 -1 3 -3.81640625 4.54296875 C-5.0608591 5.10071575 -6.30995516 5.64817077 -7.5625 6.1875 C-8.94234455 6.80519992 -10.32122165 7.42506461 -11.69921875 8.046875 C-12.76922119 8.52737305 -12.76922119 8.52737305 -13.86083984 9.01757812 C-17.24297687 10.57084443 -20.55673051 12.2531517 -23.875 13.9375 C-29.65958904 16.85056632 -35.46755458 19.709828 -41.3125 22.5 C-42.03614746 22.85054443 -42.75979492 23.20108887 -43.50537109 23.56225586 C-48.23059964 25.80078917 -50.98985361 26.38210935 -56 25 C-23.22838464 7.97488053 -23.22838464 7.97488053 -12.8125 2.9375 C-11.86515991 2.46473633 -11.86515991 2.46473633 -10.89868164 1.98242188 C-7.12688783 0.1975786 -4.15712791 -0.29648712 0 0 Z \",fill:\"#494337\",transform:\"translate(596,114)\"})),_path438||(_path438=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.77076889 -0.05799124 7.54142334 -0.09359306 11.3125 -0.125 C12.38435547 -0.14175781 13.45621094 -0.15851562 14.56054688 -0.17578125 C15.58857422 -0.18222656 16.61660156 -0.18867187 17.67578125 -0.1953125 C18.62364502 -0.20578613 19.57150879 -0.21625977 20.5480957 -0.22705078 C23 0 23 0 26 2 C25.01 3.485 25.01 3.485 24 5 C23.78629236 7.92809907 23.68868583 10.76419707 23.68115234 13.6940918 C23.67110672 14.5821048 23.6610611 15.4701178 23.65071106 16.38504028 C23.6197962 19.32309313 23.60282085 22.26105451 23.5859375 25.19921875 C23.56723253 27.2351816 23.54765963 29.27113664 23.5272522 31.30708313 C23.4758541 36.66805425 23.43626947 42.02905052 23.39910889 47.39013672 C23.35911735 52.85976422 23.30800291 58.32928639 23.2578125 63.79882812 C23.1609623 74.53247817 23.07658663 85.26618759 23 96 C22.34 96 21.68 96 21 96 C21 64.65 21 33.3 21 1 C14.07 1 7.14 1 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#735843\",transform:\"translate(281,530)\"})),_path439||(_path439=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.00289063 0.10183594 2.00578125 0.20367187 3.0390625 0.30859375 C3.80992187 0.39238281 4.58078125 0.47617188 5.375 0.5625 C1.58450357 3.87279877 -2.83262928 5.45102447 -7.4375 7.3125 C-15.95613084 10.82079952 -24.31516541 14.58769123 -32.625 18.5625 C-32.625 17.9025 -32.625 17.2425 -32.625 16.5625 C-33.17929687 16.86285156 -33.73359375 17.16320312 -34.3046875 17.47265625 C-35.02914063 17.85292969 -35.75359375 18.23320312 -36.5 18.625 C-37.57894531 19.19927734 -37.57894531 19.19927734 -38.6796875 19.78515625 C-39.32164062 20.04167969 -39.96359375 20.29820312 -40.625 20.5625 C-41.285 20.2325 -41.945 19.9025 -42.625 19.5625 C-42.625 18.5725 -42.625 17.5825 -42.625 16.5625 C-42.10292969 16.33175781 -41.58085937 16.10101563 -41.04296875 15.86328125 C-4.2395295 -0.44367169 -4.2395295 -0.44367169 0 0 Z \",fill:\"#4F4F42\",transform:\"translate(441.625,199.4375)\"})),_path440||(_path440=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.3125 1.75 2.3125 1.75 4 4 C4 5.32 4 6.64 4 8 C4.66 8 5.32 8 6 8 C6.33 9.98 6.66 11.96 7 14 C5.9275 14.226875 4.855 14.45375 3.75 14.6875 C-0.37218701 16.13026545 -1.64414523 17.41910075 -4 21 C-4.66 19.35 -5.32 17.7 -6 16 C-6.33 16.66 -6.66 17.32 -7 18 C-7.66 18 -8.32 18 -9 18 C-10.97902533 14.04194934 -10.38205977 9.32251459 -9.1875 5.1875 C-6.85464679 0.89013882 -5.08535432 -0.86823123 0 0 Z \",fill:\"#F2C944\",transform:\"translate(58,330)\"})),_path441||(_path441=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.33 1.32 -0.66 2.64 -1 4 C-2.68717539 4.31424786 -4.37475949 4.62630155 -6.0625 4.9375 C-7.00222656 5.11152344 -7.94195312 5.28554688 -8.91015625 5.46484375 C-15.23754268 6.56073748 -21.36895881 7.17789102 -27.77734375 7.31640625 C-28.58869278 7.33718735 -29.40004181 7.35796844 -30.23597717 7.37937927 C-32.80307339 7.44425643 -35.37026337 7.50346922 -37.9375 7.5625 C-39.68816036 7.60574418 -41.43881158 7.64936026 -43.18945312 7.69335938 C-47.45954171 7.7998735 -51.72972368 7.90131114 -56 8 C-56 7.01 -56 6.02 -56 5 C-49.15033795 4.28289673 -42.30010883 3.57141127 -35.44946289 2.86376953 C-33.12055346 2.62254082 -30.79177527 2.38004147 -28.46313477 2.13623047 C-25.1098777 1.7853665 -21.75617032 1.43912245 -18.40234375 1.09375 C-17.36665756 0.9843811 -16.33097137 0.87501221 -15.26390076 0.7623291 C-10.14475437 0.23968555 -5.14574509 -0.12619853 0 0 Z \",fill:\"#674A3B\",transform:\"translate(100,298)\"})),_path442||(_path442=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-10.32611103 7.14697123 -20.86307473 11.26319946 -31.73828125 15.10546875 C-36.15000131 16.66894049 -40.48931749 18.37726594 -44.82788086 20.13208008 C-51.66179643 22.86272747 -57.62545022 24.40969721 -65 24 C-62.74366041 21.74366041 -61.97870237 21.65063992 -58.9375 21.125 C-54.00047341 20.11679036 -49.3873657 18.50706611 -45 16 C-44.67 15.34 -44.34 14.68 -44 14 C-41.77734375 13.2890625 -41.77734375 13.2890625 -38.9375 12.625 C-34.72011025 11.5382111 -31.1384307 10.22799638 -27.3125 8.1875 C-24.15691203 6.56706293 -20.93242078 5.11721947 -17.6875 3.6875 C-16.49511719 3.15511719 -15.30273438 2.62273437 -14.07421875 2.07421875 C-11 1 -11 1 -8 2 C-5.18682584 1.48851379 -2.80979616 0 0 0 Z \",fill:\"#5A5145\",transform:\"translate(409,216)\"})),_path443||(_path443=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.78375 0.04125 1.5675 0.0825 2.375 0.125 C2.045 0.785 1.715 1.445 1.375 2.125 C0.715 2.125 0.055 2.125 -0.625 2.125 C-1.285 4.435 -1.945 6.745 -2.625 9.125 C-3.285 9.125 -3.945 9.125 -4.625 9.125 C-4.625 10.445 -4.625 11.765 -4.625 13.125 C-5.285 13.125 -5.945 13.125 -6.625 13.125 C-6.89183594 13.67414062 -7.15867188 14.22328125 -7.43359375 14.7890625 C-11.79993647 23.34995741 -16.03578708 29.50902843 -24.625 34.125 C-24.625 32.805 -24.625 31.485 -24.625 30.125 C-25.285 29.795 -25.945 29.465 -26.625 29.125 C-26.12613281 28.5165625 -25.62726563 27.908125 -25.11328125 27.28125 C-21.46673943 22.82945748 -17.82453534 18.37460385 -14.203125 13.90234375 C-13.62135498 13.18433594 -13.03958496 12.46632813 -12.44018555 11.7265625 C-11.28184386 10.29634371 -10.12443724 8.86536706 -8.96801758 7.43359375 C-8.43329834 6.77359375 -7.8985791 6.11359375 -7.34765625 5.43359375 C-6.87078369 4.84376709 -6.39391113 4.25394043 -5.90258789 3.64624023 C-2.95867829 0.14088944 -2.95867829 0.14088944 0 0 Z \",fill:\"#9E6E51\",transform:\"translate(141.625,518.875)\"})),_path444||(_path444=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C0.99 2.33 1.98 2.66 3 3 C3 5.31 3 7.62 3 10 C4.65 10.33 6.3 10.66 8 11 C8.33 14.3 8.66 17.6 9 21 C7.68 21.33 6.36 21.66 5 22 C5 22.66 5 23.32 5 24 C3.06372231 24.10807131 1.12572244 24.1856225 -0.8125 24.25 C-2.43091797 24.31960938 -2.43091797 24.31960938 -4.08203125 24.390625 C-7 24 -7 24 -8.875 22.15625 C-10.2124333 19.59283618 -10.23771545 17.85258538 -10 15 C-9.01 16.485 -9.01 16.485 -8 18 C-7.01 16.68 -6.02 15.36 -5 14 C-4.01 14.33 -3.02 14.66 -2 15 C-2 16.65 -2 18.3 -2 20 C-1.34 19.67 -0.68 19.34 0 19 C-0.32960216 13.98464948 -0.32960216 13.98464948 -3 10 C-2.625 6.375 -2.625 6.375 -2 3 C-2.99 2.67 -3.98 2.34 -5 2 C-2 0 -2 0 0 0 Z \",fill:\"#A97157\",transform:\"translate(121,244)\"})),_path445||(_path445=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.30584305 0.44964772 8.51707801 1.01138534 13 4 C15.30783342 5.07149409 17.64628429 6.03082294 20 7 C20 7.66 20 8.32 20 9 C20.99 9 21.98 9 23 9 C23 8.34 23 7.68 23 7 C25.475 7.495 25.475 7.495 28 8 C28 8.66 28 9.32 28 10 C32.29 10 36.58 10 41 10 C41 10.33 41 10.66 41 11 C34.565 11.495 34.565 11.495 28 12 C27.67 13.32 27.34 14.64 27 16 C20.84765625 15.4140625 20.84765625 15.4140625 19 15 C18.67 14.34 18.34 13.68 18 13 C15.93684183 12.06943757 15.93684183 12.06943757 13.375 11.25 C8.46408066 9.54185414 3.63337888 7.6939583 -1.1875 5.75 C-1.8592627 5.47961914 -2.53102539 5.20923828 -3.22314453 4.93066406 C-4.81601433 4.28855779 -6.40809551 3.64449574 -8 3 C-8 2.34 -8 1.68 -8 1 C-3.545 1.99 -3.545 1.99 1 3 C1.33 2.34 1.66 1.68 2 1 C1.34 0.67 0.68 0.34 0 0 Z \",fill:\"#6A4B3A\",transform:\"translate(229,234)\"})),_path446||(_path446=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.00863065 1.66294456 9.05308532 4.55451469 13.375 7.5 C14.97773282 8.58222641 16.58059971 9.66425429 18.18359375 10.74609375 C19.38798096 11.56182861 19.38798096 11.56182861 20.61669922 12.39404297 C22.87205963 13.91378901 25.13778353 15.41600042 27.41015625 16.91015625 C28.43133545 17.58304688 28.43133545 17.58304688 29.47314453 18.26953125 C30.75256459 19.11166506 32.03342086 19.95162223 33.31591797 20.7890625 C36.1378738 22.65507981 38.74075039 24.46542965 41 27 C40.01 27.33 39.02 27.66 38 28 C37.01 27.01 36.02 26.02 35 25 C34.505 26.485 34.505 26.485 34 28 C29.84272869 27.42009078 27.04854299 26.02059062 23.5 23.8125 C17.19466075 20.01674851 10.7333662 16.96485318 4 14 C4 13.01 4 12.02 4 11 C9.75 11.75 9.75 11.75 12 14 C14.19704511 14.67651207 14.19704511 14.67651207 16.625 15.125 C17.85089844 15.37636719 17.85089844 15.37636719 19.1015625 15.6328125 C19.72804687 15.75398437 20.35453125 15.87515625 21 16 C19.98679688 15.32453125 18.97359375 14.6490625 17.9296875 13.953125 C9.8671875 8.578125 9.8671875 8.578125 7.90136719 7.25976562 C6.66677762 6.4417787 5.42297278 5.63747303 4.16894531 4.84960938 C2.74715689 3.94855828 1.36828616 2.98039195 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#4D3228\",transform:\"translate(189,196)\"})),_path447||(_path447=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.10794922 0.00410889 2.21589844 0.00821777 3.35742188 0.01245117 C5.16146484 0.01535156 5.16146484 0.01535156 7.00195312 0.01831055 C8.26394531 0.03055664 9.5259375 0.04280273 10.82617188 0.05541992 C12.08816406 0.05606445 13.35015625 0.05670898 14.65039062 0.05737305 C24.0457082 0.10268808 24.0457082 0.10268808 26.32617188 1.24291992 C26.32617188 3.22291992 26.32617188 5.20291992 26.32617188 7.24291992 C15.76617187 7.24291992 5.20617187 7.24291992 -5.67382812 7.24291992 C-4.30343847 0.39097163 -4.30343847 0.39097163 0 0 Z \",fill:\"#492D23\",transform:\"translate(245.673828125,508.757080078125)\"})),_path448||(_path448=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C9.43078051 0.76054682 18.68556572 2.38671563 28 4 C28 6.64 28 9.28 28 12 C25.10737554 11.76640318 22.2155002 11.52712309 19.32421875 11.27734375 C17.24504828 11.10387594 15.16430798 10.94741965 13.08203125 10.81640625 C11.77298828 10.72166016 11.77298828 10.72166016 10.4375 10.625 C9.65246094 10.57601563 8.86742187 10.52703125 8.05859375 10.4765625 C4.51918596 9.65719295 3.24414293 7.37073556 1.3125 4.4375 C0 2 0 2 0 0 Z \",fill:\"#9C664B\",transform:\"translate(598,328)\"})),_path449||(_path449=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 1.32 1.98 2.64 3 4 C3.99 3.34 4.98 2.68 6 2 C6 4.64 6 7.28 6 10 C6.66 10 7.32 10 8 10 C8 10.66 8 11.32 8 12 C8.97582031 11.98839844 9.95164062 11.97679687 10.95703125 11.96484375 C12.22933594 11.95582031 13.50164062 11.94679688 14.8125 11.9375 C16.70935547 11.92009766 16.70935547 11.92009766 18.64453125 11.90234375 C22 12 22 12 25 13 C25.33 14.65 25.66 16.3 26 18 C25.34 18 24.68 18 24 18 C24 18.66 24 19.32 24 20 C18.06 20 12.12 20 6 20 C6 19.34 6 18.68 6 18 C5.34 18 4.68 18 4 18 C2.36427347 15.03095016 1.51349012 12.32420253 0.875 9 C0.70742188 8.154375 0.53984375 7.30875 0.3671875 6.4375 C0 4 0 4 0 0 Z \",fill:\"#1B0B10\",transform:\"translate(298,468)\"})),_path450||(_path450=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.29 0 8.58 0 13 0 C13.33 1.65 13.66 3.3 14 5 C14.66 5 15.32 5 16 5 C17.5859375 7.37890625 17.5859375 7.37890625 19.375 10.5625 C20.29925781 12.2021875 20.29925781 12.2021875 21.2421875 13.875 C21.82226562 14.90625 22.40234375 15.9375 23 17 C23.83254589 18.35465093 24.66569032 19.70893465 25.5 21.0625 C25.995 22.031875 26.49 23.00125 27 24 C26.67 24.99 26.34 25.98 26 27 C24.02 23.7 22.04 20.4 20 17 C21.60759809 21.01899523 23.18712337 24.095681 25.5 27.6875 C26.1084375 28.64011719 26.716875 29.59273437 27.34375 30.57421875 C28.91965129 33.04315373 28.91965129 33.04315373 31 35 C30.67 35.99 30.34 36.98 30 38 C28.5 36.625 28.5 36.625 27 35 C27 34.34 27 33.68 27 33 C26.34 33 25.68 33 25 33 C23.73828125 31.41796875 23.73828125 31.41796875 22.3125 29.1875 C21.78269531 28.36378906 21.25289063 27.54007813 20.70703125 26.69140625 C20.14371094 25.80324219 19.58039063 24.91507813 19 24 C18.42636719 23.12214844 17.85273438 22.24429688 17.26171875 21.33984375 C13.62634993 15.73766786 10.32906878 10.05019879 7.26171875 4.1171875 C6.17662093 1.86356231 6.17662093 1.86356231 4 1 C3.67 1.99 3.34 2.98 3 4 C2.01 3.34 1.02 2.68 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#89593C\",transform:\"translate(437,518)\"})),_path451||(_path451=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.10983274 0.63930732 7.50212212 1.9591421 11.25 3.75 C12.83554688 4.48476562 12.83554688 4.48476562 14.453125 5.234375 C17 7 17 7 17.91796875 9.52734375 C18.01576249 12.47512634 17.27872005 14.36734107 16 17 C9.80984119 16.54980663 4.29082094 15.41603004 -1 12 C-2.74377952 8.60421882 -1.9791068 6.91503434 -1.0625 3.1875 C-0.711875 2.135625 -0.36125 1.08375 0 0 Z \",fill:\"#DFB38A\",transform:\"translate(61,165)\"})),_path452||(_path452=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-8.0098625 4.25809954 -15.6875679 5.57258771 -24 6 C-24 5.34 -24 4.68 -24 4 C-43.8 4 -63.6 4 -84 4 C-84 4.99 -84 5.98 -84 7 C-86.64 7 -89.28 7 -92 7 C-92.33 6.34 -92.66 5.68 -93 5 C-98.94 4.67 -104.88 4.34 -111 4 C-106.64668183 0.73501137 -104.50632325 0.59406503 -99.390625 0.70703125 C-98.66381531 0.71127609 -97.93700562 0.71552094 -97.18817139 0.71989441 C-94.87506496 0.7366387 -92.56284145 0.77428115 -90.25 0.8125 C-88.67839803 0.82755242 -87.10678236 0.84123985 -85.53515625 0.85351562 C-81.68976585 0.88652805 -77.84503244 0.93827944 -74 1 C-74 1.33 -74 1.66 -74 2 C-66.59320395 2.04655142 -59.18643999 2.08198421 -51.77952671 2.10362434 C-48.33937436 2.11401591 -44.89932285 2.12808935 -41.45922852 2.15087891 C-37.49496714 2.17697348 -33.53074514 2.18651104 -29.56640625 2.1953125 C-28.34417862 2.20563507 -27.12195099 2.21595764 -25.86268616 2.22659302 C-19.97823641 2.22735898 -14.58074187 2.00244261 -8.88853455 0.44284058 C-5.89161801 -0.25990338 -3.06394699 -0.13038072 0 0 Z \",fill:\"#ACA18E\",transform:\"translate(368,242)\"})),_path453||(_path453=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1.566875 1.391875 1.13375 1.78375 0.6875 2.1875 C-1.08074571 3.93822751 -1.08074571 3.93822751 -2.18359375 6.15625 C-4.62022954 9.97102604 -7.62666371 13.05204962 -10.75 16.3125 C-12.0152691 17.64884436 -13.27960274 18.98607509 -14.54296875 20.32421875 C-15.44474854 21.27820557 -15.44474854 21.27820557 -16.36474609 22.25146484 C-18.85581008 24.91509582 -21.23736835 27.66718387 -23.6171875 30.4296875 C-25.64072774 32.72760608 -27.80630812 34.86559709 -30 37 C-30.763125 37.763125 -31.52625 38.52625 -32.3125 39.3125 C-32.869375 39.869375 -33.42625 40.42625 -34 41 C-34.99 40.67 -35.98 40.34 -37 40 C-36.48751744 35.86217786 -34.32569018 34.04914415 -31.375 31.25 C-26.23097192 26.25919829 -21.56768512 21.0117209 -16.921875 15.5625 C-11.76092913 9.64365299 -6.2889574 4.70030637 0 0 Z \",fill:\"#764E3B\",transform:\"translate(71,564)\"})),_path454||(_path454=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.475 0.99 2.475 0.99 5 2 C7.32700533 2.68842945 9.66148427 3.35174615 12 4 C15.29595593 4.94391226 18.58586933 5.90760863 21.875 6.875 C22.72191406 7.11863281 23.56882812 7.36226563 24.44140625 7.61328125 C30.18987329 9.31229218 35.58480792 11.43093975 41 14 C40.01 14.99 39.02 15.98 38 17 C34.27566618 15.7874262 30.62197194 14.49140021 27 13 C27 12.34 27 11.68 27 11 C24.525 10.505 24.525 10.505 22 10 C22.45375 10.45375 22.9075 10.9075 23.375 11.375 C24.58333333 12.58333333 25.79166667 13.79166667 27 15 C18.07065264 13.92204275 10.27387644 11.49638004 2 8 C1.67 9.32 1.34 10.64 1 12 C0.67 8.04 0.34 4.08 0 0 Z \",fill:\"#B1785B\",transform:\"translate(350,285)\"})),_path455||(_path455=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.66 2 1.32 2 2 C2.763125 1.938125 3.52625 1.87625 4.3125 1.8125 C7 2 7 2 8.8125 3.25 C10 5 10 5 10 9 C11.2375 8.87625 11.2375 8.87625 12.5 8.75 C16.44850673 9.0320362 18.57306861 10.18588425 21.97265625 12.05859375 C24.22113783 13.22658107 24.22113783 13.22658107 27.875 13.5 C28.90625 13.665 29.9375 13.83 31 14 C32.1875 15.9375 32.1875 15.9375 33 18 C35.0335948 19.26804566 35.0335948 19.26804566 37 20 C36.67 21.32 36.34 22.64 36 24 C36 23.34 36 22.68 36 22 C35.0925 21.9175 34.185 21.835 33.25 21.75 C29.59922161 20.90751268 28.36615417 19.82118382 26 17 C25.67 17.99 25.34 18.98 25 20 C23.35 19.67 21.7 19.34 20 19 C19.67 17.68 19.34 16.36 19 15 C16.69 14.67 14.38 14.34 12 14 C12 13.34 12 12.68 12 12 C11.071875 12.185625 10.14375 12.37125 9.1875 12.5625 C6 13 6 13 3 12 C2.05078125 9.27734375 2.05078125 9.27734375 1.3125 5.9375 C1.06113281 4.83277344 0.80976563 3.72804688 0.55078125 2.58984375 C0.36902344 1.73519531 0.18726563 0.88054687 0 0 Z \",fill:\"#323722\",transform:\"translate(435,390)\"})),_path456||(_path456=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 3 2 3 3 6 C3.66 5.34 4.32 4.68 5 4 C8 7.75 8 7.75 8 10 C8.99 10.33 9.98 10.66 11 11 C11.66 12.32 12.32 13.64 13 15 C7.06 15 1.12 15 -5 15 C-5.33 13.35 -5.66 11.7 -6 10 C-10.455 9.01 -10.455 9.01 -15 8 C-15 6.68 -15 5.36 -15 4 C-13.87851563 3.94392578 -13.87851563 3.94392578 -12.734375 3.88671875 C-11.74953125 3.82097656 -10.7646875 3.75523437 -9.75 3.6875 C-8.77546875 3.62949219 -7.8009375 3.57148438 -6.796875 3.51171875 C-3.74658389 2.95363476 -2.29288724 2.03630224 0 0 Z \",fill:\"#FA9960\",transform:\"translate(184,302)\"})),_path457||(_path457=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C2.60407222 2.84331833 1.11666702 5.61526417 -0.4375 8.375 C-4.70754348 15.81042287 -4.70754348 15.81042287 -7 24 C-7.66 24 -8.32 24 -9 24 C-9 24.99 -9 25.98 -9 27 C-9.66 27 -10.32 27 -11 27 C-11.226875 27.804375 -11.45375 28.60875 -11.6875 29.4375 C-13.05488507 33.14897377 -14.79078815 36.34948826 -16.78125 39.75390625 C-18.04440823 41.97434984 -18.04440823 41.97434984 -18.9296875 44.3515625 C-20.26178097 47.64776459 -21.92298198 50.69213362 -23.625 53.8125 C-23.94984375 54.40998047 -24.2746875 55.00746094 -24.609375 55.62304688 C-25.40379151 57.08337135 -26.20155376 58.54187491 -27 60 C-27.66 60 -28.32 60 -29 60 C-28.52066068 55.1107389 -27.66088009 52.08635157 -25 48 C-24.12854347 46.34230824 -23.27603073 44.67458792 -22.4375 43 C-22.02371094 42.175 -21.60992187 41.35 -21.18359375 40.5 C-19.95941774 37.99720522 -19.95941774 37.99720522 -18.97265625 35.3125 C-18 33 -18 33 -16 31 C-15.2640502 29.33475766 -14.53300928 27.66698533 -13.83886719 25.98388672 C-10.10766049 17.1597349 -5.74774967 7.66366623 0 0 Z \",fill:\"#764E3B\",transform:\"translate(156,520)\"})),_path458||(_path458=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-3.46537085 2.31024723 -6.82941667 3.1499932 -10.8125 4.125 C-11.51181641 4.30675781 -12.21113281 4.48851562 -12.93164062 4.67578125 C-17.04458953 5.69920913 -20.72734085 6.20122414 -25 6 C-25 6.66 -25 7.32 -25 8 C-30.36439644 10.68219822 -34.01006953 11.3152595 -40 11 C-39.34 13.97 -38.68 16.94 -38 20 C-38.99 19.67 -39.98 19.34 -41 19 C-42.4807848 16.0384304 -42.35314037 13.16493705 -42.5625 9.875 C-42.64628906 8.59367188 -42.73007812 7.31234375 -42.81640625 5.9921875 C-42.87699219 5.00476563 -42.93757813 4.01734375 -43 3 C-41.73724243 2.91697632 -41.73724243 2.91697632 -40.44897461 2.83227539 C-37.29729914 2.62378361 -34.14579511 2.41289832 -30.99438477 2.20043945 C-29.6357239 2.10932451 -28.27700044 2.0191375 -26.91821289 1.92993164 C-24.95442394 1.80083938 -22.99088066 1.66802717 -21.02734375 1.53515625 C-19.25991821 1.41732788 -19.25991821 1.41732788 -17.45678711 1.29711914 C-15.06642323 1.09166163 -12.68177308 0.81098472 -10.30688477 0.47045898 C-6.83035116 -0.02413535 -3.50669706 -0.07156525 0 0 Z \",fill:\"#583429\",transform:\"translate(397,506)\"})),_path459||(_path459=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.1975 0.2165625 5.1975 0.2165625 10.5 0.4375 C11.57572266 0.48060303 12.65144531 0.52370605 13.75976562 0.56811523 C19.22505856 0.80659158 24.58315504 1.23261363 30 2 C30 2.66 30 3.32 30 4 C20.43 4 10.86 4 1 4 C1 4.99 1 5.98 1 7 C10.57 7 20.14 7 30 7 C30 9.31 30 11.62 30 14 C29.67 14 29.34 14 29 14 C29 12.02 29 10.04 29 8 C20.09 8 11.18 8 2 8 C2 10.64 2 13.28 2 16 C2.99 16.33 3.98 16.66 5 17 C4.34 17.33 3.68 17.66 3 18 C10.59 18.33 18.18 18.66 26 19 C26 19.33 26 19.66 26 20 C18.41 20 10.82 20 3 20 C3 23.96 3 27.92 3 32 C2.01 32 1.02 32 0 32 C0 21.44 0 10.88 0 0 Z \",fill:\"#0E0505\",transform:\"translate(270,302)\"})),_path460||(_path460=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C17.16 0 34.32 0 52 0 C52 0.33 52 0.66 52 1 C43.42 1 34.84 1 26 1 C26.33 2.32 26.66 3.64 27 5 C46.8 5.495 46.8 5.495 67 6 C67 10.29 67 14.58 67 19 C52.15 18.505 52.15 18.505 37 18 C36.67 18.66 36.34 19.32 36 20 C36 18.68 36 17.36 36 16 C46.00887894 15.37722531 55.96588331 14.82292735 66 15 C65.01 12.525 65.01 12.525 64 10 C64.66 10 65.32 10 66 10 C66 9.34 66 8.68 66 8 C52.14 8 38.28 8 24 8 C24.33 5.69 24.66 3.38 25 1 C16.75 1 8.5 1 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#2E130E\",transform:\"translate(284,282)\"})),_path461||(_path461=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.49107379 1.16369126 3.85222763 1.88973538 5.6875 4.9375 C6.34298828 6.00291016 6.34298828 6.00291016 7.01171875 7.08984375 C8 9 8 9 8 11 C8.59296875 11.26554687 9.1859375 11.53109375 9.796875 11.8046875 C13.83993108 13.99826048 16.17989322 16.77687644 18 21 C18.7286035 26.30305916 18.34875185 31.67830503 18 37 C16.515 36.505 16.515 36.505 15 36 C13.9458482 32.83754459 13.68724328 30.13051782 13.4375 26.8125 C13.31181641 25.18248047 13.31181641 25.18248047 13.18359375 23.51953125 C13.12300781 22.68808594 13.06242188 21.85664062 13 21 C12.67 23.97 12.34 26.94 12 30 C10.09610151 27.14415227 9.30537823 25.0688238 8.375 21.8125 C8.11460937 20.91144531 7.85421875 20.01039062 7.5859375 19.08203125 C7.39257812 18.39496094 7.19921875 17.70789063 7 17 C6.34 17 5.68 17 5 17 C1.17264102 11.09493185 -0.64317031 7.07487342 0 0 Z \",fill:\"#C4936C\",transform:\"translate(125,46)\"})),_path462||(_path462=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1.8125 2.5 -1.8125 2.5 -4 5 C-4.99 5 -5.98 5 -7 5 C-7 5.66 -7 6.32 -7 7 C-7.66 7 -8.32 7 -9 7 C-9.495 6.01 -9.495 6.01 -10 5 C-10.09796875 5.86882812 -10.1959375 6.73765625 -10.296875 7.6328125 C-11.47030455 16.67631266 -12.98956275 21.8941353 -20 28 C-24.68594212 29.56198071 -29.40441177 29.22577748 -34.3125 29.25 C-35.34568359 29.270625 -36.37886719 29.29125 -37.44335938 29.3125 C-43.14790564 29.34177285 -47.17521488 29.15562538 -52 26 C-52 25.67 -52 25.34 -52 25 C-51.34257812 25.0721875 -50.68515625 25.144375 -50.0078125 25.21875 C-43.55850651 25.84795058 -37.10151152 26.21066863 -30.625 26.375 C-29.86461426 26.41302734 -29.10422852 26.45105469 -28.32080078 26.49023438 C-24.32321398 26.55004425 -21.77752932 26.24929256 -18.5859375 23.7265625 C-14.07999287 18.9755816 -13.7533872 16.31709138 -13.875 9.75 C-13.91625 7.5225 -13.9575 5.295 -14 3 C-19.28 3 -24.56 3 -30 3 C-30 2.34 -30 1.68 -30 1 C-19.96557967 0.12198822 -10.06394247 -0.1176305 0 0 Z \",fill:\"#95503E\",transform:\"translate(410,367)\"})),_path463||(_path463=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 1 4 2 6 3 C6.06058594 4.07636719 6.12117187 5.15273437 6.18359375 6.26171875 C6.69298302 15.183718 7.27192948 24.09275423 8 33 C4.65227217 29.76026339 1.43313843 26.40143979 -1.75 23 C-2.52859375 22.175 -3.3071875 21.35 -4.109375 20.5 C-6.08440642 17.88838821 -6.65519953 16.21813776 -7 13 C-6.34 12.67 -5.68 12.34 -5 12 C-2.525 13.98 -2.525 13.98 0 16 C0 10.72 0 5.44 0 0 Z \",fill:\"#F2D09D\",transform:\"translate(150,81)\"})),_path464||(_path464=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.23556641 0.01740234 1.23556641 0.01740234 2.49609375 0.03515625 C3.32238281 0.04417969 4.14867187 0.05320312 5 0.0625 C5.63808594 0.07410156 6.27617187 0.08570313 6.93359375 0.09765625 C6.93359375 0.42765625 6.93359375 0.75765625 6.93359375 1.09765625 C4.29359375 1.09765625 1.65359375 1.09765625 -1.06640625 1.09765625 C-1.04320312 1.99226562 -1.02 2.886875 -0.99609375 3.80859375 C-0.96902344 5.62230469 -0.96902344 5.62230469 -0.94140625 7.47265625 C-0.91820312 8.65601563 -0.895 9.839375 -0.87109375 11.05859375 C-0.9269226 13.95274701 -1.32489492 16.58182611 -1.94921875 19.40625 C-3.66764729 27.43370094 -4.27249691 35.62568129 -5.06640625 43.78515625 C-5.15289429 44.6572876 -5.23938232 45.52941895 -5.32849121 46.42797852 C-6.96418523 62.96322066 -8.16505933 79.50701042 -9.06640625 96.09765625 C-10.05640625 96.09765625 -11.04640625 96.09765625 -12.06640625 96.09765625 C-12.18044606 89.3131578 -11.74928168 82.72925984 -11.04296875 75.984375 C-10.93673187 74.93474075 -10.830495 73.88510651 -10.72103882 72.80366516 C-10.38204491 69.46371643 -10.03687451 66.12444087 -9.69140625 62.78515625 C-9.46703055 60.5866311 -9.24306891 58.38806364 -9.01953125 56.18945312 C-8.58067875 51.87760809 -8.13929866 47.56603336 -7.69604492 43.25463867 C-7.02767747 36.74097016 -6.37704003 30.22557489 -5.73733521 23.70903015 C-3.40635926 0.16098106 -3.40635926 0.16098106 0 0 Z \",fill:\"#B68C71\",transform:\"translate(274.06640625,529.90234375)\"})),_path465||(_path465=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.99 0 1.98 0 3 C0.99 3 1.98 3 3 3 C3 3.66 3 4.32 3 5 C-9.5301698 7.79001793 -22.24299479 7.1938528 -35 7 C-35 5.68 -35 4.36 -35 3 C-33.12612523 2.6603981 -31.25083303 2.32861309 -29.375 2 C-28.33085938 1.814375 -27.28671875 1.62875 -26.2109375 1.4375 C-23.09721241 1.01324549 -20.13589388 1 -17 1 C-16.67 0.67 -16.34 0.34 -16 0 C-14.25739913 -0.26314443 -12.50469034 -0.46079101 -10.75 -0.625 C-9.79609375 -0.72039062 -8.8421875 -0.81578125 -7.859375 -0.9140625 C-5.05155872 -0.99845042 -2.71923383 -0.66492214 0 0 Z \",fill:\"#99AE7C\",transform:\"translate(596,389)\"})),_path466||(_path466=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0.99 5.94 1.98 9 3 C8.67 9.27 8.34 15.54 8 22 C9.32 22.33 10.64 22.66 12 23 C16.82242991 25.46728972 16.82242991 25.46728972 18 29 C16.68546734 28.58979123 15.37351447 28.17131747 14.0625 27.75 C13.33160156 27.51796875 12.60070312 27.2859375 11.84765625 27.046875 C7.81868553 25.56571704 3.9226295 23.74339089 0 22 C0 14.74 0 7.48 0 0 Z \",fill:\"#C69973\",transform:\"translate(0,138)\"})),_path467||(_path467=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C23.34355828 -0.82822086 23.34355828 -0.82822086 33 4 C33.625 6.5625 33.625 6.5625 34 9 C22.47101379 8.5444951 11.34425017 7.08765715 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#05352B\",transform:\"translate(476,389)\"})),_path468||(_path468=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.96 0 7.92 0 12 0 C12.99 4.95 13.98 9.9 15 15 C14.01 15.66 13.02 16.32 12 17 C12 16.34 12 15.68 12 15 C5.07 14.505 5.07 14.505 -2 14 C-2 11.36 -2 8.72 -2 6 C-1.34 6 -0.68 6 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#020305\",transform:\"translate(68,386)\"})),_path469||(_path469=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.7533593 0.63079884 6.98781071 1.70520483 10.484375 3.19921875 C11.53560547 3.64700684 12.58683594 4.09479492 13.66992188 4.55615234 C19.20507442 6.95607113 24.73224653 9.37283214 30.25 11.8125 C31.38824219 12.31458984 32.52648437 12.81667969 33.69921875 13.33398438 C36.46662882 14.55490058 39.23354606 15.77691926 42 17 C42 18.98 42 20.96 42 23 C37.49297245 22.0202114 34.10674362 20.57684909 30.1875 18.125 C26.08188042 15.55976417 22.04331409 13.7077714 17.5234375 12.00390625 C13.20976484 10.2877857 9.12249418 8.1263391 5 6 C4.26007812 5.66484375 3.52015625 5.3296875 2.7578125 4.984375 C1 4 1 4 0.25 1.875 C0.1675 1.25625 0.085 0.6375 0 0 Z \",fill:\"#916046\",transform:\"translate(584,438)\"})),_path470||(_path470=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.6 0 13.2 0 20 0 C20 0.66 20 1.32 20 2 C17.69 3.32 15.38 4.64 13 6 C12.67 5.34 12.34 4.68 12 4 C9.79294308 6.20705692 9.51488609 7.19041173 8.78125 10.1484375 C8.57201904 10.98407227 8.36278809 11.81970703 8.1472168 12.68066406 C7.82684448 14.01436035 7.82684448 14.01436035 7.5 15.375 C7.27932861 16.27444336 7.05865723 17.17388672 6.83129883 18.10058594 C5.24164734 24.69601146 3.91589095 31.27435304 3 38 C2.67 38 2.34 38 2 38 C1.97059542 34.83335334 1.95306685 31.66674253 1.9375 28.5 C1.92912109 27.613125 1.92074219 26.72625 1.91210938 25.8125 C1.89236404 20.44176914 2.21164107 15.31366337 3 10 C4.65 10 6.3 10 8 10 C8 9.34 8 8.68 8 8 C4.04 8 0.08 8 -4 8 C-3.67 7.34 -3.34 6.68 -3 6 C-2.01 6 -1.02 6 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#FBB892\",transform:\"translate(328,362)\"})),_path471||(_path471=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C3.6674606 1.08426094 5.33825187 1.10725143 7.0078125 1.09765625 C7.99394531 1.09443359 8.98007813 1.09121094 9.99609375 1.08789062 C11.54490234 1.07532227 11.54490234 1.07532227 13.125 1.0625 C14.16527344 1.05798828 15.20554688 1.05347656 16.27734375 1.04882812 C18.85161962 1.03701952 21.42578146 1.02055075 24 1 C22.10364864 4.92278698 20.20156567 7.96693778 17 11 C14.14725293 11.57771602 11.55348343 11.26430249 8.6875 10.875 C7.94693359 10.80023438 7.20636719 10.72546875 6.44335938 10.6484375 C4.62573571 10.46081183 2.81220539 10.23424512 1 10 C1 9.34 1 8.68 1 8 C-1.31 8.66 -3.62 9.32 -6 10 C-4.1875 7.5 -4.1875 7.5 -2 5 C-1.01 5 -0.02 5 1 5 C0.67 3.35 0.34 1.7 0 0 Z \",fill:\"#AFA083\",transform:\"translate(116,318)\"})),_path472||(_path472=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.16208984 0.01353516 1.16208984 0.01353516 2.34765625 0.02734375 C4.23190843 0.05060612 6.11599832 0.0864636 8 0.125 C8.495 1.61 8.495 1.61 9 3.125 C5.62182575 3.96954356 3.32534757 4.23344919 0 3.125 C0 4.115 0 5.105 0 6.125 C-1.98 6.455 -3.96 6.785 -6 7.125 C-6 8.115 -6 9.105 -6 10.125 C-10.81898887 12.10202107 -15.82544544 13.08746715 -21 12.125 C-21.66 11.135 -22.32 10.145 -23 9.125 C-23.99 8.465 -24.98 7.805 -26 7.125 C-22.68885166 5.99619943 -19.41021743 4.91197325 -16 4.125 C-16.33 3.465 -16.66 2.805 -17 2.125 C-11.16420924 0.44057858 -6.05539796 -0.13643011 0 0 Z \",fill:\"#46544B\",transform:\"translate(511,211.875)\"})),_path473||(_path473=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.99 1.32 1.98 2 3 C2.66 2.34 3.32 1.68 4 1 C0.86666667 27.26666667 0.86666667 27.26666667 -1 31 C-0.09636719 31.12117188 0.80726562 31.24234375 1.73828125 31.3671875 C2.91777344 31.53476562 4.09726562 31.70234375 5.3125 31.875 C6.48425781 32.03742188 7.65601563 32.19984375 8.86328125 32.3671875 C12 33 12 33 15 35 C15.47125462 40.56080455 14.58849358 44.63883418 13 50 C12.83152909 53.29219428 12.83152909 53.29219428 13 56 C12.34 56 11.68 56 11 56 C10.77271537 49.95170347 11.08456403 44.57439911 12.66015625 38.71484375 C12.77230469 38.14894531 12.88445312 37.58304687 13 37 C11.43198619 35.43198619 9.73854243 35.72884334 7.5625 35.5625 C2.27983933 35.08988101 -2.82362184 34.13439777 -8 33 C-8.33 32.01 -8.66 31.02 -9 30 C-7.02 30.33 -5.04 30.66 -3 31 C-3.02320313 30.319375 -3.04640625 29.63875 -3.0703125 28.9375 C-3.18666854 22.68751867 -2.84570114 16.62972813 -2.0625 10.4375 C-1.97564941 9.74720703 -1.88879883 9.05691406 -1.79931641 8.34570312 C-1.40957349 5.43235678 -0.93207226 2.79621677 0 0 Z \",fill:\"#9E432C\",transform:\"translate(52,347)\"})),_path474||(_path474=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.3295627 0.17997636 4.71126179 0.71975409 7.125 3.0625 C9.36054632 6.5648559 10.76599287 10.04646123 12 14 C12.19078125 14.59167969 12.3815625 15.18335938 12.578125 15.79296875 C13.18339863 18.95944655 13.09231102 22.03041012 13.0625 25.25 C13.05347656 26.51328125 13.04445313 27.7765625 13.03515625 29.078125 C13.02355469 30.04234375 13.01195312 31.0065625 13 32 C10.98740676 28.98111014 10.73456889 28.06143424 10.5 24.625 C10.17607694 21.03870896 9.40128241 18.32804573 8 15 C7.814375 13.2365625 7.814375 13.2365625 7.625 11.4375 C6.9261404 7.5937722 5.9851983 6.40741799 3 4 C2.67 4.99 2.34 5.98 2 7 C1.01 6.67 0.02 6.34 -1 6 C-1.042721 4.33388095 -1.04063832 2.66617115 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z M8 16 C7.1953125 18.3828125 7.1953125 18.3828125 5 21 C1.35816225 22.14466755 -2.33759004 22.48679048 -6.125 22.875 C-7.13304687 23.00390625 -8.14109375 23.1328125 -9.1796875 23.265625 C-15.34715753 23.98463057 -20.86219601 23.93151703 -27 23 C-26.67 22.34 -26.34 21.68 -26 21 C-22.04 21 -18.08 21 -14 21 C-14.66 20.34 -15.32 19.68 -16 19 C-11.71 19 -7.42 19 -3 19 C-3 18.34 -3 17.68 -3 17 C4.625 14.875 4.625 14.875 8 16 Z \",fill:\"#110E0F\",transform:\"translate(559,336)\"})),_path475||(_path475=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3 2.32 3 3.64 3 5 C9.6 5.33 16.2 5.66 23 6 C23 8.97 23 11.94 23 15 C14.5 17 14.5 17 10 17 C9.649375 16.05125 9.29875 15.1025 8.9375 14.125 C7.2285659 10.65663938 7.2285659 10.65663938 3.3125 9.625 C2.219375 9.41875 1.12625 9.2125 0 9 C0 6.03 0 3.06 0 0 Z \",fill:\"#042411\",transform:\"translate(393,299)\"})),_path476||(_path476=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.99 0 1.98 0 3 C-1.43359375 4.39453125 -1.43359375 4.39453125 -3.4375 5.8125 C-4.15808594 6.32683594 -4.87867188 6.84117187 -5.62109375 7.37109375 C-9.39042427 9.95206391 -13.18055564 12.49348964 -17 15 C-10.73 15.33 -4.46 15.66 2 16 C2 16.99 2 17.98 2 19 C-7.24 19.33 -16.48 19.66 -26 20 C-23 17 -23 17 -20 15 C-20.72590332 15.02094727 -21.45180664 15.04189453 -22.19970703 15.06347656 C-25.50799555 15.1469365 -28.81606211 15.19875539 -32.125 15.25 C-33.26710937 15.28351563 -34.40921875 15.31703125 -35.5859375 15.3515625 C-42.03185971 15.42651508 -46.15500386 15.45215861 -51 11 C-52.875 8.75 -52.875 8.75 -54 7 C-53.67 6.34 -53.34 5.68 -53 5 C-52.29037109 5.74056641 -52.29037109 5.74056641 -51.56640625 6.49609375 C-47.54801025 10.38915966 -44.51495106 12.92971342 -38.828125 13.1484375 C-22.79113156 12.41509583 -22.79113156 12.41509583 -8.375 6.0625 C-7.27285156 5.30646484 -7.27285156 5.30646484 -6.1484375 4.53515625 C-4.07491647 3.05353123 -2.03097179 1.5393112 0 0 Z \",fill:\"#303635\",transform:\"translate(281,381)\"})),_path477||(_path477=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 1.32 0.66 2.64 1 4 C2.9490625 3.7215625 2.9490625 3.7215625 4.9375 3.4375 C7.15234375 3.12109375 7.15234375 3.12109375 9 3 C9.495 3.495 9.495 3.495 10 4 C12.81357112 4.01697335 15.59950927 3.9708943 18.41015625 3.87890625 C19.25219101 3.85529526 20.09422577 3.83168427 20.96177673 3.80735779 C23.66218131 3.73053055 26.36231271 3.64658888 29.0625 3.5625 C30.88865832 3.50929836 32.71483014 3.45655786 34.54101562 3.40429688 C39.02751809 3.27488979 43.51378801 3.13910001 48 3 C48 3.33 48 3.66 48 4 C47.35450195 4.11593506 46.70900391 4.23187012 46.04394531 4.35131836 C43.11237767 4.87865267 40.18118703 5.40805434 37.25 5.9375 C35.72632813 6.21110352 35.72632813 6.21110352 34.171875 6.49023438 C33.1921875 6.66748047 32.2125 6.84472656 31.203125 7.02734375 C30.30239258 7.18968506 29.40166016 7.35202637 28.47363281 7.51928711 C26.91003108 7.82314931 25.35274869 8.16383188 23.80859375 8.5546875 C21.73229668 9.06591399 19.88467441 9.09807791 17.75 9.0625 C15.89375 9.0315625 15.89375 9.0315625 14 9 C14.33 8.34 14.66 7.68 15 7 C7.48074696 7.34667462 0.66615856 8.19283871 -6.54296875 10.3671875 C-9.82397013 11.21221488 -12.63395023 11.22440332 -16 11 C-16 10.01 -16 9.02 -16 8 C-20.62 8 -25.24 8 -30 8 C-30 7.67 -30 7.34 -30 7 C-29.44650879 6.97494385 -28.89301758 6.9498877 -28.32275391 6.92407227 C-14.1368692 6.2941189 -14.1368692 6.2941189 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#1C0C0C\",transform:\"translate(414,477)\"})),_path478||(_path478=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.00259674 0.8886523 3.88472709 1.91501579 5.80078125 2.9765625 C9.66640859 4.77548677 13.81179139 5.347738 18 6 C18 6.33 18 6.66 18 7 C11.36763865 7.36030937 7.14511332 6.68150399 1 4 C-3.11916337 3.44316336 -6.63897372 3.03693462 -10.12915039 5.5065918 C-13.83364141 7.43365801 -17.07470042 7.37815222 -21.14453125 7.29296875 C-21.91431808 7.28872391 -22.68410492 7.28447906 -23.47721863 7.28010559 C-25.92267646 7.26338597 -28.36729357 7.2257477 -30.8125 7.1875 C-32.47589951 7.17244441 -34.13931201 7.15875754 -35.80273438 7.14648438 C-39.86881082 7.11350465 -43.93426313 7.06177006 -48 7 C-48 6.34 -48 5.68 -48 5 C-39.92243279 2.71389607 -25.83406031 -0.91703016 -18 3 C-14.5046501 3.31069777 -12.58936397 3.36268552 -9.5625 1.5 C-6.07551781 -0.54116031 -3.99972896 -0.47454411 0 0 Z \",fill:\"#FDB6A8\",transform:\"translate(376,496)\"})),_path479||(_path479=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.69287109 0.00451172 1.38574219 0.00902344 2.09960938 0.01367188 C3.79561068 0.02536844 5.49156703 0.04330076 7.1875 0.0625 C7.24284912 0.73829102 7.29819824 1.41408203 7.35522461 2.11035156 C7.60840531 5.17802698 7.8666479 8.24525596 8.125 11.3125 C8.21201172 12.37597656 8.29902344 13.43945312 8.38867188 14.53515625 C8.47568359 15.55996094 8.56269531 16.58476562 8.65234375 17.640625 C8.730896 18.58325195 8.80944824 19.52587891 8.89038086 20.49707031 C9.15362311 22.76999522 9.56981108 24.86325595 10.1875 27.0625 C9.5275 27.0625 8.8675 27.0625 8.1875 27.0625 C7.8575 28.3825 7.5275 29.7025 7.1875 31.0625 C7.12691406 30.24265625 7.06632812 29.4228125 7.00390625 28.578125 C6.87822266 26.96164063 6.87822266 26.96164063 6.75 25.3125 C6.66878906 24.24515625 6.58757812 23.1778125 6.50390625 22.078125 C6.24659227 19.62570038 5.86937782 17.42328709 5.1875 15.0625 C4.5275 15.0625 3.8675 15.0625 3.1875 15.0625 C3.1875 14.4025 3.1875 13.7425 3.1875 13.0625 C2.5275 13.0625 1.8675 13.0625 1.1875 13.0625 C1.1875 12.4025 1.1875 11.7425 1.1875 11.0625 C0.5275 11.0625 -0.1325 11.0625 -0.8125 11.0625 C-0.8125 10.0725 -0.8125 9.0825 -0.8125 8.0625 C0.5075 8.3925 1.8275 8.7225 3.1875 9.0625 C2.1975 6.7525 1.2075 4.4425 0.1875 2.0625 C-1.7925 2.0625 -3.7725 2.0625 -5.8125 2.0625 C-5.1525 2.3925 -4.4925 2.7225 -3.8125 3.0625 C-4.1425 4.3825 -4.4725 5.7025 -4.8125 7.0625 C-5.4725 7.0625 -6.1325 7.0625 -6.8125 7.0625 C-6.8125 9.0425 -6.8125 11.0225 -6.8125 13.0625 C-5.4925 13.7225 -4.1725 14.3825 -2.8125 15.0625 C-3.8025 15.0625 -4.7925 15.0625 -5.8125 15.0625 C-6.1425 15.7225 -6.4725 16.3825 -6.8125 17.0625 C-7.4725 17.0625 -8.1325 17.0625 -8.8125 17.0625 C-9.1425 13.1025 -9.4725 9.1425 -9.8125 5.0625 C-10.8025 4.7325 -11.7925 4.4025 -12.8125 4.0625 C-12.8125 3.0725 -12.8125 2.0825 -12.8125 1.0625 C-8.52952469 0.00630997 -4.38264354 -0.05452092 0 0 Z \",fill:\"#785442\",transform:\"translate(144.8125,116.9375)\"})),_path480||(_path480=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.27167979 2.78364719 8.35390288 5.73859236 12.375 8.875 C13.52571517 9.76734827 14.67675551 10.65927739 15.828125 11.55078125 C16.37662109 11.97568848 16.92511719 12.4005957 17.49023438 12.83837891 C19.35117496 14.27019574 21.23543213 15.66874849 23.125 17.0625 C24.4183457 18.03944782 25.70982037 19.0188748 27 20 C28.45019531 21.0828125 28.45019531 21.0828125 29.9296875 22.1875 C30.94289063 22.97125 31.95609375 23.755 33 24.5625 C33.94875 25.28566406 34.8975 26.00882812 35.875 26.75390625 C38 29 38 29 38.3125 31.77734375 C38.209375 32.51082031 38.10625 33.24429688 38 34 C30.16456089 29.15859047 23.13272838 23.38533884 15.99023438 17.60205078 C12.70334708 14.95625166 9.38372594 12.35247551 6.0625 9.75 C5.45317627 9.27216064 4.84385254 8.79432129 4.21606445 8.30200195 C2.81117533 7.20074028 1.40566362 6.10027291 0 5 C0.33 4.01 0.66 3.02 1 2 C0.34 1.67 -0.32 1.34 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#F4D6B0\",transform:\"translate(516,459)\"})),_path481||(_path481=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.95 0 9.9 0 15 0 C15.81665819 6.40045258 16.13581031 12.61844456 16.09765625 19.06640625 C16.0962413 19.98590561 16.09482635 20.90540497 16.09336853 21.85276794 C16.08782312 24.75604671 16.07528117 27.65924501 16.0625 30.5625 C16.05747793 32.54492075 16.05291627 34.52734273 16.04882812 36.50976562 C16.03787164 41.3398742 16.02064542 46.16992351 16 51 C15.67 51 15.34 51 15 51 C13.515 32.685 13.515 32.685 12 14 C10.35 13.67 8.7 13.34 7 13 C6.91840426 8.83861737 7.01751476 5.0527516 8 1 C6.02 1 4.04 1 2 1 C2 4.63 2 8.26 2 12 C1.34 12 0.68 12 0 12 C0 8.04 0 4.08 0 0 Z \",fill:\"#FC5D5F\",transform:\"translate(309,371)\"})),_path482||(_path482=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.61 0 11.22 0 17 0 C17.99 4.29 18.98 8.58 20 13 C18.55625 12.87625 17.1125 12.7525 15.625 12.625 C14.81289063 12.55539062 14.00078125 12.48578125 13.1640625 12.4140625 C11 12 11 12 9 10 C6.57284794 9.32059533 6.57284794 9.32059533 3.875 8.875 C2.96492188 8.70742188 2.05484375 8.53984375 1.1171875 8.3671875 C0.41851562 8.24601562 -0.28015625 8.12484375 -1 8 C-0.67 5.36 -0.34 2.72 0 0 Z \",fill:\"#FDD3B2\",transform:\"translate(354,351)\"})),_path483||(_path483=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.33 1.65 2.66 3.3 3 5 C6.3 4.67 9.6 4.34 13 4 C13 4.33 13 4.66 13 5 C18.99439701 4.41038718 24.81365526 3.5164646 30.71484375 2.3046875 C33 2 33 2 35 3 C34.67 3.99 34.34 4.98 34 6 C32.96101563 6.12117188 31.92203125 6.24234375 30.8515625 6.3671875 C23.1615328 7.28416081 15.5632866 8.29098812 8 10 C16.72542301 10.12852505 25.31008699 9.79645684 34 9 C34 9.66 34 10.32 34 11 C24.29046527 12.28846906 14.81996112 13.34057669 5 13 C5 12.34 5 11.68 5 11 C2.69 11 0.38 11 -2 11 C-2 9.68 -2 8.36 -2 7 C-1.01 7 -0.02 7 1 7 C1 6.34 1 5.68 1 5 C0.34 5 -0.32 5 -1 5 C-0.67 3.35 -0.34 1.7 0 0 Z \",fill:\"#070B0D\",transform:\"translate(62,346)\"})),_path484||(_path484=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.76462683 3.08809695 2 4.23312136 2 8 C3.65 8 5.3 8 7 8 C7 8.66 7 9.32 7 10 C11.62 10.66 16.24 11.32 21 12 C21 11.34 21 10.68 21 10 C22.98 10.66 24.96 11.32 27 12 C27 12.66 27 13.32 27 14 C28.32 14 29.64 14 31 14 C30.67 15.32 30.34 16.64 30 18 C29.34 17.34 28.68 16.68 28 16 C25.57084411 15.36546702 25.57084411 15.36546702 22.72265625 14.96484375 C21.65080078 14.79533203 20.57894531 14.62582031 19.47460938 14.45117188 C18.34861328 14.28166016 17.22261719 14.11214844 16.0625 13.9375 C14.97130859 13.76412109 13.88011719 13.59074219 12.75585938 13.41210938 C5.8525218 12.34026458 -1.03502417 11.53885769 -8 11 C-8.33 10.01 -8.66 9.02 -9 8 C-6.36 8 -3.72 8 -1 8 C-1.66 6.68 -2.32 5.36 -3 4 C-13.95320502 3.18637274 -13.95320502 3.18637274 -23.44921875 7.90625 C-25 9 -25 9 -28 9 C-22.47633997 2.81350077 -17.8918516 0.84594996 -9.75 0.25 C-6.49385189 0.09627627 -3.25944675 0 0 0 Z \",fill:\"#66AD71\",transform:\"translate(457,310)\"})),_path485||(_path485=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1 3 1 3 0.234375 5.2265625 C-1.63421506 8.24581064 -3.04657693 9.96775403 -6 12 C-12.19497015 13.43912442 -18.68129842 13.15780973 -25 13 C-25 12.34 -25 11.68 -25 11 C-23.68 11 -22.36 11 -21 11 C-20.855625 9.88625 -20.71125 8.7725 -20.5625 7.625 C-20 4 -20 4 -19 2 C-15.26850844 0.60530885 -11.19116371 0.66473156 -7.25 0.4375 C-6.20392578 0.37272461 -6.20392578 0.37272461 -5.13671875 0.30664062 C-3.42468078 0.20110404 -1.71236439 0.1001009 0 0 Z \",fill:\"#591B15\",transform:\"translate(129,333)\"})),_path486||(_path486=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.54232342 -0.08152344 5.08199202 -0.14073716 7.625 -0.1875 C8.33785156 -0.21263672 9.05070313 -0.23777344 9.78515625 -0.26367188 C14.61896995 -0.33019225 17.76781157 0.41510953 22 3 C23 4 23 4 23 9 C19.37 9 15.74 9 12 9 C12 8.34 12 7.68 12 7 C5.4 7 -1.2 7 -8 7 C-8 6.34 -8 5.68 -8 5 C-6.865625 4.731875 -5.73125 4.46375 -4.5625 4.1875 C-3.386875 3.795625 -2.21125 3.40375 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#F5F3D2\",transform:\"translate(520,319)\"})),_path487||(_path487=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C0.34 2 -0.32 2 -1 2 C-1.06960937 2.65613281 -1.13921875 3.31226563 -1.2109375 3.98828125 C-2.30710727 8.17217675 -4.39785386 11.50530133 -6.625 15.1875 C-7.29789063 16.31273071 -7.29789063 16.31273071 -7.984375 17.46069336 C-15.57309393 30.03763985 -15.57309393 30.03763985 -19 34 C-19.66 34 -20.32 34 -21 34 C-20.505 31.03 -20.505 31.03 -20 28 C-21.98 28.99 -21.98 28.99 -24 30 C-23.625 28.0625 -23.625 28.0625 -23 26 C-22.34 25.67 -21.68 25.34 -21 25 C-20.19973239 23.67491921 -19.45828937 22.31394234 -18.75 20.9375 C-15.15784588 14.31314519 -11.76119025 8.6406409 -5 5 C-3.2958946 3.37163262 -1.61974559 1.71230248 0 0 Z \",fill:\"#8B5D46\",transform:\"translate(113,559)\"})),_path488||(_path488=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C10.89 0 21.78 0 33 0 C33.495 2.97 33.495 2.97 34 6 C22.78 6 11.56 6 0 6 C0 5.34 0 4.68 0 4 C1.32 4 2.64 4 4 4 C4 3.34 4 2.68 4 2 C2.68 1.67 1.36 1.34 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#FAD34C\",transform:\"translate(172,270)\"})),_path489||(_path489=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-1.95597184 3.39712274 -3.9659094 4.71927629 -6 6 C-7.0725 6.7425 -8.145 7.485 -9.25 8.25 C-12 10 -12 10 -14 10 C-14 10.99 -14 11.98 -14 13 C-14.66 13 -15.32 13 -16 13 C-16 13.66 -16 14.32 -16 15 C-14.62714844 14.44119141 -14.62714844 14.44119141 -13.2265625 13.87109375 C-12.03804687 13.39800781 -10.84953125 12.92492187 -9.625 12.4375 C-8.44164063 11.96183594 -7.25828125 11.48617188 -6.0390625 10.99609375 C-3 10 -3 10 -1 11 C-9.10105879 17.48084703 -17.69703935 20.32439602 -28 21 C-28.33 20.34 -28.66 19.68 -29 19 C-29.515625 19.474375 -30.03125 19.94875 -30.5625 20.4375 C-33.66782675 22.42809407 -36.36632504 22.65060818 -40 23 C-38.45091874 19.90183748 -35.8411832 19.33888632 -32.75 17.875 C-25.51376323 14.37128485 -18.79815563 10.2976846 -12 6 C-10.10854367 4.82625042 -8.21309231 3.65889775 -6.3125 2.5 C-5.52488281 2.0153125 -4.73726562 1.530625 -3.92578125 1.03125 C-2 0 -2 0 0 0 Z \",fill:\"#57392C\",transform:\"translate(46,466)\"})),_path490||(_path490=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-3.24910633 2.48535695 -6.49929103 2.96299803 -9.75 3.4375 C-10.71268799 3.57873291 -11.67537598 3.71996582 -12.66723633 3.86547852 C-17.67855141 4.58415385 -22.62790275 5.17155534 -27.6875 5.4375 C-32.58359016 5.75269894 -36.4407723 7.12970661 -40.84375 9.2578125 C-43.46995204 10.16175885 -44.36520103 9.78016211 -47 9 C-49.58656673 8.77711499 -52.15952778 8.58685615 -54.75 8.4375 C-55.44738281 8.39431641 -56.14476562 8.35113281 -56.86328125 8.30664062 C-58.57531922 8.20110404 -60.28763561 8.1001009 -62 8 C-62 7.67 -62 7.34 -62 7 C-56.72 7 -51.44 7 -46 7 C-45.67 6.01 -45.34 5.02 -45 4 C-41.48214202 2.17044926 -38.23882914 1.66244805 -34.31640625 1.3671875 C-33.22956543 1.2832373 -32.14272461 1.19928711 -31.02294922 1.11279297 C-29.88100098 1.03432129 -28.73905273 0.95584961 -27.5625 0.875 C-26.39992676 0.79008301 -25.23735352 0.70516602 -24.03955078 0.61767578 C-16.01077727 0.06044908 -8.04871654 -0.26341254 0 0 Z \",fill:\"#23130B\",transform:\"translate(408,472)\"})),_path491||(_path491=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.29 0 8.58 0 13 0 C13 0.66 13 1.32 13 2 C11.35 2.33 9.7 2.66 8 3 C14.27 2.67 20.54 2.34 27 2 C27.495 2.99 27.495 2.99 28 4 C24.70390542 4.96758862 21.61209753 5.16173156 18.1875 5.3125 C11.73859434 5.76024037 5.91612222 7.25181 -0.28515625 9.01171875 C-8.42757287 11.17789268 -16.5790991 12.33023141 -25 12 C-25 10.68 -25 9.36 -25 8 C-12.625 7.01 -12.625 7.01 0 6 C-0.33 4.68 -0.66 3.36 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#4A342B\",transform:\"translate(25,318)\"})),_path492||(_path492=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C9.9 0 19.8 0 30 0 C30 3.3 30 6.6 30 10 C28.68 9.67 27.36 9.34 26 9 C24.12243262 8.85492152 22.24123507 8.75366301 20.359375 8.68359375 C19.28945313 8.64169922 18.21953125 8.59980469 17.1171875 8.55664062 C16.00601562 8.51732422 14.89484375 8.47800781 13.75 8.4375 C12.62335938 8.39431641 11.49671875 8.35113281 10.3359375 8.30664062 C7.55741046 8.20067985 4.77879609 8.09860858 2 8 C2 7.67 2 7.34 2 7 C9.59 6.67 17.18 6.34 25 6 C17.08 6 9.16 6 1 6 C0.67 4.02 0.34 2.04 0 0 Z \",fill:\"#0C0304\",transform:\"translate(321,302)\"})),_path493||(_path493=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C1.52112486 4.66903261 0.07619577 8.29053847 -1.88671875 12.48046875 C-3.51932795 16.17532114 -4.78403557 19.98556038 -6.0703125 23.8125 C-7 26 -7 26 -9 27 C-9.72693904 28.97888961 -10.39816251 30.97954558 -11 33 C-11.66 33 -12.32 33 -13 33 C-13.11601563 33.72316406 -13.23203125 34.44632813 -13.3515625 35.19140625 C-14.01974065 38.08550317 -15.00507708 40.30973876 -16.375 42.9375 C-16.81972656 43.79988281 -17.26445313 44.66226563 -17.72265625 45.55078125 C-18.14417969 46.35902344 -18.56570312 47.16726563 -19 48 C-19.60702155 49.20690167 -20.21178488 50.41494705 -20.8125 51.625 C-21.204375 52.40875 -21.59625 53.1925 -22 54 C-22.99 54 -23.98 54 -25 54 C-24.57228451 52.58034858 -24.13234457 51.1643776 -23.6875 49.75 C-23.44386719 48.96109375 -23.20023437 48.1721875 -22.94921875 47.359375 C-22 45 -22 45 -20.515625 43.1015625 C-18.56945778 40.40301105 -17.93243859 37.82846487 -17.0625 34.625 C-15.60595404 29.63591154 -14.09023615 26.12031486 -11 22 C-10.28426473 20.35380887 -9.5974304 18.69271945 -9 17 C-8.34 17 -7.68 17 -7 17 C-6.896875 16.484375 -6.79375 15.96875 -6.6875 15.4375 C-5.49023375 11.19264692 -4.14734075 7.14734075 -1 4 C-0.3574765 1.93125966 -0.3574765 1.93125966 0 0 Z \",fill:\"#3C261F\",transform:\"translate(134,572)\"})),_path494||(_path494=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.09731445 0.00676758 1.09731445 0.00676758 2.21679688 0.01367188 C3.99873419 0.02531852 5.78062863 0.04324809 7.5625 0.0625 C7.5625 0.3925 7.5625 0.7225 7.5625 1.0625 C3.6025 1.0625 -0.3575 1.0625 -4.4375 1.0625 C-4.1075 4.3625 -3.7775 7.6625 -3.4375 11.0625 C-2.633125 11.330625 -1.82875 11.59875 -1 11.875 C-0.154375 12.266875 0.69125 12.65875 1.5625 13.0625 C1.8925 14.0525 2.2225 15.0425 2.5625 16.0625 C3.14257812 16.11148437 3.72265625 16.16046875 4.3203125 16.2109375 C9.00173092 16.65899405 13.13735459 17.360521 17.5625 19.0625 C17.5625 19.7225 17.5625 20.3825 17.5625 21.0625 C14.49723908 20.64310002 11.436086 20.19878066 8.375 19.75 C7.51068359 19.63205078 6.64636719 19.51410156 5.75585938 19.39257812 C1.12754341 18.70099068 -2.68445172 18.08514137 -6.4375 15.0625 C-6.4375 14.4025 -6.4375 13.7425 -6.4375 13.0625 C-7.4275 13.0625 -8.4175 13.0625 -9.4375 13.0625 C-11.26171875 10.65625 -11.26171875 10.65625 -13.125 7.5625 C-14.05892578 6.03109375 -14.05892578 6.03109375 -15.01171875 4.46875 C-15.48222656 3.6746875 -15.95273437 2.880625 -16.4375 2.0625 C-13.10443415 -1.27056585 -4.57746606 -0.05444379 0 0 Z \",fill:\"#9BA265\",transform:\"translate(586.4375,324.9375)\"})),_path495||(_path495=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C-3.74522285 6.11843381 -10.55512974 11.13031115 -17.4375 16.0625 C-25.22165181 21.64804917 -32.84625262 27.42535637 -40.44726562 33.25683594 C-45.92233564 37.44735469 -51.45937462 41.51688685 -57.09985352 45.48071289 C-61.83916756 48.83256532 -66.38939785 52.39983325 -70.93188477 56.01220703 C-76.1737934 60.17136077 -81.54913609 64.11764999 -87 68 C-87.66 67.67 -88.32 67.34 -89 67 C-86.71287089 65.16074213 -84.42071465 63.32848506 -82.125 61.5 C-81.47402344 60.97535156 -80.82304688 60.45070312 -80.15234375 59.91015625 C-79.52714844 59.41386719 -78.90195312 58.91757812 -78.2578125 58.40625 C-77.6817627 57.94541016 -77.10571289 57.48457031 -76.51220703 57.00976562 C-75 56 -75 56 -73 56 C-73 55.34 -73 54.68 -73 54 C-70.96926321 52.41681689 -68.93623589 50.94930063 -66.8125 49.5 C-60.64560628 45.21301548 -54.71264681 40.71171852 -48.83984375 36.03125 C-46.24872599 34.1779058 -44.00209863 33.01355257 -41 32 C-41 31.34 -41 30.68 -41 30 C-39.5222168 28.70654297 -39.5222168 28.70654297 -37.44921875 27.2421875 C-36.69334473 26.70303711 -35.9374707 26.16388672 -35.15869141 25.60839844 C-34.34319824 25.03637695 -33.52770508 24.46435547 -32.6875 23.875 C-31.02207349 22.69019121 -29.35670869 21.50529567 -27.69140625 20.3203125 C-26.88074707 19.74700195 -26.07008789 19.17369141 -25.23486328 18.58300781 C-22.51730525 16.65809561 -19.8179197 14.70920815 -17.125 12.75 C-16.29226563 12.14800781 -15.45953125 11.54601562 -14.6015625 10.92578125 C-12.63391481 9.46924925 -10.69902598 7.99083446 -8.7734375 6.48046875 C-8.22800293 6.05733398 -7.68256836 5.63419922 -7.12060547 5.19824219 C-5.58463986 4.00334517 -4.05766529 2.79691689 -2.53125 1.58984375 C-1.6959375 1.06519531 -0.860625 0.54054687 0 0 Z \",fill:\"#937E54\",transform:\"translate(617,0)\"})),_path496||(_path496=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.495 0.99 0.495 2 1 C2 1.99 2 2.98 2 4 C10.25 5.32 18.5 6.64 27 8 C27.33 6.35 27.66 4.7 28 3 C28.33 3 28.66 3 29 3 C29.38854209 5.28940956 29.7604628 7.58164574 30.125 9.875 C30.33382812 11.15117187 30.54265625 12.42734375 30.7578125 13.7421875 C30.83773437 14.81726563 30.91765625 15.89234375 31 17 C30.34 17.66 29.68 18.32 29 19 C28.38125 18.195625 27.7625 17.39125 27.125 16.5625 C25.25835959 13.96125481 25.25835959 13.96125481 23 13 C23 12.34 23 11.68 23 11 C22.34 11 21.68 11 21 11 C21 11.66 21 12.32 21 13 C19.37509046 13.02698189 17.75005367 13.04638757 16.125 13.0625 C15.22007812 13.07410156 14.31515625 13.08570313 13.3828125 13.09765625 C11 13 11 13 9 12 C9 11.01 9 10.02 9 9 C7.02 9.66 5.04 10.32 3 11 C2.01 7.37 1.02 3.74 0 0 Z \",fill:\"#262C1C\",transform:\"translate(577,341)\"})),_path497||(_path497=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 2 2 2 2 5 C-0.64 5 -3.28 5 -6 5 C-6 6.65 -6 8.3 -6 10 C-7.32 10 -8.64 10 -10 10 C-10.144375 10.61875 -10.28875 11.2375 -10.4375 11.875 C-11 14 -11 14 -12 16 C-13.32 16 -14.64 16 -16 16 C-16.12375 14.329375 -16.12375 14.329375 -16.25 12.625 C-16.57873787 8.94246056 -16.57873787 8.94246056 -19.0625 7.5625 C-19.701875 7.376875 -20.34125 7.19125 -21 7 C-20.01 7 -19.02 7 -18 7 C-18 6.34 -18 5.68 -18 5 C-18.66 4.67 -19.32 4.34 -20 4 C-14.32208915 -1.3439161 -7.4531195 -0.8217542 0 0 Z \",fill:\"#0F3D2B\",transform:\"translate(454,313)\"})),_path498||(_path498=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.99 1.32 1.98 2 3 C3.32 2.67 4.64 2.34 6 2 C6.31453125 2.49371094 6.6290625 2.98742187 6.953125 3.49609375 C7.38109375 4.13675781 7.8090625 4.77742188 8.25 5.4375 C8.66765625 6.07558594 9.0853125 6.71367188 9.515625 7.37109375 C11.30454641 9.33419961 12.45258435 9.46054727 15 10 C18.08588695 12.71851946 20.43903239 15.16853404 22 19 C20.68 18.34 19.36 17.68 18 17 C18 16.34 18 15.68 18 15 C14.99740483 14.66781808 14.99740483 14.66781808 13.3125 16.5 C12.879375 16.995 12.44625 17.49 12 18 C10.33333333 17.33333333 8.66666667 16.66666667 7 16 C6.13375 15.67 5.2675 15.34 4.375 15 C2 14 2 14 -1 12 C-1 11.34 -1 10.68 -1 10 C0.32 10.33 1.64 10.66 3 11 C0.36 8.69 -2.28 6.38 -5 4 C-4.67 3.01 -4.34 2.02 -4 1 C-1.9375 0.3125 -1.9375 0.3125 0 0 Z \",fill:\"#372824\",transform:\"translate(96,106)\"})),_path499||(_path499=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C16.47330772 0.21991066 16.47330772 0.21991066 22.8125 4.55078125 C24 6 24 6 24 10 C16.41 10 8.82 10 1 10 C1.33 7.03 1.66 4.06 2 1 C1.34 0.67 0.68 0.34 0 0 Z \",fill:\"#5D2A2F\",transform:\"translate(432,450)\"})),_path500||(_path500=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.58450505 0.27827785 7.16725737 0.57494531 10.75 0.875 C11.76578125 0.95363281 12.7815625 1.03226562 13.828125 1.11328125 C14.8078125 1.19707031 15.7875 1.28085937 16.796875 1.3671875 C17.69760742 1.44050293 18.59833984 1.51381836 19.52636719 1.58935547 C22.03680142 2.00610936 23.80415406 2.74074957 26 4 C26 6.64 26 9.28 26 12 C25.01 11.67 24.02 11.34 23 11 C21.8125 8.4375 21.8125 8.4375 21 6 C19.88238281 6.52207031 19.88238281 6.52207031 18.7421875 7.0546875 C13.40007027 8.40415761 8.55973991 7.70729356 3.125 7.125 C1.52011719 6.96837891 1.52011719 6.96837891 -0.1171875 6.80859375 C-2.74614275 6.55039279 -5.37335065 6.28054065 -8 6 C-8 4.68 -8 3.36 -8 2 C-5.36 2 -2.72 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#D75147\",transform:\"translate(198,316)\"})),_path501||(_path501=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.94 0 11.88 0 18 0 C15.8147106 5.46322349 14.13924372 9.60484105 9.125 12.875 C6 14 6 14 0 14 C0 9.38 0 4.76 0 0 Z \",fill:\"#CA8365\",transform:\"translate(424,300)\"})),_path502||(_path502=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.14103033 0.57597065 6.69985141 2.85183881 9.9375 5.375 C12.84550446 7.63228791 15.61513512 9.7811448 18.81640625 11.6015625 C21 13 21 13 22 16 C14.88649806 16.66172111 8.66311145 14.31100321 2 12 C1.06414062 11.68804687 0.12828125 11.37609375 -0.8359375 11.0546875 C-1.55007812 10.70664063 -2.26421875 10.35859375 -3 10 C-3.33 9.01 -3.66 8.02 -4 7 C-3.34 6.67 -2.68 6.34 -2 6 C-2 4.68 -2 3.36 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#624132\",transform:\"translate(246,223)\"})),_path503||(_path503=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.81621826 0.22719727 0.81621826 0.22719727 1.64892578 0.45898438 C4.13883818 1.14724424 6.63181483 1.82369611 9.125 2.5 C10.40890625 2.85771484 10.40890625 2.85771484 11.71875 3.22265625 C16.29316199 4.45422871 20.22754377 5.17354386 25 5 C27.0078864 5.64252365 29.00882592 6.30741771 31 7 C32.32 7 33.64 7 35 7 C35 7.66 35 8.32 35 9 C48.39360424 9.78120572 61.7750886 10.26138749 75.1875 10.5625 C77.02800072 10.60586896 78.86849557 10.64948773 80.70898438 10.69335938 C85.13926097 10.79843539 89.56960173 10.90019168 94 11 C94 11.33 94 11.66 94 12 C69.13141673 15.140648 44.12347968 12.9927153 19.6875 8.0625 C17.79825806 7.68327393 17.79825806 7.68327393 15.87084961 7.29638672 C14.67983643 7.04518066 13.48882324 6.79397461 12.26171875 6.53515625 C11.19912842 6.312229 10.13653809 6.08930176 9.04174805 5.85961914 C5.77276892 4.93578292 2.98562522 3.60695654 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#8DA389\",transform:\"translate(230,157)\"})),_path504||(_path504=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0.33 4.62 0.66 7 1 C6.361077 5.22793489 4.90125739 8.65164712 3.0625 12.5 C1.25664033 16.29807342 -0.48461684 20.07610931 -2 24 C-2.99 24 -3.98 24 -5 24 C-4.40662464 19.87641678 -3.01236819 16.90795717 -0.9375 13.3125 C1.26337961 9.8612311 1.26337961 9.8612311 2 6 C-1.34169478 10.8665458 -4.52303815 15.63324933 -7 21 C-7.66 21 -8.32 21 -9 21 C-9.0825 21.70125 -9.165 22.4025 -9.25 23.125 C-10.18009005 26.6903452 -11.76686369 29.09015572 -14 32 C-14.66 32 -15.32 32 -16 32 C-14.58862737 24.53988752 -14.58862737 24.53988752 -12.16015625 22.3125 C-9.26902524 19.21747367 -8.00652802 15.89259986 -6.4375 12 C-2.93453208 3.42510735 -2.93453208 3.42510735 0 0 Z \",fill:\"#895B44\",transform:\"translate(166,520)\"})),_path505||(_path505=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 2.64 0 5.28 0 8 C-8.31523773 12.38439807 -18.52535555 15 -28 15 C-28.33 14.01 -28.66 13.02 -29 12 C-17.26213592 6 -17.26213592 6 -12 6 C-12 5.34 -12 4.68 -12 4 C-10.18821242 3.33139964 -8.37554984 2.66516988 -6.5625 2 C-5.04849609 1.443125 -5.04849609 1.443125 -3.50390625 0.875 C-1 0 -1 0 0 0 Z \",fill:\"#754B3B\",transform:\"translate(146,419)\"})),_path506||(_path506=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.58362647 1.29181324 2.90235038 2.35921116 4 5 C4.36831952 6.63424733 4.67622551 8.28276158 4.9375 9.9375 C5.86297821 15.43854246 7.09821871 20.83028697 8.4140625 26.25 C9 29 9 29 9 32 C9.99 32.33 10.98 32.66 12 33 C12.29003906 34.53720703 12.29003906 34.53720703 12.5859375 36.10546875 C12.84869863 37.46619601 13.11173398 38.82687033 13.375 40.1875 C13.50132812 40.86103516 13.62765625 41.53457031 13.7578125 42.22851562 C14.49905009 46.02735827 15.52220564 49.43291016 17 53 C17.125 55.8125 17.125 55.8125 17 58 C16.01 58 15.02 58 14 58 C12.65316117 53.62904232 11.32493096 49.2526435 10 44.875 C9.6184375 43.6375 9.236875 42.4 8.84375 41.125 C8.4828125 39.92617188 8.121875 38.72734375 7.75 37.4921875 C7.41484375 36.39245605 7.0796875 35.29272461 6.734375 34.15966797 C5.99766312 30.98994552 5.86335071 28.24115033 6 25 C5.34 25 4.68 25 4 25 C3.79503906 23.92878906 3.59007812 22.85757813 3.37890625 21.75390625 C3.10697291 20.35673149 2.83482648 18.95959819 2.5625 17.5625 C2.42779297 16.85544922 2.29308594 16.14839844 2.15429688 15.41992188 C1.71593102 11.91570736 1.71593102 11.91570736 0 9 C-0.07179964 7.48071962 -0.08392007 5.95832518 -0.0625 4.4375 C-0.05347656 3.61121094 -0.04445313 2.78492188 -0.03515625 1.93359375 C-0.02355469 1.29550781 -0.01195312 0.65742187 0 0 Z \",fill:\"#DFB190\",transform:\"translate(368,568)\"})),_path507||(_path507=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0 3.96 0 6 0 C6 0.66 6 1.32 6 2 C5.01 2.66 4.02 3.32 3 4 C2.26656572 7.06556598 2.26656572 7.06556598 2 10 C1.34 10 0.68 10 0 10 C0 10.66 0 11.32 0 12 C1.32 12.33 2.64 12.66 4 13 C2.68 13.33 1.36 13.66 0 14 C0 14.66 0 15.32 0 16 C-5.28 16 -10.56 16 -16 16 C-16 15.34 -16 14.68 -16 14 C-18.64 14 -21.28 14 -24 14 C-24 13.34 -24 12.68 -24 12 C-22.89591797 11.94392578 -22.89591797 11.94392578 -21.76953125 11.88671875 C-14.34465286 11.5251508 -14.34465286 11.5251508 -8 8 C-5.72462308 5.42816686 -5.72462308 5.42816686 -4 3 C-2.68 3.33 -1.36 3.66 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#24050A\",transform:\"translate(400,384)\"})),_path508||(_path508=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.45822468 3.46941546 -0.89131683 6.67395049 -2 10 C-2.66 10 -3.32 10 -4 10 C-4.061875 10.5775 -4.12375 11.155 -4.1875 11.75 C-5.33384174 14.92448483 -7.25956842 16.12848575 -10 18 C-10.66 18 -11.32 18 -12 18 C-12 18.66 -12 19.32 -12 20 C-13.32 20 -14.64 20 -16 20 C-15.67 18.02 -15.34 16.04 -15 14 C-14.34 14 -13.68 14 -13 14 C-13.66 13.67 -14.32 13.34 -15 13 C-15 11.02 -15 9.04 -15 7 C-14.34 6.67 -13.68 6.34 -13 6 C-13 5.34 -13 4.68 -13 4 C-8.79129307 -0.47175112 -5.79503896 -0.392884 0 0 Z \",fill:\"#E2D57B\",transform:\"translate(106,374)\"})),_path509||(_path509=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 2.31 0 4.62 0 7 C-0.66 7 -1.32 7 -2 7 C-2 8.65 -2 10.3 -2 12 C-2.66 12 -3.32 12 -4 12 C-4 12.66 -4 13.32 -4 14 C-3.34 14 -2.68 14 -2 14 C-2 16.31 -2 18.62 -2 21 C-2.66 21.33 -3.32 21.66 -4 22 C-4 19.69 -4 17.38 -4 15 C-7.3 15 -10.6 15 -14 15 C-14 14.67 -14 14.34 -14 14 C-11.36 14 -8.72 14 -6 14 C-6 13.34 -6 12.68 -6 12 C-8.64 12.33 -11.28 12.66 -14 13 C-14.66 10.03 -15.32 7.06 -16 4 C-10.48758213 1.51400763 -6.12892216 0 0 0 Z \",fill:\"#51615B\",transform:\"translate(312,337)\"})),_path510||(_path510=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.95 0 9.9 0 15 0 C15 0.99 15 1.98 15 3 C11.7 3 8.4 3 5 3 C5 3.99 5 4.98 5 6 C7.97 6 10.94 6 14 6 C14 7.32 14 8.64 14 10 C13.34 10 12.68 10 12 10 C11.34 11.98 10.68 13.96 10 16 C6.7 16 3.4 16 0 16 C0 10.72 0 5.44 0 0 Z \",fill:\"#C8BE53\",transform:\"translate(141,269)\"})),_path511||(_path511=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-1.65 2.33 -3.3 2.66 -5 3 C-5 3.66 -5 4.32 -5 5 C-2.69 4.34 -0.38 3.68 2 3 C2 3.66 2 4.32 2 5 C-3.95371712 8.23447132 -10.03657837 10.88175093 -16.375 13.25 C-17.06464844 13.50797363 -17.75429688 13.76594727 -18.46484375 14.03173828 C-25.84105542 16.74368694 -25.84105542 16.74368694 -28 17 C-28.99 16.34 -29.98 15.68 -31 15 C-31 14.01 -31 13.02 -31 12 C-4.77075099 0 -4.77075099 0 0 0 Z \",fill:\"#352524\",transform:\"translate(517,170)\"})),_path512||(_path512=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0 3.96 0 6 0 C5.01 0.495 5.01 0.495 4 1 C4.33 17.83 4.66 34.66 5 52 C3.68 52 2.36 52 1 52 C0.14699877 34.65639784 -0.13235918 17.36348869 0 0 Z \",fill:\"#FB7D6E\",transform:\"translate(324,371)\"})),_path513||(_path513=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.99 1.32 1.98 2 3 C3.96752828 4.06246527 5.96587579 5.07137808 8 6 C8 8.97 8 11.94 8 15 C7.01 15 6.02 15 5 15 C4.67 14.34 4.34 13.68 4 13 C3.67 13.66 3.34 14.32 3 15 C-3.15234375 15.09765625 -3.15234375 15.09765625 -5 15 C-6 14 -6 14 -6.09765625 11.93359375 C-6.04882812 8.46679688 -6.04882812 8.46679688 -6 5 C-9.63 5 -13.26 5 -17 5 C-12.29921814 1.86614542 -5.75628179 -1.04659669 0 0 Z \",fill:\"#311816\",transform:\"translate(374,411)\"})),_path514||(_path514=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.35714041 3.63265166 12.3377758 7.50548231 18.375 11.625 C19.38433594 12.305625 20.39367187 12.98625 21.43359375 13.6875 C22.39136719 14.33976562 23.34914063 14.99203125 24.3359375 15.6640625 C25.20782715 16.25654785 26.0797168 16.8490332 26.97802734 17.45947266 C29 19 29 19 30 21 C19.49090909 16.98181818 19.49090909 16.98181818 18 14 C16.36209288 12.95355934 14.68991979 11.9601817 13 11 C12.113125 10.443125 11.22625 9.88625 10.3125 9.3125 C8.15327235 7.83546483 8.15327235 7.83546483 6 8 C6.01160156 8.6290625 6.02320313 9.258125 6.03515625 9.90625 C6.09286873 15.38069088 5.80228473 20.58457806 5 26 C2.525 25.01 2.525 25.01 0 24 C0 16.08 0 8.16 0 0 Z \",fill:\"#3B2620\",transform:\"translate(0,56)\"})),_path515||(_path515=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 16.5 1 33 1 50 C-0.65 50 -2.3 50 -4 50 C-4.43750671 38.94890469 -3.67703501 28.10918886 -2.5625 17.125 C-2.49501556 16.45039734 -2.42753113 15.77579468 -2.35800171 15.08074951 C-1.1972271 3.59168129 -1.1972271 3.59168129 0 0 Z \",fill:\"#C09276\",transform:\"translate(280,576)\"})),_path516||(_path516=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 3.63 0 7.26 0 11 C-7.78593716 9.38911645 -15.37428218 7.23456312 -23 5 C-23 4.34 -23 3.68 -23 3 C-24.65 3 -26.3 3 -28 3 C-27.67 2.34 -27.34 1.68 -27 1 C-24.18766245 0.8301069 -21.37518151 0.66401768 -18.5625 0.5 C-17.77939453 0.45230469 -16.99628906 0.40460938 -16.18945312 0.35546875 C-10.78341953 0.04401002 -5.41503945 -0.04336368 0 0 Z \",fill:\"#B97C57\",transform:\"translate(626,417)\"})),_path517||(_path517=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3 1.66 3 2.32 3 3 C11.58 3.66 20.16 4.32 29 5 C30 10 30 10 29 12 C7.62450593 11.08300395 7.62450593 11.08300395 0 6 C-0.1875 2.875 -0.1875 2.875 0 0 Z \",fill:\"#6E653A\",transform:\"translate(431,345)\"})),_path518||(_path518=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C3.1161656 3.71429898 3.3124195 7.39161508 3.5625 11.25 C3.64628906 12.51328125 3.73007813 13.7765625 3.81640625 15.078125 C3.87699219 16.04234375 3.93757812 17.0065625 4 18 C5.99886881 18.06725669 8.00099314 18.06302039 10 18 C10.515625 17.484375 11.03125 16.96875 11.5625 16.4375 C12.036875 15.963125 12.51125 15.48875 13 15 C15.6875 15.3125 15.6875 15.3125 18 16 C17.01 17.98 16.02 19.96 15 22 C10.38 21.34 5.76 20.68 1 20 C1.33 20.99 1.66 21.98 2 23 C1.01 23.33 0.02 23.66 -1 24 C-1.04898438 24.78246094 -1.09796875 25.56492187 -1.1484375 26.37109375 C-1.22320312 27.38300781 -1.29796875 28.39492188 -1.375 29.4375 C-1.44460937 30.44683594 -1.51421875 31.45617187 -1.5859375 32.49609375 C-1.72257813 33.32238281 -1.85921875 34.14867187 -2 35 C-2.99 35.495 -2.99 35.495 -4 36 C-4 34.02 -4 32.04 -4 30 C-4.33 30 -4.66 30 -5 30 C-5.32610795 23.15173312 -4.11185667 17.13910694 -2.5 10.5 C-2.26152344 9.48679687 -2.02304688 8.47359375 -1.77734375 7.4296875 C-1.19277966 4.95113574 -0.60018531 2.47480666 0 0 Z \",fill:\"#060403\",transform:\"translate(207,396)\"})),_path519||(_path519=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3.268125 0.598125 3.53625 1.19625 3.8125 1.8125 C4.88022403 4.04267613 4.88022403 4.04267613 6.625 5.5625 C8 7 8 7 8 10 C8.66 10 9.32 10 10 10 C10 11.32 10 12.64 10 14 C10.639375 14.2475 11.27875 14.495 11.9375 14.75 C14 16 14 16 14.75 18.125 C14.87375 19.053125 14.87375 19.053125 15 20 C16.32 19.67 17.64 19.34 19 19 C19 20.32 19 21.64 19 23 C19.66 23.66 20.32 24.32 21 25 C20.67 25.66 20.34 26.32 20 27 C20.66 27 21.32 27 22 27 C22 27.66 22 28.32 22 29 C22.66 29 23.32 29 24 29 C24 29.99 24 30.98 24 32 C25.32 32 26.64 32 28 32 C28 33.32 28 34.64 28 36 C28.639375 36.639375 29.27875 37.27875 29.9375 37.9375 C32.308527 40.308527 32.63641288 41.72771592 33 45 C33.99 45.33 34.98 45.66 36 46 C36 46.66 36 47.32 36 48 C37.32 48 38.64 48 40 48 C40 51.76687864 39.76462683 52.91190305 38 56 C35.58751203 52.83595814 33.3166811 49.59092727 31.0625 46.3125 C27.45399183 41.07737811 23.80021619 35.87597074 20.125 30.6875 C15.54726227 24.22282319 11.0305113 17.71918517 6.56494141 11.17651367 C6.14003418 10.55494385 5.71512695 9.93337402 5.27734375 9.29296875 C4.88401855 8.71724121 4.49069336 8.14151367 4.08544922 7.54833984 C3.16039712 6.22879858 2.18106334 4.9475868 1.19140625 3.67578125 C0 2 0 2 0 0 Z \",fill:\"#1F3730\",transform:\"translate(128,24)\"})),_path520||(_path520=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.65176631 1.58623449 8.36378829 4.1122578 12.375 6.875 C16.1533113 9.46298965 19.89995681 11.98437833 23.9140625 14.1953125 C27 16 27 16 28 18 C27.34 18 26.68 18 26 18 C26 18.66 26 19.32 26 20 C26.99 20.33 27.98 20.66 29 21 C29.33 21.99 29.66 22.98 30 24 C23.82432361 22.78934978 19.73723024 20.90955746 14.75 17.125 C13.8528125 16.47337891 13.8528125 16.47337891 12.9375 15.80859375 C7.87418744 12.07832145 4.26728627 8.99211372 2 3 C1.34 2.67 0.68 2.34 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#55372E\",transform:\"translate(578,482)\"})),_path521||(_path521=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.33 0 0.66 0 1 C-1.63195312 1.16435547 -1.63195312 1.16435547 -3.296875 1.33203125 C-11.19385158 2.16912518 -18.80625078 3.19943771 -26.484375 5.31640625 C-31.44632358 6.66476184 -35.84254336 7.1011266 -41 7 C-41 6.67 -41 6.34 -41 6 C-39.02 6 -37.04 6 -35 6 C-35 5.34 -35 4.68 -35 4 C-42.26 4 -49.52 4 -57 4 C-57 3.34 -57 2.68 -57 2 C-56.08057617 1.97812622 -56.08057617 1.97812622 -55.14257812 1.95581055 C-40.3050517 1.61738862 -40.3050517 1.61738862 -25.6875 -0.6875 C-16.88146531 -2.60145529 -8.78646991 -1.41356403 0 0 Z \",fill:\"#2F3D24\",transform:\"translate(621,401)\"})),_path522||(_path522=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 4.29 1 8.58 1 13 C2.98 12.67 4.96 12.34 7 12 C7.33 13.98 7.66 15.96 8 18 C8.33 18 8.66 18 9 18 C9 20.64 9 23.28 9 26 C7.68 26 6.36 26 5 26 C5 22.04 5 18.08 5 14 C3.68 14 2.36 14 1 14 C1 14.66 1 15.32 1 16 C1.66 16 2.32 16 3 16 C3 16.66 3 17.32 3 18 C-0.3 18 -3.6 18 -7 18 C-7 18.66 -7 19.32 -7 20 C-6.34 20 -5.68 20 -5 20 C-4.34 23.3 -3.68 26.6 -3 30 C-2.34 30 -1.68 30 -1 30 C-1 31.32 -1 32.64 -1 34 C-3 34 -3 34 -5.125 32.375 C-7.47736015 29.39534381 -7.33663062 27.70293685 -7 24 C-7.66 24 -8.32 24 -9 24 C-9 22.02 -9 20.04 -9 18 C-9.66 18 -10.32 18 -11 18 C-11 17.01 -11 16.02 -11 15 C-11.66 15 -12.32 15 -13 15 C-13 14.34 -13 13.68 -13 13 C-8.71 13 -4.42 13 0 13 C0 8.71 0 4.42 0 0 Z \",fill:\"#B2212D\",transform:\"translate(305,372)\"})),_path523||(_path523=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.40728779 1.72361806 3.82182051 3.12593518 4.42382812 6.07910156 C4.6188345 8.59878916 4.70851444 11.09815196 4.75 13.625 C4.77964844 14.49640625 4.80929688 15.3678125 4.83984375 16.265625 C4.93450581 19.17761028 5 22.08646993 5 25 C4.01 25.33 3.02 25.66 2 26 C0.79117904 28.00016466 0.79117904 28.00016466 0 30 C-0.33 30 -0.66 30 -1 30 C-1.05607422 28.87464844 -1.05607422 28.87464844 -1.11328125 27.7265625 C-1.56114543 20.753932 -2.69908195 14.59012941 -5 8 C-5.33 7.01 -5.66 6.02 -6 5 C-4.68 5 -3.36 5 -2 5 C-2 4.34 -2 3.68 -2 3 C-3.98 3 -5.96 3 -8 3 C-8 2.67 -8 2.34 -8 2 C-6.865625 1.855625 -5.73125 1.71125 -4.5625 1.5625 C-1.19222799 1.38828522 -1.19222799 1.38828522 0 0 Z \",fill:\"#090608\",transform:\"translate(219,326)\"})),_path524||(_path524=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.79240663 0.11389875 3.58394835 0.24147687 5.375 0.375 C6.87160156 0.47941406 6.87160156 0.47941406 8.3984375 0.5859375 C11 1 11 1 13 3 C4.42857143 3.14285714 4.42857143 3.14285714 1 2 C1 3.98 1 5.96 1 8 C4.3 8.33 7.6 8.66 11 9 C11 9.99 11 10.98 11 12 C-1.87 12 -14.74 12 -28 12 C-28 10.68 -28 9.36 -28 8 C-23.70834738 7.97108051 -19.41671964 7.95322882 -15.125 7.9375 C-13.29001953 7.92493164 -13.29001953 7.92493164 -11.41796875 7.91210938 C-9.66806641 7.90727539 -9.66806641 7.90727539 -7.8828125 7.90234375 C-6.26463623 7.89448853 -6.26463623 7.89448853 -4.61376953 7.88647461 C-2 8 -2 8 0 9 C0 6.03 0 3.06 0 0 Z \",fill:\"#CB9F88\",transform:\"translate(339,276)\"})),_path525||(_path525=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.27 0 12.54 0 19 0 C19 1.65 19 3.3 19 5 C18.67 3.68 18.34 2.36 18 1 C17.34 1 16.68 1 16 1 C16 6.94 16 12.88 16 19 C13.03 18.67 10.06 18.34 7 18 C6.67 12.39 6.34 6.78 6 1 C4.02 1 2.04 1 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#8FA161\",transform:\"translate(69,270)\"})),_path526||(_path526=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.33 0.33 -0.66 0.66 -1 1 C-0.34 1.33 0.32 1.66 1 2 C-0.3921875 2.6496875 -0.3921875 2.6496875 -1.8125 3.3125 C-4.88742026 4.74037734 -4.88742026 4.74037734 -6.5 6.5 C-8.66926979 8.66926979 -11.24290958 9.7133578 -14 11 C-13.34 11.66 -12.68 12.32 -12 13 C-12.66 13 -13.32 13 -14 13 C-14 13.66 -14 14.32 -14 15 C-14.54269531 15.19335938 -15.08539063 15.38671875 -15.64453125 15.5859375 C-16.71767578 15.97652344 -16.71767578 15.97652344 -17.8125 16.375 C-18.52019531 16.63023437 -19.22789062 16.88546875 -19.95703125 17.1484375 C-22.24773359 18.0265769 -22.24773359 18.0265769 -25 20 C-25.99 19.67 -26.98 19.34 -28 19 C-24.7 17.02 -21.4 15.04 -18 13 C-23.445 15.475 -23.445 15.475 -29 18 C-29.33 17.34 -29.66 16.68 -30 16 C-31.32 16.33 -32.64 16.66 -34 17 C-31.60490662 14.10067643 -29.68754757 13.49831724 -26 13 C-26 12.34 -26 11.68 -26 11 C-25.20335937 10.61328125 -24.40671875 10.2265625 -23.5859375 9.828125 C-16.88836003 6.61577378 -16.88836003 6.61577378 -10.5625 2.75 C-4.392 -1.464 -4.392 -1.464 0 0 Z \",fill:\"#543E36\",transform:\"translate(414,199)\"})),_path527||(_path527=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C5.78125 1.828125 5.78125 1.828125 7.5 4.25 C9.24415291 6.67595814 10.88796635 8.88969994 13.01953125 10.98828125 C15.15520885 13.15765791 16.62427713 15.3294495 18.1875 17.9375 C18.69667969 18.77152344 19.20585937 19.60554687 19.73046875 20.46484375 C21.03467282 23.06923896 21.75621624 25.09849525 22 28 C21.34 28.99 20.68 29.98 20 31 C19.773125 30.21625 19.54625 29.4325 19.3125 28.625 C18.2776743 25.78657233 18.2776743 25.78657233 15.64453125 25.19921875 C12.07066328 23.57857257 11.22097121 21.60549692 9.375 18.1875 C8.80523437 17.14980469 8.23546875 16.11210938 7.6484375 15.04296875 C7.10445313 14.03878906 6.56046875 13.03460937 6 12 C5.43539063 11.08863281 4.87078125 10.17726563 4.2890625 9.23828125 C3 7 3 7 3 5 C2.34 5 1.68 5 1 5 C0.67 3.35 0.34 1.7 0 0 Z \",fill:\"#6B4434\",transform:\"translate(450,518)\"})),_path528||(_path528=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.093125 0.350625 2.18625 0.70125 3.3125 1.0625 C6.90920373 2.33039454 6.90920373 2.33039454 10 1 C12.26171875 1.77734375 12.26171875 1.77734375 14.6875 2.9375 C15.89986328 3.50791016 15.89986328 3.50791016 17.13671875 4.08984375 C17.75160156 4.39019531 18.36648437 4.69054687 19 5 C19 5.66 19 6.32 19 7 C19.9075 6.95875 20.815 6.9175 21.75 6.875 C24.8782046 6.99531556 26.38614006 7.3914708 29 9 C29 9.66 29 10.32 29 11 C30.299375 11.165 31.59875 11.33 32.9375 11.5 C33.66839844 11.5928125 34.39929688 11.685625 35.15234375 11.78125 C36.85541732 12.01959535 36.85541732 12.01959535 38 12 C40 14 40 14 40 17 C40.66 17 41.32 17 42 17 C42.495 18.485 42.495 18.485 43 20 C36.05852423 18.21370601 29.77152471 15.62052469 23.3046875 12.546875 C19.19169944 10.62164654 15.01212472 8.89361242 10.8125 7.16796875 C6.84172835 5.51899552 2.91765315 3.77085837 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#886340\",transform:\"translate(176,216)\"})),_path529||(_path529=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C6.94 2.33 12.88 2.66 19 3 C19 4.65 19 6.3 19 8 C19.66 8.33 20.32 8.66 21 9 C17.70265354 10.09911549 15.27041255 10.1139456 11.80078125 10.09765625 C10.59228516 10.09443359 9.38378906 10.09121094 8.13867188 10.08789062 C6.87603516 10.07951172 5.61339844 10.07113281 4.3125 10.0625 C2.40114258 10.05573242 2.40114258 10.05573242 0.45117188 10.04882812 C-2.69926564 10.03702873 -5.84960949 10.02056597 -9 10 C-9 11.32 -9 12.64 -9 14 C-9.99 14.33 -10.98 14.66 -12 15 C-11.125 9.125 -11.125 9.125 -10 8 C-8.31391034 7.92794489 -6.62499341 7.91613932 -4.9375 7.9375 C-4.01839844 7.94652344 -3.09929687 7.95554687 -2.15234375 7.96484375 C-1.44207031 7.97644531 -0.73179687 7.98804688 0 8 C0 5.36 0 2.72 0 0 Z \",fill:\"#26090C\",transform:\"translate(362,340)\"})),_path530||(_path530=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.375 1.9296875 -0.375 1.9296875 -1 4 C-3 5.125 -3 5.125 -5 6 C-5.33 6.66 -5.66 7.32 -6 8 C-6.66 8 -7.32 8 -8 8 C-8.433125 9.3921875 -8.433125 9.3921875 -8.875 10.8125 C-10 14 -10 14 -12 17 C-14.625 17.1875 -14.625 17.1875 -17 17 C-17.75995175 4.5199035 -17.75995175 4.5199035 -15.25 -0.5 C-10.0726737 -2.88953522 -5.38000532 -1.34714647 0 0 Z \",fill:\"#110304\",transform:\"translate(185,322)\"})),_path531||(_path531=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 1.65 1 3.3 1 5 C6.61 5.33 12.22 5.66 18 6 C18 7.32 18 8.64 18 10 C16.68 10 15.36 10 14 10 C14 10.66 14 11.32 14 12 C9.0974742 14.4512629 2.34531379 13.60430063 -3 13 C-6.22377795 11.48132322 -8.6643123 9.69387622 -11 7 C-11 6.67 -11 6.34 -11 6 C-7.37 6 -3.74 6 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#FA6663\",transform:\"translate(290,356)\"})),_path532||(_path532=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C8.91 0 17.82 0 27 0 C26.67 2.31 26.34 4.62 26 7 C25.67 6.01 25.34 5.02 25 4 C24.01 4.33 23.02 4.66 22 5 C22.66 5.66 23.32 6.32 24 7 C16.08 7 8.16 7 0 7 C0 4.69 0 2.38 0 0 Z \",fill:\"#B98058\",transform:\"translate(272,310)\"})),_path533||(_path533=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C19.14 0 38.28 0 58 0 C58 0.99 58 1.98 58 3 C57.01 3 56.02 3 55 3 C53.66018514 3.3062434 52.32488113 3.63451555 51 4 C51 3.34 51 2.68 51 2 C50.34 2.66 49.68 3.32 49 4 C46.03125 4.23046875 46.03125 4.23046875 42.5 4.1875 C41.3346875 4.18105469 40.169375 4.17460937 38.96875 4.16796875 C36 4 36 4 34 3 C31.44637396 2.91341431 28.9204558 2.88437484 26.3671875 2.90234375 C25.61535187 2.9037587 24.86351624 2.90517365 24.08889771 2.90663147 C21.6842249 2.91223535 19.27964473 2.92478843 16.875 2.9375 C15.24609509 2.9425145 13.61718873 2.9470775 11.98828125 2.95117188 C7.99215173 2.96220603 3.99609158 2.97947321 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#D5C7AF\",transform:\"translate(286,246)\"})),_path534||(_path534=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 1.65 2 3.3 2 5 C2.61875 4.649375 3.2375 4.29875 3.875 3.9375 C4.57625 3.628125 5.2775 3.31875 6 3 C6.66 3.33 7.32 3.66 8 4 C8 4.66 8 5.32 8 6 C9.093125 6 10.18625 6 11.3125 6 C14.875 6 18.4375 6 22 6 C21.67 7.32 21.34 8.64 21 10 C15.375 10.25 15.375 10.25 12 8 C11.67 8.99 11.34 9.98 11 11 C10.67 10.34 10.34 9.68 10 9 C8.68 9 7.36 9 6 9 C6 8.34 6 7.68 6 7 C4.35 7.33 2.7 7.66 1 8 C1.5775 8.32613281 2.155 8.65226563 2.75 8.98828125 C3.4925 9.42527344 4.235 9.86226562 5 10.3125 C5.7425 10.74175781 6.485 11.17101562 7.25 11.61328125 C7.8275 12.07089844 8.405 12.52851563 9 13 C9 13.99 9 14.98 9 16 C8.01 16 7.02 16 6 16 C5.34 15.34 4.68 14.68 4 14 C4.33 14.763125 4.66 15.52625 5 16.3125 C6 19 6 19 6 22 C5.34 22 4.68 22 4 22 C2.5 19.5 2.5 19.5 1 17 C0.34 17 -0.32 17 -1 17 C-1 19.97 -1 22.94 -1 26 C-0.01 26.33 0.98 26.66 2 27 C0.68 27.33 -0.64 27.66 -2 28 C-2 27.34 -2 26.68 -2 26 C-3.32 26 -4.64 26 -6 26 C-5.67 25.34 -5.34 24.68 -5 24 C-4.34 24.33 -3.68 24.66 -3 25 C-3.33 21.7 -3.66 18.4 -4 15 C-2.68 15.33 -1.36 15.66 0 16 C-0.33 14.68 -0.66 13.36 -1 12 C-1.99 12.33 -2.98 12.66 -4 13 C-4 12.01 -4 11.02 -4 10 C-3.01 10 -2.02 10 -1 10 C-1.33 8.68 -1.66 7.36 -2 6 C-1.34 5.67 -0.68 5.34 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#794A37\",transform:\"translate(62,232)\"})),_path535||(_path535=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-2.1533268 4.3066536 -8.63348096 6.4121749 -13 8 C-13 8.66 -13 9.32 -13 10 C-17.38461538 13 -17.38461538 13 -20 13 C-20 13.66 -20 14.32 -20 15 C-20.99 15 -21.98 15 -23 15 C-23 15.66 -23 16.32 -23 17 C-24.41328129 17.81837442 -25.83078346 18.62946219 -27.25 19.4375 C-28.43335938 20.11619141 -28.43335938 20.11619141 -29.640625 20.80859375 C-31.78833468 21.89311602 -33.65205061 22.53148716 -36 23 C-34.24591769 19.0240801 -32.09756785 17.27953775 -28.5 15.0625 C-24.39665321 12.50534186 -23.08718777 10.37315533 -21 6 C-17.8125 4.625 -17.8125 4.625 -15 4 C-15 3.34 -15 2.68 -15 2 C-10.13948404 -0.59227518 -5.34728867 -0.18689553 0 0 Z \",fill:\"#52342A\",transform:\"translate(45,515)\"})),_path536||(_path536=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.9609375 -0.35644531 1.9609375 -0.35644531 4.375 -0.328125 C5.27009277 -0.32361328 6.16518555 -0.31910156 7.08740234 -0.31445312 C8.52913818 -0.28254883 8.52913818 -0.28254883 10 -0.25 C11.46687256 -0.23356445 11.46687256 -0.23356445 12.96337891 -0.21679688 C21.99033932 -0.08221895 30.99479796 0.37741813 40 1 C40 1.66 40 2.32 40 3 C38.35 3 36.7 3 35 3 C34.67 3.66 34.34 4.32 34 5 C34 4.34 34 3.68 34 3 C33.34 3 32.68 3 32 3 C32 3.99 32 4.98 32 6 C31.34 6 30.68 6 30 6 C30 5.01 30 4.02 30 3 C28.02 3 26.04 3 24 3 C24 4.32 24 5.64 24 7 C24.66 7.33 25.32 7.66 26 8 C23.03 8 20.06 8 17 8 C17.66 7.67 18.32 7.34 19 7 C18.34 6.01 17.68 5.02 17 4 C13.91634129 3.7497843 13.91634129 3.7497843 11 4 C10.67 4.66 10.34 5.32 10 6 C11.65 6.33 13.3 6.66 15 7 C15 7.33 15 7.66 15 8 C13.02 8 11.04 8 9 8 C8.67 7.34 8.34 6.68 8 6 C7.67 6.99 7.34 7.98 7 9 C4 5.25 4 5.25 4 3 C2.02 3 0.04 3 -2 3 C-1.34 2.01 -0.68 1.02 0 0 Z \",fill:\"#C49E7E\",transform:\"translate(310,289)\"})),_path537||(_path537=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.27875 0.28875 2.5575 0.5775 3.875 0.875 C4.95394531 1.11863281 4.95394531 1.11863281 6.0546875 1.3671875 C8 2 8 2 10 4 C11.93125966 3.6425235 11.93125966 3.6425235 14 3 C19.69230769 3 19.69230769 3 22 4 C23.25 6.5625 23.25 6.5625 24 9 C23.34 9 22.68 9 22 9 C22 10.65 22 12.3 22 14 C20.68 14.33 19.36 14.66 18 15 C17.34 12.69 16.68 10.38 16 8 C12.70924004 8.37904208 12.70924004 8.37904208 10 10 C9.01 10 8.02 10 7 10 C6.67 10.99 6.34 11.98 6 13 C5.34 13 4.68 13 4 13 C3.67 11.35 3.34 9.7 3 8 C2.01 8.33 1.02 8.66 0 9 C0 6.03 0 3.06 0 0 Z \",fill:\"#8A4D3D\",transform:\"translate(0,229)\"})),_path538||(_path538=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1 2 1 2 0.1796875 4.46875 C-2.67291568 11.09635499 -5.68990263 17.58886404 -9 24 C-9.66849127 25.33241947 -10.33576088 26.66545565 -11 28 C-11.66 28 -12.32 28 -13 28 C-13.1546875 28.9590625 -13.1546875 28.9590625 -13.3125 29.9375 C-14.23903073 34.06477326 -15.61660629 38.00642949 -17 42 C-17.33 42 -17.66 42 -18 42 C-18.33 40.35 -18.66 38.7 -19 37 C-20.65 38.32 -22.3 39.64 -24 41 C-22.94851925 38.81615536 -21.84330831 36.74793076 -20.5625 34.6875 C-18.73359212 31.54177845 -17.38496619 28.36348933 -16 25 C-15.34 25 -14.68 25 -14 25 C-13.62875 23.4840625 -13.62875 23.4840625 -13.25 21.9375 C-12.0926612 17.85374737 -10.19032454 14.62772502 -8 11 C-7.3197633 9.67353844 -6.64507739 8.34391123 -6 7 C-5.34 7 -4.68 7 -4 7 C-3.71125 6.21625 -3.4225 5.4325 -3.125 4.625 C-2 2 -2 2 0 0 Z \",fill:\"#4D3026\",transform:\"translate(139,548)\"})),_path539||(_path539=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.50482099 -0.12509271 6.50482099 -0.12509271 8.97924805 0.5 C11.10549065 1.02610183 12.89619775 1.09932696 15.08203125 1.0625 C15.84966797 1.05476563 16.61730469 1.04703125 17.40820312 1.0390625 C18.99935206 1.01321118 20.59049796 0.98717233 22.18164062 0.9609375 C26.91067931 0.91352859 31.33601623 1.2029507 36 2 C36 3.98 36 5.96 36 8 C34.83984375 7.855625 33.6796875 7.71125 32.484375 7.5625 C22.02444576 6.2845781 22.02444576 6.2845781 11.5 6.0625 C5.9137315 6.19513487 1.20997428 4.93645062 -4 3 C-2.68 2.67 -1.36 2.34 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#CB8766\",transform:\"translate(384,285)\"})),_path540||(_path540=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C-3.42707395 7.39619429 -11.26884889 11.70030363 -19.0625 14.625 C-22.46766071 16.21890501 -23.45207844 17.63099425 -25 21 C-17.63144809 20.75021858 -12.44752799 18.56538489 -5.91796875 15.1796875 C-2.77765389 13.91010907 -2.07125619 14.03056386 1 15 C-1.56126064 16.294174 -4.12393358 17.58540784 -6.6875 18.875 C-7.40873047 19.23980469 -8.12996094 19.60460937 -8.87304688 19.98046875 C-20.41512275 25.77785846 -20.41512275 25.77785846 -25 25 C-26.80078125 23.03125 -26.80078125 23.03125 -28.3125 20.5 C-28.82425781 19.6646875 -29.33601563 18.829375 -29.86328125 17.96875 C-30.23839844 17.3190625 -30.61351562 16.669375 -31 16 C-29.85144531 15.5153125 -28.70289063 15.030625 -27.51953125 14.53125 C-18.66898431 10.73174383 -10.42256611 6.7254261 -2.40625 1.37109375 C-1.6121875 0.91863281 -0.818125 0.46617187 0 0 Z \",fill:\"#736053\",transform:\"translate(365,211)\"})),_path541||(_path541=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0 3.96 0 6 0 C6.75 1.6875 6.75 1.6875 7 4 C6.3503125 4.680625 5.700625 5.36125 5.03125 6.0625 C2.1880025 10.17427331 2.5502695 13.44598954 2.75 18.3125 C2.76804688 19.14845703 2.78609375 19.98441406 2.8046875 20.84570312 C2.85158874 22.89763228 2.92332589 24.94896756 3 27 C3.33 26.67 3.66 26.34 4 26 C6.66666667 26 9.33333333 26 12 26 C12.33 25.01 12.66 24.02 13 23 C15 22.375 15 22.375 17 22 C17.33 21.67 17.66 21.34 18 21 C17.34 20.67 16.68 20.34 16 20 C16 19.34 16 18.68 16 18 C18.25 17.75 18.25 17.75 21 18 C23.1875 19.875 23.1875 19.875 25 22 C25.66 22.66 26.32 23.32 27 24 C26.3709375 24.10957031 25.741875 24.21914062 25.09375 24.33203125 C20.882953 25.11204334 16.9054948 25.92720517 12.9375 27.5625 C9 29 9 29 0 30 C0 20.1 0 10.2 0 0 Z \",fill:\"#6F9885\",transform:\"translate(188,152)\"})),_path542||(_path542=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0.33 4.62 0.66 7 1 C7.268125 1.99 7.53625 2.98 7.8125 4 C8.976839 8.09612784 10.46711578 12.02843633 12 16 C8.7 15.67 5.4 15.34 2 15 C1.67 14.01 1.34 13.02 1 12 C0.34 12 -0.32 12 -1 12 C-1.33 10.02 -1.66 8.04 -2 6 C-2.99 6.495 -2.99 6.495 -4 7 C-5.875 7.1328125 -5.875 7.1328125 -8 7.125 C-9.051875 7.12886719 -9.051875 7.12886719 -10.125 7.1328125 C-12 7 -12 7 -14 6 C-14 5.34 -14 4.68 -14 4 C-9.38 3.67 -4.76 3.34 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#FB7B72\",transform:\"translate(327,448)\"})),_path543||(_path543=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.61085234 0.57329946 15.05612396 1.56481805 22.5625 2.9375 C23.54541016 3.10701172 24.52832031 3.27652344 25.54101562 3.45117188 C26.94577148 3.70543945 26.94577148 3.70543945 28.37890625 3.96484375 C29.64069702 4.19095337 29.64069702 4.19095337 30.92797852 4.42163086 C33 5 33 5 35 7 C35.495 10.96 35.495 10.96 36 15 C27.585 13.515 27.585 13.515 19 12 C19 10.02 19 8.04 19 6 C16.66660783 3.66660783 11.09094512 3.73137587 7.81445312 3.19335938 C2.21328125 2.21328125 2.21328125 2.21328125 0 0 Z \",fill:\"#0D4F32\",transform:\"translate(473,378)\"})),_path544||(_path544=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.28241641 1.46015291 -0.57626614 2.91809793 -0.875 4.375 C-1.03742188 5.18710937 -1.19984375 5.99921875 -1.3671875 6.8359375 C-2 9 -2 9 -4 11 C-4 10.34 -4 9.68 -4 9 C-11.92 9 -19.84 9 -28 9 C-23.65622843 4.65622843 -14.76966899 5.10996204 -8.8515625 4.875 C-6.56365311 4.875 -4.28577603 4.90519823 -2 5 C-2 4.34 -2 3.68 -2 3 C-2.76441406 3.144375 -3.52882813 3.28875 -4.31640625 3.4375 C-13.00440542 4.94300166 -21.21468438 5.21872155 -30 5 C-27.25940326 2.25940326 -24.30759357 2.03958244 -20.625 1.375 C-19.9134375 1.24311279 -19.201875 1.11122559 -18.46875 0.9753418 C-12.29022331 -0.09524297 -6.26592247 -0.32041649 0 0 Z \",fill:\"#010305\",transform:\"translate(98,352)\"})),_path545||(_path545=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 3 0 3 -1.35546875 4.6484375 C-2.26232422 5.50308594 -2.26232422 5.50308594 -3.1875 6.375 C-5.42454541 8.48677087 -7.44061889 10.51970433 -9.4375 12.875 C-12.15249252 15.12645721 -12.85087738 15.29244961 -16.1875 15.5625 C-17.445625 15.706875 -18.70375 15.85125 -20 16 C-20.70151152 17.3153341 -21.36340181 18.65205157 -22 20 C-23.98828125 21.7109375 -23.98828125 21.7109375 -26.3125 23.375 C-30.19086577 26.27126347 -33.08769951 29.14824774 -36 33 C-36.99 31.68 -37.98 30.36 -39 29 C-35.05549939 24.83338188 -30.7916618 21.41305691 -26.1875 18 C-25.51396484 17.49210937 -24.84042969 16.98421875 -24.14648438 16.4609375 C-11.47125401 7 -11.47125401 7 -8 7 C-7.690625 6.1028125 -7.690625 6.1028125 -7.375 5.1875 C-5.49073918 2.18981233 -3.18867916 1.38638224 0 0 Z \",fill:\"#4C3329\",transform:\"translate(429,167)\"})),_path546||(_path546=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.59425781 0.13277344 1.18851563 0.26554687 1.80078125 0.40234375 C15.17916954 3.25279351 28.38385348 3.12324878 42 3 C41 6 41 6 38.359375 7.69140625 C28.02415454 11.71733515 14.42778103 6.98417693 3.99853516 4.47119141 C0.02176389 3.53359447 -3.98932327 2.77626001 -8 2 C-8 1.67 -8 1.34 -8 1 C-5.36 1 -2.72 1 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#951E2B\",transform:\"translate(208,485)\"})),_path547||(_path547=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 3.63 0 7.26 0 11 C-3.96 11 -7.92 11 -12 11 C-12 9.68 -12 8.36 -12 7 C-12.99 6.67 -13.98 6.34 -15 6 C-15 5.01 -15 4.02 -15 3 C-15.99 3.33 -16.98 3.66 -18 4 C-18.33 3.67 -18.66 3.34 -19 3 C-21.01964199 2.92755947 -23.04167124 2.91622812 -25.0625 2.9375 C-26.16722656 2.94652344 -27.27195312 2.95554687 -28.41015625 2.96484375 C-29.26480469 2.97644531 -30.11945312 2.98804688 -31 3 C-31 2.67 -31 2.34 -31 2 C-20.57904782 0.46629876 -10.53922138 -0.27256607 0 0 Z \",fill:\"#E0E4C7\",transform:\"translate(595,376)\"})),_path548||(_path548=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.66 2.97 2.32 5.94 3 9 C3.33 8.34 3.66 7.68 4 7 C8.62 7 13.24 7 18 7 C18.33 7.66 18.66 8.32 19 9 C19.928125 8.319375 20.85625 7.63875 21.8125 6.9375 C22.864375 6.298125 23.91625 5.65875 25 5 C25.99 5.33 26.98 5.66 28 6 C28 6.66 28 7.32 28 8 C30.64 8 33.28 8 36 8 C36 8.33 36 8.66 36 9 C34.78763672 9.07347656 34.78763672 9.07347656 33.55078125 9.1484375 C32.48214844 9.22320312 31.41351563 9.29796875 30.3125 9.375 C29.25675781 9.44460938 28.20101563 9.51421875 27.11328125 9.5859375 C24.06349549 9.99155518 21.74451665 10.62526914 19 12 C18.67 12.66 18.34 13.32 18 14 C12.39 14 6.78 14 1 14 C0.01 10.37 -0.98 6.74 -2 3 C-1.34 3 -0.68 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#C67F5C\",transform:\"translate(344,465)\"})),_path549||(_path549=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.48570313 0.13714258 8.3608018 2.43801103 12.23046875 6.01171875 C14.74249574 8.83428329 15.83279673 11.42543998 17 15 C14.50949831 13.80455919 12.24713895 12.51934914 9.91015625 11.02734375 C5.73738877 8.64738896 1.72158536 7.93129808 -3 7.3125 C-4.27278809 7.13207153 -4.27278809 7.13207153 -5.57128906 6.94799805 C-15.9962758 5.57733334 -26.49783949 5.25869503 -37 5 C-37 4.67 -37 4.34 -37 4 C-29.61343587 3.00520292 -22.38444355 2.88163718 -14.9375 2.9375 C-13.78572266 2.94201172 -12.63394531 2.94652344 -11.44726562 2.95117188 C-8.63145482 2.96285574 -5.81575602 2.97923719 -3 3 C-3 3.66 -3 4.32 -3 5 C-1.02 5 0.96 5 3 5 C2.2236068 1.9254644 2.2236068 1.9254644 0 0 Z \",fill:\"#58262F\",transform:\"translate(246,455)\"})),_path550||(_path550=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.33 0 0.66 0 1 C-17.48487165 3.53058834 -35.06721362 3.40120907 -52.69293213 3.54260254 C-59.12239813 3.59520389 -65.55172324 3.66022987 -71.98101425 3.73081779 C-74.20153253 3.75333553 -76.42203346 3.76979167 -78.64260864 3.78553772 C-85.49372167 3.84673604 -92.20674749 4.06369905 -99 5 C-99 4.34 -99 3.68 -99 3 C-95.55042712 1.85014237 -92.74733323 1.79891188 -89.10791016 1.70288086 C-88.06057457 1.67340111 -88.06057457 1.67340111 -86.99208069 1.64332581 C-84.67450533 1.57930447 -82.35681775 1.52195207 -80.0390625 1.46484375 C-78.41213135 1.42175384 -76.78520882 1.37833716 -75.15829468 1.33460999 C-71.73352723 1.24355156 -68.30869795 1.15563819 -64.88378906 1.07006836 C-60.55695396 0.96183981 -56.23031824 0.84725178 -51.9037056 0.73050499 C-34.60155492 0.26539592 -17.31010657 -0.1763139 0 0 Z \",fill:\"#B29458\",transform:\"translate(562,258)\"})),_path551||(_path551=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C2.3125 2.4375 2.3125 2.4375 1 5 C-1.625 5.8125 -1.625 5.8125 -4 6 C-4.33 6.99 -4.66 7.98 -5 9 C-6.8125 10.31640625 -6.8125 10.31640625 -9 11.5625 C-12.08502827 13.21374548 -12.08502827 13.21374548 -14 16 C-15.75687802 16.99024034 -17.51614234 17.97805252 -19.30859375 18.90234375 C-21.31766868 20.04751017 -21.31766868 20.04751017 -23 23 C-23.99 23 -24.98 23 -26 23 C-26 23.99 -26 24.98 -26 26 C-29.28194629 28.1879642 -30.22475937 28.18876203 -34 28 C-34.99 28 -35.98 28 -37 28 C-29.82498289 21.77333297 -22.5203536 15.7440454 -15 9.9375 C-14.28271729 9.37780518 -13.56543457 8.81811035 -12.82641602 8.24145508 C-9.30754893 5.548415 -6.21138662 3.49411327 -2 2 C-1.34 1.34 -0.68 0.68 0 0 Z \",fill:\"#311914\",transform:\"translate(492,98)\"})),_path552||(_path552=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.38476166 0.56306494 7.8385718 1.65283173 11.80859375 3.58203125 C12.88560547 4.10216797 13.96261719 4.62230469 15.07226562 5.15820312 C16.18279297 5.70412109 17.29332031 6.25003906 18.4375 6.8125 C19.54416016 7.34681641 20.65082031 7.88113281 21.79101562 8.43164062 C27.30871631 11.11298591 32.72569634 13.86577351 38 17 C38 18.65 38 20.3 38 22 C33.91611074 20.74589227 30.36130947 19.23581166 26.6640625 17.1015625 C25.68179688 16.53953125 24.69953125 15.9775 23.6875 15.3984375 C22.1715625 14.52058594 22.1715625 14.52058594 20.625 13.625 C18.61827802 12.46945829 16.61048488 11.31577454 14.6015625 10.1640625 C13.17312012 9.34276855 13.17312012 9.34276855 11.71582031 8.50488281 C9.28996349 7.16067376 6.84607032 5.94960763 4.3359375 4.7734375 C1 3 1 3 0 0 Z \",fill:\"#7F543E\",transform:\"translate(588,464)\"})),_path553||(_path553=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.65484375 0.14953125 1.3096875 0.2990625 1.984375 0.453125 C4.61824351 0.93076955 6.68030306 1.01927136 9.328125 0.921875 C26.2285143 0.30625827 26.2285143 0.30625827 33 6 C33 6.33 33 6.66 33 7 C21.78 7.33 10.56 7.66 -1 8 C-1 1 -1 1 0 0 Z \",fill:\"#2C251E\",transform:\"translate(338,397)\"})),_path554||(_path554=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0 5.28 0 8 0 C8 1.65 8 3.3 8 5 C7.01 4.67 6.02 4.34 5 4 C5 3.34 5 2.68 5 2 C2.40313516 2.95521032 2.40313516 2.95521032 0 5 C-0.54462351 7.75320725 -0.78933956 9.9314081 -0.8125 12.6875 C-0.83763672 13.38939453 -0.86277344 14.09128906 -0.88867188 14.81445312 C-0.94744448 16.54236781 -0.9766097 18.2712443 -1 20 C-1.66 20 -2.32 20 -3 20 C-3 16.7 -3 13.4 -3 10 C-3.66 10 -4.32 10 -5 10 C-5 9.34 -5 8.68 -5 8 C-16.385 7.505 -16.385 7.505 -28 7 C-28.33 5.68 -28.66 4.36 -29 3 C-25.95927147 1.98642382 -23.92472341 1.8845432 -20.74609375 1.90234375 C-19.72708984 1.90556641 -18.70808594 1.90878906 -17.65820312 1.91210938 C-16.59537109 1.92048828 -15.53253906 1.92886719 -14.4375 1.9375 C-13.37080078 1.94201172 -12.30410156 1.94652344 -11.20507812 1.95117188 C-8.47000589 1.96329696 -5.73503089 1.98105329 -3 2 C-2.34 2 -1.68 2 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#360B0D\",transform:\"translate(301,316)\"})),_path555||(_path555=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.28 0 10.56 0 16 0 C16 0.99 16 1.98 16 3 C16.66 3 17.32 3 18 3 C18 2.01 18 1.02 18 0 C18.66 0 19.32 0 20 0 C20 0.66 20 1.32 20 2 C20.69867188 1.91621094 21.39734375 1.83242188 22.1171875 1.74609375 C23.02726562 1.64425781 23.93734375 1.54242188 24.875 1.4375 C25.77992188 1.33308594 26.68484375 1.22867187 27.6171875 1.12109375 C30 1 30 1 32 2 C32 1.34 32 0.68 32 0 C35.96 0 39.92 0 44 0 C44 0.99 44 1.98 44 3 C44.66 3 45.32 3 46 3 C46 2.01 46 1.02 46 0 C47.65 0 49.3 0 51 0 C51 1.32 51 2.64 51 4 C50.34 4 49.68 4 49 4 C48.67 4.66 48.34 5.32 48 6 C48 5.34 48 4.68 48 4 C47.42814972 4.00222061 46.85629944 4.00444122 46.26712036 4.00672913 C40.33026757 4.02880483 34.39342638 4.0439162 28.45654297 4.05493164 C26.23909024 4.05996909 24.02164084 4.06679922 21.80419922 4.07543945 C18.62206195 4.08753072 15.43996849 4.0932341 12.2578125 4.09765625 C11.26194122 4.10281754 10.26606995 4.10797882 9.24002075 4.11329651 C7.85881546 4.11340981 7.85881546 4.11340981 6.44970703 4.11352539 C5.6369632 4.115746 4.82421936 4.11796661 3.98684692 4.12025452 C2 4 2 4 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#584635\",transform:\"translate(289,271)\"})),_path556||(_path556=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 4.62 2 9.24 2 14 C-1.63 14 -5.26 14 -9 14 C-7.68 14.66 -6.36 15.32 -5 16 C-6.65 16.33 -8.3 16.66 -10 17 C-8.35 17.33 -6.7 17.66 -5 18 C-5 18.33 -5 18.66 -5 19 C-12.51806849 19.44032071 -18.84224277 18.28612778 -26 16 C-26 15.67 -26 15.34 -26 15 C-22.7 14.67 -19.4 14.34 -16 14 C-16 13.34 -16 12.68 -16 12 C-14.02 12 -12.04 12 -10 12 C-9.773125 11.4225 -9.54625 10.845 -9.3125 10.25 C-7.66511725 7.42591529 -5.56545162 6.0023037 -3 4 C-2.443125 3.2575 -1.88625 2.515 -1.3125 1.75 C-0.879375 1.1725 -0.44625 0.595 0 0 Z \",fill:\"#64483C\",transform:\"translate(412,391)\"})),_path557||(_path557=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.475 0.99 2.475 0.99 5 2 C4.67 3.98 4.34 5.96 4 8 C3.34 7.67 2.68 7.34 2 7 C3.86566488 10.62793998 3.86566488 10.62793998 7 13 C7 17.95 7 22.9 7 28 C4.36 28 1.72 28 -1 28 C-1 27.67 -1 27.34 -1 27 C0.98 27 2.96 27 5 27 C4.67 24.69 4.34 22.38 4 20 C4.66 20 5.32 20 6 20 C5.34 19.01 4.68 18.02 4 17 C0.535 19.475 0.535 19.475 -3 22 C-4 21 -4 21 -4.1328125 18.92578125 C-4.11860085 14.17198551 -3.98422575 9.67507233 -3 5 C-3.66 5 -4.32 5 -5 5 C-5 4.34 -5 3.68 -5 3 C-3.02 3 -1.04 3 1 3 C0.67 2.01 0.34 1.02 0 0 Z \",fill:\"#190D11\",transform:\"translate(277,365)\"})),_path558||(_path558=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.3 0 6.6 0 10 0 C10 1.32 10 2.64 10 4 C9.34 4 8.68 4 8 4 C7.896875 4.78375 7.79375 5.5675 7.6875 6.375 C7 9 7 9 4 11 C4 11.99 4 12.98 4 14 C-1.19209404 14.21192221 -5.126739 13.5912689 -10 12 C-9.04578192 10.85073734 -8.08647955 9.70569459 -7.125 8.5625 C-6.32449219 7.60537109 -6.32449219 7.60537109 -5.5078125 6.62890625 C-4 5 -4 5 -2 4 C-1.34 4.33 -0.68 4.66 0 5 C0 4.34 0 3.68 0 3 C-1.32 2.67 -2.64 2.34 -4 2 C-2.68 2 -1.36 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#CBD9BB\",transform:\"translate(104,358)\"})),_path559||(_path559=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.3125 -0.3125 2.3125 -0.3125 5 0 C6.81883009 2.3832946 8 3.95818337 8 7 C8.66 7 9.32 7 10 7 C10.556875 8.07636719 11.11375 9.15273438 11.6875 10.26171875 C15.97674428 18.48844389 20.39544271 26.49460669 25.46875 34.265625 C26.95977126 36.92816297 27.60519305 38.99508047 28 42 C27.01 42.495 27.01 42.495 26 43 C25.5875 41.9275 25.175 40.855 24.75 39.75 C23.33922167 36.43600185 21.63977672 34.47479068 19 32 C16.02274043 27.8776406 15.07904457 23.8972023 14 19 C13.401875 18.93167969 12.80375 18.86335937 12.1875 18.79296875 C9.14091417 17.68858139 8.54321581 16.1179657 7 13.3125 C5.2977979 10.29260338 3.61285773 7.34080377 1.625 4.5 C0 2 0 2 0 0 Z \",fill:\"#704B39\",transform:\"translate(432,518)\"})),_path560||(_path560=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.85701941 0.04434587 9.71276258 0.11437787 14.5690918 0.20751953 C16.21872766 0.23562456 17.86849558 0.25689091 19.51831055 0.27099609 C21.89960825 0.29257233 24.27933588 0.33929245 26.66015625 0.390625 C27.38960953 0.39185364 28.11906281 0.39308228 28.87062073 0.39434814 C34.27552749 0.54655853 37.48611791 2.02700136 42 5 C42 5.66 42 6.32 42 7 C40.99316162 6.83628906 39.98632324 6.67257812 38.94897461 6.50390625 C35.17368322 6.02216273 31.61845938 5.90108041 27.81640625 5.9375 C27.15720688 5.94128662 26.49800751 5.94507324 25.8188324 5.94897461 C23.0336812 5.96512531 20.24868457 5.99329539 17.46362305 6.02050781 C2.96111136 6.14970613 2.96111136 6.14970613 -4 5 C-4 4.67 -4 4.34 -4 4 C1.28 4 6.56 4 12 4 C12 3.34 12 2.68 12 2 C8.04 2 4.08 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#934348\",transform:\"translate(222,478)\"})),_path561||(_path561=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C10.90114031 1.90769955 20.70765849 7.82037294 30.34960938 12.98974609 C35.80657059 15.90579693 41.3066569 18.57606718 47 21 C43.29218328 22.23593891 42.32489747 21.5678132 38.8125 20.0625 C37.91144531 19.68222656 37.01039063 19.30195313 36.08203125 18.91015625 C35.39496094 18.60980469 34.70789063 18.30945313 34 18 C34 18.66 34 19.32 34 20 C35.32 20.66 36.64 21.32 38 22 C35 22 35 22 32.625 20.5625 C29.95611717 18.97387927 28.01867393 18.54181327 25 18 C22.6875 16.9375 22.6875 16.9375 21 16 C21.33 15.34 21.66 14.68 22 14 C21.24074219 13.60167969 20.48148437 13.20335937 19.69921875 12.79296875 C18.70535156 12.26316406 17.71148437 11.73335938 16.6875 11.1875 C15.70136719 10.66542969 14.71523438 10.14335937 13.69921875 9.60546875 C11.34121055 8.20294868 9.88512334 6.92701497 8 5 C5.96767758 3.80400932 5.96767758 3.80400932 3.8125 2.8125 C3.09707031 2.46832031 2.38164062 2.12414062 1.64453125 1.76953125 C1.10183594 1.51558594 0.55914062 1.26164062 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#5A3D2F\",transform:\"translate(490,422)\"})),_path562||(_path562=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 1.32 0.66 2.64 1 4 C10.24 4 19.48 4 29 4 C29.66 5.32 30.32 6.64 31 8 C17.14 8 3.28 8 -11 8 C-11 7.67 -11 7.34 -11 7 C-13.97 6.505 -13.97 6.505 -17 6 C-17 5.67 -17 5.34 -17 5 C-11.72 5 -6.44 5 -1 5 C-0.67 3.35 -0.34 1.7 0 0 Z \",fill:\"#030202\",transform:\"translate(247,360)\"})),_path563||(_path563=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.27 0 12.54 0 19 0 C18.67 0.99 18.34 1.98 18 3 C15.36 3 12.72 3 10 3 C10 3.66 10 4.32 10 5 C9.34 5 8.68 5 8 5 C8 7.64 8 10.28 8 13 C3.53160785 13.21278058 0.17737474 12.59138085 -4 11 C-2.35 9.35 -0.7 7.7 1 6 C0.18015625 5.95101562 -0.6396875 5.90203125 -1.484375 5.8515625 C-2.56203125 5.77679688 -3.6396875 5.70203125 -4.75 5.625 C-5.81734375 5.55539063 -6.8846875 5.48578125 -7.984375 5.4140625 C-10.80206432 5.0271777 -12.5830366 4.44313834 -15 3 C-11.20431539 2.02201279 -8.4994001 2.07346931 -4.6875 2.9375 C-3.80449219 3.13214844 -2.92148438 3.32679688 -2.01171875 3.52734375 C-1.34785156 3.68332031 -0.68398437 3.83929688 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#D0A986\",transform:\"translate(256,246)\"})),_path564||(_path564=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.43775304 1.14591768 6.6759927 2.55750627 10 4 C10 4.66 10 5.32 10 6 C9.2575 6.28875 8.515 6.5775 7.75 6.875 C5.43260203 7.82302644 3.22082885 8.84845911 1 10 C1.33 10.99 1.66 11.98 2 13 C1.01 13.495 1.01 13.495 0 14 C-0.65555119 16.52733235 -0.65555119 16.52733235 -1 19 C-0.01 19.33 0.98 19.66 2 20 C0.41328692 22.38006962 -0.87846958 24.14366088 -3 26 C-3.66 26 -4.32 26 -5 26 C-5 25.01 -5 24.02 -5 23 C-5.99 23 -6.98 23 -8 23 C-8.66 20.03 -9.32 17.06 -10 14 C-4.5 10 -4.5 10 0 10 C0.33 8.68 0.66 7.36 1 6 C1.99 6 2.98 6 4 6 C4 5.34 4 4.68 4 4 C2.68 4 1.36 4 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#5F1F22\",transform:\"translate(92,368)\"})),_path565||(_path565=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.42039575 -0.40652968 9.07015675 0.96006486 14 3 C11.22377115 4.48569163 8.60260192 5.450243 5.5625 6.25 C-0.8990348 8.13059595 -7.08317277 10.79616746 -13 14 C-13.33 14.66 -13.66 15.32 -14 16 C-15.32 16 -16.64 16 -18 16 C-18 15.34 -18 14.68 -18 14 C-17.34 14 -16.68 14 -16 14 C-15.90332031 13.40445312 -15.80664062 12.80890625 -15.70703125 12.1953125 C-14.8527842 9.542899 -13.82724152 8.62528107 -11.6875 6.875 C-11.09324219 6.37742187 -10.49898437 5.87984375 -9.88671875 5.3671875 C-6.32783561 2.78828667 -4.51001784 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#F7D9B8\",transform:\"translate(150,320)\"})),_path566||(_path566=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.23259699 1.00056574 6.1667707 2.08502036 9.1875 3.625 C11.92742219 5.21960507 11.92742219 5.21960507 15 5 C16.70196405 6.2879728 18.36345179 7.62986661 20 9 C21.97360779 10.37780167 23.98253624 11.68630267 26 13 C25.34 13.66 24.68 14.32 24 15 C24.5053125 15.32613281 25.010625 15.65226562 25.53125 15.98828125 C26.1809375 16.42527344 26.830625 16.86226563 27.5 17.3125 C28.1496875 17.74175781 28.799375 18.17101562 29.46875 18.61328125 C29.9740625 19.07089844 30.479375 19.52851563 31 20 C31 20.99 31 21.98 31 23 C30.01 23.33 29.02 23.66 28 24 C25.46875 22.62890625 25.46875 22.62890625 22.5 20.5625 C21.44296875 19.83160156 20.3859375 19.10070312 19.296875 18.34765625 C14.49750155 14.9445418 9.72904329 11.50023677 5 8 C8.69901005 8 10.74036412 9.33550508 14 11 C14.66 11 15.32 11 16 11 C15.09636719 10.45730469 14.19273437 9.91460937 13.26171875 9.35546875 C12.07017612 8.63303739 10.8787774 7.91036864 9.6875 7.1875 C9.09259766 6.83107422 8.49769531 6.47464844 7.88476562 6.10742188 C4.9403794 4.3144716 2.27914092 2.60825874 0 0 Z \",fill:\"#55382E\",transform:\"translate(541,459)\"})),_path567||(_path567=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.12431525 1.31738469 7.84346309 3.34942465 11.546875 7.0859375 C12.044151 7.58412994 12.541427 8.08232239 13.05377197 8.59561157 C14.09710074 9.64495252 15.13559493 10.6991204 16.16943359 11.7578125 C17.748712 13.37368216 19.34349271 14.97288987 20.94140625 16.5703125 C29.39466958 25.10541817 29.39466958 25.10541817 31 29 C27.66864109 28.40300869 25.78724333 27.27987719 23.25 25.0625 C22.63640625 24.53785156 22.0228125 24.01320312 21.390625 23.47265625 C20 22 20 22 20 20 C19.44957031 19.75636719 18.89914063 19.51273438 18.33203125 19.26171875 C10.62937951 15.09428741 3.97333886 8.34030166 -2 2 C-1.34 1.34 -0.68 0.68 0 0 Z \",fill:\"#542F1D\",transform:\"translate(213,184)\"})),_path568||(_path568=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C-3.73612882 6.10469819 -9.78779954 10.39351709 -16.2109375 14.58789062 C-20.53492658 17.41261031 -20.53492658 17.41261031 -23.0703125 21.74609375 C-23.15645763 24.03634083 -23.15645763 24.03634083 -22 26 C-22.66 26 -23.32 26 -24 26 C-24 26.66 -24 27.32 -24 28 C-23.34 28 -22.68 28 -22 28 C-22 28.66 -22 29.32 -22 30 C-22.639375 29.814375 -23.27875 29.62875 -23.9375 29.4375 C-28.07334611 28.84666484 -31.8851173 29.41728241 -36 30 C-36 31.32 -36 32.64 -36 34 C-36.66 34 -37.32 34 -38 34 C-38 32.02 -38 30.04 -38 28 C-36.68 28 -35.36 28 -34 28 C-34.33 27.01 -34.66 26.02 -35 25 C-34.33613281 24.54109375 -33.67226563 24.0821875 -32.98828125 23.609375 C-27.55014249 19.84546327 -27.55014249 19.84546327 -22.3125 15.8125 C-20 14 -20 14 -16.7890625 12.21484375 C-12.94329356 10.0448064 -9.52227217 7.48286252 -6.0625 4.75 C-5.17981445 4.06164063 -5.17981445 4.06164063 -4.27929688 3.359375 C-2.84971658 2.24360502 -1.42439577 1.12238102 0 0 Z \",fill:\"#446B5E\",transform:\"translate(516,46)\"})),_path569||(_path569=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2 2.65 2 4.3 2 6 C1.34 6 0.68 6 0 6 C0.33 6.99 0.66 7.98 1 9 C0.21625 9.7425 -0.5675 10.485 -1.375 11.25 C-3.99852604 13.69630817 -3.99852604 13.69630817 -4.9375 16.0625 C-6 18 -6 18 -8.75 19.6875 C-12.47479159 22.33783248 -14.16357929 25.01090115 -16.56640625 28.82421875 C-19.81584534 33.75592876 -24.4649974 37.30871881 -29 41 C-29.495 39.515 -29.495 39.515 -30 38 C-29.608125 37.62875 -29.21625 37.2575 -28.8125 36.875 C-27.25162274 35.26029939 -25.85179373 33.61566921 -24.4375 31.875 C-22 29 -22 29 -20 28 C-20 27.34 -20 26.68 -20 26 C-19.34 26 -18.68 26 -18 26 C-18 25.34 -18 24.68 -18 24 C-17.34 24 -16.68 24 -16 24 C-16 23.34 -16 22.68 -16 22 C-15.34 22 -14.68 22 -14 22 C-14 21.34 -14 20.68 -14 20 C-13.34 20 -12.68 20 -12 20 C-11.7525 18.906875 -11.505 17.81375 -11.25 16.6875 C-10 13 -10 13 -7.9375 11.5 C-5.58547877 10.01625322 -5.58547877 10.01625322 -5.25 6.3125 C-5.1675 5.219375 -5.085 4.12625 -5 3 C-3.35 2.67 -1.7 2.34 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#67816B\",transform:\"translate(446,78)\"})),_path570||(_path570=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.73247012 1.92804338 7.68087497 5.60327938 11.125 9.25 C12.97977175 11.22443723 12.97977175 11.22443723 16 12 C16 12.66 16 13.32 16 14 C16.59329102 14.27328125 17.18658203 14.5465625 17.79785156 14.828125 C21.2654679 16.67341973 23.89137614 19.33613952 26.75 22 C27.35199219 22.5465625 27.95398438 23.093125 28.57421875 23.65625 C30.09153882 25.06002911 31.5509654 26.52583763 33 28 C33 28.66 33 29.32 33 30 C26.22514217 29.03216317 22.71545326 25.71545326 18 21 C17.071875 20.443125 16.14375 19.88625 15.1875 19.3125 C14.465625 18.879375 13.74375 18.44625 13 18 C13 17.34 13 16.68 13 16 C12.34 16 11.68 16 11 16 C11 15.34 11 14.68 11 14 C10.34 14 9.68 14 9 14 C9 13.34 9 12.68 9 12 C8.4225 11.773125 7.845 11.54625 7.25 11.3125 C4.4336339 9.66961977 2.91922886 7.60466773 1 5 C1.66 4.67 2.32 4.34 3 4 C2.01 2.68 1.02 1.36 0 0 Z \",fill:\"#794E39\",transform:\"translate(569,532)\"})),_path571||(_path571=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.16097702 0.00015106 2.32195404 0.00030212 3.51811218 0.00045776 C4.77130753 0.01078033 6.02450287 0.02110291 7.31567383 0.03173828 C8.59879959 0.03456818 9.88192535 0.03739807 11.20393372 0.04031372 C14.6119671 0.04794281 18.01982949 0.06758491 21.42779541 0.08972168 C24.90667406 0.11019581 28.38558039 0.11931878 31.86450195 0.12939453 C38.68813982 0.1508316 45.51166423 0.18495873 52.33520508 0.22705078 C52.33520508 0.55705078 52.33520508 0.88705078 52.33520508 1.22705078 C54.64520508 1.55705078 56.95520508 1.88705078 59.33520508 2.22705078 C59.33520508 2.55705078 59.33520508 2.88705078 59.33520508 3.22705078 C56.66972796 3.59355388 54.00359206 3.94545762 51.33520508 4.28955078 C50.59141602 4.39332031 49.84762695 4.49708984 49.08129883 4.60400391 C44.71965917 5.15394978 40.95141735 5.1503356 36.57299805 4.47827148 C31.71029647 3.93237143 26.78286054 4.21832822 21.89770508 4.28955078 C11.54682645 4.37723294 1.55815111 3.82171646 -8.66479492 2.22705078 C-5.23791744 -0.0575342 -4.02539182 -0.01746374 0 0 Z \",fill:\"#040404\",transform:\"translate(279.664794921875,506.77294921875)\"})),_path572||(_path572=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.75230148 0.06009392 5.4992444 0.14712621 8.25 0.25 C9.41595703 0.27126953 9.41595703 0.27126953 10.60546875 0.29296875 C14.34414242 0.45274113 16.41063563 0.57271083 19.5 2.8125 C21.53772833 5.78418714 21.72724062 8.45412808 22 12 C16.06 10.515 16.06 10.515 10 9 C10 9.66 10 10.32 10 11 C7.14073687 10.65191579 6.18144409 10.2164012 4.296875 7.96875 C3.78640625 7.1540625 3.2759375 6.339375 2.75 5.5 C2.22921875 4.6853125 1.7084375 3.870625 1.171875 3.03125 C0 1 0 1 0 0 Z \",fill:\"#9F6953\",transform:\"translate(532,359)\"})),_path573||(_path573=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1.15628906 0.58007812 -1.15628906 0.58007812 -2.3359375 1.171875 C-3.33882813 1.69265625 -4.34171875 2.2134375 -5.375 2.75 C-6.37273437 3.26046875 -7.37046875 3.7709375 -8.3984375 4.296875 C-11.09064324 5.71206904 -11.09064324 5.71206904 -11.80371094 7.92236328 C-13.5267791 10.91487554 -15.61566945 11.55303867 -18.7421875 12.9453125 C-20.46501953 13.72455078 -20.46501953 13.72455078 -22.22265625 14.51953125 C-23.42792969 15.04933594 -24.63320313 15.57914063 -25.875 16.125 C-28.24747334 17.18993152 -30.6198723 18.25502874 -32.9921875 19.3203125 C-34.04776855 19.78711426 -35.10334961 20.25391602 -36.19091797 20.73486328 C-38.93383915 21.92017169 -38.93383915 21.92017169 -41.18798828 23.22998047 C-43 24 -43 24 -46 23 C-41.98873676 18.4214067 -37.90202277 16.24777391 -32.375 13.8125 C-24.41327569 10.19792704 -16.69184884 6.27278816 -9.05615234 2.01098633 C-8.30543457 1.60259521 -7.5547168 1.1942041 -6.78125 0.7734375 C-6.12189453 0.40653809 -5.46253906 0.03963867 -4.78320312 -0.33837891 C-3 -1 -3 -1 0 0 Z \",fill:\"#585345\",transform:\"translate(481,171)\"})),_path574||(_path574=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 6.86912663 -8.15704123 13.27041483 -12.7265625 17.95703125 C-14.35418442 19.58074061 -15.98703032 21.19922987 -17.625 22.8125 C-18.44484375 23.63169922 -19.2646875 24.45089844 -20.109375 25.29492188 C-22.38469589 27.55378144 -24.68073623 29.78635079 -27 32 C-27.8660083 32.82866577 -27.8660083 32.82866577 -28.74951172 33.67407227 C-30.97934419 35.68390692 -32.57439481 36.91865344 -35.5546875 37.48828125 C-36.70324219 37.40126953 -36.70324219 37.40126953 -37.875 37.3125 C-38.65617187 37.26738281 -39.43734375 37.22226563 -40.2421875 37.17578125 C-41.11230469 37.08876953 -41.11230469 37.08876953 -42 37 C-40.20953589 32.86281109 -37.83902629 31.33679861 -34 29 C-33.34 29.66 -32.68 30.32 -32 31 C-28.99615946 30.3045656 -28.99615946 30.3045656 -26 29 C-25.03122943 26.96756452 -25.03122943 26.96756452 -25 25 C-24.34 25 -23.68 25 -23 25 C-22.34 23.68 -21.68 22.36 -21 21 C-20.34 21 -19.68 21 -19 21 C-19 20.34 -19 19.68 -19 19 C-17.71340837 17.62150897 -16.37086915 16.29470975 -15 15 C-14.29875 14.2575 -13.5975 13.515 -12.875 12.75 C-11 11 -11 11 -9 11 C-8.91878906 10.41734375 -8.83757812 9.8346875 -8.75390625 9.234375 C-7.77027513 6.31915739 -6.29381519 5.19489508 -3.9375 3.25 C-2.83728516 2.32960938 -2.83728516 2.32960938 -1.71484375 1.390625 C-1.14894531 0.93171875 -0.58304687 0.4728125 0 0 Z \",fill:\"#85A185\",transform:\"translate(442,99)\"})),_path575||(_path575=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3.495 4.95 3.495 4.95 4 10 C4.78375 10.28875 5.5675 10.5775 6.375 10.875 C9.75553203 12.32379944 11.37230986 14.37230986 14 17 C11.03 17 8.06 17 5 17 C3 13 3 13 3 10 C2.42668945 10.01047363 1.85337891 10.02094727 1.26269531 10.03173828 C-19.79900736 10.36544757 -19.79900736 10.36544757 -30 8 C-30 7.01 -30 6.02 -30 5 C-28.62511713 4.97250234 -27.25006609 4.9533836 -25.875 4.9375 C-24.72644531 4.92009766 -24.72644531 4.92009766 -23.5546875 4.90234375 C-20.6306788 5.01411778 -17.88404889 5.50083769 -15 6 C-12.04522291 6.3851178 -9.08541643 6.72380829 -6.125 7.0625 C-4.949375 7.19881836 -4.949375 7.19881836 -3.75 7.33789062 C-1.83348717 7.55992565 0.08323547 7.78014839 2 8 C1.67 7.236875 1.34 6.47375 1 5.6875 C0 3 0 3 0 0 Z \",fill:\"#053D30\",transform:\"translate(509,393)\"})),_path576||(_path576=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.99 0.495 -0.99 0.495 -2 1 C-1.67 3.64 -1.34 6.28 -1 9 C-3.26807204 10.0067004 -5.53907754 11.00551766 -7.8125 12 C-8.45509766 12.28617187 -9.09769531 12.57234375 -9.75976562 12.8671875 C-12.67756469 14.13711041 -14.78265714 15 -18 15 C-18 12.03 -18 9.06 -18 6 C-15.69 5.34 -13.38 4.68 -11 4 C-11 3.34 -11 2.68 -11 2 C-7.17679443 0.57741188 -4.08718695 -0.24042276 0 0 Z \",fill:\"#A59E88\",transform:\"translate(25,380)\"})),_path577||(_path577=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.99 1.32 1.98 2 3 C5.10213725 3.51220541 5.10213725 3.51220541 8.7578125 3.51171875 C9.42086395 3.52966995 10.08391541 3.54762115 10.76705933 3.56611633 C12.88630803 3.62032924 15.00533025 3.65414771 17.125 3.6875 C18.56122952 3.72066367 19.9974291 3.75515245 21.43359375 3.79101562 C24.95551129 3.87605964 28.47750759 3.94281873 32 4 C32 4.66 32 5.32 32 6 C28.37501666 6.02893932 24.75006287 6.04677792 21.125 6.0625 C19.57619141 6.07506836 19.57619141 6.07506836 17.99609375 6.08789062 C17.00996094 6.09111328 16.02382812 6.09433594 15.0078125 6.09765625 C13.64100342 6.10551147 13.64100342 6.10551147 12.24658203 6.11352539 C10 6 10 6 8 5 C8 5.99 8 6.98 8 8 C7.34 8 6.68 8 6 8 C6 7.34 6 6.68 6 6 C2.91240441 6.64067976 2.91240441 6.64067976 2.05078125 8.84765625 C1.80714844 9.57855469 1.56351563 10.30945313 1.3125 11.0625 C1.06113281 11.79597656 0.80976563 12.52945312 0.55078125 13.28515625 C0.36902344 13.85105469 0.18726563 14.41695313 0 15 C-1.41750563 14.88490339 -2.83401169 14.75746342 -4.25 14.625 C-5.43335938 14.52058594 -5.43335938 14.52058594 -6.640625 14.4140625 C-9.085877 13.98492887 -10.84836903 13.21399362 -13 12 C-13.33 13.32 -13.66 14.64 -14 16 C-14.99 15.67 -15.98 15.34 -17 15 C-17 14.01 -17 13.02 -17 12 C-16.01 12 -15.02 12 -14 12 C-14 11.34 -14 10.68 -14 10 C-13.07767578 10.01740234 -13.07767578 10.01740234 -12.13671875 10.03515625 C-10.92435547 10.04869141 -10.92435547 10.04869141 -9.6875 10.0625 C-8.88699219 10.07410156 -8.08648437 10.08570313 -7.26171875 10.09765625 C-4.83138666 10.09657855 -4.83138666 10.09657855 -2 9 C-1.19436362 6.89415562 -1.19436362 6.89415562 -0.8125 4.4375 C-0.65394531 3.61121094 -0.49539062 2.78492188 -0.33203125 1.93359375 C-0.16767578 0.97646484 -0.16767578 0.97646484 0 0 Z \",fill:\"#B33426\",transform:\"translate(169,282)\"})),_path578||(_path578=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.391875 0.61875 0.78375 1.2375 1.1875 1.875 C3.27717491 4.32496368 4.97463327 5.01879998 8 6 C8 6.99 8 7.98 8 9 C7.01 9 6.02 9 5 9 C5.33 9.66 5.66 10.32 6 11 C6.99 10.67 7.98 10.34 9 10 C9 11.65 9 13.3 9 15 C7.68 14.67 6.36 14.34 5 14 C5.33 17.3 5.66 20.6 6 24 C4.02 24.33 2.04 24.66 0 25 C0 24.34 0 23.68 0 23 C0.66 23 1.32 23 2 23 C1.814375 21.906875 1.62875 20.81375 1.4375 19.6875 C1 16 1 16 2 13 C2 11.68 2 10.36 2 9 C0.68 8.67 -0.64 8.34 -2 8 C-2 7.34 -2 6.68 -2 6 C-3.32 5.34 -4.64 4.68 -6 4 C-5.67 4.598125 -5.34 5.19625 -5 5.8125 C-4 8 -4 8 -4 11 C-4.66 11 -5.32 11 -6 11 C-5.67 11.99 -5.34 12.98 -5 14 C-5.99 14.495 -5.99 14.495 -7 15 C-7.66 11.04 -8.32 7.08 -9 3 C-8.34 3 -7.68 3 -7 3 C-6.34 2.34 -5.68 1.68 -5 1 C-4.01 1.66 -3.02 2.32 -2 3 C-2 2.34 -2 1.68 -2 1 C-1.34 0.67 -0.68 0.34 0 0 Z \",fill:\"#814737\",transform:\"translate(53,233)\"})),_path579||(_path579=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.66 0.33 -1.32 0.66 -2 1 C-2 1.66 -2 2.32 -2 3 C-28.63007983 11.68922351 -28.63007983 11.68922351 -42 13 C-42 12.34 -42 11.68 -42 11 C-40.68 11 -39.36 11 -38 11 C-38.33 9.68 -38.66 8.36 -39 7 C-38.38125 6.855625 -37.7625 6.71125 -37.125 6.5625 C-34.96741678 6.06847775 -34.96741678 6.06847775 -33 5 C-31.02440132 4.79533366 -29.04411189 4.63450941 -27.0625 4.5 C-23.76955062 4.2759354 -21.13836918 4.04612306 -18 3 C-16.60560336 2.93334624 -15.20830125 2.91461801 -13.8125 2.9375 C-11.9253125 2.9684375 -11.9253125 2.9684375 -10 3 C-10 2.34 -10 1.68 -10 1 C-3.375 -1.125 -3.375 -1.125 0 0 Z \",fill:\"#332824\",transform:\"translate(484,213)\"})),_path580||(_path580=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1.67 1.33 1.34 1.66 1 2 C0.82789088 3.77723518 0.72223505 5.56094405 0.64282227 7.34472656 C0.58929092 8.49233459 0.53575958 9.63994263 0.48060608 10.82232666 C0.42642014 12.08236511 0.37223419 13.34240356 0.31640625 14.640625 C0.22393968 16.63893836 0.13146904 18.63725154 0.03879452 20.63555527 C-0.09123716 23.46329181 -0.21706615 26.29120902 -0.34277344 29.11914062 C-0.61724063 35.29323775 -0.89678037 41.4670888 -1.18359375 47.640625 C-1.21476665 48.31457809 -1.24593956 48.98853119 -1.2780571 49.6829071 C-1.95287201 64.13883639 -2.93027333 78.56799235 -4 93 C-4.66 93 -5.32 93 -6 93 C-6.0271045 89.95827281 -6.04688964 86.91679003 -6.0625 83.875 C-6.07087891 83.0190625 -6.07925781 82.163125 -6.08789062 81.28125 C-6.09111328 80.44335938 -6.09433594 79.60546875 -6.09765625 78.7421875 C-6.10289307 77.9776123 -6.10812988 77.21303711 -6.11352539 76.42529297 C-5.97943102 73.56057574 -5.47615264 70.82747454 -5 68 C-4.80516968 65.79006269 -4.64052506 63.5773351 -4.5 61.36328125 C-4.41806396 60.07615234 -4.33612793 58.78902344 -4.25170898 57.46289062 C-4.16755867 56.0794421 -4.08366124 54.69597818 -4 53.3125 C-3.95642365 52.61068604 -3.91284729 51.90887207 -3.86795044 51.18579102 C-3.17648085 40.02225261 -2.66419267 28.86195625 -2.34179688 17.6809082 C-1.85613888 1.85613888 -1.85613888 1.85613888 0 0 Z \",fill:\"#EDC6A0\",transform:\"translate(292,533)\"})),_path581||(_path581=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.99 1.32 1.98 2 3 C2.639375 2.814375 3.27875 2.62875 3.9375 2.4375 C8.07334611 1.84666484 11.8851173 2.41728241 16 3 C16.09765625 9.15234375 16.09765625 9.15234375 16 11 C15 12 15 12 11.62109375 12.09765625 C10.22652923 12.09098369 8.83198257 12.07902532 7.4375 12.0625 C6.72658203 12.05798828 6.01566406 12.05347656 5.28320312 12.04882812 C3.52209987 12.03700864 1.76103964 12.01907263 0 12 C0.66 10.68 1.32 9.36 2 8 C1.236875 8.20625 0.47375 8.4125 -0.3125 8.625 C-3 9 -3 9 -6 7 C-5.34 6.34 -4.68 5.68 -4 5 C-2.68 5 -1.36 5 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#6E6146\",transform:\"translate(462,57)\"})),_path582||(_path582=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.37942295 2.4376625 -0.69970046 3.70910933 -2.49609375 5.44921875 C-7.92992278 8.91506141 -12.5876912 9.85546025 -19 10 C-18.01 9.34 -17.02 8.68 -16 8 C-23.01567969 8.3996939 -29.93748948 8.91573683 -36.875 10.0625 C-41.67940214 10.85637306 -46.13848174 11.19064778 -51 11 C-51 10.67 -51 10.34 -51 10 C-50.351521 9.89977539 -49.70304199 9.79955078 -49.03491211 9.69628906 C-28.80208407 6.86510306 -28.80208407 6.86510306 -9.34375 0.890625 C-6.18150455 -0.31102827 -3.34929442 -0.13134488 0 0 Z \",fill:\"#E2BC9E\",transform:\"translate(256,275)\"})),_path583||(_path583=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.82622743 1.5588334 6.25147379 3.95433582 9 7 C9.33 7.99 9.66 8.98 10 10 C11.32222671 10.68843209 12.65686601 11.35330586 14 12 C15.421875 13.515625 15.421875 13.515625 16.75 15.25 C19.54055023 18.65673772 22.59401279 21.09351872 26.1640625 23.64453125 C28.32563254 25.24041381 30.17915494 27.02741785 32 29 C31.67 29.66 31.34 30.32 31 31 C27.36904219 29.70049931 24.63020304 28.15850208 21.625 25.75 C20.8515625 25.13382813 20.078125 24.51765625 19.28125 23.8828125 C16.63734752 21.70068751 14.0515614 19.46203856 11.5078125 17.1640625 C9.88400043 15.77831907 9.88400043 15.77831907 7 15 C6.67 13.35 6.34 11.7 6 10 C5.34 10 4.68 10 4 10 C3 7 3 7 3 5 C2.03567924 3.31243867 1.03789581 1.64333504 0 0 Z \",fill:\"#8D5E43\",transform:\"translate(541,507)\"})),_path584||(_path584=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C7.93 2 14.86 2 22 2 C21.34 3.98 20.68 5.96 20 8 C11.42 8 2.84 8 -6 8 C-4.21844267 4.43688534 -2.83236991 2.64354525 0 0 Z \",fill:\"#A1585A\",transform:\"translate(223,356)\"})),_path585||(_path585=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.95 0 9.9 0 15 0 C14.67 5.94 14.34 11.88 14 18 C13.67 18 13.34 18 13 18 C12.67 12.72 12.34 7.44 12 2 C11.01 2 10.02 2 9 2 C9.33 3.155 9.66 4.31 10 5.5 C11.08401934 9.77500587 11.15701377 13.60361453 11 18 C10.01 18.33 9.02 18.66 8 19 C7.66151348 17.10507994 7.32943089 15.20901534 7 13.3125 C6.814375 12.25675781 6.62875 11.20101563 6.4375 10.11328125 C6.04931926 7.35095938 5.91740024 4.78257957 6 2 C5.01 2 4.02 2 3 2 C3 8.6 3 15.2 3 22 C2.34 22 1.68 22 1 22 C-0.00109214 14.61694543 -0.0784416 7.45195235 0 0 Z \",fill:\"#63281E\",transform:\"translate(523,262)\"})),_path586||(_path586=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1 2 -1 2 -2.9375 3 C-6.32224701 4.10522351 -9.66971682 4.76859507 -13.1640625 5.4296875 C-19.1725259 6.63800108 -25.183886 8.06129533 -31 10 C-30.835 9.38125 -30.67 8.7625 -30.5 8.125 C-29.92365356 6.03936614 -29.92365356 6.03936614 -30 4 C-32.31 4 -34.62 4 -37 4 C-37 4.66 -37 5.32 -37 6 C-36.01 6.33 -35.02 6.66 -34 7 C-37.93670488 8.31223496 -40.12488144 7.24296256 -44 6 C-41.23719462 4.15812975 -39.19292174 3.27751723 -36.0625 2.3125 C-34.78052734 1.90451172 -34.78052734 1.90451172 -33.47265625 1.48828125 C-30.854093 0.9711874 -29.49217877 1.1426479 -27 2 C-22.12446592 3.5812543 -19.55675153 2.07851824 -15 0 C-9.84283006 -1.34534868 -5.19893909 -0.75095787 0 0 Z \",fill:\"#304841\",transform:\"translate(595,194)\"})),_path587||(_path587=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0 3.96 0 6 0 C6.16435547 0.96099609 6.16435547 0.96099609 6.33203125 1.94140625 C7.32215907 7.34283524 8.49658104 12.0974712 11 17 C11.66 17.33 12.32 17.66 13 18 C13 18.66 13 19.32 13 20 C14.65 20.33 16.3 20.66 18 21 C18 21.33 18 21.66 18 22 C15.3125 22.3125 15.3125 22.3125 12 22 C9.125 19.6875 9.125 19.6875 7 17 C7 16.01 7 15.02 7 14 C6.01 14.495 6.01 14.495 5 15 C4.68758545 17.71446979 4.48663408 20.33909361 4.375 23.0625 C4.33632813 23.82111328 4.29765625 24.57972656 4.2578125 25.36132812 C4.16326438 27.24047195 4.08053244 29.12020336 4 31 C3.34 31 2.68 31 2 31 C0.90684754 26.4161086 0.67717375 21.87488993 0.4375 17.1875 C0.39431641 16.39923828 0.35113281 15.61097656 0.30664062 14.79882812 C0.20121679 12.86605785 0.10016906 10.93304974 0 9 C0.66 8.67 1.32 8.34 2 8 C2 5.69 2 3.38 2 1 C1.34 0.67 0.68 0.34 0 0 Z \",fill:\"#021E16\",transform:\"translate(369,308)\"})),_path588||(_path588=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C8.06350113 -0.12867289 15.97497656 0.20318916 24 1 C24 3.31 24 5.62 24 8 C1.8479925 6.77112951 1.8479925 6.77112951 -5 3 C-3.02 2.67 -1.04 2.34 1 2 C0.67 1.34 0.34 0.68 0 0 Z \",fill:\"#9C6447\",transform:\"translate(602,308)\"})),_path589||(_path589=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C11.89 2.67 22.78 2.34 34 2 C34 9 34 9 32 13 C32 10.03 32 7.06 32 4 C31.34 4 30.68 4 30 4 C30 4.66 30 5.32 30 6 C26.04 6 22.08 6 18 6 C18 5.34 18 4.68 18 4 C11.4 4 4.8 4 -2 4 C-2 6.31 -2 8.62 -2 11 C-2.99 12.485 -2.99 12.485 -4 14 C-4.5775 13.05125 -5.155 12.1025 -5.75 11.125 C-7.82816551 8.23865902 -8.75468075 7.15904259 -12 6 C-12 4.68 -12 3.36 -12 2 C-8.04 1.34 -4.08 0.68 0 0 Z \",fill:\"#D28353\",transform:\"translate(171,273)\"})),_path590||(_path590=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0 3.96 0 6 0 C6 6.6 6 13.2 6 20 C8.64 20 11.28 20 14 20 C14 20.33 14 20.66 14 21 C7.30324864 22.03026944 0.7685324 22.10152799 -6 22 C-5.34 21.67 -4.68 21.34 -4 21 C-4 20.34 -4 19.68 -4 19 C-2.68 19 -1.36 19 0 19 C0 12.73 0 6.46 0 0 Z \",fill:\"#307239\",transform:\"translate(94,270)\"})),_path591||(_path591=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C3.96 2.33 7.92 2.66 12 3 C12 2.34 12 1.68 12 1 C14.97 1 17.94 1 21 1 C17.29401541 2.8529923 14.45475173 3.67410691 10.4375 4.5 C9.19742187 4.75652344 7.95734375 5.01304687 6.6796875 5.27734375 C2.59552311 6.07943548 -1.49778495 6.81091984 -5.59765625 7.52734375 C-7.74512141 7.94985316 -9.78506174 8.4822878 -11.875 9.125 C-14.77026831 9.93567513 -17.01835219 10.18070593 -20 10 C-19.01 9.34 -18.02 8.68 -17 8 C-17.99 6.68 -18.98 5.36 -20 4 C-16.78548731 2.39274365 -13.56387464 2.94251815 -10 3 C-10 2.34 -10 1.68 -10 1 C-6.61981469 -0.04005702 -3.5219721 -0.08004482 0 0 Z \",fill:\"#46413C\",transform:\"translate(464,225)\"})),_path592||(_path592=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 5.61 1 11.22 1 17 C1.66 17.33 2.32 17.66 3 18 C-3.1492957 23.5848676 -9.47350686 28.86365893 -16 34 C-17.20221409 34.95914532 -18.40401213 35.91881227 -19.60546875 36.87890625 C-20.86179663 37.87783379 -22.11830603 38.87653306 -23.375 39.875 C-23.97014404 40.35171143 -24.56528809 40.82842285 -25.1784668 41.31958008 C-27.99835511 43.54947331 -30.68338645 45.57859419 -34 47 C-33.01 44.03 -33.01 44.03 -32 41 C-29.03 40.505 -29.03 40.505 -26 40 C-25.22227595 37.66682784 -24.57584432 35.38564077 -24 33 C-20.25 31.875 -20.25 31.875 -18 33 C-18 32.34 -18 31.68 -18 31 C-16.50390625 29.5625 -16.50390625 29.5625 -14.5625 28 C-11.84811762 25.85474956 -11.84811762 25.85474956 -10 23 C-8.68 23 -7.36 23 -6 23 C-5.01 17.72 -4.02 12.44 -3 7 C-2.67 7 -2.34 7 -2 7 C-1.505 12.94 -1.505 12.94 -1 19 C-0.67 12.73 -0.34 6.46 0 0 Z \",fill:\"#839983\",transform:\"translate(466,97)\"})),_path593||(_path593=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1.34 2.32 0.68 3.64 0 5 C-0.66 5 -1.32 5 -2 5 C-1.97679687 5.55945313 -1.95359375 6.11890625 -1.9296875 6.6953125 C-1.53846154 24.07692308 -1.53846154 24.07692308 -5 31 C-5.15608023 33.40560273 -5.25804458 35.78702772 -5.31640625 38.1953125 C-5.33718735 38.90275604 -5.35796844 39.61019958 -5.37937927 40.33908081 C-5.44481078 42.60095425 -5.50372974 44.86294462 -5.5625 47.125 C-5.60569133 48.65756422 -5.64930582 50.19011657 -5.69335938 51.72265625 C-5.80048555 55.48165073 -5.9017709 59.24076292 -6 63 C-8.9015224 60.0984776 -8.3424334 57.08662758 -8.37109375 53.1953125 C-8.38207092 52.40779099 -8.3930481 51.62026947 -8.40435791 50.80888367 C-8.43121768 48.24740813 -8.43735091 45.68661023 -8.4375 43.125 C-8.43956451 42.26151947 -8.44162903 41.39803894 -8.4437561 40.50839233 C-8.4303556 9.47318735 -8.4303556 9.47318735 -1.33203125 1.01171875 C-0.89246094 0.67785156 -0.45289063 0.34398437 0 0 Z \",fill:\"#F8F2D4\",transform:\"translate(340,365)\"})),_path594||(_path594=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2.4140625 3.06640625 2.4140625 3.06640625 2.625 5.5625 C2.69976562 6.38878906 2.77453125 7.21507812 2.8515625 8.06640625 C2.90054687 8.70449219 2.94953125 9.34257812 3 10 C4.2375 9.95875 5.475 9.9175 6.75 9.875 C10.01637962 9.86341709 12.2146947 10.1431298 15 12 C15 14.64 15 17.28 15 20 C14.34 20 13.68 20 13 20 C12.67 18.35 12.34 16.7 12 15 C11.70867187 15.63808594 11.41734375 16.27617187 11.1171875 16.93359375 C9.8742048 19.43910291 8.65053278 21.73958043 7 24 C3.6875 25.0625 3.6875 25.0625 1 25 C1 24.34 1 23.68 1 23 C1.66 23 2.32 23 3 23 C3 21.02 3 19.04 3 17 C4.32 16.34 5.64 15.68 7 15 C7 14.34 7 13.68 7 13 C5.02 13 3.04 13 1 13 C1 14.32 1 15.64 1 17 C0.01 16.67 -0.98 16.34 -2 16 C-1.34 10.72 -0.68 5.44 0 0 Z \",fill:\"#2D1316\",transform:\"translate(399,371)\"})),_path595||(_path595=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1.79488983 4.03850211 -3.09711586 6.80796918 -7 9 C-10.015625 9.07421875 -10.015625 9.07421875 -13.25 8.6875 C-14.86648438 8.50767578 -14.86648438 8.50767578 -16.515625 8.32421875 C-17.33546875 8.21722656 -18.1553125 8.11023438 -19 8 C-19 7.34 -19 6.68 -19 6 C-19.99 6 -20.98 6 -22 6 C-22 4.02 -22 2.04 -22 0 C-18.70880065 -0.1964031 -15.41703066 -0.38060745 -12.125 -0.5625 C-11.18785156 -0.61857422 -10.25070312 -0.67464844 -9.28515625 -0.73242188 C-8.38925781 -0.78076172 -7.49335938 -0.82910156 -6.5703125 -0.87890625 C-5.74289551 -0.9260376 -4.91547852 -0.97316895 -4.06298828 -1.02172852 C-2 -1 -2 -1 0 0 Z \",fill:\"#A56D53\",transform:\"translate(297,324)\"})),_path596||(_path596=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.62092814 1.37951331 3.23950599 2.76186205 4.84765625 4.15625 C6.35737475 5.44951158 7.88809868 6.71846186 9.43359375 7.96875 C15.76930428 13.24006116 15.76930428 13.24006116 17.0625 17.5 C17.041875 18.325 17.02125 19.15 17 20 C12.09125628 19.4660336 8.7657739 17.22440822 4.75 14.5625 C4.11320313 14.15451172 3.47640625 13.74652344 2.8203125 13.32617188 C-1.86444357 10.27111287 -1.86444357 10.27111287 -3 8 C-2.67 7.01 -2.34 6.02 -2 5 C-1.01 4.67 -0.02 4.34 1 4 C0.67 2.68 0.34 1.36 0 0 Z \",fill:\"#523529\",transform:\"translate(224,201)\"})),_path597||(_path597=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.91007812 0.00902344 1.82015625 0.01804687 2.7578125 0.02734375 C3.80582031 0.04474609 3.80582031 0.04474609 4.875 0.0625 C3.12639846 3.84846297 0.90329075 6.17841357 -2.125 9.0625 C-2.888125 9.825625 -3.65125 10.58875 -4.4375 11.375 C-4.994375 11.931875 -5.55125 12.48875 -6.125 13.0625 C-6.785 12.7325 -7.445 12.4025 -8.125 12.0625 C-6.475 10.0825 -4.825 8.1025 -3.125 6.0625 C-4.445 6.3925 -5.765 6.7225 -7.125 7.0625 C-7.125 7.7225 -7.125 8.3825 -7.125 9.0625 C-7.764375 9.35125 -8.40375 9.64 -9.0625 9.9375 C-11.27706079 10.89073451 -11.27706079 10.89073451 -12.125 13.0625 C-12.785 13.0625 -13.445 13.0625 -14.125 13.0625 C-14.125 13.7225 -14.125 14.3825 -14.125 15.0625 C-15.55078125 16.2109375 -15.55078125 16.2109375 -17.4375 17.4375 C-20.26073111 19.3634694 -22.27919546 21.13092808 -24.125 24.0625 C-25.115 23.7325 -26.105 23.4025 -27.125 23.0625 C-26.3515625 22.22847656 -25.578125 21.39445313 -24.78125 20.53515625 C-23.72898021 19.39861011 -22.67691058 18.26187862 -21.625 17.125 C-21.08053223 16.53686523 -20.53606445 15.94873047 -19.97509766 15.34277344 C-16.12973876 11.1785754 -12.35671385 6.95908056 -8.6484375 2.671875 C-5.91693131 -0.21371615 -3.82676854 -0.04906114 0 0 Z \",fill:\"#4F352B\",transform:\"translate(97.125,517.9375)\"})),_path598||(_path598=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.95548972 -0.70336413 13.0333735 0.3299852 19.6875 2.1875 C39.16922742 7.62217434 59.01715811 10.99492722 79 14 C79 14.66 79 15.32 79 16 C73.11450452 16.14747255 67.66693699 15.64078659 61.875 14.625 C61.10285156 14.49867188 60.33070313 14.37234375 59.53515625 14.2421875 C55.18412017 13.50095478 51.18279172 12.43622534 47 11 C44.81945759 10.5290464 42.63092683 10.09424468 40.4375 9.6875 C33.99332094 8.45804011 27.62467874 6.98534532 21.25 5.4375 C14.20068132 3.72888063 7.17084301 2.12516741 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#AD6957\",transform:\"translate(159,488)\"})),_path599||(_path599=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C8.415 1.485 8.415 1.485 17 3 C17 5.97 17 8.94 17 12 C5.47835991 11.03644647 5.47835991 11.03644647 0 10 C0 6.7 0 3.4 0 0 Z \",fill:\"#A36D51\",transform:\"translate(609,357)\"})),_path600||(_path600=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.18776711 0.14032492 6.3751385 0.28826644 9.5625 0.4375 C10.45775391 0.47681641 11.35300781 0.51613281 12.27539062 0.55664062 C25.96781871 1.20866101 25.96781871 1.20866101 28.875 3.4375 C32.18929118 5.87447881 36.00625566 6.27464045 40 7 C40 7.66 40 8.32 40 9 C40.99 9.33 41.98 9.66 43 10 C41.54166667 9.85416667 40.08333333 9.70833333 38.625 9.5625 C37.71105469 9.47226562 36.79710937 9.38203125 35.85546875 9.2890625 C34.04459757 9.10574586 32.23453955 8.91404541 30.42578125 8.7109375 C26.53394326 8.283263 22.78916961 7.9690274 18.875 8.125 C11.83712941 8.2522671 4.85828741 6.41373287 -2 5 C-2 4.67 -2 4.34 -2 4 C2.3858286 3.91049329 6.65964391 3.85865847 11 4.5625 C11.99 4.706875 12.98 4.85125 14 5 C14.33 4.67 14.66 4.34 15 4 C14.00419922 3.92652344 14.00419922 3.92652344 12.98828125 3.8515625 C4.21792619 3.10896309 4.21792619 3.10896309 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#A06952\",transform:\"translate(547,312)\"})),_path601||(_path601=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.33 0.66 0.66 1 1 C3.32817964 1.36760731 5.6618385 1.70241581 8 2 C4.12294009 5.64472673 1.66067353 6.49133929 -3.625 6.625 C-8.63523558 6.70261263 -8.63523558 6.70261263 -13 9 C-15.6875 9.125 -15.6875 9.125 -18 9 C-21 2.125 -21 2.125 -21 1 C-18.62515638 0.83079995 -16.25016522 0.66457137 -13.875 0.5 C-13.20984375 0.45230469 -12.5446875 0.40460938 -11.859375 0.35546875 C-7.89978533 0.0837322 -3.96828791 -0.14473998 0 0 Z \",fill:\"#A3664C\",transform:\"translate(402,436)\"})),_path602||(_path602=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.7425 0.0825 1.485 0.165 2.25 0.25 C2.25 0.91 2.25 1.57 2.25 2.25 C0.36549324 3.83820066 -1.51186767 5.30282461 -3.5 6.75 C-4.03882812 7.15347656 -4.57765625 7.55695312 -5.1328125 7.97265625 C-7.89802169 10.01621329 -10.60623955 11.84599048 -13.75 13.25 C-13.75 13.91 -13.75 14.57 -13.75 15.25 C-14.74 15.25 -15.73 15.25 -16.75 15.25 C-17.08 16.24 -17.41 17.23 -17.75 18.25 C-19.84135727 20.05329153 -21.91913065 21.72535202 -24.125 23.375 C-25.01058594 24.05755859 -25.01058594 24.05755859 -25.9140625 24.75390625 C-28.50516212 26.7205742 -30.64331401 28.214438 -33.75 29.25 C-33.5625 26.4375 -33.5625 26.4375 -32.75 23.25 C-30.12232094 21.24466598 -27.88211099 20.294037 -24.75 19.25 C-24.75 18.59 -24.75 17.93 -24.75 17.25 C-23.16113281 15.89306641 -23.16113281 15.89306641 -20.953125 14.3515625 C-19.76203125 13.50851562 -19.76203125 13.50851562 -18.546875 12.6484375 C-17.70640625 12.06320312 -16.8659375 11.47796875 -16 10.875 C-14.35692441 9.72484709 -12.71622028 8.57129755 -11.078125 7.4140625 C-10.3449707 6.90311035 -9.61181641 6.3921582 -8.85644531 5.86572266 C-6.65633098 4.26180536 -6.65633098 4.26180536 -4.65136719 2.06787109 C-2.75 0.25 -2.75 0.25 0 0 Z \",fill:\"#412A23\",transform:\"translate(77.75,517.75)\"})),_path603||(_path603=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.8125 0.125 1.8125 0.125 4 1 C8.08517242 6.39826356 7.28116872 12.56436036 7 19 C6.34 19 5.68 19 5 19 C4.93941406 18.39671875 4.87882813 17.7934375 4.81640625 17.171875 C4.69072266 15.97304688 4.69072266 15.97304688 4.5625 14.75 C4.48128906 13.96109375 4.40007812 13.1721875 4.31640625 12.359375 C4.02365007 10.17635361 3.57935581 8.1226818 3 6 C2.34 6 1.68 6 1 6 C0.34 15.57 -0.32 25.14 -1 35 C-1.66 35 -2.32 35 -3 35 C-3.07429025 30.65840162 -3.12866741 26.3171423 -3.16479492 21.97509766 C-3.17985923 20.49879509 -3.20031482 19.02253712 -3.22631836 17.54638672 C-3.26280739 15.42143742 -3.27974933 13.29708099 -3.29296875 11.171875 C-3.3086792 9.8940918 -3.32438965 8.61630859 -3.34057617 7.29980469 C-2.9827054 3.8324345 -2.37101156 2.48313552 0 0 Z \",fill:\"#E88915\",transform:\"translate(211,337)\"})),_path604||(_path604=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.4589426 0.47730838 2.91713496 0.95691042 4.375 1.4375 C5.18710937 1.70433594 5.99921875 1.97117187 6.8359375 2.24609375 C9 3 9 3 11 4 C16.18158917 4.37246096 21.30895449 3.92817173 26.44921875 3.2890625 C31.61795769 2.70332486 36.81252681 2.37683345 42 2 C41.67 2.99 41.34 3.98 41 5 C39.69675781 5.19916016 39.69675781 5.19916016 38.3671875 5.40234375 C37.21476562 5.57894531 36.06234375 5.75554687 34.875 5.9375 C33.73804688 6.11152344 32.60109375 6.28554688 31.4296875 6.46484375 C29.36433741 6.78711364 27.3023957 7.13476447 25.25 7.53125 C20.55569733 8.20831288 15.8606043 8.36678736 11.125 8.5625 C10.15046875 8.60568359 9.1759375 8.64886719 8.171875 8.69335938 C5.78139113 8.7988219 3.39071252 8.89985429 1 9 C0.67 6.03 0.34 3.06 0 0 Z \",fill:\"#110A0B\",transform:\"translate(375,499)\"})),_path605||(_path605=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.50967563 -0.22948328 12.4293818 0.65309034 18.8125 1.875 C27.21018074 3.41842716 35.55679529 4.62849986 44.05981445 5.40380859 C47.46805167 5.71595007 50.69629184 6.11094405 54 7 C54 7.66 54 8.32 54 9 C16.81916244 9.87944162 16.81916244 9.87944162 5 2 C3.34450469 1.61500109 1.6777567 1.27206865 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#84553F\",transform:\"translate(572,315)\"})),_path606||(_path606=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 2.64 0 5.28 0 8 C-1.79126452 8.33548767 -3.58302587 8.66832355 -5.375 9 C-6.37273437 9.185625 -7.37046875 9.37125 -8.3984375 9.5625 C-11 10 -11 10 -13 10 C-13.99 10.33 -14.98 10.66 -16 11 C-17.35439668 8.29120665 -17.06501451 5.99066732 -17 3 C-18.32 2.67 -19.64 2.34 -21 2 C-13.90961228 0.49025965 -7.24997422 -0.28307925 0 0 Z \",fill:\"#E8CF90\",transform:\"translate(247,267)\"})),_path607||(_path607=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 2.97 0 5.94 0 9 C0.99 9 1.98 9 3 9 C2.67 8.34 2.34 7.68 2 7 C1.960008 5.00039988 1.95653201 2.99952758 2 1 C10.58077055 0.75088086 18.58173087 1.30117812 27 3 C27 3.66 27 4.32 27 5 C20.65758005 6.15316726 14.43311296 6.09507063 8 6 C8 6.99 8 7.98 8 9 C9.32 9.33 10.64 9.66 12 10 C9.87506859 10.02693575 7.75004088 10.04636628 5.625 10.0625 C4.44164062 10.07410156 3.25828125 10.08570313 2.0390625 10.09765625 C-1 10 -1 10 -3 9 C-3 6.36 -3 3.72 -3 1 C-1 0 -1 0 0 0 Z \",fill:\"#E69274\",transform:\"translate(221,259)\"})),_path608||(_path608=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.02338141 8.57249325 1.04104445 17.14497273 1.05181217 25.7174902 C1.05698544 29.69993673 1.06397936 33.68236112 1.07543945 37.66479492 C1.08646931 41.5227689 1.09231841 45.38072185 1.09487724 49.2387104 C1.09669592 50.69556572 1.10024499 52.15242016 1.10573006 53.60926628 C1.14361495 64.10893944 0.71888091 74.52500191 0 85 C-0.33 85 -0.66 85 -1 85 C-1 64.54 -1 44.08 -1 23 C-1.66 23.33 -2.32 23.66 -3 24 C-3.24693223 16.13932402 -2.96687701 8.65215653 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#ECC09A\",transform:\"translate(282,541)\"})),_path609||(_path609=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0.33 5.28 0.66 8 1 C8.66 2.65 9.32 4.3 10 6 C10.95261719 6.1340625 11.90523437 6.268125 12.88671875 6.40625 C15.82962792 6.82634862 18.76876493 7.26734867 21.70703125 7.71875 C22.54169922 7.84636719 23.37636719 7.97398437 24.23632812 8.10546875 C25.94232674 8.36673617 27.64806139 8.62973359 29.35351562 8.89453125 C39.77452864 10.48051171 50.09111206 11.20432432 60.625 11.5625 C61.81996094 11.60568359 63.01492188 11.64886719 64.24609375 11.69335938 C67.16397406 11.79840307 70.08192438 11.90055648 73 12 C73 12.33 73 12.66 73 13 C46.86376044 13.31094638 23.51255099 11.25529736 -2 5 C-1.34 3.35 -0.68 1.7 0 0 Z \",fill:\"#93AC91\",transform:\"translate(232,172)\"})),_path610||(_path610=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.06711182 0.77529053 -0.13422363 1.55058105 -0.20336914 2.34936523 C-0.98057083 11.79204864 -1.30825956 21.21515807 -1.51757812 30.68554688 C-1.55173828 31.83216797 -1.58589844 32.97878906 -1.62109375 34.16015625 C-1.6461499 35.18761963 -1.67120605 36.21508301 -1.69702148 37.27368164 C-1.99856077 39.98704926 -2.61162647 41.67493435 -4 44 C-7.16663351 34.50009947 -5.06119684 20.89140267 -4 11 C-3.67 10.34 -3.34 9.68 -3 9 C-6.3 9 -9.6 9 -13 9 C-12.67 8.34 -12.34 7.68 -12 7 C-8.7 7 -5.4 7 -2 7 C-2 6.34 -2 5.68 -2 5 C-4.31 5 -6.62 5 -9 5 C-9 3.68 -9 2.36 -9 1 C-5.8035914 -0.06546953 -3.34252724 -0.07427838 0 0 Z \",fill:\"#874238\",transform:\"translate(152,396)\"})),_path611||(_path611=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4.81289053 2.27069422 5.62532738 4.54154901 6.4375 6.8125 C6.78264648 7.77639648 6.78264648 7.77639648 7.13476562 8.75976562 C8.11417851 11.49928283 9.07995362 14.23986086 10 17 C18.25 17.33 26.5 17.66 35 18 C35.33 16.68 35.66 15.36 36 14 C36 15.65 36 17.3 36 19 C36.66 19.33 37.32 19.66 38 20 C37.505 22.475 37.505 22.475 37 25 C36.505 23.515 36.505 23.515 36 22 C35.46375 22.02320313 34.9275 22.04640625 34.375 22.0703125 C26.13802201 22.25997976 18.13780076 21.13081102 10 20 C10 19.34 10 18.68 10 18 C9.01 17.67 8.02 17.34 7 17 C5.8671875 14.890625 5.8671875 14.890625 4.875 12.25 C4.54242188 11.38890625 4.20984375 10.5278125 3.8671875 9.640625 C3.03382723 7.10300543 2.46319234 4.62790754 2 2 C1.34 2 0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#A29055\",transform:\"translate(424,328)\"})),_path612||(_path612=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 1.32 1.32 2.64 2 4 C-0.6821555 5.32448399 -3.36987287 6.6346159 -6.0625 7.9375 C-6.81466797 8.31068359 -7.56683594 8.68386719 -8.34179688 9.06835938 C-15.13054919 12.33048711 -21.42516522 13.44557852 -29 13 C-29.66 12.34 -30.32 11.68 -31 11 C-30.18917969 10.79246094 -29.37835938 10.58492188 -28.54296875 10.37109375 C-21.23316132 8.33728237 -15.692519 5.6997312 -9.45703125 1.41796875 C-6.01009513 -0.57128055 -3.87143875 -0.60222381 0 0 Z \",fill:\"#6A7463\",transform:\"translate(491,335)\"})),_path613||(_path613=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4.33 1.98 4.66 3.96 5 6 C1.7 5.67 -1.6 5.34 -5 5 C-5 5.99 -5 6.98 -5 8 C-9.33168317 8.26252625 -12.8803623 7.29243536 -17 6 C-16.67 7.32 -16.34 8.64 -16 10 C-15.34 10 -14.68 10 -14 10 C-14 10.66 -14 11.32 -14 12 C-13.34 12 -12.68 12 -12 12 C-8 17.41176471 -8 17.41176471 -8 20 C-7.34 20 -6.68 20 -6 20 C-6.33 21.98 -6.66 23.96 -7 26 C-10.66221862 24.77926046 -10.95532172 23.44391449 -12.6875 20.17578125 C-14.85728414 16.57884742 -17.6017003 13.44991652 -20.29296875 10.234375 C-22 8 -22 8 -23 5 C-10.625 4.01 -10.625 4.01 2 3 C1.34 2.01 0.68 1.02 0 0 Z \",fill:\"#4C3027\",transform:\"translate(484,512)\"})),_path614||(_path614=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.99 2.97 -1.98 5.94 -3 9 C-9.93 9 -16.86 9 -24 9 C-23.01 8.67 -22.02 8.34 -21 8 C-21 6.68 -21 5.36 -21 4 C-13.75880117 1.25545087 -7.76751234 -0.51783416 0 0 Z \",fill:\"#E5BC96\",transform:\"translate(417,452)\"})),_path615||(_path615=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4 0.66 4 1.32 4 2 C6.64 2 9.28 2 12 2 C12 2.33 12 2.66 12 3 C15.96 3.33 19.92 3.66 24 4 C24.33 5.98 24.66 7.96 25 10 C21.39442684 9.9772336 17.7920381 9.8999779 14.1875 9.8125 C13.16333984 9.80669922 12.13917969 9.80089844 11.08398438 9.79492188 C3.54725373 9.57252654 3.54725373 9.57252654 0.80078125 6.69921875 C0 4 0 4 0 0 Z \",fill:\"#B88B26\",transform:\"translate(504,352)\"})),_path616||(_path616=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C0.67 2.99 0.34 3.98 0 5 C0.99 4.67 1.98 4.34 3 4 C3 4.66 3 5.32 3 6 C2.34 6 1.68 6 1 6 C0.61714844 7.24136719 0.61714844 7.24136719 0.2265625 8.5078125 C-1.15257503 12.43440151 -2.83605302 16.12257463 -4.625 19.875 C-4.94984375 20.56335938 -5.2746875 21.25171875 -5.609375 21.9609375 C-6.40323472 23.64205219 -7.20119558 25.32122921 -8 27 C-8.66 27 -9.32 27 -10 27 C-10.25523437 28.04800781 -10.25523437 28.04800781 -10.515625 29.1171875 C-10.75796875 30.02726563 -11.0003125 30.93734375 -11.25 31.875 C-11.48203125 32.77992188 -11.7140625 33.68484375 -11.953125 34.6171875 C-13 37 -13 37 -17 39 C-16.34 35.7 -15.68 32.4 -15 29 C-14.34 29 -13.68 29 -13 29 C-12.87625 28.46375 -12.7525 27.9275 -12.625 27.375 C-11.87793984 24.5361714 -10.94696636 21.77776798 -10 19 C-9.34 19 -8.68 19 -8 19 C-7.9175 18.360625 -7.835 17.72125 -7.75 17.0625 C-6.25506337 10.95817545 -3.39935083 5.26899379 0 0 Z \",fill:\"#754E3B\",transform:\"translate(150,547)\"})),_path617||(_path617=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.32841781 -0.10914665 11.57125764 1.58969139 17.34375 6.01953125 C23.10644356 10.31612777 29.53657216 13.86018316 36 17 C30.60296096 17.50727177 27.10956499 15.8287758 22.5625 13.1875 C12.45417262 7.05522365 12.45417262 7.05522365 1 7 C0.01 7.495 0.01 7.495 -1 8 C-3.05859375 8.16796875 -3.05859375 8.16796875 -5.4375 8.1875 C-6.61119141 8.20876953 -6.61119141 8.20876953 -7.80859375 8.23046875 C-10 8 -10 8 -13 6 C-8.85529486 4.67369435 -3.96769422 4.01615289 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#100A09\",transform:\"translate(365,406)\"})),_path618||(_path618=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3.33 3.31 3.66 5.62 4 8 C4.99 8 5.98 8 7 8 C9 10 9 10 9.1953125 12.3828125 C9.13020833 14.921875 9.06510417 17.4609375 9 20 C15.27 19.67 21.54 19.34 28 19 C28 19.99 28 20.98 28 22 C29.98 22.33 31.96 22.66 34 23 C33.67 23.66 33.34 24.32 33 25 C29.04 25 25.08 25 21 25 C21.33 24.34 21.66 23.68 22 23 C22.66 23 23.32 23 24 23 C24 22.34 24 21.68 24 21 C18.72 21 13.44 21 8 21 C8 19.68 8 18.36 8 17 C7.236875 16.979375 6.47375 16.95875 5.6875 16.9375 C3 16 3 16 1.1875 13 C-0.39923594 8.71224725 -0.27614604 4.51038537 0 0 Z \",fill:\"#29080E\",transform:\"translate(80,383)\"})),_path619||(_path619=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.92 0 15.84 0 24 0 C24 1.98 24 3.96 24 6 C16.08 6.33 8.16 6.66 0 7 C0 4.69 0 2.38 0 0 Z \",fill:\"#C3936F\",transform:\"translate(324,311)\"})),_path620||(_path620=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.6 0 13.2 0 20 0 C20.33 1.32 20.66 2.64 21 4 C24.3 3.67 27.6 3.34 31 3 C30.67 3.99 30.34 4.98 30 6 C20.1 6 10.2 6 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#BD4546\",transform:\"translate(272,292)\"})),_path621||(_path621=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3 10.24 3 19.48 3 29 C2.34 29 1.68 29 1 29 C1 29.66 1 30.32 1 31 C0.34 31 -0.32 31 -1 31 C-1.33 30.34 -1.66 29.68 -2 29 C-5.45043117 27.84985628 -8.35282355 27 -12 27 C-11.505 25.515 -11.505 25.515 -11 24 C-10.195625 23.87625 -9.39125 23.7525 -8.5625 23.625 C-7.716875 23.41875 -6.87125 23.2125 -6 23 C-5.67 22.34 -5.34 21.68 -5 21 C-3.68 20.67 -2.36 20.34 -1 20 C-0.67 13.4 -0.34 6.8 0 0 Z \",fill:\"#423731\",transform:\"translate(37,120)\"})),_path622||(_path622=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 1.32 0 2.64 0 4 C-1.98 4.99 -1.98 4.99 -4 6 C-1.03 6.495 -1.03 6.495 2 7 C1.34 8.32 0.68 9.64 0 11 C-0.73605469 10.98839844 -1.47210938 10.97679688 -2.23046875 10.96484375 C-3.20628906 10.95582031 -4.18210937 10.94679688 -5.1875 10.9375 C-6.15042969 10.92589844 -7.11335938 10.91429688 -8.10546875 10.90234375 C-10.85576513 10.99513378 -13.32479591 11.37888315 -16 12 C-16.02688151 10.35425434 -16.04634123 8.70838587 -16.0625 7.0625 C-16.07410156 6.14597656 -16.08570313 5.22945312 -16.09765625 4.28515625 C-16 2 -16 2 -15 1 C-13.02341005 1 -11.04669934 1.0029147 -9.0703125 1.03125 C-5.96742598 0.98441398 -3.08167503 0 0 0 Z \",fill:\"#BD9368\",transform:\"translate(462,58)\"})),_path623||(_path623=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.66 2 1.32 2 2 C3.32 2 4.64 2 6 2 C6.33 1.34 6.66 0.68 7 0 C8.875 0.625 8.875 0.625 11 2 C12.62344752 5.63343017 13.27596315 7.17211056 12 11 C8.43197007 12.89118194 5.37636814 13.27204611 1.375 13.25 C-0.03652344 13.25773437 -0.03652344 13.25773437 -1.4765625 13.265625 C-4 13 -4 13 -7 11 C-5.02 11 -3.04 11 -1 11 C-0.67 7.37 -0.34 3.74 0 0 Z \",fill:\"#0C0605\",transform:\"translate(555,340)\"})),_path624||(_path624=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0 5.28 0 8 0 C7.67 1.32 7.34 2.64 7 4 C7.99 4 8.98 4 10 4 C10 3.34 10 2.68 10 2 C11.32 2.66 12.64 3.32 14 4 C14 4.66 14 5.32 14 6 C14.99 6 15.98 6 17 6 C17 6.66 17 7.32 17 8 C16.01 8.66 15.02 9.32 14 10 C19.445 10.495 19.445 10.495 25 11 C25 12.98 25 14.96 25 17 C24.01 16.67 23.02 16.34 22 16 C22 15.34 22 14.68 22 14 C21.24074219 14.02320313 20.48148437 14.04640625 19.69921875 14.0703125 C18.70535156 14.08835937 17.71148437 14.10640625 16.6875 14.125 C15.20830078 14.15980469 15.20830078 14.15980469 13.69921875 14.1953125 C11 14 11 14 8 12 C8 10.68 8 9.36 8 8 C6.68 8 5.36 8 4 8 C4 7.34 4 6.68 4 6 C3.34 6 2.68 6 2 6 C2 4.68 2 3.36 2 2 C1.34 2 0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#F5E8D6\",transform:\"translate(480,316)\"})),_path625||(_path625=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.12508244 3.18762365 2.5020163 5.26512223 3 9 C3.825 9.10957031 4.65 9.21914063 5.5 9.33203125 C12.5554524 10.30058108 19.52171102 11.44412902 26.51000977 12.82128906 C33.38404207 14.14134147 40.31228967 15.05439178 47.25805664 15.90991211 C48.12035889 16.02343018 48.98266113 16.13694824 49.87109375 16.25390625 C51.03016235 16.39807983 51.03016235 16.39807983 52.21264648 16.54516602 C52.80247314 16.69526123 53.3922998 16.84535645 54 17 C54.495 17.99 54.495 17.99 55 19 C46.62586375 19.37094734 38.65127747 17.93762815 30.4375 16.5 C20.35420297 14.56705134 20.35420297 14.56705134 10.14453125 13.94140625 C7 14 7 14 5.25 12.4375 C4.8375 11.963125 4.425 11.48875 4 11 C3.0409375 11.2784375 3.0409375 11.2784375 2.0625 11.5625 C1.381875 11.706875 0.70125 11.85125 0 12 C-2.25 10.0625 -2.25 10.0625 -4 8 C-2.35 8 -0.7 8 1 8 C0.67 7.34 0.34 6.68 0 6 C-0.039992 4.00039988 -0.04346799 1.99952758 0 0 Z \",fill:\"#C48067\",transform:\"translate(475,282)\"})),_path626||(_path626=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.06541016 0.55494141 1.06541016 0.55494141 2.15234375 1.12109375 C8.70515152 4.3186838 15.73155313 2.93814732 22.66015625 1.51953125 C27.52927953 0.57141814 31.77931375 0.22657375 36.02734375 3.05859375 C32.55226297 3.7678954 29.07189783 4.44693248 25.58984375 5.12109375 C24.61595703 5.32025391 23.64207031 5.51941406 22.63867188 5.72460938 C15.23798602 7.13544246 7.60544934 8.18929209 0.90234375 3.99609375 C-2.87060529 1.94084914 -5.62839602 1.48482353 -9.97265625 2.05859375 C-11.65005487 3.04048562 -13.31733002 4.03993146 -14.97265625 5.05859375 C-18.28515625 5.24609375 -18.28515625 5.24609375 -20.97265625 5.05859375 C-16.01408543 0.10002293 -6.56610191 -3.13352586 0 0 Z \",fill:\"#D16B5C\",transform:\"translate(378.97265625,494.94140625)\"})),_path627||(_path627=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.6 0 13.2 0 20 0 C20 3.3 20 6.6 20 10 C16.37 10 12.74 10 9 10 C9 8.68 9 7.36 9 6 C6.03 5.01 3.06 4.02 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#BD845B\",transform:\"translate(322,488)\"})),_path628||(_path628=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.67542976 0.28604898 3.34385343 0.61781233 5 1 C5.33 2.65 5.66 4.3 6 6 C6.66 6 7.32 6 8 6 C8 7.98 8 9.96 8 12 C7.34 12 6.68 12 6 12 C6 12.66 6 13.32 6 14 C5.34 14 4.68 14 4 14 C4 11.36 4 8.72 4 6 C3.34 6 2.68 6 2 6 C2 5.34 2 4.68 2 4 C0.02 4 -1.96 4 -4 4 C-4 4.66 -4 5.32 -4 6 C-7.08809695 7.76462683 -8.23312136 8 -12 8 C-12 8.66 -12 9.32 -12 10 C-13.11375 10.2475 -14.2275 10.495 -15.375 10.75 C-19.04615198 11.61005339 -19.04615198 11.61005339 -20.4375 14.125 C-20.623125 14.74375 -20.80875 15.3625 -21 16 C-21.33 13.36 -21.66 10.72 -22 8 C-18.38026598 6.68373308 -15.90432869 6 -12 6 C-12 5.34 -12 4.68 -12 4 C-11.21753906 3.79503906 -10.43507813 3.59007812 -9.62890625 3.37890625 C-8.61699219 3.10949219 -7.60507812 2.84007812 -6.5625 2.5625 C-5.55316406 2.29566406 -4.54382813 2.02882813 -3.50390625 1.75390625 C-1.08247999 1.24021923 -1.08247999 1.24021923 0 0 Z \",fill:\"#E93322\",transform:\"translate(26,374)\"})),_path629||(_path629=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.65493519 0.05337124 5.30988318 0.10610985 7.96484375 0.15820312 C14.39339462 0.28569112 20.82174463 0.42092913 27.25 0.5625 C27.25 0.8925 27.25 1.2225 27.25 1.5625 C20.84772776 2.71212342 14.55490269 2.70704787 8.0625 2.6953125 C6.88719727 2.69626923 5.71189453 2.69722595 4.50097656 2.69821167 C2.01643826 2.69889075 -0.46810184 2.69705544 -2.95263672 2.69287109 C-6.70935175 2.68755749 -10.46594511 2.69280545 -14.22265625 2.69921875 C-26.10113388 2.70218185 -37.91510348 2.6669897 -49.75 1.5625 C-49.75 1.2325 -49.75 0.9025 -49.75 0.5625 C-33.14236514 -0.60549075 -16.63532374 -0.36663309 0 0 Z \",fill:\"#824E2A\",transform:\"translate(306.75,239.4375)\"})),_path630||(_path630=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1.55500981 3.81684226 -4.03595495 6.19195732 -7 9 C-4.18515955 9 -3.07790244 7.70547286 -0.875 6 C-0.15054688 5.443125 0.57390625 4.88625 1.3203125 4.3125 C1.87460938 3.879375 2.42890625 3.44625 3 3 C3 3.99 3 4.98 3 6 C2.34 6 1.68 6 1 6 C0.66355469 6.85271484 0.66355469 6.85271484 0.3203125 7.72265625 C-3.83321872 14.88688317 -12.981819 19.8950262 -20 24 C-20.33 22.02 -20.66 20.04 -21 18 C-20.21625 17.7525 -19.4325 17.505 -18.625 17.25 C-15.49469091 15.75937663 -15.45996121 15.00580249 -14 12 C-13.030625 11.195625 -12.06125 10.39125 -11.0625 9.5625 C-8.15536229 7.12999702 -6.83527499 5.23357974 -5 2 C-2 0 -2 0 0 0 Z \",fill:\"#5B3C2E\",transform:\"translate(80,541)\"})),_path631||(_path631=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C5.125 7.75 5.125 7.75 4 10 C3.63514063 12.14069835 3.3067707 14.28770849 3 16.4375 C2.52179984 19.78116516 2.06854712 22.79435864 1 26 C0.34 26 -0.32 26 -1 26 C-3.50350097 17.86362185 -4.76573432 8.91085231 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#D3CB9D\",transform:\"translate(199,378)\"})),_path632||(_path632=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 1.65 0 3.3 0 5 C7.425 5.99 7.425 5.99 15 7 C15 8.98 15 10.96 15 13 C11.7 13 8.4 13 5 13 C4.34 11.35 3.68 9.7 3 8 C1.35 8 -0.3 8 -2 8 C-2.33 6.68 -2.66 5.36 -3 4 C-6.96 4 -10.92 4 -15 4 C-15 3.01 -15 2.02 -15 1 C-13.43784452 0.83013455 -11.8752548 0.66426036 -10.3125 0.5 C-9.44238281 0.4071875 -8.57226562 0.314375 -7.67578125 0.21875 C-5.10276661 0.00840136 -2.58015636 -0.03719144 0 0 Z \",fill:\"#DB5A56\",transform:\"translate(111,305)\"})),_path633||(_path633=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.71033085 1.27405873 5.01170741 2.66056239 7.34765625 4.53125 C7.95287109 5.01207031 8.55808594 5.49289062 9.18164062 5.98828125 C10.11266602 6.73658203 10.11266602 6.73658203 11.0625 7.5 C12.30261128 8.49055328 13.54347004 9.48017165 14.78515625 10.46875 C15.33051025 10.90638672 15.87586426 11.34402344 16.43774414 11.79492188 C17.9093247 12.93005575 19.45362199 13.96908133 21 15 C21 15.66 21 16.32 21 17 C22.32 17.66 23.64 18.32 25 19 C25 19.66 25 20.32 25 21 C25.66 21 26.32 21 27 21 C27 21.66 27 22.32 27 23 C27.639375 23.268125 28.27875 23.53625 28.9375 23.8125 C31 25 31 25 32 28 C32.66 28 33.32 28 34 28 C34 29.32 34 30.64 34 32 C32 32 32 32 29.9375 30 C29.50308594 29.54753906 29.06867187 29.09507812 28.62109375 28.62890625 C24.46366892 24.45144564 19.98648161 20.52450914 15.3125 16.9375 C12.73520901 14.77814809 10.7599045 12.39382967 8.625 9.80859375 C6.40875241 7.3419528 3.91782385 5.31386517 1.3203125 3.26171875 C0.88460937 2.84535156 0.44890625 2.42898438 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#4C3026\",transform:\"translate(592,548)\"})),_path634||(_path634=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.63 0 7.26 0 11 0 C11.33 0.99 11.66 1.98 12 3 C11.34 3 10.68 3 10 3 C10.33 4.98 10.66 6.96 11 9 C8.59454362 10.20272819 7.05003047 10.10071472 4.375 10.0625 C3.14910156 10.04896484 3.14910156 10.04896484 1.8984375 10.03515625 C0.95871094 10.01775391 0.95871094 10.01775391 0 10 C0 10.99 0 11.98 0 13 C-5.53846154 13.36923077 -5.53846154 13.36923077 -7.875 11.5 C-8.24625 11.005 -8.6175 10.51 -9 10 C-7.68 9.67 -6.36 9.34 -5 9 C-5.66 8.67 -6.32 8.34 -7 8 C-7 7.34 -7 6.68 -7 6 C-3.535 5.505 -3.535 5.505 0 5 C-0.66 4.34 -1.32 3.68 -2 3 C-1.01 2.67 -0.02 2.34 1 2 C0.67 1.34 0.34 0.68 0 0 Z \",fill:\"#A18461\",transform:\"translate(402,404)\"})),_path635||(_path635=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C6.20006342 4.7811434 7.6323388 9.17170998 8.625 14.375 C8.86476563 15.59960938 9.10453125 16.82421875 9.3515625 18.0859375 C10.71277195 26.30239454 11.13415063 34.23449211 11.0625 42.5625 C11.05798828 43.57119141 11.05347656 44.57988281 11.04882812 45.61914062 C11.03716769 48.07949147 11.02080378 50.53971239 11 53 C10.34 53 9.68 53 9 53 C8.9498877 52.1843457 8.89977539 51.36869141 8.84814453 50.52832031 C8.65549489 47.44155752 8.45721424 44.35521721 8.25537109 41.26904297 C8.12827523 39.30072316 8.00741431 37.33200388 7.88671875 35.36328125 C7.39273586 21.21256772 7.39273586 21.21256772 3 8 C2.01 8 1.02 8 0 8 C0 5.36 0 2.72 0 0 Z \",fill:\"#65290C\",transform:\"translate(418,392)\"})),_path636||(_path636=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.231394 3.69418201 0.64432764 6.2056261 0 10 C-1.6396875 10.185625 -1.6396875 10.185625 -3.3125 10.375 C-7.07381802 10.75464801 -7.07381802 10.75464801 -10 13 C-12.26831055 13.22705078 -12.26831055 13.22705078 -14.88671875 13.1953125 C-16.2934082 13.18564453 -16.2934082 13.18564453 -17.72851562 13.17578125 C-19.19321289 13.15064453 -19.19321289 13.15064453 -20.6875 13.125 C-21.67556641 13.11597656 -22.66363281 13.10695313 -23.68164062 13.09765625 C-26.12119706 13.07408566 -28.56062901 13.03821469 -31 13 C-31.33 16.96 -31.66 20.92 -32 25 C-30.02 25 -28.04 25 -26 25 C-28 27 -28 27 -30.5625 27.1875 C-33 27 -33 27 -34 26 C-34.12602054 23.89868079 -34.1757922 21.79256212 -34.1875 19.6875 C-34.20167969 18.53636719 -34.21585938 17.38523437 -34.23046875 16.19921875 C-34 13 -34 13 -32 9 C-22.43 9 -12.86 9 -3 9 C-2.01 6.03 -1.02 3.06 0 0 Z \",fill:\"#040504\",transform:\"translate(246,355)\"})),_path637||(_path637=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.33 1.98 1.66 3.96 2 6 C3.32 5.34 4.64 4.68 6 4 C5.67 3.01 5.34 2.02 5 1 C5.66 1 6.32 1 7 1 C7.33 3.31 7.66 5.62 8 8 C7.01 7.67 6.02 7.34 5 7 C5 9.97 5 12.94 5 16 C8.96 16 12.92 16 17 16 C17 16.33 17 16.66 17 17 C14.69 17 12.38 17 10 17 C9.67 22.94 9.34 28.88 9 35 C8.01 35 7.02 35 6 35 C6 29.06 6 23.12 6 17 C4.02 17 2.04 17 0 17 C0.66 16.34 1.32 15.68 2 15 C1.505 14.319375 1.01 13.63875 0.5 12.9375 C-1.32635616 9.36088586 -1.29408453 6.97014116 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#CA866A\",transform:\"translate(95,253)\"})),_path638||(_path638=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-0.67804688 2.29132813 -1.35609375 2.58265625 -2.0546875 2.8828125 C-7.81277928 5.41892494 -13.18007835 8.22129044 -18.53125 11.5234375 C-22.56539973 13.93626756 -26.75865518 15.98031199 -31 18 C-31.83273438 18.40734375 -32.66546875 18.8146875 -33.5234375 19.234375 C-34.32007813 19.61078125 -35.11671875 19.9871875 -35.9375 20.375 C-36.64777344 20.71273438 -37.35804687 21.05046875 -38.08984375 21.3984375 C-40 22 -40 22 -43 21 C-43 20.34 -43 19.68 -43 19 C-41.52853516 18.27296875 -41.52853516 18.27296875 -40.02734375 17.53125 C-32.95645017 14.02317555 -25.93694446 10.45423075 -19 6.6875 C-6.60186183 0 -6.60186183 0 0 0 Z \",fill:\"#614234\",transform:\"translate(80,434)\"})),_path639||(_path639=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.29 0 8.58 0 13 0 C14 3 14 3 13 6 C12.01 6.33 11.02 6.66 10 7 C13.63 7.33 17.26 7.66 21 8 C21 8.66 21 9.32 21 10 C19.35 10 17.7 10 16 10 C16.020625 11.27875 16.04125 12.5575 16.0625 13.875 C16.125 17.75 16.125 17.75 15 20 C14.34 20 13.68 20 13 20 C13 16.7 13 13.4 13 10 C9.7 9.34 6.4 8.68 3 8 C3 7.34 3 6.68 3 6 C2.01 6 1.02 6 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#FC9583\",transform:\"translate(315,362)\"})),_path640||(_path640=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.53915039 0.1539624 1.07830078 0.3079248 1.63378906 0.46655273 C4.38379109 1.08652327 7.04822148 1.32001695 9.859375 1.53515625 C11.53193359 1.66567383 11.53193359 1.66567383 13.23828125 1.79882812 C14.97658203 1.9293457 14.97658203 1.9293457 16.75 2.0625 C17.92433594 2.15337891 19.09867187 2.24425781 20.30859375 2.33789062 C23.20550948 2.56163615 26.10263056 2.78222179 29 3 C29 3.33 29 3.66 29 4 C27.35 4.33 25.7 4.66 24 5 C23.67 5.99 23.34 6.98 23 8 C25.31 8.33 27.62 8.66 30 9 C29.34 9.33 28.68 9.66 28 10 C28.495 11.485 28.495 11.485 29 13 C24.05 12.67 19.1 12.34 14 12 C14 11.67 14 11.34 14 11 C15.98 11 17.96 11 20 11 C20 9.68 20 8.36 20 7 C19.34 7 18.68 7 18 7 C18 7.66 18 8.32 18 9 C17.34 9 16.68 9 16 9 C15.34 8.01 14.68 7.02 14 6 C10.44861999 4.61429799 6.51798648 4.68172135 2.75 4.4375 C1.48671875 4.35371094 0.2234375 4.26992188 -1.078125 4.18359375 C-2.04234375 4.12300781 -3.0065625 4.06242187 -4 4 C-3.67 3.34 -3.34 2.68 -3 2 C-2.01 2 -1.02 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#B7876C\",transform:\"translate(254,257)\"})),_path641||(_path641=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.66 3.3 -1.32 6.6 -2 10 C-14.6389578 13.89308872 -26.81312166 14.78848481 -40 15 C-39.67 14.34 -39.34 13.68 -39 13 C-38.34 13 -37.68 13 -37 13 C-36.67 11.68 -36.34 10.36 -36 9 C-34.02 8.67 -32.04 8.34 -30 8 C-30 8.66 -30 9.32 -30 10 C-30.99 10.33 -31.98 10.66 -33 11 C-22.93474844 11.45983383 -14.3998828 11.23249696 -5 7 C-4.67 6.67 -4.34 6.34 -4 6 C-8.12973628 6.56739868 -8.12973628 6.56739868 -12 8 C-14.6723621 8.13415472 -17.32250488 8.04318541 -20 8 C-16.27534407 5.99109993 -12.50856077 4.96493618 -8.4375 3.87890625 C-5.33209261 2.75916801 -3.26250588 0 0 0 Z \",fill:\"#DE9673\",transform:\"translate(154,386)\"})),_path642||(_path642=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.5625 1.875 -0.5625 1.875 -2 4 C-7.86647519 6.53063636 -9.43176465 5.87663867 -16 4 C-16 12.25 -16 20.5 -16 29 C-16.33 29 -16.66 29 -17 29 C-20 5.26213592 -20 5.26213592 -20 3 C-23.96 2.67 -27.92 2.34 -32 2 C-32 1.67 -32 1.34 -32 1 C-27.6042236 0.8318091 -23.20837046 0.6657129 -18.8125 0.5 C-17.56662109 0.45230469 -16.32074219 0.40460938 -15.03710938 0.35546875 C-13.83505859 0.31035156 -12.63300781 0.26523437 -11.39453125 0.21875 C-10.28956299 0.17685547 -9.18459473 0.13496094 -8.04614258 0.09179688 C-5.36141261 0.01089133 -2.68565859 -0.01748191 0 0 Z \",fill:\"#647247\",transform:\"translate(218,323)\"})),_path643||(_path643=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.33 2.64 0.66 4 1 C3.67 1.33 3.34 1.66 3 2 C2.87625 3.0725 2.7525 4.145 2.625 5.25 C2 9 2 9 0.58984375 11.26171875 C-1.32776649 14.56453147 -2.20105834 17.88047483 -3.0625 21.5625 C-3.23313965 22.26705322 -3.4037793 22.97160645 -3.57958984 23.69750977 C-4.8054233 28.87240384 -5.75837291 34.06407199 -6.5703125 39.3203125 C-7.9238123 47.76122943 -10.23970686 55.91628438 -13 64 C-13.33 64 -13.66 64 -14 64 C-14.15448349 60.75584661 -14.08894142 58.2653602 -13.05078125 55.16796875 C-12.01639864 52.04943976 -11.494071 49.1886682 -11.0625 45.9375 C-9.92777808 38.12846885 -8.47508967 30.34422014 -5.93359375 22.859375 C-4.98274212 19.94714323 -4.66875335 17.19207714 -4.34765625 14.15625 C-3.72399328 10.28813812 -2.33251866 6.67166827 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#503429\",transform:\"translate(244,527)\"})),_path644||(_path644=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C-3.18887626 7.152684 -10.05541446 11.87525513 -17.35107422 16.61035156 C-24.36682594 21.16959904 -30.98452287 26.1264212 -37.5 31.375 C-38.3559375 32.06335938 -39.211875 32.75171875 -40.09375 33.4609375 C-40.7228125 33.96882812 -41.351875 34.47671875 -42 35 C-42.66 34.67 -43.32 34.34 -44 34 C-43.04882866 32.8274869 -42.08882991 31.66212985 -41.125 30.5 C-40.59132813 29.8503125 -40.05765625 29.200625 -39.5078125 28.53125 C-39.01023437 28.0259375 -38.51265625 27.520625 -38 27 C-37.34 27 -36.68 27 -36 27 C-36 26.34 -36 25.68 -36 25 C-34.25832301 23.6019984 -32.45529359 22.27979397 -30.625 21 C-26.62788786 18.21935232 -26.62788786 18.21935232 -23 15 C-21.41445313 14.61328125 -21.41445313 14.61328125 -19.796875 14.21875 C-15.26586282 12.76435103 -12.7123714 10.65279466 -9.25 7.5 C-3.15940767 2.10627178 -3.15940767 2.10627178 0 0 Z \",fill:\"#37241F\",transform:\"translate(63,518)\"})),_path645||(_path645=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C1.94875 1.814375 2.8975 1.62875 3.875 1.4375 C7 1 7 1 9 2 C9 1.34 9 0.68 9 0 C9.66 0 10.32 0 11 0 C11.33 0.33 11.66 0.66 12 1 C12 0.67 12 0.34 12 0 C14.64 0 17.28 0 20 0 C17.50409737 3.07575879 15.41686754 3.54972126 11.5625 4.125 C8.32148659 4.62768779 5.17485962 5.1799443 2 6 C2.36109955 9.89314083 2.73405286 13.78496594 3.11694336 17.67602539 C3.30720713 19.63305814 3.48869079 21.59093825 3.66992188 23.54882812 C4.49807321 31.8940454 5.89781797 39.8810205 8 48 C7.34 48 6.68 48 6 48 C6 47.34 6 46.68 6 46 C5.34 46 4.68 46 4 46 C4 44.02 4 42.04 4 40 C3.34 40 2.68 40 2 40 C1.97494385 39.41508789 1.9498877 38.83017578 1.92407227 38.22753906 C1.80777038 35.56815529 1.68519933 32.90909597 1.5625 30.25 C1.50352539 28.86941406 1.50352539 28.86941406 1.44335938 27.4609375 C1.40146484 26.57148438 1.35957031 25.68203125 1.31640625 24.765625 C1.27974854 23.94868164 1.24309082 23.13173828 1.20532227 22.29003906 C1.06141868 20.02018572 1.06141868 20.02018572 0.48632812 17.9453125 C-0.34862979 14.60548084 -0.10179886 11.17202402 -0.0625 7.75 C-0.05798828 7.00492187 -0.05347656 6.25984375 -0.04882812 5.4921875 C-0.03709246 3.6614236 -0.0191585 1.83070127 0 0 Z \",fill:\"#F2A87B\",transform:\"translate(336,416)\"})),_path646||(_path646=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C18.87714567 -0.78928832 37.31755494 1.61777046 56 4 C56 4.66 56 5.32 56 6 C44.91878021 6.22046085 34.08662338 5.55553886 23.0625 4.5 C21.49289622 4.35484372 19.92323479 4.21030941 18.35351562 4.06640625 C14.56831068 3.71806934 10.78397466 3.36144664 7 3 C7 2.67 7 2.34 7 2 C4.69 1.67 2.38 1.34 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#3B362E\",transform:\"translate(570,301)\"})),_path647||(_path647=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1.33333333 6 -2.66666667 12 -4 18 C-2.02 17.67 -0.04 17.34 2 17 C2.33 17.66 2.66 18.32 3 19 C-1 20.33333333 -5 21.66666667 -9 23 C-10.74420829 19.51158343 -10.4553486 15.81428372 -10 12 C-9.11437327 9.53648809 -8.07495226 7.27022 -6.875 4.9453125 C-5.79489381 2.89951189 -5.79489381 2.89951189 -6 0 C-3 -1 -3 -1 0 0 Z \",fill:\"#113C2C\",transform:\"translate(469,273)\"})),_path648||(_path648=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.99 1.98 1.98 3 3 C2.67 3.99 2.34 4.98 2 6 C1.77202438 8.73289293 1.58331813 11.45042204 1.4375 14.1875 C1.39431641 14.93708984 1.35113281 15.68667969 1.30664062 16.45898438 C1.20077315 18.30578375 1.0999024 20.15286834 1 22 C1.66 22.33 2.32 22.66 3 23 C2.67 23.33 2.34 23.66 2 24 C1.25398613 31.95771624 1.25398613 31.95771624 4 39 C6.50288058 39.98900654 8.97338889 40.69611545 11.58984375 41.32421875 C14 42 14 42 17 44 C13.30458414 44.95024979 10.69541586 44.95024979 7 44 C7 43.34 7 42.68 7 42 C4.36 42 1.72 42 -1 42 C-1.02470469 36.50073576 -1.04286223 31.00150378 -1.05493164 25.50219727 C-1.05996279 23.63109779 -1.06678835 21.76000225 -1.07543945 19.88891602 C-1.08755829 17.20067372 -1.09324047 14.51248336 -1.09765625 11.82421875 C-1.10281754 10.98662521 -1.10797882 10.14903168 -1.11329651 9.28605652 C-1.11362064 5.93624258 -1.06684515 3.20053544 0 0 Z \",fill:\"#40756C\",transform:\"translate(159,122)\"})),_path649||(_path649=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.27230469 0.00902344 2.54460937 0.01804687 3.85546875 0.02734375 C5.31919922 0.04474609 5.31919922 0.04474609 6.8125 0.0625 C6.8125 0.7225 6.8125 1.3825 6.8125 2.0625 C3.23605152 3.3005014 0.47555234 2.81176071 -3.1875 2.0625 C-3.1875 3.3825 -3.1875 4.7025 -3.1875 6.0625 C-1.5375 6.0625 0.1125 6.0625 1.8125 6.0625 C1.1525 6.7225 0.4925 7.3825 -0.1875 8.0625 C-1.1775 8.0625 -2.1675 8.0625 -3.1875 8.0625 C-3.1875 20.9325 -3.1875 33.8025 -3.1875 47.0625 C-4.1775 47.5575 -4.1775 47.5575 -5.1875 48.0625 C-5.1875 34.8625 -5.1875 21.6625 -5.1875 8.0625 C-6.1775 7.7325 -7.1675 7.4025 -8.1875 7.0625 C-7.1975 6.7325 -6.2075 6.4025 -5.1875 6.0625 C-5.1875 4.7425 -5.1875 3.4225 -5.1875 2.0625 C-6.8375 2.3925 -8.4875 2.7225 -10.1875 3.0625 C-10.1875 2.4025 -10.1875 1.7425 -10.1875 1.0625 C-6.62704823 -0.12431726 -3.74941663 -0.03439832 0 0 Z \",fill:\"#7A5338\",transform:\"translate(469.1875,68.9375)\"})),_path650||(_path650=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C0.67 8.58 0.34 17.16 0 26 C-0.99 26 -1.98 26 -3 26 C-3.33 36.89 -3.66 47.78 -4 59 C-4.33 59 -4.66 59 -5 59 C-6.11003503 52.72164185 -6.18355827 46.55339621 -6.1875 40.1875 C-6.19974609 39.15818359 -6.21199219 38.12886719 -6.22460938 37.06835938 C-6.23558308 31.28521655 -5.7806858 25.98289256 -4.51000977 20.34204102 C-3.72037126 16.71590308 -3.30136409 13.05850612 -2.875 9.375 C-2.78863281 8.65699219 -2.70226562 7.93898438 -2.61328125 7.19921875 C-2.40536235 5.46656128 -2.2021513 3.73333985 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#FCCF92\",transform:\"translate(340,368)\"})),_path651||(_path651=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C8.38813393 -0.64634594 15.10953428 0.36208854 22.94921875 3.06982422 C29.55011697 5.3101 36.06059905 6.27353146 43 7 C42.67 7.66 42.34 8.32 42 9 C37.02770893 10.10770585 33.1277164 9.90549694 28.18359375 8.8203125 C26.92482422 8.55089844 25.66605469 8.28148437 24.36914062 8.00390625 C23.05850254 7.71134581 21.7479563 7.41837364 20.4375 7.125 C19.1232917 6.83871755 17.80883958 6.55355198 16.49414062 6.26953125 C14.07219813 5.7456667 11.65139461 5.21648657 9.23217773 4.68017578 C6.16409771 4.03453253 3.09617126 3.49119555 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#B19C83\",transform:\"translate(213,247)\"})),_path652||(_path652=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-0.55872803 2.03440186 -1.11745605 2.06880371 -1.69311523 2.10424805 C-16.19429004 2.81857429 -16.19429004 2.81857429 -29 9 C-30.34519608 9.78638342 -31.69900783 10.55828484 -33.0625 11.3125 C-34.031875 11.869375 -35.00125 12.42625 -36 13 C-36 12.01 -36 11.02 -36 10 C-40.62 10 -45.24 10 -50 10 C-50 9.67 -50 9.34 -50 9 C-45.38 8.67 -40.76 8.34 -36 8 C-36 7.34 -36 6.68 -36 6 C-34 4.375 -34 4.375 -32 3 C-32 3.66 -32 4.32 -32 5 C-30.92298828 4.45859375 -30.92298828 4.45859375 -29.82421875 3.90625 C-19.75436655 -0.6082541 -10.86170239 -0.51613158 0 0 Z \",fill:\"#151011\",transform:\"translate(398,462)\"})),_path653||(_path653=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C8.00022602 0.60247487 15.76276936 1.9979424 23.625 3.5625 C24.81996094 3.79646484 26.01492188 4.03042969 27.24609375 4.27148438 C30.16489275 4.84356898 33.0828012 5.41982075 36 6 C36 6.33 36 6.66 36 7 C33.69 7.66 31.38 8.32 29 9 C28.67 8.01 28.34 7.02 28 6 C25.36 6 22.72 6 20 6 C20 6.66 20 7.32 20 8 C20.66 8.33 21.32 8.66 22 9 C18.73109963 10.63445018 15.52279804 9.15743916 12.125 8.3125 C11.04412109 8.06983398 11.04412109 8.06983398 9.94140625 7.82226562 C5.6004217 6.75500699 2.79911274 5.71505277 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#8D5E44\",transform:\"translate(540,319)\"})),_path654||(_path654=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.93 0.495 6.93 0.495 14 1 C14.33 2.32 14.66 3.64 15 5 C15.78375 4.938125 16.5675 4.87625 17.375 4.8125 C18.674375 4.9053125 18.674375 4.9053125 20 5 C22.29013653 8.4352048 22.17842973 9.985331 22 14 C21.01 13.34 20.02 12.68 19 12 C19 10.68 19 9.36 19 8 C12.73 8 6.46 8 0 8 C0 5.36 0 2.72 0 0 Z \",fill:\"#2A0307\",transform:\"translate(94,308)\"})),_path655||(_path655=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-3.53983412 2.35988941 -6.72379981 3.03789966 -10.8203125 4.0234375 C-13.34070456 4.79751368 -15.47686287 5.64447798 -17.84765625 6.75 C-24.79262727 9.917244 -32.08559886 12.19527297 -39.3125 14.625 C-41.49411347 15.36016394 -43.67526293 16.09660383 -45.85527039 16.83651733 C-47.20212588 17.29351895 -48.54991206 17.74778992 -49.89875793 18.19888306 C-53.06598593 19.2722181 -56.02176322 20.48874578 -59 22 C-61.140625 22.1953125 -61.140625 22.1953125 -63.25 22.125 C-64.4875 22.08375 -65.725 22.0425 -67 22 C-66 20 -66 20 -62.2734375 18.66796875 C-60.64278509 18.16738773 -59.00978725 17.67440786 -57.375 17.1875 C-55.6208139 16.64934889 -53.86691011 16.1102767 -52.11328125 15.5703125 C-51.2413916 15.30379883 -50.36950195 15.03728516 -49.47119141 14.76269531 C-39.20926224 11.59550832 -29.0803888 8.00805737 -18.96313477 4.41040039 C-5.53669746 -0.33555742 -5.53669746 -0.33555742 0 0 Z \",fill:\"#523F38\",transform:\"translate(431,220)\"})),_path656||(_path656=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97550031 3.0684847 3.96474513 4.46236331 4.25 8.8125 C4.1675 9.864375 4.085 10.91625 4 12 C4.99 12 5.98 12 7 12 C9.76081837 18.3618858 10.63176001 24.09232563 11 31 C7.535 32.485 7.535 32.485 4 34 C3.94465088 33.3702124 3.88930176 32.7404248 3.83227539 32.09155273 C3.57762764 29.20669312 3.32008608 26.32209868 3.0625 23.4375 C2.97548828 22.44685547 2.88847656 21.45621094 2.79882812 20.43554688 C2.18109116 13.54892372 1.43643421 6.77176129 0 0 Z \",fill:\"#591620\",transform:\"translate(292,392)\"})),_path657||(_path657=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.07347656 1.86591797 2.07347656 1.86591797 2.1484375 3.76953125 C2.70957739 18.59309153 2.70957739 18.59309153 6 33 C5 34 5 34 2.93359375 34.09765625 C2.10988281 34.08605469 1.28617188 34.07445312 0.4375 34.0625 C-0.38878906 34.05347656 -1.21507812 34.04445313 -2.06640625 34.03515625 C-2.70449219 34.02355469 -3.34257813 34.01195312 -4 34 C-3.34 32.02 -2.68 30.04 -2 28 C-1.34 28 -0.68 28 0 28 C-1.25541557 25.48916886 -2.50063488 25.12874554 -5 24 C-3.68 24 -2.36 24 -1 24 C-1.00523682 23.30849854 -1.01047363 22.61699707 -1.01586914 21.90454102 C-1.036575 18.79053648 -1.04963963 15.67654639 -1.0625 12.5625 C-1.07087891 11.47388672 -1.07925781 10.38527344 -1.08789062 9.26367188 C-1.09111328 8.22919922 -1.09433594 7.19472656 -1.09765625 6.12890625 C-1.10289307 5.17056885 -1.10812988 4.21223145 -1.11352539 3.22485352 C-1 1 -1 1 0 0 Z \",fill:\"#1E0A03\",transform:\"translate(605,258)\"})),_path658||(_path658=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 2.64 0.66 5.28 1 8 C0.01 8.33 -0.98 8.66 -2 9 C-2 7.35 -2 5.7 -2 4 C-4.88575819 4.39803561 -5.82189513 4.79009069 -7.75 7.0625 C-8.1625 7.701875 -8.575 8.34125 -9 9 C-8.34 10.32 -7.68 11.64 -7 13 C-3.04 13 0.92 13 5 13 C5 12.34 5 11.68 5 11 C5.66 11 6.32 11 7 11 C7 11.66 7 12.32 7 13 C11.95 13 16.9 13 22 13 C20 15 20 15 16.28466797 15.13525391 C14.6868607 15.09288067 13.08932853 15.03920509 11.4921875 14.9765625 C10.65156769 14.95153656 9.81094788 14.92651062 8.94485474 14.90072632 C6.25449942 14.81841854 3.56486653 14.72187164 0.875 14.625 C-0.94658487 14.56677139 -2.76819957 14.50946789 -4.58984375 14.453125 C-9.06031288 14.31282386 -13.53018527 14.15974899 -18 14 C-18 13.01 -18 12.02 -18 11 C-17.34 11 -16.68 11 -16 11 C-16 11.66 -16 12.32 -16 13 C-14.35 12.67 -12.7 12.34 -11 12 C-11.33 10.02 -11.66 8.04 -12 6 C-12.99 6 -13.98 6 -15 6 C-14.67 5.01 -14.34 4.02 -14 3 C-10.6875 1.875 -10.6875 1.875 -7 1 C-5.88625 0.690625 -5.88625 0.690625 -4.75 0.375 C-3 0 -3 0 0 0 Z \",fill:\"#A68C53\",transform:\"translate(121,255)\"})),_path659||(_path659=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C1.98 1.67 3.96 1.34 6 1 C6 1.66 6 2.32 6 3 C6.60328125 2.7834375 7.2065625 2.566875 7.828125 2.34375 C8.62734375 2.0653125 9.4265625 1.786875 10.25 1.5 C11.03890625 1.2215625 11.8278125 0.943125 12.640625 0.65625 C15 0 15 0 19 0 C19 0.66 19 1.32 19 2 C17.83984375 2.38091797 17.83984375 2.38091797 16.65625 2.76953125 C9.59444223 5.0992853 9.59444223 5.0992853 2.625 7.6875 C-0.62980564 8.86596411 -3.57574716 9.5719684 -7 10 C-5.68 8.68 -4.36 7.36 -3 6 C-2.34 6.33 -1.68 6.66 -1 7 C-1 6.01 -1 5.02 -1 4 C-1.96099609 4.433125 -1.96099609 4.433125 -2.94140625 4.875 C-8.23914432 7.14884287 -12.23372609 8.50141512 -18 8 C-14.98672998 5.5708627 -11.9594495 3.90815875 -8.4375 2.3125 C-7.01244141 1.65701172 -7.01244141 1.65701172 -5.55859375 0.98828125 C-3 0 -3 0 0 0 Z \",fill:\"#301D1B\",transform:\"translate(437,209)\"})),_path660||(_path660=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.7031975 -0.72849787 5.43981431 -1.02736787 9 0 C13.31589685 3.28310441 16.79011272 7.66815211 20 12 C20 12.66 20 13.32 20 14 C19.01 14 18.02 14 17 14 C17 14.66 17 15.32 17 16 C16.01 16.33 15.02 16.66 14 17 C12.34049873 15.10342712 10.68126168 13.20663327 9.0234375 11.30859375 C7.67963494 9.77541361 6.33070078 8.24671536 4.9765625 6.72265625 C4.34492187 6.00980469 3.71328125 5.29695312 3.0625 4.5625 C2.47597656 3.90378906 1.88945313 3.24507813 1.28515625 2.56640625 C0 1 0 1 0 0 Z \",fill:\"#E4B779\",transform:\"translate(57,0)\"})),_path661||(_path661=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C1.58997722 16.8929385 1.58997722 16.8929385 -3 24 C-3.66 24 -4.32 24 -5 24 C-5.185625 24.804375 -5.185625 24.804375 -5.375 25.625 C-6.12206016 28.4638286 -7.05303364 31.22223202 -8 34 C-9.25180279 29.78080897 -8.67252421 26.03911435 -8.0625 21.75 C-7.96259766 21.00492187 -7.86269531 20.25984375 -7.75976562 19.4921875 C-7.51319844 17.66054558 -7.25749609 15.83013749 -7 14 C-6.01 13.67 -5.02 13.34 -4 13 C-3.87882813 12.22914063 -3.75765625 11.45828125 -3.6328125 10.6640625 C-3.38144531 9.15972656 -3.38144531 9.15972656 -3.125 7.625 C-2.96257812 6.62726563 -2.80015625 5.62953125 -2.6328125 4.6015625 C-2 2 -2 2 0 0 Z \",fill:\"#E71C24\",transform:\"translate(161,454)\"})),_path662||(_path662=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.96 0 7.92 0 12 0 C12 3.63 12 7.26 12 11 C13.65 11 15.3 11 17 11 C17 13.64 17 16.28 17 19 C11.46153846 18.38461538 11.46153846 18.38461538 9.125 16.4375 C8.75375 15.963125 8.3825 15.48875 8 15 C8.66 14.67 9.32 14.34 10 14 C9.65213292 12.02463255 9.65213292 12.02463255 9 10 C8.34 9.67 7.68 9.34 7 9 C6.67 8.01 6.34 7.02 6 6 C6 6.99 6 7.98 6 9 C5.34 9 4.68 9 4 9 C3.87625 7.865625 3.7525 6.73125 3.625 5.5625 C3.41875 4.386875 3.2125 3.21125 3 2 C2.34 1.67 1.68 1.34 1 1 C1 2.98 1 4.96 1 7 C0.67 7 0.34 7 0 7 C0 4.69 0 2.38 0 0 Z \",fill:\"#D19768\",transform:\"translate(307,459)\"})),_path663||(_path663=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.95107685 0.70587642 9.30599533 2.62288854 13.875 4.5625 C14.71562988 4.91747559 15.55625977 5.27245117 16.42236328 5.63818359 C22.34579939 8.18417271 28.03892365 11.01145503 33.68334961 14.12133789 C39.647447 17.40294006 45.78034432 20.23104705 52 23 C48.06665505 24.54660651 45.56847721 23.38610354 41.75 21.875 C40.67234375 21.45992188 39.5946875 21.04484375 38.484375 20.6171875 C35.87119501 19.40434387 33.78183337 18.24404001 31.41796875 16.671875 C24.78370215 12.40163415 17.23786488 9.84118329 9.93945312 6.9296875 C8.80572266 6.465625 7.67199219 6.0015625 6.50390625 5.5234375 C4.95425171 4.903479 4.95425171 4.903479 3.37329102 4.27099609 C1 3 1 3 0 0 Z \",fill:\"#B77E5A\",transform:\"translate(554,432)\"})),_path664||(_path664=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C13.365 0.495 13.365 0.495 27 1 C27 1.33 27 1.66 27 2 C42.84 2.495 42.84 2.495 59 3 C59 3.33 59 3.66 59 4 C55.34634644 4.85005407 52.03827675 5.09784309 48.29174805 5.02172852 C47.17096359 5.00163223 46.05017914 4.98153595 44.89543152 4.96083069 C43.0967437 4.92027809 43.0967437 4.92027809 41.26171875 4.87890625 C40.02581497 4.85529526 38.78991119 4.83168427 37.51655579 4.80735779 C34.24334258 4.7438506 30.97027266 4.67562859 27.69720459 4.60510254 C24.35224932 4.53419481 21.00717865 4.46960547 17.66210938 4.40429688 C11.10794768 4.27525518 4.5539364 4.1399946 -2 4 C-1.34 2.68 -0.68 1.36 0 0 Z \",fill:\"#051016\",transform:\"translate(226,428)\"})),_path665||(_path665=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-0.99 2 -1.98 2 -3 2 C-3.66 7.28 -4.32 12.56 -5 18 C-2.69 18 -0.38 18 2 18 C0.68 18.33 -0.64 18.66 -2 19 C-2 19.66 -2 20.32 -2 21 C-1.34 21.66 -0.68 22.32 0 23 C-3.58326501 23.05814085 -7.16640838 23.09364357 -10.75 23.125 C-11.76578125 23.14175781 -12.7815625 23.15851563 -13.828125 23.17578125 C-14.8078125 23.18222656 -15.7875 23.18867188 -16.796875 23.1953125 C-18.14797363 23.21102295 -18.14797363 23.21102295 -19.52636719 23.22705078 C-22.13926856 22.98721676 -23.75664666 22.32312064 -26 21 C-25.67 20.34 -25.34 19.68 -25 19 C-18.07 19.495 -18.07 19.495 -11 20 C-10.67 17.36 -10.34 14.72 -10 12 C-9.67 12 -9.34 12 -9 12 C-9 14.31 -9 16.62 -9 19 C-8.34 19 -7.68 19 -7 19 C-7 13.06 -7 7.12 -7 1 C-4 0 -4 0 0 0 Z \",fill:\"#46703B\",transform:\"translate(92,270)\"})),_path666||(_path666=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.66 0.66 -1.32 1.32 -2 2 C0.31 2 2.62 2 5 2 C4.67 4.64 4.34 7.28 4 10 C2.741875 9.690625 1.48375 9.38125 0.1875 9.0625 C-5.17065177 7.85947548 -10.5304832 7.38848904 -16 7 C-16 5.02 -16 3.04 -16 1 C-10.61509359 0.08342019 -5.45769811 -0.11138159 0 0 Z \",fill:\"#475D42\",transform:\"translate(416,266)\"})),_path667||(_path667=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 3.3 0 6.6 0 10 C1.98 10 3.96 10 6 10 C6 10.33 6 10.66 6 11 C5.34773437 11.12117187 4.69546875 11.24234375 4.0234375 11.3671875 C0.18156168 12.10383036 -3.49228395 12.8208061 -7.1875 14.125 C-10.55492193 15.17264238 -13.49443607 15.14022256 -17 15 C-17 14.34 -17 13.68 -17 13 C-18.65 13 -20.3 13 -22 13 C-22 12.67 -22 12.34 -22 12 C-16.555 11.505 -16.555 11.505 -11 11 C-11 10.01 -11 9.02 -11 8 C-8.03 8 -5.06 8 -2 8 C-2.33 7.34 -2.66 6.68 -3 6 C-7.62 6 -12.24 6 -17 6 C-13.79357059 3.86238039 -11.0559142 2.97682576 -7.375 1.875 C-6.20710937 1.52179688 -5.03921875 1.16859375 -3.8359375 0.8046875 C-1 0 -1 0 0 0 Z \",fill:\"#363A35\",transform:\"translate(522,207)\"})),_path668||(_path668=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-3.73644752 3.03403441 -7.86034336 5.25253199 -12.0625 7.5625 C-12.84383301 7.99433594 -13.62516602 8.42617187 -14.43017578 8.87109375 C-23.21871642 13.70645063 -32.08478546 18.4024168 -41 23 C-41.67885254 23.39251953 -42.35770508 23.78503906 -43.05712891 24.18945312 C-45 25 -45 25 -48 24 C-46.31970703 23.07767578 -46.31970703 23.07767578 -44.60546875 22.13671875 C-43.1326648 21.32057898 -41.66001666 20.50415799 -40.1875 19.6875 C-39.44951172 19.28337891 -38.71152344 18.87925781 -37.95117188 18.46289062 C-37.23896484 18.06650391 -36.52675781 17.67011719 -35.79296875 17.26171875 C-35.1383667 16.90037842 -34.48376465 16.53903809 -33.80932617 16.16674805 C-31.93302437 14.95681062 -30.55329503 13.59343606 -29 12 C-27.48762172 11.15372335 -25.94163029 10.36604099 -24.375 9.625 C-20.92814082 7.95440548 -17.53531884 6.2367686 -14.1875 4.375 C-13.08728516 3.76398438 -13.08728516 3.76398438 -11.96484375 3.140625 C-10.35141457 2.2040021 -8.79139929 1.17595406 -7.25 0.125 C-4.41801144 -1.29099428 -2.96467558 -0.93175518 0 0 Z \",fill:\"#494038\",transform:\"translate(463,172)\"})),_path669||(_path669=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 3.96 1 7.92 1 12 C1.94875 12.309375 2.8975 12.61875 3.875 12.9375 C7 14 7 14 9 15 C8.34 14.01 7.68 13.02 7 12 C10.83663072 13.34929464 13.65172569 15.07751025 16.8125 17.625 C17.60269531 18.25664062 18.39289063 18.88828125 19.20703125 19.5390625 C19.79871094 20.02117187 20.39039063 20.50328125 21 21 C20.67 23.31 20.34 25.62 20 28 C18.51719804 27.21516341 17.0388502 26.42190666 15.5625 25.625 C14.73878906 25.18414062 13.91507812 24.74328125 13.06640625 24.2890625 C11 23 11 23 10 21 C7.50080428 19.40329162 5.08337108 18.03511654 2.34765625 16.8828125 C0 15 0 15 -0.48828125 11.42578125 C-0.45514248 10.05383624 -0.39563595 8.6823247 -0.3125 7.3125 C-0.27866211 6.2596582 -0.27866211 6.2596582 -0.24414062 5.18554688 C-0.18531647 3.4561167 -0.09563389 1.72778562 0 0 Z \",fill:\"#67412F\",transform:\"translate(477,463)\"})),_path670||(_path670=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.12375 1.423125 0.12375 1.423125 0.25 2.875 C0.4975 3.90625 0.745 4.9375 1 6 C2.32 6.66 3.64 7.32 5 8 C-2.26 8 -9.52 8 -17 8 C-17.33 6.68 -17.66 5.36 -18 4 C-11.97181491 -0.28670939 -7.28695785 -0.474377 0 0 Z \",fill:\"#D19783\",transform:\"translate(389,465)\"})),_path671||(_path671=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 3.63 0 7.26 0 11 C2.31 11.33 4.62 11.66 7 12 C7 12.33 7 12.66 7 13 C5.35 13.33 3.7 13.66 2 14 C4.97 14.33 7.94 14.66 11 15 C11 15.66 11 16.32 11 17 C14.96 17 18.92 17 23 17 C23 17.66 23 18.32 23 19 C13.1 19 3.2 19 -7 19 C-7 18.34 -7 17.68 -7 17 C-5.68 17 -4.36 17 -3 17 C-3 11.72 -3 6.44 -3 1 C-1 0 -1 0 0 0 Z \",fill:\"#430706\",transform:\"translate(7,385)\"})),_path672||(_path672=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C9.34956835 0.51515793 18.68180768 1.05409279 28 2 C28 2.33 28 2.66 28 3 C27.14277344 3.03738281 26.28554688 3.07476562 25.40234375 3.11328125 C18.85590436 3.48968306 13.87118981 4.12686456 8 7 C6.68 7 5.36 7 4 7 C4 9.97 4 12.94 4 16 C3.01 16 2.02 16 1 16 C0.14701624 12.32612505 -0.10789471 8.9552607 -0.0625 5.1875 C-0.05347656 4.21167969 -0.04445313 3.23585938 -0.03515625 2.23046875 C-0.02355469 1.49441406 -0.01195312 0.75835937 0 0 Z \",fill:\"#100905\",transform:\"translate(339,432)\"})),_path673||(_path673=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3.33 4.62 3.66 9.24 4 14 C5.28612676 12.94021067 5.28612676 12.94021067 5.09765625 10.49609375 C5.08605469 9.48675781 5.07445312 8.47742188 5.0625 7.4375 C5.05347656 6.42558594 5.04445313 5.41367187 5.03515625 4.37109375 C5.02355469 3.58863281 5.01195312 2.80617187 5 2 C6.32 2.33 7.64 2.66 9 3 C8.67 5.31 8.34 7.62 8 10 C8.66 10 9.32 10 10 10 C10.66 12.64 11.32 15.28 12 18 C8.04 18 4.08 18 0 18 C0 12.06 0 6.12 0 0 Z \",fill:\"#372D24\",transform:\"translate(0,251)\"})),_path674||(_path674=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C2.68956026 6.92601755 2.23642131 13.21864831 -0.234375 19.72265625 C-1.68068605 24.02469371 -2.28938689 28.52731751 -3 33 C-4.32 32.67 -5.64 32.34 -7 32 C-6.47392257 21.0575895 -3.5723505 10.31656376 0 0 Z \",fill:\"#53372B\",transform:\"translate(231,528)\"})),_path675||(_path675=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-2 2 -4 4 -6 6 C-8.78520733 5.93488357 -11.53465121 5.80760304 -14.3125 5.625 C-15.47168945 5.55925781 -15.47168945 5.55925781 -16.65429688 5.4921875 C-20.23547695 5.27048074 -23.52803643 4.95091687 -27 4 C-26.67 2.68 -26.34 1.36 -26 0 C-17.19127807 -1.04865737 -8.82248707 -0.84831606 0 0 Z \",fill:\"#774431\",transform:\"translate(375,455)\"})),_path676||(_path676=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4 1.32 4 2.64 4 4 C3.34 4 2.68 4 2 4 C2 4.66 2 5.32 2 6 C1.34 6 0.68 6 0 6 C0 6.99 0 7.98 0 9 C0.66 9 1.32 9 2 9 C1.67 9.515625 1.34 10.03125 1 10.5625 C-0.32010877 13.78026512 -0.13242105 16.5570528 0 20 C0.66 20 1.32 20 2 20 C2.45375 20.804375 2.9075 21.60875 3.375 22.4375 C4.73420995 25.15236193 4.73420995 25.15236193 7.1875 25.8125 C8.0846875 25.9053125 8.0846875 25.9053125 9 26 C9 26.66 9 27.32 9 28 C7.35 28 5.7 28 4 28 C4 27.34 4 26.68 4 26 C3.34 26 2.68 26 2 26 C2 25.34 2 24.68 2 24 C1.34 24 0.68 24 0 24 C0 23.34 0 22.68 0 22 C-0.99 22 -1.98 22 -3 22 C-4.9673374 18.71073629 -5.24447228 16.24428419 -5.1875 12.4375 C-5.18105469 11.48746094 -5.17460938 10.53742188 -5.16796875 9.55859375 C-5 7 -5 7 -4 4 C-3.34 4 -2.68 4 -2 4 C-2 3.34 -2 2.68 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#221314\",transform:\"translate(78,320)\"})),_path677||(_path677=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C9.35775436 0.40685889 17.92982326 1.60438853 27 4 C27 4.99 27 5.98 27 7 C23.04 7 19.08 7 15 7 C14.67 6.01 14.34 5.02 14 4 C12.35 4 10.7 4 9 4 C8.34 5.98 7.68 7.96 7 10 C7.66 10 8.32 10 9 10 C8.67 11.32 8.34 12.64 8 14 C4.37 13.01 0.74 12.02 -3 11 C-3 10.67 -3 10.34 -3 10 C-1.02 9.34 0.96 8.68 3 8 C2.37063561 5.06296616 1.37579827 2.66211372 0 0 Z \",fill:\"#C1D0A0\",transform:\"translate(497,303)\"})),_path678||(_path678=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0 5.28 0 8 0 C7.67 2.31 7.34 4.62 7 7 C6.34 7 5.68 7 5 7 C2.49716669 15.09628653 0.92160496 23.31715472 -0.55371094 31.64916992 C-1.33870879 35.97899834 -2.11056206 39.98599407 -4 44 C-4.66 43.67 -5.32 43.34 -6 43 C-5.57242595 40.01911141 -5.13322963 37.04068357 -4.6875 34.0625 C-4.56955078 33.23169922 -4.45160156 32.40089844 -4.33007812 31.54492188 C-3.56475544 26.5016416 -2.38485146 21.90113528 -0.68432617 17.09594727 C0.29846946 14.08585076 0.75895853 11.0691492 1.1875 7.9375 C1.34605469 6.81214844 1.50460938 5.68679688 1.66796875 4.52734375 C1.77753906 3.69332031 1.88710937 2.85929688 2 2 C1.34 2 0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#634132\",transform:\"translate(232,526)\"})),_path679||(_path679=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.54737841 -0.15856416 12.61632812 0.38979817 19.0625 1.5 C19.92810547 1.64308594 20.79371094 1.78617187 21.68554688 1.93359375 C23.7914397 2.28263676 25.89588495 2.64039539 28 3 C28 3.33 28 3.66 28 4 C40.87 4.495 40.87 4.495 54 5 C54 5.33 54 5.66 54 6 C14.73518636 6.20638953 14.73518636 6.20638953 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#140D0A\",transform:\"translate(339,426)\"})),_path680||(_path680=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0 4.62 0 7 0 C7 4.95 7 9.9 7 15 C10.3 15 13.6 15 17 15 C16.67 15.66 16.34 16.32 16 17 C10.72 17 5.44 17 0 17 C0 11.39 0 5.78 0 0 Z \",fill:\"#2F6E2E\",transform:\"translate(134,270)\"})),_path681||(_path681=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.495 0.99 0.495 0.99 1 2 C0.34 2 -0.32 2 -1 2 C-1 2.66 -1 3.32 -1 4 C-3.97 4 -6.94 4 -10 4 C-10 4.66 -10 5.32 -10 6 C-27.78722212 8.90827573 -27.78722212 8.90827573 -35 8 C-35.66 7.34 -36.32 6.68 -37 6 C-30.565 5.505 -30.565 5.505 -24 5 C-24.33 4.34 -24.66 3.68 -25 3 C-16.56247415 -0.33530434 -8.93824669 -0.32177688 0 0 Z \",fill:\"#492624\",transform:\"translate(426,242)\"})),_path682||(_path682=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.804375 0.4640625 0.804375 0.4640625 1.625 0.9375 C4.3984957 2.17827439 7.00042837 2.5909675 10 3 C10.33 2.01 10.66 1.02 11 0 C14.8809456 1.29364853 15.56689295 2.90703342 17.75 6.3125 C18.38421875 7.27800781 19.0184375 8.24351562 19.671875 9.23828125 C21 12 21 12 20.703125 14.35546875 C20.47109375 14.89816406 20.2390625 15.44085938 20 16 C14.80968922 14.3825067 10.93227414 11.14487963 6.6875 7.875 C5.94693359 7.31167969 5.20636719 6.74835938 4.44335938 6.16796875 C2.62498391 4.78365711 0.81075326 3.39425774 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#4F4037\",transform:\"translate(100,120)\"})),_path683||(_path683=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.31022184 -0.1831111 8.9588784 0.21460277 14 2 C15.85625 2.185625 15.85625 2.185625 17.75 2.375 C21.90014403 2.82916671 25.3357307 4.2017129 29.16015625 5.828125 C32.4233214 7.17468559 35.72945599 8.33756054 39.0625 9.5 C45.21141605 11.6725723 51.16729272 14.08364636 57 17 C57 17.66 57 18.32 57 19 C49.2578189 17.07811518 41.99587899 14.53056165 34.625 11.5 C27.37245431 8.58548537 20.43077072 6.05220851 12.75 4.55078125 C8.40825934 3.68119967 4.2156175 2.34176539 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#744A35\",transform:\"translate(569,421)\"})),_path684||(_path684=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.94 0.66 11.88 1.32 18 2 C16 4 16 4 13.8359375 4.1953125 C12.61777344 4.16050781 12.61777344 4.16050781 11.375 4.125 C10.55773437 4.10695313 9.74046875 4.08890625 8.8984375 4.0703125 C8.27195312 4.04710937 7.64546875 4.02390625 7 4 C7.33 6.31 7.66 8.62 8 11 C4.36804504 12.21065165 2.93468371 11.62784815 -0.6875 10.5625 C-1.68136719 10.27503906 -2.67523438 9.98757813 -3.69921875 9.69140625 C-4.45847656 9.46324219 -5.21773438 9.23507812 -6 9 C-5.34 7.02 -4.68 5.04 -4 3 C-2.68 3 -1.36 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#022E1B\",transform:\"translate(448,320)\"})),_path685||(_path685=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C0.625 2.5 0.625 2.5 -1 4 C-1.66 4 -2.32 4 -3 4 C-2.67 5.32 -2.34 6.64 -2 8 C-3.19238281 8.55429688 -4.38476562 9.10859375 -5.61328125 9.6796875 C-7.1797473 10.41133032 -8.74615026 11.14310821 -10.3125 11.875 C-11.09818359 12.23980469 -11.88386719 12.60460937 -12.69335938 12.98046875 C-13.8293457 13.51220703 -13.8293457 13.51220703 -14.98828125 14.0546875 C-15.68477783 14.37937012 -16.38127441 14.70405273 -17.09887695 15.03857422 C-19.240819 16.07423509 -19.240819 16.07423509 -22 18 C-24.26171875 18.1953125 -24.26171875 18.1953125 -26.6875 18.125 C-27.89986328 18.09792969 -27.89986328 18.09792969 -29.13671875 18.0703125 C-29.75160156 18.04710937 -30.36648438 18.02390625 -31 18 C-28.09675366 15.71116161 -25.14048314 13.91544516 -21.875 12.1875 C-18.08367932 10.15263897 -14.36388259 8.04836354 -10.6875 5.8125 C-3.59607278 1.52833093 -3.59607278 1.52833093 0 0 Z \",fill:\"#332D27\",transform:\"translate(459,174)\"})),_path686||(_path686=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C11.55 0 23.1 0 35 0 C35 0.33 35 0.66 35 1 C33.35 1 31.7 1 30 1 C30 2.65 30 4.3 30 6 C29.34 6 28.68 6 28 6 C28 4.35 28 2.7 28 1 C27.505 1.165 27.01 1.33 26.5 1.5 C22.96555911 2.20688818 19.60309299 2.06005155 16 2 C16 3.32 16 4.64 16 6 C23.59 6.33 31.18 6.66 39 7 C35.17880804 9.54746131 32.23668162 9.16026557 27.83203125 8.9765625 C27.03721848 8.95153656 26.2424057 8.92651062 25.42350769 8.90072632 C22.8860675 8.8185843 20.34941247 8.72197347 17.8125 8.625 C16.0918289 8.56675443 14.37112562 8.50945128 12.65039062 8.453125 C8.43314254 8.31301433 4.21654128 8.15992578 0 8 C3.46675574 6.12379699 5.78503173 5.78059599 9.75 5.875 C10.73484375 5.89304687 11.7196875 5.91109375 12.734375 5.9296875 C13.85585938 5.96449219 13.85585938 5.96449219 15 6 C15 4.68 15 3.36 15 2 C14.25234375 2.02320313 13.5046875 2.04640625 12.734375 2.0703125 C11.74953125 2.08835937 10.7646875 2.10640625 9.75 2.125 C8.77546875 2.14820313 7.8009375 2.17140625 6.796875 2.1953125 C4 2 4 2 0 0 Z \",fill:\"#112D14\",transform:\"translate(422,267)\"})),_path687||(_path687=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.99 0 1.98 0 3 C-0.78246094 3.13277344 -1.56492187 3.26554688 -2.37109375 3.40234375 C-3.38300781 3.57894531 -4.39492188 3.75554687 -5.4375 3.9375 C-6.44683594 4.11152344 -7.45617187 4.28554687 -8.49609375 4.46484375 C-10.9287438 4.74751097 -10.9287438 4.74751097 -12 6 C-13.99958364 6.04080783 -16.00045254 6.04254356 -18 6 C-18 6.99 -18 7.98 -18 9 C-17.34 9 -16.68 9 -16 9 C-15.34 10.65 -14.68 12.3 -14 14 C-17.21451269 15.60725635 -20.43612536 15.05748185 -24 15 C-23.979375 14.195625 -23.95875 13.39125 -23.9375 12.5625 C-23.70366379 10.06645115 -23.70366379 10.06645115 -25 9 C-25 8.34 -25 7.68 -25 7 C-25.66 6.67 -26.32 6.34 -27 6 C-23.44039436 4.98949663 -19.87689478 3.99346596 -16.3125 3 C-15.30509766 2.71382812 -14.29769531 2.42765625 -13.25976562 2.1328125 C-12.28330078 1.86210937 -11.30683594 1.59140625 -10.30078125 1.3125 C-8.95753784 0.93544922 -8.95753784 0.93544922 -7.5871582 0.55078125 C-4.97810622 -0.00466098 -2.65872158 -0.1005663 0 0 Z \",fill:\"#28453E\",transform:\"translate(626,177)\"})),_path688||(_path688=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.67692308 1.47692308 4.67692308 1.47692308 6.3125 4.125 C6.539375 4.74375 6.76625 5.3625 7 6 C7.56203125 5.77957031 8.1240625 5.55914062 8.703125 5.33203125 C11.88467932 4.87211268 13.09488555 5.94138174 15.75 7.6875 C22.25132217 11.81168675 28.91233416 15.02318035 36 18 C36.66 18.33 37.32 18.66 38 19 C38 19.66 38 20.32 38 21 C36.66598223 20.56459142 35.33283226 20.12652414 34 19.6875 C33.2575 19.44386719 32.515 19.20023438 31.75 18.94921875 C25.19841347 16.68780465 19.02970711 14.13344136 12.875 10.9375 C8.31825769 8.57233376 3.94029172 6.48516558 -1 5 C-0.67 3.35 -0.34 1.7 0 0 Z \",fill:\"#835A36\",transform:\"translate(60,159)\"})),_path689||(_path689=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.33333333 0 6.66666667 0 10 0 C10 0.66 10 1.32 10 2 C10.66 2 11.32 2 12 2 C12.21278058 6.46839215 11.59138085 9.82262526 10 14 C7.69 14 5.38 14 3 14 C3 10.7 3 7.4 3 4 C2.34 3.67 1.68 3.34 1 3 C1.33 4.32 1.66 5.64 2 7 C0.68 6.34 -0.64 5.68 -2 5 C-1.34 5 -0.68 5 0 5 C0 4.34 0 3.68 0 3 C-1.32 3.33 -2.64 3.66 -4 4 C-4.33 3.34 -4.66 2.68 -5 2 C-3.35 2 -1.7 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#A98D67\",transform:\"translate(182,136)\"})),_path690||(_path690=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.28 0.33 10.56 0.66 16 1 C16 1.99 16 2.98 16 4 C12.85069107 5.04976964 10.61185544 5.10131595 7.3125 5.0625 C6.31863281 5.05347656 5.32476562 5.04445313 4.30078125 5.03515625 C3.16189453 5.01775391 3.16189453 5.01775391 2 5 C2 5.66 2 6.32 2 7 C3.32 7.66 4.64 8.32 6 9 C5.67 9.66 5.34 10.32 5 11 C2.36 11 -0.28 11 -3 11 C-2.67 9.35 -2.34 7.7 -2 6 C-2.99 6.495 -2.99 6.495 -4 7 C-5.99960012 7.039992 -8.00047242 7.04346799 -10 7 C-10.33 7.66 -10.66 8.32 -11 9 C-11 8.34 -11 7.68 -11 7 C-11.66 7 -12.32 7 -13 7 C-13 6.34 -13 5.68 -13 5 C-12.22914063 4.97421875 -11.45828125 4.9484375 -10.6640625 4.921875 C-9.66117187 4.86515625 -8.65828125 4.8084375 -7.625 4.75 C-6.62726563 4.70359375 -5.62953125 4.6571875 -4.6015625 4.609375 C-3.74304688 4.40828125 -2.88453125 4.2071875 -2 4 C-1.34 2.68 -0.68 1.36 0 0 Z \",fill:\"#B9202B\",transform:\"translate(311,447)\"})),_path691||(_path691=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.88480407 7.48658506 9.82536815 16.4844899 14 25 C12.35 25.99 10.7 26.98 9 28 C6.2289312 25.65408148 5.47940716 23.85223799 4.8125 20.3125 C4.57466797 19.10013672 4.57466797 19.10013672 4.33203125 17.86328125 C4.22246094 17.24839844 4.11289062 16.63351562 4 16 C3.34 16 2.68 16 2 16 C1.50113689 13.77691098 1.00542822 11.55323107 0.515625 9.328125 C0.12630359 7.57027986 -0.27720728 5.81556891 -0.6875 4.0625 C-1 2 -1 2 0 0 Z \",fill:\"#04322C\",transform:\"translate(494,340)\"})),_path692||(_path692=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.475 0.495 2.475 0.495 5 1 C5 1.66 5 2.32 5 3 C5.86625 3.12375 6.7325 3.2475 7.625 3.375 C10.89513853 3.98058121 13.87256899 4.88306035 17 6 C15.6875 8.5 15.6875 8.5 14 11 C13.01 11 12.02 11 11 11 C10.67 11.66 10.34 12.32 10 13 C6.7 13 3.4 13 0 13 C0 8.71 0 4.42 0 0 Z \",fill:\"#67463E\",transform:\"translate(313,337)\"})),_path693||(_path693=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-21.05066885 3.91810287 -41.88105587 4.2421043 -63 4 C-63 3.34 -63 2.68 -63 2 C-55.67179143 1.73798113 -48.34354279 1.47711413 -41.01524162 1.21769714 C-37.61202883 1.09718987 -34.20883081 0.9762934 -30.80566406 0.85449219 C-26.88871324 0.71431975 -22.97170251 0.57586761 -19.0546875 0.4375 C-17.83884979 0.39375244 -16.62301208 0.35000488 -15.37033081 0.30493164 C-13.6592363 0.24486938 -13.6592363 0.24486938 -11.91357422 0.18359375 C-10.91429901 0.14806396 -9.9150238 0.11253418 -8.88546753 0.07592773 C-5.92226317 -0.00204555 -2.96408758 -0.01293025 0 0 Z \",fill:\"#CDAE4B\",transform:\"translate(626,255)\"})),_path694||(_path694=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.57104492 0.02030273 1.57104492 0.02030273 3.17382812 0.04101562 C5.72062124 0.0759032 8.26626325 0.1249113 10.8125 0.1875 C8.84867993 1.69309539 7.02986634 3.07881683 4.8125 4.1875 C4.4825 4.8475 4.1525 5.5075 3.8125 6.1875 C-0.99353519 7.73783393 -6.19569059 7.2747355 -11.1875 7.1875 C-11.1875 6.5275 -11.1875 5.8675 -11.1875 5.1875 C-9.8675 4.8575 -8.5475 4.5275 -7.1875 4.1875 C-8.156875 4.331875 -9.12625 4.47625 -10.125 4.625 C-14.46802169 5.24797442 -18.82515234 5.72257859 -23.1875 6.1875 C-23.1875 5.1975 -23.1875 4.2075 -23.1875 3.1875 C-15.30370238 0.5978462 -8.27040707 -0.2068928 0 0 Z \",fill:\"#3E4A44\",transform:\"translate(545.1875,203.8125)\"})),_path695||(_path695=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C1.66 2 2.32 2 3 2 C4.3671875 3.57421875 4.3671875 3.57421875 5.875 5.6875 C6.40738281 6.4196875 6.93976563 7.151875 7.48828125 7.90625 C7.98714844 8.5971875 8.48601562 9.288125 9 10 C11.1183564 12.76028258 13.16548604 15.15778902 15.6875 17.5625 C17.88449912 19.87825583 18.65571773 20.90145954 19 24 C19.66 24 20.32 24 21 24 C21 25.98 21 27.96 21 30 C19.62437146 28.71034824 18.29233607 27.37310707 17 26 C17 25.34 17 24.68 17 24 C15.68 24.33 14.36 24.66 13 25 C11.82807953 23.04480616 10.6626071 21.0857461 9.5 19.125 C8.52546875 17.48917969 8.52546875 17.48917969 7.53125 15.8203125 C6 13 6 13 6 11 C5.34 11 4.68 11 4 11 C2.03810791 7.3321148 0.60698743 4.12751449 0 0 Z \",fill:\"#51352A\",transform:\"translate(465,542)\"})),_path696||(_path696=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.7636792 0.11758667 1.7636792 0.11758667 3.56298828 0.23754883 C4.66239746 0.32157959 5.76180664 0.40561035 6.89453125 0.4921875 C8.38690308 0.60216064 8.38690308 0.60216064 9.90942383 0.71435547 C10.66118896 0.84986816 11.4129541 0.98538086 12.1875 1.125 C12.6825 2.115 12.6825 2.115 13.1875 3.125 C-1.3325 3.125 -15.8525 3.125 -30.8125 3.125 C-31.1425 3.785 -31.4725 4.445 -31.8125 5.125 C-32.4725 5.125 -33.1325 5.125 -33.8125 5.125 C-33.0625 2.6875 -33.0625 2.6875 -31.8125 0.125 C-22.58875351 -3.33912199 -9.58886327 -0.68212132 0 0 Z \",fill:\"#110706\",transform:\"translate(193.8125,468.875)\"})),_path697||(_path697=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.33944736 0.28730055 4.6739143 0.61936779 7 1 C7 1.66 7 2.32 7 3 C7.66 3 8.32 3 9 3 C9 4.32 9 5.64 9 7 C7.35 7 5.7 7 4 7 C3.67 7.66 3.34 8.32 3 9 C5.64 9 8.28 9 11 9 C11 6.36 11 3.72 11 1 C11.66 1 12.32 1 13 1 C13.20496094 1.69867188 13.40992188 2.39734375 13.62109375 3.1171875 C13.89050781 4.02726562 14.15992188 4.93734375 14.4375 5.875 C14.83775391 7.23238281 14.83775391 7.23238281 15.24609375 8.6171875 C15.92613826 10.98275381 15.92613826 10.98275381 17 13 C15.10333474 12.91227545 13.20761007 12.80408699 11.3125 12.6875 C10.25675781 12.62949219 9.20101563 12.57148438 8.11328125 12.51171875 C4.73492769 11.95643103 2.75080954 11.0073475 0 9 C-1.36623674 6.26752652 -1.128426 4.01801098 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#EA7C61\",transform:\"translate(495,329)\"})),_path698||(_path698=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.62 0 9.24 0 14 0 C14 0.33 14 0.66 14 1 C11.69 1 9.38 1 7 1 C7.1546875 2.918125 7.1546875 2.918125 7.3125 4.875 C7.37050781 5.59429687 7.42851562 6.31359375 7.48828125 7.0546875 C7.87393036 9.39519216 7.87393036 9.39519216 11 11 C6.44535196 11.38762962 3.63202303 11.01285513 -0.5 9 C-4.607134 7.06071244 -7.39143267 6.35318353 -12 7 C-14.64436355 7.97594428 -17.20599457 9.04220557 -19.765625 10.22265625 C-22 11 -22 11 -25 10 C-22.58969913 6.7288774 -20.83407374 4.4386259 -17 3 C-8.78797008 2.63393626 -1.48372825 4.83267407 6 8 C6 6.02 6 4.04 6 2 C3.03 1.505 3.03 1.505 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#481812\",transform:\"translate(382,488)\"})),_path699||(_path699=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.86625 0.4021875 -0.86625 0.4021875 -1.75 0.8125 C-4.05396098 1.94184834 -4.05396098 1.94184834 -6.0625 3.625 C-8 5 -8 5 -11 5 C-11 6.98 -11 8.96 -11 11 C-5.72 11.33 -0.44 11.66 5 12 C5 11.01 5 10.02 5 9 C4.34 8.67 3.68 8.34 3 8 C3.66 7.01 4.32 6.02 5 5 C6.1577506 8.47325181 6.06866652 11.36067448 6 15 C3.47715927 14.74256727 0.95761856 14.46948683 -1.5625 14.1875 C-2.26697266 14.11724609 -2.97144531 14.04699219 -3.69726562 13.97460938 C-8.63201628 13.40608971 -12.5554161 12.24790095 -17 10 C-18.25 8.125 -18.25 8.125 -18 6 C-15.61181687 2.88812501 -13.92962925 1.26272131 -10.125 0.1875 C-6.74026483 -0.01558411 -3.3899834 -0.06779967 0 0 Z \",fill:\"#D9C786\",transform:\"translate(453,331)\"})),_path700||(_path700=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.495 0.99 0.495 0.99 1 2 C-1.64 2 -4.28 2 -7 2 C-7 3.32 -7 4.64 -7 6 C-5.948125 5.98259766 -5.948125 5.98259766 -4.875 5.96484375 C0.86113102 5.91028816 6.32778253 6.14381623 12 7 C12 7.33 12 7.66 12 8 C4.08 8 -3.84 8 -12 8 C-12 7.34 -12 6.68 -12 6 C-12.61488281 6 -13.22976562 6 -13.86328125 6 C-17.2421875 6 -20.62109375 6 -24 6 C-24.67482422 6.73669922 -24.67482422 6.73669922 -25.36328125 7.48828125 C-27.64186956 9.59284849 -29.14472562 9.30604965 -32.1875 9.1875 C-33.08855469 9.16042969 -33.98960937 9.13335937 -34.91796875 9.10546875 C-35.60503906 9.07066406 -36.29210937 9.03585937 -37 9 C-34.37638175 7.60150745 -32.32299116 6.83658407 -29.375 6.125 C-25.92657399 5.35589545 -25.92657399 5.35589545 -24.5625 2.875 C-24.376875 2.25625 -24.19125 1.6375 -24 1 C-23.34 1 -22.68 1 -22 1 C-22 1.66 -22 2.32 -22 3 C-20.84371094 2.98259766 -20.84371094 2.98259766 -19.6640625 2.96484375 C-18.66117188 2.95582031 -17.65828125 2.94679688 -16.625 2.9375 C-15.62726563 2.92589844 -14.62953125 2.91429687 -13.6015625 2.90234375 C-11 3 -11 3 -9 4 C-9 3.01 -9 2.02 -9 1 C-4.545 0.505 -4.545 0.505 0 0 Z \",fill:\"#E03729\",transform:\"translate(197,316)\"})),_path701||(_path701=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.98204842 3.28128878 1.13412615 6.26975521 1.125 9.6875 C1.12757813 10.66074219 1.13015625 11.63398438 1.1328125 12.63671875 C1 15 1 15 0 16 C0.99 16.33 1.98 16.66 3 17 C2.67 17.99 2.34 18.98 2 20 C1.34 20 0.68 20 0 20 C0.20625 20.5775 0.4125 21.155 0.625 21.75 C1.08661261 24.51967567 0.42944945 25.64561267 -1 28 C-1.33 25.69 -1.66 23.38 -2 21 C-4.97 20.67 -7.94 20.34 -11 20 C-10.01 18.515 -10.01 18.515 -9 17 C-8.34 17 -7.68 17 -7 17 C-6.86464844 16.43667969 -6.72929687 15.87335938 -6.58984375 15.29296875 C-5.98413613 12.93833053 -5.3014045 10.62875505 -4.5625 8.3125 C-4.31628906 7.52488281 -4.07007813 6.73726563 -3.81640625 5.92578125 C-3 4 -3 4 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#021D16\",transform:\"translate(459,281)\"})),_path702||(_path702=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4.33 4.62 4.66 9.24 5 14 C6.65 14.33 8.3 14.66 10 15 C10 15.66 10 16.32 10 17 C10.66 17.33 11.32 17.66 12 18 C11.34 18.33 10.68 18.66 10 19 C11.32 19.33 12.64 19.66 14 20 C14 21.32 14 22.64 14 24 C10.7 24 7.4 24 4 24 C4 23.34 4 22.68 4 22 C3.34 22 2.68 22 2 22 C2 16.72 2 11.44 2 6 C1.01 5.67 0.02 5.34 -1 5 C-0.67 3.35 -0.34 1.7 0 0 Z \",fill:\"#3E0C17\",transform:\"translate(302,456)\"})),_path703||(_path703=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.06058594 0.89203125 1.12117187 1.7840625 1.18359375 2.703125 C1.26738281 3.87359375 1.35117188 5.0440625 1.4375 6.25 C1.55931641 7.99023438 1.55931641 7.99023438 1.68359375 9.765625 C1.9355392 13.15845566 1.9355392 13.15845566 3 17 C3.66 13.04 4.32 9.08 5 5 C5.33 5 5.66 5 6 5 C6.33 10.94 6.66 16.88 7 23 C7.33 20.36 7.66 17.72 8 15 C8.33 15 8.66 15 9 15 C9 20.28 9 25.56 9 31 C8.34 31 7.68 31 7 31 C7 32.98 7 34.96 7 37 C6.34 37 5.68 37 5 37 C4.96261719 36.09636719 4.92523438 35.19273437 4.88671875 34.26171875 C4.82097656 33.08222656 4.75523437 31.90273438 4.6875 30.6875 C4.60048828 28.92986328 4.60048828 28.92986328 4.51171875 27.13671875 C3.95556161 23.72760287 3.42101044 23.21330982 1 21 C1 19.68 1 18.36 1 17 C0.34 17 -0.32 17 -1 17 C-1.02684679 14.35409986 -1.04676357 11.70846904 -1.0625 9.0625 C-1.07087891 8.30775391 -1.07925781 7.55300781 -1.08789062 6.77539062 C-1.09652441 4.85005687 -1.05224333 2.92464419 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#4A1B06\",transform:\"translate(193,411)\"})),_path704||(_path704=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0 5.94 0 9 0 C9.66 1.32 10.32 2.64 11 4 C12.99883869 4.34022786 14.99890722 4.67329097 17 5 C18.875 6.5625 18.875 6.5625 20 9 C20.23407276 11.72044561 20.13705174 14.25896515 20 17 C18.35 17 16.7 17 15 17 C14.67 15.02 14.34 13.04 14 11 C13.01 11 12.02 11 11 11 C10.34 9.68 9.68 8.36 9 7 C8.34 7 7.68 7 7 7 C7 6.01 7 5.02 7 4 C6.01 4 5.02 4 4 4 C3.67 3.34 3.34 2.68 3 2 C2.01 1.34 1.02 0.68 0 0 Z \",fill:\"#CFA591\",transform:\"translate(467,298)\"})),_path705||(_path705=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 2.31 0 4.62 0 7 C0.66 7 1.32 7 2 7 C2.33 6.34 2.66 5.68 3 5 C3.50559908 6.43554025 4.0042749 7.8735202 4.5 9.3125 C4.7784375 10.11300781 5.056875 10.91351563 5.34375 11.73828125 C6 14 6 14 6 17 C2.7 17 -0.6 17 -4 17 C-4.66 12.05 -5.32 7.1 -6 2 C-2 0 -2 0 0 0 Z \",fill:\"#5A3C31\",transform:\"translate(30,252)\"})),_path706||(_path706=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.33 0 0.66 0 1 C-1.65 1 -3.3 1 -5 1 C-4.83628906 1.92941406 -4.67257813 2.85882813 -4.50390625 3.81640625 C-3.78520824 8.84729229 -3.89243687 13.86616509 -3.9375 18.9375 C-3.94201172 19.90751953 -3.94652344 20.87753906 -3.95117188 21.87695312 C-3.9628685 24.2513676 -3.97925914 26.62565021 -4 29 C-5.95410156 28.22314453 -5.95410156 28.22314453 -8 27 C-8.57369282 24.21087642 -8.8763867 21.81523236 -9 19 C-9.03802734 18.26942383 -9.07605469 17.53884766 -9.11523438 16.78613281 C-9.20336087 14.5643659 -9.23439737 12.34837465 -9.25 10.125 C-9.270625 9.36703125 -9.29125 8.6090625 -9.3125 7.828125 C-9.328125 5.6328125 -9.328125 5.6328125 -9 2 C-5.5647952 -0.29013653 -4.014669 -0.17842973 0 0 Z \",fill:\"#2B2623\",transform:\"translate(137,117)\"})),_path707||(_path707=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C-0.328125 4.57421875 -0.328125 4.57421875 -2.25 7.6875 C-4.88107124 12.05161217 -7.1656859 16.2523635 -9 21 C-9.66 21 -10.32 21 -11 21 C-11.33 22.65 -11.66 24.3 -12 26 C-13.98 26 -15.96 26 -18 26 C-17.34 24.35 -16.68 22.7 -16 21 C-15.34 21 -14.68 21 -14 21 C-13.87753906 20.26523437 -13.75507812 19.53046875 -13.62890625 18.7734375 C-11.74679376 10.47343832 -6.56335653 5.06502204 0 0 Z \",fill:\"#5A3C2F\",transform:\"translate(84,600)\"})),_path708||(_path708=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.91691525 -0.05401695 5.83282724 -0.09368066 8.75 -0.125 C9.575 -0.14175781 10.4 -0.15851563 11.25 -0.17578125 C12.04921875 -0.18222656 12.8484375 -0.18867188 13.671875 -0.1953125 C14.4050293 -0.20578613 15.13818359 -0.21625977 15.89355469 -0.22705078 C18.29896076 0.03222456 19.91251494 0.80774075 22 2 C22 2.66 22 3.32 22 4 C23.32 4.66 24.64 5.32 26 6 C26 6.66 26 7.32 26 8 C26.99 8.33 27.98 8.66 29 9 C29 9.66 29 10.32 29 11 C28.42894531 10.7009375 27.85789062 10.401875 27.26953125 10.09375 C18.69111343 5.95957274 9.34119381 5.05866863 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#D5656A\",transform:\"translate(236,468)\"})),_path709||(_path709=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C11.91340684 -0.46166055 22.72201919 -0.29786751 34 4 C34.66 4.66 35.32 5.32 36 6 C24.08394997 6.54072832 12.73292188 4.89446549 1 3 C0.67 2.01 0.34 1.02 0 0 Z \",fill:\"#AC2A2B\",transform:\"translate(6,394)\"})),_path710||(_path710=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.62 0 9.24 0 14 0 C13.67 0.99 13.34 1.98 13 3 C9.4375 4.6875 9.4375 4.6875 6 6 C6 6.99 6 7.98 6 9 C6.65226562 9.17015625 7.30453125 9.3403125 7.9765625 9.515625 C13.36190878 11.00890686 17.40906837 12.72076312 22 16 C24.22602615 16.76939681 24.22602615 16.76939681 26 17 C26 18.32 26 19.64 26 21 C21.33333333 18.66666667 16.66666667 16.33333333 12 14 C12 13.34 12 12.68 12 12 C11.0925 12.04125 10.185 12.0825 9.25 12.125 C6.1217954 12.00468444 4.61385994 11.6085292 2 10 C2.06510417 7.98177083 2.13020833 5.96354167 2.1953125 3.9453125 C2.18331689 1.76136355 2.18331689 1.76136355 0 0 Z \",fill:\"#DFD598\",transform:\"translate(446,375)\"})),_path711||(_path711=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1 2 -1 2 -4.5625 3.375 C-10.03790723 5.09462008 -15.60072056 6.45959126 -21.17578125 7.8125 C-24.87117376 8.71161456 -28.55139765 9.66131425 -32.23046875 10.625 C-33.3073999 10.9036792 -34.38433105 11.1823584 -35.49389648 11.46948242 C-37.63978597 12.02506137 -39.78389639 12.5875646 -41.92602539 13.1574707 C-42.91465576 13.41101318 -43.90328613 13.66455566 -44.921875 13.92578125 C-45.80456055 14.15692627 -46.68724609 14.38807129 -47.59667969 14.6262207 C-50.0923853 15.01436833 -51.62771579 14.79959609 -54 14 C-46.13258805 10.97725233 -38.2115958 8.57441669 -30.0625 6.4375 C-28.97259766 6.14681641 -27.88269531 5.85613281 -26.75976562 5.55664062 C-23.50931204 4.69332942 -20.25509365 3.84562581 -17 3 C-15.3600708 2.56324951 -15.3600708 2.56324951 -13.68701172 2.11767578 C-12.10750732 1.70557861 -12.10750732 1.70557861 -10.49609375 1.28515625 C-9.55822021 1.03773682 -8.62034668 0.79031738 -7.65405273 0.53540039 C-5.02537567 0.00511902 -2.67326657 -0.09957033 0 0 Z \",fill:\"#598374\",transform:\"translate(518,207)\"})),_path712||(_path712=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C2.32 2 3.64 2 5 2 C5 2.66 5 3.32 5 4 C3.68 4 2.36 4 1 4 C1 5.98 1 7.96 1 10 C0.01 10 -0.98 10 -2 10 C-2 10.66 -2 11.32 -2 12 C-4.97 12 -7.94 12 -11 12 C-11 10.35 -11 8.7 -11 7 C-10.01 6.67 -9.02 6.34 -8 6 C-8.99 5.67 -9.98 5.34 -11 5 C-11 3.68 -11 2.36 -11 1 C-8.02148438 1.04882812 -8.02148438 1.04882812 -5.04296875 1.09765625 C-2.79694539 1.08263217 -2.79694539 1.08263217 0 0 Z \",fill:\"#A17E5B\",transform:\"translate(477,70)\"})),_path713||(_path713=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.445 0.495 5.445 0.495 11 1 C8 3 8 3 6 3 C6 3.66 6 4.32 6 5 C4.71086513 5.67154933 3.41859796 6.33708859 2.125 7 C1.40570312 7.37125 0.68640625 7.7425 -0.0546875 8.125 C-2 9 -2 9 -4 9 C-4 9.66 -4 10.32 -4 11 C-6.2442597 12.56238423 -8.48147838 14.0159213 -10.8125 15.4375 C-12.09207832 16.22424173 -13.36949868 17.01450611 -14.64453125 17.80859375 C-15.50075073 18.33151001 -15.50075073 18.33151001 -16.37426758 18.86499023 C-18.18675356 20.13038254 -19.61501439 21.26857144 -21 23 C-21 24.32 -21 25.64 -21 27 C-21.99 27.33 -22.98 27.66 -24 28 C-24.4375 24.8125 -24.4375 24.8125 -24 21 C-22.33337706 19.35047063 -20.64361515 18.23551361 -18.62890625 17.04296875 C-16.83031155 16.0873756 -16.83031155 16.0873756 -16 14 C-15.01 14 -14.02 14 -13 14 C-13 13.34 -13 12.68 -13 12 C-12.01 12 -11.02 12 -10 12 C-10 11.34 -10 10.68 -10 10 C-9.34 10 -8.68 10 -8 10 C-8 9.34 -8 8.68 -8 8 C-7.28972656 7.66226563 -6.57945313 7.32453125 -5.84765625 6.9765625 C-4.92855469 6.53054688 -4.00945313 6.08453125 -3.0625 5.625 C-1.68771484 4.96371094 -1.68771484 4.96371094 -0.28515625 4.2890625 C2.12903802 3.20800838 2.12903802 3.20800838 3 1 C2.01 0.67 1.02 0.34 0 0 Z \",fill:\"#31221D\",transform:\"translate(24,514)\"})),_path714||(_path714=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.27 0 12.54 0 19 0 C19 1.65 19 3.3 19 5 C16.38307526 7.61692474 9.91685711 6.97794028 6.40234375 7.0625 C4.26812748 7.0625 2.13394746 7.03387218 0 7 C0 4.69 0 2.38 0 0 Z \",fill:\"#DD8068\",transform:\"translate(415,463)\"})),_path715||(_path715=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C0.53144475 6.59539189 -3.9615212 8.96582173 -9 12 C-9.81984375 12.50402344 -10.6396875 13.00804687 -11.484375 13.52734375 C-16.00965807 16.19666922 -16.00965807 16.19666922 -18 17 C-18.99 16.67 -19.98 16.34 -21 16 C-20.01 15.01 -19.02 14.02 -18 13 C-18.33 12.01 -18.66 11.02 -19 10 C-18.19175781 9.60167969 -17.38351563 9.20335937 -16.55078125 8.79296875 C-15.48214844 8.26316406 -14.41351563 7.73335938 -13.3125 7.1875 C-12.25675781 6.66542969 -11.20101562 6.14335937 -10.11328125 5.60546875 C-7.33146739 4.17093237 -4.66918028 2.63142542 -2 1 C-1.34 0.67 -0.68 0.34 0 0 Z \",fill:\"#4C3329\",transform:\"translate(75,437)\"})),_path716||(_path716=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 2.97 0 5.94 0 9 C-0.66 8.67 -1.32 8.34 -2 8 C-4.33556463 8.99477753 -6.66875071 9.99515117 -9 11 C-10.32 11 -11.64 11 -13 11 C-13 11.66 -13 12.32 -13 13 C-14.65 13 -16.3 13 -18 13 C-17.5875 12.319375 -17.175 11.63875 -16.75 10.9375 C-15.05501846 8.23262179 -15.05501846 8.23262179 -14.19140625 6.14453125 C-13.3125 4.25 -13.3125 4.25 -11 1 C-7.40232926 -0.24534757 -3.77627994 0 0 0 Z \",fill:\"#563E30\",transform:\"translate(147,412)\"})),_path717||(_path717=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.63164062 0.4125 1.26328125 0.825 1.9140625 1.25 C9.45722218 6.11935956 17.17668708 10.60295551 25 15 C25 15.66 25 16.32 25 17 C22.23723823 16.47731534 19.6739124 15.89130413 17 15 C14.94106379 14.77674186 12.87766347 14.59294241 10.8125 14.4375 C9.72582031 14.35371094 8.63914063 14.26992188 7.51953125 14.18359375 C6.68808594 14.12300781 5.85664063 14.06242187 5 14 C5 12.02 5 10.04 5 8 C4.34 8 3.68 8 3 8 C3 6.68 3 5.36 3 4 C1.68 4 0.36 4 -1 4 C-0.67 2.68 -0.34 1.36 0 0 Z \",fill:\"#0F0C0C\",transform:\"translate(139,336)\"})),_path718||(_path718=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.96175123 0.61277612 4.38058783 1.25372522 7 3 C7 3.66 7 4.32 7 5 C7.99 5 8.98 5 10 5 C11.47075246 9.41225737 12.36884358 12.48281619 11 17 C8.69 17 6.38 17 4 17 C3.86722656 16.44441406 3.73445313 15.88882812 3.59765625 15.31640625 C2.72970477 11.95238514 1.66256466 8.65361484 0.62109375 5.33984375 C0 3 0 3 0 0 Z \",fill:\"#EFF1C6\",transform:\"translate(507,327)\"})),_path719||(_path719=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.01217112 0.64449607 5.51655836 1.65022182 8.25 3.0625 C8.95640625 3.42472656 9.6628125 3.78695313 10.390625 4.16015625 C10.92171875 4.43730469 11.4528125 4.71445312 12 5 C11.35546875 5.22429687 10.7109375 5.44859375 10.046875 5.6796875 C7.75611148 6.82889456 7.75611148 6.82889456 7.390625 9.3828125 C7.32101562 10.74019531 7.32101562 10.74019531 7.25 12.125 C7.19328125 13.03507812 7.1365625 13.94515625 7.078125 14.8828125 C7.05234375 15.58148438 7.0265625 16.28015625 7 17 C2.69235185 15.43358249 -1.06171464 13.31663844 -5 11 C-4.01 10.67 -3.02 10.34 -2 10 C-2 9.34 -2 8.68 -2 8 C-1.01 8 -0.02 8 1 8 C1 7.34 1 6.68 1 6 C0.34 6 -0.32 6 -1 6 C-0.67 4.02 -0.34 2.04 0 0 Z \",fill:\"#AF785D\",transform:\"translate(361,302)\"})),_path720||(_path720=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0.33 3.3 0.66 5 1 C5.66 5.62 6.32 10.24 7 15 C3.37 15.33 -0.26 15.66 -4 16 C-3.53478901 9.95225709 -2.66426443 5.44436644 0 0 Z \",fill:\"#060908\",transform:\"translate(469,275)\"})),_path721||(_path721=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.47532298 0.3910945 8.0726532 2.24340741 12 6 C12.59039062 6.81339844 13.18078125 7.62679687 13.7890625 8.46484375 C16.36494661 11.41846352 18.71478913 12.66017318 22.25 14.3125 C23.32765625 14.82425781 24.4053125 15.33601562 25.515625 15.86328125 C26.33546875 16.23839844 27.1553125 16.61351562 28 17 C24.06204091 18.22419163 21.83887763 17.48320272 18 16 C18 15.34 18 14.68 18 14 C16.68 14 15.36 14 14 14 C14 13.34 14 12.68 14 12 C13.01 12 12.02 12 11 12 C11 11.34 11 10.68 11 10 C10.01 10.33 9.02 10.66 8 11 C8 10.34 8 9.68 8 9 C6.35 9 4.7 9 3 9 C2.731875 8.360625 2.46375 7.72125 2.1875 7.0625 C1.11332248 4.66868314 1.11332248 4.66868314 -2 4 C-1.34 2.68 -0.68 1.36 0 0 Z \",fill:\"#62462E\",transform:\"translate(114,180)\"})),_path722||(_path722=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C1.99 3.33 2.98 3.66 4 4 C4.99 5.485 4.99 5.485 6 7 C5.67 7.99 5.34 8.98 5 10 C5 9.34 5 8.68 5 8 C3.68 8 2.36 8 1 8 C1.33 12.95 1.66 17.9 2 23 C1.34 23.33 0.68 23.66 0 24 C-0.33 20.7 -0.66 17.4 -1 14 C-1.06058594 15.07121094 -1.12117188 16.14242188 -1.18359375 17.24609375 C-1.26798537 18.64324391 -1.35263406 20.04037857 -1.4375 21.4375 C-1.47681641 22.14455078 -1.51613281 22.85160156 -1.55664062 23.58007812 C-1.88671875 28.88671875 -1.88671875 28.88671875 -3 30 C-2.34 30.66 -1.68 31.32 -1 32 C-7.435 32.495 -7.435 32.495 -14 33 C-14 32.34 -14 31.68 -14 31 C-10.7 30.34 -7.4 29.68 -4 29 C-4.33 27.02 -4.66 25.04 -5 23 C-4.34 23 -3.68 23 -3 23 C-3.05220703 21.26363281 -3.05220703 21.26363281 -3.10546875 19.4921875 C-3.13362207 17.9531396 -3.16092056 16.41407589 -3.1875 14.875 C-3.21263672 14.11445313 -3.23777344 13.35390625 -3.26367188 12.5703125 C-3.32797453 7.5975739 -2.65594442 4.36383518 0 0 Z \",fill:\"#141211\",transform:\"translate(417,384)\"})),_path723||(_path723=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.28 0.33 10.56 0.66 16 1 C16 2.98 16 4.96 16 7 C16.66 7 17.32 7 18 7 C18 6.34 18 5.68 18 5 C18.66 5 19.32 5 20 5 C20 5.99 20 6.98 20 8 C13.73 8 7.46 8 1 8 C0.67 5.36 0.34 2.72 0 0 Z \",fill:\"#E9ECB5\",transform:\"translate(558,379)\"})),_path724||(_path724=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.59 0 15.18 0 23 0 C23.33 1.65 23.66 3.3 24 5 C15.75 5 7.5 5 -1 5 C-0.67 3.35 -0.34 1.7 0 0 Z \",fill:\"#A8794E\",transform:\"translate(140,362)\"})),_path725||(_path725=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.86983887 -0.14691292 11.2857977 0.37391188 17.0625 1.375 C18.72631461 1.65123683 20.39038197 1.92595526 22.0546875 2.19921875 C22.87936523 2.33505371 23.70404297 2.47088867 24.55371094 2.61083984 C30.35113627 3.53310491 36.17697662 4.26015398 42 5 C42 5.99 42 6.98 42 8 C20.03324073 6.37790204 20.03324073 6.37790204 9.1875 4.5625 C8.13187866 4.39754028 8.13187866 4.39754028 7.05493164 4.22924805 C5.10546875 3.87890625 5.10546875 3.87890625 2 3 C1.34 2.01 0.68 1.02 0 0 Z \",fill:\"#9D6B50\",transform:\"translate(584,314)\"})),_path726||(_path726=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.25677256 0.61726408 5.34696155 1.74431253 8.01171875 3.6953125 C8.76469238 4.2426001 9.51766602 4.7898877 10.29345703 5.35375977 C11.08349121 5.93826904 11.87352539 6.52277832 12.6875 7.125 C13.91122314 8.02013306 13.91122314 8.02013306 15.15966797 8.93334961 C19.6837075 12.25366663 24.16863127 15.61519762 28.56640625 19.1015625 C34.633376 23.83438321 40.8363311 28.39426459 47 33 C46.01 33.33 45.02 33.66 44 34 C42.21679688 33.05053711 42.21679688 33.05053711 40.21875 31.52734375 C39.46811279 30.96394287 38.71747559 30.40054199 37.9440918 29.82006836 C36.73426636 28.88819702 36.73426636 28.88819702 35.5 27.9375 C33.78803639 26.64546759 32.07578829 25.35381205 30.36328125 24.0625 C29.4810791 23.3921875 28.59887695 22.721875 27.68994141 22.03125 C22.61161486 18.19646357 17.45923213 14.46169918 12.3203125 10.70874023 C8.09214005 7.60241224 3.94191323 4.46562483 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#E1C586\",transform:\"translate(116,136)\"})),_path727||(_path727=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.72397533 2.61250151 9.14688729 5.42800371 13.5 8.625 C23.40724935 15.79907583 33.56705276 22.61248128 44 29 C43.01 29.66 42.02 30.32 41 31 C33.18316647 25.83825127 25.42897874 20.58634224 17.6875 15.3125 C16.74503418 14.67111084 15.80256836 14.02972168 14.83154297 13.36889648 C13.0338189 12.14277035 11.2387579 10.91272775 9.44677734 9.67822266 C7.89940666 8.61689497 6.34338653 7.56797572 4.77587891 6.53662109 C3.13166058 5.4318022 1.55622434 4.22566083 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#D0AE77\",transform:\"translate(0,53)\"})),_path728||(_path728=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.23770551 5.37951261 1.44014292 9.92246851 -0.1171875 15.0859375 C-0.3344046 15.82832672 -0.5516217 16.57071594 -0.77542114 17.33560181 C-1.23321221 18.89159953 -1.69567591 20.44622949 -2.16259766 21.99951172 C-2.87809267 24.38531243 -3.57472988 26.77606975 -4.26953125 29.16796875 C-4.7176432 30.68261955 -5.16682382 32.19695469 -5.6171875 33.7109375 C-5.82560272 34.42752533 -6.03401794 35.14411316 -6.24874878 35.88241577 C-6.77318972 37.60743443 -7.37944882 39.30717871 -8 41 C-8.99 41.495 -8.99 41.495 -10 42 C-10.32848623 32.96662868 -8.42381993 25.7812594 -4.9453125 17.484375 C-3.76585296 14.38463835 -3.08322298 11.2966923 -2.4375 8.05078125 C-1.84791255 5.28709007 -0.95374436 2.6568593 0 0 Z \",fill:\"#5A3C30\",transform:\"translate(226,526)\"})),_path729||(_path729=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.60725635 3.21451269 1.05748185 6.43612536 1 10 C2.26457031 10 3.52914063 10 4.83203125 10 C10.5546875 10 16.27734375 10 22 10 C21.34 12.64 20.68 15.28 20 18 C19.67 18 19.34 18 19 18 C19 16.35 19 14.7 19 13 C17.845 13.165 16.69 13.33 15.5 13.5 C5.79382201 14.65996503 -1.31023077 13.50145703 -10 9 C-10 8.34 -10 7.68 -10 7 C-7.03 7 -4.06 7 -1 7 C-1.020625 6.030625 -1.04125 5.06125 -1.0625 4.0625 C-1 1 -1 1 0 0 Z \",fill:\"#723D2C\",transform:\"translate(477,493)\"})),_path730||(_path730=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C11.6988337 -0.06668641 23.37006788 0.12253875 35.0625 0.5 C36.62303946 0.54841653 38.18358635 0.59659447 39.74414062 0.64453125 C43.49618275 0.76028934 47.24811608 0.87920983 51 1 C51 1.66 51 2.32 51 3 C52.32 3 53.64 3 55 3 C55 3.66 55 4.32 55 5 C58.3 5.33 61.6 5.66 65 6 C65 6.33 65 6.66 65 7 C56.75 7 48.5 7 40 7 C40.66 5.68 41.32 4.36 42 3 C28.14 2.34 14.28 1.68 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#2D1619\",transform:\"translate(57,409)\"})),_path731||(_path731=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.29 0.66 8.58 1.32 13 2 C13 3.65 13 5.3 13 7 C11.68 7 10.36 7 9 7 C9 7.66 9 8.32 9 9 C8.34 9 7.68 9 7 9 C7 12.63 7 16.26 7 20 C5 17 5 17 5 15 C4.34 15 3.68 15 3 15 C2.67 16.65 2.34 18.3 2 20 C2.66 20 3.32 20 4 20 C4 20.66 4 21.32 4 22 C2.35 21.67 0.7 21.34 -1 21 C-1.625 18.125 -1.625 18.125 -2 15 C0 13 0 13 3.125 12.875 C4.07375 12.91625 5.0225 12.9575 6 13 C5.67 11.02 5.34 9.04 5 7 C4.34 7 3.68 7 3 7 C2.5359375 5.824375 2.5359375 5.824375 2.0625 4.625 C1.07124962 2.07669872 1.07124962 2.07669872 0 0 Z \",fill:\"#534837\",transform:\"translate(59,331)\"})),_path732||(_path732=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0 3.96 0 6 0 C6 6.93 6 13.86 6 21 C4.68 21.33 3.36 21.66 2 22 C-0.58835146 19.41164854 0.00072859 13.03989052 -0.0625 9.578125 C-0.0625 6.3847934 -0.04380654 3.19301028 0 0 Z \",fill:\"#553016\",transform:\"translate(581,263)\"})),_path733||(_path733=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 4.29 0 8.58 0 13 C-1.32 12.67 -2.64 12.34 -4 12 C-3.67 10.68 -3.34 9.36 -3 8 C-5.33214148 6.79371992 -7.49642139 5.8345262 -10 5 C-10 5.66 -10 6.32 -10 7 C-12.31 7 -14.62 7 -17 7 C-17 6.34 -17 5.68 -17 5 C-18.65 4.67 -20.3 4.34 -22 4 C-15.19018801 0.28271731 -7.62889683 -0.28255173 0 0 Z \",fill:\"#281D1E\",transform:\"translate(562,231)\"})),_path734||(_path734=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 5.61 1 11.22 1 17 C-2.96 16.67 -6.92 16.34 -11 16 C-11.33 13.69 -11.66 11.38 -12 9 C-11.34 9 -10.68 9 -10 9 C-10 8.34 -10 7.68 -10 7 C-7.7272325 5.50475822 -5.4320057 4.21600285 -3 3 C-3 6.96 -3 10.92 -3 15 C-2.34 15 -1.68 15 -1 15 C-1.01160156 14.08476562 -1.02320313 13.16953125 -1.03515625 12.2265625 C-1.04417969 11.03804688 -1.05320312 9.84953125 -1.0625 8.625 C-1.07410156 7.44164062 -1.08570313 6.25828125 -1.09765625 5.0390625 C-1 2 -1 2 0 0 Z \",fill:\"#672A23\",transform:\"translate(413,365)\"})),_path735||(_path735=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C8.25 0 16.5 0 25 0 C25 3.3 25 6.6 25 10 C22.00468461 10.99843846 20.82744268 11.00732761 17.8125 10.5625 C16.554375 10.376875 15.29625 10.19125 14 10 C14 9.67 14 9.34 14 9 C16.97 9 19.94 9 23 9 C23 8.34 23 7.68 23 7 C11.45 7 -0.1 7 -12 7 C-12 6.34 -12 5.68 -12 5 C-0.12 5 11.76 5 24 5 C24 3.68 24 2.36 24 1 C16.08 1 8.16 1 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#563636\",transform:\"translate(284,283)\"})),_path736||(_path736=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.09436412 -0.29288659 14.07010918 0.18674982 21.125 0.875 C22.37651855 0.99270752 22.37651855 0.99270752 23.65332031 1.11279297 C38.65160913 2.65160913 38.65160913 2.65160913 41 5 C43.69235776 5.23678716 46.36498156 5.42198025 49.0625 5.5625 C50.20041992 5.62727539 50.20041992 5.62727539 51.36132812 5.69335938 C53.24065438 5.79973633 55.12030244 5.90039934 57 6 C57 6.99 57 7.98 57 9 C37.92984801 6.77390143 18.96911831 3.94643845 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#725849\",transform:\"translate(359,278)\"})),_path737||(_path737=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.8971875 0.309375 0.8971875 0.309375 1.8125 0.625 C-1.1875 2.625 -1.1875 2.625 -4.1875 2.625 C-3.8575 4.275 -3.5275 5.925 -3.1875 7.625 C-1.5375 7.625 0.1125 7.625 1.8125 7.625 C0.8225 7.955 -0.1675 8.285 -1.1875 8.625 C-1.1875 9.615 -1.1875 10.605 -1.1875 11.625 C2.4425 11.625 6.0725 11.625 9.8125 11.625 C9.8125 12.615 9.8125 13.605 9.8125 14.625 C8.1625 14.625 6.5125 14.625 4.8125 14.625 C4.8125 15.945 4.8125 17.265 4.8125 18.625 C4.1525 18.625 3.4925 18.625 2.8125 18.625 C2.8125 17.635 2.8125 16.645 2.8125 15.625 C-1.1475 15.625 -5.1075 15.625 -9.1875 15.625 C-9.1875 16.285 -9.1875 16.945 -9.1875 17.625 C-11.20572917 17.59244792 -13.22395833 17.55989583 -15.2421875 17.52734375 C-17.26935404 17.49850758 -17.26935404 17.49850758 -19.1875 18.625 C-19.1875 17.635 -19.1875 16.645 -19.1875 15.625 C-14.2375 15.295 -9.2875 14.965 -4.1875 14.625 C-4.5175 12.975 -4.8475 11.325 -5.1875 9.625 C-5.44749016 6.85010499 -5.37201589 4.4388673 -5.1875 1.625 C-2.1875 -0.375 -2.1875 -0.375 0 0 Z \",fill:\"#9B7F62\",transform:\"translate(330.1875,255.375)\"})),_path738||(_path738=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.33 0.66 2.66 1.32 3 2 C3.99 2.33 4.98 2.66 6 3 C8.28581149 7.02603834 9.43355981 11.37536203 9 16 C7.52093108 16.02689216 6.04172517 16.04634621 4.5625 16.0625 C3.32693359 16.07990234 3.32693359 16.07990234 2.06640625 16.09765625 C0 16 0 16 -1 15 C-1.09927286 13.0437407 -1.12969729 11.08377091 -1.125 9.125 C-1.12757812 8.05507813 -1.13015625 6.98515625 -1.1328125 5.8828125 C-1 3 -1 3 0 0 Z \",fill:\"#73412D\",transform:\"translate(43,253)\"})),_path739||(_path739=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C17.17 2 33.34 2 50 2 C50 2.33 50 2.66 50 3 C42.16045302 3.85746279 34.4334171 4.13530402 26.55078125 4.09765625 C25.41215134 4.0962413 24.27352142 4.09482635 23.10038757 4.09336853 C19.50439702 4.08782209 15.90847137 4.07527989 12.3125 4.0625 C9.85742278 4.05747807 7.40234458 4.05291638 4.94726562 4.04882812 C-1.03517797 4.03787028 -7.01758434 4.02118647 -13 4 C-13 3.34 -13 2.68 -13 2 C-8.71 2 -4.42 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#C02827\",transform:\"translate(305,502)\"})),_path740||(_path740=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.66 2.64 1.32 4 2 C4 3.65 4 5.3 4 7 C4.66 7.33 5.32 7.66 6 8 C4.78376953 8.03867187 4.78376953 8.03867187 3.54296875 8.078125 C-3.49008135 8.43837436 -9.33520249 9.47758697 -15.85546875 12.16015625 C-18 13 -18 13 -20 13 C-19.72960418 9.75525016 -19.1742292 8.20795098 -17.0625 5.6875 C-12.71708095 3.29308542 -8.85670666 3.66050206 -4 4 C-3.67 4.99 -3.34 5.98 -3 7 C-1.68 7 -0.36 7 1 7 C0.67 4.69 0.34 2.38 0 0 Z \",fill:\"#E08B73\",transform:\"translate(386,454)\"})),_path741||(_path741=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.051875 0.01353516 1.051875 0.01353516 2.125 0.02734375 C3.053125 0.04474609 3.053125 0.04474609 4 0.0625 C4.66 0.0625 5.32 0.0625 6 0.0625 C7.66666667 0.0625 9.33333333 0.0625 11 0.0625 C11 1.7125 11 3.3625 11 5.0625 C15.29 5.0625 19.58 5.0625 24 5.0625 C24 5.3925 24 5.7225 24 6.0625 C8.16 6.5575 8.16 6.5575 -8 7.0625 C-7.34 5.0825 -6.68 3.1025 -6 1.0625 C-3.73845106 -0.06827447 -2.50117171 -0.04137968 0 0 Z \",fill:\"#A4362E\",transform:\"translate(174,453.9375)\"})),_path742||(_path742=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4.64834654 1.269553 5.29357815 2.54069706 5.9375 3.8125 C6.29714844 4.52019531 6.65679687 5.22789062 7.02734375 5.95703125 C8.95904331 10.01437611 9.1171029 13.1834354 9.09765625 17.63671875 C9.09443359 18.93544922 9.09121094 20.23417969 9.08789062 21.57226562 C9.07953531 22.94401108 9.07107037 24.31575587 9.0625 25.6875 C9.05748335 27.07096195 9.05292073 28.45442563 9.04882812 29.83789062 C9.03702529 33.22530395 9.02056019 36.61263033 9 40 C8.34 40 7.68 40 7 40 C6.97494385 39.22285645 6.9498877 38.44571289 6.92407227 37.64501953 C6.80833204 34.13816931 6.68550648 30.63160255 6.5625 27.125 C6.52318359 25.90167969 6.48386719 24.67835938 6.44335938 23.41796875 C6.38051758 21.66806641 6.38051758 21.66806641 6.31640625 19.8828125 C6.27974854 18.80402832 6.24309082 17.72524414 6.20532227 16.61376953 C6.16623357 14.01930464 6.16623357 14.01930464 5 12 C4.01 12.99 3.02 13.98 2 15 C2.02320313 14.33613281 2.04640625 13.67226563 2.0703125 12.98828125 C2.23624305 6.27138984 2.23624305 6.27138984 0 0 Z \",fill:\"#60330F\",transform:\"translate(412,338)\"})),_path743||(_path743=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.495 0.99 0.495 2 1 C2 1.66 2 2.32 2 3 C2.99 3 3.98 3 5 3 C5.33 3.66 5.66 4.32 6 5 C9.29621444 7.10462518 12.53998433 7.49939189 16.375 8 C20.78668879 8.57858214 24.91775103 9.16961108 29 11 C29.66552734 13.07421875 29.66552734 13.07421875 30 15 C26.04079723 14.35942289 22.08280513 13.71165192 18.125 13.0625 C16.43310547 12.78889648 16.43310547 12.78889648 14.70703125 12.50976562 C13.63066406 12.33251953 12.55429687 12.15527344 11.4453125 11.97265625 C10.45031738 11.81031494 9.45532227 11.64797363 8.43017578 11.48071289 C6 11 6 11 4 10 C2.9296875 8.22265625 2.9296875 8.22265625 1.875 6.0625 C1.52179687 5.35222656 1.16859375 4.64195312 0.8046875 3.91015625 C0 2 0 2 0 0 Z \",fill:\"#57572E\",transform:\"translate(575,335)\"})),_path744||(_path744=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0 4.62 0 7 0 C7.12761719 0.56332031 7.25523437 1.12664063 7.38671875 1.70703125 C8.03371072 4.12603945 8.87426476 6.36620883 9.8125 8.6875 C10.16441406 9.56148437 10.51632812 10.43546875 10.87890625 11.3359375 C11.94162454 13.86128202 13.08495188 16.33314492 14.25 18.8125 C15.70089267 22.00899791 16.46058627 24.4304564 16 28 C15.34 28.33 14.68 28.66 14 29 C13.20576139 27.43880578 12.41472877 25.87598036 11.625 24.3125 C11.18414062 23.44238281 10.74328125 22.57226562 10.2890625 21.67578125 C7 14.84848485 7 14.84848485 7 11 C6.34 11 5.68 11 5 11 C5 9.68 5 8.36 5 7 C4.34 7 3.68 7 3 7 C2.87625 6.030625 2.7525 5.06125 2.625 4.0625 C2.41875 3.051875 2.2125 2.04125 2 1 C1.34 0.67 0.68 0.34 0 0 Z \",fill:\"#55352B\",transform:\"translate(409,521)\"})),_path745||(_path745=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 1.4375 2 1.4375 4 4 C4.35442445 7.02824418 4.23347235 9.96485939 4 13 C4.66 12.67 5.32 12.34 6 12 C6 11.01 6 10.02 6 9 C6.66 9 7.32 9 8 9 C8 9.66 8 10.32 8 11 C9.65 10.67 11.3 10.34 13 10 C13 11.32 13 12.64 13 14 C13.33 15.32 13.66 16.64 14 18 C9.38 18 4.76 18 0 18 C-0.22786458 15.4609375 -0.45572917 12.921875 -0.68359375 10.3828125 C-0.86989285 7.98889139 -0.86989285 7.98889139 -2 6 C-1.34 5.67 -0.68 5.34 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#B3705B\",transform:\"translate(153,249)\"})),_path746||(_path746=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-2.32473744 3.5383833 -4.64180112 4.93804913 -7.0625 6.3125 C-7.80967285 6.74401367 -8.5568457 7.17552734 -9.32666016 7.62011719 C-11.87916184 9.08950369 -14.43888966 10.54567333 -17 12 C-17.95213379 12.54253418 -18.90426758 13.08506836 -19.88525391 13.64404297 C-25.65269936 16.92824334 -31.42256558 20.20834188 -37.21777344 23.44335938 C-39.17485327 24.53833489 -41.12548642 25.6448733 -43.07128906 26.75976562 C-44.0609668 27.31857422 -45.05064453 27.87738281 -46.0703125 28.453125 C-46.96766113 28.96520508 -47.86500977 29.47728516 -48.78955078 30.00488281 C-49.51899902 30.33327148 -50.24844727 30.66166016 -51 31 C-51.66 30.67 -52.32 30.34 -53 30 C-47.5698289 26.21899197 -42.04089549 22.87464626 -36.20703125 19.7578125 C-32.31837539 17.62639333 -28.50352524 15.38315947 -24.6875 13.125 C-13.55882007 6.5535425 -13.55882007 6.5535425 -8.0625 3.375 C-6.37833984 2.39660156 -6.37833984 2.39660156 -4.66015625 1.3984375 C-2 0 -2 0 0 0 Z \",fill:\"#423430\",transform:\"translate(486,152)\"})),_path747||(_path747=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.71079574 1.8843183 9.132969 3.66604103 13 7 C14 10.3125 14 10.3125 14 13 C13.01 13.495 13.01 13.495 12 14 C11.34 13.67 10.68 13.34 10 13 C8.29636178 12.77377919 6.58671299 12.59111527 4.875 12.4375 C3.26625 12.293125 1.6575 12.14875 0 12 C0 8.04 0 4.08 0 0 Z \",fill:\"#0E0709\",transform:\"translate(0,80)\"})),_path748||(_path748=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C8.58 0 17.16 0 26 0 C25.67 1.32 25.34 2.64 25 4 C16.64736824 4.95458649 8.40215965 5.11039334 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#6A564A\",transform:\"translate(67,362)\"})),_path749||(_path749=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.99 2 1.98 2 3 C2.66 3.33 3.32 3.66 4 4 C3.34 4 2.68 4 2 4 C2.31389477 8.47300047 2.59040365 11.71760524 5.0625 15.5 C7.55132636 19.39047586 7.31851312 22.461188 7 27 C6.34 26.34 5.68 25.68 5 25 C4.01 25.33 3.02 25.66 2 26 C0.35 23.69 -1.3 21.38 -3 19 C-2.34 19 -1.68 19 -1 19 C-1.33 18.236875 -1.66 17.47375 -2 16.6875 C-3 14 -3 14 -3 11 C-2.01 11 -1.02 11 0 11 C0 7.37 0 3.74 0 0 Z \",fill:\"#4A3125\",transform:\"translate(123,42)\"})),_path750||(_path750=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 1.32 2 2.64 2 4 C2.66 4 3.32 4 4 4 C4 5.32 4 6.64 4 8 C5.65 8.33 7.3 8.66 9 9 C9 9.99 9 10.98 9 12 C7.02 12.99 7.02 12.99 5 14 C5 14.66 5 15.32 5 16 C3.35 16.66 1.7 17.32 0 18 C0 18.66 0 19.32 0 20 C-0.66 20 -1.32 20 -2 20 C-1.33333333 17.33333333 -0.66666667 14.66666667 0 12 C-0.66 12 -1.32 12 -2 12 C-2 11.34 -2 10.68 -2 10 C-2.66 9.67 -3.32 9.34 -4 9 C-2.68 7.35 -1.36 5.7 0 4 C-0.66 4 -1.32 4 -2 4 C-2 3.34 -2 2.68 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#274F48\",transform:\"translate(486,28)\"})),_path751||(_path751=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.02578125 0.65742187 2.0515625 1.31484375 2.078125 1.9921875 C2.51920618 9.39032177 3.82936233 16.33555236 5.62792969 23.50341797 C6.82943775 28.46928385 7.17925307 32.88839623 7 38 C5.35 38 3.7 38 2 38 C1.71165822 33.87425864 1.4269712 29.74828529 1.14550781 25.62207031 C1.04948009 24.22161232 0.95249494 22.82121961 0.85449219 21.42089844 C-0.14642567 7.101645 -0.14642567 7.101645 0 0 Z \",fill:\"#AA8268\",transform:\"translate(331,588)\"})),_path752||(_path752=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.99 0 1.98 0 3 C-0.66 3 -1.32 3 -2 3 C-2.21527344 3.68835938 -2.43054688 4.37671875 -2.65234375 5.0859375 C-4.39486451 8.85382296 -6.81412152 11.54691834 -9.5625 14.625 C-10.64296832 15.85846369 -11.72238295 17.09285112 -12.80078125 18.328125 C-13.33783691 18.94107422 -13.87489258 19.55402344 -14.42822266 20.18554688 C-18.05446568 24.37166651 -21.51915856 28.69289821 -25 33 C-25.7265625 31.33984375 -25.7265625 31.33984375 -26 29 C-24.5234375 26.37890625 -24.5234375 26.37890625 -22.375 23.5625 C-21.62992187 22.58539062 -20.88484375 21.60828125 -20.1171875 20.6015625 C-17.89721157 17.8736954 -15.51715422 15.45422537 -13 13 C-10.91893385 10.46241539 -8.88742062 7.89090033 -6.8671875 5.3046875 C-2.56949153 0 -2.56949153 0 0 0 Z \",fill:\"#996E52\",transform:\"translate(129,525)\"})),_path753||(_path753=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1.25556641 1.61875 1.25556641 1.61875 0.49609375 2.25 C-3.91963513 6.00378849 -7.74977425 9.86015306 -11.359375 14.3984375 C-13.26616263 16.25982543 -14.45330993 16.40889205 -17 17 C-18.89164883 18.50518294 -20.57902901 20.14097681 -22.31640625 21.8203125 C-23.14978516 22.40425781 -23.14978516 22.40425781 -24 23 C-24.99 22.67 -25.98 22.34 -27 22 C-23.45070423 17.30985915 -23.45070423 17.30985915 -21 15.625 C-18.93294753 13.94551987 -18.22348741 12.75543513 -17 10.4375 C-15.00665499 7.01143827 -14.43618 6.42186759 -11 5 C-10.67 4.01 -10.34 3.02 -10 2 C-9.67 2.99 -9.34 3.98 -9 5 C-9.99 5.33 -10.98 5.66 -12 6 C-12 6.66 -12 7.32 -12 8 C-8.33939179 7.41463247 -6.45464836 5.916761 -3.75 3.4375 C-2.69039062 2.47650391 -2.69039062 2.47650391 -1.609375 1.49609375 C-1.07828125 1.00238281 -0.5471875 0.50867188 0 0 Z \",fill:\"#6D4737\",transform:\"translate(98,529)\"})),_path754||(_path754=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.49253943 1.48078115 7.81702274 3.98909044 11.4375 6.9375 C12.67020831 7.92753748 13.90329293 8.91710657 15.13671875 9.90625 C15.76884277 10.41542969 16.4009668 10.92460937 17.05224609 11.44921875 C19.0022727 13.0018095 20.97426454 14.52075743 22.95703125 16.03125 C23.59261963 16.51859619 24.22820801 17.00594238 24.88305664 17.50805664 C26.103347 18.44238383 27.32765042 19.37149901 28.55639648 20.29467773 C31.5189463 22.58135412 33.70674727 24.42697484 35 28 C31.65253259 28 31.22793887 27.67666414 28.75 25.6640625 C28.1415625 25.17679687 27.533125 24.68953125 26.90625 24.1875 C26.2771875 23.671875 25.648125 23.15625 25 22.625 C23.75068829 21.6163344 22.50071181 20.6084915 21.25 19.6015625 C20.69828125 19.15119629 20.1465625 18.70083008 19.578125 18.23681641 C18.1071281 17.08395899 16.5550466 16.03669773 15 15 C15 14.34 15 13.68 15 13 C14.34 13 13.68 13 13 13 C11.8411583 11.87524188 10.689049 10.74261442 9.57421875 9.57421875 C7.04487651 7.04487651 4.29801577 4.76910768 1.57421875 2.453125 C1.05472656 1.97359375 0.53523438 1.4940625 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#82573C\",transform:\"translate(504,462)\"})),_path755||(_path755=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C4.24105897 5.38207077 4.23693988 10.15745544 4.125 15.875 C4.11597656 16.75414062 4.10695312 17.63328125 4.09765625 18.5390625 C4.07424577 20.6928271 4.0383801 22.84645014 4 25 C8.62 25 13.24 25 18 25 C14.36091722 28.63908278 10.70869957 30.84178708 5.625 31.3125 C3 31 3 31 2 30 C1.85488712 28.54587916 1.77287935 27.08534078 1.71875 25.625 C1.68136719 24.72136719 1.64398438 23.81773437 1.60546875 22.88671875 C1.57066406 21.93410156 1.53585938 20.98148437 1.5 20 C1.24643626 13.28525646 0.82024286 6.67130858 0 0 Z \",fill:\"#473D30\",transform:\"translate(208,384)\"})),_path756||(_path756=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.13586678 3.20380017 2.23132175 4.01939967 2.125 7.6875 C2.10695313 8.49574219 2.08890625 9.30398438 2.0703125 10.13671875 C2.03550781 11.05904297 2.03550781 11.05904297 2 12 C2.66 11.67 3.32 11.34 4 11 C4 12.32 4 13.64 4 15 C8.95 15 13.9 15 19 15 C19 15.33 19 15.66 19 16 C15.97696705 16.1630807 12.96283294 16.28136405 9.9375 16.375 C9.08994141 16.42527344 8.24238281 16.47554688 7.36914062 16.52734375 C1.53876446 16.66241038 -1.46832009 15.61392027 -5.72045898 11.59228516 C-7 10 -7 10 -8 7 C-7.34 7 -6.68 7 -6 7 C-6.33 5.68 -6.66 4.36 -7 3 C-4.69 2.01 -2.38 1.02 0 0 Z \",fill:\"#967B65\",transform:\"translate(557,381)\"})),_path757||(_path757=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C-2.61973402 4.31626692 -5.09567131 5 -9 5 C-9 11.6 -9 18.2 -9 25 C-10.32 25 -11.64 25 -13 25 C-13 17.74 -13 10.48 -13 3 C-8.71 2.01 -4.42 1.02 0 0 Z \",fill:\"#301111\",transform:\"translate(13,377)\"})),_path758||(_path758=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C6.28380377 2.10315452 11.37852314 1.98757115 16.625 1.3125 C21.91314994 0.75585264 25.2222631 1.74635052 30 4 C30 4.66 30 5.32 30 6 C17.46 5.67 4.92 5.34 -8 5 C-7 2 -7 2 -5.125 0.8125 C-3 0 -3 0 0 0 Z \",fill:\"#9C6843\",transform:\"translate(134,349)\"})),_path759||(_path759=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.04793157 1.39784687 6.90968038 3.34337153 10.25 6 C15.20088346 9.70812439 18.90188944 11.2002478 25 12 C24.67 10.35 24.34 8.7 24 7 C25.98 7 27.96 7 30 7 C30 9.97 30 12.94 30 16 C24.34856482 17.71286692 21.27669465 15.5391443 16.2890625 12.890625 C1.45445642 4.36336925 1.45445642 4.36336925 0 0 Z \",fill:\"#BBA687\",transform:\"translate(140,335)\"})),_path760||(_path760=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 9.24 1 18.48 1 28 C7.39519541 24.75280813 7.39519541 24.75280813 9.6875 22.3125 C11.34052058 20.65947942 12.76312956 20.52193644 15 20 C15.33 19.34 15.66 18.68 16 18 C16.66 17.34 17.32 16.68 18 16 C18.99 16 19.98 16 21 16 C21 15.34 21 14.68 21 14 C22.6796875 12.7109375 22.6796875 12.7109375 24.875 11.375 C25.59429687 10.92898437 26.31359375 10.48296875 27.0546875 10.0234375 C29 9 29 9 31 9 C31 8.34 31 7.68 31 7 C33.375 5.3125 33.375 5.3125 36 4 C36.66 4.33 37.32 4.66 38 5 C28.3180814 12.70034101 18.25656587 19.72632749 7.99194336 26.62475586 C5.93856687 27.99629142 5.93856687 27.99629142 3.93188477 29.73657227 C2.97560181 30.36196899 2.97560181 30.36196899 2 31 C1.01 30.67 0.02 30.34 -1 30 C-0.67 20.1 -0.34 10.2 0 0 Z \",fill:\"#ABB99D\",transform:\"translate(377,172)\"})),_path761||(_path761=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C0.66 2 1.32 2 2 2 C2 1.34 2 0.68 2 0 C2.66 0 3.32 0 4 0 C4 0.99 4 1.98 4 3 C4.66 3 5.32 3 6 3 C6.33 3.66 6.66 4.32 7 5 C8.65 5 10.3 5 12 5 C12.33 5.99 12.66 6.98 13 8 C12.01 8.33 11.02 8.66 10 9 C9.41734375 9.39960938 8.8346875 9.79921875 8.234375 10.2109375 C4.74965175 11.44155655 2.57637449 10.02207728 -0.75 8.625 C-1.92046875 8.14289063 -3.0909375 7.66078125 -4.296875 7.1640625 C-5.18890625 6.77992188 -6.0809375 6.39578125 -7 6 C-6.67 4.02 -6.34 2.04 -6 0 C-3 -1 -3 -1 0 0 Z \",fill:\"#523421\",transform:\"translate(51,152)\"})),_path762||(_path762=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 3 0 3 -1 6 C-0.01 6.33 0.98 6.66 2 7 C1.1875 10.4375 1.1875 10.4375 0 14 C-0.99 14.33 -1.98 14.66 -3 15 C-3.433125 16.11375 -3.433125 16.11375 -3.875 17.25 C-5.26975012 20.65938917 -7.31495257 22.52693 -10 25 C-10 20.62039198 -9.01759504 18.79307868 -7 15 C-6.67 14.01 -6.34 13.02 -6 12 C-8.31 13.65 -10.62 15.3 -13 17 C-11.2703384 12.79046213 -8.31793255 9.64856424 -5.375 6.25 C-4.859375 5.64800781 -4.34375 5.04601562 -3.8125 4.42578125 C-2.54530865 2.94739134 -1.27314225 1.47326829 0 0 Z \",fill:\"#714C3A\",transform:\"translate(86,573)\"})),_path763||(_path763=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.25167969 0.09925781 2.50335938 0.19851563 3.79296875 0.30078125 C8.01818548 0.67665798 12.22627297 1.11674846 16.4375 1.625 C16.7675 3.275 17.0975 4.925 17.4375 6.625 C14.56174132 6.51045196 11.68737888 6.3837153 8.8125 6.25 C7.60013672 6.20359375 7.60013672 6.20359375 6.36328125 6.15625 C1.71911686 5.9297054 -2.18943856 5.3657332 -6.5625 3.625 C-6.5625 2.965 -6.5625 2.305 -6.5625 1.625 C-7.2225 1.295 -7.8825 0.965 -8.5625 0.625 C-5.6322987 -0.84010065 -3.24757537 -0.2592455 0 0 Z \",fill:\"#070707\",transform:\"translate(218.5625,482.375)\"})),_path764||(_path764=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.23345754 1.44462876 7.25222851 3.54418603 10.75 6.3125 C11.89020773 7.20756306 13.03085673 8.10206419 14.171875 8.99609375 C14.78224609 9.47675293 15.39261719 9.95741211 16.02148438 10.45263672 C19.65479413 13.29418623 23.33068047 16.08021484 27 18.875 C29.07058125 20.45303952 31.13990224 22.03246728 33.203125 23.62011719 C34.79470692 24.8423483 36.39661914 26.05110139 38 27.2578125 C38.66 27.83273437 39.32 28.40765625 40 29 C40 29.66 40 30.32 40 31 C36.90340337 30.40810285 35.07143099 29.50964007 32.671875 27.48046875 C32.04442383 26.9582373 31.41697266 26.43600586 30.77050781 25.89794922 C30.10374023 25.33350098 29.43697266 24.76905273 28.75 24.1875 C21.76637064 18.38723482 14.61746588 12.86991297 7.328125 7.4609375 C6.74869141 7.03006836 6.16925781 6.59919922 5.57226562 6.15527344 C4.24488623 5.17993815 2.89791581 4.23134893 1.546875 3.2890625 C1.03640625 2.86367188 0.5259375 2.43828125 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#A77658\",transform:\"translate(501,457)\"})),_path765||(_path765=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0.66 3.96 1.32 6 2 C6.33 4.64 6.66 7.28 7 10 C9.475 10.99 9.475 10.99 12 12 C12 12.66 12 13.32 12 14 C14.31 14 16.62 14 19 14 C19.33 15.98 19.66 17.96 20 20 C20.66 20 21.32 20 22 20 C22 20.66 22 21.32 22 22 C22.66 22 23.32 22 24 22 C24 22.66 24 23.32 24 24 C22.02 23.34 20.04 22.68 18 22 C18 21.34 18 20.68 18 20 C16.68 20 15.36 20 14 20 C13.67 18.68 13.34 17.36 13 16 C12.34 16 11.68 16 11 16 C10.67 15.34 10.34 14.68 10 14 C9.01 14.33 8.02 14.66 7 15 C6.05598958 13.2421875 5.11197917 11.484375 4.16796875 9.7265625 C2.95236507 7.69497635 2.95236507 7.69497635 0 6 C0.66 6 1.32 6 2 6 C1.34 4.02 0.68 2.04 0 0 Z \",fill:\"#83C89C\",transform:\"translate(488,328)\"})),_path766||(_path766=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4.69937202 1.4317616 5.38412718 2.87067032 6.0625 4.3125 C6.44535156 5.11300781 6.82820313 5.91351563 7.22265625 6.73828125 C8.3226129 9.93865763 7.04861022 11.85416933 6 15 C7.37249963 17.67676547 7.37249963 17.67676547 9 20 C9.66 19.67 10.32 19.34 11 19 C11 20.32 11 21.64 11 23 C10.34 23 9.68 23 9 23 C9 23.99 9 24.98 9 26 C8.01 26 7.02 26 6 26 C5.71125 24.865625 5.4225 23.73125 5.125 22.5625 C4.75375 21.386875 4.3825 20.21125 4 19 C3.34 18.67 2.68 18.34 2 18 C2 17.01 2 16.02 2 15 C1.67 15 1.34 15 1 15 C1 13.02 1 11.04 1 9 C2.32 9 3.64 9 5 9 C5 8.34 5 7.68 5 7 C3.35 7.33 1.7 7.66 0 8 C-0.33 7.34 -0.66 6.68 -1 6 C-1.99 6 -2.98 6 -4 6 C-4 5.34 -4 4.68 -4 4 C-3.01 4 -2.02 4 -1 4 C-0.67 3.34 -0.34 2.68 0 2 C0.33 2.66 0.66 3.32 1 4 C1.66 3.01 2.32 2.02 3 1 C2.01 0.67 1.02 0.34 0 0 Z \",fill:\"#6B392A\",transform:\"translate(30,232)\"})),_path767||(_path767=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.60035358 0.93710906 8.0327527 2.5755711 12 5 C12.99 5 13.98 5 15 5 C15.12375 5.639375 15.2475 6.27875 15.375 6.9375 C15.58125 7.618125 15.7875 8.29875 16 9 C16.66 9.33 17.32 9.66 18 10 C18 14.95 18 19.9 18 25 C16.68 24.67 15.36 24.34 14 24 C14 19.05 14 14.1 14 9 C12.02 8.34 10.04 7.68 8 7 C6.32836805 6.34588315 4.65984798 5.68346682 3 5 C3 4.34 3 3.68 3 3 C0.03 2.505 0.03 2.505 -3 2 C-2.01 1.34 -1.02 0.68 0 0 Z \",fill:\"#93663F\",transform:\"translate(101,179)\"})),_path768||(_path768=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.53571429 0.53571429 3.53571429 0.53571429 5 2 C5.144375 3.2375 5.28875 4.475 5.4375 5.75 C5.84388633 9.13453097 6.24403923 12.01486668 8 15 C10.26601865 16.29042763 10.26601865 16.29042763 13 17 C13.99 17.350625 14.98 17.70125 16 18.0625 C18.6635524 18.89486013 21.2548986 19.51557034 24 20 C24 20.99 24 21.98 24 23 C18.65912303 22.0574923 13.81496286 20.49049803 9 18 C8.01 17.67 7.02 17.34 6 17 C6 16.34 6 15.68 6 15 C5.01 15 4.02 15 3 15 C1.35 10.71 -0.3 6.42 -2 2 C-1.34 1.34 -0.68 0.68 0 0 Z \",fill:\"#4B5F41\",transform:\"translate(431,375)\"})),_path769||(_path769=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.60488281 0.00483398 1.60488281 0.00483398 3.2421875 0.00976562 C4.35335938 0.01814453 5.46453125 0.02652344 6.609375 0.03515625 C8.29933594 0.04192383 8.29933594 0.04192383 10.0234375 0.04882812 C12.80213717 0.06060228 15.58072909 0.07704785 18.359375 0.09765625 C18.359375 0.42765625 18.359375 0.75765625 18.359375 1.09765625 C11.759375 1.42765625 5.159375 1.75765625 -1.640625 2.09765625 C-1.970625 4.40765625 -2.300625 6.71765625 -2.640625 9.09765625 C-2.310625 9.42765625 -1.980625 9.75765625 -1.640625 10.09765625 C-1.59998668 11.7638274 -1.597904 13.4315372 -1.640625 15.09765625 C-0.526875 14.97390625 -0.526875 14.97390625 0.609375 14.84765625 C4.14094527 15.16870809 5.12567864 16.45031242 7.359375 19.09765625 C4.389375 18.76765625 1.419375 18.43765625 -1.640625 18.09765625 C-1.640625 17.43765625 -1.640625 16.77765625 -1.640625 16.09765625 C-2.630625 15.76765625 -3.620625 15.43765625 -4.640625 15.09765625 C-7.5050682 11.38448914 -7.96394502 8.73190987 -7.640625 4.09765625 C-8.300625 3.76765625 -8.960625 3.43765625 -9.640625 3.09765625 C-9.640625 2.43765625 -9.640625 1.77765625 -9.640625 1.09765625 C-6.36436125 0.11545685 -3.41274381 -0.01815289 0 0 Z \",fill:\"#90915D\",transform:\"translate(446.640625,373.90234375)\"})),_path770||(_path770=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C9.666154 -0.36287867 18.80956788 0.56423082 28.34228516 2.02636719 C30.65483645 2.37955684 32.96959315 2.7140645 35.28515625 3.046875 C36.76578716 3.26714191 38.24626268 3.48845643 39.7265625 3.7109375 C40.41400543 3.80998383 41.10144836 3.90903015 41.8097229 4.01107788 C45.19270282 4.54064392 47.09560493 5.06373662 50 7 C38.89966736 7.50371257 28.42797741 6.10536962 17.49414062 4.38037109 C15.1916342 4.02922534 12.88893766 3.71648614 10.578125 3.42578125 C9.31484375 3.26464844 8.0515625 3.10351562 6.75 2.9375 C5.65171875 2.80214844 4.5534375 2.66679687 3.421875 2.52734375 C2.62265625 2.35332031 1.8234375 2.17929687 1 2 C0.67 1.34 0.34 0.68 0 0 Z \",fill:\"#E19D78\",transform:\"translate(359,280)\"})),_path771||(_path771=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.41659491 -0.05816623 6.83306205 -0.09365195 10.25 -0.125 C11.21808594 -0.14175781 12.18617188 -0.15851563 13.18359375 -0.17578125 C14.11816406 -0.18222656 15.05273438 -0.18867188 16.015625 -0.1953125 C16.87446289 -0.20578613 17.73330078 -0.21625977 18.61816406 -0.22705078 C21.17903596 0.01706677 22.79511029 0.71009488 25 2 C22.08235 3.9451 20.37462715 4.45276317 17 5 C17 5.33 17 5.66 17 6 C10.06697907 6.22731216 3.7831364 5.42002108 -3 4 C-3 3.34 -3 2.68 -3 2 C-2.01 2 -1.02 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#363F30\",transform:\"translate(362,273)\"})),_path772||(_path772=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C5.33 1.98 5.66 3.96 6 6 C7.32 6.33 8.64 6.66 10 7 C10 7.66 10 8.32 10 9 C10.99 9.33 11.98 9.66 13 10 C12.01 11.485 12.01 11.485 11 13 C12.0725 12.95875 13.145 12.9175 14.25 12.875 C17.65747485 12.9885825 19.20739631 13.21273364 22 15 C19.36 15.33 16.72 15.66 14 16 C15.97420135 18.52259061 16.96745642 18.9929808 20.1875 19.6875 C21.115625 19.790625 22.04375 19.89375 23 20 C23 20.33 23 20.66 23 21 C21.35 21 19.7 21 18 21 C18 21.66 18 22.32 18 23 C17.34 23 16.68 23 16 23 C16 22.34 16 21.68 16 21 C14.68 21 13.36 21 12 21 C12 20.34 12 19.68 12 19 C11.34 19 10.68 19 10 19 C10 18.34 10 17.68 10 17 C9.34 17 8.68 17 8 17 C8.33 14.69 8.66 12.38 9 10 C7.35 9.67 5.7 9.34 4 9 C3.67 8.01 3.34 7.02 3 6 C2.484375 5.505 1.96875 5.01 1.4375 4.5 C0 3 0 3 0 0 Z \",fill:\"#93C58D\",transform:\"translate(510,361)\"})),_path773||(_path773=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2 3.31 2 5.62 2 8 C-1.96 8 -5.92 8 -10 8 C-10 8.66 -10 9.32 -10 10 C-9.34 10 -8.68 10 -8 10 C-7.67 10.66 -7.34 11.32 -7 12 C-6.01 12.33 -5.02 12.66 -4 13 C-4 13.99 -4 14.98 -4 16 C-3.443125 16.103125 -2.88625 16.20625 -2.3125 16.3125 C0.44176578 17.13133577 2.58727657 18.45853781 5 20 C2 21 2 21 -0.375 20.0390625 C-1.24125 19.57242187 -2.1075 19.10578125 -3 18.625 C-5.68871663 17.19261822 -8.10378206 15.96540598 -11 15 C-11 14.01 -11 13.02 -11 12 C-11.99 12 -12.98 12 -14 12 C-14.12375 11.360625 -14.2475 10.72125 -14.375 10.0625 C-14.58125 9.381875 -14.7875 8.70125 -15 8 C-15.66 7.67 -16.32 7.34 -17 7 C-13.43954823 5.81318274 -10.56191663 5.90310168 -6.8125 5.9375 C-5.54019531 5.94652344 -4.26789063 5.95554687 -2.95703125 5.96484375 C-1.49330078 5.98224609 -1.49330078 5.98224609 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#768853\",transform:\"translate(390,300)\"})),_path774||(_path774=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.33 0 0.66 0 1 C-3.3 1 -6.6 1 -10 1 C-10.66 3.31 -11.32 5.62 -12 8 C-13.62463842 8.05395478 -15.24978541 8.09277195 -16.875 8.125 C-17.77992188 8.14820313 -18.68484375 8.17140625 -19.6171875 8.1953125 C-22 8 -22 8 -24 6 C-24.125 3.375 -24.125 3.375 -24 1 C-15.74763174 -1.00107527 -8.41248481 -0.98970409 0 0 Z \",fill:\"#EA9C64\",transform:\"translate(175,301)\"})),_path775||(_path775=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C0.9075 1.649375 1.815 1.29875 2.75 0.9375 C6.00591313 -0.00170571 6.92749994 0.04485324 10 1 C6.27273839 2.31795397 2.54287917 3.62839873 -1.1875 4.9375 C-2.24259766 5.31068359 -3.29769531 5.68386719 -4.38476562 6.06835938 C-5.40634766 6.42607422 -6.42792969 6.78378906 -7.48046875 7.15234375 C-8.41785889 7.48226318 -9.35524902 7.81218262 -10.32104492 8.15209961 C-12.87039789 8.95898039 -15.36973202 9.53068176 -18 10 C-18 7.69 -18 5.38 -18 3 C-17.34773438 2.95101563 -16.69546875 2.90203125 -16.0234375 2.8515625 C-10.66149015 2.39287084 -5.1585022 0 0 0 Z \",fill:\"#443024\",transform:\"translate(18,419)\"})),_path776||(_path776=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.15581531 -0.59719869 9.8640834 -0.89113953 15 0 C18.33454633 2.86036772 20.24145937 5.99709623 22 10 C22 10.33 22 10.66 22 11 C15.375 11.125 15.375 11.125 12 10 C12 8.35 12 6.7 12 5 C8.37 4.67 4.74 4.34 1 4 C0.67 2.68 0.34 1.36 0 0 Z \",fill:\"#F2DBBD\",transform:\"translate(335,333)\"})),_path777||(_path777=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0.33 3.3 0.66 5 1 C5.33 1.99 5.66 2.98 6 4 C6.66 2.68 7.32 1.36 8 0 C9.32 0.66 10.64 1.32 12 2 C12.33 1.34 12.66 0.68 13 0 C16.62528568 -0.20140476 18.86501708 0.14223235 22 2 C22 2.66 22 3.32 22 4 C20.68 4 19.36 4 18 4 C18.33 4.99 18.66 5.98 19 7 C18.34 7 17.68 7 17 7 C16.67 6.34 16.34 5.68 16 5 C15.34 5 14.68 5 14 5 C13.67 5.66 13.34 6.32 13 7 C11.20841511 7.02696365 9.41671527 7.04637917 7.625 7.0625 C6.62726562 7.07410156 5.62953125 7.08570313 4.6015625 7.09765625 C2 7 2 7 0 6 C-0.33 6.66 -0.66 7.32 -1 8 C-1.99 6.68 -2.98 5.36 -4 4 C-2.68 3.34 -1.36 2.68 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#3D1F1E\",transform:\"translate(4,224)\"})),_path778||(_path778=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.0825 0.78375 2.165 1.5675 2.25 2.375 C2.72806339 5.14749104 2.72806339 5.14749104 5.0625 6.3125 C5.701875 6.539375 6.34125 6.76625 7 7 C7 7.66 7 8.32 7 9 C6.360625 8.835 5.72125 8.67 5.0625 8.5 C3.19173179 7.96073333 3.19173179 7.96073333 2 8 C2 8.66 2 9.32 2 10 C2.763125 10.2475 3.52625 10.495 4.3125 10.75 C7.2364045 12.10995558 8.30004356 13.31585826 10 16 C7.525 15.01 7.525 15.01 5 14 C5.57452746 17.93075644 5.57452746 17.93075644 8 21 C7.01 21.66 6.02 22.32 5 23 C3.65290838 22.12499183 2.32261014 21.22409067 1 20.3125 C0.2575 19.81363281 -0.485 19.31476563 -1.25 18.80078125 C-3 17 -3 17 -3.25 14.29296875 C-3.1675 13.53628906 -3.085 12.77960938 -3 12 C-2.34 12 -1.68 12 -1 12 C-1.33 10.68 -1.66 9.36 -2 8 C-1.67 8 -1.34 8 -1 8 C-0.67 5.36 -0.34 2.72 0 0 Z \",fill:\"#302524\",transform:\"translate(75,86)\"})),_path779||(_path779=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.48433845 2.05749579 9.34026941 4.6117297 13.6875 8.5 C17.88704492 12.24203592 17.88704492 12.24203592 22.39453125 15.59375 C23.18923828 16.28984375 23.18923828 16.28984375 24 17 C24 18.32 24 19.64 24 21 C22.0625 20.625 22.0625 20.625 20 20 C19.67 19.34 19.34 18.68 19 18 C18.01 17.67 17.02 17.34 16 17 C16 16.34 16 15.68 16 15 C15.443125 14.7525 14.88625 14.505 14.3125 14.25 C11.57589087 12.77075182 9.32349131 11.06532561 7 9 C7 8.34 7 7.68 7 7 C6.401875 6.9175 5.80375 6.835 5.1875 6.75 C2.37067727 5.78423221 1.52200868 4.51131433 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#563529\",transform:\"translate(602,532)\"})),_path780||(_path780=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C11.3503202 -0.21551241 22.66773031 0.4312689 34 1 C34 1.66 34 2.32 34 3 C36.64 3 39.28 3 42 3 C42 3.66 42 4.32 42 5 C36.72 4.67 31.44 4.34 26 4 C26 3.34 26 2.68 26 2 C25.34 2 24.68 2 24 2 C24 2.66 24 3.32 24 4 C16.41 4 8.82 4 1 4 C1.33 3.34 1.66 2.68 2 2 C3.32 2 4.64 2 6 2 C3.03 1.505 3.03 1.505 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#5C131B\",transform:\"translate(166,463)\"})),_path781||(_path781=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.97001953 0.00451172 1.94003906 0.00902344 2.93945312 0.01367188 C5.3138676 0.0253685 7.68815021 0.04175914 10.0625 0.0625 C10.3925 1.0525 10.7225 2.0425 11.0625 3.0625 C-8.27792553 5.44547872 -8.27792553 5.44547872 -17.9375 5.0625 C-17.9375 3.7425 -17.9375 2.4225 -17.9375 1.0625 C-11.92889451 0.00411873 -6.09122439 -0.05412571 0 0 Z \",fill:\"#6F4E36\",transform:\"translate(17.9375,300.9375)\"})),_path782||(_path782=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.99 0 1.98 0 3 C-1.765625 3.44140625 -3.53125 3.8828125 -5.296875 4.32421875 C-6.02390625 4.50597656 -6.7509375 4.68773437 -7.5 4.875 C-8.90625 5.2265625 -10.3125 5.578125 -11.71875 5.9296875 C-12.41871094 6.10467773 -13.11867188 6.27966797 -13.83984375 6.45996094 C-14.55269531 6.63817383 -15.26554688 6.81638672 -16 7 C-16.76441406 7.19110352 -17.52882813 7.38220703 -18.31640625 7.57910156 C-19.04730469 7.76182617 -19.77820313 7.94455078 -20.53125 8.1328125 C-21.6759375 8.41898438 -22.820625 8.70515625 -24 9 C-24.57250977 7.10473633 -24.57250977 7.10473633 -25 5 C-23.01105759 2.12708318 -20.9071452 1.4550673 -17.5625 0.8125 C-11.71013961 -0.23349056 -5.92523936 -0.18325483 0 0 Z \",fill:\"#23191B\",transform:\"translate(561,192)\"})),_path783||(_path783=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.33304076 0.64465202 7.86672065 2.18925122 11.8125 4.0625 C12.97394531 4.61035156 14.13539063 5.15820312 15.33203125 5.72265625 C16.21246094 6.14417969 17.09289062 6.56570313 18 7 C18 7.66 18 8.32 18 9 C19.3303125 9.433125 19.3303125 9.433125 20.6875 9.875 C23.50382424 10.83148748 26.25083156 11.86798946 29 13 C29 15.31 29 17.62 29 20 C19.82713348 17.84682713 19.82713348 17.84682713 16.375 14.3125 C15.92125 13.549375 15.4675 12.78625 15 12 C15.94875 12.165 16.8975 12.33 17.875 12.5 C20.80168901 13.0526635 20.80168901 13.0526635 23 13 C22.3387915 12.67725098 21.67758301 12.35450195 20.99633789 12.02197266 C18.01529456 10.56254452 15.0388812 9.09391114 12.0625 7.625 C11.02158203 7.11710937 9.98066406 6.60921875 8.90820312 6.0859375 C7.91884766 5.59609375 6.92949219 5.10625 5.91015625 4.6015625 C4.99371338 4.15119629 4.07727051 3.70083008 3.13305664 3.23681641 C1 2 1 2 0 0 Z \",fill:\"#704732\",transform:\"translate(597,456)\"})),_path784||(_path784=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.28 0 10.56 0 16 0 C16 2.64 16 5.28 16 8 C14 10 14 10 11.43359375 10.23046875 C10.44488281 10.21628906 9.45617187 10.20210938 8.4375 10.1875 C7.44621094 10.18105469 6.45492188 10.17460937 5.43359375 10.16796875 C3 10 3 10 2 9 C1.95936168 7.33382885 1.957279 5.66611905 2 4 C2.33 5.32 2.66 6.64 3 8 C3.66 8 4.32 8 5 8 C5.33 6.68 5.66 5.36 6 4 C6.66 4 7.32 4 8 4 C8 3.34 8 2.68 8 2 C5.36 1.67 2.72 1.34 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#E9D221\",transform:\"translate(312,424)\"})),_path785||(_path785=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.423125 0.7425 1.423125 0.7425 2.875 1.5 C2.875 2.16 2.875 2.82 2.875 3.5 C5.845 3.995 5.845 3.995 8.875 4.5 C9.205 3.84 9.535 3.18 9.875 2.5 C10.205 3.82 10.535 5.14 10.875 6.5 C4.72265625 6.59765625 4.72265625 6.59765625 2.875 6.5 C2.545 6.17 2.215 5.84 1.875 5.5 C-0.47813555 5.42728259 -2.83333668 5.41629132 -5.1875 5.4375 C-6.47785156 5.44652344 -7.76820313 5.45554687 -9.09765625 5.46484375 C-10.09667969 5.47644531 -11.09570312 5.48804688 -12.125 5.5 C-12.125 4.18 -12.125 2.86 -12.125 1.5 C-13.445 1.17 -14.765 0.84 -16.125 0.5 C-16.125 1.16 -16.125 1.82 -16.125 2.5 C-16.785 2.5 -17.445 2.5 -18.125 2.5 C-17.795 1.51 -17.465 0.52 -17.125 -0.5 C-11.52691786 -2.36602738 -5.45237362 -2.35898614 0 0 Z \",fill:\"#0A3B2B\",transform:\"translate(424.125,321.5)\"})),_path786||(_path786=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 2 2 2 2 5 C2.66 5 3.32 5 4 5 C4 5.99 4 6.98 4 8 C6.31 8.33 8.62 8.66 11 9 C11 9.66 11 10.32 11 11 C11.73605469 10.76410156 12.47210938 10.52820313 13.23046875 10.28515625 C16 10 16 10 18.23828125 11.43359375 C18.92277344 12.09488281 19.60726562 12.75617188 20.3125 13.4375 C21.00988281 14.09621094 21.70726562 14.75492187 22.42578125 15.43359375 C23.20501953 16.20896484 23.20501953 16.20896484 24 17 C23.67 17.66 23.34 18.32 23 19 C22.236875 18.566875 21.47375 18.13375 20.6875 17.6875 C16.06020886 15.34597918 11.00544634 14.25581483 6 13 C6 12.34 6 11.68 6 11 C5.195625 11.020625 4.39125 11.04125 3.5625 11.0625 C1 11 1 11 0 10 C-1.20481928 2.40963855 -1.20481928 2.40963855 0 0 Z \",fill:\"#293D24\",transform:\"translate(230,309)\"})),_path787||(_path787=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.28 0 10.56 0 16 0 C16 8.25 16 16.5 16 25 C15.01 25 14.02 25 13 25 C13 23.68 13 22.36 13 21 C12.34 21 11.68 21 11 21 C10.34 15.06 9.68 9.12 9 3 C9.99 3 10.98 3 12 3 C12.33 5.64 12.66 8.28 13 11 C13.66 7.7 14.32 4.4 15 1 C10.05 1 5.1 1 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#431207\",transform:\"translate(523,261)\"})),_path788||(_path788=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.71740936 6.81538887 0.71740936 6.81538887 -1.265625 10.08984375 C-2.76818275 11.87321933 -4.20413224 13.51119771 -6 15 C-6.66 15 -7.32 15 -8 15 C-7.67 13.68 -7.34 12.36 -7 11 C-7.99 10.67 -8.98 10.34 -10 10 C-9.34 9.67 -8.68 9.34 -8 9 C-8.33 8.01 -8.66 7.02 -9 6 C-9.33 6.66 -9.66 7.32 -10 8 C-11.65 6.02 -13.3 4.04 -15 2 C-13.2508503 1.66223316 -11.50063855 1.32996329 -9.75 1 C-8.77546875 0.814375 -7.8009375 0.62875 -6.796875 0.4375 C-4 0 -4 0 0 0 Z \",fill:\"#1D1214\",transform:\"translate(626,221)\"})),_path789||(_path789=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.06892629 -0.25287193 11.16200408 0.30167391 17 2 C17 4.31 17 6.62 17 9 C11.30694567 7.76123355 5.64629987 6.43723997 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#A0684E\",transform:\"translate(609,369)\"})),_path790||(_path790=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C10.56 0 21.12 0 32 0 C32 0.33 32 0.66 32 1 C22.43 1.33 12.86 1.66 3 2 C3 2.66 3 3.32 3 4 C12.57 4 22.14 4 32 4 C32 4.66 32 5.32 32 6 C27.60343827 6.02465504 23.2069128 6.04283842 18.81030273 6.05493164 C17.31355082 6.05997121 15.81680384 6.06680287 14.32006836 6.07543945 C12.17300193 6.08752159 10.02600038 6.09323191 7.87890625 6.09765625 C5.93866577 6.10551147 5.93866577 6.10551147 3.95922852 6.11352539 C1 6 1 6 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#02050B\",transform:\"translate(170,280)\"})),_path791||(_path791=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.93878727 0.28159633 5.87560413 0.57481385 8.8125 0.875 C9.64587891 0.95363281 10.47925781 1.03226562 11.33789062 1.11328125 C12.14033203 1.19707031 12.94277344 1.28085937 13.76953125 1.3671875 C14.87711792 1.47716064 14.87711792 1.47716064 16.00708008 1.58935547 C18 2 18 2 21 4 C17.37 4.33 13.74 4.66 10 5 C14.29 5.33 18.58 5.66 23 6 C23 6.99 23 7.98 23 9 C14.55569721 8.48244596 6.31913693 7.5439119 -2 6 C0 4 0 4 2 3 C1.34 2.67 0.68 2.34 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#193825\",transform:\"translate(398,272)\"})),_path792||(_path792=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.33 4.62 2.66 9.24 3 14 C3.66 14 4.32 14 5 14 C5 14.66 5 15.32 5 16 C5.8353125 16.309375 5.8353125 16.309375 6.6875 16.625 C9.92501302 18.55000774 11.68231141 21.03850902 14 24 C12.02090602 24.02686553 10.04171029 24.04633375 8.0625 24.0625 C6.96035156 24.07410156 5.85820313 24.08570313 4.72265625 24.09765625 C2 24 2 24 1 23 C0.84259395 21.29436222 0.74906608 19.58272756 0.68359375 17.87109375 C0.64169922 16.83662109 0.59980469 15.80214844 0.55664062 14.73632812 C0.51732422 13.64771484 0.47800781 12.55910156 0.4375 11.4375 C0.39431641 10.34501953 0.35113281 9.25253906 0.30664062 8.12695312 C0.20017932 5.41810436 0.09816484 2.70916008 0 0 Z \",fill:\"#332D2D\",transform:\"translate(562,232)\"})),_path793||(_path793=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.435 2.97 6.435 2.97 13 6 C13 6.66 13 7.32 13 8 C11.68 8 10.36 8 9 8 C10.32 8.99 11.64 9.98 13 11 C5.8808766 11.8089913 0.37883514 8.93279777 -6 6 C-5.67 5.34 -5.34 4.68 -5 4 C-4.34 4 -3.68 4 -3 4 C-3 3.34 -3 2.68 -3 2 C-3.66 1.67 -4.32 1.34 -5 1 C-3.35 1.33 -1.7 1.66 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#DCB791\",transform:\"translate(198,227)\"})),_path794||(_path794=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-5.24837358 4.82282978 -12.64646047 11 -20 11 C-20 11.66 -20 12.32 -20 13 C-18.576875 12.2575 -18.576875 12.2575 -17.125 11.5 C-14 10 -14 10 -12 10 C-12 10.66 -12 11.32 -12 12 C-14.1171875 13.5078125 -14.1171875 13.5078125 -16.875 15.125 C-17.77992187 15.66382813 -18.68484375 16.20265625 -19.6171875 16.7578125 C-22 18 -22 18 -24 18 C-24 15.36 -24 12.72 -24 10 C-23.10861328 9.56300781 -23.10861328 9.56300781 -22.19921875 9.1171875 C-16.46074468 6.27918633 -10.87626234 3.26872304 -5.34765625 0.0390625 C-3 -1 -3 -1 0 0 Z \",fill:\"#462F25\",transform:\"translate(24,471)\"})),_path795||(_path795=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.969375 0.144375 1.93875 0.28875 2.9375 0.4375 C4.29144229 0.6266134 5.64563192 0.81396043 7 1 C7.74507812 1.10699219 8.49015625 1.21398437 9.2578125 1.32421875 C13.75353042 1.91094804 17.52107394 2.03359832 22 1 C20.125 5.875 20.125 5.875 19 7 C11.69665293 7.50981156 5.05293397 6.88078239 -2 5 C-1.34 3.35 -0.68 1.7 0 0 Z \",fill:\"#2D4645\",transform:\"translate(39,382)\"})),_path796||(_path796=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3 3.625 3 3.625 3 7 C3.66 7 4.32 7 5 7 C5 7.66 5 8.32 5 9 C5.66 9 6.32 9 7 9 C7 9.66 7 10.32 7 11 C8.32 11 9.64 11 11 11 C11 11.66 11 12.32 11 13 C11.66 13 12.32 13 13 13 C13 12.34 13 11.68 13 11 C16.3 11 19.6 11 23 11 C23 11.33 23 11.66 23 12 C20.36 12 17.72 12 15 12 C15 12.99 15 13.98 15 15 C17.64 15.66 20.28 16.32 23 17 C19 18 19 18 17 17 C17 17.66 17 18.32 17 19 C19.31 19 21.62 19 24 19 C24 19.33 24 19.66 24 20 C17.71157279 20.68601024 14.35220796 19.64718672 9.25 15.91796875 C-0.99211823 7.18727422 -0.99211823 7.18727422 -2 1 C-1.34 0.67 -0.68 0.34 0 0 Z \",fill:\"#28B17C\",transform:\"translate(515,371)\"})),_path797||(_path797=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.99 0 1.98 0 3 C-10.23 3 -20.46 3 -31 3 C-31 2.34 -31 1.68 -31 1 C-20.93056414 -2.27450806 -10.38704728 -1.4578312 0 0 Z \",fill:\"#99675A\",transform:\"translate(113,319)\"})),_path798||(_path798=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.29 0 8.58 0 13 0 C12.67 0.99 12.34 1.98 12 3 C11.9314505 4.89470816 11.91519628 6.7916834 11.9375 8.6875 C11.94652344 9.68136719 11.95554688 10.67523438 11.96484375 11.69921875 C11.97644531 12.45847656 11.98804688 13.21773438 12 14 C14.33075929 13.04134491 14.33075929 13.04134491 16 10 C16 12.31 16 14.62 16 17 C12.99419362 16.66602151 11.22138157 16.15988669 8.75 14.375 C6.48704211 11.30384286 6.28879317 8.75431122 6 5 C4.68 5 3.36 5 2 5 C1.34 3.35 0.68 1.7 0 0 Z \",fill:\"#738156\",transform:\"translate(242,308)\"})),_path799||(_path799=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.98291016 0.08894531 1.96582031 0.17789062 2.97851562 0.26953125 C4.00525391 0.36878906 5.03199219 0.46804688 6.08984375 0.5703125 C7.08951172 0.66183594 8.08917969 0.75335938 9.11914062 0.84765625 C17.2501523 1.59788605 17.2501523 1.59788605 20.93310547 2.05957031 C21.82916504 2.16881836 22.72522461 2.27806641 23.6484375 2.390625 C24.44564209 2.49648926 25.24284668 2.60235352 26.06420898 2.71142578 C28.26736695 2.92280882 28.26736695 2.92280882 30.02734375 0.6953125 C31.01734375 0.6953125 32.00734375 0.6953125 33.02734375 0.6953125 C33.02734375 1.3553125 33.02734375 2.0153125 33.02734375 2.6953125 C29.74434883 4.65154136 27.28896763 4.94194046 23.4921875 4.92578125 C22.43580078 4.92384766 21.37941406 4.92191406 20.29101562 4.91992188 C18.64456055 4.90155273 18.64456055 4.90155273 16.96484375 4.8828125 C15.86333984 4.88216797 14.76183594 4.88152344 13.62695312 4.88085938 C5.44910229 4.83589868 5.44910229 4.83589868 2.02734375 3.6953125 C2.35734375 6.3353125 2.68734375 8.9753125 3.02734375 11.6953125 C2.03734375 11.6953125 1.04734375 11.6953125 0.02734375 11.6953125 C-0.30265625 9.0553125 -0.63265625 6.4153125 -0.97265625 3.6953125 C-1.96265625 4.0253125 -2.95265625 4.3553125 -3.97265625 4.6953125 C-3.97265625 3.7053125 -3.97265625 2.7153125 -3.97265625 1.6953125 C-5.29265625 2.0253125 -6.61265625 2.3553125 -7.97265625 2.6953125 C-7.97265625 2.0353125 -7.97265625 1.3753125 -7.97265625 0.6953125 C-4.8424455 -0.34809108 -3.23496998 -0.30242179 0 0 Z \",fill:\"#A25D4C\",transform:\"translate(220.97265625,256.3046875)\"})),_path800||(_path800=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0.66 5.28 1.32 8 2 C8 3.65 8 5.3 8 7 C9.98 7.66 11.96 8.32 14 9 C13.25 10.9375 13.25 10.9375 12 13 C9.31826779 14.17021042 8.05229971 14.01453581 5.203125 13.22265625 C4.22859375 12.83980469 3.2540625 12.45695313 2.25 12.0625 C1.26515625 11.68222656 0.2803125 11.30195313 -0.734375 10.91015625 C-1.48203125 10.60980469 -2.2296875 10.30945313 -3 10 C-1.68 9.67 -0.36 9.34 1 9 C0.67 7.02 0.34 5.04 0 3 C1.32 3.33 2.64 3.66 4 4 C4 3.34 4 2.68 4 2 C2.68 1.67 1.36 1.34 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#E0B789\",transform:\"translate(167,213)\"})),_path801||(_path801=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.495 0.99 0.495 2 1 C3.91569747 1.10324118 5.83268494 1.18322783 7.75 1.25 C13.55142916 1.66139942 16.08811926 2.7621292 20 7 C19.67 7.66 19.34 8.32 19 9 C13.06 8.67 7.12 8.34 1 8 C-0.35439668 5.29120665 -0.06501451 2.99066732 0 0 Z \",fill:\"#EDB39A\",transform:\"translate(477,495)\"})),_path802||(_path802=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.87225366 3.74450732 2.24550933 4.85027191 2.1953125 8.765625 C2.18564453 10.09980469 2.18564453 10.09980469 2.17578125 11.4609375 C2.15902344 12.38132812 2.14226562 13.30171875 2.125 14.25 C2.11597656 15.18585938 2.10695313 16.12171875 2.09765625 17.0859375 C2.07413636 19.39088657 2.04126853 21.6953116 2 24 C2.66 24 3.32 24 4 24 C4 25.98 4 27.96 4 30 C4.66 30 5.32 30 6 30 C6 30.66 6 31.32 6 32 C6.66 32 7.32 32 8 32 C8 33.32 8 34.64 8 36 C4.03135613 34.51607229 2.7336108 32.4166745 0.75 28.75 C0.22921875 27.81671875 -0.2915625 26.8834375 -0.828125 25.921875 C-2.10912845 22.7279064 -2.2218571 20.40853178 -2 17 C-3.32 17 -4.64 17 -6 17 C-6 16.34 -6 15.68 -6 15 C-5.34 15 -4.68 15 -4 15 C-4 10.38 -4 5.76 -4 1 C-3.67 1 -3.34 1 -3 1 C-3 5.95 -3 10.9 -3 16 C-2.34 16 -1.68 16 -1 16 C-0.67 16.99 -0.34 17.98 0 19 C0 12.73 0 6.46 0 0 Z \",fill:\"#F6DBB0\",transform:\"translate(336,432)\"})),_path803||(_path803=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 3.96 1 7.92 1 12 C1.66 12 2.32 12 3 12 C3.33 15.96 3.66 19.92 4 24 C4.33 24 4.66 24 5 24 C5 26.64 5 29.28 5 32 C4.34 32 3.68 32 3 32 C3 31.34 3 30.68 3 30 C2.34 30 1.68 30 1 30 C1 27.36 1 24.72 1 22 C0.34 21.67 -0.32 21.34 -1 21 C-1 18.03 -1 15.06 -1 12 C-2.32 12 -3.64 12 -5 12 C-4.67 10.68 -4.34 9.36 -4 8 C-3.34 8 -2.68 8 -2 8 C-2 7.34 -2 6.68 -2 6 C-1.34 6 -0.68 6 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#E12539\",transform:\"translate(309,386)\"})),_path804||(_path804=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0 5.28 0 8 0 C9.32129837 12.70695458 10.32962491 25.2178785 10 38 C7.58445758 34.37668637 7.64710389 32.24998864 7.4375 27.9375 C7.36632289 23.30460727 7.36632289 23.30460727 6 19 C5.93049459 17.45976004 5.91547643 15.91665012 5.9375 14.375 C5.95103516 13.14910156 5.95103516 13.14910156 5.96484375 11.8984375 C5.97644531 11.27195312 5.98804688 10.64546875 6 10 C5.34 10 4.68 10 4 10 C3.855625 9.071875 3.71125 8.14375 3.5625 7.1875 C3.07899889 3.99274889 3.07899889 3.99274889 2 1 C1.34 0.67 0.68 0.34 0 0 Z \",fill:\"#FD4559\",transform:\"translate(314,384)\"})),_path805||(_path805=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.71349609 0.01353516 1.42699219 0.02707031 2.16210938 0.04101562 C3.87925246 0.07558898 5.59599359 0.12934985 7.3125 0.1875 C1.79475879 3.86599414 -4.04141978 3.4639514 -10.48828125 3.6171875 C-14.84007169 3.7087292 -14.84007169 3.7087292 -18.58300781 5.67163086 C-21.24750903 7.59087541 -23.07044941 7.69270395 -26.328125 7.91796875 C-27.93300781 8.03881836 -27.93300781 8.03881836 -29.5703125 8.16210938 C-30.68148438 8.23236328 -31.79265625 8.30261719 -32.9375 8.375 C-34.06414063 8.45685547 -35.19078125 8.53871094 -36.3515625 8.62304688 C-39.12959293 8.82315924 -41.90789582 9.01084099 -44.6875 9.1875 C-44.6875 8.5275 -44.6875 7.8675 -44.6875 7.1875 C-43.98778076 7.08203857 -43.28806152 6.97657715 -42.56713867 6.86791992 C-39.33537524 6.37693484 -36.1052221 5.87602148 -32.875 5.375 C-31.77478516 5.20935547 -30.67457031 5.04371094 -29.54101562 4.87304688 C-24.2178782 4.04081595 -19.07860161 3.08303915 -13.90625 1.5625 C-9.1542061 0.19829134 -4.92066329 -0.18434762 0 0 Z \",fill:\"#5D4139\",transform:\"translate(44.6875,322.8125)\"})),_path806||(_path806=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.66 0.66 3.32 1.32 4 2 C4.66 1.34 5.32 0.68 6 0 C6.33 0.99 6.66 1.98 7 3 C10.3 3 13.6 3 17 3 C16.67 4.32 16.34 5.64 16 7 C15.9254644 8.2236068 15.9254644 8.2236068 17 10 C16.01 10 15.02 10 14 10 C13.67 10.66 13.34 11.32 13 12 C11.68 12 10.36 12 9 12 C9 11.01 9 10.02 9 9 C7.35 9.33 5.7 9.66 4 10 C4 9.34 4 8.68 4 8 C3.34 8 2.68 8 2 8 C1.34 5.36 0.68 2.72 0 0 Z \",fill:\"#9A5B48\",transform:\"translate(157,250)\"})),_path807||(_path807=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C2.54898926 1.35078613 2.09797852 1.70157227 1.63330078 2.06298828 C0.2595196 3.13148475 -1.11416896 4.2001003 -2.48779297 5.26879883 C-4.09292295 6.5168867 -5.69872887 7.76410569 -7.30517578 9.01049805 C-11.57373267 12.3243446 -15.82999088 15.65191741 -20.0625 19.01171875 C-21.27317139 19.96763916 -21.27317139 19.96763916 -22.50830078 20.94287109 C-24.06293896 22.17099356 -25.61353987 23.40424738 -27.15966797 24.64306641 C-27.86752441 25.2004248 -28.57538086 25.7577832 -29.3046875 26.33203125 C-29.92327637 26.82421143 -30.54186523 27.3163916 -31.17919922 27.82348633 C-33.11870029 29.0766984 -34.74345317 29.57491217 -37 30 C-36.21625 29.236875 -35.4325 28.47375 -34.625 27.6875 C-31.92742283 25.09108195 -31.92742283 25.09108195 -30 22 C-29.34 22 -28.68 22 -28 22 C-28 21.34 -28 20.68 -28 20 C-27.09507812 19.51080078 -27.09507812 19.51080078 -26.171875 19.01171875 C-24.97304688 18.35623047 -24.97304688 18.35623047 -23.75 17.6875 C-22.96109375 17.25824219 -22.1721875 16.82898438 -21.359375 16.38671875 C-16.855631 13.93648627 -16.855631 13.93648627 -14.25 9.8125 C-14.1675 9.214375 -14.085 8.61625 -14 8 C-13.34 8 -12.68 8 -12 8 C-12 7.34 -12 6.68 -12 6 C-10.4221875 5.62875 -10.4221875 5.62875 -8.8125 5.25 C-5.16144011 4.23950464 -2.94303011 2.37077426 0 0 Z \",fill:\"#84856C\",transform:\"translate(526,68)\"})),_path808||(_path808=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-1.95703125 3.33984375 -1.95703125 3.33984375 -4.8125 4.9375 C-5.89273438 5.54980469 -6.97296875 6.16210938 -8.0859375 6.79296875 C-8.69920898 7.13763184 -9.31248047 7.48229492 -9.94433594 7.83740234 C-13.96080456 10.10894909 -17.94592456 12.43509324 -21.9375 14.75 C-22.75387939 15.22171631 -23.57025879 15.69343262 -24.41137695 16.17944336 C-27.58643891 18.01449878 -30.75527908 19.85151393 -33.890625 21.75390625 C-36.18503087 23.10930527 -38.50504878 24.07330383 -41 25 C-41 24.01 -41 23.02 -41 22 C-39.19921875 20.60546875 -39.19921875 20.60546875 -36.6875 19.1875 C-35.77355469 18.66542969 -34.85960937 18.14335937 -33.91796875 17.60546875 C-30.1967169 15.55803299 -26.46960761 13.522412 -22.73046875 11.5078125 C-20.04799116 10.02650156 -17.42888855 8.4696748 -14.8125 6.875 C-3.46875 0 -3.46875 0 0 0 Z \",fill:\"#694536\",transform:\"translate(41,467)\"})),_path809||(_path809=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 11.88 1 23.76 1 36 C0.34 36 -0.32 36 -1 36 C-0.814375 36.78375 -0.62875 37.5675 -0.4375 38.375 C0.11040123 42.91475308 0.31270019 47.57659816 -1 52 C-3.05078125 53.296875 -3.05078125 53.296875 -5 54 C-4.54281941 50.2663585 -4.07747406 46.53770293 -3.54101562 42.81445312 C-2.20742913 33.40781425 -1.42527686 24.04410726 -0.875 14.5625 C-0.78825253 13.13733975 -0.70101483 11.71220926 -0.61328125 10.28710938 C-0.40323792 6.85839506 -0.19970468 3.42933393 0 0 Z \",fill:\"#0B0C10\",transform:\"translate(289,410)\"})),_path810||(_path810=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.1875 1.75 -0.1875 1.75 -1 4 C-2.2065625 4.9590625 -2.2065625 4.9590625 -3.4375 5.9375 C-6.49557413 8.05373253 -6.49557413 8.05373253 -8 13 C-3.38 13 1.24 13 6 13 C5.67 13.66 5.34 14.32 5 15 C-0.94 15 -6.88 15 -13 15 C-13 12.03 -13 9.06 -13 6 C-11.35 6 -9.7 6 -8 6 C-8 5.34 -8 4.68 -8 4 C-2.58823529 0 -2.58823529 0 0 0 Z \",fill:\"#D55C39\",transform:\"translate(102,388)\"})),_path811||(_path811=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C19.16138666 -0.52684057 37.95938596 1.09745658 57 3 C57 3.66 57 4.32 57 5 C45.19449732 5.45920918 33.48803467 4.09532937 21.75 3 C19.63676389 2.80679725 17.52348291 2.61408476 15.41015625 2.421875 C10.27290231 1.95357061 5.1363023 1.47862445 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#DFBDA2\",transform:\"translate(569,304)\"})),_path812||(_path812=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C0.3147829 4.66782546 -0.77291645 5.88439383 -4.4375 7.75 C-8 9 -8 9 -10.25 9.4375 C-12.19281266 9.86216646 -12.19281266 9.86216646 -13.2734375 11.90234375 C-15.43073105 14.523309 -17.17085071 15.08035955 -20.375 16.125 C-21.31085938 16.43695313 -22.24671875 16.74890625 -23.2109375 17.0703125 C-24.13132812 17.37710938 -25.05171875 17.68390625 -26 18 C-27.31871094 18.58394531 -27.31871094 18.58394531 -28.6640625 19.1796875 C-31 20 -31 20 -34 19 C-33.1028125 18.52691406 -32.205625 18.05382812 -31.28125 17.56640625 C-24.22549138 13.83224055 -17.20912355 10.0367009 -10.25 6.125 C-9.57130859 5.7441626 -8.89261719 5.3633252 -8.19335938 4.97094727 C-5.39604852 3.39196873 -2.6740735 1.78271567 0 0 Z \",fill:\"#4D3329\",transform:\"translate(376,208)\"})),_path813||(_path813=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-10.26688501 5.21554268 -20.54828254 8.19487881 -31 10.75 C-32.0725 11.01296875 -33.145 11.2759375 -34.25 11.546875 C-37 12 -37 12 -40 11 C-37.65139334 8.65139334 -36.27364765 8.38075819 -33.0859375 7.57421875 C-32.09819336 7.31817871 -31.11044922 7.06213867 -30.09277344 6.79833984 C-29.0721582 6.5348877 -28.05154297 6.27143555 -27 6 C-25.09499966 5.4696856 -23.19131794 4.93460895 -21.2890625 4.39453125 C-19.40104167 3.8671875 -17.51302083 3.33984375 -15.625 2.8125 C-14.66722656 2.53986328 -13.70945312 2.26722656 -12.72265625 1.98632812 C-11.79582031 1.72916016 -10.86898437 1.47199219 -9.9140625 1.20703125 C-9.0885791 0.9747583 -8.2630957 0.74248535 -7.41259766 0.50317383 C-4.8771389 -0.02562404 -2.5825727 -0.08884602 0 0 Z \",fill:\"#3F8377\",transform:\"translate(601,184)\"})),_path814||(_path814=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3.96070434 3.88211302 4.10581883 5.69850044 4.0625 8.6875 C4.05347656 9.49574219 4.04445312 10.30398437 4.03515625 11.13671875 C4.02355469 11.75160156 4.01195312 12.36648437 4 13 C4.66 13 5.32 13 6 13 C6.66 14.98 7.32 16.96 8 19 C7.34 19 6.68 19 6 19 C6 21.97 6 24.94 6 28 C2 27 2 27 0 25 C-0.22705078 22.47802734 -0.22705078 22.47802734 -0.1953125 19.3359375 C-0.18886719 18.21445313 -0.18242187 17.09296875 -0.17578125 15.9375 C-0.15902344 14.761875 -0.14226562 13.58625 -0.125 12.375 C-0.11597656 11.19164062 -0.10695312 10.00828125 -0.09765625 8.7890625 C-0.07402812 5.85917477 -0.04108514 2.9296866 0 0 Z \",fill:\"#645145\",transform:\"translate(132,121)\"})),_path815||(_path815=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.0246985 3.95099928 1.04285923 7.90196874 1.05493164 11.85302734 C1.06244036 13.85906551 1.0751447 15.86508202 1.08789062 17.87109375 C1.09111328 19.12792969 1.09433594 20.38476562 1.09765625 21.6796875 C1.10289307 22.84226074 1.10812988 24.00483398 1.11352539 25.20263672 C1 28 1 28 0 30 C-0.13957107 31.49643208 -0.22540445 32.99811108 -0.28125 34.5 C-0.31863281 35.386875 -0.35601562 36.27375 -0.39453125 37.1875 C-0.42933594 38.115625 -0.46414063 39.04375 -0.5 40 C-0.56875603 41.83349409 -0.64148038 43.66684497 -0.71875 45.5 C-0.74904297 46.3146875 -0.77933594 47.129375 -0.81054688 47.96875 C-1 50 -1 50 -2 52 C-2.2275015 53.87056791 -2.40962811 55.74685958 -2.5625 57.625 C-2.64628906 58.62789062 -2.73007812 59.63078125 -2.81640625 60.6640625 C-2.87699219 61.43492187 -2.93757813 62.20578125 -3 63 C-3.33 63 -3.66 63 -4 63 C-4.1217487 53.77125559 -3.77336913 44.64243119 -3.125 35.4375 C-3.03621582 34.1386084 -2.94743164 32.8397168 -2.85595703 31.50146484 C-2.11583548 20.97717048 -1.15961097 10.48584388 0 0 Z \",fill:\"#EDBF9C\",transform:\"translate(269,563)\"})),_path816||(_path816=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.53198242 1.25976562 1.53198242 1.25976562 3 3 C2.60403425 5.97427711 2.07141279 8.61789633 1.3125 11.5 C0.91635046 13.12200145 0.52181608 14.74439823 0.12890625 16.3671875 C-0.06687012 17.15706055 -0.26264648 17.94693359 -0.46435547 18.76074219 C-1.5107554 23.13520898 -2.25767921 27.56560999 -3 32 C-4.98 32.495 -4.98 32.495 -7 33 C-6.88444496 31.29100181 -6.75706997 29.58280131 -6.625 27.875 C-6.55539063 26.92367187 -6.48578125 25.97234375 -6.4140625 24.9921875 C-5.97007326 21.78373696 -5.05991135 19.05860134 -4 16 C-3.24230008 13.22039057 -2.5582334 10.42372646 -1.875 7.625 C-1.69324219 6.88894531 -1.51148438 6.15289063 -1.32421875 5.39453125 C-0.88064438 3.59688777 -0.44001734 1.79851746 0 0 Z \",fill:\"#482F25\",transform:\"translate(215,564)\"})),_path817||(_path817=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.89800682 1.54870311 8.29454582 4.40561696 12.1875 7.625 C13.51657159 8.71267412 14.84599985 9.79991256 16.17578125 10.88671875 C16.82369629 11.4182959 17.47161133 11.94987305 18.13916016 12.49755859 C21.4315628 15.15584328 24.83705574 17.67188765 28.2421875 20.18359375 C30.38284025 22.39560159 30.67917567 23.98321639 31 27 C27.35015184 25.44182816 24.8314046 23.18875601 21.9375 20.5 C19.34079665 18.09463269 16.94893694 15.96595796 14 14 C14 13.34 14 12.68 14 12 C13.43667969 11.74089844 12.87335937 11.48179687 12.29296875 11.21484375 C9.75539889 9.87040725 7.58886526 8.31210305 5.3125 6.5625 C4.52488281 5.96566406 3.73726562 5.36882812 2.92578125 4.75390625 C1 3 1 3 0 0 Z \",fill:\"#744A34\",transform:\"translate(538,489)\"})),_path818||(_path818=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.969375 0.165 1.93875 0.33 2.9375 0.5 C7.29487763 1.13396273 11.60630704 1.0896672 16 1 C16 2.98 16 4.96 16 7 C9.4 7 2.8 7 -4 7 C-4 6.34 -4 5.68 -4 5 C-3.34 5 -2.68 5 -2 5 C-2 4.34 -2 3.68 -2 3 C-1.34 3 -0.68 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#040406\",transform:\"translate(326,481)\"})),_path819||(_path819=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C13.67249094 3.72061147 26.25936133 9.91649599 39 16 C39 16.66 39 17.32 39 18 C39.99 18.33 40.98 18.66 42 19 C38.58233346 20.14202355 38.1311746 20.05987098 34.59375 18.4453125 C33.22355723 17.68185653 31.85932317 16.90764536 30.5 16.125 C22.95878303 11.93386208 15.26520081 8.32136 7.33789062 4.92041016 C6.52513672 4.56640137 5.71238281 4.21239258 4.875 3.84765625 C3.78832031 3.3837146 3.78832031 3.3837146 2.6796875 2.91040039 C1 2 1 2 0 0 Z \",fill:\"#6D4631\",transform:\"translate(535,439)\"})),_path820||(_path820=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4 6.05714286 4 6.05714286 4 11 C0.7 10.67 -2.6 10.34 -6 10 C-6 9.34 -6 8.68 -6 8 C-6.66 8 -7.32 8 -8 8 C-8.3125 5.1875 -8.3125 5.1875 -8 2 C-4.88411016 -0.61061041 -3.93844351 -1.3128145 0 0 Z \",fill:\"#EAD89A\",transform:\"translate(598,328)\"})),_path821||(_path821=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.33 1.32 -0.66 2.64 -1 4 C-2.65 4 -4.3 4 -6 4 C-5.67 4.99 -5.34 5.98 -5 7 C-4.01 7.33 -3.02 7.66 -2 8 C-2 8.66 -2 9.32 -2 10 C-3.77119803 9.85866501 -5.54195287 9.71176792 -7.3125 9.5625 C-8.29863281 9.48128906 -9.28476562 9.40007812 -10.30078125 9.31640625 C-13 9 -13 9 -16 8 C-16 7.34 -16 6.68 -16 6 C-17.65 6 -19.3 6 -21 6 C-21 5.67 -21 5.34 -21 5 C-18.03 5 -15.06 5 -12 5 C-12 3.35 -12 1.7 -12 0 C-10.37585622 -0.19477739 -8.75063577 -0.38059458 -7.125 -0.5625 C-6.22007812 -0.66691406 -5.31515625 -0.77132813 -4.3828125 -0.87890625 C-2 -1 -2 -1 0 0 Z \",fill:\"#0D2F32\",transform:\"translate(480,312)\"})),_path822||(_path822=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.36340919 1.21343502 10.68346762 2.59747919 16 4 C16 4.33 16 4.66 16 5 C14.3954444 4.85851011 12.79136233 4.71164314 11.1875 4.5625 C10.29417969 4.48128906 9.40085937 4.40007812 8.48046875 4.31640625 C6 4 6 4 3 3 C3 3.66 3 4.32 3 5 C4.423125 5.185625 4.423125 5.185625 5.875 5.375 C9 6 9 6 11 8 C-6.37068966 6.31896552 -6.37068966 6.31896552 -10.625 2.875 C-11.07875 2.25625 -11.5325 1.6375 -12 1 C-7.83272812 -1.77818126 -4.70008104 -0.88669075 0 0 Z \",fill:\"#DA9C7B\",transform:\"translate(364,284)\"})),_path823||(_path823=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.87196489 -0.55445869 7.47068845 1.20003749 11.5 3.8125 C12.6034375 4.52019531 13.706875 5.22789062 14.84375 5.95703125 C15.8853125 6.63121094 16.926875 7.30539063 18 8 C18.9590625 8.54011719 19.918125 9.08023438 20.90625 9.63671875 C21.5971875 10.08660156 22.288125 10.53648437 23 11 C23 11.66 23 12.32 23 13 C22.01 13 21.02 13 20 13 C20 12.34 20 11.68 20 11 C19.01 10.7525 18.02 10.505 17 10.25 C13.32602392 9.21949452 10.13475182 7.633844 6.796875 5.8046875 C4.87180668 4.79564297 4.87180668 4.79564297 2 5 C1.67 5.99 1.34 6.98 1 8 C-0.43793392 7.68950274 -1.8753318 7.3765224 -3.3125 7.0625 C-4.11300781 6.88847656 -4.91351563 6.71445313 -5.73828125 6.53515625 C-8 6 -8 6 -11 5 C-11 4.34 -11 3.68 -11 3 C-11.66 2.67 -12.32 2.34 -13 2 C-11.35 2 -9.7 2 -8 2 C-8 2.66 -8 3.32 -8 4 C-7.4225 3.855625 -6.845 3.71125 -6.25 3.5625 C-4.16666667 3.04166667 -2.08333333 2.52083333 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#503327\",transform:\"translate(229,230)\"})),_path824||(_path824=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-41.20487046 9.80905971 -41.20487046 9.80905971 -54 9 C-54 8.67 -54 8.34 -54 8 C-48.04141756 7.01843797 -42.0823416 6.03994729 -36.12280273 5.06420898 C-34.09857812 4.73235565 -32.07448706 4.39968649 -30.05053711 4.06616211 C-27.12909747 3.58489072 -24.20717844 3.10662637 -21.28515625 2.62890625 C-20.39103531 2.48095108 -19.49691437 2.33299591 -18.57569885 2.18055725 C-5.18420671 0 -5.18420671 0 0 0 Z \",fill:\"#7A6556\",transform:\"translate(626,219)\"})),_path825||(_path825=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-3.87580266 3.81900464 -7.75361874 5.63362563 -11.63330078 7.44433594 C-12.95091042 8.06001723 -14.2679774 8.67686131 -15.58447266 9.29492188 C-17.48456171 10.18671235 -19.38660867 11.07420505 -21.2890625 11.9609375 C-22.43068848 12.49509277 -23.57231445 13.02924805 -24.74853516 13.57958984 C-27.79462029 14.91027939 -30.83039535 16.00503801 -34 17 C-34.66 16.34 -35.32 15.68 -36 15 C-33.36 13.68 -30.72 12.36 -28 11 C-28.66 10.34 -29.32 9.68 -30 9 C-24.25 6 -24.25 6 -22 6 C-22 6.66 -22 7.32 -22 8 C-19.6015272 7.23671243 -17.20646351 6.46470304 -14.8125 5.6875 C-14.13896484 5.47416016 -13.46542969 5.26082031 -12.77148438 5.04101562 C-8.67235123 3.70129894 -4.06419986 0 0 0 Z \",fill:\"#4C3F37\",transform:\"translate(525,152)\"})),_path826||(_path826=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3 8.59 3 16.18 3 24 C2.34 24 1.68 24 1 24 C1 18.06 1 12.12 1 6 C0.34 6 -0.32 6 -1 6 C-1 11.61 -1 17.22 -1 23 C-1.66 22.67 -2.32 22.34 -3 22 C-3 16.06 -3 10.12 -3 4 C-4.32 3.34 -5.64 2.68 -7 2 C-3.125 1 -3.125 1 -2 1 C-1.34 0.67 -0.68 0.34 0 0 Z \",fill:\"#8A6547\",transform:\"translate(42,151)\"})),_path827||(_path827=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.3125 -0.3125 3.3125 -0.3125 7 0 C9.38164192 2.84260487 10 4.28405267 10 8 C8.68 7.67 7.36 7.34 6 7 C6 7.99 6 8.98 6 10 C6.66 10 7.32 10 8 10 C8.33 11.98 8.66 13.96 9 16 C5.48824193 15.34967443 2.79381746 14.25057517 0 12 C-0.3125 8.8125 -0.3125 8.8125 0 6 C0.66 6 1.32 6 2 6 C2.33 4.68 2.66 3.36 3 2 C2.01 1.67 1.02 1.34 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#D16352\",transform:\"translate(138,118)\"})),_path828||(_path828=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C3.58813477 2.23144531 3.58813477 2.23144531 5.44140625 5.328125 C6.10720703 6.43800781 6.77300781 7.54789063 7.45898438 8.69140625 C7.80405029 9.2755127 8.14911621 9.85961914 8.50463867 10.46142578 C9.55300758 12.23395073 10.61433115 13.9981821 11.67773438 15.76171875 C17.32470406 25.2372353 17.32470406 25.2372353 18 29 C18.66 29 19.32 29 20 29 C20.33 30.98 20.66 32.96 21 35 C16.64001389 33.5466713 15.46740482 30.18761929 13.3125 26.375 C12.87695801 25.61823975 12.44141602 24.86147949 11.99267578 24.08178711 C9.05481671 18.94508233 6.18571598 13.76981594 3.375 8.5625 C2.86126831 7.61479736 2.86126831 7.61479736 2.3371582 6.64794922 C0 2.24351532 0 2.24351532 0 0 Z \",fill:\"#A67354\",transform:\"translate(441,523)\"})),_path829||(_path829=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.63 0.33 7.26 0.66 11 1 C11 1.33 11 1.66 11 2 C7.7 2 4.4 2 1 2 C-1.12654277 5.89153477 -1.12654277 5.89153477 -2 10 C3.61 10.66 9.22 11.32 15 12 C15 12.99 15 13.98 15 15 C11.7 15 8.4 15 5 15 C5 15.33 5 15.66 5 16 C3.3603125 16.2165625 3.3603125 16.2165625 1.6875 16.4375 C-1.93122987 16.88288104 -1.93122987 16.88288104 -5 18 C-4.49396008 15.83125748 -4.00016187 14.00032373 -3 12 C-3.66 12 -4.32 12 -5 12 C-4.47731534 9.23723823 -3.89130413 6.6739124 -3 4 C-2.34 4 -1.68 4 -1 4 C-0.67 2.68 -0.34 1.36 0 0 Z \",fill:\"#77191A\",transform:\"translate(159,474)\"})),_path830||(_path830=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 2.31 1 4.62 1 7 C-3.62974991 8.77401632 -7.96044843 9.39641621 -12.875 9.625 C-13.56335938 9.66367187 -14.25171875 9.70234375 -14.9609375 9.7421875 C-16.64023246 9.83548166 -18.32007767 9.91878238 -20 10 C-19.125 5.125 -19.125 5.125 -18 4 C-16.65984779 3.84417697 -15.31241097 3.74955858 -13.96484375 3.68359375 C-13.15595703 3.64169922 -12.34707031 3.59980469 -11.51367188 3.55664062 C-10.2384668 3.49766602 -10.2384668 3.49766602 -8.9375 3.4375 C-7.65649414 3.37272461 -7.65649414 3.37272461 -6.34960938 3.30664062 C-4.23327963 3.20023298 -2.11666187 3.09958269 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#B9726D\",transform:\"translate(269,351)\"})),_path831||(_path831=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.33 0 0.66 0 1 C-0.56518845 1.07294785 -1.13037689 1.14589569 -1.71269226 1.22105408 C-7.60161922 1.98147254 -13.49022925 2.74430992 -19.37866211 3.50854492 C-21.575522 3.79334407 -23.77246161 4.07752889 -25.96948242 4.36108398 C-29.12960698 4.76904942 -32.28943708 5.17923203 -35.44921875 5.58984375 C-36.91979988 5.77896584 -36.91979988 5.77896584 -38.42008972 5.97190857 C-39.34066666 6.09195755 -40.26124359 6.21200653 -41.2097168 6.33569336 C-42.4188398 6.49224648 -42.4188398 6.49224648 -43.65238953 6.65196228 C-45.32000513 6.89918947 -46.98014562 7.19937467 -48.63215637 7.53541565 C-51.24747301 8.04855561 -53.65031011 8.09799587 -56.3125 8.0625 C-57.19550781 8.05347656 -58.07851563 8.04445312 -58.98828125 8.03515625 C-59.65214844 8.02355469 -60.31601562 8.01195312 -61 8 C-57.97879588 6.30619849 -55.38145751 5.59305449 -51.95947266 5.11450195 C-50.95808258 4.97128006 -49.9566925 4.82805817 -48.92495728 4.68049622 C-47.848862 4.53456528 -46.77276672 4.38863434 -45.6640625 4.23828125 C-44.55195404 4.08336716 -43.43984558 3.92845306 -42.29403687 3.7688446 C-39.94260968 3.44348102 -37.59067338 3.12177887 -35.23828125 2.8034668 C-31.64408112 2.31509271 -28.05256109 1.80966836 -24.4609375 1.30273438 C-22.17462149 0.98854594 -19.88816722 0.67536159 -17.6015625 0.36328125 C-15.99349228 0.1352758 -15.99349228 0.1352758 -14.35293579 -0.09733582 C-9.33352832 -0.76363217 -4.98551095 -1.282493 0 0 Z \",fill:\"#6A453D\",transform:\"translate(510,238)\"})),_path832||(_path832=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.94956528 1.36944102 5.52468811 2.87830409 8 5 C8 5.66 8 6.32 8 7 C8.54785156 7.23847656 9.09570312 7.47695313 9.66015625 7.72265625 C12.57231611 9.312433 14.9036209 11.29723319 17.4375 13.4375 C20.82918948 16.30085955 24.13133033 18.81641331 28 21 C27.34 22.32 26.68 23.64 26 25 C19.42796611 21.41525424 14.1975274 16.32127806 9 11 C8.23816406 10.26007813 7.47632813 9.52015625 6.69140625 8.7578125 C5.86511719 7.95085937 5.03882813 7.14390625 4.1875 6.3125 C3.39730469 5.54550781 2.60710938 4.77851563 1.79296875 3.98828125 C0 2 0 2 0 0 Z \",fill:\"#784F3A\",transform:\"translate(515,482)\"})),_path833||(_path833=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.19335938 1.29035156 1.38671875 2.58070313 1.5859375 3.91015625 C1.84872195 5.62764035 2.11175604 7.34508627 2.375 9.0625 C2.50132812 9.91005859 2.62765625 10.75761719 2.7578125 11.63085938 C3.5185104 16.55637825 4.56997219 21.21558595 6 26 C6.32105982 27.57391732 6.60075629 29.1576873 6.8125 30.75 C6.97685547 31.85601562 6.97685547 31.85601562 7.14453125 32.984375 C7 35 7 35 4 38 C3.67 34.04 3.34 30.08 3 26 C2.34 26 1.68 26 1 26 C-1.13586678 22.79619983 -1.23132175 21.98060033 -1.125 18.3125 C-1.10695313 17.50425781 -1.08890625 16.69601562 -1.0703125 15.86328125 C-1.04710937 15.24839844 -1.02390625 14.63351562 -1 14 C-0.67 14 -0.34 14 0 14 C0 9.38 0 4.76 0 0 Z \",fill:\"#532211\",transform:\"translate(475,404)\"})),_path834||(_path834=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C8.25 0 16.5 0 25 0 C25.33 0.99 25.66 1.98 26 3 C23.39048764 4.30475618 21.47298715 4.11301572 18.5546875 4.09765625 C16.94013672 4.09282227 16.94013672 4.09282227 15.29296875 4.08789062 C14.16503906 4.07951172 13.03710938 4.07113281 11.875 4.0625 C10.73933594 4.05798828 9.60367187 4.05347656 8.43359375 4.04882812 C5.62234362 4.03701615 2.8111977 4.02054507 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#FBD4B4\",transform:\"translate(377,351)\"})),_path835||(_path835=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.1105424 -0.11269443 11.95170514 0.10395632 18 1 C18 2.98 18 4.96 18 7 C5.33029613 6.03644647 5.33029613 6.03644647 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#BA7D5F\",transform:\"translate(608,351)\"})),_path836||(_path836=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0.33 5.94 0.66 9 1 C9 1.66 9 2.32 9 3 C9.59312988 3.10546143 10.18625977 3.21092285 10.79736328 3.31958008 C22.24237611 5.36072181 33.65658629 7.44482831 45 10 C44.67 10.66 44.34 11.32 44 12 C31.26658743 9.97003568 18.62964098 7.59711824 6 5 C5.67 5.66 5.34 6.32 5 7 C2.5 5.75 2.5 5.75 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#9F6B53\",transform:\"translate(534,314)\"})),_path837||(_path837=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C5.33 0.66 5.66 1.32 6 2 C4.68 2.33 3.36 2.66 2 3 C2 3.99 2 4.98 2 6 C3.32 5.67 4.64 5.34 6 5 C6.66 7.31 7.32 9.62 8 12 C7 13 7 13 4.4375 13.0625 C3.633125 13.041875 2.82875 13.02125 2 13 C2 13.66 2 14.32 2 15 C0.02 15.66 -1.96 16.32 -4 17 C-3.7168444 14.91549283 -3.42314331 12.83241633 -3.125 10.75 C-2.96257812 9.58984375 -2.80015625 8.4296875 -2.6328125 7.234375 C-2.08179569 4.41806687 -1.44203518 2.44782443 0 0 Z \",fill:\"#1B1715\",transform:\"translate(153,279)\"})),_path838||(_path838=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C5 8.25 5 16.5 5 25 C1 22 1 22 0.45410156 19.63989258 C0.4331543 18.73392334 0.41220703 17.8279541 0.390625 16.89453125 C0.34228516 15.42016602 0.34228516 15.42016602 0.29296875 13.91601562 C0.27878906 12.89185547 0.26460937 11.86769531 0.25 10.8125 C0.22035156 9.77673828 0.19070312 8.74097656 0.16015625 7.67382812 C0.08942755 5.11580688 0.03674743 2.55869842 0 0 Z \",fill:\"#D9997C\",transform:\"translate(152,118)\"})),_path839||(_path839=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.475 0.495 2.475 0.495 5 1 C4.67 1.99 4.34 2.98 4 4 C2.68 4 1.36 4 0 4 C0 4.99 0 5.98 0 7 C-13.86 6.67 -27.72 6.34 -42 6 C-42 5.67 -42 5.34 -42 5 C-36.57271071 4.25241751 -31.25547655 3.81384091 -25.78125 3.68359375 C-24.66623108 3.6524221 -24.66623108 3.6524221 -23.52868652 3.62062073 C-21.18587252 3.55594872 -18.84295976 3.49662908 -16.5 3.4375 C-14.89842784 3.39423616 -13.29686518 3.35061956 -11.6953125 3.30664062 C-7.79697267 3.20035364 -3.8985349 3.09886206 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#CB1D25\",transform:\"translate(116,404)\"})),_path840||(_path840=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.5624827 -0.02913821 7.12493454 -0.04684529 10.6875 -0.0625 C12.19860352 -0.07506836 12.19860352 -0.07506836 13.74023438 -0.08789062 C14.71669922 -0.09111328 15.69316406 -0.09433594 16.69921875 -0.09765625 C18.04246216 -0.10551147 18.04246216 -0.10551147 19.4128418 -0.11352539 C22.03641759 0.00159802 24.44293053 0.41765715 27 1 C27 1.66 27 2.32 27 3 C23.79217914 3.95376567 20.91812604 4.11621181 17.578125 4.09765625 C16.55332031 4.09443359 15.52851563 4.09121094 14.47265625 4.08789062 C13.40917969 4.07951172 12.34570312 4.07113281 11.25 4.0625 C10.17105469 4.05798828 9.09210938 4.05347656 7.98046875 4.04882812 C5.32025617 4.03705727 2.66015635 4.02061399 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#9A9082\",transform:\"translate(262,404)\"})),_path841||(_path841=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 5.75 2 5.75 2 8 C-7.25401683 8.31369549 -7.25401683 8.31369549 -11 6 C-12.3125 3.375 -12.3125 3.375 -13 1 C-8.23947038 -0.97387813 -5.03511899 -1.0070238 0 0 Z \",fill:\"#87533F\",transform:\"translate(530,395)\"})),_path842||(_path842=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.94957992 -0.22428282 15.27111181 0.04596958 23 2 C23 1.34 23 0.68 23 0 C23.99 0 24.98 0 26 0 C25.67 1.32 25.34 2.64 25 4 C25.66 4.33 26.32 4.66 27 5 C17.80576079 8.0647464 8.84467616 4.85476579 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#220504\",transform:\"translate(22,392)\"})),_path843||(_path843=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0.33 5.94 0.66 9 1 C8.01 1.495 8.01 1.495 7 2 C7 2.66 7 3.32 7 4 C13.6 4 20.2 4 27 4 C27 4.33 27 4.66 27 5 C21.39 5 15.78 5 10 5 C10.33 6.65 10.66 8.3 11 10 C10.34 10 9.68 10 9 10 C8.34 9.34 7.68 8.68 7 8 C5.34738161 6.97695052 3.68208635 5.97383946 2 5 C1.67 8.63 1.34 12.26 1 16 C-1.64 16 -4.28 16 -7 16 C-6.67 15.01 -6.34 14.02 -6 13 C-4.35 13.33 -2.7 13.66 -1 14 C-0.67 9.38 -0.34 4.76 0 0 Z \",fill:\"#C1E9BF\",transform:\"translate(505,322)\"})),_path844||(_path844=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.63 0 7.26 0 11 0 C11 2.64 11 5.28 11 8 C7.04 8 3.08 8 -1 8 C-0.67 8.99 -0.34 9.98 0 11 C-1.32 11.33 -2.64 11.66 -4 12 C-3.34 11.67 -2.68 11.34 -2 11 C-2 9.35 -2 7.7 -2 6 C-2.66 6 -3.32 6 -4 6 C-4 5.01 -4 4.02 -4 3 C-1.01049637 2.12435592 1.57963862 1.91780862 4.6875 2 C6.12450738 2.03763031 7.56325645 2.04662859 9 2 C9.33 1.67 9.66 1.34 10 1 C6.7 1 3.4 1 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#B47054\",transform:\"translate(336,325)\"})),_path845||(_path845=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.63 0 7.26 0 11 0 C11 3.96 11 7.92 11 12 C-3.85 11.505 -3.85 11.505 -19 11 C-19.33 11.66 -19.66 12.32 -20 13 C-20 11.68 -20 10.36 -20 9 C-9.99112106 8.37722531 -0.03411669 7.82292735 10 8 C9.34 6.35 8.68 4.7 8 3 C8.66 3 9.32 3 10 3 C10 2.34 10 1.68 10 1 C6.7 1 3.4 1 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#0D0504\",transform:\"translate(340,289)\"})),_path846||(_path846=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 1 4 2 6 3 C6.02690104 5.79173055 6.04679053 8.58320348 6.0625 11.375 C6.07087891 12.1690625 6.07925781 12.963125 6.08789062 13.78125 C6.11328125 19.7734375 6.11328125 19.7734375 5 22 C4.34 22 3.68 22 3 22 C0.94872156 18.92308234 0.72739128 18.06355001 0.5859375 14.55078125 C0.54726562 13.70322266 0.50859375 12.85566406 0.46875 11.98242188 C0.4378125 11.10134766 0.406875 10.22027344 0.375 9.3125 C0.33632812 8.41982422 0.29765625 7.52714844 0.2578125 6.60742188 C0.16359782 4.4051538 0.07798412 2.20289278 0 0 Z \",fill:\"#BC8D6B\",transform:\"translate(150,81)\"})),_path847||(_path847=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3 1.66 3 2.32 3 3 C3.804375 3.144375 4.60875 3.28875 5.4375 3.4375 C8 4 8 4 9 5 C9.07319621 7.69654854 9.09242537 10.36691458 9.0625 13.0625 C9.05798828 13.82111328 9.05347656 14.57972656 9.04882812 15.36132812 C9.0370068 17.24091871 9.01907078 19.12046899 9 21 C8.01 20.67 7.02 20.34 6 20 C4.9458482 16.83754459 4.68724328 14.13051782 4.4375 10.8125 C4.35371094 9.72582031 4.26992187 8.63914062 4.18359375 7.51953125 C4.12300781 6.68808594 4.06242188 5.85664062 4 5 C3.67 7.97 3.34 10.94 3 14 C0.54023511 10.31035266 -0.12465307 8.72571521 -0.0625 4.375 C-0.05347656 3.55773437 -0.04445312 2.74046875 -0.03515625 1.8984375 C-0.02355469 1.27195313 -0.01195312 0.64546875 0 0 Z \",fill:\"#B98F6A\",transform:\"translate(134,62)\"})),_path848||(_path848=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-5.61 2.99 -11.22 3.98 -17 5 C-17 4.34 -17 3.68 -17 3 C-18.918125 3.061875 -18.918125 3.061875 -20.875 3.125 C-23.0546875 3.1953125 -23.0546875 3.1953125 -25 3 C-25.66 2.34 -26.32 1.68 -27 1 C-24.79344925 0.49219106 -22.58466395 -0.00591365 -20.375 -0.5 C-18.53035156 -0.91765625 -18.53035156 -0.91765625 -16.6484375 -1.34375 C-10.42230307 -2.46365427 -5.90894541 -1.89086253 0 0 Z \",fill:\"#110F12\",transform:\"translate(464,488)\"})),_path849||(_path849=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.26237731 2.52475462 1.09856404 4.31200466 1.0625 7.125 C1.05347656 8.03507812 1.04445313 8.94515625 1.03515625 9.8828125 C1.02355469 10.58148438 1.01195312 11.28015625 1 12 C-0.76949612 12.50471197 -2.54065223 13.00360685 -4.3125 13.5 C-5.29863281 13.7784375 -6.28476562 14.056875 -7.30078125 14.34375 C-10 15 -10 15 -13 15 C-13 13.68 -13 12.36 -13 11 C-6.375 9.875 -6.375 9.875 -3 11 C-3 10.34 -3 9.68 -3 9 C-3.66 9 -4.32 9 -5 9 C-5 8.34 -5 7.68 -5 7 C-6.32 7 -7.64 7 -9 7 C-8 4 -8 4 -6.15234375 2.83203125 C-5.42144531 2.49558594 -4.69054687 2.15914063 -3.9375 1.8125 C-3.20402344 1.46832031 -2.47054688 1.12414062 -1.71484375 0.76953125 C-1.14894531 0.51558594 -0.58304687 0.26164062 0 0 Z \",fill:\"#030707\",transform:\"translate(493,340)\"})),_path850||(_path850=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.28798182 0.41474367 8.11690718 1.35224614 12 5 C11.125 8.875 11.125 8.875 10 10 C6.66381769 10.14257189 3.34024394 10.04228157 0 10 C0 6.7 0 3.4 0 0 Z \",fill:\"#0E4829\",transform:\"translate(489,303)\"})),_path851||(_path851=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0 5.94 0 9 0 C9 0.33 9 0.66 9 1 C6.36 1 3.72 1 1 1 C1 1.99 1 2.98 1 4 C2.134375 3.98839844 3.26875 3.97679687 4.4375 3.96484375 C5.95833167 3.9554559 7.47916514 3.94635678 9 3.9375 C10.11568359 3.92493164 10.11568359 3.92493164 11.25390625 3.91210938 C16.26148844 3.89033728 21.04279032 4.28458451 26 5 C26 5.33 26 5.66 26 6 C23.33326258 6.02727345 20.66681131 6.04696948 18 6.0625 C16.88431641 6.07506836 16.88431641 6.07506836 15.74609375 6.08789062 C10.73851156 6.10966272 5.95720968 5.71541549 1 5 C1 6.98 1 8.96 1 11 C3.91697011 10.85895309 6.8334802 10.71235186 9.75 10.5625 C10.575 10.52318359 11.4 10.48386719 12.25 10.44335938 C13.04921875 10.40146484 13.8484375 10.35957031 14.671875 10.31640625 C15.4050293 10.27974854 16.13818359 10.24309082 16.89355469 10.20532227 C19.01177605 9.99885215 20.9519456 9.56867914 23 9 C21.625 11 21.625 11 19 13 C13.03254779 13.81182654 6.91738161 12.87664913 1 12 C1 14.64 1 17.28 1 20 C0.67 20 0.34 20 0 20 C0 13.4 0 6.8 0 0 Z \",fill:\"#875A43\",transform:\"translate(423,288)\"})),_path852||(_path852=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 2.31 1 4.62 1 7 C2.32 7.33 3.64 7.66 5 8 C-15.14263224 15.50692695 -15.14263224 15.50692695 -23 15 C-22.34 14.67 -21.68 14.34 -21 14 C-21 11.03 -21 8.06 -21 5 C-20.67 5.66 -20.34 6.32 -20 7 C-19.34 7 -18.68 7 -18 7 C-18 7.66 -18 8.32 -18 9 C-17.34 9 -16.68 9 -16 9 C-16 9.66 -16 10.32 -16 11 C-14.35 9.68 -12.7 8.36 -11 7 C-11 7.99 -11 8.98 -11 10 C-9.9275 9.67 -8.855 9.34 -7.75 9 C-4 8 -4 8 0 8 C0 5.36 0 2.72 0 0 Z \",fill:\"#C5B884\",transform:\"translate(247,267)\"})),_path853||(_path853=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.70884005 1.62339805 3.37446717 3.29319053 5 5 C5 5.66 5 6.32 5 7 C5.66 7 6.32 7 7 7 C7 7.66 7 8.32 7 9 C9.97 9.495 9.97 9.495 13 10 C11.22555028 12.24606427 10.41647515 12.95081002 7.51953125 13.29296875 C6.62621094 13.25816406 5.73289062 13.22335937 4.8125 13.1875 C3.91144531 13.16042969 3.01039063 13.13335937 2.08203125 13.10546875 C1.39496094 13.07066406 0.70789063 13.03585937 0 13 C-0.33 11.68 -0.66 10.36 -1 9 C-2.65 8.67 -4.3 8.34 -6 8 C-5.67 6.68 -5.34 5.36 -5 4 C-3.35 4 -1.7 4 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#D5967D\",transform:\"translate(283,257)\"})),_path854||(_path854=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C0.29296875 3.76953125 0.29296875 3.76953125 -0.8125 5.8125 C-2.39924519 8.82786113 -3.76396848 11.82163324 -5 15 C-5.65213539 16.34050052 -6.31379969 17.67661368 -7 19 C-5.68 18.01 -4.36 17.02 -3 16 C-3.34069235 19.15140423 -3.58076841 20.60781561 -5.9375 22.8125 C-8 24 -8 24 -10 24 C-9.67 21.36 -9.34 18.72 -9 16 C-10.32 16.99 -11.64 17.98 -13 19 C-12.01 15.535 -12.01 15.535 -11 12 C-10.34 12 -9.68 12 -9 12 C-8.34 10.35 -7.68 8.7 -7 7 C-6.01 7 -5.02 7 -4 7 C-3.896875 6.401875 -3.79375 5.80375 -3.6875 5.1875 C-2.91123545 2.71756736 -1.92911079 1.67748765 0 0 Z \",fill:\"#52342B\",transform:\"translate(102,586)\"})),_path855||(_path855=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.7186905 1.99613268 12.80734808 4.7291421 19 8 C18.67 7.01 18.34 6.02 18 5 C19.4589426 5.47730838 20.91713496 5.95691042 22.375 6.4375 C23.18710937 6.70433594 23.99921875 6.97117187 24.8359375 7.24609375 C27 8 27 8 29 9 C29 10.98 29 12.96 29 15 C24.87248551 14.39301257 21.6678852 12.96189209 18 11 C18 10.34 18 9.68 18 9 C17.071875 8.79375 16.14375 8.5875 15.1875 8.375 C9.70943544 6.84204366 4.90073812 3.81814597 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#9F6B4D\",transform:\"translate(597,454)\"})),_path856||(_path856=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 2 2 2 2.265625 4.08520508 C2.218018 12.07351045 1.21037546 19.799614 0 27.6875 C-0.19078125 28.97333984 -0.3815625 30.25917969 -0.578125 31.58398438 C-1.04501029 34.72378797 -1.51909977 37.86231786 -2 41 C-2.33 41 -2.66 41 -3 41 C-3.53525443 12.77150475 -3.53525443 12.77150475 0 0 Z \",fill:\"#E28113\",transform:\"translate(202,400)\"})),_path857||(_path857=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.06058594 0.77085937 1.12117188 1.54171875 1.18359375 2.3359375 C1.30927734 3.84027344 1.30927734 3.84027344 1.4375 5.375 C1.51871094 6.37273437 1.59992188 7.37046875 1.68359375 8.3984375 C1.84965626 10.97927613 1.84965626 10.97927613 3 13 C-3.27 13 -9.54 13 -16 13 C-14.52440331 8.57320993 -12.09942632 8.08567304 -8 6 C-7.34 6 -6.68 6 -6 6 C-6 5.34 -6 4.68 -6 4 C-5.34 4 -4.68 4 -4 4 C-4 5.98 -4 7.96 -4 10 C-3.34 10.33 -2.68 10.66 -2 11 C-1.93941406 10.28972656 -1.87882812 9.57945312 -1.81640625 8.84765625 C-1.73261719 7.92855469 -1.64882813 7.00945312 -1.5625 6.0625 C-1.48128906 5.14597656 -1.40007812 4.22945313 -1.31640625 3.28515625 C-1 1 -1 1 0 0 Z \",fill:\"#262E2F\",transform:\"translate(286,382)\"})),_path858||(_path858=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2.33 6.61 2.66 12.22 3 18 C-1.18578948 15.48852631 -4.35686888 13.13478724 -8 10 C-6.66415278 5.99245833 -4.23106172 4.62523764 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#800911\",transform:\"translate(349,370)\"})),_path859||(_path859=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.08268593 -0.08126087 4.16628658 -0.13930839 6.25 -0.1875 C7.99023438 -0.23970703 7.99023438 -0.23970703 9.765625 -0.29296875 C13.22268407 0.02017066 14.51565563 0.65709108 17 3 C15.824375 3.5878125 15.824375 3.5878125 14.625 4.1875 C11.45222824 6.37822336 10.87388099 7.26614488 10 11 C9.85140027 14.34093181 9.8832111 17.65853983 10 21 C10.66 21 11.32 21 12 21 C12.33 20.01 12.66 19.02 13 18 C13.33 18.66 13.66 19.32 14 20 C12.86695008 23.39914975 11.87481525 24.05254451 9 26 C8.34 25.67 7.68 25.34 7 25 C6.62109375 22.8203125 6.62109375 22.8203125 6.4375 20.125 C6.22371654 17.13203161 5.95571043 14.8671313 5 12 C5.66 12 6.32 12 7 12 C7.2165625 10.824375 7.2165625 10.824375 7.4375 9.625 C8 7 8 7 9 5 C9.66 5 10.32 5 11 5 C11 4.34 11 3.68 11 3 C10.34 3 9.68 3 9 3 C9 2.34 9 1.68 9 1 C6.03 1 3.06 1 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#707844\",transform:\"translate(39,327)\"})),_path860||(_path860=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.29606429 -0.18262291 8.97723223 0.18325421 14 2 C15.8871875 2.2475 15.8871875 2.2475 17.8125 2.5 C19.3903125 2.7475 19.3903125 2.7475 21 3 C21.33 3.66 21.66 4.32 22 5 C19.69 5 17.38 5 15 5 C15 11.93 15 18.86 15 26 C15.66 26.33 16.32 26.66 17 27 C17 28.98 17 30.96 17 33 C16.34 33 15.68 33 15 33 C13.46232654 24.01282114 12.51856202 15.102128 12 6 C10.68 5.67 9.36 5.34 8 5 C8 4.01 8 3.02 8 2 C7.05125 2.04125 6.1025 2.0825 5.125 2.125 C2 2 2 2 0 0 Z \",fill:\"#24221C\",transform:\"translate(408,282)\"})),_path861||(_path861=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3 2 3 2 3.8125 4.875 C4.00455315 8.07588583 3.72217143 9.36609075 2 12 C2.66 12 3.32 12 4 12 C4.33 14.31 4.66 16.62 5 19 C-0.75 18.25 -0.75 18.25 -3 16 C-3.4140625 13.6171875 -3.4140625 13.6171875 -3.625 10.875 C-3.69976562 9.96492188 -3.77453125 9.05484375 -3.8515625 8.1171875 C-3.92503906 7.06917969 -3.92503906 7.06917969 -4 6 C-2.68 6.33 -1.36 6.66 0 7 C0.33 6.34 0.66 5.68 1 5 C-0.32 4.34 -1.64 3.68 -3 3 C-1.68 2.67 -0.36 2.34 1 2 C0.01 1.67 -0.98 1.34 -2 1 C-1.34 0.67 -0.68 0.34 0 0 Z \",fill:\"#A5614A\",transform:\"translate(134,248)\"})),_path862||(_path862=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.40273032 1.45506508 5.42853861 3.30322768 7.9375 6 C12.1365818 10.32463574 16.6168133 13.9323211 21.48217773 17.4609375 C24.9065747 19.98599261 27.45937274 22.59727226 30 26 C30.66 26.66 31.32 27.32 32 28 C30.21142578 28.68310547 30.21142578 28.68310547 28 29 C26.29248047 27.84423828 26.29248047 27.84423828 24.6171875 26.0703125 C24.00746094 25.43996094 23.39773437 24.80960938 22.76953125 24.16015625 C22.14433594 23.48855469 21.51914063 22.81695312 20.875 22.125 C19.6243599 20.81322882 18.3718427 19.50324393 17.1171875 18.1953125 C16.56659668 17.60766113 16.01600586 17.02000977 15.44873047 16.41455078 C14.03518797 14.89056008 14.03518797 14.89056008 12 14 C12 13.34 12 12.68 12 12 C11.42765625 11.7525 10.8553125 11.505 10.265625 11.25 C7.64989389 9.80683801 5.85226544 8.11783778 3.75 6 C3.04359375 5.29875 2.3371875 4.5975 1.609375 3.875 C0 2 0 2 0 0 Z \",fill:\"#C9A175\",transform:\"translate(207,183)\"})),_path863||(_path863=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C4.67 1.32 4.34 2.64 4 4 C2.68 4 1.36 4 0 4 C0 5.98 0 7.96 0 10 C-6.93 11.485 -6.93 11.485 -14 13 C-13.67 12.34 -13.34 11.68 -13 11 C-10.93359375 10.3671875 -10.93359375 10.3671875 -8.4375 9.875 C-7.61121094 9.70742187 -6.78492188 9.53984375 -5.93359375 9.3671875 C-5.29550781 9.24601563 -4.65742188 9.12484375 -4 9 C-4 8.01 -4 7.02 -4 6 C-5.0621875 6.28875 -6.124375 6.5775 -7.21875 6.875 C-8.64569849 7.25051276 -10.07278962 7.6254838 -11.5 8 C-12.19609375 8.19078125 -12.8921875 8.3815625 -13.609375 8.578125 C-18.5412919 9.85677012 -22.90580091 10.18357474 -28 10 C-25.48685843 7.48685843 -24.03513062 7.47923115 -20.5546875 6.9296875 C-19.47832031 6.75566406 -18.40195312 6.58164063 -17.29296875 6.40234375 C-16.16503906 6.22832031 -15.03710938 6.05429688 -13.875 5.875 C-12.17150391 5.60236328 -12.17150391 5.60236328 -10.43359375 5.32421875 C-7.62346575 4.87554285 -4.81235351 4.43446972 -2 4 C-2 3.34 -2 2.68 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#9DB094\",transform:\"translate(370,156)\"})),_path864||(_path864=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.8173936 1.27246453 3.97612084 2.35713851 5.75 5.875 C9.62695536 13.2825822 13.9940982 20.31768907 18.9375 27.0625 C21 30 21 30 21 32 C19.515 32.495 19.515 32.495 18 33 C17.70649658 32.45980225 17.41299316 31.91960449 17.1105957 31.36303711 C13.51528094 24.81068327 9.6340771 18.4663451 5.66601562 12.13476562 C5.19228516 11.36970703 4.71855469 10.60464844 4.23046875 9.81640625 C3.80145264 9.13006104 3.37243652 8.44371582 2.93041992 7.73657227 C2 6 2 6 2 4 C1.34 4 0.68 4 0 4 C-0.33 4.66 -0.66 5.32 -1 6 C-1.625 4.125 -1.625 4.125 -2 2 C-1.34 1.34 -0.68 0.68 0 0 Z \",fill:\"#85593E\",transform:\"translate(441,519)\"})),_path865||(_path865=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.47492572 1.05656461 9.09761772 2.38930445 13.45703125 5.87890625 C15.12481858 7.2092802 15.12481858 7.2092802 18 8 C17.34 9.32 16.68 10.64 16 12 C14.68 11.34 13.36 10.68 12 10 C12 9.34 12 8.68 12 8 C10.63875 7.566875 10.63875 7.566875 9.25 7.125 C6 6 6 6 4.27246094 4.96923828 C1.05047717 3.59501443 -2.15653668 3.53178076 -5.609375 3.3671875 C-6.33618469 3.32562531 -7.06299438 3.28406311 -7.81182861 3.24124146 C-10.12418313 3.11090536 -12.43697586 2.99279067 -14.75 2.875 C-16.32165914 2.78856684 -17.89327464 2.70133626 -19.46484375 2.61328125 C-23.3094515 2.39961139 -27.15449824 2.19689678 -31 2 C-31 1.67 -31 1.34 -31 1 C-27.33335046 0.97067763 -23.6667316 0.95309363 -20 0.9375 C-18.97003906 0.92912109 -17.94007813 0.92074219 -16.87890625 0.91210938 C-11.14974387 0.89386363 -5.66515899 1.13524616 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#13090A\",transform:\"translate(246,462)\"})),_path866||(_path866=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.7726764 0.53895377 5.68212991 1.99535358 8 5 C7.625 7.0625 7.625 7.0625 7 9 C7.99 10.485 7.99 10.485 9 12 C8.67 12.99 8.34 13.98 8 15 C3.40693504 13.5140084 0.56430755 11.14985318 -3 8 C-1.125 2.25 -1.125 2.25 0 0 Z \",fill:\"#81543D\",transform:\"translate(483,460)\"})),_path867||(_path867=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.27875 -0.061875 2.5575 -0.12375 3.875 -0.1875 C4.95394531 -0.23970703 4.95394531 -0.23970703 6.0546875 -0.29296875 C6.69664062 -0.19628906 7.33859375 -0.09960938 8 0 C9.88361553 2.82542329 10.31902686 3.81059318 10.6875 7 C10.77386719 7.680625 10.86023438 8.36125 10.94921875 9.0625 C11 11 11 11 10 14 C6.58841744 12.86280581 5.88145399 11.95657056 4 9 C4 8.34 4 7.68 4 7 C2.68 6.67 1.36 6.34 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#E7D096\",transform:\"translate(392,309)\"})),_path868||(_path868=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 8.91 1 17.82 1 27 C-0.65 27 -2.3 27 -4 27 C-4.09854426 21.67861016 -3.74282403 16.53377862 -3.125 11.25 C-3.04636719 10.49589844 -2.96773438 9.74179687 -2.88671875 8.96484375 C-2.46264212 5.2916877 -2.08380504 3.12570756 0 0 Z \",fill:\"#BA8E6F\",transform:\"translate(292,599)\"})),_path869||(_path869=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C0.67 2.66 0.34 3.32 0 4 C0.99 3.67 1.98 3.34 3 3 C2.72401739 8.38166086 0.50033998 11.49758131 -2.51171875 15.74609375 C-3.87382968 17.80892317 -4.80512895 19.70206043 -5.6875 22 C-6.120625 22.99 -6.55375 23.98 -7 25 C-7.99 25.33 -8.98 25.66 -10 26 C-10.90467725 20.2703774 -8.43762342 16.96206675 -5.41015625 12.3671875 C-4.10693262 10.17950462 -3.45221424 8.48431622 -3 6 C-2.34 6 -1.68 6 -1 6 C-1.020625 5.195625 -1.04125 4.39125 -1.0625 3.5625 C-1 1 -1 1 0 0 Z \",fill:\"#6B4737\",transform:\"translate(146,570)\"})),_path870||(_path870=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C8.25 0.33 16.5 0.66 25 1 C25 1.33 25 1.66 25 2 C30.08303686 2.11320856 30.08303686 2.11320856 35 1 C34.67 2.32 34.34 3.64 34 5 C22.78 4.67 11.56 4.34 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#739461\",transform:\"translate(424,279)\"})),_path871||(_path871=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.99 1.32 1.98 2 3 C2 2.34 2 1.68 2 1 C2.99 1.33 3.98 1.66 5 2 C5 2.99 5 3.98 5 5 C4.34 5 3.68 5 3 5 C3 7.31 3 9.62 3 12 C0.36 12 -2.28 12 -5 12 C-5 11.01 -5 10.02 -5 9 C-5.66 9 -6.32 9 -7 9 C-6.66666667 7.66666667 -6.33333333 6.33333333 -6 5 C-5.87625 4.278125 -5.7525 3.55625 -5.625 2.8125 C-5.41875 2.214375 -5.2125 1.61625 -5 1 C-2 0 -2 0 0 0 Z \",fill:\"#BD7358\",transform:\"translate(207,256)\"})),_path872||(_path872=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C3.475 3.495 3.475 3.495 6 4 C6 4.66 6 5.32 6 6 C7.65 6 9.3 6 11 6 C11.33 6.99 11.66 7.98 12 9 C7.68582211 8.5566317 3.37408944 8.09281982 -0.9375 7.625 C-2.16919922 7.49867188 -3.40089844 7.37234375 -4.66992188 7.2421875 C-5.83974609 7.11328125 -7.00957031 6.984375 -8.21484375 6.8515625 C-9.84087524 6.67874756 -9.84087524 6.67874756 -11.49975586 6.50244141 C-12.32483643 6.33663574 -13.14991699 6.17083008 -14 6 C-14.33 5.34 -14.66 4.68 -15 4 C-12.69 3.34 -10.38 2.68 -8 2 C-8 1.34 -8 0.68 -8 0 C-4.71023192 -1.09658936 -3.28696233 -0.79953138 0 0 Z \",fill:\"#3D2A24\",transform:\"translate(144,214)\"})),_path873||(_path873=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 2.31 0 4.62 0 7 C0.763125 7.12375 1.52625 7.2475 2.3125 7.375 C5 8 5 8 8 10 C7.34 10.66 6.68 11.32 6 12 C3.64828869 11.40138258 1.3140622 10.73075648 -1 10 C-1.33 9.34 -1.66 8.68 -2 8 C-3.9914056 7.61866701 -5.99279077 7.28674418 -8 7 C-8.66 6.67 -9.32 6.34 -10 6 C-10 5.01 -10 4.02 -10 3 C-10.99 2.67 -11.98 2.34 -13 2 C-10 1 -10 1 -7 2 C-7 1.34 -7 0.68 -7 0 C-3.86650268 -1.04449911 -3.01031744 -0.93423645 0 0 Z \",fill:\"#473228\",transform:\"translate(177,207)\"})),_path874||(_path874=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-2.83013064 2.27584238 -5.53398507 3.78102411 -8.875 5.1875 C-14.02217076 7.46294699 -18.85947806 10.13725156 -23.70947266 12.97387695 C-28.58690372 15.81064035 -33.58129834 18.33703851 -38.671875 20.7734375 C-41.10694191 21.90960657 -41.10694191 21.90960657 -43 24 C-43.99 24 -44.98 24 -46 24 C-46 23.34 -46 22.68 -46 22 C-25.91893932 10.66188544 -25.91893932 10.66188544 -19 7 C-18.34902344 6.65485352 -17.69804688 6.30970703 -17.02734375 5.95410156 C-14.85774826 4.81122481 -12.68020269 3.68499265 -10.5 2.5625 C-9.80455078 2.19568115 -9.10910156 1.8288623 -8.39257812 1.45092773 C-3.34432051 -1.1147735 -3.34432051 -1.1147735 0 0 Z \",fill:\"#221919\",transform:\"translate(622,80)\"})),_path875||(_path875=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3 2 3 2 4 5 C4.66 5.33 5.32 5.66 6 6 C7.30023962 8.53204558 8.11989426 10.2086979 7.6875 13.0625 C7.3471875 14.0215625 7.3471875 14.0215625 7 15 C6.855625 15.66 6.71125 16.32 6.5625 17 C5.95231644 19.16954155 5.06216572 21.01729065 4 23 C3.34 22.67 2.68 22.34 2 22 C1.375 19.4375 1.375 19.4375 1 17 C1.33 17 1.66 17 2 17 C2 14.69 2 12.38 2 10 C1.34 10 0.68 10 0 10 C-1.125 6.6875 -1.125 6.6875 -2 3 C-1.34 2.01 -0.68 1.02 0 0 Z \",fill:\"#4C3127\",transform:\"translate(433,550)\"})),_path876||(_path876=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.27518178 2.34307081 9.0319928 4.70132553 13 9 C13.763125 9.556875 14.52625 10.11375 15.3125 10.6875 C16.1478125 11.3371875 16.1478125 11.3371875 17 12 C17 12.66 17 13.32 17 14 C18.32 14.33 19.64 14.66 21 15 C21 15.66 21 16.32 21 17 C22.32 17.33 23.64 17.66 25 18 C24.67 19.32 24.34 20.64 24 22 C5.30234209 9.15755855 5.30234209 9.15755855 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#694638\",transform:\"translate(601,535)\"})),_path877||(_path877=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.79173055 -0.02690104 5.58320348 -0.04679053 8.375 -0.0625 C9.56609375 -0.07506836 9.56609375 -0.07506836 10.78125 -0.08789062 C16.7734375 -0.11328125 16.7734375 -0.11328125 19 1 C18.67 1.99 18.34 2.98 18 4 C13.05 4 8.1 4 3 4 C3 6.64 3 9.28 3 12 C2.34 12 1.68 12 1 12 C1 12.66 1 13.32 1 14 C-0.32 14 -1.64 14 -3 14 C-3 12.68 -3 11.36 -3 10 C-2.34 10 -1.68 10 -1 10 C-0.40267181 7.23735711 0 4.83967231 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#690F18\",transform:\"translate(291,448)\"})),_path878||(_path878=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 3.63 1 7.26 1 11 C1.66 11 2.32 11 3 11 C3 7.37 3 3.74 3 0 C4.98 0 6.96 0 9 0 C8.67 3.96 8.34 7.92 8 12 C7.34 12 6.68 12 6 12 C5.67 14.97 5.34 17.94 5 21 C4.67 21 4.34 21 4 21 C4 18.03 4 15.06 4 12 C2.68 12 1.36 12 0 12 C0 8.04 0 4.08 0 0 Z \",fill:\"#A8B280\",transform:\"translate(308,372)\"})),_path879||(_path879=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0 5.94 0 9 0 C9 0.33 9 0.66 9 1 C7.02 1 5.04 1 3 1 C3 1.99 3 2.98 3 4 C4.32 4.33 5.64 4.66 7 5 C7 5.66 7 6.32 7 7 C10.3 7.66 13.6 8.32 17 9 C17 10.65 17 12.3 17 14 C13.37 13.67 9.74 13.34 6 13 C6.33 12.01 6.66 11.02 7 10 C6.34 9.67 5.68 9.34 5 9 C5 8.34 5 7.68 5 7 C3.35 6.67 1.7 6.34 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#BED8A6\",transform:\"translate(515,361)\"})),_path880||(_path880=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.18851563 0.00902344 2.37703125 0.01804687 3.6015625 0.02734375 C4.51679687 0.03894531 5.43203125 0.05054688 6.375 0.0625 C5.71599246 3.13786854 4.83632217 5.13985566 3.375 8.0625 C-0.915 8.0625 -5.205 8.0625 -9.625 8.0625 C-9.295 7.0725 -8.965 6.0825 -8.625 5.0625 C-6.315 5.0625 -4.005 5.0625 -1.625 5.0625 C-1.625 4.4025 -1.625 3.7425 -1.625 3.0625 C-3.605 3.0625 -5.585 3.0625 -7.625 3.0625 C-7.955 2.4025 -8.285 1.7425 -8.625 1.0625 C-5.74084117 -0.37957941 -3.20778472 -0.03144887 0 0 Z \",fill:\"#DCD9C9\",transform:\"translate(115.625,345.9375)\"})),_path881||(_path881=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.29 0 8.58 0 13 0 C12.01 0.33 11.02 0.66 10 1 C10 2.65 10 4.3 10 6 C13.63 6 17.26 6 21 6 C21 6.66 21 7.32 21 8 C17.87517438 8.08687496 14.75065754 8.14034568 11.625 8.1875 C10.73554688 8.21263672 9.84609375 8.23777344 8.9296875 8.26367188 C7.65351563 8.27817383 7.65351563 8.27817383 6.3515625 8.29296875 C5.17327881 8.31653442 5.17327881 8.31653442 3.97119141 8.34057617 C3.32069824 8.22818604 2.67020508 8.1157959 2 8 C0 5 0 5 0 0 Z \",fill:\"#F58C6F\",transform:\"translate(337,337)\"})),_path882||(_path882=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C0.66 2.33 1.32 2.66 2 3 C-4.27 3 -10.54 3 -17 3 C-17 2.67 -17 2.34 -17 2 C-36.305 1.505 -36.305 1.505 -56 1 C-56 0.67 -56 0.34 -56 0 C-50.18338316 -0.1438185 -44.36673315 -0.28618322 -38.55004883 -0.42724609 C-36.5744533 -0.47535653 -34.59886713 -0.5238527 -32.62329102 -0.57275391 C-29.7710203 -0.64328697 -26.91871797 -0.71239727 -24.06640625 -0.78125 C-23.19415909 -0.80312378 -22.32191193 -0.82499756 -21.42323303 -0.84753418 C-4.81751014 -1.24322842 -4.81751014 -1.24322842 0 0 Z \",fill:\"#947B62\",transform:\"translate(344,239)\"})),_path883||(_path883=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 12.54 1 25.08 1 38 C0.34 38 -0.32 38 -1 38 C-1 39.98 -1 41.96 -1 44 C-1.33 44 -1.66 44 -2 44 C-2.12106005 33.4677759 -1.96034837 22.96349577 -1.5625 12.4375 C-1.52326416 11.32511963 -1.48402832 10.21273926 -1.44360352 9.06665039 C-1.40162842 8.0327417 -1.35965332 6.99883301 -1.31640625 5.93359375 C-1.27974854 5.00603271 -1.24309082 4.07847168 -1.20532227 3.12280273 C-1 1 -1 1 0 0 Z \",fill:\"#DBB590\",transform:\"translate(293,534)\"})),_path884||(_path884=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0.33 3.3 0.66 5 1 C5.33 2.65 5.66 4.3 6 6 C5.34 6 4.68 6 4 6 C4 6.66 4 7.32 4 8 C-1.94 8 -7.88 8 -14 8 C-14 6.68 -14 5.36 -14 4 C-9.38 4 -4.76 4 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#4A0710\",transform:\"translate(318,480)\"})),_path885||(_path885=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.2403587 10.90961418 0.7114667 21.1996079 -1 32 C-1.70045383 36.54594537 -2.26961592 40.48581008 -1 45 C-2.98 45.495 -2.98 45.495 -5 46 C-5 49.3 -5 52.6 -5 56 C-5.33 56 -5.66 56 -6 56 C-6 50.72 -6 45.44 -6 40 C-5.34 40 -4.68 40 -4 40 C-3.94593994 39.45939941 -3.89187988 38.91879883 -3.83618164 38.36181641 C-2.55745443 25.57454427 -1.27872721 12.78727214 0 0 Z \",fill:\"#111D20\",transform:\"translate(287,424)\"})),_path886||(_path886=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C15.56159661 -0.73742681 28.58506785 -0.18571801 43 6 C39.09285268 7.50936254 36.43115741 6.42200653 32.5625 5.125 C28.71630116 3.85036168 24.99374486 2.7017047 21 2 C21 2.33 21 2.66 21 3 C14.29481414 3.19818283 8.34823202 3.30844801 2 1 C2 1.66 2 2.32 2 3 C2.99 3.33 3.98 3.66 5 4 C2.69 3.67 0.38 3.34 -2 3 C-1.34 2.67 -0.68 2.34 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#9E6949\",transform:\"translate(530,422)\"})),_path887||(_path887=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.99 1.32 1.98 2 3 C2.66 2.34 3.32 1.68 4 1 C2.88156738 10.37579682 1.65562772 19.70030388 0 29 C-0.66 29 -1.32 29 -2 29 C-2.05855176 25.47923768 -2.0937806 21.9586024 -2.125 18.4375 C-2.14175781 17.44685547 -2.15851562 16.45621094 -2.17578125 15.43554688 C-2.21274359 9.87271509 -1.87082551 5.25156925 0 0 Z \",fill:\"#D85905\",transform:\"translate(52,347)\"})),_path888||(_path888=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.98226563 0.09925781 1.96453125 0.19851563 2.9765625 0.30078125 C5.375 0.6875 5.375 0.6875 6.375 1.6875 C8.90096259 1.92403523 11.40607207 2.10923692 13.9375 2.25 C14.64841797 2.29318359 15.35933594 2.33636719 16.09179688 2.38085938 C17.85261912 2.48721777 19.6137832 2.58788846 21.375 2.6875 C21.375 3.3475 21.375 4.0075 21.375 4.6875 C20.21713989 4.72508423 20.21713989 4.72508423 19.03588867 4.76342773 C15.54458819 4.87934007 12.05356078 5.00208824 8.5625 5.125 C7.34755859 5.16431641 6.13261719 5.20363281 4.88085938 5.24414062 C3.71748047 5.28603516 2.55410156 5.32792969 1.35546875 5.37109375 C0.28192139 5.40775146 -0.79162598 5.44440918 -1.89770508 5.48217773 C-4.71811553 5.58291847 -4.71811553 5.58291847 -7.625 6.6875 C-7.955 5.0375 -8.285 3.3875 -8.625 1.6875 C-5.1026143 -0.66075713 -4.08383133 -0.44717414 0 0 Z \",fill:\"#020608\",transform:\"translate(356.625,363.3125)\"})),_path889||(_path889=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0 3.96 0 6 0 C6 2.31 6 4.62 6 7 C3.94921875 7.22786458 1.8984375 7.45572917 -0.15234375 7.68359375 C-2.01140229 7.81886614 -2.01140229 7.81886614 -3 9 C2.445 10.485 2.445 10.485 8 12 C8 12.66 8 13.32 8 14 C0.34167083 13.70544888 -5.34261178 10.62827658 -12 7 C-12 6.01 -12 5.02 -12 4 C-8.93389538 3.02131036 -7.07167396 3.01959743 -4 3.9375 C-1.03237663 4.81271705 0.76692848 5 4 5 C4 3.68 4 2.36 4 1 C2.68 0.67 1.36 0.34 0 0 Z \",fill:\"#9E7555\",transform:\"translate(548,341)\"})),_path890||(_path890=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.09688221 5.44693314 1.12862175 10.63904667 0 16 C-0.33 14.68 -0.66 13.36 -1 12 C-4.63 12 -8.26 12 -12 12 C-12 12.99 -12 13.98 -12 15 C-12.66 15 -13.32 15 -14 15 C-15 12 -15 12 -14 5 C-9.38 5.99 -4.76 6.98 0 8 C0 5.36 0 2.72 0 0 Z \",fill:\"#5E483A\",transform:\"translate(366,322)\"})),_path891||(_path891=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5 1 5 1 6 2 C6.07271741 4.35313555 6.08370868 6.70833668 6.0625 9.0625 C6.05347656 10.35285156 6.04445313 11.64320313 6.03515625 12.97265625 C6.02355469 13.97167969 6.01195312 14.97070312 6 16 C4.02 16 2.04 16 0 16 C0 10.72 0 5.44 0 0 Z \",fill:\"#C0724B\",transform:\"translate(416,300)\"})),_path892||(_path892=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.56314499 -0.08132187 5.12368418 -0.14064175 7.6875 -0.1875 C8.40873047 -0.21263672 9.12996094 -0.23777344 9.87304688 -0.26367188 C14.43064065 -0.32610467 17.44224692 0.05373573 21 3 C21.3125 5.6875 21.3125 5.6875 21 8 C20.67 7.34 20.34 6.68 20 6 C18.06643337 5.53205677 18.06643337 5.53205677 15.74609375 5.3671875 C14.89208984 5.28339844 14.03808594 5.19960938 13.15820312 5.11328125 C11.81145508 4.99533203 11.81145508 4.99533203 10.4375 4.875 C9.53580078 4.78863281 8.63410156 4.70226562 7.70507812 4.61328125 C5.47070082 4.40048341 3.23586385 4.19645533 1 4 C0.67 2.68 0.34 1.36 0 0 Z \",fill:\"#F9F9E8\",transform:\"translate(394,296)\"})),_path893||(_path893=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-11.33373096 4.35506098 -22.47854499 4.21242223 -34 4 C-34.33 3.34 -34.66 2.68 -35 2 C-23.30024254 0.74059296 -11.7812416 -0.35640731 0 0 Z \",fill:\"#190B0B\",transform:\"translate(408,472)\"})),_path894||(_path894=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.29150125 -0.08685287 6.5827096 -0.14033895 9.875 -0.1875 C10.81214844 -0.21263672 11.74929688 -0.23777344 12.71484375 -0.26367188 C14.05869141 -0.27817383 14.05869141 -0.27817383 15.4296875 -0.29296875 C16.25710449 -0.3086792 17.08452148 -0.32438965 17.93701172 -0.34057617 C18.61779785 -0.22818604 19.29858398 -0.1157959 20 0 C20.66 0.99 21.32 1.98 22 3 C20.18369045 4.81630955 17.32946098 4.34345124 14.875 4.5 C10.2019835 4.82387243 5.62166347 5.24763618 1 6 C0.67 4.02 0.34 2.04 0 0 Z \",fill:\"#1E0F16\",transform:\"translate(437,472)\"})),_path895||(_path895=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.625 -0.1875 2.625 -0.1875 5 0 C5.495 1.485 5.495 1.485 6 3 C-1.32859829 6.49024494 -7.98163367 6.35260892 -16 6.1875 C-17.25167969 6.17396484 -18.50335938 6.16042969 -19.79296875 6.14648438 C-22.86243116 6.11133786 -25.93098509 6.06213226 -29 6 C-27 4 -27 4 -24.6171875 3.8046875 C-23.71226562 3.82789063 -22.80734375 3.85109375 -21.875 3.875 C-20.50988281 3.90207031 -20.50988281 3.90207031 -19.1171875 3.9296875 C-18.41851562 3.95289063 -17.71984375 3.97609375 -17 4 C-17 3.34 -17 2.68 -17 2 C-15.7934375 2.0309375 -15.7934375 2.0309375 -14.5625 2.0625 C-12.06645115 2.29633621 -12.06645115 2.29633621 -11 1 C-9.33382885 0.95936168 -7.66611905 0.957279 -6 1 C-6 1.66 -6 2.32 -6 3 C-5.01 2.67 -4.02 2.34 -3 2 C-2.67 2.33 -2.34 2.66 -2 3 C-1.34 2.01 -0.68 1.02 0 0 Z \",fill:\"#492516\",transform:\"translate(379,449)\"})),_path896||(_path896=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.99 0 1.98 0 3 C1.299375 3.12375 2.59875 3.2475 3.9375 3.375 C6.15234375 3.5859375 6.15234375 3.5859375 8 4 C8.33 4.66 8.66 5.32 9 6 C7.56208484 5.85831863 6.1246763 5.71148957 4.6875 5.5625 C3.88699219 5.48128906 3.08648438 5.40007812 2.26171875 5.31640625 C0 5 0 5 -3 4 C-3 4.66 -3 5.32 -3 6 C-5.04262517 5.71512349 -7.08407027 5.42177949 -9.125 5.125 C-10.26195312 4.96257812 -11.39890625 4.80015625 -12.5703125 4.6328125 C-15.86078915 4.02568583 -18.85779103 3.13654367 -22 2 C-22 1.67 -22 1.34 -22 1 C-14.64424835 0.29223008 -7.3905476 -0.14715692 0 0 Z \",fill:\"#AB6A4B\",transform:\"translate(596,419)\"})),_path897||(_path897=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C4.360625 0.4125 3.72125 0.825 3.0625 1.25 C0.65516634 3.29258614 0.51119752 3.96443533 0 7 C-0.32741496 13.74089626 -0.02532072 20.33541529 1 27 C1.66 27 2.32 27 3 27 C2.6875 28.9375 2.6875 28.9375 2 31 C1.01 31.33 0.02 31.66 -1 32 C-1.50938345 29.50159546 -2.00763114 27.00176612 -2.5 24.5 C-2.64308594 23.80390625 -2.78617188 23.1078125 -2.93359375 22.390625 C-4.32166804 15.25195721 -4.76531123 8.91327808 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#9C9059\",transform:\"translate(197,377)\"})),_path898||(_path898=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 3.96 1 7.92 1 12 C-0.32 12 -1.64 12 -3 12 C-3 13.65 -3 15.3 -3 17 C-3.33 17 -3.66 17 -4 17 C-4.33 18.65 -4.66 20.3 -5 22 C-4.34 22 -3.68 22 -3 22 C-3 25.3 -3 28.6 -3 32 C-6.29729799 27.60360268 -6.62438806 24.80297478 -6.875 19.5625 C-6.96394531 18.43618164 -6.96394531 18.43618164 -7.0546875 17.28710938 C-7.31758719 12.61653211 -6.9847144 9.83231533 -4 6 C-3 5 -2 4 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#1F2515\",transform:\"translate(295,326)\"})),_path899||(_path899=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.66 2 1.32 2 2 C2.99 2.103125 3.98 2.20625 5 2.3125 C10.49615766 3.09447365 15.3884303 4.9256202 20 8 C19.67 9.32 19.34 10.64 19 12 C18.67 11.34 18.34 10.68 18 10 C16.7625 10.061875 16.7625 10.061875 15.5 10.125 C11.38008185 9.97786007 7.96852693 9.09476605 4 8 C4 7.34 4 6.68 4 6 C3.01 6 2.02 6 1 6 C0.67 4.02 0.34 2.04 0 0 Z \",fill:\"#1A2A19\",transform:\"translate(234,320)\"})),_path900||(_path900=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 2.97 0.66 5.94 1 9 C-2.96 9 -6.92 9 -11 9 C-10.67 6.69 -10.34 4.38 -10 2 C-11.65 2 -13.3 2 -15 2 C-15 1.67 -15 1.34 -15 1 C-12.68753088 0.83290546 -10.37502385 0.66633538 -8.0625 0.5 C-6.77472656 0.4071875 -5.48695313 0.314375 -4.16015625 0.21875 C-1 0 -1 0 0 0 Z \",fill:\"#070202\",transform:\"translate(137,309)\"})),_path901||(_path901=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 2 2 2 2.5 5.0625 C2.665 6.031875 2.83 7.00125 3 8 C3.66 8.33 4.32 8.66 5 9 C5.625 11.0625 5.625 11.0625 6 13 C5.01 13.33 4.02 13.66 3 14 C2.67 13.01 2.34 12.02 2 11 C1.01 11.33 0.02 11.66 -1 12 C-1.66 11.67 -2.32 11.34 -3 11 C-3 13.97 -3 16.94 -3 20 C-5.50550967 16.2417355 -7.43075776 12.27686246 -6.5625 7.6875 C-6.376875 7.130625 -6.19125 6.57375 -6 6 C-6.33 5.34 -6.66 4.68 -7 4 C-6.34 3.01 -5.68 2.02 -5 1 C-4.34 1.66 -3.68 2.32 -3 3 C-3.66 3 -4.32 3 -5 3 C-4.67 3.66 -4.34 4.32 -4 5 C-3.01 5 -2.02 5 -1 5 C-0.67 3.35 -0.34 1.7 0 0 Z \",fill:\"#7E4331\",transform:\"translate(22,238)\"})),_path902||(_path902=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.33 0.66 -0.66 1.32 -1 2 C-1.556875 1.855625 -2.11375 1.71125 -2.6875 1.5625 C-12.16581434 -0.74303592 -20.50625671 -0.08102853 -30 2 C-30.33 2.33 -30.66 2.66 -31 3 C-33.18639453 3.07258946 -35.37500389 3.08373783 -37.5625 3.0625 C-39.35880859 3.04896484 -39.35880859 3.04896484 -41.19140625 3.03515625 C-42.11824219 3.02355469 -43.04507813 3.01195312 -44 3 C-43.67 2.34 -43.34 1.68 -43 1 C-38.79867761 -0.06730758 -34.47430355 -0.56285793 -30.1875 -1.1875 C-29.00478516 -1.37763672 -27.82207031 -1.56777344 -26.60351562 -1.76367188 C-7.92452189 -4.54041751 -7.92452189 -4.54041751 0 0 Z \",fill:\"#110C0B\",transform:\"translate(60,187)\"})),_path903||(_path903=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C0.525625 2.5775 0.05125 3.155 -0.4375 3.75 C-2.09418867 5.84682179 -2.09418867 5.84682179 -2.5 8.0625 C-3.11862874 10.45968638 -4.20128042 11.35117372 -6 13 C-6.33 13.66 -6.66 14.32 -7 15 C-9.97 15 -12.94 15 -16 15 C-14.5140084 10.40693504 -12.14985318 7.56430755 -9 4 C-9 7 -9 7 -11 10 C-10.29875 9.278125 -9.5975 8.55625 -8.875 7.8125 C-6.07229255 5.00176187 -3.07737208 2.50483774 0 0 Z \",fill:\"#7D5740\",transform:\"translate(73,611)\"})),_path904||(_path904=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C11.55 0 23.1 0 35 0 C35 0.66 35 1.32 35 2 C32.03 2 29.06 2 26 2 C26 3.32 26 4.64 26 6 C24.35 6 22.7 6 21 6 C20.67 5.01 20.34 4.02 20 3 C19.34 2.67 18.68 2.34 18 2 C17.67 2.66 17.34 3.32 17 4 C17 3.34 17 2.68 17 2 C15.94039063 2.02320313 14.88078125 2.04640625 13.7890625 2.0703125 C12.4010487 2.08906944 11.0130273 2.10726972 9.625 2.125 C8.57699219 2.15013672 8.57699219 2.15013672 7.5078125 2.17578125 C5.67102514 2.19344267 3.83398037 2.10303261 2 2 C1.34 1.34 0.68 0.68 0 0 Z \",fill:\"#EC826C\",transform:\"translate(272,290)\"})),_path905||(_path905=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0 3.96 0 6 0 C6 3.38023517 5.12544378 5.83468937 4 9 C3.34 9 2.68 9 2 9 C1.566875 10.3921875 1.566875 10.3921875 1.125 11.8125 C0 15 0 15 -2 18 C-2.66 18 -3.32 18 -4 18 C-4.0825 18.86625 -4.165 19.7325 -4.25 20.625 C-5.11362922 24.5113315 -6.58949816 26.85904306 -9 30 C-9.66 30.33 -10.32 30.66 -11 31 C-10.73058594 30.49210938 -10.46117187 29.98421875 -10.18359375 29.4609375 C-8.33601744 25.6194422 -6.84486266 21.63393123 -5.29882812 17.6640625 C-3.72162053 13.66255372 -1.96105975 9.83348403 0 6 C0.68528045 4.34089996 1.35891863 2.67667436 2 1 C1.34 0.67 0.68 0.34 0 0 Z \",fill:\"#6E4937\",transform:\"translate(171,520)\"})),_path906||(_path906=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0 4.62 0 7 0 C7 0.99 7 1.98 7 3 C7.66 3 8.32 3 9 3 C9.33 2.01 9.66 1.02 10 0 C10.33 0.66 10.66 1.32 11 2 C11.763125 1.79375 12.52625 1.5875 13.3125 1.375 C16 1 16 1 19 3 C19 4.32 19 5.64 19 7 C14.38 7 9.76 7 5 7 C5 5.68 5 4.36 5 3 C3.35 3 1.7 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#551F24\",transform:\"translate(437,453)\"})),_path907||(_path907=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.216875 -0.04125 2.43375 -0.0825 3.6875 -0.125 C4.71423828 -0.15980469 4.71423828 -0.15980469 5.76171875 -0.1953125 C8 0 8 0 10.32226562 0.98632812 C13.07200909 2.02725946 15.15842988 2.30644527 18.08203125 2.4140625 C19.01337891 2.45273437 19.94472656 2.49140625 20.90429688 2.53125 C21.86400391 2.5621875 22.82371094 2.593125 23.8125 2.625 C24.79154297 2.66367187 25.77058594 2.70234375 26.77929688 2.7421875 C29.18601374 2.83610816 31.59273012 2.92178201 34 3 C33.67 4.65 33.34 6.3 33 8 C32.505 6.02 32.505 6.02 32 4 C27.71306732 4.26293391 23.42638632 4.52958673 19.13989258 4.79956055 C17.68422579 4.89073134 16.22849701 4.98091814 14.77270508 5.07006836 C12.66991034 5.19901672 10.56737033 5.3316025 8.46484375 5.46484375 C7.202771 5.543396 5.94069824 5.62194824 4.64038086 5.70288086 C1.05319271 5.99565854 -2.44466093 6.45317884 -6 7 C-3 5 -3 5 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#B38569\",transform:\"translate(385,447)\"})),_path908||(_path908=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C1.32 2 2.64 2 4 2 C4 2.66 4 3.32 4 4 C4.66 4 5.32 4 6 4 C6 4.66 6 5.32 6 6 C3.525 5.505 3.525 5.505 1 5 C0.67 5.66 0.34 6.32 0 7 C-10.89 7.495 -10.89 7.495 -22 8 C-19.16733661 5.16733661 -15.75026573 4.54225485 -12 3.4375 C-0.53498542 0 -0.53498542 0 0 0 Z M-2 7 C0 8 0 8 0 8 Z \",fill:\"#111616\",transform:\"translate(484,345)\"})),_path909||(_path909=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0 3.96 0 6 0 C5.01 0.495 5.01 0.495 4 1 C4 2.32 4 3.64 4 5 C8.62 4.67 13.24 4.34 18 4 C18.33 4.66 18.66 5.32 19 6 C15.37 6.66 11.74 7.32 8 8 C7.67 9.32 7.34 10.64 7 12 C6.01 12.66 5.02 13.32 4 14 C4.66 12.68 5.32 11.36 6 10 C3.4345406 7.4345406 1.52313332 7.45953913 -2 7 C-2 5.35 -2 3.7 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#0E302A\",transform:\"translate(408,322)\"})),_path910||(_path910=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.33 2.64 0.66 4 1 C4 1.66 4 2.32 4 3 C2.34151823 4.01351664 0.67334039 5.01120795 -1 6 C-1.680625 6.721875 -2.36125 7.44375 -3.0625 8.1875 C-5 10 -5 10 -9 10 C-9 9.34 -9 8.68 -9 8 C-9.66 8 -10.32 8 -11 8 C-11 7.34 -11 6.68 -11 6 C-11.66 6 -12.32 6 -13 6 C-13 5.34 -13 4.68 -13 4 C-13.66 4 -14.32 4 -15 4 C-15 3.34 -15 2.68 -15 2 C-10.05 2 -5.1 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#623735\",transform:\"translate(113,320)\"})),_path911||(_path911=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2 1.99 2 2.98 2 4 C3.65 4 5.3 4 7 4 C7 2.68 7 1.36 7 0 C8.98 0 10.96 0 13 0 C13 0.99 13 1.98 13 3 C13.66 3 14.32 3 15 3 C15 2.01 15 1.02 15 0 C17.875 -0.125 17.875 -0.125 21 0 C23 2 23 2 23 5 C14.97497656 5.79681084 7.06350113 6.12867289 -1 6 C-1.042721 4.33388095 -1.04063832 2.66617115 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#8E4838\",transform:\"translate(327,292)\"})),_path912||(_path912=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-5.69177757 2.71835001 -11.38431674 3.43020884 -17.07763672 4.13623047 C-19.01177533 4.37698791 -20.94569945 4.61947534 -22.87939453 4.86376953 C-25.6690411 5.21588875 -28.45941601 5.56164853 -31.25 5.90625 C-32.10553467 6.0156189 -32.96106934 6.12498779 -33.8425293 6.2376709 C-41.03759215 7.11576397 -47.83297805 7.43340439 -55 6 C-55 5.67 -55 5.34 -55 5 C-53.86739746 4.92483154 -53.86739746 4.92483154 -52.71191406 4.84814453 C-49.22416973 4.61317734 -45.73711418 4.36913443 -42.25 4.125 C-41.06277344 4.04636719 -39.87554687 3.96773438 -38.65234375 3.88671875 C-31.88807309 3.40619679 -25.2923166 2.63561376 -18.61669922 1.44580078 C-15.39727805 0.8973157 -12.19499286 0.5929735 -8.9375 0.375 C-7.87402344 0.30023438 -6.81054688 0.22546875 -5.71484375 0.1484375 C-3.81209536 0.04440234 -1.90559039 0 0 0 Z \",fill:\"#AB917B\",transform:\"translate(149,291)\"})),_path913||(_path913=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0.495 2.97 0.495 6 1 C6 5.62 6 10.24 6 15 C4.68 15 3.36 15 2 15 C2 15.66 2 16.32 2 17 C1.34 17 0.68 17 0 17 C0 11.39 0 5.78 0 0 Z \",fill:\"#E76C40\",transform:\"translate(105,270)\"})),_path914||(_path914=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.66 2 1.32 2 2 C1.34 2 0.68 2 0 2 C-0.268125 2.763125 -0.53625 3.52625 -0.8125 4.3125 C-1.99092624 6.97946464 -2.99148055 7.99148055 -5 10 C-6.04622875 11.97620986 -7.05439935 13.9737129 -8 16 C-8.66 16 -9.32 16 -10 16 C-10.33 17.65 -10.66 19.3 -11 21 C-12.32 20.67 -13.64 20.34 -15 20 C-14.67 18.68 -14.34 17.36 -14 16 C-13.34 16 -12.68 16 -12 16 C-11.87367187 15.42378906 -11.74734375 14.84757813 -11.6171875 14.25390625 C-10.99413865 11.97859493 -10.17389995 10.0474964 -9.125 7.9375 C-8.79757813 7.26589844 -8.47015625 6.59429688 -8.1328125 5.90234375 C-6.96290901 3.93771271 -5.67927882 2.54013857 -4 1 C-4 1.66 -4 2.32 -4 3 C-3.01 3 -2.02 3 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#6B4836\",transform:\"translate(87,605)\"})),_path915||(_path915=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.47050781 0.40992188 0.94101562 0.81984375 1.42578125 1.2421875 C2.04839844 1.78101563 2.67101562 2.31984375 3.3125 2.875 C3.92738281 3.40867187 4.54226563 3.94234375 5.17578125 4.4921875 C7.13498212 6.1640447 7.13498212 6.1640447 10 8 C10 8.66 10 9.32 10 10 C10.70125 10.226875 11.4025 10.45375 12.125 10.6875 C15.74128535 12.33841288 18.08769976 14.2908835 21 17 C21 17.66 21 18.32 21 19 C22.32 19.66 23.64 20.32 25 21 C25 21.66 25 22.32 25 23 C21.42909504 22.41278452 19.72064436 21.09944696 17.125 18.625 C13.04682967 14.86789165 8.80747156 11.40647846 4.4375 8 C3.80537598 7.50709473 3.17325195 7.01418945 2.52197266 6.50634766 C1.01642664 5.33527543 -0.49152545 4.16729752 -2 3 C-1.34 2.67 -0.68 2.34 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#634234\",transform:\"translate(592,535)\"})),_path916||(_path916=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1 3 1 3 1 5 C3.31 5.33 5.62 5.66 8 6 C8 6.66 8 7.32 8 8 C7.113125 7.896875 6.22625 7.79375 5.3125 7.6875 C0.98166679 8.09606917 -0.16228889 9.84698766 -3 13 C-3.66 13 -4.32 13 -5 13 C-5 12.34 -5 11.68 -5 11 C-10.28 10.34 -15.56 9.68 -21 9 C-19 5 -19 5 -16.375 3.75 C-15.59125 3.5025 -14.8075 3.255 -14 3 C-15.32 4.32 -16.64 5.64 -18 7 C-10.575 7.99 -10.575 7.99 -3 9 C-3 7.68 -3 6.36 -3 5 C-2.34 5 -1.68 5 -1 5 C-0.67 3.35 -0.34 1.7 0 0 Z \",fill:\"#2B221F\",transform:\"translate(151,493)\"})),_path917||(_path917=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-2.26805795 2.69809445 -4.53866607 3.38371017 -6.8125 4.0625 C-7.45509766 4.26166016 -8.09769531 4.46082031 -8.75976562 4.66601562 C-13.66015625 6.11328125 -13.66015625 6.11328125 -17 5 C-16.34 5 -15.68 5 -15 5 C-15 4.34 -15 3.68 -15 3 C-16.85625 3.309375 -16.85625 3.309375 -18.75 3.625 C-22.20319878 4.20053313 -23.98029681 3.78189692 -27 2 C-17.64842789 -0.74954861 -9.66240787 -1.2023686 0 0 Z \",fill:\"#D9715A\",transform:\"translate(447,491)\"})),_path918||(_path918=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1.98 0.99 -1.98 0.99 -4 2 C-1.69 2 0.62 2 3 2 C0.82276258 4.17723742 -0.00485979 4.41899846 -2.9140625 5.0703125 C-4.05488281 5.33134766 -4.05488281 5.33134766 -5.21875 5.59765625 C-6.0128125 5.77167969 -6.806875 5.94570313 -7.625 6.125 C-8.82769531 6.39763672 -8.82769531 6.39763672 -10.0546875 6.67578125 C-12.03499476 7.12370789 -14.0173177 7.56270604 -16 8 C-16.66 6.02 -17.32 4.04 -18 2 C-11.92972642 -0.1583195 -6.40629424 -0.20852314 0 0 Z \",fill:\"#DB736F\",transform:\"translate(433,483)\"})),_path919||(_path919=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3 3.31 3 5.62 3 8 C3.66 8 4.32 8 5 8 C5 7.01 5 6.02 5 5 C6.32 5.33 7.64 5.66 9 6 C8.01 6 7.02 6 6 6 C6 6.66 6 7.32 6 8 C7.32 8.66 8.64 9.32 10 10 C9.49396008 12.16874252 9.00016187 13.99967627 8 16 C4.7 15.67 1.4 15.34 -2 15 C-2 14.67 -2 14.34 -2 14 C-0.02 13.67 1.96 13.34 4 13 C4 12.34 4 11.68 4 11 C2.35 11 0.7 11 -1 11 C-0.67 7.37 -0.34 3.74 0 0 Z \",fill:\"#A67B47\",transform:\"translate(308,460)\"})),_path920||(_path920=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0 5.94 0 9 0 C9.31002782 3.41030602 9.43044252 5.35433623 7.5 8.25 C4.09196718 10.63562297 1.07129331 11.18574134 -3 12 C-3 11.01 -3 10.02 -3 9 C-2.01 9 -1.02 9 0 9 C0 6.03 0 3.06 0 0 Z \",fill:\"#2F1D1A\",transform:\"translate(343,439)\"})),_path921||(_path921=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.3125 -0.1875 2.3125 -0.1875 5 0 C6.5625 1.4375 6.5625 1.4375 8 3 C10.02463255 3.65213292 10.02463255 3.65213292 12 4 C12.66 4.33 13.32 4.66 14 5 C14 5.66 14 6.32 14 7 C8.92523206 8.26305335 4.27203646 9.27036084 -1 9 C-1.125 2.25 -1.125 2.25 0 0 Z \",fill:\"#3F4E3D\",transform:\"translate(67,342)\"})),_path922||(_path922=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.33 0.99 -0.66 1.98 -1 3 C-3.6652464 3.50881977 -6.33178419 4.00720141 -9 4.5 C-9.74378906 4.64308594 -10.48757813 4.78617187 -11.25390625 4.93359375 C-16.25220015 5.84632568 -20.91920316 6.13856719 -26 6 C-26 4.68 -26 3.36 -26 2 C-22.4169389 1.66369671 -18.83351076 1.33147475 -15.25 1 C-14.23421875 0.90460938 -13.2184375 0.80921875 -12.171875 0.7109375 C-11.1921875 0.62070312 -10.2125 0.53046875 -9.203125 0.4375 C-8.30239258 0.35371094 -7.40166016 0.26992188 -6.47363281 0.18359375 C-4.32080902 0.02381054 -2.15874522 0 0 0 Z \",fill:\"#442F23\",transform:\"translate(26,324)\"})),_path923||(_path923=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.99 0 1.98 0 3 C1.93897879 5.67398476 1.93897879 5.67398476 4 8 C2.68 7.34 1.36 6.68 0 6 C0.61875 6.7425 1.2375 7.485 1.875 8.25 C3.62050065 10.50888319 5.02301639 12.33549925 6 15 C5.67 15.99 5.34 16.98 5 18 C5.66 18.33 6.32 18.66 7 19 C5.02 19 3.04 19 1 19 C1.66 18.34 2.32 17.68 3 17 C2.34 16.54625 1.68 16.0925 1 15.625 C0.34 15.08875 -0.32 14.5525 -1 14 C-1 13.34 -1 12.68 -1 12 C-0.01 12 0.98 12 2 12 C-1.63 9.03 -5.26 6.06 -9 3 C-9 3.66 -9 4.32 -9 5 C-9.66 5 -10.32 5 -11 5 C-10.67 3.68 -10.34 2.36 -10 1 C-6.61981469 -0.04005702 -3.5219721 -0.08004482 0 0 Z \",fill:\"#27090D\",transform:\"translate(588,205)\"})),_path924||(_path924=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.94875 0.04125 1.8975 0.0825 2.875 0.125 C2.875 1.115 2.875 2.105 2.875 3.125 C1.885 3.125 0.895 3.125 -0.125 3.125 C-0.125 3.785 -0.125 4.445 -0.125 5.125 C1.1125 5.08375 2.35 5.0425 3.625 5 C6.89137962 4.98841709 9.0896947 5.2681298 11.875 7.125 C7.67910573 8.29052619 7.05408064 8.21454032 2.875 6.125 C2.875 12.395 2.875 18.665 2.875 25.125 C0.46286955 21.50680432 0.24297179 18.33239382 -0.1875 14.125 C-0.75526307 8.54876518 -0.75526307 8.54876518 -2.125 3.125 C-3.115 2.795 -4.105 2.465 -5.125 2.125 C-3.125 0.125 -3.125 0.125 0 0 Z \",fill:\"#352723\",transform:\"translate(113.125,153.875)\"})),_path925||(_path925=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.4375 0.8125 2.4375 0.8125 5 2 C6.00496852 5.01490557 6.10335303 7.04181692 6.0625 10.1875 C6.05347656 11.08855469 6.04445313 11.98960938 6.03515625 12.91796875 C6.02355469 13.60503906 6.01195313 14.29210938 6 15 C3.0625 14.625 3.0625 14.625 0 14 C-1.31164842 11.37670316 -1.13262846 9.36301375 -1.125 6.4375 C-1.12757812 5.44621094 -1.13015625 4.45492188 -1.1328125 3.43359375 C-1 1 -1 1 0 0 Z \",fill:\"#97714E\",transform:\"translate(104,20)\"})),_path926||(_path926=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.55151494 1.97306386 6.18324052 4.08934854 9 7 C9.99 7.66 10.98 8.32 12 9 C12 9.66 12 10.32 12 11 C12.83724609 11.37705078 12.83724609 11.37705078 13.69140625 11.76171875 C20.10358767 15.20107833 26.18588213 20.54399975 31 26 C31 26.66 31 27.32 31 28 C31.66 28.33 32.32 28.66 33 29 C28.25 28.125 28.25 28.125 26 27 C26 26.34 26 25.68 26 25 C24.35 24.34 22.7 23.68 21 23 C21 22.01 21 21.02 21 20 C18.85232681 18.12934984 16.72290952 16.43569825 14.4375 14.75 C9.24025353 10.79608574 4.36849685 6.888556 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#84563C\",transform:\"translate(514,489)\"})),_path927||(_path927=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.28634912 2.718481 7.91990552 5.62404296 11.625 9.125 C17.55251179 14.66811133 23.7169077 19.86435186 30 25 C29.01 25.33 28.02 25.66 27 26 C24.51953125 24.41796875 24.51953125 24.41796875 21.8125 22.1875 C20.91144531 21.45917969 20.01039063 20.73085938 19.08203125 19.98046875 C18.39496094 19.32691406 17.70789063 18.67335938 17 18 C17 17.34 17 16.68 17 16 C16.1028125 15.566875 16.1028125 15.566875 15.1875 15.125 C13 14 13 14 10 12 C10 11.34 10 10.68 10 10 C9.29875 9.773125 8.5975 9.54625 7.875 9.3125 C4.30656387 7.68343133 1.93485489 5.59359269 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#936348\",transform:\"translate(542,494)\"})),_path928||(_path928=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1.75 3.875 -1.75 3.875 -4 5 C-5.8253125 4.9690625 -5.8253125 4.9690625 -7.6875 4.9375 C-13.33210339 4.86454874 -18.80024324 5.69614481 -24.37890625 6.48828125 C-28.57945132 7.08188578 -32.78145763 7.55594291 -37 8 C-36.67 7.01 -36.34 6.02 -36 5 C-31.14270355 4.02700844 -26.5499375 3.87961195 -21.625 3.9375 C-20.88894531 3.94201172 -20.15289062 3.94652344 -19.39453125 3.95117188 C-17.59631842 3.96284858 -15.79814803 3.98077989 -14 4 C-14 3.01 -14 2.02 -14 1 C-9.23692563 0.04738513 -4.8333472 -0.08333357 0 0 Z \",fill:\"#F1A080\",transform:\"translate(360,494)\"})),_path929||(_path929=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.17175781 -0.01836914 1.17175781 -0.01836914 2.3671875 -0.03710938 C6.30135523 -0.04721426 8.28092449 -0.04188367 11.625 2.1875 C11.625 3.5075 11.625 4.8275 11.625 6.1875 C10.531875 6.043125 9.43875 5.89875 8.3125 5.75 C5.77585613 5.41873881 3.26904431 5.16504373 0.71484375 5.00390625 C-0.75275391 4.90916016 -0.75275391 4.90916016 -2.25 4.8125 C-3.17554688 4.76351563 -4.10109375 4.71453125 -5.0546875 4.6640625 C-7.375 4.1875 -7.375 4.1875 -9.375 1.1875 C-7.28121008 -0.90628992 -2.88339968 0.00235572 0 0 Z \",fill:\"#454D41\",transform:\"translate(276.375,414.8125)\"})),_path930||(_path930=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 3.3 1 6.6 1 10 C-1.27076141 10.0275801 -3.54162641 10.04665143 -5.8125 10.0625 C-7.70935547 10.07990234 -7.70935547 10.07990234 -9.64453125 10.09765625 C-13.80501436 10.06316772 -17.90175947 9.65967851 -22.0402832 9.25610352 C-27.24743363 8.80553016 -32.46558106 8.6325625 -37.6875 8.4375 C-38.78255859 8.39431641 -39.87761719 8.35113281 -41.00585938 8.30664062 C-43.67048597 8.20191731 -46.33518311 8.09974221 -49 8 C-45.76839268 6.07271328 -43.54227874 5.79859052 -39.80859375 5.98828125 C-38.78950928 6.03476807 -37.7704248 6.08125488 -36.72045898 6.12915039 C-35.63708252 6.18965576 -34.55370605 6.25016113 -33.4375 6.3125 C-32.33027588 6.36591553 -31.22305176 6.41933105 -30.08227539 6.47436523 C-26.72087998 6.63899021 -23.3605163 6.8184044 -20 7 C-18.04170334 7.09968134 -16.08337213 7.19868739 -14.125 7.296875 C-9.74926672 7.51896297 -5.37450477 7.75494431 -1 8 C-0.67 5.36 -0.34 2.72 0 0 Z \",fill:\"#201B0D\",transform:\"translate(577,280)\"})),_path931||(_path931=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.061875 0.94875 1.12375 1.8975 1.1875 2.875 C1.455625 3.90625 1.72375 4.9375 2 6 C4.46255685 7.45291273 4.46255685 7.45291273 7 8 C7 8.66 7 9.32 7 10 C6.34 10 5.68 10 5 10 C4.855625 10.804375 4.71125 11.60875 4.5625 12.4375 C4 15 4 15 3 16 C1.48071962 16.07179964 -0.04167482 16.08392007 -1.5625 16.0625 C-2.38878906 16.05347656 -3.21507812 16.04445313 -4.06640625 16.03515625 C-5.02353516 16.01775391 -5.02353516 16.01775391 -6 16 C-5.01 15.67 -4.02 15.34 -3 15 C-3 12.69 -3 10.38 -3 8 C-2.34 8 -1.68 8 -1 8 C-1.020625 6.865625 -1.04125 5.73125 -1.0625 4.5625 C-1 1 -1 1 0 0 Z \",fill:\"#462110\",transform:\"translate(598,276)\"})),_path932||(_path932=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C2.67 3.31 2.34 5.62 2 8 C3.65 7.67 5.3 7.34 7 7 C7 8.65 7 10.3 7 12 C7.66 12 8.32 12 9 12 C9 12.66 9 13.32 9 14 C5.04 14 1.08 14 -3 14 C-1.68 13.01 -0.36 12.02 1 11 C-0.32 11 -1.64 11 -3 11 C-3.36923077 3.49230769 -3.36923077 3.49230769 -1.5 1 C-1.005 0.67 -0.51 0.34 0 0 Z \",fill:\"#BB755D\",transform:\"translate(185,254)\"})),_path933||(_path933=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1 1 -2 2 -3 3 C-3.474375 3.515625 -3.94875 4.03125 -4.4375 4.5625 C-6.16484976 6.15166178 -7.86709165 7.04386867 -10 8 C-9.67 8.66 -9.34 9.32 -9 10 C-11.18945821 8.98346583 -12.94003719 8.05353822 -14.75 6.4375 C-18.07155174 4.3153975 -21.09220436 4.32564964 -25 4 C-25 3.67 -25 3.34 -25 3 C-21.95919579 2.49420286 -18.91753354 1.99519241 -15.875 1.5 C-14.59109375 1.28537109 -14.59109375 1.28537109 -13.28125 1.06640625 C-8.80328495 0.34304266 -4.55436565 -0.17918816 0 0 Z \",fill:\"#1E1818\",transform:\"translate(597,226)\"})),_path934||(_path934=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C0.43490723 2.14622803 -0.13018555 2.29245605 -0.71240234 2.44311523 C-3.26720749 3.10559865 -5.82110773 3.77150654 -8.375 4.4375 C-9.70917969 4.78264648 -9.70917969 4.78264648 -11.0703125 5.13476562 C-12.34648438 5.46831055 -12.34648438 5.46831055 -13.6484375 5.80859375 C-14.82672119 6.11494751 -14.82672119 6.11494751 -16.02880859 6.42749023 C-18.05189813 6.95094933 -18.05189813 6.95094933 -20 8 C-21.70702735 8.06996014 -23.41668003 8.08440154 -25.125 8.0625 C-26.03507813 8.05347656 -26.94515625 8.04445312 -27.8828125 8.03515625 C-28.58148437 8.02355469 -29.28015625 8.01195312 -30 8 C-29.01 7.34 -28.02 6.68 -27 6 C-26.54625 5.46375 -26.0925 4.9275 -25.625 4.375 C-23.40077931 2.49296711 -21.83147662 2.85097491 -19 3 C-18.67 2.67 -18.34 2.34 -18 2 C-12.00136504 0.57817822 -6.1589444 -0.27373086 0 0 Z \",fill:\"#231618\",transform:\"translate(592,184)\"})),_path935||(_path935=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.33 1.32 -0.66 2.64 -1 4 C-4.63 4.66 -8.26 5.32 -12 6 C-10.35 7.98 -8.7 9.96 -7 12 C-7.99 12.33 -8.98 12.66 -10 13 C-10 12.34 -10 11.68 -10 11 C-10.804375 10.731875 -11.60875 10.46375 -12.4375 10.1875 C-13.283125 9.795625 -14.12875 9.40375 -15 9 C-15.33 8.01 -15.66 7.02 -16 6 C-16.66 6 -17.32 6 -18 6 C-18 5.01 -18 4.02 -18 3 C-16.12743583 2.49095343 -14.25180659 1.99317545 -12.375 1.5 C-11.33085938 1.2215625 -10.28671875 0.943125 -9.2109375 0.65625 C-6.04312582 0.00881404 -3.22258533 -0.1161292 0 0 Z \",fill:\"#1E2E2B\",transform:\"translate(626,180)\"})),_path936||(_path936=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.42761914 1.39153744 6.9556255 3.52071486 10 7 C10 7.66 10 8.32 10 9 C10.66 9 11.32 9 12 9 C13.5078125 10.42578125 13.5078125 10.42578125 15.125 12.3125 C15.66382813 12.92738281 16.20265625 13.54226563 16.7578125 14.17578125 C18 16 18 16 18 19 C16.68 18.67 15.36 18.34 14 18 C14 17.01 14 16.02 14 15 C13.40703125 14.90589844 12.8140625 14.81179688 12.203125 14.71484375 C9.50857359 13.84054781 8.53677244 12.73279682 6.75 10.5625 C6.22921875 9.94503906 5.7084375 9.32757812 5.171875 8.69140625 C4 7 4 7 4 5 C2.68 4.67 1.36 4.34 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#492D28\",transform:\"translate(560,561)\"})),_path937||(_path937=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.33 0 0.66 0 1 C-3.63 1 -7.26 1 -11 1 C-10.34 2.65 -9.68 4.3 -9 6 C-8.875 9.3125 -8.875 9.3125 -9 12 C-13.28904235 10.4114658 -15.32345526 7.56872632 -18 4 C-18 3.34 -18 2.68 -18 2 C-23.28 2 -28.56 2 -34 2 C-34 1.67 -34 1.34 -34 1 C-10.21122564 -0.19388403 -10.21122564 -0.19388403 0 0 Z \",fill:\"#402D25\",transform:\"translate(472,516)\"})),_path938||(_path938=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 2.64 1 5.28 1 8 C2.98 8.495 2.98 8.495 5 9 C4.01 9.495 4.01 9.495 3 10 C2.27840576 11.64363134 1.60648579 13.31050386 1 15 C2.27617187 14.98839844 3.55234375 14.97679687 4.8671875 14.96484375 C6.53645687 14.95546583 8.20572783 14.94636563 9.875 14.9375 C11.13763672 14.92493164 11.13763672 14.92493164 12.42578125 14.91210938 C13.23144531 14.90888672 14.03710938 14.90566406 14.8671875 14.90234375 C15.98262939 14.89448853 15.98262939 14.89448853 17.12060547 14.88647461 C19 15 19 15 21 16 C23.37123246 16.23029956 25.74741943 16.41119942 28.125 16.5625 C29.40632813 16.64628906 30.68765625 16.73007812 32.0078125 16.81640625 C32.99523437 16.87699219 33.98265625 16.93757813 35 17 C35 17.33 35 17.66 35 18 C23.45 18 11.9 18 0 18 C0 12.06 0 6.12 0 0 Z \",fill:\"#120304\",transform:\"translate(165,446)\"})),_path939||(_path939=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.66 1.32 1.32 2 2 C4.06874034 2.6425235 4.06874034 2.6425235 6 3 C6 2.34 6 1.68 6 1 C9.96 1 13.92 1 18 1 C18 1.99 18 2.98 18 4 C18.99 4 19.98 4 21 4 C21 4.66 21 5.32 21 6 C8.13 6 -4.74 6 -18 6 C-18 5.67 -18 5.34 -18 5 C-12.06 4.67 -6.12 4.34 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#3D3434\",transform:\"translate(186,455)\"})),_path940||(_path940=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.61294922 0.24121582 1.22589844 0.48243164 1.85742188 0.73095703 C14.20256616 5.58545188 26.55918909 10.39563602 39 15 C39 15.99 39 16.98 39 18 C34.35495067 17.33076442 30.31764299 15.52998135 26.07421875 13.62109375 C25.32662796 13.28956802 24.57903717 12.9580423 23.80879211 12.61647034 C21.43288665 11.56155297 19.06018371 10.49964087 16.6875 9.4375 C15.07247224 8.71893648 13.45724 8.00083235 11.84179688 7.28320312 C7.89214296 5.52744776 3.94534533 3.76541458 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#8F6149\",transform:\"translate(587,435)\"})),_path941||(_path941=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0.33 4.62 0.66 7 1 C6.67 3.97 6.34 6.94 6 10 C7.32 10.33 8.64 10.66 10 11 C10.309375 11.639375 10.61875 12.27875 10.9375 12.9375 C11.87279303 15.26452391 11.87279303 15.26452391 14.625 16.25 C15.40875 16.4975 16.1925 16.745 17 17 C17 17.33 17 17.66 17 18 C12.77203962 18.35233003 11.27274219 17.55682984 8 15 C5.35065178 14.28566879 5.35065178 14.28566879 3 14 C1.15976084 9.45352679 1.13361186 6.76513477 2 2 C1.34 1.34 0.68 0.68 0 0 Z \",fill:\"#B4B073\",transform:\"translate(442,375)\"})),_path942||(_path942=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C1.69971924 1.99476318 2.39943848 1.98952637 3.12036133 1.98413086 C6.35106475 1.96309174 9.58175366 1.95025534 12.8125 1.9375 C14.46282227 1.92493164 14.46282227 1.92493164 16.14648438 1.91210938 C31.12356606 1.86792919 31.12356606 1.86792919 37 3 C37.66 3.66 38.32 4.32 39 5 C25.8 5 12.6 5 -1 5 C-1 5.99 -1 6.98 -1 8 C-1.66 8 -2.32 8 -3 8 C-1.125 2.25 -1.125 2.25 0 0 Z \",fill:\"#412C23\",transform:\"translate(123,354)\"})),_path943||(_path943=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.57168699 0.11894877 9.14318732 0.24323815 13.71459961 0.37231445 C15.26729464 0.41542245 16.82002974 0.45711268 18.37280273 0.49731445 C20.61454303 0.5556069 22.85608604 0.61912578 25.09765625 0.68359375 C25.78336197 0.70030624 26.46906769 0.71701874 27.17555237 0.73423767 C31.53043364 0.8658112 35.70668063 1.31414284 40 2 C36.13198238 4.57867841 33.07530474 4.15753069 28.61328125 3.9765625 C27.79627243 3.95153656 26.97926361 3.92651062 26.13749695 3.90072632 C23.52873963 3.81857276 20.92074468 3.72196612 18.3125 3.625 C16.54365091 3.56675563 14.77477055 3.50945245 13.00585938 3.453125 C8.67013466 3.31300101 4.33503812 3.15991319 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#070507\",transform:\"translate(124,353)\"})),_path944||(_path944=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.96 0 7.92 0 12 0 C11.34 1.65 10.68 3.3 10 5 C9.731875 5.721875 9.46375 6.44375 9.1875 7.1875 C7.56186485 9.6687326 5.76813348 10.12585259 3 11 C3 10.01 3 9.02 3 8 C2.01 7.34 1.02 6.68 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#815E4A\",transform:\"translate(530,333)\"})),_path945||(_path945=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.69416016 -0.01224609 1.38832031 -0.02449219 2.10351562 -0.03710938 C3.92470901 -0.04239842 5.7453692 0.06580793 7.5625 0.1875 C8.2225 0.8475 8.8825 1.5075 9.5625 2.1875 C8.5725 3.6725 8.5725 3.6725 7.5625 5.1875 C5.68310547 5.52807617 5.68310547 5.52807617 3.4296875 5.48046875 C2.62402344 5.47080078 1.81835938 5.46113281 0.98828125 5.45117188 C0.14652344 5.42603516 -0.69523437 5.40089844 -1.5625 5.375 C-2.41199219 5.36146484 -3.26148437 5.34792969 -4.13671875 5.33398438 C-6.23724837 5.29858219 -8.33745293 5.24477401 -10.4375 5.1875 C-7.75774305 -0.35066435 -5.96360535 0.00550656 0 0 Z \",fill:\"#B4A58A\",transform:\"translate(121.4375,328.8125)\"})),_path946||(_path946=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.66 2 1.32 2 2 C2.66 2 3.32 2 4 2 C4 2.66 4 3.32 4 4 C4.66 4 5.32 4 6 4 C6 5.32 6 6.64 6 8 C6.66 8 7.32 8 8 8 C8 10.97 8 13.94 8 17 C5.2160817 15.60804085 5.02101003 13.84424221 4 11 C3.33613281 11.49113281 2.67226562 11.98226563 1.98828125 12.48828125 C-1.69393676 14.35105036 -4.7946943 14.33744682 -8.8125 14.1875 C-9.85180664 14.16719727 -9.85180664 14.16719727 -10.91210938 14.14648438 C-12.60841265 14.11138845 -14.30431136 14.05758943 -16 14 C-15.34 12.68 -14.68 11.36 -14 10 C-14 10.66 -14 11.32 -14 12 C-11.87422093 11.9131724 -9.74930419 11.8050049 -7.625 11.6875 C-6.44164062 11.62949219 -5.25828125 11.57148438 -4.0390625 11.51171875 C-3.03617188 11.34285156 -2.03328125 11.17398437 -1 11 C1.17520782 7.73718826 1.28244319 6.7659092 1 3 C0.67 2.01 0.34 1.02 0 0 Z \",fill:\"#E52314\",transform:\"translate(180,292)\"})),_path947||(_path947=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C1.54554036 1.41791408 1.08625056 2.83428046 0.625 4.25 C0.36976563 5.03890625 0.11453125 5.8278125 -0.1484375 6.640625 C-1.60460107 10.67513325 -2.33883055 12.55922036 -6 15 C-3.36 15.66 -0.72 16.32 2 17 C2 17.99 2 18.98 2 20 C0.0412957 19.85923685 -1.91696093 19.7122324 -3.875 19.5625 C-4.96554687 19.48128906 -6.05609375 19.40007812 -7.1796875 19.31640625 C-10 19 -10 19 -12 18 C-11.82701599 15.66471585 -11.29774631 14.30822418 -9.66796875 12.62109375 C-5.42788462 9 -5.42788462 9 -3 9 C-3 7.68 -3 6.36 -3 5 C-2.34 5 -1.68 5 -1 5 C-0.67 3.35 -0.34 1.7 0 0 Z \",fill:\"#20634A\",transform:\"translate(455,285)\"})),_path948||(_path948=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C9.57 0 19.14 0 29 0 C28.34 1.32 27.68 2.64 27 4 C23.7 4 20.4 4 17 4 C16.67 4.99 16.34 5.98 16 7 C15.34 7 14.68 7 14 7 C14 8.32 14 9.64 14 11 C13.34 11 12.68 11 12 11 C12 7.7 12 4.4 12 1 C8.04 1 4.08 1 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#782213\",transform:\"translate(472,261)\"})),_path949||(_path949=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2 1.99 2 2.98 2 4 C2.66 4 3.32 4 4 4 C4.33 4.99 4.66 5.98 5 7 C4.34 7 3.68 7 3 7 C2.979375 8.258125 2.95875 9.51625 2.9375 10.8125 C2.92589844 11.52019531 2.91429688 12.22789062 2.90234375 12.95703125 C2.91736783 15.20305461 2.91736783 15.20305461 4 18 C2.02 18.33 0.04 18.66 -2 19 C-1.979375 17.906875 -1.95875 16.81375 -1.9375 15.6875 C-1.81455548 12.05615809 -1.81455548 12.05615809 -3 9 C-3.66 9 -4.32 9 -5 9 C-4.67 8.01 -4.34 7.02 -4 6 C-4 6.66 -4 7.32 -4 8 C-3.34 8 -2.68 8 -2 8 C-2 6.35 -2 4.7 -2 3 C-1.34 3 -0.68 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#A46C59\",transform:\"translate(87,250)\"})),_path950||(_path950=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-2.88823068 2.88823068 -6.40102322 3.36781691 -10.25 4.375 C-11.88561739 4.81305331 -13.52103196 5.25186456 -15.15625 5.69140625 C-15.97222656 5.90941895 -16.78820312 6.12743164 -17.62890625 6.35205078 C-19.79399229 6.94370424 -21.9447666 7.5674891 -24.09375 8.21484375 C-25.3003125 8.57707031 -26.506875 8.93929687 -27.75 9.3125 C-29.35101563 9.80169922 -29.35101563 9.80169922 -30.984375 10.30078125 C-34.09277548 11.02151141 -36.8208827 11.12849726 -40 11 C-39 9 -39 9 -37.0625 8 C-33.81727845 6.94033582 -30.64417715 6.33062979 -27.29296875 5.70703125 C-22.03703586 4.5785332 -16.86530804 3.12360356 -11.68896484 1.67651367 C-7.70568206 0.59079109 -4.17264913 -0.32162407 0 0 Z \",fill:\"#60665A\",transform:\"translate(423,233)\"})),_path951||(_path951=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 16.5 1 33 1 50 C0.67 50 0.34 50 0 50 C-0.33 41.09 -0.66 32.18 -1 23 C-1.33 26.3 -1.66 29.6 -2 33 C-2.33 33 -2.66 33 -3 33 C-3.28577197 25.93508181 -2.80054645 19.01942014 -2.0625 12 C-1.97564941 11.16299561 -1.88879883 10.32599121 -1.79931641 9.46362305 C-1.43145262 6.11987038 -1.06885351 3.20656052 0 0 Z \",fill:\"#D4A683\",transform:\"translate(280,576)\"})),_path952||(_path952=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C5.89148445 2.31706845 7.44765312 4.47189222 9 7 C9.37511719 7.60972656 9.75023437 8.21945312 10.13671875 8.84765625 C12.07666092 12.12897107 13.69769708 15.41866696 15 19 C14.01 19 13.02 19 12 19 C12 18.01 12 17.02 12 16 C11.01 16.33 10.02 16.66 9 17 C7.99466333 15.37829621 6.99588093 13.75252763 6 12.125 C5.443125 11.22007812 4.88625 10.31515625 4.3125 9.3828125 C3 7 3 7 3 5 C2.34 5 1.68 5 1 5 C0.67 3.35 0.34 1.7 0 0 Z \",fill:\"#764833\",transform:\"translate(450,518)\"})),_path953||(_path953=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.89203125 0.00902344 1.7840625 0.01804687 2.703125 0.02734375 C3.37859375 0.03894531 4.0540625 0.05054688 4.75 0.0625 C4.75 2.3725 4.75 4.6825 4.75 7.0625 C0.79 7.0625 -3.17 7.0625 -7.25 7.0625 C-7.91 5.0825 -8.57 3.1025 -9.25 1.0625 C-6.09493858 0.12630187 -3.28413498 -0.0432123 0 0 Z \",fill:\"#FBE1B5\",transform:\"translate(349.25,509.9375)\"})),_path954||(_path954=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.33 0.66 -0.66 1.32 -1 2 C-1.66 2 -2.32 2 -3 2 C-3.33 2.99 -3.66 3.98 -4 5 C-6.1250236 6.51209163 -8.20099662 7.86473383 -10.4375 9.1875 C-11.03626953 9.55552734 -11.63503906 9.92355469 -12.25195312 10.30273438 C-16.72070675 13 -16.72070675 13 -19 13 C-19 11.35 -19 9.7 -19 8 C-17.453125 7.13375 -17.453125 7.13375 -15.875 6.25 C-13.40661608 4.85936117 -11.23604406 3.43872625 -8.9375 1.75 C-5.63273975 -0.21879334 -3.77746676 -0.35975874 0 0 Z \",fill:\"#57372E\",transform:\"translate(19,508)\"})),_path955||(_path955=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.27077656 -0.05794812 8.54145236 -0.09357874 12.8125 -0.125 C14.02744141 -0.14175781 15.24238281 -0.15851563 16.49414062 -0.17578125 C17.65751953 -0.18222656 18.82089844 -0.18867188 20.01953125 -0.1953125 C21.62985229 -0.21102295 21.62985229 -0.21102295 23.27270508 -0.22705078 C26 0 26 0 29 2 C28.01 2 27.02 2 26 2 C26 3.32 26 4.64 26 6 C20.72 6 15.44 6 10 6 C10 5.67 10 5.34 10 5 C16.435 4.505 16.435 4.505 23 4 C21.42347656 3.87882812 19.84695312 3.75765625 18.22265625 3.6328125 C16.16923 3.46403774 14.11584669 3.29473995 12.0625 3.125 C11.02158203 3.04636719 9.98066406 2.96773438 8.90820312 2.88671875 C7.91884766 2.80292969 6.92949219 2.71914063 5.91015625 2.6328125 C4.99371338 2.55949707 4.07727051 2.48618164 3.13305664 2.41064453 C2.42914795 2.27513184 1.72523926 2.13961914 1 2 C0.67 1.34 0.34 0.68 0 0 Z \",fill:\"#060506\",transform:\"translate(214,472)\"})),_path956||(_path956=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.68420618 3.56390705 11.03691957 7.48935872 16.3125 11.625 C16.91078613 12.09204346 17.50907227 12.55908691 18.12548828 13.0402832 C21.26706996 15.52380106 24.33870942 17.99044177 27 21 C27 21.66 27 22.32 27 23 C22.5496529 20.89635658 18.80741753 18.05848499 14.875 15.125 C14.14667969 14.59519531 13.41835938 14.06539063 12.66796875 13.51953125 C11.97058594 13.00003906 11.27320313 12.48054688 10.5546875 11.9453125 C9.92030762 11.47625488 9.28592773 11.00719727 8.63232422 10.52392578 C6.81869558 8.83073554 6.06729732 7.21563337 5 5 C3.67479497 4.31731862 2.34187818 3.6492959 1 3 C0.67 2.01 0.34 1.02 0 0 Z \",fill:\"#865B3E\",transform:\"translate(499,451)\"})),_path957||(_path957=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.28 0 10.56 0 16 0 C16.22786458 2.5390625 16.45572917 5.078125 16.68359375 7.6171875 C16.86989285 10.01110861 16.86989285 10.01110861 18 12 C11.4 12 4.8 12 -2 12 C-2 11.67 -2 11.34 -2 11 C2.95 10.67 7.9 10.34 13 10 C13 9.01 13 8.02 13 7 C10.36 7 7.72 7 5 7 C5 6.67 5 6.34 5 6 C7.64 6 10.28 6 13 6 C13 4.68 13 3.36 13 2 C8.71 2 4.42 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#E8484C\",transform:\"translate(311,434)\"})),_path958||(_path958=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 2 2 2 2.1953125 5.2578125 C2.17210937 6.53398437 2.14890625 7.81015625 2.125 9.125 C2.10695313 10.40632813 2.08890625 11.68765625 2.0703125 13.0078125 C2.04710937 13.99523437 2.02390625 14.98265625 2 16 C1.34 16 0.68 16 0 16 C0 11.71 0 7.42 0 3 C-10.89 3.495 -10.89 3.495 -22 4 C-22 3.34 -22 2.68 -22 2 C-14.70461872 0.02159152 -7.55998499 -0.73755951 0 0 Z \",fill:\"#2C0D0A\",transform:\"translate(410,364)\"})),_path959||(_path959=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 2.31 1.32 4.62 2 7 C8.6 7.33 15.2 7.66 22 8 C22 8.33 22 8.66 22 9 C19.03 9.66 16.06 10.32 13 11 C12.67 13.64 12.34 16.28 12 19 C11.67 19 11.34 19 11 19 C11 16.36 11 13.72 11 11 C7.7 11 4.4 11 1 11 C1 10.01 1 9.02 1 8 C0.01 7.67 -0.98 7.34 -2 7 C-2.33 5.02 -2.66 3.04 -3 1 C-3.66 1 -4.32 1 -5 1 C-5.33 2.32 -5.66 3.64 -6 5 C-6.33 4.34 -6.66 3.68 -7 3 C-6.67 2.01 -6.34 1.02 -6 0 C-3.42525708 -0.99667468 -2.51072708 -1.25536354 0 0 Z \",fill:\"#6A080A\",transform:\"translate(337,337)\"})),_path960||(_path960=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.93 0 13.86 0 21 0 C19 4 19 4 16 6 C16 5.34 16 4.68 16 4 C10.39 4 4.78 4 -1 4 C-0.67 2.68 -0.34 1.36 0 0 Z \",fill:\"#E2CDB4\",transform:\"translate(119,319)\"})),_path961||(_path961=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3 11.88 3 23.76 3 36 C2.34 36 1.68 36 1 36 C0.38678934 23.9934657 -0.184693 12.02556648 0 0 Z \",fill:\"#320E04\",transform:\"translate(623,258)\"})),_path962||(_path962=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.08386889 5.27913453 2.57910004 10.39538469 3 16 C2.34 16 1.68 16 1 16 C1 14.02 1 12.04 1 10 C0.01 9.67 -0.98 9.34 -2 9 C-1.67 7.35 -1.34 5.7 -1 4 C-1.99 4 -2.98 4 -4 4 C-3.01 4.99 -2.02 5.98 -1 7 C-1.66 7 -2.32 7 -3 7 C-2.690625 7.763125 -2.38125 8.52625 -2.0625 9.3125 C-1.32106407 11.18789677 -0.63771783 13.08684652 0 15 C-0.66 15 -1.32 15 -2 15 C-2 14.34 -2 13.68 -2 13 C-2.66 13 -3.32 13 -4 13 C-4 11.35 -4 9.7 -4 8 C-5.65 8.33 -7.3 8.66 -9 9 C-8.6875 5.625 -8.6875 5.625 -8 2 C-4.77208445 -0.1519437 -3.71599191 -0.20086443 0 0 Z \",fill:\"#975F47\",transform:\"translate(196,253)\"})),_path963||(_path963=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 1.65 2 3.3 2 5 C2.61875 4.649375 3.2375 4.29875 3.875 3.9375 C4.57625 3.628125 5.2775 3.31875 6 3 C6.66 3.33 7.32 3.66 8 4 C8 4.66 8 5.32 8 6 C9.093125 6 10.18625 6 11.3125 6 C14.875 6 18.4375 6 22 6 C21.67 7.32 21.34 8.64 21 10 C15.375 10.25 15.375 10.25 12 8 C11.67 8.99 11.34 9.98 11 11 C10.67 10.34 10.34 9.68 10 9 C8.68 9 7.36 9 6 9 C6 8.34 6 7.68 6 7 C3.55519921 7.18828772 3.55519921 7.18828772 1 8 C-0.1500831 9.96672915 -0.1500831 9.96672915 -1 12 C-1.99 12.33 -2.98 12.66 -4 13 C-4 12.01 -4 11.02 -4 10 C-3.01 10 -2.02 10 -1 10 C-1.33 8.68 -1.66 7.36 -2 6 C-1.34 5.67 -0.68 5.34 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#783C31\",transform:\"translate(62,232)\"})),_path964||(_path964=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C2.401875 1.70125 1.80375 2.4025 1.1875 3.125 C-0.9967697 5.99575447 -2.40268606 8.77382023 -4 12 C-5.72966143 15.0190454 -7.5048979 18.0082491 -9.28125 21 C-10.97174847 23.95068824 -12.50866432 26.94458056 -14 30 C-14.99 29.67 -15.98 29.34 -17 29 C-13.16914694 20.95941831 -8.93135157 13.41493783 -4 6 C-3.34064453 5.00033203 -3.34064453 5.00033203 -2.66796875 3.98046875 C-1.78554942 2.64904454 -0.89425797 1.32350179 0 0 Z \",fill:\"#78503E\",transform:\"translate(151,520)\"})),_path965||(_path965=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C10.3683023 -0.39878086 20.14040591 1.95339609 30.11132812 4.52929688 C35.70111523 5.96326937 41.30463468 7.08294965 47 8 C47 8.33 47 8.66 47 9 C30.96831291 9.181883 15.47118267 4.74100659 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#804B4B\",transform:\"translate(192,486)\"})),_path966||(_path966=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.66 0 -1.32 0 -2 0 C-2 1.65 -2 3.3 -2 5 C-2.99 5.33 -3.98 5.66 -5 6 C-5 4.68 -5 3.36 -5 2 C-5.99 2.495 -5.99 2.495 -7 3 C-8.87379605 3.07033769 -10.75001102 3.0843022 -12.625 3.0625 C-13.62789063 3.05347656 -14.63078125 3.04445313 -15.6640625 3.03515625 C-16.43492187 3.02355469 -17.20578125 3.01195312 -18 3 C-18 3.66 -18 4.32 -18 5 C-17.34 5.33 -16.68 5.66 -16 6 C-22.435 6.495 -22.435 6.495 -29 7 C-22.83272534 0.83272534 -15.12565113 -0.42788983 -6.6640625 -1.01953125 C-4.23167917 -1.00169853 -2.31123934 -0.71747003 0 0 Z \",fill:\"#C55C55\",transform:\"translate(391,477)\"})),_path967||(_path967=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C11.23754325 2.09513518 21.49701854 6.57647506 31.71142578 11.58862305 C35.76108126 13.54571594 39.66661306 14.87509265 44 16 C44 16.66 44 17.32 44 18 C39.6006316 17.30104975 35.62098095 15.80423105 31.50390625 14.1640625 C30.79274155 13.88404388 30.08157684 13.60402527 29.34886169 13.31552124 C27.84953591 12.72407946 26.35101945 12.13058235 24.85327148 11.53515625 C22.57544958 10.63014505 20.29481176 9.73254776 18.01367188 8.8359375 C16.55190955 8.25825206 15.09031536 7.68014092 13.62890625 7.1015625 C12.95372452 6.83582428 12.27854279 6.57008606 11.582901 6.29629517 C7.61577581 4.71450662 3.79247672 2.96320759 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#794D36\",transform:\"translate(582,432)\"})),_path968||(_path968=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C8.17472452 2.33563558 15.47732273 6.08838473 22.99658203 9.97998047 C24.37940028 10.68402807 25.77178343 11.3694911 27.17138672 12.03955078 C28.2293042 12.54784424 28.2293042 12.54784424 29.30859375 13.06640625 C29.94466553 13.36619385 30.5807373 13.66598145 31.23608398 13.97485352 C33.15547558 15.09035875 34.50190466 16.37223686 36 18 C31.11905561 17.32209106 26.94974842 15.38474523 22.5 13.375 C21.31591553 12.84519531 21.31591553 12.84519531 20.10791016 12.3046875 C13.22321828 9.18351571 6.57937374 5.71978727 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#8D6148\",transform:\"translate(527,428)\"})),_path969||(_path969=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.96 1.98 3.96 1.98 8 4 C8 4.66 8 5.32 8 6 C8.78375 6.2475 9.5675 6.495 10.375 6.75 C14.98401329 8.33931493 19.48547716 10.16207173 24 12 C24 13.32 24 14.64 24 16 C21.525 15.505 21.525 15.505 19 15 C18.67 13.68 18.34 12.36 18 11 C15.69 10.67 13.38 10.34 11 10 C11 9.34 11 8.68 11 8 C10.071875 8.185625 9.14375 8.37125 8.1875 8.5625 C5 9 5 9 2 8 C0.96868265 5.39137376 0.56942551 2.75952365 0 0 Z \",fill:\"#1D3122\",transform:\"translate(436,394)\"})),_path970||(_path970=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.35694954 0.09031574 4.71153582 0.24688128 7.0625 0.4375 C8.35285156 0.53933594 9.64320313 0.64117187 10.97265625 0.74609375 C12.47119141 0.87177734 12.47119141 0.87177734 14 1 C13.66015625 2.890625 13.66015625 2.890625 13 5 C10.4375 6.75 10.4375 6.75 8 8 C8.33 11.3 8.66 14.6 9 18 C8.34 18.33 7.68 18.66 7 19 C7 18.34 7 17.68 7 17 C6.34 16.67 5.68 16.34 5 16 C5 12.37 5 8.74 5 5 C4.01 5 3.02 5 2 5 C2 4.01 2 3.02 2 2 C1.01 1.67 0.02 1.34 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#123B29\",transform:\"translate(163,375)\"})),_path971||(_path971=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C3.78409802 3.06246747 4.22880021 5.22079273 4.125 8.75 C4.10695312 9.54921875 4.08890625 10.3484375 4.0703125 11.171875 C4.03550781 12.07679688 4.03550781 12.07679688 4 13 C4.66 13.33 5.32 13.66 6 14 C3.69 15.98 1.38 17.96 -1 20 C-1.02689449 17.04160645 -1.04678741 14.08345573 -1.0625 11.125 C-1.07087891 10.28324219 -1.07925781 9.44148438 -1.08789062 8.57421875 C-1.09111328 7.76855469 -1.09433594 6.96289062 -1.09765625 6.1328125 C-1.10289307 5.38918457 -1.10812988 4.64555664 -1.11352539 3.87939453 C-1 2 -1 2 0 0 Z \",fill:\"#8C1C1B\",transform:\"translate(212,343)\"})),_path972||(_path972=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.14210937 0.12117188 2.28421875 0.24234375 3.4609375 0.3671875 C5.18183594 0.52574219 5.18183594 0.52574219 6.9375 0.6875 C9.8359375 1.2421875 9.8359375 1.2421875 11.8359375 3.2421875 C11.1759375 3.2421875 10.5159375 3.2421875 9.8359375 3.2421875 C9.9803125 3.78746094 10.1246875 4.33273437 10.2734375 4.89453125 C11.65122347 10.49178674 12.01881187 15.48164495 11.8359375 21.2421875 C10.8459375 20.9121875 9.8559375 20.5821875 8.8359375 20.2421875 C8.5059375 14.9621875 8.1759375 9.6821875 7.8359375 4.2421875 C6.0725 4.520625 6.0725 4.520625 4.2734375 4.8046875 C0.22325156 5.32449746 -3.16280703 4.9924229 -7.1640625 4.2421875 C-4.83227242 1.29011829 -3.8290868 0.29309059 0 0 Z \",fill:\"#445336\",transform:\"translate(188.1640625,323.7578125)\"})),_path973||(_path973=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.35384615 7.38461538 1.35384615 7.38461538 -0.4375 10.5 C-0.953125 10.995 -1.46875 11.49 -2 12 C-3.32 11.67 -4.64 11.34 -6 11 C-6 10.34 -6 9.68 -6 9 C-6.66 8.67 -7.32 8.34 -8 8 C-7.34 8 -6.68 8 -6 8 C-6.33 7.34 -6.66 6.68 -7 6 C-7.99 6 -8.98 6 -10 6 C-10 5.34 -10 4.68 -10 4 C-11.32 3.67 -12.64 3.34 -14 3 C-12.23050388 2.49528803 -10.45934777 1.99639315 -8.6875 1.5 C-7.70136719 1.2215625 -6.71523438 0.943125 -5.69921875 0.65625 C-3 0 -3 0 0 0 Z \",fill:\"#F4E0BB\",transform:\"translate(323,314)\"})),_path974||(_path974=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.50023856 0.14042495 7.00012399 0.28833226 10.5 0.4375 C11.48226563 0.47681641 12.46453125 0.51613281 13.4765625 0.55664062 C19.0373059 0.79760617 24.48855309 1.21921169 30 2 C30 2.66 30 3.32 30 4 C20.43 4 10.86 4 1 4 C0.67 4.66 0.34 5.32 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#020304\",transform:\"translate(270,302)\"})),_path975||(_path975=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0 5.28 0 8 0 C8 0.33 8 0.66 8 1 C6.35 1 4.7 1 3 1 C2.85484323 4.10367497 2.76599147 7.20648027 2.6875 10.3125 C2.6246582 11.63411133 2.6246582 11.63411133 2.56054688 12.98242188 C2.51421118 15.41967935 2.51302773 17.61008994 3 20 C5.3593351 22.12744839 5.3593351 22.12744839 8 23 C8 23.33 8 23.66 8 24 C5.36 24 2.72 24 0 24 C0 16.08 0 8.16 0 0 Z \",fill:\"#225727\",transform:\"translate(57,271)\"})),_path976||(_path976=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C9.24 0 18.48 0 28 0 C28 1.98 28 3.96 28 6 C27.34 5.67 26.68 5.34 26 5 C26.33 4.34 26.66 3.68 27 3 C26.25314941 3.01571045 25.50629883 3.0314209 24.73681641 3.04760742 C21.36628739 3.10981077 17.99587888 3.1489442 14.625 3.1875 C13.449375 3.21263672 12.27375 3.23777344 11.0625 3.26367188 C9.94101562 3.27333984 8.81953125 3.28300781 7.6640625 3.29296875 C6.62717285 3.3086792 5.5902832 3.32438965 4.52197266 3.34057617 C3.68972168 3.22818604 2.8574707 3.1157959 2 3 C1.34 2.01 0.68 1.02 0 0 Z \",fill:\"#0B0807\",transform:\"translate(310,277)\"})),_path977||(_path977=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.30417167 -0.349746 11.84539417 0.95927604 17.9375 2.5 C18.90751953 2.73847656 19.87753906 2.97695312 20.87695312 3.22265625 C23.25318032 3.80793388 25.62732042 4.40053251 28 5 C27.01 6.485 27.01 6.485 26 8 C16.10113356 7.38921888 8.27668051 5.51778701 0 0 Z \",fill:\"#734C3F\",transform:\"translate(223,252)\"})),_path978||(_path978=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C-4.67649289 8.86872377 -15.23808614 14.01770753 -25 17 C-25.99 17 -26.98 17 -28 17 C-28.33 17.66 -28.66 18.32 -29 19 C-29.66 18.01 -30.32 17.02 -31 16 C-29.85144531 15.5153125 -28.70289063 15.030625 -27.51953125 14.53125 C-18.66898431 10.73174383 -10.42256611 6.7254261 -2.40625 1.37109375 C-1.6121875 0.91863281 -0.818125 0.46617187 0 0 Z \",fill:\"#7B5746\",transform:\"translate(365,211)\"})),_path979||(_path979=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C0.1875 2.5625 0.1875 2.5625 -2 4 C-2.99 3.67 -3.98 3.34 -5 3 C-2.625 1.4375 -2.625 1.4375 0 0 Z M-5 4 C-5 4.99 -5 5.98 -5 7 C-6.60416667 7.875 -8.20833333 8.75 -9.8125 9.625 C-11.31103516 10.44291016 -11.31103516 10.44291016 -12.83984375 11.27734375 C-14.89333119 12.39673554 -16.94795731 13.51404187 -19.00390625 14.62890625 C-19.95136719 15.14324219 -20.89882813 15.65757813 -21.875 16.1875 C-22.73867188 16.65542969 -23.60234375 17.12335938 -24.4921875 17.60546875 C-27.06043971 18.9920373 -27.06043971 18.9920373 -29.6328125 20.73828125 C-30.41398438 21.15464844 -31.19515625 21.57101563 -32 22 C-32.99 21.67 -33.98 21.34 -35 21 C-32.54924184 18.19560895 -29.97942382 16.88179479 -26.625 15.3125 C-20.67136352 12.43006868 -15.17813234 9.09966747 -9.6171875 5.5390625 C-7 4 -7 4 -5 4 Z \",fill:\"#2D2220\",transform:\"translate(558,112)\"})),_path980||(_path980=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.45328423 0.3879807 9.12356351 3.62831586 13.375 6.75 C14.10460938 7.2759375 14.83421875 7.801875 15.5859375 8.34375 C17.02953007 9.38519893 18.47067123 10.43005541 19.90917969 11.47851562 C22.92483098 13.67299704 25.9624108 15.83601825 29 18 C28.01 18.66 27.02 19.32 26 20 C25.42556152 19.5968457 24.85112305 19.19369141 24.25927734 18.77832031 C21.63168958 16.93482634 19.00335148 15.09240493 16.375 13.25 C15.01955078 12.29867187 15.01955078 12.29867187 13.63671875 11.328125 C12.75371094 10.709375 11.87070312 10.090625 10.9609375 9.453125 C10.1059668 8.85306641 9.25099609 8.25300781 8.37011719 7.63476562 C6.38811128 6.26769604 4.38473077 4.96038494 2.3515625 3.671875 C1.57554688 3.12015625 0.79953125 2.5684375 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#D3B07C\",transform:\"translate(42,83)\"})),_path981||(_path981=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.68384766 0.00902344 1.36769531 0.01804687 2.07226562 0.02734375 C3.73583287 0.05061042 5.39921631 0.08646833 7.0625 0.125 C6.7325 1.445 6.4025 2.765 6.0625 4.125 C5.37542969 4.11339844 4.68835938 4.10179687 3.98046875 4.08984375 C3.07941406 4.08082031 2.17835938 4.07179688 1.25 4.0625 C0.35667969 4.05089844 -0.53664063 4.03929687 -1.45703125 4.02734375 C-4.07163791 4.01490033 -4.07163791 4.01490033 -6.9375 5.125 C-8.83220816 5.1935495 -10.7291834 5.20980372 -12.625 5.1875 C-13.61886719 5.17847656 -14.61273438 5.16945313 -15.63671875 5.16015625 C-16.77560547 5.14275391 -16.77560547 5.14275391 -17.9375 5.125 C-13.6559994 -0.41576548 -6.40526041 -0.11336744 0 0 Z \",fill:\"#C6A092\",transform:\"translate(311.9375,498.875)\"})),_path982||(_path982=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.86872054 0.59559106 8.59328841 2.72477415 12.8125 5.0625 C13.50537109 5.43955078 14.19824219 5.81660156 14.91210938 6.20507812 C16.61128985 7.13083852 18.30609425 8.06462312 20 9 C20 10.98 20 12.96 20 15 C17.03 14.01 14.06 13.02 11 12 C11 11.34 11 10.68 11 10 C9.35 9.67 7.7 9.34 6 9 C6 8.34 6 7.68 6 7 C8.64 7.66 11.28 8.32 14 9 C9.38 6.69 4.76 4.38 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#63402E\",transform:\"translate(606,477)\"})),_path983||(_path983=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.375 -0.1875 2.375 -0.1875 5 0 C7.29013653 3.4352048 7.17842973 4.985331 7 9 C7.66 9 8.32 9 9 9 C9 10.32 9 11.64 9 13 C6.69 13.66 4.38 14.32 2 15 C2 11.04 2 7.08 2 3 C1.01 3 0.02 3 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#F93A41\",transform:\"translate(317,455)\"})),_path984||(_path984=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-2.1385485 2.1385485 -3.13275314 2.42655063 -6 3 C2.72542301 3.12852505 11.31008699 2.79645684 20 2 C20 2.66 20 3.32 20 4 C10.29046527 5.28846906 0.81996112 6.34057669 -9 6 C-9 5.34 -9 4.68 -9 4 C-11.31 4 -13.62 4 -16 4 C-16 3.01 -16 2.02 -16 1 C-10.65097076 0.40801257 -5.39115154 -0.14187241 0 0 Z \",fill:\"#0E1416\",transform:\"translate(76,353)\"})),_path985||(_path985=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.6 0 13.2 0 20 0 C20 0.66 20 1.32 20 2 C20.66 2 21.32 2 22 2 C22 2.66 22 3.32 22 4 C14.74 4 7.48 4 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#EA9B9F\",transform:\"translate(190,318)\"})),_path986||(_path986=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.65445377 1.88471877 3.11613295 2.47339885 4.1875 5.6875 C1.25 5.3125 1.25 5.3125 -1.8125 4.6875 C-2.1425 4.0275 -2.4725 3.3675 -2.8125 2.6875 C-9.92234263 0.44228654 -16.47809405 -0.14610149 -23.8125 1.6875 C-23.8125 0.6975 -23.8125 -0.2925 -23.8125 -1.3125 C-16.13506976 -3.07642936 -6.98785025 -4.21549662 0 0 Z \",fill:\"#37815E\",transform:\"translate(428.8125,320.3125)\"})),_path987||(_path987=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 7.92 1 15.84 1 24 C1.99 24.33 2.98 24.66 4 25 C0.33385091 25.33919096 -3.3329879 25.67028081 -7 26 C-8.02996094 26.09539062 -9.05992188 26.19078125 -10.12109375 26.2890625 C-15.77478726 26.79321351 -21.32414798 27.109151 -27 27 C-26.34 25.35 -25.68 23.7 -25 22 C-24.34 22.66 -23.68 23.32 -23 24 C-17.93175151 24.59805332 -12.99404086 23.85004951 -8 23 C-5.36 23 -2.72 23 0 23 C0 15.41 0 7.82 0 0 Z \",fill:\"#B39347\",transform:\"translate(56,271)\"})),_path988||(_path988=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0 5.28 0 8 0 C8 0.66 8 1.32 8 2 C12.29 2.33 16.58 2.66 21 3 C18 6 18 6 16.00708008 6.34057617 C15.26868896 6.32486572 14.53029785 6.30915527 13.76953125 6.29296875 C12.96708984 6.28330078 12.16464844 6.27363281 11.33789062 6.26367188 C10.50451172 6.23853516 9.67113281 6.21339844 8.8125 6.1875 C7.96751953 6.17396484 7.12253906 6.16042969 6.25195312 6.14648438 C4.16769616 6.11115799 2.08376723 6.05735139 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#AF6E53\",transform:\"translate(424,293)\"})),_path989||(_path989=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 1.32 0.66 2.64 1 4 C4.96 4 8.92 4 13 4 C13 4.66 13 5.32 13 6 C10.11788698 6.96070434 8.30149956 7.10581883 5.3125 7.0625 C4.10013672 7.04896484 4.10013672 7.04896484 2.86328125 7.03515625 C1.94095703 7.01775391 1.94095703 7.01775391 1 7 C0.67 7.99 0.34 8.98 0 10 C0 8.68 0 7.36 0 6 C-0.66 6 -1.32 6 -2 6 C-2.33 7.32 -2.66 8.64 -3 10 C-3 9.01 -3 8.02 -3 7 C-5.97 7 -8.94 7 -12 7 C-12 6.01 -12 5.02 -12 4 C-10.95199219 3.94392578 -10.95199219 3.94392578 -9.8828125 3.88671875 C-8.97273437 3.82097656 -8.06265625 3.75523437 -7.125 3.6875 C-6.22007812 3.62949219 -5.31515625 3.57148438 -4.3828125 3.51171875 C-1.63778399 3.2117961 -1.63778399 3.2117961 0 0 Z \",fill:\"#251211\",transform:\"translate(158,268)\"})),_path990||(_path990=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0 5.28 0 8 0 C8.33 0.66 8.66 1.32 9 2 C9.68707031 1.91621094 10.37414062 1.83242187 11.08203125 1.74609375 C11.98308594 1.64425781 12.88414062 1.54242188 13.8125 1.4375 C14.70582031 1.33308594 15.59914062 1.22867188 16.51953125 1.12109375 C19 1 19 1 22 2 C22 2.99 22 3.98 22 5 C20.02 5.99 20.02 5.99 18 7 C18 6.34 18 5.68 18 5 C15.03 5.66 12.06 6.32 9 7 C8.67 6.34 8.34 5.68 8 5 C7.01 4.67 6.02 4.34 5 4 C5 3.01 5 2.02 5 1 C4.34 1 3.68 1 3 1 C2.67 2.32 2.34 3.64 2 5 C1.01 5 0.02 5 -1 5 C-1.33 4.01 -1.66 3.02 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#664135\",transform:\"translate(178,248)\"})),_path991||(_path991=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3 1.99 3 2.98 3 4 C3.66 4 4.32 4 5 4 C5 4.66 5 5.32 5 6 C6.65 6.33 8.3 6.66 10 7 C9.67 8.32 9.34 9.64 9 11 C7.68 11 6.36 11 5 11 C5.33 11.66 5.66 12.32 6 13 C8.02463255 13.65213292 8.02463255 13.65213292 10 14 C10 14.66 10 15.32 10 16 C9.01 16.66 8.02 17.32 7 18 C6.34 18.66 5.68 19.32 5 20 C3.35 17.69 1.7 15.38 0 13 C0.33 12.34 0.66 11.68 1 11 C1.33 11 1.66 11 2 11 C2.79356801 9.25328412 2.79356801 9.25328412 3 7 C1.60907108 4.37612865 1.60907108 4.37612865 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#9D5B45\",transform:\"translate(34,233)\"})),_path992||(_path992=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C-0.65 2.66 -2.3 3.32 -4 4 C-3.01 4.66 -2.02 5.32 -1 6 C-8.32328775 8.57611228 -15.25798419 9.61422945 -23 10 C-19.32740617 7.55160412 -16.45351799 6 -12 6 C-12.33 5.67 -12.66 5.34 -13 5 C-15.00720923 5.28674418 -17.0085944 5.61866701 -19 6 C-16.58481443 3.0763543 -14.73207927 2.44429515 -11 2 C-9.7934375 2.0309375 -9.7934375 2.0309375 -8.5625 2.0625 C-5.42629881 1.98600729 -2.92484521 1.0883145 0 0 Z \",fill:\"#43332B\",transform:\"translate(407,231)\"})),_path993||(_path993=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.64437012 0.27674561 -1.28874023 0.55349121 -1.95263672 0.83862305 C-4.92806635 2.11856391 -7.90153324 3.40300609 -10.875 4.6875 C-11.88820313 5.12255859 -12.90140625 5.55761719 -13.9453125 6.00585938 C-19.72581982 8.50704043 -25.33601522 11.13789952 -30.84814453 14.19067383 C-33.35984979 15.13534174 -34.5194903 14.91125796 -37 14 C-37 13.01 -37 12.02 -37 11 C-36.34 11 -35.68 11 -35 11 C-35 11.66 -35 12.32 -35 13 C-32.37424924 11.77241583 -29.74923376 10.54332074 -27.125 9.3125 C-25.96158081 8.76710571 -25.96158081 8.76710571 -24.7746582 8.21069336 C-19.79453786 5.86787108 -14.85981107 3.45777746 -9.98046875 0.91015625 C-6.19897512 -0.82768994 -4.00182608 -1.10788547 0 0 Z \",fill:\"#5A5747\",transform:\"translate(447,201)\"})),_path994||(_path994=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C-0.55985305 4.12870928 -3.20935755 4.81077884 -7 6 C-12.96954393 8.78578717 -18.74638307 12.05841071 -24.40234375 15.43359375 C-25.56443359 16.11615234 -25.56443359 16.11615234 -26.75 16.8125 C-27.44609375 17.23144531 -28.1421875 17.65039062 -28.859375 18.08203125 C-31.3769217 19.16163613 -33.28807419 19.16593952 -36 19 C-33.86359843 16.65666185 -31.91884136 15.30246931 -29.04296875 13.984375 C-28.26622803 13.62327637 -27.4894873 13.26217773 -26.68920898 12.89013672 C-25.86364502 12.5138916 -25.03808105 12.13764648 -24.1875 11.75 C-22.47325449 10.95724938 -20.75971859 10.16296262 -19.046875 9.3671875 C-17.77166992 8.77502441 -17.77166992 8.77502441 -16.47070312 8.17089844 C-11.77903099 5.94745382 -7.18597767 3.53056004 -2.58984375 1.1171875 C-1.73519531 0.74851562 -0.88054688 0.37984375 0 0 Z \",fill:\"#383730\",transform:\"translate(590,114)\"})),_path995||(_path995=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.91007812 0.00902344 1.82015625 0.01804687 2.7578125 0.02734375 C3.45648438 0.03894531 4.15515625 0.05054687 4.875 0.0625 C4.5625 2 4.5625 2 3.875 4.0625 C2.885 4.3925 1.895 4.7225 0.875 5.0625 C2.525 5.3925 4.175 5.7225 5.875 6.0625 C5.545 7.0525 5.215 8.0425 4.875 9.0625 C3.225 9.0625 1.575 9.0625 -0.125 9.0625 C-0.125 8.4025 -0.125 7.7425 -0.125 7.0625 C-0.785 7.0625 -1.445 7.0625 -2.125 7.0625 C-2.125 7.7225 -2.125 8.3825 -2.125 9.0625 C-3.445 8.7325 -4.765 8.4025 -6.125 8.0625 C-5.795 7.0725 -5.465 6.0825 -5.125 5.0625 C-5.785 5.0625 -6.445 5.0625 -7.125 5.0625 C-7.125 3.7425 -7.125 2.4225 -7.125 1.0625 C-4.60024538 -0.19987731 -2.81299534 -0.03606404 0 0 Z \",fill:\"#C5956C\",transform:\"translate(453.125,70.9375)\"})),_path996||(_path996=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.28385089 1.39920603 5.03439449 2.97511543 7.25 5.75 C10.31687407 9.40896038 13.55657267 12.0972543 17.49609375 14.7734375 C17.99238281 15.17820312 18.48867188 15.58296875 19 16 C19 16.66 19 17.32 19 18 C20.32 18.66 21.64 19.32 23 20 C23 20.99 23 21.98 23 23 C16.36555965 19.88137172 6.34897907 13.69795814 3 7 C3.66 7 4.32 7 5 7 C3.35 4.69 1.7 2.38 0 0 Z \",fill:\"#613F30\",transform:\"translate(597,555)\"})),_path997||(_path997=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.93719378 -0.05406122 3.87481921 -0.09282025 5.8125 -0.125 C6.89144531 -0.14820313 7.97039062 -0.17140625 9.08203125 -0.1953125 C12 0 12 0 15 2 C15.680625 2.309375 16.36125 2.61875 17.0625 2.9375 C19 4 19 4 21 7 C20.67 7.99 20.34 8.98 20 10 C19.75636719 9.03320312 19.75636719 9.03320312 19.5078125 8.046875 C18.04785597 5.5663746 18.04785597 5.5663746 14.3046875 5.390625 C12.82887763 5.32414708 11.35203983 5.27806121 9.875 5.25 C9.12089844 5.22035156 8.36679687 5.19070313 7.58984375 5.16015625 C5.72714047 5.08942068 3.86356245 5.04245017 2 5 C1.34 3.35 0.68 1.7 0 0 Z \",fill:\"#F9DFBF\",transform:\"translate(392,357)\"})),_path998||(_path998=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 1.32 2 2.64 2 4 C8.93 4.495 8.93 4.495 16 5 C16 6.65 16 8.3 16 10 C11.38 10 6.76 10 2 10 C1.34 6.7 0.68 3.4 0 0 Z \",fill:\"#51060E\",transform:\"translate(270,334)\"})),_path999||(_path999=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.54232342 -0.08152344 5.08199202 -0.14073716 7.625 -0.1875 C8.33785156 -0.21263672 9.05070313 -0.23777344 9.78515625 -0.26367188 C14.61896995 -0.33019225 17.76781157 0.41510953 22 3 C23 4 23 4 23 9 C19.37 9 15.74 9 12 9 C12 8.67 12 8.34 12 8 C14.97 8 17.94 8 21 8 C20.01 7.01 19.02 6.02 18 5 C18 4.34 18 3.68 18 3 C12.06 3 6.12 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#ECEEC3\",transform:\"translate(520,319)\"})),_path1000||(_path1000=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.85772162 0.08984301 3.71247985 0.24611861 5.5625 0.4375 C7.08037109 0.59025391 7.08037109 0.59025391 8.62890625 0.74609375 C9.80259766 0.87177734 9.80259766 0.87177734 11 1 C11 2.98 11 4.96 11 7 C5.06 6.34 -0.88 5.68 -7 5 C-7.33 4.01 -7.66 3.02 -8 2 C-6.865625 1.855625 -5.73125 1.71125 -4.5625 1.5625 C-1.19222799 1.38828522 -1.19222799 1.38828522 0 0 Z \",fill:\"#C98967\",transform:\"translate(409,286)\"})),_path1001||(_path1001=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-3.25037492 3.25037492 -7.6248283 3.32186771 -12.03125 4.21875 C-15.09410091 4.7581869 -15.09410091 4.7581869 -17 7 C-19.6015625 7.4140625 -19.6015625 7.4140625 -22.625 7.625 C-23.62789063 7.69976562 -24.63078125 7.77453125 -25.6640625 7.8515625 C-26.82035156 7.92503906 -26.82035156 7.92503906 -28 8 C-28 7.01 -28 6.02 -28 5 C-27.34 5 -26.68 5 -26 5 C-26 4.34 -26 3.68 -26 3 C-17.2350735 1.01281019 -9.05054166 -0.50803456 0 0 Z \",fill:\"#585343\",transform:\"translate(370,245)\"})),_path1002||(_path1002=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.33 2.64 0.66 4 1 C4 1.66 4 2.32 4 3 C5.98 3 7.96 3 10 3 C9.67 4.32 9.34 5.64 9 7 C4.38 7 -0.24 7 -5 7 C-5 6.34 -5 5.68 -5 5 C-6.65 5 -8.3 5 -10 5 C-10 4.34 -10 3.68 -10 3 C-7.36 2.34 -4.72 1.68 -2 1 C-2 1.66 -2 2.32 -2 3 C-1.34 3 -0.68 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#49382F\",transform:\"translate(142,241)\"})),_path1003||(_path1003=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-7.21559401 3.40542541 -14.4632715 6.38712866 -22 9 C-23.01578125 9.37511719 -24.0315625 9.75023437 -25.078125 10.13671875 C-30.9840672 12.25128348 -35.72455011 13.48272691 -42 13 C-39.74596874 10.74596874 -38.91667936 10.61890476 -35.875 10.0625 C-32.17257627 9.38394191 -28.80335193 8.21737352 -25.29248047 6.86694336 C-20.94052275 5.22117106 -16.53171388 3.74140874 -12.125 2.25 C-10.701875 1.75693359 -10.701875 1.75693359 -9.25 1.25390625 C-8.34507812 0.94839844 -7.44015625 0.64289063 -6.5078125 0.328125 C-5.68941895 0.0487207 -4.87102539 -0.23068359 -4.02783203 -0.51855469 C-2 -1 -2 -1 0 0 Z \",fill:\"#726254\",transform:\"translate(386,227)\"})),_path1004||(_path1004=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.0625 0.4375 2.0625 0.4375 4 1 C3.48050781 1.44730469 2.96101563 1.89460937 2.42578125 2.35546875 C-3.49664154 7.45945791 -3.49664154 7.45945791 -9 13 C-9 13.66 -9 14.32 -9 15 C-12.82989106 16.80230168 -15.78121808 17.19622241 -20 17 C-16.18657854 13.01191802 -12.11889321 9.6127788 -7.75 6.25 C-3.73746143 3.2806021 -3.73746143 3.2806021 0 0 Z \",fill:\"#452823\",transform:\"translate(420,153)\"})),_path1005||(_path1005=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C-0.62417955 4.36223005 -3.24483236 7.30388336 -6.5 10.0625 C-10.49672036 13.46853424 -14.22280812 17.10542852 -17.9375 20.8125 C-18.51757812 21.38814697 -19.09765625 21.96379395 -19.6953125 22.55688477 C-22.71697196 25.49787813 -22.71697196 25.49787813 -25 29 C-25.7425 29.433125 -26.485 29.86625 -27.25 30.3125 C-30.31145976 32.19112304 -32.53949863 34.39889855 -35 37 C-35.66 36.67 -36.32 36.34 -37 36 C-36.04882866 34.8274869 -35.08882991 33.66212985 -34.125 32.5 C-33.59132813 31.8503125 -33.05765625 31.200625 -32.5078125 30.53125 C-32.01023437 30.0259375 -31.51265625 29.520625 -31 29 C-30.34 29 -29.68 29 -29 29 C-29 28.34 -29 27.68 -29 27 C-27.35 26.34 -25.7 25.68 -24 25 C-24 24.34 -24 23.68 -24 23 C-22.54882812 21.57006836 -22.54882812 21.57006836 -20.53125 19.90234375 C-15.95144237 16.00809374 -11.72332288 11.83665918 -7.5 7.5625 C-6.77296875 6.83095703 -6.0459375 6.09941406 -5.296875 5.34570312 C-3.52890501 3.56610176 -1.76333622 1.78419082 0 0 Z \",fill:\"#5B654F\",transform:\"translate(515,19)\"})),_path1006||(_path1006=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.3 0.33 6.6 0.66 10 1 C10 1.33 10 1.66 10 2 C15.94 2.33 21.88 2.66 28 3 C28 3.99 28 4.98 28 6 C21.07 6 14.14 6 7 6 C7 5.34 7 4.68 7 4 C6.21625 3.71125 5.4325 3.4225 4.625 3.125 C2 2 2 2 0 0 Z \",fill:\"#502429\",transform:\"translate(266,498)\"})),_path1007||(_path1007=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C8.0968007 1.33708635 15.77880003 5.18881112 23 9 C21.66666667 9.33333333 20.33333333 9.66666667 19 10 C18.39671875 10.22429687 17.7934375 10.44859375 17.171875 10.6796875 C14.15053865 11.12528027 12.65903599 10.12646003 10 8.6875 C8.7315625 8.01267578 8.7315625 8.01267578 7.4375 7.32421875 C6.633125 6.88722656 5.82875 6.45023437 5 6 C4.25234375 5.65839844 3.5046875 5.31679688 2.734375 4.96484375 C1 4 1 4 0.25 1.875 C0.1675 1.25625 0.085 0.6375 0 0 Z \",fill:\"#9F6B4D\",transform:\"translate(584,438)\"})),_path1008||(_path1008=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C9.40175268 1.10741798 17.51164464 5.06123461 26 9 C26 9.66 26 10.32 26 11 C20.1307715 10.41779771 15.10140533 8.77295801 9.625 6.625 C8.80644531 6.32078125 7.98789062 6.0165625 7.14453125 5.703125 C6.36722656 5.40148437 5.58992187 5.09984375 4.7890625 4.7890625 C4.08475098 4.51787598 3.38043945 4.24668945 2.65478516 3.96728516 C1 3 1 3 0 0 Z \",fill:\"#B97C58\",transform:\"translate(582,429)\"})),_path1009||(_path1009=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.99 0 1.98 0 3 C0.99 3 1.98 3 3 3 C3 3.66 3 4.32 3 5 C-2.70690634 5.99250545 -8.21408489 6.10477512 -14 6 C-14.33 4.35 -14.66 2.7 -15 1 C-13.33388095 0.957279 -11.66617115 0.95936168 -10 1 C-9.67 1.33 -9.34 1.66 -9 2 C-8.67 1.34 -8.34 0.68 -8 0 C-4.71023192 -1.09658936 -3.28696233 -0.79953138 0 0 Z \",fill:\"#DADA9D\",transform:\"translate(596,389)\"})),_path1010||(_path1010=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.66 2 1.32 2 2 C2.99 2.33 3.98 2.66 5 3 C6.34090759 3.65129797 7.67592331 4.31513275 9 5 C5.88089144 6.79275866 3.32317572 7.34290718 -0.25 7.625 C-1.14203125 7.69976562 -2.0340625 7.77453125 -2.953125 7.8515625 C-3.62859375 7.90054687 -4.3040625 7.94953125 -5 8 C-5 7.34 -5 6.68 -5 6 C-7.31 6 -9.62 6 -12 6 C-12 5.34 -12 4.68 -12 4 C-12.66 4 -13.32 4 -14 4 C-14 3.34 -14 2.68 -14 2 C-9.38 2 -4.76 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#A26B5A\",transform:\"translate(524,312)\"})),_path1011||(_path1011=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 1.65 0 3.3 0 5 C-3.3 5 -6.6 5 -10 5 C-10 6.65 -10 8.3 -10 10 C-10.66 10 -11.32 10 -12 10 C-12 8.02 -12 6.04 -12 4 C-12.99 3.67 -13.98 3.34 -15 3 C-15 2.01 -15 1.02 -15 0 C-4.44191344 -1.33257403 -4.44191344 -1.33257403 0 0 Z \",fill:\"#093118\",transform:\"translate(486,272)\"})),_path1012||(_path1012=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4.78424531 2.83485395 5.16174868 5.50783306 5.375 8.4375 C5.76261662 12.28824876 6.6540442 14.83805957 9 18 C5.37 18 1.74 18 -2 18 C-0.68 17.67 0.64 17.34 2 17 C1.34 16.01 0.68 15.02 0 14 C-0.36703674 9.7790775 0.20114028 6.82257691 2 3 C1.34 3 0.68 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#583A2D\",transform:\"translate(89,251)\"})),_path1013||(_path1013=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.00863065 1.66294456 9.05308532 4.55451469 13.375 7.5 C14.97773282 8.58222641 16.58059971 9.66425429 18.18359375 10.74609375 C19.38798096 11.56182861 19.38798096 11.56182861 20.61669922 12.39404297 C22.87205963 13.91378901 25.13778353 15.41600042 27.41015625 16.91015625 C28.43133545 17.58304688 28.43133545 17.58304688 29.47314453 18.26953125 C30.75256459 19.11166506 32.03342086 19.95162223 33.31591797 20.7890625 C36.1378738 22.65507981 38.74075039 24.46542965 41 27 C40.01 27.33 39.02 27.66 38 28 C37.52175781 27.45601562 37.04351562 26.91203125 36.55078125 26.3515625 C33.07610505 23.14826223 29.20497386 20.84208639 25.1875 18.375 C23.48615864 17.31381437 21.78564929 16.25129377 20.0859375 15.1875 C18.81121582 14.39085937 18.81121582 14.39085937 17.51074219 13.578125 C13.75222735 11.21571349 10.02257451 8.81267284 6.3125 6.375 C5.67143311 5.96169434 5.03036621 5.54838867 4.36987305 5.12255859 C2.87657028 4.13504858 1.43197307 3.07451492 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#936E4E\",transform:\"translate(189,196)\"})),_path1014||(_path1014=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.33 0 0.66 0 1 C-0.64549805 1.11593506 -1.29099609 1.23187012 -1.95605469 1.35131836 C-4.88762233 1.87865267 -7.81881297 2.40805434 -10.75 2.9375 C-11.76578125 3.11990234 -12.7815625 3.30230469 -13.828125 3.49023438 C-15.29765625 3.75610352 -15.29765625 3.75610352 -16.796875 4.02734375 C-17.69760742 4.18968506 -18.59833984 4.35202637 -19.52636719 4.51928711 C-21.08996892 4.82314931 -22.64725131 5.16383188 -24.19140625 5.5546875 C-26.26770332 6.06591399 -28.11532559 6.09807791 -30.25 6.0625 C-32.10625 6.0315625 -32.10625 6.0315625 -34 6 C-33.67 5.34 -33.34 4.68 -33 4 C-33.66 3.34 -34.32 2.68 -35 2 C-29.72815398 1.16907328 -24.51560886 0.7126632 -19.1875 0.4375 C-18.39939941 0.3950415 -17.61129883 0.35258301 -16.79931641 0.30883789 C-11.19254867 0.02221337 -5.6147168 -0.09055995 0 0 Z \",fill:\"#2D1F23\",transform:\"translate(462,480)\"})),_path1015||(_path1015=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C3.96 2 7.92 2 12 2 C12 2.66 12 3.32 12 4 C8.31256766 4.05850924 4.6252563 4.09376673 0.9375 4.125 C-0.10083984 4.14175781 -1.13917969 4.15851563 -2.20898438 4.17578125 C-7.88711284 4.21183286 -12.64391054 3.92971166 -18 2 C-18 1.67 -18 1.34 -18 1 C-11.97403427 -0.0712828 -6.11090483 -0.09945415 0 0 Z \",fill:\"#C33D49\",transform:\"translate(222,478)\"})),_path1016||(_path1016=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.47361889 0.5439085 9.58317001 2.55393801 14.375 5.0625 C15.11105469 5.43955078 15.84710937 5.81660156 16.60546875 6.20507812 C18.40739646 7.12944364 20.20423099 8.06372614 22 9 C22 9.66 22 10.32 22 11 C19.65088888 11.82148242 18.39644093 12.13190486 16.0012207 11.33496094 C15.31632568 10.97176758 14.63143066 10.60857422 13.92578125 10.234375 C13.17619141 9.83863281 12.42660156 9.44289063 11.65429688 9.03515625 C10.49510742 8.39900391 10.49510742 8.39900391 9.3125 7.75 C8.52810547 7.34136719 7.74371094 6.93273437 6.93554688 6.51171875 C1.13027323 3.3908197 1.13027323 3.3908197 0 0 Z \",fill:\"#875942\",transform:\"translate(588,464)\"})),_path1017||(_path1017=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.99998437 -0.02927916 7.99994076 -0.04689219 12 -0.0625 C13.12535156 -0.07087891 14.25070312 -0.07925781 15.41015625 -0.08789062 C21.37584397 -0.10533416 27.10287573 0.08218777 33 1 C33 1.33 33 1.66 33 2 C27.67132017 3.10941367 22.53718145 3.11548069 17.125 3.0625 C16.24585938 3.05798828 15.36671875 3.05347656 14.4609375 3.04882812 C12.30726197 3.03712337 10.15362183 3.01919069 8 3 C8 3.99 8 4.98 8 6 C6.35 6 4.7 6 3 6 C3 5.34 3 4.68 3 4 C2.34 3.67 1.68 3.34 1 3 C1.33 2.67 1.66 2.34 2 2 C1.34 1.34 0.68 0.68 0 0 Z \",fill:\"#44322A\",transform:\"translate(369,434)\"})),_path1018||(_path1018=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.83991749 0.47039505 14.72071135 3.22937188 22 6 C22 6.33 22 6.66 22 7 C20.02 7.33 18.04 7.66 16 8 C17.65 8.66 19.3 9.32 21 10 C18.44312357 10.95221605 17.28098133 11.09883765 14.66796875 10.1796875 C9.47134706 7.44634633 4.62982923 4.62334462 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#0B0904\",transform:\"translate(378,407)\"})),_path1019||(_path1019=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.66 1.32 1.32 2 2 C1.01 2.66 0.02 3.32 -1 4 C1.97 4 4.94 4 8 4 C8 4.66 8 5.32 8 6 C1.565 6.495 1.565 6.495 -5 7 C-5 6.34 -5 5.68 -5 5 C-6.08539063 5.28875 -7.17078125 5.5775 -8.2890625 5.875 C-9.7342763 6.25038021 -11.17959441 6.62535897 -12.625 7 C-13.33785156 7.19078125 -14.05070313 7.3815625 -14.78515625 7.578125 C-18.95848544 8.65017287 -22.65178751 9.21946814 -27 9 C-24.26758964 7.17839309 -23.05341587 6.64083551 -19.98046875 6.03515625 C-19.20509766 5.87466797 -18.42972656 5.71417969 -17.63085938 5.54882812 C-16.01397247 5.22700171 -14.39678802 4.90666625 -12.77929688 4.58789062 C-8.10280056 3.61700512 -4.20585544 2.37722264 0 0 Z \",fill:\"#253B3E\",transform:\"translate(254,400)\"})),_path1020||(_path1020=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C1.66 2 2.32 2 3 2 C6.37081613 8.5490142 8.70048208 13.57488991 8 21 C3 14.40909091 3 14.40909091 3 10 C2.34 10 1.68 10 1 10 C1 8.68 1 7.36 1 6 C0.34 6 -0.32 6 -1 6 C-1.33 5.34 -1.66 4.68 -2 4 C-3.65 4 -5.3 4 -7 4 C-7 3.34 -7 2.68 -7 2 C-4.69 1.34 -2.38 0.68 0 0 Z \",fill:\"#1B4D36\",transform:\"translate(423,328)\"})),_path1021||(_path1021=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C0.76183594 1.98839844 1.52367187 1.97679687 2.30859375 1.96484375 C8.63840322 1.90952706 14.72555549 2.1634074 21 3 C21 3.33 21 3.66 21 4 C17.12634335 4.05038777 13.2528201 4.08617252 9.37890625 4.10986328 C7.4322232 4.12456776 5.48563053 4.15001202 3.5390625 4.17578125 C-5.1937614 4.22033647 -13.39829323 3.47719534 -22 2 C-22 1.67 -22 1.34 -22 1 C-19.08340625 0.83196579 -16.16673658 0.66552033 -13.25 0.5 C-12.0125 0.42845703 -12.0125 0.42845703 -10.75 0.35546875 C-9.55117188 0.28779297 -9.55117188 0.28779297 -8.328125 0.21875 C-7.5949707 0.17685547 -6.86181641 0.13496094 -6.10644531 0.09179688 C-4.07266386 0.00316662 -2.03571175 0 0 0 Z \",fill:\"#112025\",transform:\"translate(552,290)\"})),_path1022||(_path1022=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-8.87581699 12.291939 -8.87581699 12.291939 -14 14 C-13.34 12.35 -12.68 10.7 -12 9 C-11.34 9 -10.68 9 -10 9 C-10 8.01 -10 7.02 -10 6 C-10.66 6 -11.32 6 -12 6 C-12.33 6.99 -12.66 7.98 -13 9 C-13.33 8.34 -13.66 7.68 -14 7 C-11.60957316 -0.17128051 -6.62827889 -0.44937484 0 0 Z \",fill:\"#84593F\",transform:\"translate(139,519)\"})),_path1023||(_path1023=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C2.195625 1.61875 1.39125 2.2375 0.5625 2.875 C-2.23355071 5.1936762 -2.86588098 5.9030232 -3.29711914 9.43017578 C-3.37567139 10.4251709 -3.45422363 11.42016602 -3.53515625 12.4453125 C-3.62216797 13.52167969 -3.70917969 14.59804688 -3.79882812 15.70703125 C-3.88583984 16.83496094 -3.97285156 17.96289062 -4.0625 19.125 C-4.15337891 20.26066406 -4.24425781 21.39632813 -4.33789062 22.56640625 C-4.56229226 25.37733201 -4.78283166 28.18850766 -5 31 C-5.66 31 -6.32 31 -7 31 C-7 22.42 -7 13.84 -7 5 C-6.01 4.67 -5.02 4.34 -4 4 C-2.62804426 2.70644173 -1.28817344 1.37701298 0 0 Z \",fill:\"#370D10\",transform:\"translate(289,465)\"})),_path1024||(_path1024=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.92 0 15.84 0 24 0 C24 0.66 24 1.32 24 2 C24.66 2 25.32 2 26 2 C26 2.66 26 3.32 26 4 C17.137418 4.33165588 8.7419859 3.3213258 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#8C3040\",transform:\"translate(210,468)\"})),_path1025||(_path1025=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.91750286 0.08743331 3.83406665 0.1956189 5.75 0.3125 C6.81734375 0.37050781 7.8846875 0.42851562 8.984375 0.48828125 C12.21478929 1.03644741 13.71977656 1.66996585 16 4 C16 4.99 16 5.98 16 7 C11.05 7 6.1 7 1 7 C1 6.01 1 5.02 1 4 C1.66 4 2.32 4 3 4 C3 3.34 3 2.68 3 2 C2.01 1.67 1.02 1.34 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#8C6F5F\",transform:\"translate(530,351)\"})),_path1026||(_path1026=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.70125 0.309375 1.4025 0.61875 2.125 0.9375 C8.18634315 3.1775616 14.48489905 3.2689788 20.875 3.5625 C21.75414062 3.60568359 22.63328125 3.64886719 23.5390625 3.69335938 C25.69255797 3.79869339 27.84626064 3.89977649 30 4 C29.67 5.32 29.34 6.64 29 8 C7.62450593 7.08300395 7.62450593 7.08300395 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#4E482A\",transform:\"translate(431,349)\"})),_path1027||(_path1027=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.495 0.99 0.495 2 1 C2 1.99 2 2.98 2 4 C10.25 5.32 18.5 6.64 27 8 C27.33 6.35 27.66 4.7 28 3 C28.33 3 28.66 3 29 3 C30.25 10.625 30.25 10.625 28 14 C27.02933594 13.04673828 27.02933594 13.04673828 26.0390625 12.07421875 C22.12480967 9.40266572 19.00969773 9.1644523 14.375 8.8125 C6.22899768 8.07633256 6.22899768 8.07633256 3 7 C3 6.34 3 5.68 3 5 C2.34 5 1.68 5 1 5 C0.67 3.35 0.34 1.7 0 0 Z \",fill:\"#3A4025\",transform:\"translate(577,341)\"})),_path1028||(_path1028=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3 4.95 3 9.9 3 15 C-4.75 15.125 -4.75 15.125 -7 14 C-7.33 14.66 -7.66 15.32 -8 16 C-8.66 14.35 -9.32 12.7 -10 11 C-8.35 11 -6.7 11 -5 11 C-5 11.66 -5 12.32 -5 13 C-3.68 12.67 -2.36 12.34 -1 12 C-1.01160156 11.21753906 -1.02320313 10.43507813 -1.03515625 9.62890625 C-1.04417969 8.61699219 -1.05320313 7.60507812 -1.0625 6.5625 C-1.07410156 5.55316406 -1.08570313 4.54382813 -1.09765625 3.50390625 C-1 1 -1 1 0 0 Z \",fill:\"#BA0506\",transform:\"translate(165,325)\"})),_path1029||(_path1029=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C9.37877608 -0.1598655 18.65190221 0.33566818 28 1 C28 1.33 28 1.66 28 2 C24.7 2.33 21.4 2.66 18 3 C20.97 3.495 20.97 3.495 24 4 C24 4.33 24 4.66 24 5 C18.06 5 12.12 5 6 5 C6 4.34 6 3.68 6 3 C1.38 3 -3.24 3 -8 3 C-8 2.67 -8 2.34 -8 2 C-5.36 1.67 -2.72 1.34 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#051414\",transform:\"translate(520,289)\"})),_path1030||(_path1030=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C8.58 0 17.16 0 26 0 C26 0.66 26 1.32 26 2 C26.66 2.33 27.32 2.66 28 3 C18.76 3 9.52 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#DFB191\",transform:\"translate(311,284)\"})),_path1031||(_path1031=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0 4.62 0 7 0 C7 1.32 7 2.64 7 4 C7.99 4 8.98 4 10 4 C9.67 5.32 9.34 6.64 9 8 C8.34 8 7.68 8 7 8 C7 8.99 7 9.98 7 11 C7.66 11.33 8.32 11.66 9 12 C8.34 12 7.68 12 7 12 C6.67 12.66 6.34 13.32 6 14 C5.01 14 4.02 14 3 14 C3 12.35 3 10.7 3 9 C2.34 8.67 1.68 8.34 1 8 C1.33 6.35 1.66 4.7 2 3 C1.01 2.67 0.02 2.34 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#A06951\",transform:\"translate(107,244)\"})),_path1032||(_path1032=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C1.58007812 1.91621094 2.16015625 1.83242187 2.7578125 1.74609375 C7.42315303 1.13790579 11.35442117 0.92794335 16 2 C15.67 2.66 15.34 3.32 15 4 C14.01 4.33 13.02 4.66 12 5 C12.350625 5.61875 12.70125 6.2375 13.0625 6.875 C13.371875 7.57625 13.68125 8.2775 14 9 C13.67 9.66 13.34 10.32 13 11 C12.34 11 11.68 11 11 11 C10.01 8.36 9.02 5.72 8 3 C6.95550089 6.13349732 7.06576355 6.98968256 8 10 C6.51545194 9.40917986 5.03745649 8.80187345 3.5625 8.1875 C2.73878906 7.85105469 1.91507813 7.51460937 1.06640625 7.16796875 C-1 6 -1 6 -2 3 C-1.34 3 -0.68 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#8F4E3B\",transform:\"translate(127,246)\"})),_path1033||(_path1033=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2 1.99 2 2.98 2 4 C-5.48060698 7.0476547 -12.86046378 9.18794666 -21 9 C-20.67 8.01 -20.34 7.02 -20 6 C-17.19431155 4.97813873 -14.50074891 4.13622765 -11.625 3.375 C-10.07548764 2.94543222 -8.52600721 2.51574922 -6.9765625 2.0859375 C-6.28643066 1.9007959 -5.59629883 1.7156543 -4.88525391 1.52490234 C-3.24185778 1.06733932 -1.61836439 0.5394548 0 0 Z \",fill:\"#4C584D\",transform:\"translate(406,238)\"})),_path1034||(_path1034=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.134375 0.020625 2.26875 0.04125 3.4375 0.0625 C3.1075 1.3825 2.7775 2.7025 2.4375 4.0625 C1.4475 4.0625 0.4575 4.0625 -0.5625 4.0625 C-5.44231844 6.97836687 -9.12751233 10.56148167 -12.5625 15.0625 C-14.19606951 16.43618345 -15.8550002 17.78187515 -17.5625 19.0625 C-16.9461103 15.05596695 -14.97677274 12.25786099 -12.5625 9.0625 C-11.5725 8.7325 -10.5825 8.4025 -9.5625 8.0625 C-9.2325 7.0725 -8.9025 6.0825 -8.5625 5.0625 C-7.9025 5.0625 -7.2425 5.0625 -6.5625 5.0625 C-6.253125 4.423125 -5.94375 3.78375 -5.625 3.125 C-4.05177039 0.07108369 -4.05177039 0.07108369 0 0 Z \",fill:\"#60826D\",transform:\"translate(460.5625,81.9375)\"})),_path1035||(_path1035=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 1.32 1.32 2.64 2 4 C2.66 3.67 3.32 3.34 4 3 C3.566875 3.8353125 3.566875 3.8353125 3.125 4.6875 C1.9586747 7.08494645 0.9660119 9.51596939 0 12 C-0.66 12 -1.32 12 -2 12 C-2.12375 12.7425 -2.2475 13.485 -2.375 14.25 C-2.95486701 16.80141485 -3.73708739 18.7267573 -5 21 C-6.32 21 -7.64 21 -9 21 C-8.42512098 16.97584687 -7.08586402 14.44969819 -5 11 C-4.07773778 9.07494 -3.18161317 7.13713225 -2.3125 5.1875 C-1.87550781 4.21167969 -1.43851562 3.23585938 -0.98828125 2.23046875 C-0.66214844 1.49441406 -0.33601563 0.75835938 0 0 Z \",fill:\"#4C3229\",transform:\"translate(121,605)\"})),_path1036||(_path1036=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.63885071 1.39985164 3.27678227 2.80079312 4.91015625 4.20703125 C6.34885035 5.44135012 7.79460656 6.66746951 9.24609375 7.88671875 C9.96925781 8.50160156 10.69242188 9.11648438 11.4375 9.75 C12.45650391 10.60851562 12.45650391 10.60851562 13.49609375 11.484375 C15 13 15 13 15 15 C8.22514217 14.03216317 4.71545326 10.71545326 0 6 C-1.63377642 4.94712186 -3.29181597 3.9272999 -5 3 C-4.67 2.34 -4.34 1.68 -4 1 C-2.02 1.495 -2.02 1.495 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#714A37\",transform:\"translate(587,547)\"})),_path1037||(_path1037=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.0725 0.33 2.145 0.66 3.25 1 C6.99731601 2.1717751 6.99731601 2.1717751 11 2 C12.68698082 2.61344757 14.35965807 3.27095914 16 4 C16 6.97 16 9.94 16 13 C10.34908928 9.43100376 5.05840423 5.36862184 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#F1CA9D\",transform:\"translate(610,536)\"})),_path1038||(_path1038=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.66 1.98 1.32 3 2 C2.01 2.66 1.02 3.32 0 4 C1.32 4 2.64 4 4 4 C4 3.34 4 2.68 4 2 C5.32 2.33 6.64 2.66 8 3 C0.96581265 7.26610437 -5.52675098 10.52957806 -14 10 C-14 9.34 -14 8.68 -14 8 C-9.38 5.36 -4.76 2.72 0 0 Z \",fill:\"#5F4131\",transform:\"translate(102,436)\"})),_path1039||(_path1039=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0 3.96 0 6 0 C6 0.66 6 1.32 6 2 C6.66 2 7.32 2 8 2 C10.03435531 5.72965139 11 7.66905042 11 12 C8.03824877 11.38722388 6.61941217 10.74627478 4 9 C4 8.01 4 7.02 4 6 C2.02 5.34 0.04 4.68 -2 4 C-1.34 2.68 -0.68 1.36 0 0 Z \",fill:\"#F9F7DC\",transform:\"translate(460,380)\"})),_path1040||(_path1040=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C10.49534144 0.53774718 20.6680739 2.15625561 31 4 C31 4.99 31 5.98 31 7 C24.09695756 6.55905676 17.26983664 5.68016346 10.4375 4.625 C9.63973145 4.51115967 8.84196289 4.39731934 8.02001953 4.2800293 C5.99454996 3.95404917 3.99305991 3.48631493 2 3 C1.34 2.01 0.68 1.02 0 0 Z \",fill:\"#7D4F37\",transform:\"translate(595,325)\"})),_path1041||(_path1041=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0 4.62 0 7 0 C7 0.66 7 1.32 7 2 C7.99 2 8.98 2 10 2 C10 2.99 10 3.98 10 5 C10.99 4.67 11.98 4.34 13 4 C13.12375 4.804375 13.2475 5.60875 13.375 6.4375 C13.58125 7.283125 13.7875 8.12875 14 9 C14.66 9.33 15.32 9.66 16 10 C14.02 10 12.04 10 10 10 C10 9.34 10 8.68 10 8 C8.02 8 6.04 8 4 8 C4.33 6.02 4.66 4.04 5 2 C4.01 2 3.02 2 2 2 C2 3.32 2 4.64 2 6 C1.34 6 0.68 6 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#400810\",transform:\"translate(464,300)\"})),_path1042||(_path1042=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C-0.15503053 4.60851855 -1.36653743 7.10212175 -2.6875 9.625 C-3.04005859 10.31207031 -3.39261719 10.99914062 -3.75585938 11.70703125 C-4.4690129 13.09683318 -5.18500619 14.48518154 -5.90380859 15.87207031 C-7.63470871 19.23209825 -9.31578682 22.6163663 -11 26 C-11.33 25.01 -11.66 24.02 -12 23 C-12.66 23.33 -13.32 23.66 -14 24 C-11.38280364 14.72084925 -6.04206409 7.36539801 0 0 Z \",fill:\"#613E2F\",transform:\"translate(151,526)\"})),_path1043||(_path1043=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.3125 -0.3125 2.3125 -0.3125 5 0 C6.81883009 2.3832946 8 3.95818337 8 7 C8.66 7 9.32 7 10 7 C10.36237263 8.62318979 10.71465157 10.2486358 11.0625 11.875 C11.25972656 12.77992188 11.45695312 13.68484375 11.66015625 14.6171875 C12 17 12 17 11 19 C8.15434466 15.07761021 5.42981087 11.19694605 3 7 C2.443125 6.113125 1.88625 5.22625 1.3125 4.3125 C0 2 0 2 0 0 Z \",fill:\"#58382D\",transform:\"translate(432,518)\"})),_path1044||(_path1044=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.78375 0.04125 1.5675 0.0825 2.375 0.125 C2.045 0.785 1.715 1.445 1.375 2.125 C0.715 2.125 0.055 2.125 -0.625 2.125 C-0.893125 2.929375 -1.16125 3.73375 -1.4375 4.5625 C-1.829375 5.408125 -2.22125 6.25375 -2.625 7.125 C-3.615 7.455 -4.605 7.785 -5.625 8.125 C-5.625 9.445 -5.625 10.765 -5.625 12.125 C-6.285 12.125 -6.945 12.125 -7.625 12.125 C-7.625 12.785 -7.625 13.445 -7.625 14.125 C-8.264375 14.41375 -8.90375 14.7025 -9.5625 15 C-11.77706079 15.95323451 -11.77706079 15.95323451 -12.625 18.125 C-13.285 18.125 -13.945 18.125 -14.625 18.125 C-13.34414054 13.56193818 -11.65483259 10.50634347 -8.625 6.875 C-7.92375 6.02421875 -7.2225 5.1734375 -6.5 4.296875 C-2.91010182 0.13857628 -2.91010182 0.13857628 0 0 Z \",fill:\"#A3735A\",transform:\"translate(141.625,518.875)\"})),_path1045||(_path1045=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.73842251 -0.20413361 10.60539047 -0.27141454 16 2 C16 3.98 16 5.96 16 8 C10.23955788 7.39363767 5.27985631 5.24341721 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#F4726A\",transform:\"translate(372,488)\"})),_path1046||(_path1046=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C1.98 2 3.96 2 6 2 C5.01 1.34 4.02 0.68 3 0 C7.97306516 0.49730652 11.63799813 1.55302334 16 4 C16 5.32 16 6.64 16 8 C8.21406284 6.38911645 0.62571782 4.23456312 -7 2 C-4 0 -4 0 0 0 Z \",fill:\"#A87050\",transform:\"translate(610,420)\"})),_path1047||(_path1047=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.42039575 -0.40652968 9.07015675 0.96006486 14 3 C8.987982 5.78445444 4.35999344 6.12483509 -1.3125 6.0625 C-2.38113281 6.05347656 -3.44976562 6.04445313 -4.55078125 6.03515625 C-5.35902344 6.02355469 -6.16726562 6.01195312 -7 6 C-6.67 5.01 -6.34 4.02 -6 3 C-4.02 2.67 -2.04 2.34 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#F6E1C5\",transform:\"translate(150,320)\"})),_path1048||(_path1048=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C10.89148493 -0.23768041 21.54157055 0.50030079 32.375 1.5 C33.99734545 1.64509572 35.61974119 1.7896302 37.2421875 1.93359375 C41.16206623 2.2826181 45.08119296 2.63914985 49 3 C49 3.33 49 3.66 49 4 C31.55813953 5.51162791 31.55813953 5.51162791 24 4 C23.67 3.67 23.34 3.34 23 3 C20.26675894 2.78678943 17.55004897 2.6228825 14.8125 2.5 C9.7977342 2.26914122 4.94446589 1.94630926 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#A0694F\",transform:\"translate(551,304)\"})),_path1049||(_path1049=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 2.97 0 5.94 0 9 C-5.26371362 9.50130606 -7.9090934 8.31168629 -12 5 C-12 4.34 -12 3.68 -12 3 C-8.31569565 0.78941739 -4.29904769 0 0 0 Z \",fill:\"#263F39\",transform:\"translate(626,183)\"})),_path1050||(_path1050=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.25 -0.25 2.25 -0.25 5 0 C7.1875 1.875 7.1875 1.875 9 4 C9.66 4.66 10.32 5.32 11 6 C10.3709375 6.10957031 9.741875 6.21914062 9.09375 6.33203125 C4.11400313 7.25448436 -0.41376652 8.44396796 -5.10546875 10.3359375 C-8.04002629 11.3645453 -10.91409503 11.67855157 -14 12 C-14 11.34 -14 10.68 -14 10 C-13.34 10 -12.68 10 -12 10 C-12 9.34 -12 8.68 -12 8 C-9.33333333 8 -6.66666667 8 -4 8 C-3.67 7.01 -3.34 6.02 -3 5 C-1 4.375 -1 4.375 1 4 C1.33 3.67 1.66 3.34 2 3 C1.34 2.67 0.68 2.34 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#86A18C\",transform:\"translate(204,170)\"})),_path1051||(_path1051=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3 2.32 3 3.64 3 5 C3.33 5.33 3.66 5.66 4 6 C4.04080783 7.99958364 4.04254356 10.00045254 4 12 C4.66 12 5.32 12 6 12 C6 11.01 6 10.02 6 9 C6.66 9 7.32 9 8 9 C8 9.66 8 10.32 8 11 C8.99 11 9.98 11 11 11 C11.33 13.31 11.66 15.62 12 18 C8.50155614 17.36610765 6.15913124 15.94822306 3.25 13.9375 C2.45078125 13.38964844 1.6515625 12.84179688 0.828125 12.27734375 C0.22484375 11.85582031 -0.3784375 11.43429688 -1 11 C-0.67 10.34 -0.34 9.68 0 9 C0.06950541 7.45976004 0.08452357 5.91665012 0.0625 4.375 C0.05347656 3.55773437 0.04445312 2.74046875 0.03515625 1.8984375 C0.02355469 1.27195313 0.01195312 0.64546875 0 0 Z \",fill:\"#745741\",transform:\"translate(137,139)\"})),_path1052||(_path1052=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.495 0.99 0.495 2 1 C2 1.66 2 2.32 2 3 C2.99 3.33 3.98 3.66 5 4 C6.38576923 5.62332967 7.72641268 7.28724465 9 9 C7 10 7 10 4 10 C2.39919849 14.00200378 3.70720308 17.04556236 5 21 C3.35 20.67 1.7 20.34 0 20 C0 13.4 0 6.8 0 0 Z \",fill:\"#6D8B72\",transform:\"translate(194,139)\"})),_path1053||(_path1053=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.55955444 3.11910889 0.62673502 5.63842127 0 9 C-1.47419064 13.16159079 -3.51353266 16.94147654 -5.625 20.8125 C-5.94984375 21.40998047 -6.2746875 22.00746094 -6.609375 22.62304688 C-7.40379151 24.08337135 -8.20155376 25.54187491 -9 27 C-9.66 27 -10.32 27 -11 27 C-10.52066068 22.1107389 -9.66088009 19.08635157 -7 15 C-6.12854347 13.34230824 -5.27603073 11.67458792 -4.4375 10 C-4.02371094 9.175 -3.60992187 8.35 -3.18359375 7.5 C-2.01604007 5.03388001 -0.9856511 2.54361574 0 0 Z \",fill:\"#6B4736\",transform:\"translate(138,553)\"})),_path1054||(_path1054=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.48570313 0.13714258 8.3608018 2.43801103 12.23046875 6.01171875 C14.74249574 8.83428329 15.83279673 11.42543998 17 15 C4.79777159 8.99442897 4.79777159 8.99442897 2 2 C1.34 1.34 0.68 0.68 0 0 Z \",fill:\"#C7514F\",transform:\"translate(246,455)\"})),_path1055||(_path1055=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.99 0.495 -0.99 0.495 -2 1 C-2.12375 1.78375 -2.2475 2.5675 -2.375 3.375 C-3 6 -3 6 -4.8125 7.8125 C-7 9 -7 9 -11 9 C-11.33 6.03 -11.66 3.06 -12 0 C-7.6835078 -0.76173392 -4.25566547 -1.16063604 0 0 Z \",fill:\"#070504\",transform:\"translate(353,449)\"})),_path1056||(_path1056=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1 3.875 1 3.875 1 5 C-18.305 4.505 -18.305 4.505 -38 4 C-38 3.67 -38 3.34 -38 3 C-33.41443228 2.10336328 -29.0829778 1.88366809 -24.4140625 1.90234375 C-23.71227875 1.9037587 -23.010495 1.90517365 -22.28744507 1.90663147 C-20.06658496 1.9121871 -17.84582916 1.92473108 -15.625 1.9375 C-14.11067855 1.94252074 -12.5963555 1.94708264 -11.08203125 1.95117188 C-7.38798748 1.96214193 -3.69400394 1.97937551 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#734F3A\",transform:\"translate(399,427)\"})),_path1057||(_path1057=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 1.32 1.32 2.64 2 4 C1.34 4 0.68 4 0 4 C0 3.34 0 2.68 0 2 C-2.35171131 2.59861742 -4.6859378 3.26924352 -7 4 C-7.33 4.66 -7.66 5.32 -8 6 C-7.071875 6.2165625 -7.071875 6.2165625 -6.125 6.4375 C-4 7 -4 7 -2 8 C-2 8.66 -2 9.32 -2 10 C-7.94 8.515 -7.94 8.515 -14 7 C-14.33 5.68 -14.66 4.36 -15 3 C-9.8531808 -0.16727335 -5.841744 -0.35050464 0 0 Z \",fill:\"#F4E9B9\",transform:\"translate(466,378)\"})),_path1058||(_path1058=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C12.85714286 1 12.85714286 1 18 2 C18 2.66 18 3.32 18 4 C11.57018367 4.35071725 7.03317758 3.26244159 1 1 C1 4.3 1 7.6 1 11 C1.80824219 11.06058594 2.61648438 11.12117188 3.44921875 11.18359375 C4.51785156 11.26738281 5.58648438 11.35117187 6.6875 11.4375 C7.74324219 11.51871094 8.79898438 11.59992188 9.88671875 11.68359375 C12.65086297 11.96451681 15.28945741 12.40156852 18 13 C18 13.66 18 14.32 18 15 C12.39 14.34 6.78 13.68 1 13 C0.67 13.99 0.34 14.98 0 16 C0 10.72 0 5.44 0 0 Z \",fill:\"#804C33\",transform:\"translate(608,356)\"})),_path1059||(_path1059=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C15.84 0 31.68 0 48 0 C48 0.33 48 0.66 48 1 C40.08 1 32.16 1 24 1 C24 1.99 24 2.98 24 4 C23.01 3.67 22.02 3.34 21 3 C21.33 6.63 21.66 10.26 22 14 C18.56526669 10.56526669 18.76275486 5.68549417 18 1 C12.39 1 6.78 1 1 1 C0.67 1.99 0.34 2.98 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#A8745B\",transform:\"translate(353,350)\"})),_path1060||(_path1060=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.75 -0.125 6.75 -0.125 9 1 C10.70363822 1.22622081 12.41328701 1.40888473 14.125 1.5625 C15.03507813 1.64628906 15.94515625 1.73007812 16.8828125 1.81640625 C17.58148437 1.87699219 18.28015625 1.93757813 19 2 C19 3.32 19 4.64 19 6 C13.06 5.67 7.12 5.34 1 5 C0.67 3.35 0.34 1.7 0 0 Z \",fill:\"#99634A\",transform:\"translate(607,346)\"})),_path1061||(_path1061=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C1.66 2 2.32 2 3 2 C2.34 9.92 1.68 17.84 1 26 C0.67 26 0.34 26 0 26 C0 23.36 0 20.72 0 18 C-0.69867188 18.15597656 -1.39734375 18.31195313 -2.1171875 18.47265625 C-3.48230469 18.76462891 -3.48230469 18.76462891 -4.875 19.0625 C-6.23238281 19.35833984 -6.23238281 19.35833984 -7.6171875 19.66015625 C-10 20 -10 20 -12 19 C-12 18.34 -12 17.68 -12 17 C-9.47524538 15.73762269 -7.68799534 15.90143596 -4.875 15.9375 C-3.26625 15.958125 -1.6575 15.97875 0 16 C0 10.72 0 5.44 0 0 Z \",fill:\"#1C1510\",transform:\"translate(202,290)\"})),_path1062||(_path1062=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.96 0 7.92 0 12 0 C12 0.66 12 1.32 12 2 C10.35 2 8.7 2 7 2 C7 8.27 7 14.54 7 21 C6.01 21 5.02 21 4 21 C4 14.4 4 7.8 4 1 C2.68 0.67 1.36 0.34 0 0 Z \",fill:\"#2C0D07\",transform:\"translate(583,261)\"})),_path1063||(_path1063=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.62528568 -0.20140476 5.86501708 0.14223235 9 2 C9 2.66 9 3.32 9 4 C10.9490625 4.2475 10.9490625 4.2475 12.9375 4.5 C13.66839844 4.5928125 14.39929688 4.685625 15.15234375 4.78125 C16.85541732 5.01959535 16.85541732 5.01959535 18 5 C20 7 20 7 20 10 C20.66 10 21.32 10 22 10 C22.33 10.99 22.66 11.98 23 13 C21.41531323 12.54636829 19.83230076 12.08688548 18.25 11.625 C17.36828125 11.36976563 16.4865625 11.11453125 15.578125 10.8515625 C13.20098407 10.06638565 11.12174031 9.32847704 9 8 C8.67 7.01 8.34 6.02 8 5 C6.00428677 4.32060826 4.00405227 3.65438441 2 3 C1.34 2.01 0.68 1.02 0 0 Z \",fill:\"#674430\",transform:\"translate(196,223)\"})),_path1064||(_path1064=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.99 1.32 1.98 2 3 C3.65 2.67 5.3 2.34 7 2 C7 3.32 7 4.64 7 6 C6.67 6.33 6.34 6.66 6 7 C6.66 7.33 7.32 7.66 8 8 C7.34 9.32 6.68 10.64 6 12 C4.02 12 2.04 12 0 12 C0.66 10.68 1.32 9.36 2 8 C1.236875 8.20625 0.47375 8.4125 -0.3125 8.625 C-3 9 -3 9 -6 7 C-5.34 6.34 -4.68 5.68 -4 5 C-2.68 5 -1.36 5 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#9B7D5C\",transform:\"translate(462,57)\"})),_path1065||(_path1065=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.19250577 1.59625289 3.37202134 4.39641592 4.5 7.6875 C4.9228125 8.90824219 5.345625 10.12898437 5.78125 11.38671875 C6.1834375 12.57910156 6.585625 13.77148438 7 15 C7.4021875 16.05832031 7.804375 17.11664062 8.21875 18.20703125 C9 21 9 21 8 25 C7.01 22.03 6.02 19.06 5 16 C4.01 16.33 3.02 16.66 2 17 C0.14223235 13.86501708 -0.20140476 11.62528568 0 8 C-0.66 8 -1.32 8 -2 8 C-1.33333333 5.33333333 -0.66666667 2.66666667 0 0 Z \",fill:\"#5C3C2F\",transform:\"translate(398,552)\"})),_path1066||(_path1066=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.475 0.495 2.475 0.495 5 1 C5.226875 1.94875 5.45375 2.8975 5.6875 3.875 C6.69083714 7.19323388 6.69083714 7.19323388 9.625 8.375 C10.40875 8.58125 11.1925 8.7875 12 9 C10.68 9.33 9.36 9.66 8 10 C7.67 11.32 7.34 12.64 7 14 C7 13.34 7 12.68 7 12 C5.35 12 3.7 12 2 12 C0.00214565 7.8794254 -0.17835515 4.54805635 0 0 Z \",fill:\"#6A402F\",transform:\"translate(377,437)\"})),_path1067||(_path1067=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.66 2 1.32 2 2 C2.99 2.33 3.98 2.66 5 3 C4.938125 3.886875 4.87625 4.77375 4.8125 5.6875 C5.02141306 9.37829746 5.81870596 11.06364264 8 14 C8.66 14.33 9.32 14.66 10 15 C10 15.66 10 16.32 10 17 C12.97 17.33 15.94 17.66 19 18 C19 18.66 19 19.32 19 20 C9.88311688 19.43506494 9.88311688 19.43506494 6 16 C5.01 16 4.02 16 3 16 C1.02905192 11.07262981 0.8200072 7.21979128 1 2 C0.34 1.67 -0.32 1.34 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#767D51\",transform:\"translate(435,375)\"})),_path1068||(_path1068=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 1.65 1 3.3 1 5 C5.29 5.33 9.58 5.66 14 6 C14 6.66 14 7.32 14 8 C12.96875 8.12375 11.9375 8.2475 10.875 8.375 C7.05230364 8.87728298 7.05230364 8.87728298 3.75 10.125 C-0.42769682 11.45426717 -3.92659629 9.35780124 -8 8 C-8 7.34 -8 6.68 -8 6 C-5.36 6 -2.72 6 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#F75B5B\",transform:\"translate(290,356)\"})),_path1069||(_path1069=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.28132812 0.00902344 2.56265625 0.01804687 3.8828125 0.02734375 C4.87023437 0.03894531 5.85765625 0.05054688 6.875 0.0625 C6.875 1.7125 6.875 3.3625 6.875 5.0625 C1.925 5.0625 -3.025 5.0625 -8.125 5.0625 C-8.455 3.7425 -8.785 2.4225 -9.125 1.0625 C-6.12186252 -0.43906874 -3.33432478 -0.03031204 0 0 Z \",fill:\"#9A9583\",transform:\"translate(131.125,303.9375)\"})),_path1070||(_path1070=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.39859703 1.46966358 5.64963709 3.38037514 8.25 6 C8.95640625 6.70125 9.6628125 7.4025 10.390625 8.125 C12 10 12 10 12 12 C12.66 12 13.32 12 14 12 C14 12.66 14 13.32 14 14 C14.66 14 15.32 14 16 14 C17.62109375 15.6796875 17.62109375 15.6796875 19.4375 17.875 C21.58400884 20.46193722 23.16776562 22.11184374 26 24 C26 24.66 26 25.32 26 26 C26.66 26 27.32 26 28 26 C28 26.66 28 27.32 28 28 C28.66 28 29.32 28 30 28 C29.67 28.99 29.34 29.98 29 31 C24.86361198 26.91292695 20.73374208 22.81942122 16.60986328 18.71972656 C15.20507692 17.32501851 13.79850363 15.93210796 12.39013672 14.54101562 C10.36998287 12.54502969 8.35627344 10.5427381 6.34375 8.5390625 C5.7094104 7.91504547 5.0750708 7.29102844 4.42150879 6.64810181 C2.90923861 5.1362251 1.4490171 3.57260348 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#E5C49B\",transform:\"translate(210,176)\"})),_path1071||(_path1071=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1.67 6.94 1.34 12.88 1 19 C2.32 19.33 3.64 19.66 5 20 C9.82242991 22.46728972 9.82242991 22.46728972 11 26 C5.98491285 24.45941767 1.3852919 22.97068161 -3 20 C-2.34 19.67 -1.68 19.34 -1 19 C-1.01160156 17.79601562 -1.02320313 16.59203125 -1.03515625 15.3515625 C-1.04453434 13.77604321 -1.05363452 12.20052225 -1.0625 10.625 C-1.07087891 9.8309375 -1.07925781 9.036875 -1.08789062 8.21875 C-1.11328125 2.2265625 -1.11328125 2.2265625 0 0 Z \",fill:\"#B88F66\",transform:\"translate(7,141)\"})),_path1072||(_path1072=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.4375 0.6875 2.4375 0.6875 5 2 C5.8125 4.625 5.8125 4.625 6 7 C5.34 7 4.68 7 4 7 C4.61875 7.886875 5.2375 8.77375 5.875 9.6875 C8 13 8 13 9 15.6875 C10.18231499 18.42160342 11.51575183 19.42664283 14 21 C13.67 22.32 13.34 23.64 13 25 C11.49147143 23.90751403 9.99337169 22.80061501 8.5 21.6875 C7.6646875 21.07261719 6.829375 20.45773438 5.96875 19.82421875 C5.3190625 19.22222656 4.669375 18.62023437 4 18 C4 17.01 4 16.02 4 15 C4.66 15 5.32 15 6 15 C4.35 12.03 2.7 9.06 1 6 C1.66 6 2.32 6 3 6 C2.2575 5.071875 2.2575 5.071875 1.5 4.125 C0 2 0 2 0 0 Z \",fill:\"#76715C\",transform:\"translate(115,119)\"})),_path1073||(_path1073=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.33 2.64 0.66 4 1 C4.06058594 2.10859375 4.12117187 3.2171875 4.18359375 4.359375 C4.26802951 5.8229282 4.35267599 7.28646925 4.4375 8.75 C4.47681641 9.47960937 4.51613281 10.20921875 4.55664062 10.9609375 C4.76147098 14.4272973 5.0852002 17.65333026 6 21 C5.34 21 4.68 21 4 21 C3.67 22.32 3.34 23.64 3 25 C2.93941406 24.18015625 2.87882813 23.3603125 2.81640625 22.515625 C2.73261719 21.43796875 2.64882812 20.3603125 2.5625 19.25 C2.48128906 18.18265625 2.40007812 17.1153125 2.31640625 16.015625 C2.05909227 13.56320038 1.68187782 11.36078709 1 9 C0.34 9 -0.32 9 -1 9 C-1 8.34 -1 7.68 -1 7 C-1.66 7 -2.32 7 -3 7 C-3.33 6.01 -3.66 5.02 -4 4 C-2.68 4 -1.36 4 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#754836\",transform:\"translate(149,123)\"})),_path1074||(_path1074=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C8.09568543 1.01196068 15.40648182 3.01683215 23 6 C21.3125 7.5625 21.3125 7.5625 19 9 C15.20009862 8.53151901 11.76175776 7.27246374 8.1875 5.9375 C7.21167969 5.57527344 6.23585938 5.21304687 5.23046875 4.83984375 C4.49441406 4.56269531 3.75835938 4.28554688 3 4 C3 3.34 3 2.68 3 2 C2.01 2 1.02 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#B57C57\",transform:\"translate(532,423)\"})),_path1075||(_path1075=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.37887713 -0.28527105 6.63173355 -0.45018698 10 0 C12.18182341 2.43850852 13 3.7321149 13 7 C9.37 7 5.74 7 2 7 C1.34 4.69 0.68 2.38 0 0 Z \",fill:\"#DD926A\",transform:\"translate(541,396)\"})),_path1076||(_path1076=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.3125 0.0625 2.3125 0.0625 5 1 C7.375 3.75 7.375 3.75 9 7 C8.75 9.875 8.75 9.875 8 12 C3.62140745 11.49477778 1.18348776 8.82172778 -2 6 C-1.34 5.67 -0.68 5.34 0 5 C-0.2784375 4.0409375 -0.2784375 4.0409375 -0.5625 3.0625 C-0.7790625 2.0415625 -0.7790625 2.0415625 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#031B16\",transform:\"translate(511,376)\"})),_path1077||(_path1077=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C0.2575 3.680625 -0.485 4.36125 -1.25 5.0625 C-3.26931613 7.06479943 -4.66212761 8.99423082 -6 11.5 C-9.08329438 17.19792802 -14.05081593 20.97159436 -19 25 C-19.33 24.01 -19.66 23.02 -20 22 C-19.608125 21.62875 -19.21625 21.2575 -18.8125 20.875 C-17.25162274 19.26029939 -15.85179373 17.61566921 -14.4375 15.875 C-12 13 -12 13 -10 12 C-10 11.34 -10 10.68 -10 10 C-9.34 10 -8.68 10 -8 10 C-8 9.34 -8 8.68 -8 8 C-7.34 8 -6.68 8 -6 8 C-6 7.34 -6 6.68 -6 6 C-5.34 6 -4.68 6 -4 6 C-4 5.34 -4 4.68 -4 4 C-3.34 4 -2.68 4 -2 4 C-1.34 2.68 -0.68 1.36 0 0 Z \",fill:\"#748D72\",transform:\"translate(436,94)\"})),_path1078||(_path1078=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 11.55 1 23.1 1 35 C0.67 35 0.34 35 0 35 C-0.33 28.73 -0.66 22.46 -1 16 C-1.33 19.3 -1.66 22.6 -2 26 C-2.33 26 -2.66 26 -3 26 C-3.25071563 8.47776304 -3.25071563 8.47776304 -2 2 C-1.34 1.34 -0.68 0.68 0 0 Z \",fill:\"#E3B28F\",transform:\"translate(281,563)\"})),_path1079||(_path1079=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.96 0 7.92 0 12 0 C11.67 1.65 11.34 3.3 11 5 C12.43576467 7.84213383 12.43576467 7.84213383 14.5 10.5625 C18.06023248 15.49889926 18.06023248 15.49889926 17.71875 18.33984375 C17.4815625 18.88769531 17.244375 19.43554688 17 20 C13.21366599 14.98867558 10.21402964 9.83930805 7.33203125 4.2578125 C6.20141573 1.87441073 6.20141573 1.87441073 4 1 C3.67 1.99 3.34 2.98 3 4 C2.01 3.34 1.02 2.68 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#A67254\",transform:\"translate(437,518)\"})),_path1080||(_path1080=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.74991334 -0.02715383 3.49994945 -0.04646551 5.25 -0.0625 C6.71179688 -0.07990234 6.71179688 -0.07990234 8.203125 -0.09765625 C10.65758678 -0.01195577 12.66168914 0.29293934 15 1 C15 1.66 15 2.32 15 3 C20.94 3.33 26.88 3.66 33 4 C33 4.66 33 5.32 33 6 C32.34 6 31.68 6 31 6 C31 6.66 31 7.32 31 8 C30.34 8 29.68 8 29 8 C29 7.34 29 6.68 29 6 C27.88818359 5.94392578 27.88818359 5.94392578 26.75390625 5.88671875 C17.34587475 5.29943649 8.24963761 3.76130824 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#882F32\",transform:\"translate(209,496)\"})),_path1081||(_path1081=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.27 0.33 12.54 0.66 19 1 C19 1.99 19 2.98 19 4 C12.42599194 4.70165932 6.55317807 5.07233823 0 4 C-3.66830308 3.91004161 -7.33133405 3.94029296 -11 4 C-11 3.34 -11 2.68 -11 2 C-5.555 1.505 -5.555 1.505 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#1D0706\",transform:\"translate(379,484)\"})),_path1082||(_path1082=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 1.65 0 3.3 0 5 C-3.35433109 4.05066101 -6.69246505 3.10251165 -10 2 C-12.05893621 1.77674186 -14.12233653 1.59294241 -16.1875 1.4375 C-17.81751953 1.31181641 -17.81751953 1.31181641 -19.48046875 1.18359375 C-20.31191406 1.12300781 -21.14335938 1.06242187 -22 1 C-22 0.34 -22 -0.32 -22 -1 C-14.38714263 -2.29580551 -7.30389811 -2.99647102 0 0 Z \",fill:\"#874A32\",transform:\"translate(626,407)\"})),_path1083||(_path1083=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.61 0 11.22 0 17 0 C17 0.99 17 1.98 17 3 C16.34 3.66 15.68 4.32 15 5 C14.67 6.010625 14.34 7.02125 14 8.0625 C13 11 13 11 11 12 C10.67 12.99 10.34 13.98 10 15 C9.01 15 8.02 15 7 15 C8.45044271 10.89041233 10.51110752 7.56741255 13 4 C8.38 3.34 3.76 2.68 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#B64932\",transform:\"translate(104,388)\"})),_path1084||(_path1084=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 4.29 1 8.58 1 13 C2.98 12.67 4.96 12.34 7 12 C7.33 13.98 7.66 15.96 8 18 C8.33 18 8.66 18 9 18 C9 20.64 9 23.28 9 26 C7.68 26 6.36 26 5 26 C5 22.04 5 18.08 5 14 C-0.94 14.33 -6.88 14.66 -13 15 C-13 14.34 -13 13.68 -13 13 C-8.71 13 -4.42 13 0 13 C0 8.71 0 4.42 0 0 Z \",fill:\"#903A33\",transform:\"translate(305,372)\"})),_path1085||(_path1085=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C8.05910937 -0.33166955 15.68493899 0.68993419 23.625 2 C25.41744141 2.28617187 25.41744141 2.28617187 27.24609375 2.578125 C30.16524742 3.04518959 33.08306978 3.51927865 36 4 C36 4.66 36 5.32 36 6 C36.66 6.33 37.32 6.66 38 7 C36.47959282 7.05506505 34.95857296 7.09326375 33.4375 7.125 C32.16712891 7.15980469 32.16712891 7.15980469 30.87109375 7.1953125 C28.08677172 7.00590284 25.71224942 6.39210297 23.05444336 5.57470703 C18.79194593 4.38232213 14.4118714 3.67768645 10.0625 2.875 C9.09248047 2.69324219 8.12246094 2.51148438 7.12304688 2.32421875 C4.74923226 1.87985936 2.37489701 1.43853091 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#282D2A\",transform:\"translate(372,277)\"})),_path1086||(_path1086=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C4.37123246 1.23029956 6.74741943 1.41119942 9.125 1.5625 C10.40632813 1.64628906 11.68765625 1.73007813 13.0078125 1.81640625 C14.48894531 1.90728516 14.48894531 1.90728516 16 2 C15.67 2.66 15.34 3.32 15 4 C14.34 4 13.68 4 13 4 C13.33 4.99 13.66 5.98 14 7 C12.68 6.34 11.36 5.68 10 5 C9.01 5.66 8.02 6.32 7 7 C6.01 6.67 5.02 6.34 4 6 C3.67 6.99 3.34 7.98 3 9 C2.34 9 1.68 9 1 9 C1 8.34 1 7.68 1 7 C0.34 7 -0.32 7 -1 7 C-1.66 5.02 -2.32 3.04 -3 1 C-2.01 0.67 -1.02 0.34 0 0 Z \",fill:\"#4B2625\",transform:\"translate(38,230)\"})),_path1087||(_path1087=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.81925583 0.85577292 10.45264768 3.32713851 15 7 C14.67 8.65 14.34 10.3 14 12 C13.34 12 12.68 12 12 12 C10.61767557 10.37373596 9.28062485 8.7074998 8 7 C7.071875 7.309375 7.071875 7.309375 6.125 7.625 C5.42375 7.74875 4.7225 7.8725 4 8 C2 6 2 6 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#2A1D1A\",transform:\"translate(64,154)\"})),_path1088||(_path1088=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.495 0.99 0.495 2 1 C2.59177188 3.42626469 3.07904437 5.79365451 3.5 8.25 C4.28248516 12.71274503 5.25009218 16.80470818 7 21 C7.125 23.8125 7.125 23.8125 7 26 C6.01 26 5.02 26 4 26 C0.74261814 17.1149093 -0.55714963 9.45606739 0 0 Z \",fill:\"#AE826A\",transform:\"translate(378,600)\"})),_path1089||(_path1089=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.28038324 3.84114972 0.44647766 4.84467231 -1.25 8.4375 C-1.68828125 9.38496094 -2.1265625 10.33242188 -2.578125 11.30859375 C-3.87226107 13.75820845 -5.26815714 15.84538374 -7 18 C-7.33 17.01 -7.66 16.02 -8 15 C-10.475 18.465 -10.475 18.465 -13 22 C-13.33 21.34 -13.66 20.68 -14 20 C-10.36653017 13.10453329 -5.55040307 5.55040307 0 0 Z \",fill:\"#4E3128\",transform:\"translate(113,580)\"})),_path1090||(_path1090=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.61 0 11.22 0 17 0 C17 0.33 17 0.66 17 1 C14.36 1.33 11.72 1.66 9 2 C8.938125 2.598125 8.87625 3.19625 8.8125 3.8125 C7.65729457 6.92266847 5.93122813 7.60417708 3 9 C2.01 9 1.02 9 0 9 C0 6.03 0 3.06 0 0 Z \",fill:\"#5B4739\",transform:\"translate(326,519)\"})),_path1091||(_path1091=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.61875 0.7115625 0.61875 0.7115625 1.25 1.4375 C3.182185 3.16266518 4.48192275 3.56584875 7 4 C7 5.98 7 7.96 7 10 C8.32 10.33 9.64 10.66 11 11 C10.67 11.66 10.34 12.32 10 13 C9.13375 12.9175 8.2675 12.835 7.375 12.75 C3.17069639 13.0614299 1.34882667 14.50619291 -2 17 C-6.71428571 20 -6.71428571 20 -9 20 C-9 19.34 -9 18.68 -9 18 C-7.390625 16.59765625 -7.390625 16.59765625 -5.25 15.0625 C-4.55390625 14.55847656 -3.8578125 14.05445313 -3.140625 13.53515625 C-1.70461955 12.50532023 -0.256361 11.49237409 1.203125 10.49609375 C3.2817999 9.03246416 3.2817999 9.03246416 4 6 C3.34 6 2.68 6 2 6 C0 3 0 3 0 0 Z \",fill:\"#382621\",transform:\"translate(9,496)\"})),_path1092||(_path1092=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.62 0 9.24 0 14 0 C13.67 1.65 13.34 3.3 13 5 C8.05 5.33 3.1 5.66 -2 6 C-1.34 4.02 -0.68 2.04 0 0 Z \",fill:\"#2B0F14\",transform:\"translate(435,463)\"})),_path1093||(_path1093=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.59 0.33 15.18 0.66 23 1 C21 4 21 4 19.02880859 4.43237305 C17.8505249 4.47164917 17.8505249 4.47164917 16.6484375 4.51171875 C15.79765625 4.54716797 14.946875 4.58261719 14.0703125 4.61914062 C13.18085937 4.64169922 12.29140625 4.66425781 11.375 4.6875 C10.4778125 4.72166016 9.580625 4.75582031 8.65625 4.79101562 C6.43762462 4.87362402 4.2194006 4.94272719 2 5 C1.67 5.99 1.34 6.98 1 8 C0 6 0 6 0 0 Z \",fill:\"#111F18\",transform:\"translate(558,387)\"})),_path1094||(_path1094=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.95247818 0.2647428 3.90478628 0.53092904 5.85546875 0.80859375 C8.69298842 1.06185143 11.23338807 0.62248768 14 0 C13.67 1.98 13.34 3.96 13 6 C8.38 6 3.76 6 -1 6 C-1 1 -1 1 0 0 Z \",fill:\"#03412D\",transform:\"translate(477,382)\"})),_path1095||(_path1095=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 1.32 0.66 2.64 1 4 C0.34 4 -0.32 4 -1 4 C-1.1546875 5.175625 -1.1546875 5.175625 -1.3125 6.375 C-2 9 -2 9 -5 11 C-5 11.99 -5 12.98 -5 14 C-7.97 13.505 -7.97 13.505 -11 13 C-11.33 12.01 -11.66 11.02 -12 10 C-10.68 10 -9.36 10 -8 10 C-8 8.02 -8 6.04 -8 4 C-6.68 4 -5.36 4 -4 4 C-4 3.34 -4 2.68 -4 2 C-4.66 1.67 -5.32 1.34 -6 1 C-4.02 0.67 -2.04 0.34 0 0 Z \",fill:\"#EBECC0\",transform:\"translate(113,358)\"})),_path1096||(_path1096=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.99 0 1.98 0 3 C0.66 3 1.32 3 2 3 C2 2.34 2 1.68 2 1 C2.99 1 3.98 1 5 1 C5 1.66 5 2.32 5 3 C6.98 2.67 8.96 2.34 11 2 C10.67 2.99 10.34 3.98 10 5 C8.89591797 4.94779297 8.89591797 4.94779297 7.76953125 4.89453125 C0.41607312 4.67398972 0.41607312 4.67398972 -6 8 C-8.8125 8.6875 -8.8125 8.6875 -11 9 C-11 8.34 -11 7.68 -11 7 C-10.34 7 -9.68 7 -9 7 C-8.7525 6.401875 -8.505 5.80375 -8.25 5.1875 C-6.17157585 1.55025774 -4.21428716 0 0 0 Z \",fill:\"#5A2217\",transform:\"translate(129,361)\"})),_path1097||(_path1097=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-8.58 2 -17.16 2 -26 2 C-19.03785107 -4.96214893 -8.7694634 -1.83585028 0 0 Z \",fill:\"#8C4949\",transform:\"translate(243,362)\"})),_path1098||(_path1098=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0 3.96 0 6 0 C5.67 4.29 5.34 8.58 5 13 C4.34 13 3.68 13 3 13 C3 14.65 3 16.3 3 18 C2.67 16.68 2.34 15.36 2 14 C1.34 14 0.68 14 0 14 C0 9.38 0 4.76 0 0 Z \",fill:\"#40854A\",transform:\"translate(69,271)\"})),_path1099||(_path1099=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4.33 1.32 4.66 2.64 5 4 C6.98 4 8.96 4 11 4 C11.33 3.34 11.66 2.68 12 2 C12 2.66 12 3.32 12 4 C12.99 3.67 13.98 3.34 15 3 C17.1875 3.4375 17.1875 3.4375 19 4 C19 3.34 19 2.68 19 2 C19.66 2 20.32 2 21 2 C21.33 3.32 21.66 4.64 22 6 C18.7 6 15.4 6 12 6 C11.67 6.99 11.34 7.98 11 9 C10.67 8.01 10.34 7.02 10 6 C9.34 6.66 8.68 7.32 8 8 C8 7.34 8 6.68 8 6 C3.71 6 -0.58 6 -5 6 C-4.67 5.01 -4.34 4.02 -4 3 C-1.36 3.66 1.28 4.32 4 5 C3.67 3.68 3.34 2.36 3 1 C2.34 1 1.68 1 1 1 C0.67 1.66 0.34 2.32 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#5F431F\",transform:\"translate(148,263)\"})),_path1100||(_path1100=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.59167969 0.33773437 1.18335938 0.67546875 1.79296875 1.0234375 C5.78450953 3.27641158 9.66558593 5.4619821 14 7 C13.67 5.35 13.34 3.7 13 2 C13.66 2 14.32 2 15 2 C15 3.32 15 4.64 15 6 C16.32 6.33 17.64 6.66 19 7 C16.5424552 7.66969591 14.08405076 8.3358768 11.625 9 C10.92632812 9.19078125 10.22765625 9.3815625 9.5078125 9.578125 C4.2265625 11 4.2265625 11 2 11 C2 11.66 2 12.32 2 13 C0.68 12.67 -0.64 12.34 -2 12 C-2 11.34 -2 10.68 -2 10 C0.64 9.01 3.28 8.02 6 7 C3.69 5.35 1.38 3.7 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#B9A07D\",transform:\"translate(227,214)\"})),_path1101||(_path1101=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1.34 2.32 0.68 3.64 0 5 C-0.99 5 -1.98 5 -3 5 C-3 5.66 -3 6.32 -3 7 C-4.55575978 7.84584998 -6.1199612 8.67618399 -7.6875 9.5 C-8.55761719 9.9640625 -9.42773438 10.428125 -10.32421875 10.90625 C-13.11788829 12.04818792 -15.01629113 12.21504208 -18 12 C-16.83848784 8.51546351 -16.35660804 8.34647315 -13.25390625 6.703125 C-12.49916016 6.30222656 -11.74441406 5.90132812 -10.96679688 5.48828125 C-9.77666992 4.87533203 -9.77666992 4.87533203 -8.5625 4.25 C-7.77294922 3.82589844 -6.98339844 3.40179688 -6.16992188 2.96484375 C-1.78796233 0.67113261 -1.78796233 0.67113261 0 0 Z \",fill:\"#443A33\",transform:\"translate(478,160)\"})),_path1102||(_path1102=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-5.47205322 4.01871112 -10.61005581 7.63849889 -17 10 C-17 10.99 -17 11.98 -17 13 C-18.98 13.33 -20.96 13.66 -23 14 C-23.33 13.34 -23.66 12.68 -24 12 C-20.95901398 8.60643589 -17.9854374 6.80397677 -13.875 4.875 C-9.60132264 2.91625296 -9.60132264 2.91625296 -6 0 C-2.44444444 -1.22222222 -2.44444444 -1.22222222 0 0 Z \",fill:\"#39342E\",transform:\"translate(556,119)\"})),_path1103||(_path1103=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1 3 1 3 0.13549805 5.09716797 C-0.31784912 5.88752441 -0.77119629 6.67788086 -1.23828125 7.4921875 C-1.72876953 8.36230469 -2.21925781 9.23242188 -2.72460938 10.12890625 C-3.51061523 11.48822266 -3.51061523 11.48822266 -4.3125 12.875 C-5.33197676 14.66261082 -6.34898566 16.45163178 -7.36328125 18.2421875 C-7.82001221 19.0347998 -8.27674316 19.82741211 -8.74731445 20.64404297 C-10.0228394 23.04295463 -11.03735234 25.46126652 -12 28 C-12.33 27.01 -12.66 26.02 -13 25 C-13.66 25.33 -14.32 25.66 -15 26 C-14.33333333 24.33333333 -13.66666667 22.66666667 -13 21 C-12.690625 20.13375 -12.38125 19.2675 -12.0625 18.375 C-11 16 -11 16 -9.58984375 14.62890625 C-7.7597124 12.75380853 -6.71826607 10.87798648 -5.5 8.5625 C-3.87750231 5.48911496 -2.14514756 2.7375575 0 0 Z \",fill:\"#744B37\",transform:\"translate(168,525)\"})),_path1104||(_path1104=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0 3.96 0 6 0 C6.33 0.99 6.66 1.98 7 3 C8.0828125 3.185625 8.0828125 3.185625 9.1875 3.375 C11.95721894 3.9904931 14.3970354 4.88444374 17 6 C17 7.65 17 9.3 17 11 C11.16403878 9.46422073 5.8387456 6.58121849 1 3 C0.67 2.01 0.34 1.02 0 0 Z \",fill:\"#533528\",transform:\"translate(609,470)\"})),_path1105||(_path1105=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0.33 5.28 0.66 8 1 C8 1.66 8 2.32 8 3 C8.71542969 3.26554687 9.43085937 3.53109375 10.16796875 3.8046875 C13.06904319 5.02914099 15.63015864 6.47983063 18.3125 8.125 C19.19550781 8.66382813 20.07851563 9.20265625 20.98828125 9.7578125 C21.98408203 10.37269531 21.98408203 10.37269531 23 11 C22.01 11.66 21.02 12.32 20 13 C15.23257628 11.78909131 11.21566388 8.66277451 7.1875 5.9375 C6.49462891 5.47794922 5.80175781 5.01839844 5.08789062 4.54492188 C3.37141668 3.39327778 1.68286015 2.20022856 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#523428\",transform:\"translate(554,454)\"})),_path1106||(_path1106=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.66 1.32 1.32 2 2 C1.56274274 3.88356975 1.11189302 5.7653561 0.58203125 7.625 C-0.41417784 11.69006796 -0.67573377 15.83573889 -1 20 C-0.34 20.33 0.32 20.66 1 21 C0.01 21 -0.98 21 -2 21 C-2 17.7 -2 14.4 -2 11 C-2.66 11 -3.32 11 -4 11 C-4 11.66 -4 12.32 -4 13 C-6.64 13 -9.28 13 -12 13 C-12 12.34 -12 11.68 -12 11 C-10.02 11 -8.04 11 -6 11 C-6 9.68 -6 8.36 -6 7 C-5.34 7 -4.68 7 -4 7 C-3.67 5.68 -3.34 4.36 -3 3 C-2.01 3 -1.02 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#74090B\",transform:\"translate(64,383)\"})),_path1107||(_path1107=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.27 0 12.54 0 19 0 C19.33 0.99 19.66 1.98 20 3 C19.67 3.66 19.34 4.32 19 5 C20.175625 4.938125 21.35125 4.87625 22.5625 4.8125 C27.03960301 4.78855827 30.0241888 6.0120944 34 8 C33.67 8.99 33.34 9.98 33 11 C32.195625 10.525625 31.39125 10.05125 30.5625 9.5625 C26.33060071 7.70640382 22.56827922 7.29440022 18 7 C17.67 5.35 17.34 3.7 17 2 C11.39 1.67 5.78 1.34 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#D7856F\",transform:\"translate(242,341)\"})),_path1108||(_path1108=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C9.41002278 0.96355353 9.41002278 0.96355353 14 2 C14.28875 3.216875 14.5775 4.43375 14.875 5.6875 C15.67835792 8.91814648 16.66265409 11.94320935 18 15 C17.01 15.66 16.02 16.32 15 17 C14.773125 16.360625 14.54625 15.72125 14.3125 15.0625 C13.14749104 12.72806339 13.14749104 12.72806339 10.375 12.25 C9.59125 12.1675 8.8075 12.085 8 12 C7.67 12.66 7.34 13.32 7 14 C7 12.68 7 11.36 7 10 C7.66 10 8.32 10 9 10 C9 9.34 9 8.68 9 8 C10.32 8 11.64 8 13 8 C13 7.34 13 6.68 13 6 C12.01 5.67 11.02 5.34 10 5 C10.99 5 11.98 5 13 5 C13 4.34 13 3.68 13 3 C12.22914062 2.95101563 11.45828125 2.90203125 10.6640625 2.8515625 C9.15972656 2.73941406 9.15972656 2.73941406 7.625 2.625 C6.12839844 2.52058594 6.12839844 2.52058594 4.6015625 2.4140625 C2 2 2 2 0 0 Z \",fill:\"#353A2E\",transform:\"translate(59,330)\"})),_path1109||(_path1109=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.95 0 9.9 0 15 0 C13.83530742 4.65877032 13.02182676 5.09946979 9.1875 7.6875 C8.31480469 8.28949219 7.44210938 8.89148438 6.54296875 9.51171875 C4.27796798 10.83731828 2.56073403 11.55231923 0 12 C0 11.34 0 10.68 0 10 C1.3303125 9.38125 1.3303125 9.38125 2.6875 8.75 C5.81312366 7.09872712 8.31905614 5.28668741 11 3 C10.34 2.67 9.68 2.34 9 2 C9 2.66 9 3.32 9 4 C6.69 4 4.38 4 2 4 C1.34 2.68 0.68 1.36 0 0 Z \",fill:\"#133440\",transform:\"translate(87,336)\"})),_path1110||(_path1110=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 1.98 0 3.96 0 6 C-7.59 6 -15.18 6 -23 6 C-23 5.67 -23 5.34 -23 5 C-19.37 5 -15.74 5 -12 5 C-12 3.68 -12 2.36 -12 1 C-10.18755015 0.83278881 -8.37503867 0.66624559 -6.5625 0.5 C-5.04849609 0.36078125 -5.04849609 0.36078125 -3.50390625 0.21875 C-1 0 -1 0 0 0 Z \",fill:\"#AE8666\",transform:\"translate(348,311)\"})),_path1111||(_path1111=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.875 0.25 1.875 0.25 4 1 C5.72101535 3.58152302 6 4.84918025 6 8 C8.97 8.33 11.94 8.66 15 9 C14.01 9.33 13.02 9.66 12 10 C12 13.63 12 17.26 12 21 C11.67 21 11.34 21 11 21 C10.814375 19.741875 10.62875 18.48375 10.4375 17.1875 C9.97700848 14.96076011 9.97700848 14.96076011 9 13 C5.56016568 11.19234122 5.56016568 11.19234122 2 10 C0.5625 7.8125 0.5625 7.8125 0 6 C0.66 5.67 1.32 5.34 2 5 C1.34 3.35 0.68 1.7 0 0 Z \",fill:\"#DBDFAC\",transform:\"translate(476,292)\"})),_path1112||(_path1112=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.86515862 -0.26404456 13.25846717 0.74158054 20 2 C20 2.99 20 3.98 20 5 C13.2314676 5.10152799 6.69675136 5.03026944 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#31C870\",transform:\"translate(396,300)\"})),_path1113||(_path1113=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.75032844 0.14183696 3.50025534 0.28863429 5.25 0.4375 C6.71179688 0.55931641 6.71179688 0.55931641 8.203125 0.68359375 C11 1 11 1 13.05078125 1.53515625 C15.40738982 2.09715308 17.51816867 2.05964453 19.9375 2 C23.44041119 1.95860666 26.59059233 2.09082462 30 3 C30 3.33 30 3.66 30 4 C29.10796875 4.04898437 28.2159375 4.09796875 27.296875 4.1484375 C25.54117187 4.26058594 25.54117187 4.26058594 23.75 4.375 C22.00976562 4.47941406 22.00976562 4.47941406 20.234375 4.5859375 C17.08277407 4.77176818 17.08277407 4.77176818 15 6.1875 C11.70508478 7.52605931 9.41559358 5.9545493 6.25 4.625 C5.07953125 4.14289063 3.9090625 3.66078125 2.703125 3.1640625 C1.81109375 2.77992188 0.9190625 2.39578125 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#C98565\",transform:\"translate(376,290)\"})),_path1114||(_path1114=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.95 0 9.9 0 15 0 C15 0.99 15 1.98 15 3 C11.7 3 8.4 3 5 3 C5 4.32 5 5.64 5 7 C5.66 7 6.32 7 7 7 C7 7.66 7 8.32 7 9 C5.02 9.33 3.04 9.66 1 10 C0.67 6.7 0.34 3.4 0 0 Z \",fill:\"#EDE55F\",transform:\"translate(141,269)\"})),_path1115||(_path1115=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C1.99 2.33 2.98 2.66 4 3 C3.62875 3.515625 3.2575 4.03125 2.875 4.5625 C1.5968581 8.12303815 2.83171869 10.49515606 4 14 C4 14.66 4 15.32 4 16 C3.34 16 2.68 16 2 16 C2 15.34 2 14.68 2 14 C0.35 13.67 -1.3 13.34 -3 13 C-3 12.34 -3 11.68 -3 11 C-3.66 11 -4.32 11 -5 11 C-5 9.68 -5 8.36 -5 7 C-3.02 7.99 -3.02 7.99 -1 9 C-1.33 6.36 -1.66 3.72 -2 1 C-1.34 0.67 -0.68 0.34 0 0 Z M-5 13 C-3 14 -3 14 -3 14 Z \",fill:\"#804D38\",transform:\"translate(150,249)\"})),_path1116||(_path1116=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.57104439 1.87949705 5.54744301 3.17053157 7 7 C6.01 7 5.02 7 4 7 C4 6.34 4 5.68 4 5 C3.34 5 2.68 5 2 5 C2 8.63 2 12.26 2 16 C2.66 16 3.32 16 4 16 C4.33 15.34 4.66 14.68 5 14 C5 15.65 5 17.3 5 19 C2.5 17.75 2.5 17.75 0 16 C0 14.68 0 13.36 0 12 C-0.61875 11.690625 -1.2375 11.38125 -1.875 11.0625 C-3.25 10.375 -4.625 9.6875 -6 9 C-6 8.34 -6 7.68 -6 7 C-3.03 7.495 -3.03 7.495 0 8 C0 5.36 0 2.72 0 0 Z \",fill:\"#755541\",transform:\"translate(110,27)\"})),_path1117||(_path1117=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C2.32 1.34 3.64 0.68 5 0 C4.67 0.99 4.34 1.98 4 3 C3.34 3 2.68 3 2 3 C1.89429687 3.58265625 1.78859375 4.1653125 1.6796875 4.765625 C0.90313755 7.31842139 -0.14301767 8.73366236 -1.875 10.75 C-2.38804688 11.36359375 -2.90109375 11.9771875 -3.4296875 12.609375 C-5 14 -5 14 -8 14 C-7.42017397 9.21643523 -5.56809656 6.00320934 -3 2 C-2.01 1.34 -1.02 0.68 0 0 Z \",fill:\"#7D5641\",transform:\"translate(64,603)\"})),_path1118||(_path1118=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 1.32 0.66 2.64 1 4 C3.33075929 3.04134491 3.33075929 3.04134491 5 0 C4.29771949 4.49459524 2.99912387 8.90610041 1 13 C0.01 13.495 0.01 13.495 -1 14 C-2.13350534 16.01669827 -2.13350534 16.01669827 -3 18 C-3.99 18 -4.98 18 -6 18 C-4.41039668 11.76559832 -2.72399099 5.83712355 0 0 Z \",fill:\"#5C3C2E\",transform:\"translate(126,576)\"})),_path1119||(_path1119=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C0.38511719 3.67546875 -0.22976562 4.3509375 -0.86328125 5.046875 C-1.67152344 5.93890625 -2.47976562 6.8309375 -3.3125 7.75 C-4.11300781 8.63171875 -4.91351563 9.5134375 -5.73828125 10.421875 C-7.60916911 12.55449328 -9.34084286 14.70187943 -11 17 C-11.99 16.67 -12.98 16.34 -14 16 C-10.57096513 9.53758812 -6.92144349 3.05796533 0 0 Z \",fill:\"#A47658\",transform:\"translate(118,547)\"})),_path1120||(_path1120=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.66666667 0.66666667 5.33333333 1.33333333 8 2 C8 2.66 8 3.32 8 4 C8.56589844 4.13277344 9.13179687 4.26554687 9.71484375 4.40234375 C10.44832031 4.57894531 11.18179688 4.75554687 11.9375 4.9375 C13.03384766 5.19853516 13.03384766 5.19853516 14.15234375 5.46484375 C16 6 16 6 17 7 C17.04063832 8.66617115 17.042721 10.33388095 17 12 C15.68 12 14.36 12 13 12 C12.34 11.01 11.68 10.02 11 9 C10.01 8.67 9.02 8.34 8 8 C8 7.34 8 6.68 8 6 C7.4225 5.896875 6.845 5.79375 6.25 5.6875 C3.64338842 4.89103535 2.0264689 3.80934723 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#402A22\",transform:\"translate(609,485)\"})),_path1121||(_path1121=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C2.98 2 4.96 2 7 2 C7 2.66 7 3.32 7 4 C0.39082337 7.05598626 -6.78998632 6.85600365 -13.75 5 C-14.86375 4.505 -14.86375 4.505 -16 4 C-16 3.34 -16 2.68 -16 2 C-9.565 1.505 -9.565 1.505 -3 1 C-3 2.32 -3 3.64 -3 5 C-2.34 4.67 -1.68 4.34 -1 4 C-0.34786708 1.97536745 -0.34786708 1.97536745 0 0 Z \",fill:\"#F2B795\",transform:\"translate(389,478)\"})),_path1122||(_path1122=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C2.25792211 5.85688537 2.18376571 11.66508076 2.1875 17.625 C2.19974609 18.66140625 2.21199219 19.6978125 2.22460938 20.765625 C2.22654297 21.76335937 2.22847656 22.76109375 2.23046875 23.7890625 C2.23457764 24.69350098 2.23868652 25.59793945 2.24291992 26.52978516 C1.98703045 29.13188538 1.3168975 30.76287266 0 33 C-3.23472138 23.29583585 -0.80173671 10.09329253 0 0 Z \",fill:\"#532E1A\",transform:\"translate(148,407)\"})),_path1123||(_path1123=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0 4.62 0 7 0 C7 0.33 7 0.66 7 1 C5.02 1 3.04 1 1 1 C2.11126659 2.33901792 2.11126659 2.33901792 4.94140625 2.09765625 C6.13636719 2.08605469 7.33132813 2.07445312 8.5625 2.0625 C9.76003906 2.05347656 10.95757812 2.04445313 12.19140625 2.03515625 C13.58166016 2.01775391 13.58166016 2.01775391 15 2 C15 2.66 15 3.32 15 4 C11.43298019 5.57597421 8.25259033 6.41192249 4.375 6.8125 C2.96347656 6.97685547 2.96347656 6.97685547 1.5234375 7.14453125 C-1 7 -1 7 -2.8359375 5.51171875 C-3.22007812 5.01285156 -3.60421875 4.51398438 -4 4 C-2.68 3.67 -1.36 3.34 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#79614F\",transform:\"translate(402,414)\"})),_path1124||(_path1124=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.44730469 0.40992188 0.89460937 0.81984375 1.35546875 1.2421875 C2.26232422 2.05042969 2.26232422 2.05042969 3.1875 2.875 C3.77917969 3.40867187 4.37085938 3.94234375 4.98046875 4.4921875 C9.37796101 7.77542157 12.73658907 8.22077025 18.125 7.625 C24.11199781 7.04473225 29.98922694 6.89158926 36 7 C31.74742387 11.25257613 25.82352506 10.25785205 20.1875 10.3125 C19.20201172 10.34150391 18.21652344 10.37050781 17.20117188 10.40039062 C11.11053498 10.4535661 7.63729875 10.05295416 3 6 C0 2.6 0 2.6 0 0 Z \",fill:\"#673237\",transform:\"translate(227,386)\"})),_path1125||(_path1125=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 3 2 3 2 5 C2.66 5 3.32 5 4 5 C4 4.34 4 3.68 4 3 C14.03411669 2.82292735 23.99112106 3.37722531 34 4 C34 4.33 34 4.66 34 5 C22.34041229 6.23195644 10.70920439 6.10247722 -1 6 C-0.67 4.02 -0.34 2.04 0 0 Z \",fill:\"#C88667\",transform:\"translate(376,359)\"})),_path1126||(_path1126=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.10544013 0.28232721 4.20933589 0.5761898 6.3125 0.875 C7.48425781 1.03742188 8.65601563 1.19984375 9.86328125 1.3671875 C13 2 13 2 16 4 C16.1875 6.625 16.1875 6.625 16 9 C15.34 7.68 14.68 6.36 14 5 C13.34 5 12.68 5 12 5 C12.32484375 5.83144531 12.32484375 5.83144531 12.65625 6.6796875 C12.9346875 7.40414063 13.213125 8.12859375 13.5 8.875 C13.7784375 9.59429687 14.056875 10.31359375 14.34375 11.0546875 C15 13 15 13 15 15 C10.71 15 6.42 15 2 15 C5.76687864 13.11656068 7.02958963 12.77942165 11 13 C10.85950482 11.52031676 10.71245174 10.04125484 10.5625 8.5625 C10.48128906 7.73878906 10.40007812 6.91507812 10.31640625 6.06640625 C10.21069185 4.01337975 10.21069185 4.01337975 9 3 C7.48530552 2.76807135 5.96245438 2.58784762 4.4375 2.4375 C3.61121094 2.35371094 2.78492188 2.26992188 1.93359375 2.18359375 C1.29550781 2.12300781 0.65742188 2.06242187 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#4E1617\",transform:\"translate(259,347)\"})),_path1127||(_path1127=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.06316683 -0.15639125 9.50398438 0.37233929 14.4375 1.5 C15.67371094 1.7784375 16.90992188 2.056875 18.18359375 2.34375 C19.57771484 2.66859375 19.57771484 2.66859375 21 3 C21 3.66 21 4.32 21 5 C17.87501937 5.02895976 14.7500731 5.04678483 11.625 5.0625 C10.73554687 5.07087891 9.84609375 5.07925781 8.9296875 5.08789062 C7.65351562 5.09272461 7.65351562 5.09272461 6.3515625 5.09765625 C5.17327881 5.10551147 5.17327881 5.10551147 3.97119141 5.11352539 C2 5 2 5 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#A36D53\",transform:\"translate(605,339)\"})),_path1128||(_path1128=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0 5.28 0 8 0 C7.67 1.32 7.34 2.64 7 4 C7.99 4 8.98 4 10 4 C10 3.34 10 2.68 10 2 C11.32 2.66 12.64 3.32 14 4 C14 4.66 14 5.32 14 6 C14.99 6 15.98 6 17 6 C17 6.66 17 7.32 17 8 C15.35 8.66 13.7 9.32 12 10 C11.67 9.01 11.34 8.02 11 7 C9.35 6.67 7.7 6.34 6 6 C6 6.66 6 7.32 6 8 C5.34 8 4.68 8 4 8 C4 7.34 4 6.68 4 6 C3.34 6 2.68 6 2 6 C2 4.68 2 3.36 2 2 C1.34 2 0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#EEE5C8\",transform:\"translate(480,316)\"})),_path1129||(_path1129=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.02802734 0.00322266 2.05605469 0.00644531 3.11523438 0.00976562 C4.72301758 0.02233398 4.72301758 0.02233398 6.36328125 0.03515625 C7.44673828 0.03966797 8.53019531 0.04417969 9.64648438 0.04882812 C12.3229721 0.06061882 14.99934902 0.07707562 17.67578125 0.09765625 C16.68578125 1.58265625 16.68578125 1.58265625 15.67578125 3.09765625 C13.33740234 3.43823242 13.33740234 3.43823242 10.44921875 3.390625 C9.41796875 3.38095703 8.38671875 3.37128906 7.32421875 3.36132812 C6.24398438 3.33619141 5.16375 3.31105469 4.05078125 3.28515625 C2.9628125 3.27162109 1.87484375 3.25808594 0.75390625 3.24414062 C-1.93929284 3.20870379 -4.63151249 3.15929956 -7.32421875 3.09765625 C-7.65421875 2.43765625 -7.98421875 1.77765625 -8.32421875 1.09765625 C-5.26502487 0.07792496 -3.2000385 -0.01767977 0 0 Z \",fill:\"#1F1F21\",transform:\"translate(280.32421875,317.90234375)\"})),_path1130||(_path1130=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 2.31 1 4.62 1 7 C8.59 7 16.18 7 24 7 C24 7.66 24 8.32 24 9 C13.44 9 2.88 9 -8 9 C-8 8.34 -8 7.68 -8 7 C-5.36 7 -2.72 7 0 7 C0 4.69 0 2.38 0 0 Z \",fill:\"#D88F70\",transform:\"translate(283,277)\"})),_path1131||(_path1131=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C1.40546697 12.66970387 1.40546697 12.66970387 -2 18 C-2.66 17.67 -3.32 17.34 -4 17 C-4 12.38 -4 7.76 -4 3 C-2.68 3 -1.36 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#64421F\",transform:\"translate(595,260)\"})),_path1132||(_path1132=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C-9.26473569 10.56703616 -21.02084386 19.34576712 -33 28 C-33.66 27.67 -34.32 27.34 -35 27 C-32.71287089 25.16074213 -30.42071465 23.32848506 -28.125 21.5 C-27.47402344 20.97535156 -26.82304688 20.45070313 -26.15234375 19.91015625 C-25.21455078 19.16572266 -25.21455078 19.16572266 -24.2578125 18.40625 C-23.6817627 17.94541016 -23.10571289 17.48457031 -22.51220703 17.00976562 C-21 16 -21 16 -19 16 C-19 15.34 -19 14.68 -19 14 C-16.80243449 12.29309526 -14.60441885 10.69568564 -12.3125 9.125 C-11.05764575 8.25396832 -9.80372357 7.38159217 -8.55078125 6.5078125 C-7.94830566 6.08790039 -7.34583008 5.66798828 -6.72509766 5.23535156 C-4.41079836 3.57806959 -2.19824819 1.80735511 0 0 Z \",fill:\"#918461\",transform:\"translate(563,40)\"})),_path1133||(_path1133=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.375 0.25 2.375 0.25 5 1 C6.3125 3.0625 6.3125 3.0625 7 5 C7.66 5 8.32 5 9 5 C9 5.66 9 6.32 9 7 C9.639375 7.268125 10.27875 7.53625 10.9375 7.8125 C13 9 13 9 14 12 C14.66 12 15.32 12 16 12 C16 13.32 16 14.64 16 16 C14 16 14 16 11.9375 14 C11.50953125 13.54882812 11.0815625 13.09765625 10.640625 12.6328125 C7.85647862 9.86192396 4.80154135 7.38987317 1.79296875 4.8671875 C0 3 0 3 0 0 Z \",fill:\"#3B251E\",transform:\"translate(610,564)\"})),_path1134||(_path1134=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-2.62214328 3.50519387 -5.24744208 5.00431319 -7.875 6.5 C-8.62136719 6.92925781 -9.36773437 7.35851562 -10.13671875 7.80078125 C-10.85214844 8.20683594 -11.56757813 8.61289062 -12.3046875 9.03125 C-12.96452637 9.40830078 -13.62436523 9.78535156 -14.30419922 10.17382812 C-16 11 -16 11 -18 11 C-18 9.35 -18 7.7 -18 6 C-15.94326547 4.98819502 -13.87934652 3.99098523 -11.8125 3 C-10.66394531 2.443125 -9.51539063 1.88625 -8.33203125 1.3125 C-5.20909481 0.08236325 -3.29713518 -0.29804612 0 0 Z \",fill:\"#3C2821\",transform:\"translate(18,468)\"})),_path1135||(_path1135=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.134375 0.020625 2.26875 0.04125 3.4375 0.0625 C3.7675 2.3725 4.0975 4.6825 4.4375 7.0625 C-1.1875 10.0625 -1.1875 10.0625 -4.5625 10.0625 C-4.58939216 8.58343108 -4.60884621 7.10422517 -4.625 5.625 C-4.63660156 4.80128906 -4.64820313 3.97757812 -4.66015625 3.12890625 C-4.49001835 -0.47121162 -3.73687179 0.06555915 0 0 Z \",fill:\"#B7A896\",transform:\"translate(11.5625,384.9375)\"})),_path1136||(_path1136=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0 3.96 0 6 0 C1.84137628 4.72755596 -4.47041236 6.82554568 -10.625 7.25 C-11.40875 7.1675 -12.1925 7.085 -13 7 C-13 5.35 -13 3.7 -13 2 C-11.20909747 1.80533668 -9.41723495 1.61948787 -7.625 1.4375 C-6.12839844 1.28087891 -6.12839844 1.28087891 -4.6015625 1.12109375 C-2 1 -2 1 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#B3C3C4\",transform:\"translate(147,384)\"})),_path1137||(_path1137=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C4.67 0.66 4.34 1.32 4 2 C6.97 2.495 6.97 2.495 10 3 C10 3.66 10 4.32 10 5 C7.69 5.33 5.38 5.66 3 6 C2.34 7.65 1.68 9.3 1 11 C0.34 11 -0.32 11 -1 11 C-1 11.66 -1 12.32 -1 13 C-1.99 13 -2.98 13 -4 13 C-4 11.35 -4 9.7 -4 8 C-3.34 7.67 -2.68 7.34 -2 7 C-2 5.35 -2 3.7 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#AF8475\",transform:\"translate(104,346)\"})),_path1138||(_path1138=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.96 0 7.92 0 12 0 C12 0.33 12 0.66 12 1 C9.69 1 7.38 1 5 1 C4.67 6.94 4.34 12.88 4 19 C3.01 19 2.02 19 1 19 C0.67 12.73 0.34 6.46 0 0 Z \",fill:\"#FBBC57\",transform:\"translate(100,269)\"})),_path1139||(_path1139=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3 4.63 3 8.26 3 12 C5.97 12.33 8.94 12.66 12 13 C11.67 11.96875 11.34 10.9375 11 9.875 C10.0284808 6.51573291 9.82883229 3.50893798 10 0 C13.5718623 3.5718623 14 8.10186234 14 13 C14.66 13.33 15.32 13.66 16 14 C6.76 14 -2.48 14 -12 14 C-12 13.67 -12 13.34 -12 13 C-7.71 13 -3.42 13 1 13 C0.67 8.71 0.34 4.42 0 0 Z \",fill:\"#D9A573\",transform:\"translate(40,256)\"})),_path1140||(_path1140=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.40189509 1.3450235 6.51048598 3.12742263 9 7 C9 8.32 9 9.64 9 11 C3.84535266 10.51675181 0.18449681 7.81389239 -4 5 C-2.68 4.67 -1.36 4.34 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#5E3C2D\",transform:\"translate(232,210)\"})),_path1141||(_path1141=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.63954425 -0.18194291 7.77614168 0.14562318 12 2 C13.97589245 2.4780385 15.95187075 2.95576776 17.9296875 3.42578125 C21.10872882 4.30751535 24.00373493 5.62671184 27 7 C23.80530417 8.06489861 23.13354537 7.96436169 20.0625 7.0625 C17.08220499 6.19540068 15.2344611 6 12 6 C10.44204002 5.55334936 8.89933008 5.05059414 7.375 4.5 C4.2587878 3.34253484 4.2587878 3.34253484 1 3 C0.67 2.01 0.34 1.02 0 0 Z \",fill:\"#1E161A\",transform:\"translate(81,211)\"})),_path1142||(_path1142=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0 4.62 0 7 0 C6.01 0.495 6.01 0.495 5 1 C5 1.99 5 2.98 5 4 C4.34 3.67 3.68 3.34 3 3 C3.83333333 5.16666667 3.83333333 5.16666667 6 6 C5.67 6.33 5.34 6.66 5 7 C4.76346477 9.52596259 4.57826308 12.03107207 4.4375 14.5625 C4.39431641 15.27341797 4.35113281 15.98433594 4.30664062 16.71679688 C4.20028223 18.47761912 4.09961154 20.2387832 4 22 C4.66 22.33 5.32 22.66 6 23 C4.68 23.33 3.36 23.66 2 24 C2 19.05 2 14.1 2 9 C1.34 9 0.68 9 0 9 C0 6.03 0 3.06 0 0 Z \",fill:\"#B5A584\",transform:\"translate(350,195)\"})),_path1143||(_path1143=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3 17.82 3 35.64 3 54 C2.67 54 2.34 54 2 54 C1.67 38.82 1.34 23.64 1 8 C0.67 8 0.34 8 0 8 C0 5.36 0 2.72 0 0 Z \",fill:\"#F5CCA4\",transform:\"translate(281,534)\"})),_path1144||(_path1144=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.17065248 0.33100417 6.18313764 1.31941515 9.73828125 3.2890625 C13.60390859 5.08798677 17.74929139 5.660238 21.9375 6.3125 C21.9375 6.6425 21.9375 6.9725 21.9375 7.3125 C15.30513865 7.67280937 11.08261332 6.99400399 4.9375 4.3125 C0.70910256 3.80685109 -2.90362833 3.84895133 -6.875 5.4375 C-7.596875 5.72625 -8.31875 6.015 -9.0625 6.3125 C-11.19921875 5.3671875 -11.19921875 5.3671875 -13.0625 4.3125 C-12.42441406 4.10753906 -11.78632813 3.90257812 -11.12890625 3.69140625 C-10.30261719 3.42199219 -9.47632813 3.15257812 -8.625 2.875 C-7.80128906 2.60816406 -6.97757812 2.34132813 -6.12890625 2.06640625 C-0.64558867 0.06587639 -0.64558867 0.06587639 0 0 Z \",fill:\"#E5D0BF\",transform:\"translate(372.0625,495.6875)\"})),_path1145||(_path1145=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.211042 2.00826223 8.22166716 4.25776171 12 7 C12 7.66 12 8.32 12 9 C7.92607319 9.28321416 5.60727466 8.53928587 2.0625 6.5625 C-1.65503866 4.59537192 -4.74599368 3.3358426 -9 3 C-9 2.34 -9 1.68 -9 1 C-5.88098123 -0.55950938 -3.34862827 -0.72124301 0 0 Z \",fill:\"#EA7771\",transform:\"translate(261,495)\"})),_path1146||(_path1146=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-15.74487472 9.48291572 -15.74487472 9.48291572 -23 12 C-21.49865668 7.64032997 -18.70803832 6.39544026 -14.75 4.3125 C-13.07164063 3.40951172 -13.07164063 3.40951172 -11.359375 2.48828125 C-7.55440126 0.8025894 -4.15747514 0 0 0 Z \",fill:\"#6E4C39\",transform:\"translate(58,468)\"})),_path1147||(_path1147=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.455 1.98 4.455 1.98 9 4 C9 6.97 9 9.94 9 13 C8.01 13 7.02 13 6 13 C5.67 12.34 5.34 11.68 5 11 C4.67 11.66 4.34 12.32 4 13 C3.01 13 2.02 13 1 13 C0.67 8.71 0.34 4.42 0 0 Z \",fill:\"#060503\",transform:\"translate(373,413)\"})),_path1148||(_path1148=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.33 7.26 2.66 14.52 3 22 C-0.96 22 -4.92 22 -9 22 C-9 21.34 -9 20.68 -9 20 C-6.03 20 -3.06 20 0 20 C0 13.4 0 6.8 0 0 Z \",fill:\"#E9BBBB\",transform:\"translate(287,339)\"})),_path1149||(_path1149=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3 0.66 3 1.32 3 2 C5.31 2 7.62 2 10 2 C10.5625 3.9375 10.5625 3.9375 11 6 C10 7 10 7 7.05859375 7.09765625 C5.26615234 7.08025391 5.26615234 7.08025391 3.4375 7.0625 C1.64119141 7.04896484 1.64119141 7.04896484 -0.19140625 7.03515625 C-1.11824219 7.02355469 -2.04507812 7.01195312 -3 7 C-3.33 6.34 -3.66 5.68 -4 5 C-3.525625 4.54625 -3.05125 4.0925 -2.5625 3.625 C-0.90972192 2.06741796 -0.90972192 2.06741796 0 0 Z \",fill:\"#357755\",transform:\"translate(509,316)\"})),_path1150||(_path1150=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.475 0.495 2.475 0.495 5 1 C4.67 2.65 4.34 4.3 4 6 C4.66 6.33 5.32 6.66 6 7 C6 8.98 6 10.96 6 13 C-1.92 13 -9.84 13 -18 13 C-16.68 12.67 -15.36 12.34 -14 12 C-14 10.35 -14 8.7 -14 7 C-13.01 7 -12.02 7 -11 7 C-10.67 8.65 -10.34 10.3 -10 12 C-9.33613281 11.91621094 -8.67226562 11.83242188 -7.98828125 11.74609375 C0.78207381 10.73462214 0.78207381 10.73462214 5 12 C4.505 11.443125 4.01 10.88625 3.5 10.3125 C1.72444199 7.57518141 1.91821034 6.18979661 2 3 C1.34 2.01 0.68 1.02 0 0 Z \",fill:\"#9B7D40\",transform:\"translate(191,256)\"})),_path1151||(_path1151=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.53790403 3.69172595 3.59115883 7.09390595 4 12 C4.66 12 5.32 12 6 12 C6.33 13.65 6.66 15.3 7 17 C5.35 17.33 3.7 17.66 2 18 C1.67 15.69 1.34 13.38 1 11 C0.01 11 -0.98 11 -2 11 C-2 8.03 -2 5.06 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#D07960\",transform:\"translate(63,247)\"})),_path1152||(_path1152=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.33 2.64 0.66 4 1 C3.01 1.33 2.02 1.66 1 2 C1.12375 3.299375 1.2475 4.59875 1.375 5.9375 C1.44460938 6.66839844 1.51421875 7.39929688 1.5859375 8.15234375 C1.72257812 8.76207031 1.85921875 9.37179688 2 10 C2.66 10.33 3.32 10.66 4 11 C2.87926138 11.83905565 1.75325453 12.67107831 0.625 13.5 C-0.00148438 13.9640625 -0.62796875 14.428125 -1.2734375 14.90625 C-3 16 -3 16 -5 16 C-4.67 12.7 -4.34 9.4 -4 6 C-3.01 6 -2.02 6 -1 6 C-0.67 4.02 -0.34 2.04 0 0 Z \",fill:\"#B9C1A1\",transform:\"translate(365,198)\"})),_path1153||(_path1153=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.28788824 3.11016455 5.83735988 6.01618925 8 10 C5.33333333 10 2.66666667 10 0 10 C0 12.31 0 14.62 0 17 C-2.33037471 13.50443793 -3.367255 11.15864327 -2.6484375 6.93359375 C-1.29735294 1.29735294 -1.29735294 1.29735294 0 0 Z \",fill:\"#2A1611\",transform:\"translate(150,62)\"})),_path1154||(_path1154=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.66 2 1.32 2 2 C3.32 2.33 4.64 2.66 6 3 C6 7.29 6 11.58 6 16 C5.01 15.67 4.02 15.34 3 15 C2.3125 12.9375 2.3125 12.9375 2 11 C1.34 11 0.68 11 0 11 C0 7.37 0 3.74 0 0 Z \",fill:\"#9A7156\",transform:\"translate(112,32)\"})),_path1155||(_path1155=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 3.58245896 -0.53307341 3.93331018 -2.921875 6.43359375 C-3.53546875 7.08263672 -4.1490625 7.73167969 -4.78125 8.40039062 C-5.4309375 9.07263672 -6.080625 9.74488281 -6.75 10.4375 C-7.70132813 11.44006836 -7.70132813 11.44006836 -8.671875 12.46289062 C-11.7380886 15.68560888 -14.83445393 18.87442295 -18 22 C-18.33 20.35 -18.66 18.7 -19 17 C-18.32517578 16.41605469 -18.32517578 16.41605469 -17.63671875 15.8203125 C-11.67554768 10.63564668 -5.83242288 5.32851869 0 0 Z \",fill:\"#54362B\",transform:\"translate(51,581)\"})),_path1156||(_path1156=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.875 4.625 5.875 4.625 7 8 C6.67 8.66 6.34 9.32 6 10 C6.66 10 7.32 10 8 10 C8 13.3 8 16.6 8 20 C7.67 20 7.34 20 7 20 C6.67 18.02 6.34 16.04 6 14 C5.34 14 4.68 14 4 14 C4 13.34 4 12.68 4 12 C3.34 12 2.68 12 2 12 C-0.60018816 8.09971775 -0.15085514 4.52565431 0 0 Z \",fill:\"#2B0D11\",transform:\"translate(464,450)\"})),_path1157||(_path1157=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.75930402 0.02876342 3.51850926 0.06399496 5.27758789 0.10424805 C6.66670128 0.13254951 6.66670128 0.13254951 8.08387756 0.16142273 C10.04686338 0.20338449 12.00979134 0.24812959 13.97265625 0.29541016 C16.983687 0.36558094 19.9947358 0.41991786 23.00610352 0.47338867 C24.90912032 0.51603709 26.81211635 0.55962559 28.71508789 0.60424805 C29.620327 0.61893631 30.5255661 0.63362457 31.45823669 0.64875793 C32.71447594 0.68340401 32.71447594 0.68340401 33.99609375 0.71875 C34.73476181 0.73508987 35.47342987 0.75142975 36.23448181 0.76826477 C38.06274414 1.0534668 38.06274414 1.0534668 40.06274414 3.0534668 C22.73774414 2.5584668 22.73774414 2.5584668 5.06274414 2.0534668 C5.06274414 2.7134668 5.06274414 3.3734668 5.06274414 4.0534668 C-0.35264047 4.42269757 -0.35264047 4.42269757 -3.31225586 2.5534668 C-3.84850586 2.0584668 -4.38475586 1.5634668 -4.93725586 1.0534668 C-3.93725586 0.0534668 -3.93725586 0.0534668 0 0 Z \",fill:\"#AA7753\",transform:\"translate(524.937255859375,419.946533203125)\"})),_path1158||(_path1158=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4.40801001 3.46808506 3.9631942 5.0736116 2.375 8.25 C0 11 0 11 -3.25 11.875 C-4.61125 11.936875 -4.61125 11.936875 -6 12 C-6 11.34 -6 10.68 -6 10 C-5.34 10 -4.68 10 -4 10 C-4 8.02 -4 6.04 -4 4 C-2.68 3.34 -1.36 2.68 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#490A13\",transform:\"translate(406,384)\"})),_path1159||(_path1159=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.475 0.99 2.475 0.99 5 2 C5.33 1.34 5.66 0.68 6 0 C6.33 1.98 6.66 3.96 7 6 C7.66 6 8.32 6 9 6 C9 6.66 9 7.32 9 8 C9.66 8 10.32 8 11 8 C11 8.66 11 9.32 11 10 C11.66 10 12.32 10 13 10 C13 10.66 13 11.32 13 12 C14.32 12 15.64 12 17 12 C16.67 12.99 16.34 13.98 16 15 C9.43157061 11.63038019 3.70436765 7.67946944 -2 3 C-1.34 2.67 -0.68 2.34 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#D8B694\",transform:\"translate(249,220)\"})),_path1160||(_path1160=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C1.32 1.34 2.64 0.68 4 0 C5.32 1.98 6.64 3.96 8 6 C6.68 5.67 5.36 5.34 4 5 C4.99 6.485 4.99 6.485 6 8 C2.125 6.125 2.125 6.125 1 5 C0.67 5.66 0.34 6.32 0 7 C0.928125 7.4640625 0.928125 7.4640625 1.875 7.9375 C3.25 8.625 4.625 9.3125 6 10 C5.67 10.66 5.34 11.32 5 12 C4.01 12 3.02 12 2 12 C1.67 12.66 1.34 13.32 1 14 C0.34 14 -0.32 14 -1 14 C-1.70074844 10.846632 -2 8.27275026 -2 5 C-3.41977909 2.77256213 -3.41977909 2.77256213 -5 1 C-2 0 -2 0 0 0 Z \",fill:\"#311417\",transform:\"translate(606,205)\"})),_path1161||(_path1161=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.598125 0.309375 1.19625 0.61875 1.8125 0.9375 C4.08956772 2.10209704 4.08956772 2.10209704 7 3 C7.33 3.66 7.66 4.32 8 5 C9.32 4.34 10.64 3.68 12 3 C14 4.1875 14 4.1875 16 6 C16.125 8.61328125 16.125 8.61328125 16 11 C13.89411299 10.21292098 11.79034384 9.42017374 9.6875 8.625 C8.51574219 8.18414062 7.34398437 7.74328125 6.13671875 7.2890625 C3 6 3 6 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#815237\",transform:\"translate(9,138)\"})),_path1162||(_path1162=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.66666667 0.66666667 3.33333333 1.33333333 5 2 C6.2684375 2.495 6.2684375 2.495 7.5625 3 C8.7690625 3.495 8.7690625 3.495 10 4 C10.7425 4.268125 11.485 4.53625 12.25 4.8125 C14 6 14 6 14.75 8.4375 C15 11 15 11 15 14 C13.02 14.99 13.02 14.99 11 16 C11.33 15.01 11.66 14.02 12 13 C11.34 13 10.68 13 10 13 C9.67 13.66 9.34 14.32 9 15 C9.0928125 14.09894531 9.185625 13.19789062 9.28125 12.26953125 C9.31233706 8.91273079 9.31233706 8.91273079 7.03125 6.69921875 C5.77828125 5.70341797 5.77828125 5.70341797 4.5 4.6875 C2.99318328 3.46669942 1.49125898 2.23975697 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#281E1F\",transform:\"translate(65,73)\"})),_path1163||(_path1163=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C-2.88994661 5.30750532 -7.90650512 9.21169913 -13.25 12.9375 C-13.99000244 13.45530029 -14.73000488 13.97310059 -15.49243164 14.5065918 C-29.36041324 24.16246984 -29.36041324 24.16246984 -33 26 C-33.66 25.67 -34.32 25.34 -35 25 C-34.33613281 24.54109375 -33.67226563 24.0821875 -32.98828125 23.609375 C-27.55014249 19.84546327 -27.55014249 19.84546327 -22.3125 15.8125 C-20 14 -20 14 -16.7890625 12.21484375 C-12.94329356 10.0448064 -9.52227217 7.48286252 -6.0625 4.75 C-5.47404297 4.29109375 -4.88558594 3.8321875 -4.27929688 3.359375 C-2.84971658 2.24360502 -1.42439577 1.12238102 0 0 Z \",fill:\"#707C5F\",transform:\"translate(516,46)\"})),_path1164||(_path1164=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.66 1.98 1.32 3 2 C3 2.99 3 3.98 3 5 C3.99 5 4.98 5 6 5 C7.28125 6.3203125 7.28125 6.3203125 8.5 8.125 C8.93054688 8.76179688 9.36109375 9.39859375 9.8046875 10.0546875 C11.37918285 12.6171015 12.65570513 15.31141026 14 18 C15.56102491 19.81554159 15.56102491 19.81554159 17 21 C16.67 21.66 16.34 22.32 16 23 C9.66767644 16.2325439 3.52103502 9.46187668 -2 2 C-1.34 1.34 -0.68 0.68 0 0 Z \",fill:\"#3C2116\",transform:\"translate(108,45)\"})),_path1165||(_path1165=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C3.39166394 4.13668518 2.15412789 7.40978685 0 11 C-2.0625 12.125 -2.0625 12.125 -4 13 C-5.26804566 15.0335948 -5.26804566 15.0335948 -6 17 C-6.66 17 -7.32 17 -8 17 C-6.64993646 10.78970774 -4.12136227 4.90028001 0 0 Z \",fill:\"#55352B\",transform:\"translate(104,576)\"})),_path1166||(_path1166=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.99 1.98 1.98 3 3 C1.33333333 6.33333333 -0.33333333 9.66666667 -2 13 C-2.66 13 -3.32 13 -4 13 C-4.0825 13.70125 -4.165 14.4025 -4.25 15.125 C-5.18009005 18.6903452 -6.76686369 21.09015572 -9 24 C-9.66 24 -10.32 24 -11 24 C-9.59313725 16.56372549 -9.59313725 16.56372549 -7.109375 14.203125 C-4.58858935 11.57030443 -3.5737357 9.13288012 -2.25 5.75 C-1.82203125 4.67234375 -1.3940625 3.5946875 -0.953125 2.484375 C-0.63859375 1.66453125 -0.3240625 0.8446875 0 0 Z \",fill:\"#825741\",transform:\"translate(161,528)\"})),_path1167||(_path1167=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.85921938 1.57227456 6.07740557 4.07740557 9 7 C11.37537382 8.85551086 13.7791821 10.66298716 16.20703125 12.44921875 C16.79871094 12.96097656 17.39039063 13.47273437 18 14 C18 14.66 18 15.32 18 16 C12.58537129 15.67184068 9.79125088 12.48666836 6 9 C4.69164952 7.87017688 3.37930927 6.74495294 2.0625 5.625 C1.04166667 4.75 0.02083333 3.875 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#8F634A\",transform:\"translate(562,503)\"})),_path1168||(_path1168=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.40114397 0.50298788 6.71195019 2.08772731 10 5 C9.34 5 8.68 5 8 5 C8 5.99 8 6.98 8 8 C7.401875 7.690625 6.80375 7.38125 6.1875 7.0625 C2.06387809 5.05959793 -1.31028117 4.8178398 -5.85546875 4.68359375 C-6.51710526 4.66281265 -7.17874176 4.64203156 -7.86042786 4.62062073 C-9.96934852 4.55535273 -12.07839135 4.49634656 -14.1875 4.4375 C-15.61915315 4.39429311 -17.05079404 4.35067812 -18.48242188 4.30664062 C-21.98815154 4.19969494 -25.49401786 4.09836359 -29 4 C-29 3.67 -29 3.34 -29 3 C-19.43 2.67 -9.86 2.34 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#451014\",transform:\"translate(256,475)\"})),_path1169||(_path1169=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C8.72881356 -0.45762712 8.72881356 -0.45762712 13.125 1.125 C15 3 15 3 15.3125 6.1875 C15.1578125 7.5796875 15.1578125 7.5796875 15 9 C13.824375 8.401875 12.64875 7.80375 11.4375 7.1875 C7.67973126 5.30526646 3.87889353 3.61620564 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#C09E7C\",transform:\"translate(208,416)\"})),_path1170||(_path1170=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.74314453 -0.00386719 1.48628906 -0.00773437 2.25195312 -0.01171875 C6.87357915 -0.00361774 11.25359112 0.36417547 15.8125 1.125 C15.4825 1.785 15.1525 2.445 14.8125 3.125 C6.5625 3.125 -1.6875 3.125 -10.1875 3.125 C-10.1875 2.465 -10.1875 1.805 -10.1875 1.125 C-6.98279925 -0.47735037 -3.51601939 -0.01783273 0 0 Z \",fill:\"#EDECD5\",transform:\"translate(551.1875,404.875)\"})),_path1171||(_path1171=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-6.96324937 4.64216625 -17.74995242 5.50510495 -26 5 C-25.67 4.01 -25.34 3.02 -25 2 C-16.58481953 0.47983837 -8.5511272 -0.27733386 0 0 Z \",fill:\"#B0BC88\",transform:\"translate(613,401)\"})),_path1172||(_path1172=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.65742188 0.06058594 1.31484375 0.12117188 1.9921875 0.18359375 C11.31741542 1.00492141 20.65273392 1.51186499 30 2 C29.67 2.66 29.34 3.32 29 4 C25.29181703 4.08756305 21.58390237 4.14058015 17.875 4.1875 C16.30492187 4.22520508 16.30492187 4.22520508 14.703125 4.26367188 C8.94528536 4.31833491 4.86485368 4.20676341 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#C8836F\",transform:\"translate(358,392)\"})),_path1173||(_path1173=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C0.65880723 3.61090362 -0.69190663 6.90242808 -3 10 C-5.7421875 10.92578125 -5.7421875 10.92578125 -8.875 11.3125 C-9.90367188 11.45300781 -10.93234375 11.59351563 -11.9921875 11.73828125 C-14.68317662 11.97243225 -17.30113051 12.0547741 -20 12 C-20 11.34 -20 10.68 -20 10 C-19.18015625 9.80664062 -18.3603125 9.61328125 -17.515625 9.4140625 C-15.89914063 9.02347656 -15.89914063 9.02347656 -14.25 8.625 C-13.18265625 8.36976563 -12.1153125 8.11453125 -11.015625 7.8515625 C-8.44147278 7.12466459 -6.32399814 6.2973776 -4 5 C-4.33 4.01 -4.66 3.02 -5 2 C-4.34 1.67 -3.68 1.34 -3 1 C-2.01 1.33 -1.02 1.66 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#7B6656\",transform:\"translate(20,331)\"})),_path1174||(_path1174=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.6875 1.9375 -0.6875 1.9375 -2 4 C-4.87939419 4.93580311 -6.25509788 5.37245106 -9 4 C-10.73732806 3.77925159 -12.48118407 3.60869362 -14.2265625 3.46484375 C-15.2578125 3.37783203 -16.2890625 3.29082031 -17.3515625 3.20117188 C-18.43179688 3.11416016 -19.51203125 3.02714844 -20.625 2.9375 C-21.71296875 2.84662109 -22.8009375 2.75574219 -23.921875 2.66210938 C-26.61430157 2.43774049 -29.30698709 2.21719886 -32 2 C-32 1.67 -32 1.34 -32 1 C-27.6042236 0.8318091 -23.20837046 0.6657129 -18.8125 0.5 C-17.56662109 0.45230469 -16.32074219 0.40460938 -15.03710938 0.35546875 C-13.83505859 0.31035156 -12.63300781 0.26523437 -11.39453125 0.21875 C-10.28956299 0.17685547 -9.18459473 0.13496094 -8.04614258 0.09179688 C-5.36141261 0.01089133 -2.68565859 -0.01748191 0 0 Z \",fill:\"#8F775D\",transform:\"translate(218,323)\"})),_path1175||(_path1175=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.6 0 13.2 0 20 0 C20 0.66 20 1.32 20 2 C21.65 2 23.3 2 25 2 C25 2.33 25 2.66 25 3 C17.08 3 9.16 3 1 3 C0.67 3.66 0.34 4.32 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#8F3129\",transform:\"translate(169,277)\"})),_path1176||(_path1176=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0.33 5.94 0.66 9 1 C8.67 1.66 8.34 2.32 8 3 C7.01 3.33 6.02 3.66 5 4 C5.33 5.98 5.66 7.96 6 10 C5.01 10 4.02 10 3 10 C3 9.34 3 8.68 3 8 C2.34 8 1.68 8 1 8 C1.33 9.32 1.66 10.64 2 12 C1.360625 12.28875 0.72125 12.5775 0.0625 12.875 C-2.15206079 13.82823451 -2.15206079 13.82823451 -3 16 C-2.30058404 12.85262818 -1.23921302 9.97411124 0 7 C-0.66 7 -1.32 7 -2 7 C-2.33 5.68 -2.66 4.36 -3 3 C-2.01 3 -1.02 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#764638\",transform:\"translate(87,239)\"})),_path1177||(_path1177=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.17219543 0.78345715 2.33763668 1.57702836 3.5 2.375 C4.47453125 3.03628906 4.47453125 3.03628906 5.46875 3.7109375 C6.22671875 4.34902344 6.22671875 4.34902344 7 5 C7 5.66 7 6.32 7 7 C7.680625 7.20625 8.36125 7.4125 9.0625 7.625 C12.92917854 9.43493463 16.06417577 11.89844375 19 15 C19.33 15.99 19.66 16.98 20 18 C16.05860922 16.33248852 13.2107188 13.77289351 10 11 C9.67 11.66 9.34 12.32 9 13 C5.37 9.37 1.74 5.74 -2 2 C-1.34 1.34 -0.68 0.68 0 0 Z \",fill:\"#5A382A\",transform:\"translate(521,509)\"})),_path1178||(_path1178=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.90770899 -0.11774504 13.78976964 0.00946996 20.6875 0.375 C21.39455078 0.40585693 22.10160156 0.43671387 22.83007812 0.46850586 C24.55947216 0.57034701 26.28214951 0.77602441 28 1 C28.33 1.66 28.66 2.32 29 3 C23.17144343 4.34275621 17.54145213 3.89458473 11.625 3.5625 C10.60277344 3.51029297 9.58054687 3.45808594 8.52734375 3.40429688 C6.01786804 3.27530513 3.5088606 3.14037142 1 3 C0.67 2.01 0.34 1.02 0 0 Z \",fill:\"#261E1F\",transform:\"translate(271,498)\"})),_path1179||(_path1179=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.00957198 1.98590804 6.00572551 3.99112268 9 6 C9.67675781 6.44085938 10.35351562 6.88171875 11.05078125 7.3359375 C14.76520637 9.83343105 16.9181096 12.05536555 19 16 C19.66 16.33 20.32 16.66 21 17 C20.67 17.66 20.34 18.32 20 19 C15.16743695 18.58578031 13.17320782 16.53586014 10 13 C10.66 13 11.32 13 12 13 C11.2575 12.2575 10.515 11.515 9.75 10.75 C8.10403482 9.10403482 6.47328538 7.44230217 4.875 5.75 C3.02022825 3.77556277 3.02022825 3.77556277 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#97694F\",transform:\"translate(483,439)\"})),_path1180||(_path1180=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0.495 2.97 0.495 6 1 C6 4.63 6 8.26 6 12 C4.35 12.66 2.7 13.32 1 14 C-1.02907167 10.6853333 -1.12742133 8.5684021 -0.625 4.75 C-0.51414062 3.85796875 -0.40328125 2.9659375 -0.2890625 2.046875 C-0.19367188 1.37140625 -0.09828125 0.6959375 0 0 Z \",fill:\"#261A14\",transform:\"translate(354,438)\"})),_path1181||(_path1181=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-2.31 2.33 -4.62 2.66 -7 3 C-7 3.66 -7 4.32 -7 5 C-9.1234016 5.83739781 -11.2487728 6.66980283 -13.375 7.5 C-14.55835938 7.9640625 -15.74171875 8.428125 -16.9609375 8.90625 C-20 10 -20 10 -22 10 C-22 8.68 -22 7.36 -22 6 C-6.85714286 0 -6.85714286 0 0 0 Z \",fill:\"#4B3327\",transform:\"translate(22,426)\"})),_path1182||(_path1182=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.58294782 -0.05437607 3.16644256 -0.09296271 4.75 -0.125 C5.63171875 -0.14820313 6.5134375 -0.17140625 7.421875 -0.1953125 C10.1135858 0.00860498 11.69904974 0.63448279 14 2 C13.67 2.66 13.34 3.32 13 4 C11.02 4 9.04 4 7 4 C7 4.99 7 5.98 7 7 C1.46153846 7.36923077 1.46153846 7.36923077 -0.875 5.5 C-1.24625 5.005 -1.6175 4.51 -2 4 C-0.68 3.67 0.64 3.34 2 3 C1.34 2.67 0.68 2.34 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#C8A069\",transform:\"translate(395,410)\"})),_path1183||(_path1183=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C8.25 0.66 16.5 1.32 25 2 C25 2.33 25 2.66 25 3 C18.2314676 3.10152799 11.69675136 3.03026944 5 2 C5 3.65 5 5.3 5 7 C6.98 7 8.96 7 11 7 C11 7.33 11 7.66 11 8 C7.37 8 3.74 8 0 8 C0 5.36 0 2.72 0 0 Z \",fill:\"#291411\",transform:\"translate(337,407)\"})),_path1184||(_path1184=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0.33 5.28 0.66 8 1 C4.93882432 3.62386487 4.26826873 4 0 4 C0 4.66 0 5.32 0 6 C-1.11375 6.2475 -2.2275 6.495 -3.375 6.75 C-7.04615198 7.61005339 -7.04615198 7.61005339 -8.4375 10.125 C-8.623125 10.74375 -8.80875 11.3625 -9 12 C-9.33 9.36 -9.66 6.72 -10 4 C-6.38026598 2.68373308 -3.90432869 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#BD0C0C\",transform:\"translate(14,378)\"})),_path1185||(_path1185=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.61 0 11.22 0 17 0 C17 0.99 17 1.98 17 3 C13.24600202 4.2039337 9.66782588 4.09877617 5.75 4.0625 C4.48671875 4.05347656 3.2234375 4.04445313 1.921875 4.03515625 C0.95765625 4.02355469 -0.0065625 4.01195312 -1 4 C-0.67 2.68 -0.34 1.36 0 0 Z \",fill:\"#E6A399\",transform:\"translate(252,351)\"})),_path1186||(_path1186=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.99 0.33 -1.98 0.66 -3 1 C-3 1.66 -3 2.32 -3 3 C-4.4540625 3.1546875 -4.4540625 3.1546875 -5.9375 3.3125 C-9.83689992 3.85364121 -13.38693349 5.04968864 -17.08203125 6.37890625 C-19 7 -19 7 -21 7 C-21 7.66 -21 8.32 -21 9 C-22.32 9 -23.64 9 -25 9 C-25 8.34 -25 7.68 -25 7 C-9.04255319 -1.34042553 -9.04255319 -1.34042553 0 0 Z \",fill:\"#F44628\",transform:\"translate(165,325)\"})),_path1187||(_path1187=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C1.67 3.63 1.34 7.26 1 11 C2.65 11 4.3 11 6 11 C6 11.33 6 11.66 6 12 C4.02 12 2.04 12 0 12 C0.33 13.98 0.66 15.96 1 18 C1.99 18.33 2.98 18.66 4 19 C3.67 19.66 3.34 20.32 3 21 C0.19970334 19.85819339 -2.47434889 18.67304277 -5 17 C-5.875 14.3125 -5.875 14.3125 -6 12 C-6.66 11.67 -7.32 11.34 -8 11 C-5.36 11 -2.72 11 0 11 C-0.185625 9.741875 -0.37125 8.48375 -0.5625 7.1875 C-1.00732761 4.17255732 -0.99843846 2.99531539 0 0 Z \",fill:\"#9BA570\",transform:\"translate(392,297)\"})),_path1188||(_path1188=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.95825873 -0.02694851 3.91662226 -0.04637218 5.875 -0.0625 C6.96554687 -0.07410156 8.05609375 -0.08570313 9.1796875 -0.09765625 C12 0 12 0 14 1 C14.042721 2.66611905 14.04063832 4.33382885 14 6 C13 7 13 7 10.4375 7.0625 C9.2309375 7.0315625 9.2309375 7.0315625 8 7 C8 5.35 8 3.7 8 2 C6.02 2.33 4.04 2.66 2 3 C1.67 4.32 1.34 5.64 1 7 C-0.98 7 -2.96 7 -5 7 C-5 6.67 -5 6.34 -5 6 C-3.35 6 -1.7 6 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#70644C\",transform:\"translate(340,264)\"})),_path1189||(_path1189=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.99 1.98 1.98 3 3 C2.34 3 1.68 3 1 3 C1 3.99 1 4.98 1 6 C0.01 6 -0.98 6 -2 6 C-1.67 6.99 -1.34 7.98 -1 9 C-0.93197033 10.72795352 -0.91504355 12.45835365 -0.9375 14.1875 C-0.94652344 15.08855469 -0.95554687 15.98960937 -0.96484375 16.91796875 C-0.97644531 17.60503906 -0.98804688 18.29210937 -1 19 C-2.65 19 -4.3 19 -6 19 C-7.26264601 14.70700357 -6.62950412 12.12168689 -5 8 C-4.34 8 -3.68 8 -3 8 C-3 7.01 -3 6.02 -3 5 C-2.34 4.67 -1.68 4.34 -1 4 C-0.34786708 1.97536745 -0.34786708 1.97536745 0 0 Z \",fill:\"#9F664B\",transform:\"translate(42,250)\"})),_path1190||(_path1190=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3 0 3 0 5 1 C4.67 3.97 4.34 6.94 4 10 C1.36 10 -1.28 10 -4 10 C-4 7.36 -4 4.72 -4 2 C-3.01 2 -2.02 2 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#AC7759\",transform:\"translate(19,253)\"})),_path1191||(_path1191=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 2.64 0.66 5.28 1 8 C0.01 8.33 -0.98 8.66 -2 9 C-2 7.35 -2 5.7 -2 4 C-5.79588866 4.54226981 -7.47211993 6.20127563 -10 9 C-10.66 8.67 -11.32 8.34 -12 8 C-12 7.34 -12 6.68 -12 6 C-12.99 6 -13.98 6 -15 6 C-14.67 5.01 -14.34 4.02 -14 3 C-10.6875 1.875 -10.6875 1.875 -7 1 C-5.88625 0.690625 -5.88625 0.690625 -4.75 0.375 C-3 0 -3 0 0 0 Z \",fill:\"#AC745A\",transform:\"translate(121,255)\"})),_path1192||(_path1192=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.75 1.25 1.75 1.25 3 3 C3 3.99 3 4.98 3 6 C3.66 6 4.32 6 5 6 C4.855625 6.61488281 4.71125 7.22976562 4.5625 7.86328125 C4.376875 8.67152344 4.19125 9.47976562 4 10.3125 C3.814375 11.11300781 3.62875 11.91351563 3.4375 12.73828125 C2.90504177 15.10695938 2.90504177 15.10695938 3 18 C2.34 18 1.68 18 1 18 C-1 15 -1 15 -1 12 C-0.34 12 0.32 12 1 12 C-0.65 8.37 -2.3 4.74 -4 1 C-2.68 0.67 -1.36 0.34 0 0 Z \",fill:\"#AF7358\",transform:\"translate(82,240)\"})),_path1193||(_path1193=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0.33 3.3 0.66 5 1 C5 1.66 5 2.32 5 3 C9.29 3 13.58 3 18 3 C18 3.33 18 3.66 18 4 C11.565 4.495 11.565 4.495 5 5 C4.67 6.32 4.34 7.64 4 9 C1.36 8.67 -1.28 8.34 -4 8 C-3.67 7.34 -3.34 6.68 -3 6 C-1.35 6.33 0.3 6.66 2 7 C2 6.34 2 5.68 2 5 C0.576875 4.8453125 0.576875 4.8453125 -0.875 4.6875 C-4 4 -4 4 -6 1 C-3.03 1.495 -3.03 1.495 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#74533D\",transform:\"translate(252,241)\"})),_path1194||(_path1194=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.01508715 1.54058233 9.6147081 3.02931839 14 6 C13.34 6.66 12.68 7.32 12 8 C11.01 7.67 10.02 7.34 9 7 C9 7.66 9 8.32 9 9 C10.65 9.33 12.3 9.66 14 10 C14 10.33 14 10.66 14 11 C5.80743982 11.63019694 5.80743982 11.63019694 2.4375 9 C1.7259375 8.01 1.7259375 8.01 1 7 C1.99 7 2.98 7 4 7 C4 6.01 4 5.02 4 4 C2.68 3.34 1.36 2.68 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#F0C898\",transform:\"translate(175,218)\"})),_path1195||(_path1195=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.67177385 -0.45374191 8.5975268 0.34916857 13 4 C13 4.66 13 5.32 13 6 C13.66 6 14.32 6 15 6 C15 6.66 15 7.32 15 8 C15.556875 8.226875 16.11375 8.45375 16.6875 8.6875 C19.63246684 10.35896766 21.68156544 12.55276352 24 15 C22.68 15 21.36 15 20 15 C18.64316249 13.3524116 17.31543279 11.68083079 16 10 C13.41780184 7.87961805 10.72853165 5.92719104 8 4 C8 4.66 8 5.32 8 6 C8.639375 6.28875 9.27875 6.5775 9.9375 6.875 C12 8 12 8 13 10 C9.66272214 8.82744291 7.22562513 7.81131596 5 5 C5 4.34 5 3.68 5 3 C2.525 2.01 2.525 2.01 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#230609\",transform:\"translate(564,210)\"})),_path1196||(_path1196=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 5.94 2 11.88 2 18 C2.66 18 3.32 18 4 18 C4 12.39 4 6.78 4 1 C4.33 1 4.66 1 5 1 C5 6.94 5 12.88 5 19 C0.70600835 20.07349791 -0.19495213 19.79682816 -4 18 C-3.01 17.34 -2.02 16.68 -1 16 C-0.61605333 13.22737745 -0.39657752 10.65676472 -0.3125 7.875 C-0.27833984 7.12089844 -0.24417969 6.36679688 -0.20898438 5.58984375 C-0.12645722 3.72708799 -0.06155289 1.86356674 0 0 Z \",fill:\"#AC896B\",transform:\"translate(41,157)\"})),_path1197||(_path1197=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3 1 3 1 4 3 C3.32195313 3.30292969 2.64390625 3.60585937 1.9453125 3.91796875 C-3.71397296 6.46543104 -9.25689864 9.1178797 -14.7109375 12.08203125 C-17.29484006 13.11823791 -19.24124665 13.17059429 -22 13 C-18.14233036 9.79389386 -13.74339216 7.66620362 -9.3125 5.375 C-7.76608516 4.57193165 -6.22046775 3.76732527 -4.67578125 2.9609375 C-3.99427002 2.60821777 -3.31275879 2.25549805 -2.6105957 1.89208984 C-1.01079528 1.10277758 -1.01079528 1.10277758 0 0 Z \",fill:\"#3B2A26\",transform:\"translate(547,139)\"})),_path1198||(_path1198=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.62 0 9.24 0 14 0 C14 2.31 14 4.62 14 7 C12.68 6.67 11.36 6.34 10 6 C10 6.66 10 7.32 10 8 C10.99 8.33 11.98 8.66 13 9 C10.03 8.505 10.03 8.505 7 8 C6.67 6.35 6.34 4.7 6 3 C3.03 2.505 3.03 2.505 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#5C5947\",transform:\"translate(114,118)\"})),_path1199||(_path1199=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.875 0.3125 1.875 0.3125 4 1 C4.66 1.99 5.32 2.98 6 4 C8.05925139 4.72382467 8.05925139 4.72382467 10 5 C10 5.66 10 6.32 10 7 C10.66 7 11.32 7 12 7 C11.67 7.99 11.34 8.98 11 10 C10.01 9.34 9.02 8.68 8 8 C7.67 8.66 7.34 9.32 7 10 C2.545 8.02 2.545 8.02 -2 6 C-2 5.01 -2 4.02 -2 3 C-1.34 3 -0.68 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#F6D4AA\",transform:\"translate(610,529)\"})),_path1200||(_path1200=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-7.19338876 4.79559251 -17.48740759 5.89787993 -26 5 C-26.66 4.67 -27.32 4.34 -28 4 C-28 3.34 -28 2.68 -28 2 C-24.64637391 1.6610769 -21.29202668 1.32988036 -17.9375 1 C-16.99455078 0.90460938 -16.05160156 0.80921875 -15.08007812 0.7109375 C-10.02487778 0.21774722 -5.07896392 -0.11270932 0 0 Z \",fill:\"#6E3C30\",transform:\"translate(397,506)\"})),_path1201||(_path1201=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.26 0 14.52 0 22 0 C21.67 0.99 21.34 1.98 21 3 C23.97 3 26.94 3 30 3 C30 3.33 30 3.66 30 4 C19.82241303 4.31860272 10.06979989 3.35067975 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#240B0D\",transform:\"translate(270,504)\"})),_path1202||(_path1202=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.73080266 1.97746603 1.39421747 3.98072489 2 6 C1.67 6.66 1.34 7.32 1 8 C-0.32 8 -1.64 8 -3 8 C-3.33 7.34 -3.66 6.68 -4 6 C-6.12576782 5.53348793 -6.12576782 5.53348793 -8.5625 5.375 C-9.38878906 5.30023438 -10.21507812 5.22546875 -11.06640625 5.1484375 C-11.70449219 5.09945313 -12.34257812 5.05046875 -13 5 C-10.71738445 2.27841992 -9.43906142 1.10752525 -5.9375 0.25 C-3 0 -3 0 0 0 Z \",fill:\"#F3D8B7\",transform:\"translate(386,453)\"})),_path1203||(_path1203=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3.33 3.3 3.66 6.6 4 10 C5.175625 10.433125 5.175625 10.433125 6.375 10.875 C9.75553203 12.32379944 11.37230986 14.37230986 14 17 C11.03 17 8.06 17 5 17 C3 13 3 13 3 10 C2.01 9.67 1.02 9.34 0 9 C0.66 9 1.32 9 2 9 C1.34 6.03 0.68 3.06 0 0 Z \",fill:\"#0A5938\",transform:\"translate(509,393)\"})),_path1204||(_path1204=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 3.3 1 6.6 1 10 C7.27 9.67 13.54 9.34 20 9 C20 9.99 20 10.98 20 12 C22.97 12.495 22.97 12.495 26 13 C25.67 13.66 25.34 14.32 25 15 C21.04 15 17.08 15 13 15 C13.33 14.34 13.66 13.68 14 13 C14.66 13 15.32 13 16 13 C16 12.34 16 11.68 16 11 C10.72 11 5.44 11 0 11 C0 7.37 0 3.74 0 0 Z \",fill:\"#510C08\",transform:\"translate(88,393)\"})),_path1205||(_path1205=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.84765625 0.33984375 1.84765625 0.33984375 4.0625 0.9375 C5.16271484 1.22947266 5.16271484 1.22947266 6.28515625 1.52734375 C7.13400391 1.76130859 7.13400391 1.76130859 8 2 C7.67 2.66 7.34 3.32 7 4 C6.34 4 5.68 4 5 4 C5 4.66 5 5.32 5 6 C10.61 6 16.22 6 22 6 C22 6.33 22 6.66 22 7 C14.41 7.33 6.82 7.66 -1 8 C-1 1 -1 1 0 0 Z \",fill:\"#383128\",transform:\"translate(338,397)\"})),_path1206||(_path1206=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C23.34355828 -0.82822086 23.34355828 -0.82822086 33 4 C32.67 4.66 32.34 5.32 32 6 C30.67162109 5.69255859 30.67162109 5.69255859 29.31640625 5.37890625 C19.52529106 3.24951699 10.00525464 2.35514368 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#010C08\",transform:\"translate(476,389)\"})),_path1207||(_path1207=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.67102183 0.56220997 15.13469742 1.62314436 22.6875 3.0625 C23.68716797 3.24876953 24.68683594 3.43503906 25.71679688 3.62695312 C28.14541301 4.08013987 30.57307351 4.53786592 33 5 C33 5.99 33 6.98 33 8 C29.10268529 7.33153967 25.20669699 6.65585802 21.31176758 5.97363281 C19.33935981 5.62968382 17.36597291 5.29136506 15.39257812 4.953125 C14.14541016 4.73398437 12.89824219 4.51484375 11.61328125 4.2890625 C10.46641846 4.09006348 9.31955566 3.89106445 8.13793945 3.68603516 C5.23982986 3.05243304 2.70870403 2.19351578 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#717D71\",transform:\"translate(473,378)\"})),_path1208||(_path1208=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.3 0 6.6 0 10 0 C9.67 2.31 9.34 4.62 9 7 C8.34 7 7.68 7 7 7 C6.67 7.66 6.34 8.32 6 9 C6 8.34 6 7.68 6 7 C4.35 7 2.7 7 1 7 C0.67 4.69 0.34 2.38 0 0 Z \",fill:\"#311E20\",transform:\"translate(215,367)\"})),_path1209||(_path1209=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.62 0 9.24 0 14 0 C14.33 1.98 14.66 3.96 15 6 C13.35 6 11.7 6 10 6 C10 5.67 10 5.34 10 5 C5.71 4.67 1.42 4.34 -3 4 C-2.67 3.01 -2.34 2.02 -2 1 C-2 1.66 -2 2.32 -2 3 C-0.68 2.67 0.64 2.34 2 2 C1.34 1.34 0.68 0.68 0 0 Z \",fill:\"#DFAF39\",transform:\"translate(514,356)\"})),_path1210||(_path1210=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0.495 2.97 0.495 6 1 C4.02 5.95 2.04 10.9 0 16 C-0.66 16 -1.32 16 -2 16 C-2.20674944 10.21101581 -1.59162079 5.57067277 0 0 Z \",fill:\"#F9F6D9\",transform:\"translate(205,328)\"})),_path1211||(_path1211=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.66 1.98 1.32 3 2 C3.22107787 4.7885289 3.28107535 7.34653181 3.1875 10.125 C3.17396484 10.87910156 3.16042969 11.63320313 3.14648438 12.41015625 C3.11109985 14.27374127 3.05729167 16.13695978 3 18 C2.67 18 2.34 18 2 18 C1.67 21.63 1.34 25.26 1 29 C0.01 29 -0.98 29 -2 29 C-2 25.37 -2 21.74 -2 18 C-1.67 18 -1.34 18 -1 18 C-0.505 9.09 -0.505 9.09 0 0 Z \",fill:\"#6F4134\",transform:\"translate(260,311)\"})),_path1212||(_path1212=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.66 2.64 -1.32 5.28 -2 8 C-2.66 7.67 -3.32 7.34 -4 7 C-4 6.01 -4 5.02 -4 4 C-6.72943537 3.94583259 -9.45778564 3.90624775 -12.1875 3.875 C-12.95642578 3.85824219 -13.72535156 3.84148437 -14.51757812 3.82421875 C-18.8149434 3.78733149 -22.07901831 4.0041496 -26 6 C-25.25 4.0625 -25.25 4.0625 -24 2 C-20.3480731 0.65594942 -16.41147174 0.67782232 -12.5625 0.4375 C-11.26441406 0.35371094 -9.96632812 0.26992188 -8.62890625 0.18359375 C-5.74163647 0.0375209 -2.88936346 -0.03897022 0 0 Z \",fill:\"#988558\",transform:\"translate(240,296)\"})),_path1213||(_path1213=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.66 1.32 1.32 2 2 C-1.29086844 2.34153092 -4.58279077 2.67166646 -7.875 3 C-8.7928125 3.09539062 -9.710625 3.19078125 -10.65625 3.2890625 C-16.79309053 3.89410312 -22.83466375 4.12065893 -29 4 C-29 3.34 -29 2.68 -29 2 C-7.47808619 -0.47479912 -7.47808619 -0.47479912 0 0 Z \",fill:\"#604B32\",transform:\"translate(103,294)\"})),_path1214||(_path1214=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 1.98 1 3.96 1 6 C1.6290625 5.84402344 2.258125 5.68804687 2.90625 5.52734375 C8.68856288 4.21239007 13.16754686 3.91991608 19 5 C19 5.66 19 6.32 19 7 C9.1 8.485 9.1 8.485 -1 10 C-0.67 6.7 -0.34 3.4 0 0 Z \",fill:\"#E6A365\",transform:\"translate(205,276)\"})),_path1215||(_path1215=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.75 0.875 5.75 0.875 8 2 C8.62599243 5.38035912 9 8.56169885 9 12 C7.68 12.33 6.36 12.66 5 13 C4.731875 12.154375 4.46375 11.30875 4.1875 10.4375 C2.9521405 6.86145933 1.523012 3.46139092 0 0 Z \",fill:\"#F3C593\",transform:\"translate(142,203)\"})),_path1216||(_path1216=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.89262991 1.64688189 6.83697279 4.27067392 10 7 C10.61746094 7.50144531 11.23492187 8.00289062 11.87109375 8.51953125 C12.49113281 9.02871094 13.11117187 9.53789062 13.75 10.0625 C14.60851562 10.76052734 14.60851562 10.76052734 15.484375 11.47265625 C17.17282372 13.17415999 18.04194148 14.81619013 19 17 C15.66864109 16.40300869 13.78724333 15.27987719 11.25 13.0625 C10.63640625 12.53785156 10.0228125 12.01320312 9.390625 11.47265625 C8 10 8 10 8 8 C7.4225 7.731875 6.845 7.46375 6.25 7.1875 C3.92636635 5.9611378 1.96175354 4.75156566 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#5B3429\",transform:\"translate(225,196)\"})),_path1217||(_path1217=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.95776959 1.36874156 13.38603107 3.4533129 20 6 C20 6.33 20 6.66 20 7 C7.16523209 7.20888411 7.16523209 7.20888411 2 6 C0 3 0 3 0 0 Z \",fill:\"#140F10\",transform:\"translate(21,193)\"})),_path1218||(_path1218=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.2477975 2.05233685 3.0022242 3.00667261 4 6 C6.22982093 6.95592268 6.22982093 6.95592268 8.875 7.5625 C12.18029394 8.41532366 14.10972477 9.07314984 17 11 C13.30458414 11.95024979 10.69541586 11.95024979 7 11 C7 10.34 7 9.68 7 9 C4.36 9 1.72 9 -1 9 C-1.09765625 2.84765625 -1.09765625 2.84765625 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#63917A\",transform:\"translate(159,155)\"})),_path1219||(_path1219=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.33 2.64 0.66 4 1 C4 1.66 4 2.32 4 3 C4.639375 3.103125 5.27875 3.20625 5.9375 3.3125 C6.618125 3.539375 7.29875 3.76625 8 4 C8.33 4.99 8.66 5.98 9 7 C10.32 7 11.64 7 13 7 C13 8.65 13 10.3 13 12 C9.56001929 10.79135813 7.50075729 9.61442808 5 7 C4.01 6.67 3.02 6.34 2 6 C2 5.34 2 4.68 2 4 C1.030625 3.87625 0.06125 3.7525 -0.9375 3.625 C-1.948125 3.41875 -2.95875 3.2125 -4 3 C-4.33 2.34 -4.66 1.68 -5 1 C-2.525 1.495 -2.525 1.495 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#58372D\",transform:\"translate(613,490)\"})),_path1220||(_path1220=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.29 0 8.58 0 13 0 C13.33 1.32 13.66 2.64 14 4 C13.06027344 3.98259766 13.06027344 3.98259766 12.1015625 3.96484375 C10.87566406 3.95130859 10.87566406 3.95130859 9.625 3.9375 C8.40683594 3.92009766 8.40683594 3.92009766 7.1640625 3.90234375 C4.95062858 3.85533666 4.95062858 3.85533666 3 5 C0.6670134 5.04022391 -1.66706666 5.04320247 -4 5 C-4 4.34 -4 3.68 -4 3 C-3.01 2.67 -2.02 2.34 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#F9D8C3\",transform:\"translate(400,466)\"})),_path1221||(_path1221=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.79921875 0.00902344 1.5984375 0.01804687 2.421875 0.02734375 C3.02515625 0.03894531 3.6284375 0.05054688 4.25 0.0625 C3.59 2.0425 2.93 4.0225 2.25 6.0625 C-0.06 6.0625 -2.37 6.0625 -4.75 6.0625 C-4.75 5.4025 -4.75 4.7425 -4.75 4.0625 C-7.39 4.0625 -10.03 4.0625 -12.75 4.0625 C-8.55587869 0.61732892 -5.36548836 -0.07890424 0 0 Z \",fill:\"#E9A77B\",transform:\"translate(412.75,451.9375)\"})),_path1222||(_path1222=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.58960204 0.57329252 9.98876038 2.63440012 15 5 C17.3538013 6.08412695 19.70798082 7.16743303 22.0625 8.25 C24.04195783 9.16603776 26.02122638 10.08248518 28 11 C28 11.33 28 11.66 28 12 C21.92671312 12.50610724 18.22771463 11.04157942 13 8 C13 7.34 13 6.68 13 6 C12.319375 5.896875 11.63875 5.79375 10.9375 5.6875 C7.32945222 4.84306329 4.34382878 3.60760999 1 2 C0.67 1.34 0.34 0.68 0 0 Z \",fill:\"#9B694B\",transform:\"translate(546,433)\"})),_path1223||(_path1223=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0 5.94 0 9 0 C9.33 1.32 9.66 2.64 10 4 C17.92 4 25.84 4 34 4 C34 4.33 34 4.66 34 5 C27.8323971 6.09857724 21.81584877 6.11539104 15.5625 6.0625 C14.54478516 6.05798828 13.52707031 6.05347656 12.47851562 6.04882812 C9.98561491 6.03712437 7.49283926 6.02072848 5 6 C5 5.01 5 4.02 5 3 C3.35 2.67 1.7 2.34 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#5FB76D\",transform:\"translate(532,406)\"})),_path1224||(_path1224=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 2.31 2 4.62 2 7 C3.093125 6.95875 4.18625 6.9175 5.3125 6.875 C9 7 9 7 12 9 C13.98799818 9.70164642 15.98698517 10.37372872 18 11 C15.12003195 11.82284801 12.55511662 12.13537302 9.5625 12.125 C8.45068359 12.12886719 8.45068359 12.12886719 7.31640625 12.1328125 C5 12 5 12 0 11 C0 7.37 0 3.74 0 0 Z \",fill:\"#0A151E\",transform:\"translate(212,398)\"})),_path1225||(_path1225=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.33 1.65 -0.66 3.3 -1 5 C-1.33 4.34 -1.66 3.68 -2 3 C-3.98 3 -5.96 3 -8 3 C-7.34 4.98 -6.68 6.96 -6 9 C-7.64767247 8.71890887 -9.29313145 8.42481474 -10.9375 8.125 C-11.85402344 7.96257812 -12.77054688 7.80015625 -13.71484375 7.6328125 C-14.84599609 7.31957031 -14.84599609 7.31957031 -16 7 C-16.33 6.34 -16.66 5.68 -17 5 C-16.67 4.34 -16.34 3.68 -16 3 C-13.03 3.495 -13.03 3.495 -10 4 C-10 3.01 -10 2.02 -10 1 C-6.56484998 0.37542727 -3.50935186 0 0 0 Z \",fill:\"#8B2C1D\",transform:\"translate(172,339)\"})),_path1226||(_path1226=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C0.34 2 -0.32 2 -1 2 C-1 2.66 -1 3.32 -1 4 C-0.34 4.33 0.32 4.66 1 5 C-2.66666667 8.66666667 -6.33333333 12.33333333 -10 16 C-10.33 15.34 -10.66 14.68 -11 14 C-14.96 14 -18.92 14 -23 14 C-23 13.67 -23 13.34 -23 13 C-21.7315625 13.08314453 -21.7315625 13.08314453 -20.4375 13.16796875 C-13.25383089 13.27442901 -13.25383089 13.27442901 -7.42578125 9.51953125 C-6.04598573 7.54803044 -4.72908612 5.53055852 -3.48828125 3.46875 C-2 1 -2 1 0 0 Z \",fill:\"#F3AE8D\",transform:\"translate(133,332)\"})),_path1227||(_path1227=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.22589844 0.01353516 1.22589844 0.01353516 2.4765625 0.02734375 C3.41628906 0.04474609 3.41628906 0.04474609 4.375 0.0625 C2.5 5.9375 2.5 5.9375 1.375 7.0625 C-0.14428038 7.13429964 -1.66667482 7.14642007 -3.1875 7.125 C-4.01378906 7.11597656 -4.84007812 7.10695313 -5.69140625 7.09765625 C-6.32949219 7.08605469 -6.96757812 7.07445312 -7.625 7.0625 C-7.295 6.0725 -6.965 5.0825 -6.625 4.0625 C-5.635 4.0625 -4.645 4.0625 -3.625 4.0625 C-4.615 3.7325 -5.605 3.4025 -6.625 3.0625 C-6.625 2.4025 -6.625 1.7425 -6.625 1.0625 C-4.21954362 -0.14022819 -2.67503047 -0.03821472 0 0 Z \",fill:\"#1B6961\",transform:\"translate(157.625,310.9375)\"})),_path1228||(_path1228=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C10.01441088 -0.14058054 19.88510137 0.2745314 29.875 1 C31.25647941 1.09679776 32.63798983 1.19315384 34.01953125 1.2890625 C37.34668343 1.52173048 40.67345958 1.75876968 44 2 C44 2.33 44 2.66 44 3 C34.24590576 4.2900199 24.96387691 3.59610016 15.25 2.5625 C13.7631209 2.41241672 12.27614169 2.26332186 10.7890625 2.11523438 C7.19148547 1.75484706 3.59543767 1.38120842 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#B8947A\",transform:\"translate(533,301)\"})),_path1229||(_path1229=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.6354693 0.46205332 3.25055661 0.9952859 4.859375 1.54296875 C1.73736054 4.66498321 -1.84606001 4.50983167 -6.140625 4.54296875 C-9.2081847 4.08560669 -12.16020338 3.39552434 -15.140625 2.54296875 C-11.00592017 -1.77150585 -5.46966096 -1.16779258 0 0 Z \",fill:\"#B6745B\",transform:\"translate(497.140625,297.45703125)\"})),_path1230||(_path1230=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.33837891 -0.34057617 2.33837891 -0.34057617 5.2265625 -0.29296875 C6.7734375 -0.2784668 6.7734375 -0.2784668 8.3515625 -0.26367188 C9.43179688 -0.23853516 10.51203125 -0.21339844 11.625 -0.1875 C12.71296875 -0.17396484 13.8009375 -0.16042969 14.921875 -0.14648438 C17.61507409 -0.11104754 20.30729374 -0.06164331 23 0 C23 0.33 23 0.66 23 1 C21.46279297 1.07347656 21.46279297 1.07347656 19.89453125 1.1484375 C18.5338294 1.22351071 17.17315356 1.29905655 15.8125 1.375 C15.13896484 1.4059375 14.46542969 1.436875 13.77148438 1.46875 C9.82031992 1.70003768 6.49038801 2.07775733 3 4 C1.58146815 5.67625949 1.58146815 5.67625949 0.6875 7.625 C0.130625 8.73875 -0.42625 9.8525 -1 11 C-1.66 11 -2.32 11 -3 11 C-2.25 3.375 -2.25 3.375 0 0 Z \",fill:\"#755D41\",transform:\"translate(212,296)\"})),_path1231||(_path1231=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-0.99 2 -1.98 2 -3 2 C-3.66 7.28 -4.32 12.56 -5 18 C-2.69 18 -0.38 18 2 18 C2 18.33 2 18.66 2 19 C-0.97 19 -3.94 19 -7 19 C-7 13.06 -7 7.12 -7 1 C-4 0 -4 0 0 0 Z \",fill:\"#748D4F\",transform:\"translate(92,270)\"})),_path1232||(_path1232=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.04898437 0.92683594 1.09796875 1.85367187 1.1484375 2.80859375 C1.22320313 4.00613281 1.29796875 5.20367187 1.375 6.4375 C1.44460937 7.63246094 1.51421875 8.82742188 1.5859375 10.05859375 C1.72257812 11.02925781 1.85921875 11.99992187 2 13 C2.66 13.33 3.32 13.66 4 14 C-5.24 14 -14.48 14 -24 14 C-24 13.67 -24 13.34 -24 13 C-18.555 12.505 -18.555 12.505 -13 12 C-13.33 10.35 -13.66 8.7 -14 7 C-13.01 7 -12.02 7 -11 7 C-11 8.98 -11 10.96 -11 13 C-7.37 13 -3.74 13 0 13 C0 11.35 0 9.7 0 8 C-0.66 7.67 -1.32 7.34 -2 7 C-1.34 4.69 -0.68 2.38 0 0 Z \",fill:\"#B16A4F\",transform:\"translate(24,256)\"})),_path1233||(_path1233=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.41390868 0.46671627 9.20517932 1.24297811 14 4 C13.979375 4.78375 13.95875 5.5675 13.9375 6.375 C13.81315937 8.98114961 13.81315937 8.98114961 15 11 C13.02 10.34 11.04 9.68 9 9 C9.33 8.01 9.66 7.02 10 6 C7.69 5.67 5.38 5.34 3 5 C2.67 4.01 2.34 3.02 2 2 C1.34 2 0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#2E1D19\",transform:\"translate(81,163)\"})),_path1234||(_path1234=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C3 3 3 3 -0.0625 4.68359375 C-1.3701545 5.27898818 -2.68301155 5.863047 -4 6.4375 C-5.01525757 6.89491577 -5.01525757 6.89491577 -6.05102539 7.36157227 C-8.02985191 8.25078132 -10.01425506 9.12637525 -12 10 C-12.98871094 10.4434375 -13.97742188 10.886875 -14.99609375 11.34375 C-16.99325104 12.23847647 -18.99587273 13.12099681 -21 14 C-18.86178091 8.25664408 -13.22373487 6.49029956 -8 4 C-6.01071657 3.30200581 -4.01495907 2.61998741 -2 2 C-1.34 1.34 -0.68 0.68 0 0 Z \",fill:\"#473D35\",transform:\"translate(592,114)\"})),_path1235||(_path1235=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.6875 1.75 0.6875 1.75 1 4 C0.04084432 5.3630107 -0.97186389 6.68824014 -2 8 C-3.43493264 10.9569862 -4.72499686 13.97105853 -6 17 C-7.65 17 -9.3 17 -11 17 C-9.16508812 12.25981099 -7.08058541 7.63586749 -5 3 C-4.67 3.66 -4.34 4.32 -4 5 C-2.29159719 3.36587557 -1.06546953 2.13093906 0 0 Z \",fill:\"#4C3129\",transform:\"translate(115,609)\"})),_path1236||(_path1236=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C0.34 2 -0.32 2 -1 2 C-1 3.32 -1 4.64 -1 6 C-1.66 6 -2.32 6 -3 6 C-3.26683594 6.54914062 -3.53367188 7.09828125 -3.80859375 7.6640625 C-8.17493647 16.22495741 -12.41078708 22.38402843 -21 27 C-20 25 -19 23 -18 21 C-17.01 21 -16.02 21 -15 21 C-14.67 20.01 -14.34 19.02 -14 18 C-13.34 18 -12.68 18 -12 18 C-11.88527344 17.41734375 -11.77054688 16.8346875 -11.65234375 16.234375 C-10.95175938 13.83476865 -10.01807405 12.27139067 -8.5625 10.25 C-8.13066406 9.63640625 -7.69882813 9.0228125 -7.25390625 8.390625 C-6.84011719 7.93171875 -6.42632812 7.4728125 -6 7 C-5.34 7 -4.68 7 -4 7 C-4 6.34 -4 5.68 -4 5 C-3.34 5 -2.68 5 -2 5 C-2 3.68 -2 2.36 -2 1 C-1.34 0.67 -0.68 0.34 0 0 Z \",fill:\"#8F624B\",transform:\"translate(138,526)\"})),_path1237||(_path1237=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0 5.28 0 8 0 C7 3 7 3 4.4296875 4.70703125 C0.45007928 6.20731635 -2.74001242 6.14026511 -6.875 5.6875 C-7.56335938 5.62626953 -8.25171875 5.56503906 -8.9609375 5.50195312 C-10.64210098 5.35018142 -12.32133301 5.17726382 -14 5 C-14 4.67 -14 4.34 -14 4 C-11.36 4 -8.72 4 -6 4 C-6 3.34 -6 2.68 -6 2 C-4.02 2 -2.04 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#A6212B\",transform:\"translate(242,488)\"})),_path1238||(_path1238=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.94313335 2.91470003 2.33649185 4.03196036 2.78125 7.3515625 C2.90113281 8.20363281 3.02101563 9.05570312 3.14453125 9.93359375 C3.26183594 10.82175781 3.37914062 11.70992188 3.5 12.625 C4.38812531 19.17370418 5.48570385 25.56424136 7 32 C6.34 32 5.68 32 5 32 C5 31.34 5 30.68 5 30 C4.34 30 3.68 30 3 30 C3 28.02 3 26.04 3 24 C2.34 24 1.68 24 1 24 C0.67 16.08 0.34 8.16 0 0 Z \",fill:\"#F0BB88\",transform:\"translate(337,432)\"})),_path1239||(_path1239=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.6 0 13.2 0 20 0 C19.67 0.66 19.34 1.32 19 2 C18.01 2.33 17.02 2.66 16 3 C18.31 3.66 20.62 4.32 23 5 C23 5.33 23 5.66 23 6 C14.86647685 5.37812097 7.72591369 3.63811687 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#875C43\",transform:\"translate(501,420)\"})),_path1240||(_path1240=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.66 1.32 1.32 2 2 C1.01 2.495 1.01 2.495 0 3 C-0.65555119 5.52733235 -0.65555119 5.52733235 -1 8 C-0.01 8.33 0.98 8.66 2 9 C0.41328692 11.38006962 -0.87846958 13.14366088 -3 15 C-3.66 15 -4.32 15 -5 15 C-5 14.01 -5 13.02 -5 12 C-5.66 12 -6.32 12 -7 12 C-7 11.34 -7 10.68 -7 10 C-6.34 9.67 -5.68 9.34 -5 9 C-4.67 8.01 -4.34 7.02 -4 6 C-4.99 5.34 -5.98 4.68 -7 4 C-4.69 2.68 -2.38 1.36 0 0 Z \",fill:\"#8C8152\",transform:\"translate(92,379)\"})),_path1241||(_path1241=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C4.75137513 6.19717352 3.17309311 9.49279161 0.12890625 15.05859375 C-0.24363281 15.69925781 -0.61617187 16.33992188 -1 17 C-1.33 17 -1.66 17 -2 17 C-2.05441656 15.10448978 -2.09298035 13.2085208 -2.125 11.3125 C-2.14820313 10.25675781 -2.17140625 9.20101563 -2.1953125 8.11328125 C-1.99858729 4.97748141 -1.33057654 2.82354627 0 0 Z \",fill:\"#F5F0DF\",transform:\"translate(200,379)\"})),_path1242||(_path1242=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.20029501 3.29101502 1.38280451 6.58280107 1.5625 9.875 C1.61857422 10.7928125 1.67464844 11.710625 1.73242188 12.65625 C2.05475903 18.75916675 2.29606197 24.98904292 1 31 C0.34 31.66 -0.32 32.32 -1 33 C-1.02920143 28.81251481 -1.04686646 24.62505609 -1.0625 20.4375 C-1.07087891 19.25607422 -1.07925781 18.07464844 -1.08789062 16.85742188 C-1.10392999 11.13136928 -1.0510705 5.63605518 0 0 Z \",fill:\"#9D8276\",transform:\"translate(312,337)\"})),_path1243||(_path1243=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.6 0 13.2 0 20 0 C20 0.66 20 1.32 20 2 C17.69 3.32 15.38 4.64 13 6 C12.67 5.34 12.34 4.68 12 4 C11.01 4.33 10.02 4.66 9 5 C8.67 3.68 8.34 2.36 8 1 C6.02 1 4.04 1 2 1 C1.67 2.98 1.34 4.96 1 7 C-0.65 7.33 -2.3 7.66 -4 8 C-3.67 7.34 -3.34 6.68 -3 6 C-2.01 6 -1.02 6 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#FAA992\",transform:\"translate(328,362)\"})),_path1244||(_path1244=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.33 0.99 -0.66 1.98 -1 3 C-17.70842825 5.48063781 -17.70842825 5.48063781 -26 4 C-25.67 3.34 -25.34 2.68 -25 2 C-21.04 2 -17.08 2 -13 2 C-13.66 1.34 -14.32 0.68 -15 0 C-12.87562788 -0.19448477 -10.75046809 -0.38038289 -8.625 -0.5625 C-7.44164062 -0.66691406 -6.25828125 -0.77132813 -5.0390625 -0.87890625 C-2 -1 -2 -1 0 0 Z \",fill:\"#2F251F\",transform:\"translate(558,355)\"})),_path1245||(_path1245=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.14581423 -0.02888514 6.29159469 -0.04675923 9.4375 -0.0625 C10.33533203 -0.07087891 11.23316406 -0.07925781 12.15820312 -0.08789062 C13.01220703 -0.09111328 13.86621094 -0.09433594 14.74609375 -0.09765625 C15.93223267 -0.10551147 15.93223267 -0.10551147 17.14233398 -0.11352539 C19 0 19 0 20 1 C20.04092937 3.33297433 20.04241723 5.66705225 20 8 C19.34 8 18.68 8 18 8 C18 6.35 18 4.7 18 3 C17.20335937 3.01160156 16.40671875 3.02320313 15.5859375 3.03515625 C5.06151142 3.12478032 5.06151142 3.12478032 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#CB9897\",transform:\"translate(363,340)\"})),_path1246||(_path1246=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C4.62 2 9.24 2 14 2 C14.33 2.66 14.66 3.32 15 4 C13.12054688 3.96519531 13.12054688 3.96519531 11.203125 3.9296875 C9.5520893 3.91092573 7.90104715 3.89272597 6.25 3.875 C5.425 3.85824219 4.6 3.84148437 3.75 3.82421875 C2.95078125 3.81777344 2.1515625 3.81132812 1.328125 3.8046875 C0.22839355 3.78897705 0.22839355 3.78897705 -0.89355469 3.77294922 C-3.29896076 4.03222456 -4.91251494 4.80774075 -7 6 C-7.33 5.67 -7.66 5.34 -8 5 C-9.98 9.455 -9.98 9.455 -12 14 C-13 10 -13 10 -11.9375 7 C-8.80416546 2.14838523 -5.80594623 0 0 0 Z \",fill:\"#4E6765\",transform:\"translate(117,326)\"})),_path1247||(_path1247=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.33944736 0.28730055 4.6739143 0.61936779 7 1 C7 1.66 7 2.32 7 3 C7.66 3 8.32 3 9 3 C9 4.32 9 5.64 9 7 C8.2575 6.95875 7.515 6.9175 6.75 6.875 C3.91241048 7.00398134 2.41226062 7.57051222 0 9 C-1.36623674 6.26752652 -1.128426 4.01801098 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#EF8970\",transform:\"translate(495,329)\"})),_path1248||(_path1248=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C8.91 1.98 8.91 1.98 18 4 C17.67 3.01 17.34 2.02 17 1 C19.64 1 22.28 1 25 1 C25 1.66 25 2.32 25 3 C18.44694743 6.34933798 15.35659146 7.09482891 8.3125 5.0625 C7.61060547 4.86720703 6.90871094 4.67191406 6.18554688 4.47070312 C4.45491056 3.98800864 2.72715934 3.49499154 1 3 C1 3.66 1 4.32 1 5 C-0.65 5 -2.3 5 -4 5 C-2.68 4.67 -1.36 4.34 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#8D694E\",transform:\"translate(543,324)\"})),_path1249||(_path1249=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.66 1.32 1.32 2 2 C1.625 4.125 1.625 4.125 1 6 C0.278125 5.505 -0.44375 5.01 -1.1875 4.5 C-8.06546255 1.02826652 -17.64932908 2.63243332 -25 4 C-25 3.01 -25 2.02 -25 1 C-21.58444097 0.63455844 -18.1674656 0.28462134 -14.75 -0.0625 C-13.29787109 -0.2181543 -13.29787109 -0.2181543 -11.81640625 -0.37695312 C-10.88183594 -0.47041016 -9.94726562 -0.56386719 -8.984375 -0.66015625 C-8.12553711 -0.74918213 -7.26669922 -0.83820801 -6.38183594 -0.92993164 C-3.98801058 -1.0003527 -2.25047285 -0.80196576 0 0 Z \",fill:\"#40412E\",transform:\"translate(57,325)\"})),_path1250||(_path1250=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0.33 3.3 0.66 5 1 C4.55966813 6.19591612 4.11696661 9.66335081 1 14 C0.34 13.67 -0.32 13.34 -1 13 C-1.02696365 11.20841511 -1.04637917 9.41671527 -1.0625 7.625 C-1.07410156 6.62726563 -1.08570313 5.62953125 -1.09765625 4.6015625 C-1 2 -1 2 0 0 Z \",fill:\"#E1D5A0\",transform:\"translate(254,309)\"})),_path1251||(_path1251=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.79244141 0.01740234 1.79244141 0.01740234 3.62109375 0.03515625 C5.41740234 0.04869141 5.41740234 0.04869141 7.25 0.0625 C8.17683594 0.07410156 9.10367187 0.08570313 10.05859375 0.09765625 C7.8863902 2.83042846 6.2003141 4.8265454 2.72265625 5.65234375 C0.49584923 5.88415647 -1.70357743 6.04402637 -3.94140625 6.09765625 C-3.98412725 4.4315372 -3.98204457 2.7638274 -3.94140625 1.09765625 C-2.94140625 0.09765625 -2.94140625 0.09765625 0 0 Z \",fill:\"#A77158\",transform:\"translate(427.94140625,307.90234375)\"})),_path1252||(_path1252=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.18177917 0.47290023 8.66515852 3.17722033 12.8125 6.0625 C13.50537109 6.53494141 14.19824219 7.00738281 14.91210938 7.49414062 C16.6130648 8.6554826 18.30722395 9.8267678 20 11 C19.67 11.66 19.34 12.32 19 13 C14.72247692 12.09620737 11.44205999 9.97288323 7.8125 7.625 C7.17119141 7.22539062 6.52988281 6.82578125 5.86914062 6.4140625 C1.12211361 3.36634083 1.12211361 3.36634083 0 0 Z \",fill:\"#462E28\",transform:\"translate(148,171)\"})),_path1253||(_path1253=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C0.00664799 4.67063747 -0.99431758 6.33675599 -2 8 C-2.71401232 11.19395026 -2.71401232 11.19395026 -3 14 C-5.64 14 -8.28 14 -11 14 C-9.85753726 10.57261177 -8.52599716 9.52599716 -6 7 C-5.29875 5.948125 -4.5975 4.89625 -3.875 3.8125 C-2 1 -2 1 0 0 Z \",fill:\"#3E2921\",transform:\"translate(87,612)\"})),_path1254||(_path1254=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.16470403 8.77163325 0.64617393 17.44232179 0 26.1875 C-0.09671122 27.53447962 -0.19306757 28.88148477 -0.2890625 30.22851562 C-0.52256992 33.48594415 -0.75962219 36.7430725 -1 40 C-1.66 40 -2.32 40 -3 40 C-3.42098629 26.35692583 -2.24946569 13.45662509 0 0 Z \",fill:\"#E8BC96\",transform:\"translate(289,586)\"})),_path1255||(_path1255=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1 2 1 2 0.50268555 3.77172852 C0.2169165 4.46709717 -0.06885254 5.16246582 -0.36328125 5.87890625 C-0.67330078 6.63494141 -0.98332031 7.39097656 -1.30273438 8.16992188 C-1.63595703 8.95947266 -1.96917969 9.74902344 -2.3125 10.5625 C-2.79493164 11.75262695 -2.79493164 11.75262695 -3.28710938 12.96679688 C-5.74272237 18.87136119 -5.74272237 18.87136119 -8 20 C-8 19.01 -8 18.02 -8 17 C-8.66 17.33 -9.32 17.66 -10 18 C-8.50829734 13.0276578 -6.39542583 8.58154261 -4 4 C-3.34 4 -2.68 4 -2 4 C-1.34 2.68 -0.68 1.36 0 0 Z \",fill:\"#5E3D2E\",transform:\"translate(155,549)\"})),_path1256||(_path1256=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C1.5671875 2.27972656 2.134375 2.55945313 2.71875 2.84765625 C5.67287505 4.33989408 7.96336287 6.31550548 10.5 8.4375 C14.34127389 11.65338296 14.34127389 11.65338296 18.34375 14.66015625 C18.8903125 15.10230469 19.436875 15.54445313 20 16 C20 16.66 20 17.32 20 18 C16.65750371 17.40312566 14.53563658 16.26396123 12 14 C12 13.34 12 12.68 12 12 C11.195625 11.62875 11.195625 11.62875 10.375 11.25 C7.4176018 9.69347463 4.70275949 7.96564327 2 6 C2 5.34 2 4.68 2 4 C0.68 3.34 -0.64 2.68 -2 2 C-1.34 1.34 -0.68 0.68 0 0 Z \",fill:\"#714C39\",transform:\"translate(572,519)\"})),_path1257||(_path1257=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 4.29 1 8.58 1 13 C2.65 13.33 4.3 13.66 6 14 C8.27598312 15.46136877 10.00336219 17.1426625 12 19 C12 19.33 12 19.66 12 20 C10.3745692 19.85904936 8.74965949 19.71207913 7.125 19.5625 C6.22007812 19.48128906 5.31515625 19.40007812 4.3828125 19.31640625 C2 19 2 19 0 18 C0 12.06 0 6.12 0 0 Z \",fill:\"#2A0E0B\",transform:\"translate(476,476)\"})),_path1258||(_path1258=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.3 0 6.6 0 10 0 C10 1.98 10 3.96 10 6 C5.38 6.33 0.76 6.66 -4 7 C-4 6.01 -4 5.02 -4 4 C-0.7 4 2.6 4 6 4 C6 3.34 6 2.68 6 2 C4.02 2 2.04 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#B0705E\",transform:\"translate(350,488)\"})),_path1259||(_path1259=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.66 1.32 1.32 2 2 C0.71086513 2.67154933 -0.58140204 3.33708859 -1.875 4 C-2.59429688 4.37125 -3.31359375 4.7425 -4.0546875 5.125 C-6 6 -6 6 -8 6 C-8 6.66 -8 7.32 -8 8 C-7.34 8.33 -6.68 8.66 -6 9 C-7.78953185 9.83790789 -9.58169695 10.67019396 -11.375 11.5 C-12.37273438 11.9640625 -13.37046875 12.428125 -14.3984375 12.90625 C-17 14 -17 14 -19 14 C-19 12.68 -19 11.36 -19 10 C-18.12988281 9.63648438 -18.12988281 9.63648438 -17.2421875 9.265625 C-12.47384257 7.21980044 -8.27180605 4.9803298 -4 2 C-2.6808418 1.30570621 -1.35350594 0.62469505 0 0 Z \",fill:\"#52382D\",transform:\"translate(19,460)\"})),_path1260||(_path1260=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.21236328 0.04060547 1.21236328 0.04060547 2.44921875 0.08203125 C3.06410156 0.11683594 3.67898438 0.15164063 4.3125 0.1875 C4.3125 2.1675 4.3125 4.1475 4.3125 6.1875 C2.68759046 6.21448189 1.06255367 6.23388757 -0.5625 6.25 C-1.91988281 6.26740234 -1.91988281 6.26740234 -3.3046875 6.28515625 C-5.6875 6.1875 -5.6875 6.1875 -7.6875 5.1875 C-7.6875 3.1875 -7.6875 3.1875 -6.48046875 1.57421875 C-4.17167958 -0.21144608 -2.88126329 -0.12527232 0 0 Z \",fill:\"#F9B7A5\",transform:\"translate(381.6875,465.8125)\"})),_path1261||(_path1261=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.66 1.98 1.32 3 2 C2.67 2.99 2.34 3.98 2 5 C1.34 5 0.68 5 0 5 C0 5.66 0 6.32 0 7 C-1.65 7 -3.3 7 -5 7 C-5 6.34 -5 5.68 -5 5 C-5.66 5 -6.32 5 -7 5 C-7 4.34 -7 3.68 -7 3 C-7.66 3 -8.32 3 -9 3 C-9 5.31 -9 7.62 -9 10 C-9.33 10 -9.66 10 -10 10 C-10 7.36 -10 4.72 -10 2 C-6.59677126 -0.09429461 -3.96047946 -0.33706208 0 0 Z \",fill:\"#3E0808\",transform:\"translate(337,463)\"})),_path1262||(_path1262=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.99 0.33 -1.98 0.66 -3 1 C-3 1.66 -3 2.32 -3 3 C-8.36095277 1.41078475 -13.70843973 -0.18972938 -19 -2 C-19 -2.66 -19 -3.32 -19 -4 C-12.37425477 -6.20858174 -6.093916 -2.58931213 0 0 Z \",fill:\"#A06B4C\",transform:\"translate(605,432)\"})),_path1263||(_path1263=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.95 0 9.9 0 15 0 C14.67 1.32 14.34 2.64 14 4 C8.72 4 3.44 4 -2 4 C-1.34 2.68 -0.68 1.36 0 0 Z \",fill:\"#C97E6D\",transform:\"translate(226,354)\"})),_path1264||(_path1264=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.875 4.75 4.875 4.75 6 7 C5.67 7.66 5.34 8.32 5 9 C0.05 9 -4.9 9 -10 9 C-10 7.66666667 -10 6.33333333 -10 5 C-5.45194365 4.82164485 -2.1205746 5.00214565 2 7 C1.34 6.01 0.68 5.02 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#B7D68E\",transform:\"translate(523,347)\"})),_path1265||(_path1265=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0.33 3.3 0.66 5 1 C5.33 2.65 5.66 4.3 6 6 C6.66 6 7.32 6 8 6 C8.33 5.34 8.66 4.68 9 4 C9 4.99 9 5.98 9 7 C6.35541621 8.32229189 4.32238699 8.09677194 1.375 8.0625 C0.37210937 8.05347656 -0.63078125 8.04445313 -1.6640625 8.03515625 C-2.43492187 8.02355469 -3.20578125 8.01195312 -4 8 C-4 7.34 -4 6.68 -4 6 C-3.34 5.67 -2.68 5.34 -2 5 C-1.27840576 3.35636866 -0.60648579 1.68949614 0 0 Z \",fill:\"#071C14\",transform:\"translate(443,303)\"})),_path1266||(_path1266=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 1.32 0 2.64 0 4 C-4.95 4 -9.9 4 -15 4 C-15 2.68 -15 1.36 -15 0 C-9.96266834 -1.5111995 -5.11828973 -0.64599773 0 0 Z \",fill:\"#83A675\",transform:\"translate(437,269)\"})),_path1267||(_path1267=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.49080078 0.16628906 1.49080078 0.16628906 3.01171875 0.3359375 C3.77097656 0.43132812 4.53023437 0.52671875 5.3125 0.625 C4 2.125 4 2.125 2.3125 3.625 C1.3225 3.625 0.3325 3.625 -0.6875 3.625 C-0.3575 4.285 -0.0275 4.945 0.3125 5.625 C0.38200541 7.16523996 0.39702357 8.70834988 0.375 10.25 C0.36597656 11.06726563 0.35695312 11.88453125 0.34765625 12.7265625 C0.33605469 13.35304688 0.32445312 13.97953125 0.3125 14.625 C-0.3475 14.625 -1.0075 14.625 -1.6875 14.625 C-1.73648438 13.91472656 -1.78546875 13.20445312 -1.8359375 12.47265625 C-1.91070312 11.55355469 -1.98546875 10.63445312 -2.0625 9.6875 C-2.16691406 8.31271484 -2.16691406 8.31271484 -2.2734375 6.91015625 C-2.41007813 6.15605469 -2.54671875 5.40195312 -2.6875 4.625 C-3.3475 4.295 -4.0075 3.965 -4.6875 3.625 C-4.3575 4.615 -4.0275 5.605 -3.6875 6.625 C-4.6775 6.295 -5.6675 5.965 -6.6875 5.625 C-6.6875 4.635 -6.6875 3.645 -6.6875 2.625 C-7.3475 2.295 -8.0075 1.965 -8.6875 1.625 C-5.1388865 -0.74074234 -4.1110475 -0.48365265 0 0 Z \",fill:\"#8D5647\",transform:\"translate(213.6875,253.375)\"})),_path1268||(_path1268=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 1.65 0 3.3 0 5 C-1.32 4.67 -2.64 4.34 -4 4 C-3.67 7.3 -3.34 10.6 -3 14 C-4.98 14.33 -6.96 14.66 -9 15 C-9 14.34 -9 13.68 -9 13 C-8.34 13 -7.68 13 -7 13 C-7.20625 11.948125 -7.4125 10.89625 -7.625 9.8125 C-8.00157937 5.98394304 -8.07537455 4.20739704 -6 1 C-3.87387453 0.32586265 -2.22091319 0 0 0 Z \",fill:\"#C8715D\",transform:\"translate(62,243)\"})),_path1269||(_path1269=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.96486328 0.19916016 0.96486328 0.19916016 1.94921875 0.40234375 C8.42591708 1.66811789 14.75538153 2.34270542 21.34765625 2.65625 C24 3 24 3 26 5 C22.43765572 5.08741124 18.87558892 5.14052896 15.3125 5.1875 C14.30509766 5.21263672 13.29769531 5.23777344 12.25976562 5.26367188 C3.04177701 5.35493909 3.04177701 5.35493909 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#D0C39F\",transform:\"translate(267,234)\"})),_path1270||(_path1270=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.20334178 1.28059409 12.42353543 5.41176966 18 10 C18 10.33 18 10.66 18 11 C12.41476324 10.55628006 9.11813163 9.16227295 4.5625 5.9375 C3.51191406 5.20402344 2.46132812 4.47054687 1.37890625 3.71484375 C0.59386719 3.14894531 -0.19117188 2.58304688 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#4F3122\",transform:\"translate(216,211)\"})),_path1271||(_path1271=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.99 0 1.98 0 3 C-0.71285156 3.12117187 -1.42570313 3.24234375 -2.16015625 3.3671875 C-8.58043942 4.4746035 -8.58043942 4.4746035 -14.875 6.125 C-17.77026831 6.93567513 -20.01835219 7.18070593 -23 7 C-23 6.34 -23 5.68 -23 5 C-20.1062867 4.15862957 -17.21040603 3.3266964 -14.3125 2.5 C-13.49587891 2.26152344 -12.67925781 2.02304688 -11.83789062 1.77734375 C-7.80828875 0.63535132 -4.23495153 -0.34500623 0 0 Z \",fill:\"#387D76\",transform:\"translate(626,177)\"})),_path1272||(_path1272=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 3 0 3 -1.35546875 4.6484375 C-1.96003906 5.21820313 -2.56460937 5.78796875 -3.1875 6.375 C-5.42155573 8.49241828 -7.50932724 10.57144032 -9.5625 12.875 C-12.40976456 15.35723064 -14.28118601 15.74054786 -18 16 C-16.06745228 13.9754262 -14.36841312 12.57894208 -12 11 C-10.80767387 8.94996045 -10.80767387 8.94996045 -10 7 C-9.34 7 -8.68 7 -8 7 C-7.79375 6.401875 -7.5875 5.80375 -7.375 5.1875 C-5.49073918 2.18981233 -3.18867916 1.38638224 0 0 Z \",fill:\"#3A241F\",transform:\"translate(429,167)\"})),_path1273||(_path1273=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C-6.39556356 6.84397071 -14.72630933 12.13940315 -23.9765625 16.52734375 C-27.01796491 17.93991141 -27.01796491 17.93991141 -29.7734375 19.75390625 C-30.50820313 20.16511719 -31.24296875 20.57632813 -32 21 C-32.66 20.67 -33.32 20.34 -34 20 C-27.74784952 15.91252058 -21.44744679 12.06562733 -14.8515625 8.55859375 C-10.6299775 6.25117948 -6.5357374 3.73515256 -2.43359375 1.22265625 C-1.22896484 0.61744141 -1.22896484 0.61744141 0 0 Z \",fill:\"#332421\",transform:\"translate(488,152)\"})),_path1274||(_path1274=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1 2 2 4 3 6 C2.67 6.66 2.34 7.32 2 8 C1.34 8 0.68 8 0 8 C-0.17015625 8.69867187 -0.3403125 9.39734375 -0.515625 10.1171875 C-0.75796875 11.02726563 -1.0003125 11.93734375 -1.25 12.875 C-1.48203125 13.77992188 -1.7140625 14.68484375 -1.953125 15.6171875 C-3 18 -3 18 -7 20 C-6.34 16.7 -5.68 13.4 -5 10 C-4.34 10 -3.68 10 -3 10 C-2.87625 9.46375 -2.7525 8.9275 -2.625 8.375 C-1.87793984 5.5361714 -0.94696636 2.77776798 0 0 Z \",fill:\"#674435\",transform:\"translate(140,566)\"})),_path1275||(_path1275=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C3.56768559 13.75545852 3.56768559 13.75545852 3 20 C1.48046875 21.71484375 1.48046875 21.71484375 0 23 C-2.09478828 14.58343993 -2.31362478 8.38688983 0 0 Z \",fill:\"#523428\",transform:\"translate(369,542)\"})),_path1276||(_path1276=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C1.82374108 4.42271974 -0.58479276 8.70459979 -3 13 C-3.556875 14.010625 -4.11375 15.02125 -4.6875 16.0625 C-5.120625 16.701875 -5.55375 17.34125 -6 18 C-6.66 18 -7.32 18 -8 18 C-7.46017702 13.20637191 -6.09172986 9.79507749 -3.6875 5.625 C-3.09324219 4.56539062 -2.49898437 3.50578125 -1.88671875 2.4140625 C-1.26410156 1.61742187 -0.64148438 0.82078125 0 0 Z \",fill:\"#805440\",transform:\"translate(156,520)\"})),_path1277||(_path1277=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.33 0.99 -0.66 1.98 -1 3 C-2.30324219 3.19916016 -2.30324219 3.19916016 -3.6328125 3.40234375 C-4.78523438 3.57894531 -5.93765625 3.75554687 -7.125 3.9375 C-8.26195312 4.11152344 -9.39890625 4.28554688 -10.5703125 4.46484375 C-12.81333108 4.8148364 -15.05118412 5.20022555 -17.28125 5.625 C-20.31122547 6.04292765 -21.48047805 5.64737974 -24 4 C-20.93178125 0.93178125 -17.14200139 1.341106 -13 1 C-12.0203125 0.9071875 -11.040625 0.814375 -10.03125 0.71875 C-2.44444444 0 -2.44444444 0 0 0 Z \",fill:\"#171818\",transform:\"translate(417,501)\"})),_path1278||(_path1278=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.33 0 0.66 0 1 C-6.93 1 -13.86 1 -21 1 C-20.67 0.01 -20.34 -0.98 -20 -2 C-13.13221686 -4.57354837 -6.30740784 -3.220804 0 0 Z \",fill:\"#FAC7AF\",transform:\"translate(363,501)\"})),_path1279||(_path1279=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.57432497 3.14864995 0.71895552 5.64487425 0 9 C-0.99 9.66 -1.98 10.32 -3 11 C-3.54475978 13.59270699 -3.92400149 16.00451945 -4.1875 18.625 C-4.26935547 19.33140625 -4.35121094 20.0378125 -4.43554688 20.765625 C-4.63580725 22.5090683 -4.81949401 24.25440086 -5 26 C-5.33 26 -5.66 26 -6 26 C-6.05807043 22.89591193 -6.09361914 19.7919636 -6.125 16.6875 C-6.14175781 15.80642578 -6.15851563 14.92535156 -6.17578125 14.01757812 C-6.18222656 13.17001953 -6.18867188 12.32246094 -6.1953125 11.44921875 C-6.20578613 10.66893311 -6.21625977 9.88864746 -6.22705078 9.0847168 C-6 7 -6 7 -4 4 C-3.34 4 -2.68 4 -2 4 C-1.34 2.68 -0.68 1.36 0 0 Z \",fill:\"#F59681\",transform:\"translate(157,456)\"})),_path1280||(_path1280=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0 3.96 0 6 0 C6 0.66 6 1.32 6 2 C7.32 2 8.64 2 10 2 C10 2.66 10 3.32 10 4 C11.32 4.33 12.64 4.66 14 5 C14 5.99 14 6.98 14 8 C14.99 8 15.98 8 17 8 C17 8.66 17 9.32 17 10 C15.20214844 10.62841797 15.20214844 10.62841797 13 11 C10.56859202 9.45540991 8.46121595 7.93771109 6.25 6.125 C5.64800781 5.65191406 5.04601562 5.17882812 4.42578125 4.69140625 C2.92270245 3.49507822 1.45768005 2.25124559 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#F0D7B6\",transform:\"translate(488,442)\"})),_path1281||(_path1281=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.96916636 0.51405169 9.29026351 1.23384882 14 3 C14 4.65 14 6.3 14 8 C3.44191344 4.92482916 3.44191344 4.92482916 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#8E5D43\",transform:\"translate(612,430)\"})),_path1282||(_path1282=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-1.91583647 2.1958009 -3.83272539 2.38132214 -5.75 2.5625 C-7.35101562 2.71912109 -7.35101562 2.71912109 -8.984375 2.87890625 C-11.64141204 2.98560074 -13.49960572 2.81930395 -16 2 C-16 1.34 -16 0.68 -16 0 C-16.99 -0.33 -17.98 -0.66 -19 -1 C-12.27709124 -2.68072719 -6.41587404 -2.56634962 0 0 Z \",fill:\"#A7B680\",transform:\"translate(610,397)\"})),_path1283||(_path1283=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 2.64 0 5.28 0 8 C0.99 8 1.98 8 3 8 C2.67 8.66 2.34 9.32 2 10 C-1.3 9.34 -4.6 8.68 -8 8 C-8 7.34 -8 6.68 -8 6 C-6.68 6 -5.36 6 -4 6 C-5.98 5.34 -7.96 4.68 -10 4 C-10 3.01 -10 2.02 -10 1 C-2.25 0 -2.25 0 0 0 Z \",fill:\"#CADAA9\",transform:\"translate(540,382)\"})),_path1284||(_path1284=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.04449911 3.13349732 0.93423645 3.98968256 0 7 C2.20857055 6.85780436 4.41684987 6.71108153 6.625 6.5625 C8.46964844 6.44068359 8.46964844 6.44068359 10.3515625 6.31640625 C13.61532388 6.03336056 16.77943859 5.58961047 20 5 C20 5.66 20 6.32 20 7 C19.04287109 7.19916016 19.04287109 7.19916016 18.06640625 7.40234375 C16.82697266 7.66724609 16.82697266 7.66724609 15.5625 7.9375 C14.73878906 8.11152344 13.91507812 8.28554688 13.06640625 8.46484375 C11.02338796 8.80752994 11.02338796 8.80752994 10 10 C7.98405418 10.23427778 5.961526 10.41336124 3.9375 10.5625 C2.28041016 10.68818359 2.28041016 10.68818359 0.58984375 10.81640625 C-0.26480469 10.87699219 -1.11945313 10.93757813 -2 11 C-2.28571429 3.57142857 -2.28571429 3.57142857 0 0 Z \",fill:\"#5D2D2E\",transform:\"translate(250,353)\"})),_path1285||(_path1285=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-21.39479532 11.30139125 -21.39479532 11.30139125 -32 11 C-31.67 10.34 -31.34 9.68 -31 9 C-28.77006271 8.34413609 -26.51392477 7.77670903 -24.25 7.25 C-17.53467395 5.61647671 -11.77181324 3.23974983 -5.609375 0.07421875 C-3 -1 -3 -1 0 0 Z \",fill:\"#787D6D\",transform:\"translate(494,340)\"})),_path1286||(_path1286=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.42421635 0.81056329 6.76530793 1.83066198 10.125 2.875 C15.74115671 4.6137875 21.36566371 6.32114585 27 8 C27 8.66 27 9.32 27 10 C23.93473908 9.58060002 20.873586 9.13628066 17.8125 8.6875 C16.94818359 8.56955078 16.08386719 8.45160156 15.19335938 8.33007812 C10.56504341 7.63849068 6.75304828 7.02264137 3 4 C3 3.34 3 2.68 3 2 C2.01 2 1.02 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#928F50\",transform:\"translate(577,336)\"})),_path1287||(_path1287=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-1.32 2 -2.64 2 -4 2 C-3.484375 2.94875 -2.96875 3.8975 -2.4375 4.875 C-1.963125 5.90625 -1.48875 6.9375 -1 8 C-1.33 8.66 -1.66 9.32 -2 10 C-2.556875 9.7525 -3.11375 9.505 -3.6875 9.25 C-6.24050936 8.71646324 -6.24050936 8.71646324 -8.75 10.9375 C-9.4925 11.618125 -10.235 12.29875 -11 13 C-10.25697027 8.91333648 -9.29128429 4.94981078 -8 1 C-5.29120665 -0.35439668 -2.99066732 -0.06501451 0 0 Z \",fill:\"#9D783B\",transform:\"translate(217,329)\"})),_path1288||(_path1288=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.6 0 13.2 0 20 0 C20 1.32 20 2.64 20 4 C17.36 4.33 14.72 4.66 12 5 C12 4.34 12 3.68 12 3 C10.02 3 8.04 3 6 3 C6 2.34 6 1.68 6 1 C4.35 1 2.7 1 1 1 C0.67 1.66 0.34 2.32 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#46382D\",transform:\"translate(325,317)\"})),_path1289||(_path1289=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.64127067 -0.13310863 10.83529588 0.26795917 16.375 1.3125 C17.08527344 1.43044922 17.79554688 1.54839844 18.52734375 1.66992188 C20.5859375 2.05078125 20.5859375 2.05078125 24 3 C24.99 4.485 24.99 4.485 26 6 C22.18806258 7.27064581 19.3150004 6.49046675 15.5 5.6875 C14.82324219 5.55666016 14.14648438 5.42582031 13.44921875 5.29101562 C10.08279943 4.60378801 7.89493818 3.92995879 5 2 C3.34450469 1.61500109 1.6777567 1.27206865 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#8D5B42\",transform:\"translate(572,315)\"})),_path1290||(_path1290=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.93 0 13.86 0 21 0 C21 0.99 21 1.98 21 3 C17.87501937 3.02895976 14.7500731 3.04678483 11.625 3.0625 C10.73554688 3.07087891 9.84609375 3.07925781 8.9296875 3.08789062 C7.65351563 3.09272461 7.65351563 3.09272461 6.3515625 3.09765625 C5.17327881 3.10551147 5.17327881 3.10551147 3.97119141 3.11352539 C2 3 2 3 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#AEA186\",transform:\"translate(180,290)\"})),_path1291||(_path1291=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.92 0 15.84 0 24 0 C24 0.66 24 1.32 24 2 C21.70691037 3.14654482 20.20090344 3.19729117 17.6484375 3.31640625 C16.79765625 3.35830078 15.946875 3.40019531 15.0703125 3.44335938 C14.18085938 3.48267578 13.29140625 3.52199219 12.375 3.5625 C11.02921875 3.62727539 11.02921875 3.62727539 9.65625 3.69335938 C7.43765717 3.79956861 5.2189512 3.90161194 3 4 C3 3.01 3 2.02 3 1 C2.01 0.67 1.02 0.34 0 0 Z \",fill:\"#CB7C6D\",transform:\"translate(226,264)\"})),_path1292||(_path1292=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 1 2 1 4 3 C4 3.99 4 4.98 4 6 C4.66 6 5.32 6 6 6 C6 5.01 6 4.02 6 3 C6.99 3 7.98 3 9 3 C9.66 4.98 10.32 6.96 11 9 C9.02 9 7.04 9 5 9 C5 8.34 5 7.68 5 7 C4.34 7 3.68 7 3 7 C3 7.99 3 8.98 3 10 C2.01 10 1.02 10 0 10 C-0.19412181 8.52168779 -0.38012131 7.04230684 -0.5625 5.5625 C-0.66691406 4.73878906 -0.77132812 3.91507812 -0.87890625 3.06640625 C-0.91886719 2.38449219 -0.95882812 1.70257813 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#564531\",transform:\"translate(100,259)\"})),_path1293||(_path1293=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-8.0098625 4.25809954 -15.6875679 5.57258771 -24 6 C-24 5.01 -24 4.02 -24 3 C-21.31374546 2.49236135 -18.62631617 1.99372803 -15.9375 1.5 C-15.18533203 1.35691406 -14.43316406 1.21382812 -13.65820312 1.06640625 C-9.02259825 0.223569 -4.7110385 -0.15015262 0 0 Z \",fill:\"#787967\",transform:\"translate(368,242)\"})),_path1294||(_path1294=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-6.88023305 5.59727921 -13.55620912 8.76686274 -21 11 C-18.69591021 7.4236182 -16.30289664 5.7867392 -12.5625 3.8125 C-11.14130859 3.04873047 -11.14130859 3.04873047 -9.69140625 2.26953125 C-6.2486819 0.64560467 -3.79905848 0 0 0 Z \",fill:\"#3C3027\",transform:\"translate(403,213)\"})),_path1295||(_path1295=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-4.17436704 2.09038695 -8.35954396 4.15518455 -12.5625 6.1875 C-13.33013672 6.56841797 -14.09777344 6.94933594 -14.88867188 7.34179688 C-15.99758789 7.87450195 -15.99758789 7.87450195 -17.12890625 8.41796875 C-17.79994385 8.74563232 -18.47098145 9.0732959 -19.16235352 9.41088867 C-21 10 -21 10 -24 9 C-20.88883381 5.88883381 -18.54770393 4.22168529 -14.5 2.4375 C-13.5203125 2.00308594 -12.540625 1.56867188 -11.53125 1.12109375 C-10.27828125 0.56615234 -10.27828125 0.56615234 -9 0 C-5.93109813 -1.53445094 -3.29905734 -0.54984289 0 0 Z \",fill:\"#4C4939\",transform:\"translate(443,200)\"})),_path1296||(_path1296=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.22731216 6.93302093 0.42002108 13.2168636 -1 20 C-1.99 20.33 -2.98 20.66 -4 21 C-4.38218767 19.34385343 -4.71395102 17.67542976 -5 16 C-4.67 15.67 -4.34 15.34 -4 15 C-3.46178999 11.96974198 -3.03443179 8.92923012 -2.59765625 5.8828125 C-2 3 -2 3 0 0 Z \",fill:\"#4D3126\",transform:\"translate(229,570)\"})),_path1297||(_path1297=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.27286682 2.7819368 4.96427697 6.27954067 7 10 C7.66 9.67 8.32 9.34 9 9 C13 15.625 13 15.625 13 19 C13.66 19 14.32 19 15 19 C15.33 20.32 15.66 21.64 16 23 C12.31140442 21.53101883 10.75263636 19.64250136 8.5625 16.375 C7.964375 15.48425781 7.36625 14.59351563 6.75 13.67578125 C6.1725 12.79277344 5.595 11.90976562 5 11 C4.2265625 9.84564453 4.2265625 9.84564453 3.4375 8.66796875 C0 3.40429688 0 3.40429688 0 0 Z \",fill:\"#7E533C\",transform:\"translate(456,534)\"})),_path1298||(_path1298=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-6.625 1.25 -6.625 1.25 -10 -1 C-15.21963027 -1.4832991 -17.63878111 -0.68382701 -22 2 C-25.3125 2.1875 -25.3125 2.1875 -28 2 C-19.79126098 -6.20873902 -9.41321775 -4.78131695 0 0 Z \",fill:\"#C26B58\",transform:\"translate(386,498)\"})),_path1299||(_path1299=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3 1.32 3 2.64 3 4 C-5.45295786 6.07313419 -13.28296246 7.48032656 -22 7 C-22 6.34 -22 5.68 -22 5 C-20.51886719 4.80083984 -20.51886719 4.80083984 -19.0078125 4.59765625 C-17.72648437 4.42105469 -16.44515625 4.24445313 -15.125 4.0625 C-13.21074219 3.80146484 -13.21074219 3.80146484 -11.2578125 3.53515625 C-8.12440546 3.18566773 -8.12440546 3.18566773 -6 2 C-4.00039988 1.960008 -1.99952758 1.95653201 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#E7B9A9\",transform:\"translate(412,488)\"})),_path1300||(_path1300=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.66 2 1.32 2 2 C7.28 2.33 12.56 2.66 18 3 C18 3.66 18 4.32 18 5 C8.62122392 5.1598655 -0.65190221 4.66433182 -10 4 C-6.48375245 2.05841983 -4.0284349 1.81688932 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#792C32\",transform:\"translate(190,465)\"})),_path1301||(_path1301=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.30596276 7.95894415 4.24125736 18.81881728 4 28 C1.6905527 24.17781429 1.07247633 20.01899069 0.3125 15.6875 C0.17005859 14.95337891 0.02761719 14.21925781 -0.11914062 13.46289062 C-0.97576768 8.65981254 -0.94286591 4.79026506 0 0 Z \",fill:\"#DEA986\",transform:\"translate(475,391)\"})),_path1302||(_path1302=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 1.32 1.98 2.64 3 4 C3.82951172 4.93585938 3.82951172 4.93585938 4.67578125 5.890625 C6.40985699 8.65286954 6.30290649 10.5186183 6.1875 13.75 C6.16042969 14.73484375 6.13335937 15.7196875 6.10546875 16.734375 C6.07066406 17.48203125 6.03585938 18.2296875 6 19 C5.67 19 5.34 19 5 19 C4.938125 17.88625 4.938125 17.88625 4.875 16.75 C3.65142617 12.90448224 1.40653418 11.95694517 -2 10 C-1.34 6.7 -0.68 3.4 0 0 Z \",fill:\"#37472E\",transform:\"translate(188,390)\"})),_path1303||(_path1303=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.7809725 0.63065155 11.3443706 1.65155132 17 3 C17.33 4.32 17.66 5.64 18 7 C12.06 5.515 12.06 5.515 6 4 C6 4.66 6 5.32 6 6 C4.125 5.8125 4.125 5.8125 2 5 C0.75 2.4375 0.75 2.4375 0 0 Z \",fill:\"#B0775E\",transform:\"translate(536,364)\"})),_path1304||(_path1304=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.19693992 2.66626359 1.38274782 5.33256639 1.5625 8 C1.61857422 8.74378906 1.67464844 9.48757813 1.73242188 10.25390625 C2.06347285 15.33002118 1.77163045 19.97011262 1 25 C0.34 25 -0.32 25 -1 25 C-1 22.36 -1 19.72 -1 17 C-6.94 17 -12.88 17 -19 17 C-19 16.67 -19 16.34 -19 16 C-17.17662109 15.90912109 -17.17662109 15.90912109 -15.31640625 15.81640625 C-13.73175772 15.73201668 -12.14712298 15.6473679 -10.5625 15.5625 C-9.76005859 15.52318359 -8.95761719 15.48386719 -8.13085938 15.44335938 C-4.24760439 15.5945704 -4.24760439 15.5945704 -1 14 C-0.63239269 11.67182036 -0.29758419 9.3381615 0 7 C-0.66 7 -1.32 7 -2 7 C-2 6.34 -2 5.68 -2 5 C-1.34 5 -0.68 5 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#501612\",transform:\"translate(310,344)\"})),_path1305||(_path1305=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.35106087 0.0001133 1.35106087 0.0001133 2.72941589 0.00022888 C3.69825211 0.00539017 4.66708832 0.01055145 5.6652832 0.01586914 C7.15714897 0.01799156 7.15714897 0.01799156 8.67915344 0.02015686 C11.85815428 0.02575779 15.03708488 0.03831043 18.21606445 0.05102539 C20.37036031 0.05604027 22.52465727 0.0606032 24.67895508 0.06469727 C29.9621822 0.07572751 35.24536831 0.09246653 40.52856445 0.11352539 C40.52856445 0.44352539 40.52856445 0.77352539 40.52856445 1.11352539 C34.91856445 1.11352539 29.30856445 1.11352539 23.52856445 1.11352539 C23.19856445 1.77352539 22.86856445 2.43352539 22.52856445 3.11352539 C22.52856445 2.45352539 22.52856445 1.79352539 22.52856445 1.11352539 C21.86856445 1.11352539 21.20856445 1.11352539 20.52856445 1.11352539 C20.19856445 1.77352539 19.86856445 2.43352539 19.52856445 3.11352539 C19.52856445 2.45352539 19.52856445 1.79352539 19.52856445 1.11352539 C15.79852336 1.19464247 12.07008846 1.30746614 8.34106445 1.42602539 C7.2859668 1.44858398 6.23086914 1.47114258 5.14379883 1.49438477 C4.1222168 1.52983398 3.10063477 1.5652832 2.0480957 1.60180664 C1.11070557 1.62799072 0.17331543 1.6541748 -0.79248047 1.68115234 C-3.91311106 2.18481012 -5.87785867 3.34676683 -8.47143555 5.11352539 C-8.15893555 3.17602539 -8.15893555 3.17602539 -7.47143555 1.11352539 C-4.64131428 0.17015163 -2.92843637 -0.0082029 0 0 Z \",fill:\"#97584B\",transform:\"translate(228.471435546875,349.886474609375)\"})),_path1306||(_path1306=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 2.64 0 5.28 0 8 C-3.66075376 8.3327958 -5.39500988 8.46170299 -8.375 6.1875 C-10 4 -10 4 -10 1 C-2.25 0 -2.25 0 0 0 Z \",fill:\"#404842\",transform:\"translate(202,308)\"})),_path1307||(_path1307=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C8.91 0 17.82 0 27 0 C26.67 2.31 26.34 4.62 26 7 C25.67 7 25.34 7 25 7 C25 5.35 25 3.7 25 2 C16.75 2 8.5 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#A67B65\",transform:\"translate(272,310)\"})),_path1308||(_path1308=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C0.68 5.29 -0.64 9.58 -2 14 C-12.56 13.67 -23.12 13.34 -34 13 C-34 12.67 -34 12.34 -34 12 C-24.43 12 -14.86 12 -5 12 C-5 11.34 -5 10.68 -5 10 C-4.34 10 -3.68 10 -3 10 C-2.87625 9.0925 -2.7525 8.185 -2.625 7.25 C-2.07890323 4.41029677 -1.42736197 2.47409409 0 0 Z \",fill:\"#370F11\",transform:\"translate(305,294)\"})),_path1309||(_path1309=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.86198511 2.30805251 3.91161982 3.61701924 4.75 7.25 C5.0128898 11.19334702 5.06930645 15.0495325 5 19 C4.01 18.34 3.02 17.68 2 17 C1.34 17.99 0.68 18.98 0 20 C-0.33 18.35 -0.66 16.7 -1 15 C0.32 15 1.64 15 3 15 C3 14.34 3 13.68 3 13 C1.35 12.67 -0.3 12.34 -2 12 C-2 11.34 -2 10.68 -2 10 C-1.360625 9.896875 -0.72125 9.79375 -0.0625 9.6875 C0.9584375 9.3471875 0.9584375 9.3471875 2 9 C2.33 8.01 2.66 7.02 3 6 C2.01 6 1.02 6 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#BC6A55\",transform:\"translate(41,234)\"})),_path1310||(_path1310=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C0.01 2.33 -0.98 2.66 -2 3 C-1.67 3.66 -1.34 4.32 -1 5 C-1.59425781 5.08636719 -2.18851563 5.17273438 -2.80078125 5.26171875 C-9.00369143 6.31322296 -14.13538972 8.24298771 -19.75 11.07421875 C-20.4925 11.37972656 -21.235 11.68523437 -22 12 C-22.66 11.67 -23.32 11.34 -24 11 C-22.37829621 9.99466333 -20.75252763 8.99588093 -19.125 8 C-17.76761719 7.1646875 -17.76761719 7.1646875 -16.3828125 6.3125 C-14 5 -14 5 -12 5 C-12 4.34 -12 3.68 -12 3 C-8.03302114 1.19682779 -4.3177458 0.50797009 0 0 Z \",fill:\"#382925\",transform:\"translate(614,108)\"})),_path1311||(_path1311=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3.268125 0.598125 3.53625 1.19625 3.8125 1.8125 C4.88022403 4.04267613 4.88022403 4.04267613 6.625 5.5625 C8 7 8 7 8 10 C8.66 10 9.32 10 10 10 C10 11.32 10 12.64 10 14 C10.61875 14.2475 11.2375 14.495 11.875 14.75 C14.39272383 16.23101402 15.08392564 17.25177691 16 20 C15.67 20.99 15.34 21.98 15 23 C12.32212282 19.34139377 9.65709718 15.67372566 7 12 C5.96552734 10.57107422 5.96552734 10.57107422 4.91015625 9.11328125 C3.96462891 7.78876953 3.96462891 7.78876953 3 6.4375 C2.4225 5.63183594 1.845 4.82617188 1.25 3.99609375 C0 2 0 2 0 0 Z \",fill:\"#212F28\",transform:\"translate(128,24)\"})),_path1312||(_path1312=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4 5.28 4 10.56 4 16 C3.34 16 2.68 16 2 16 C2 15.34 2 14.68 2 14 C1.34 14 0.68 14 0 14 C0 9.38 0 4.76 0 0 Z \",fill:\"#6B4E3C\",transform:\"translate(87,0)\"})),_path1313||(_path1313=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.6015625 -0.29296875 2.6015625 -0.29296875 5.625 -0.1875 C7.12933594 -0.14689453 7.12933594 -0.14689453 8.6640625 -0.10546875 C9.43492187 -0.07066406 10.20578125 -0.03585937 11 0 C7.09364288 4.15050444 2.88749573 8.02455804 -2 11 C-2.99 11 -3.98 11 -5 11 C-3.73958325 7.21874975 -2.31129455 6.98677673 1 5 C1.33 4.01 1.66 3.02 2 2 C0.68 2.33 -0.64 2.66 -2 3 C-1.34 2.01 -0.68 1.02 0 0 Z \",fill:\"#0F3F37\",transform:\"translate(606,0)\"})),_path1314||(_path1314=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 3 0 3 -1 6 C0.32 5.34 1.64 4.68 3 4 C1.49091551 7.84130598 -0.8029487 9.48803112 -4 12 C-4.721875 12.9075 -5.44375 13.815 -6.1875 14.75 C-7.0846875 15.86375 -7.0846875 15.86375 -8 17 C-8.66 17 -9.32 17 -10 17 C-9.731875 16.484375 -9.46375 15.96875 -9.1875 15.4375 C-7.89945697 12.87859494 -7.89945697 12.87859494 -6.6875 9.625 C-4.85806086 5.6950937 -2.88265717 3.19429579 0 0 Z \",fill:\"#8A5E44\",transform:\"translate(72,604)\"})),_path1315||(_path1315=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7 8.20689655 7 8.20689655 7 13 C7.66 13 8.32 13 9 13 C9.33 14.98 9.66 16.96 10 19 C6.115235 17.70507833 5.51287492 16.12174589 3.375 12.6875 C2.76398438 11.72199219 2.15296875 10.75648438 1.5234375 9.76171875 C0.21364778 7.38730509 -0.67003128 5.66819537 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#664436\",transform:\"translate(484,591)\"})),_path1316||(_path1316=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.62661559 2.62661559 3.03590779 5.00650948 4.0625 8.5625 C4.94947493 12.58823599 4.94947493 12.58823599 7 16 C7.42462895 17.75959255 7.79042286 19.53358633 8.125 21.3125 C8.31320312 22.27800781 8.50140625 23.24351562 8.6953125 24.23828125 C8.9857295 26.87065076 8.83720185 28.51787338 8 31 C7.49307308 29.4188708 6.99473557 27.83498617 6.5 26.25 C6.08234375 24.92742188 6.08234375 24.92742188 5.65625 23.578125 C5 21 5 21 5 17 C4.34 17 3.68 17 3 17 C0.70657253 11.10261508 -0.34548714 6.33393082 0 0 Z \",fill:\"#C89E7D\",transform:\"translate(359,529)\"})),_path1317||(_path1317=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-1.09699219 2.20496094 -2.19398438 2.40992188 -3.32421875 2.62109375 C-4.77864887 2.89321293 -6.23307578 3.16534925 -7.6875 3.4375 C-8.40873047 3.57220703 -9.12996094 3.70691406 -9.87304688 3.84570312 C-10.57880859 3.97783203 -11.28457031 4.10996094 -12.01171875 4.24609375 C-12.70289795 4.37491943 -13.39407715 4.50374512 -14.10620117 4.63647461 C-15.64832578 4.93249415 -17.18462955 5.2587122 -18.71875 5.59375 C-21.1323682 6.02357242 -23.36354081 6.09905163 -25.8125 6.0625 C-26.60269531 6.05347656 -27.39289063 6.04445313 -28.20703125 6.03515625 C-28.79871094 6.02355469 -29.39039063 6.01195312 -30 6 C-30 5.67 -30 5.34 -30 5 C-26.535 4.505 -26.535 4.505 -23 4 C-23 3.67 -23 3.34 -23 3 C-20.10496617 2.49494737 -17.20912047 1.9957978 -14.3125 1.5 C-13.49587891 1.35691406 -12.67925781 1.21382813 -11.83789062 1.06640625 C-7.85021752 0.38834038 -4.06269596 -0.19858392 0 0 Z \",fill:\"#D19982\",transform:\"translate(416,498)\"})),_path1318||(_path1318=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.95 0.33 9.9 0.66 15 1 C15 2.32 15 3.64 15 5 C10.38 5 5.76 5 1 5 C0.67 3.35 0.34 1.7 0 0 Z \",fill:\"#120404\",transform:\"translate(303,479)\"})),_path1319||(_path1319=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.515625 0.433125 1.03125 0.86625 1.5625 1.3125 C4.54386033 3.37651869 7.66202065 4.59453501 11 6 C13.9375 7.5625 13.9375 7.5625 16 9 C16 9.66 16 10.32 16 11 C16.99 11.33 17.98 11.66 19 12 C18.67 12.99 18.34 13.98 18 15 C14.27699494 13.32734555 11.14978486 11.04689249 7.875 8.625 C6.82054687 7.85414063 5.76609375 7.08328125 4.6796875 6.2890625 C2.24290466 4.20749582 1.09211224 2.9527479 0 0 Z \",fill:\"#754B39\",transform:\"translate(480,469)\"})),_path1320||(_path1320=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.33 0.66 0.66 1 1 C3.32817964 1.36760731 5.6618385 1.70241581 8 2 C4.76574957 4.91235821 2.6878536 5.36624942 -1.625 5.25 C-2.58664062 5.23453125 -3.54828125 5.2190625 -4.5390625 5.203125 C-7 5 -7 5 -9 4 C-9 3.01 -9 2.02 -9 1 C-5.78419562 -0.07193479 -3.36629251 -0.14636054 0 0 Z \",fill:\"#A2724F\",transform:\"translate(402,436)\"})),_path1321||(_path1321=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.33 0 0.66 0 1 C12.87 1.495 12.87 1.495 26 2 C26 2.33 26 2.66 26 3 C20.9646141 3.04954963 15.9293711 3.08579037 10.89379883 3.10986328 C9.18185961 3.11990208 7.46993745 3.13353595 5.75805664 3.15087891 C3.29308858 3.17522073 0.82834785 3.18650438 -1.63671875 3.1953125 C-2.77919319 3.21079636 -2.77919319 3.21079636 -3.94474792 3.22659302 C-8.08082741 3.22746036 -11.2812059 2.85778997 -15 1 C-15 0.67 -15 0.34 -15 0 C-9.65370398 -1.0024305 -5.37625234 -0.84888195 0 0 Z \",fill:\"#3F1608\",transform:\"translate(367,429)\"})),_path1322||(_path1322=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C0.10570912 8.34671491 -0.94751423 16.67207858 -2 25 C-2.33 23.68 -2.66 22.36 -3 21 C-3.66 21 -4.32 21 -5 21 C-5.33 22.32 -5.66 23.64 -6 25 C-6.08086147 23.20906809 -6.13912702 21.41710372 -6.1875 19.625 C-6.22230469 18.62726563 -6.25710937 17.62953125 -6.29296875 16.6015625 C-6.19628906 15.74304688 -6.09960938 14.88453125 -6 14 C-5.01 13.34 -4.02 12.68 -3 12 C-1.97889461 9.12883998 -1.97889461 9.12883998 -1.3125 5.875 C-1.06113281 4.77929688 -0.80976563 3.68359375 -0.55078125 2.5546875 C-0.36902344 1.71164062 -0.18726563 0.86859375 0 0 Z \",fill:\"#67401D\",transform:\"translate(202,395)\"})),_path1323||(_path1323=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.37687996 1.30481289 10.55955024 1.24764597 16.0625 1.0625 C15.0725 1.3925 14.0825 1.7225 13.0625 2.0625 C13.0625 3.0525 13.0625 4.0425 13.0625 5.0625 C7.4525 4.7325 1.8425 4.4025 -3.9375 4.0625 C-3.9375 3.4025 -3.9375 2.7425 -3.9375 2.0625 C-4.5975 1.4025 -5.2575 0.7425 -5.9375 0.0625 C-3.40157476 -1.20546262 -2.68461219 -0.74275889 0 0 Z \",fill:\"#065C32\",transform:\"translate(523.9375,406.9375)\"})),_path1324||(_path1324=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C11.81324278 0.6893039 11.81324278 0.6893039 17 4 C17.9375 7.6875 17.9375 7.6875 18 11 C17.2575 10.2575 16.515 9.515 15.75 8.75 C11.23437743 4.92153739 5.59077199 3.61933363 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#6B6437\",transform:\"translate(455,398)\"})),_path1325||(_path1325=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.33 1.65 -0.66 3.3 -1 5 C-1.66 5 -2.32 5 -3 5 C-3.33 6.32 -3.66 7.64 -4 9 C-4.99 9 -5.98 9 -7 9 C-7 8.34 -7 7.68 -7 7 C-8.32 6.34 -9.64 5.68 -11 5 C-7.8797251 0.39387991 -5.45124506 -0.14733095 0 0 Z \",fill:\"#EFE2AF\",transform:\"translate(105,379)\"})),_path1326||(_path1326=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C1.804375 2.144375 2.60875 2.28875 3.4375 2.4375 C6 3 6 3 8 6 C7.67 6.99 7.34 7.98 7 9 C5.68 8.67 4.36 8.34 3 8 C3 7.34 3 6.68 3 6 C0.69 6 -1.62 6 -4 6 C-4.33 4.68 -4.66 3.36 -5 2 C-3.35 1.34 -1.7 0.68 0 0 Z \",fill:\"#F3EFCB\",transform:\"translate(541,376)\"})),_path1327||(_path1327=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C6.93 2.495 6.93 2.495 14 3 C14 3.33 14 3.66 14 4 C3.11 4.495 3.11 4.495 -8 5 C-8.33 7.31 -8.66 9.62 -9 12 C-9.33 12 -9.66 12 -10 12 C-10 8.37 -10 4.74 -10 1 C-6.78548731 -0.60725635 -3.56387464 -0.05748185 0 0 Z \",fill:\"#270101\",transform:\"translate(323,357)\"})),_path1328||(_path1328=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.33 0 0.66 0 1 C-1.12148438 1.14695312 -1.12148438 1.14695312 -2.265625 1.296875 C-8.34614949 2.14203403 -8.34614949 2.14203403 -13.6875 4.9375 C-15.26843775 7.01438059 -15.26843775 7.01438059 -15 10 C-13.56249809 11.68798827 -13.56249809 11.68798827 -12 13 C-14.375 12.8125 -14.375 12.8125 -17 12 C-18.59660706 9.11090151 -19 7.30941204 -19 4 C-12.76335625 -0.53574091 -7.56198897 -0.44701413 0 0 Z \",fill:\"#CABE82\",transform:\"translate(451,330)\"})),_path1329||(_path1329=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0.66 3.96 1.32 6 2 C6 2.33 6 2.66 6 3 C2.37 3.33 -1.26 3.66 -5 4 C-5 5.32 -5 6.64 -5 8 C-7.97 8 -10.94 8 -14 8 C-14 7.01 -14 6.02 -14 5 C-12.02 4.67 -10.04 4.34 -8 4 C-8 3.34 -8 2.68 -8 2 C-5.36 2 -2.72 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#6F2727\",transform:\"translate(156,298)\"})),_path1330||(_path1330=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C0.67 2.66 0.34 3.32 0 4 C-6.27 4 -12.54 4 -19 4 C-19 3.01 -19 2.02 -19 1 C-12.73 0.67 -6.46 0.34 0 0 Z \",fill:\"#822923\",transform:\"translate(291,294)\"})),_path1331||(_path1331=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C11.88 0 23.76 0 36 0 C36 0.99 36 1.98 36 3 C31.87480376 2.85941968 27.74989764 2.71156588 23.625 2.5625 C22.46871094 2.52318359 21.31242188 2.48386719 20.12109375 2.44335938 C13.37909185 2.19577173 6.70209838 1.78053875 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#14262A\",transform:\"translate(590,295)\"})),_path1332||(_path1332=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.33 0 0.66 0 1 C-3.6235495 1.37014753 -7.24891898 1.71811118 -10.875 2.0625 C-11.88820313 2.16626953 -12.90140625 2.27003906 -13.9453125 2.37695312 C-20.45577025 2.98209183 -26.52450224 2.92545581 -33 2 C-33 1.67 -33 1.34 -33 1 C-29.83402429 0.65988375 -26.6671312 0.32916813 -23.5 0 C-22.613125 -0.09539062 -21.72625 -0.19078125 -20.8125 -0.2890625 C-6.88932292 -1.72233073 -6.88932292 -1.72233073 0 0 Z \",fill:\"#B6AF95\",transform:\"translate(93,294)\"})),_path1333||(_path1333=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C2.67 6.6 2.34 13.2 2 20 C2.99 20 3.98 20 5 20 C5 20.66 5 21.32 5 22 C2.69 22 0.38 22 -2 22 C-2 21.34 -2 20.68 -2 20 C-1.34 20 -0.68 20 0 20 C0 13.4 0 6.8 0 0 Z \",fill:\"#471811\",transform:\"translate(526,264)\"})),_path1334||(_path1334=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C0.62421077 3.25186544 -1.33562431 5.74205541 -3.6328125 8.40625 C-4.56502899 9.49294809 -5.47588237 10.59825212 -6.3671875 11.71875 C-7.53384773 13.18225278 -8.76280642 14.5956181 -10 16 C-10.66 16 -11.32 16 -12 16 C-12 16.66 -12 17.32 -12 18 C-12.66 18 -13.32 18 -14 18 C-14 18.66 -14 19.32 -14 20 C-14.66 20 -15.32 20 -16 20 C-16 20.66 -16 21.32 -16 22 C-16.66 22 -17.32 22 -18 22 C-18 22.66 -18 23.32 -18 24 C-18.66 24 -19.32 24 -20 24 C-18.60669258 20.8142971 -16.97103262 18.80177783 -14.4375 16.4375 C-12.00373705 14.1656506 -11.07740206 13.23220618 -10 10 C-8.40625 8.46484375 -8.40625 8.46484375 -6.5 6.9375 C-3.81893599 4.82278233 -3.81893599 4.82278233 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#5D6644\",transform:\"translate(484,32)\"})),_path1335||(_path1335=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-1.02480469 2.54269531 -2.04960937 3.08539063 -3.10546875 3.64453125 C-4.46618303 4.36711745 -5.82685804 5.08977762 -7.1875 5.8125 C-7.86103516 6.16892578 -8.53457031 6.52535156 -9.22851562 6.89257812 C-12.14729157 8.44451265 -15.00056216 10.0003536 -17.80078125 11.76171875 C-20 13 -20 13 -23 13 C-23 12.34 -23 11.68 -23 11 C-16.96640195 6.62243205 -7.60028241 0 0 0 Z \",fill:\"#553A2F\",transform:\"translate(23,468)\"})),_path1336||(_path1336=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C1.67 4.62 1.34 9.24 1 14 C2.65 14 4.3 14 6 14 C6 14.66 6 15.32 6 16 C7.32 16.33 8.64 16.66 10 17 C5.50343896 19.24828052 1.92127034 19.16682272 -3 19 C-2.26330078 18.51080078 -2.26330078 18.51080078 -1.51171875 18.01171875 C0.83585947 14.88768055 0.31491722 11.55333882 0.1875 7.8125 C0.17396484 7.06291016 0.16042969 6.31332031 0.14648438 5.54101562 C0.11118539 3.69370233 0.05737917 1.84675934 0 0 Z \",fill:\"#4D0D14\",transform:\"translate(294,428)\"})),_path1337||(_path1337=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.25398658 0.47567125 13.26812223 2.29466594 20 5 C20 5.99 20 6.98 20 8 C17.78960083 7.57305989 15.58174139 7.13296022 13.375 6.6875 C12.14523437 6.44386719 10.91546875 6.20023437 9.6484375 5.94921875 C6.09733532 5.02532386 3.20639411 3.7610503 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#AE7759\",transform:\"translate(606,425)\"})),_path1338||(_path1338=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 1.98 5.28 3.96 8 6 C7.34 7.98 6.68 9.96 6 12 C4.62437146 10.71034824 3.29233607 9.37310707 2 8 C2 7.34 2 6.68 2 6 C-0.64 6 -3.28 6 -6 6 C-5.195625 5.38125 -4.39125 4.7625 -3.5625 4.125 C-0.96125481 2.25835959 -0.96125481 2.25835959 0 0 Z \",fill:\"#4F382D\",transform:\"translate(549,390)\"})),_path1339||(_path1339=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1.43410156 1.48210937 0.86820313 1.96421875 0.28515625 2.4609375 C-0.44832031 3.09257812 -1.18179688 3.72421875 -1.9375 4.375 C-2.66839844 5.00148438 -3.39929688 5.62796875 -4.15234375 6.2734375 C-6.08380906 7.87747714 -6.08380906 7.87747714 -7 10 C-7.99 10.33 -8.98 10.66 -10 11 C-11.11779563 14.35338688 -11.20267056 17.03251233 -11.25 20.5625 C-11.27578125 21.71878906 -11.3015625 22.87507813 -11.328125 24.06640625 C-11.21984375 25.03449219 -11.1115625 26.00257813 -11 27 C-10.01 27.66 -9.02 28.32 -8 29 C-9.65 29 -11.3 29 -13 29 C-13.33 22.07 -13.66 15.14 -14 8 C-13.34 8.66 -12.68 9.32 -12 10 C-10.95199219 9.04287109 -10.95199219 9.04287109 -9.8828125 8.06640625 C-8.51769531 6.82697266 -8.51769531 6.82697266 -7.125 5.5625 C-6.22007812 4.73878906 -5.31515625 3.91507812 -4.3828125 3.06640625 C-2 1 -2 1 0 0 Z \",fill:\"#272428\",transform:\"translate(224,354)\"})),_path1340||(_path1340=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.29 0 8.58 0 13 0 C13 0.66 13 1.32 13 2 C12.34 2 11.68 2 11 2 C10.67 3.32 10.34 4.64 10 6 C9.67 5.34 9.34 4.68 9 4 C5.7 4 2.4 4 -1 4 C-1 4.66 -1 5.32 -1 6 C-2.32 5.67 -3.64 5.34 -5 5 C-4.01 5 -3.02 5 -2 5 C-2 4.34 -2 3.68 -2 3 C-1.34 3 -0.68 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#F2A67C\",transform:\"translate(105,354)\"})),_path1341||(_path1341=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.94 0 11.88 0 18 0 C17.34 1.65 16.68 3.3 16 5 C10.72 4.34 5.44 3.68 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#BA7658\",transform:\"translate(424,300)\"})),_path1342||(_path1342=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.92967958 2.51013486 1.08686596 3.73216328 0.25 6.3125 C-0.1625 7.199375 -0.575 8.08625 -1 9 C-2.78732984 13.00361884 -4.34118652 16.651831 -5 21 C-6.98 20.67 -8.96 20.34 -11 20 C-10.01 18.515 -10.01 18.515 -9 17 C-8.34 17 -7.68 17 -7 17 C-6.86464844 16.43667969 -6.72929687 15.87335938 -6.58984375 15.29296875 C-5.98413613 12.93833053 -5.3014045 10.62875505 -4.5625 8.3125 C-4.31628906 7.52488281 -4.07007813 6.73726563 -3.81640625 5.92578125 C-3 4 -3 4 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#042812\",transform:\"translate(459,281)\"})),_path1343||(_path1343=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.125 5.75 0.125 5.75 -1 8 C-2.98 8 -4.96 8 -7 8 C-6.67 6.35 -6.34 4.7 -6 3 C-7.32 3 -8.64 3 -10 3 C-10 2.34 -10 1.68 -10 1 C-6.78548731 -0.60725635 -3.56387464 -0.05748185 0 0 Z \",fill:\"#E17A65\",transform:\"translate(262,272)\"})),_path1344||(_path1344=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.28 0 10.56 0 16 0 C16.33 1.32 16.66 2.64 17 4 C14.54159395 4.02691685 12.08348118 4.04679802 9.625 4.0625 C8.92632812 4.07087891 8.22765625 4.07925781 7.5078125 4.08789062 C2.2265625 4.11328125 2.2265625 4.11328125 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#594537\",transform:\"translate(289,271)\"})),_path1345||(_path1345=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.99 0 1.98 0 3 C-7.35575165 3.70776992 -14.6094524 4.14715692 -22 4 C-15.58241813 -0.27838791 -7.48577598 -1.871444 0 0 Z \",fill:\"#3E554E\",transform:\"translate(484,220)\"})),_path1346||(_path1346=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.33 2.97 -0.66 5.94 -1 9 C-5 8 -5 8 -7 7 C-7 6.34 -7 5.68 -7 5 C-8.65 5 -10.3 5 -12 5 C-12.33 4.34 -12.66 3.68 -13 3 C-4.57142857 -0.42857143 -4.57142857 -0.42857143 0 0 Z \",fill:\"#33231F\",transform:\"translate(198,181)\"})),_path1347||(_path1347=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.99744051 3.86171832 3 6.55177404 3 11 C4.4166747 12.7511573 4.4166747 12.7511573 6 14 C5.67 14.66 5.34 15.32 5 16 C3.02 15.34 1.04 14.68 -1 14 C-0.67 13.34 -0.34 12.68 0 12 C-0.66 11.67 -1.32 11.34 -2 11 C-2 9.35 -2 7.7 -2 6 C-3.32 5.34 -4.64 4.68 -6 4 C-5.38125 3.71125 -4.7625 3.4225 -4.125 3.125 C-1.86674235 2.06279958 -1.86674235 2.06279958 0 0 Z \",fill:\"#342823\",transform:\"translate(88,100)\"})),_path1348||(_path1348=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.11630825 3.17446238 2.28420888 4.26365617 2.5 7.9375 C2.94836928 14.03532215 3.91895739 19.98604449 5 26 C5.66 26 6.32 26 7 26 C7 27.32 7 28.64 7 30 C5.35 30 3.7 30 2 30 C1.65802981 26.87588408 1.32807747 23.75060292 1 20.625 C0.90460938 19.75488281 0.80921875 18.88476562 0.7109375 17.98828125 C0.08678885 11.96970497 -0.11723906 6.04920988 0 0 Z \",fill:\"#D2A180\",transform:\"translate(346,596)\"})),_path1349||(_path1349=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.96 0 7.92 0 12 0 C12 1.65 12 3.3 12 5 C8.04 5 4.08 5 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#FBC2A7\",transform:\"translate(416,474)\"})),_path1350||(_path1350=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.33 1.65 -0.66 3.3 -1 5 C2.63 5 6.26 5 10 5 C10 5.33 10 5.66 10 6 C6.04 6 2.08 6 -2 6 C-2 9.63 -2 13.26 -2 17 C-2.33 17 -2.66 17 -3 17 C-3 12.38 -3 7.76 -3 3 C-4.32 3 -5.64 3 -7 3 C-7 4.65 -7 6.3 -7 8 C-7.99 8.495 -7.99 8.495 -9 9 C-9.125 3.25 -9.125 3.25 -8 1 C-5.30114269 0.42577504 -2.76207303 0 0 0 Z \",fill:\"#7C2418\",transform:\"translate(309,453)\"})),_path1351||(_path1351=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 1.32 2 2.64 2 4 C2.99 4 3.98 4 5 4 C4.67 5.32 4.34 6.64 4 8 C3.34 8 2.68 8 2 8 C1.95101562 8.78246094 1.90203125 9.56492187 1.8515625 10.37109375 C1.77679688 11.38300781 1.70203125 12.39492188 1.625 13.4375 C1.55539063 14.44683594 1.48578125 15.45617187 1.4140625 16.49609375 C1.27742187 17.32238281 1.14078125 18.14867187 1 19 C0.34 19.33 -0.32 19.66 -1 20 C-1 18.02 -1 16.04 -1 14 C-1.33 14 -1.66 14 -2 14 C-2.1799928 8.78020872 -1.97094808 4.92737019 0 0 Z \",fill:\"#211512\",transform:\"translate(204,412)\"})),_path1352||(_path1352=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0 3.96 0 6 0 C7.83691257 3.78187881 8.15837626 5.94568308 7 10 C6.67 9.01 6.34 8.02 6 7 C2.7 7 -0.6 7 -4 7 C-3.01 6.67 -2.02 6.34 -1 6 C-0.67 4.02 -0.34 2.04 0 0 Z \",fill:\"#FBBCA0\",transform:\"translate(330,363)\"})),_path1353||(_path1353=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.75 -0.125 6.75 -0.125 9 1 C8.67 1.99 8.34 2.98 8 4 C5.69 4 3.38 4 1 4 C1 4.66 1 5.32 1 6 C-6.59 6 -14.18 6 -22 6 C-22 5.67 -22 5.34 -22 5 C-14.74 5 -7.48 5 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#8B3041\",transform:\"translate(337,356)\"})),_path1354||(_path1354=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.28 0 10.56 0 16 0 C15.67 0.99 15.34 1.98 15 3 C5.595 3.495 5.595 3.495 -4 4 C-4 3.34 -4 2.68 -4 2 C-2.68 2 -1.36 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#B3282A\",transform:\"translate(108,342)\"})),_path1355||(_path1355=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.82990706 0.64743667 6.5283898 2.45311237 9.75 4.5625 C11.22726562 5.52349609 11.22726562 5.52349609 12.734375 6.50390625 C13.85585938 7.24447266 13.85585938 7.24447266 15 8 C14.67 9.32 14.34 10.64 14 12 C10.40608886 10.66511872 7.24509304 9.03977277 4 7 C4.66 6.34 5.32 5.68 6 5 C5.01 4.360625 4.02 3.72125 3 3.0625 C2.01 2.381875 1.02 1.70125 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#8E6046\",transform:\"translate(352,311)\"})),_path1356||(_path1356=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.53216715 0.44238385 14.6802723 1.13905228 22 3 C22 3.33 22 3.66 22 4 C11.61562308 4.09776087 1.33807949 4.1555538 -9 3 C-9 2.67 -9 2.34 -9 2 C-6.03 2 -3.06 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#A9735A\",transform:\"translate(524,308)\"})),_path1357||(_path1357=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 1.32 0.66 2.64 1 4 C3.97 4 6.94 4 10 4 C10 4.33 10 4.66 10 5 C-1.72038134 5.45369218 -13.34785474 4.11367733 -25 3 C-25 2.67 -25 2.34 -25 2 C-16.75 2 -8.5 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#05120F\",transform:\"translate(522,282)\"})),_path1358||(_path1358=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3 7.26 3 14.52 3 22 C2.34 22 1.68 22 1 22 C0.00137301 14.63512596 -0.10331031 7.42686315 0 0 Z \",fill:\"#772316\",transform:\"translate(523,262)\"})),_path1359||(_path1359=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.598125 0.20625 1.19625 0.4125 1.8125 0.625 C-1.1875 2.625 -1.1875 2.625 -4.1875 2.625 C-3.8575 4.275 -3.5275 5.925 -3.1875 7.625 C-1.5375 7.625 0.1125 7.625 1.8125 7.625 C0.8225 7.955 -0.1675 8.285 -1.1875 8.625 C-1.1875 9.615 -1.1875 10.605 -1.1875 11.625 C2.4425 11.625 6.0725 11.625 9.8125 11.625 C9.4825 12.285 9.1525 12.945 8.8125 13.625 C5.1825 13.625 1.5525 13.625 -2.1875 13.625 C-2.5175 12.305 -2.8475 10.985 -3.1875 9.625 C-3.8475 9.625 -4.5075 9.625 -5.1875 9.625 C-5.48046875 3.5703125 -5.48046875 3.5703125 -5.1875 1.625 C-2.1875 -0.375 -2.1875 -0.375 0 0 Z \",fill:\"#967A5E\",transform:\"translate(330.1875,255.375)\"})),_path1360||(_path1360=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0.495 2.97 0.495 6 1 C6 2.65 6 4.3 6 6 C6.66 6.33 7.32 6.66 8 7 C7.34 7 6.68 7 6 7 C6 8.98 6 10.96 6 13 C5.34 13 4.68 13 4 13 C3.67 11.35 3.34 9.7 3 8 C2.01 8.33 1.02 8.66 0 9 C0 6.03 0 3.06 0 0 Z \",fill:\"#99664C\",transform:\"translate(0,229)\"})),_path1361||(_path1361=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.43726752 4.5245734 14.31792243 9.41952307 21 15 C20.01 15.33 19.02 15.66 18 16 C15.77020649 14.68117687 13.76136353 13.34494626 11.6875 11.8125 C10.56675236 11.00602922 9.44566023 10.20003694 8.32421875 9.39453125 C7.77685059 8.9970166 7.22948242 8.59950195 6.66552734 8.18994141 C4.15248603 6.3944909 1.57982966 4.6977699 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#CDA375\",transform:\"translate(206,199)\"})),_path1362||(_path1362=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C5.625 2.8125 5.625 2.8125 6 6 C5.01 7.485 5.01 7.485 4 9 C3.34 9 2.68 9 2 9 C2 14.28 2 19.56 2 25 C1.34 25 0.68 25 0 25 C0 16.75 0 8.5 0 0 Z \",fill:\"#BB9F7C\",transform:\"translate(359,190)\"})),_path1363||(_path1363=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 6.57658989 -7.54142741 12.65730967 -12 17.125 C-12.9948088 18.08872103 -13.992691 19.04935213 -15 20 C-16 17 -16 17 -15 14 C-14.01 13.67 -13.02 13.34 -12 13 C-11.67 12.34 -11.34 11.68 -11 11 C-10.34 11 -9.68 11 -9 11 C-8.87818359 10.12601563 -8.87818359 10.12601563 -8.75390625 9.234375 C-7.77027513 6.31915739 -6.29381519 5.19489508 -3.9375 3.25 C-3.20402344 2.63640625 -2.47054688 2.0228125 -1.71484375 1.390625 C-1.14894531 0.93171875 -0.58304687 0.4728125 0 0 Z \",fill:\"#6D8C76\",transform:\"translate(442,99)\"})),_path1364||(_path1364=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C-3.53642758 7.20630497 -10.405558 12.16834147 -18 17 C-18.66 16.67 -19.32 16.34 -20 16 C-17.41768612 13.89457973 -14.83396996 11.79088731 -12.25 9.6875 C-11.15558594 8.79514648 -11.15558594 8.79514648 -10.0390625 7.88476562 C-8.97558594 7.01948242 -8.97558594 7.01948242 -7.890625 6.13671875 C-7.24125977 5.60780029 -6.59189453 5.07888184 -5.92285156 4.53393555 C-4.97104004 3.77463745 -4.97104004 3.77463745 -4 3 C-3.32163086 2.41968018 -2.64326172 1.83936035 -1.94433594 1.24145508 C-1.30270508 0.8317749 -0.66107422 0.42209473 0 0 Z \",fill:\"#3F2A22\",transform:\"translate(63,518)\"})),_path1365||(_path1365=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.00698975 1.3227887 4.00591923 2.65783025 6 4 C7.11375 4.7425 7.11375 4.7425 8.25 5.5 C10.21133102 7.18114087 10.94673128 8.66776213 12 11 C12.66 11.66 13.32 12.32 14 13 C9.77510398 12.46719784 7.45919284 11.12321801 4.1875 8.4375 C3.39730469 7.79683594 2.60710938 7.15617187 1.79296875 6.49609375 C0.90544922 5.75552734 0.90544922 5.75552734 0 5 C0.33 4.01 0.66 3.02 1 2 C0.34 1.67 -0.32 1.34 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#F3D7B2\",transform:\"translate(516,459)\"})),_path1366||(_path1366=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C9.59441508 0.46920411 18.6416621 1.94194229 28 4 C28 4.33 28 4.66 28 5 C7.36082474 5.68041237 7.36082474 5.68041237 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#0B3E32\",transform:\"translate(478,403)\"})),_path1367||(_path1367=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 1.32 0 2.64 0 4 C-4.50353262 5.75747614 -8.17639811 6.19294408 -13 6 C-13 4 -13 4 -11 1.875 C-6.98628702 -0.63357061 -4.66342829 -0.31616463 0 0 Z \",fill:\"#D2A069\",transform:\"translate(106,374)\"})),_path1368||(_path1368=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.79057349 2.19752201 2.97165327 3.9149598 3.875 6.625 C4.8022453 9.18767082 4.8022453 9.18767082 7.3125 10.25 C9.8654498 10.96245111 12.38790984 11.55221311 15 12 C14.67 12.99 14.34 13.98 14 15 C10.37 14.67 6.74 14.34 3 14 C2.34 11.69 1.68 9.38 1 7 C0.67 7 0.34 7 0 7 C0 4.69 0 2.38 0 0 Z \",fill:\"#212519\",transform:\"translate(428,345)\"})),_path1369||(_path1369=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3 0.99 3 1.98 3 3 C3.66 3 4.32 3 5 3 C5 3.99 5 4.98 5 6 C5.33 4.35 5.66 2.7 6 1 C6.86625 1.7115625 6.86625 1.7115625 7.75 2.4375 C9.92582084 3.9484867 11.42602448 4.54036151 14 5 C14 5.99 14 6.98 14 8 C11.03 7.505 11.03 7.505 8 7 C8 7.66 8 8.32 8 9 C3.75177626 8.52797514 1.80010291 6.03344482 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#BB3226\",transform:\"translate(148,335)\"})),_path1370||(_path1370=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.50827405 0.18963643 4.7412563 0.72647095 7.1875 3.3125 C10.27618485 7.89227409 11.25589227 10.37037005 11 16 C9.00118932 13.00178398 7.52480991 9.99432114 6 6.7421875 C5.11392791 4.82650826 5.11392791 4.82650826 3 4 C2.67 4.99 2.34 5.98 2 7 C1.01 6.67 0.02 6.34 -1 6 C-1.042721 4.33388095 -1.04063832 2.66617115 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#6F3F12\",transform:\"translate(559,336)\"})),_path1371||(_path1371=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.3 0 6.6 0 10 0 C9 2 9 2 7 2.6875 C6.34 3.120625 5.68 3.55375 5 4 C4.18129815 7.56206661 4.18129815 7.56206661 4 11 C2.68 10.67 1.36 10.34 0 10 C0 6.7 0 3.4 0 0 Z \",fill:\"#DDD190\",transform:\"translate(586,326)\"})),_path1372||(_path1372=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.30267439 0.36776168 11.33251843 1.16625922 17 4 C17 4.33 17 4.66 17 5 C10.90367577 6.32528788 6.02232181 5.46619907 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#1F7649\",transform:\"translate(489,313)\"})),_path1373||(_path1373=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 3.3 1 6.6 1 10 C-3.30764815 8.43358249 -7.06171464 6.31663844 -11 4 C-10.01 3.67 -9.02 3.34 -8 3 C-8 2.34 -8 1.68 -8 1 C-2.25 2.875 -2.25 2.875 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#9C6B51\",transform:\"translate(367,309)\"})),_path1374||(_path1374=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.44302097 2.39690506 14.71837152 5.15262441 22 8 C21.67 8.66 21.34 9.32 21 10 C13.74839665 8.180206 6.87619244 5.93841629 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#D29F6A\",transform:\"translate(227,239)\"})),_path1375||(_path1375=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.48252838 1.37179687 14.05604954 3.92163279 21 7 C20.01 7.33 19.02 7.66 18 8 C17.34 7.67 16.68 7.34 16 7 C16 7.99 16 8.98 16 10 C11.71 10 7.42 10 3 10 C3 9.67 3 9.34 3 9 C6.3 8.67 9.6 8.34 13 8 C11.0745356 5.7763932 11.0745356 5.7763932 8 5 C8 4.34 8 3.68 8 3 C7.236875 3.061875 6.47375 3.12375 5.6875 3.1875 C2.51219194 2.96596688 2.04264341 2.28224968 0 0 Z \",fill:\"#2D1D15\",transform:\"translate(142,215)\"})),_path1376||(_path1376=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0.495 1.98 0.495 4 1 C4 4.3 4 7.6 4 11 C2.35 11.33 0.7 11.66 -1 12 C-1.02687279 10.18757948 -1.04633715 8.37504767 -1.0625 6.5625 C-1.07410156 5.55316406 -1.08570313 4.54382813 -1.09765625 3.50390625 C-1 1 -1 1 0 0 Z \",fill:\"#C0C4A4\",transform:\"translate(355,205)\"})),_path1377||(_path1377=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2 1.33 2 1.66 2 2 C2.99 2 3.98 2 5 2 C1.47244094 5.77952756 1.47244094 5.77952756 -0.875 6.875 C-4.19231943 8.63122793 -6.41322829 11.29564775 -9 14 C-9.99 13.67 -10.98 13.34 -12 13 C-10.4375 11.79557292 -8.875 10.59114583 -7.3125 9.38671875 C-5.65629795 7.95508863 -5.65629795 7.95508863 -6 5 C-4.17806158 3.0750353 -2.10764717 1.62464469 0 0 Z M-15 15 C-14.34 15.33 -13.68 15.66 -13 16 C-14.98 16.99 -14.98 16.99 -17 18 C-16.34 17.01 -15.68 16.02 -15 15 Z \",fill:\"#371C19\",transform:\"translate(429,146)\"})),_path1378||(_path1378=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.875 1.75 3.875 1.75 5 4 C5.99 4.33 6.98 4.66 8 5 C8.639375 5.66 9.27875 6.32 9.9375 7 C12.15177129 9.14717216 13.05818333 9.46512424 16 10 C17.6744239 10.6469365 19.34302621 11.30959426 21 12 C20.67 13.32 20.34 14.64 20 16 C14.80968922 14.3825067 10.93227414 11.14487963 6.6875 7.875 C5.94693359 7.31167969 5.20636719 6.74835938 4.44335938 6.16796875 C2.62498391 4.78365711 0.81075326 3.39425774 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#5E452B\",transform:\"translate(100,120)\"})),_path1379||(_path1379=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.60108576 5.65020618 -2.07528683 10.66164461 -4 16 C-4.33 16 -4.66 16 -5 16 C-5.33 14.35 -5.66 12.7 -6 11 C-7.65 12.32 -9.3 13.64 -11 15 C-3.8 0 -3.8 0 0 0 Z \",fill:\"#442B21\",transform:\"translate(126,574)\"})),_path1380||(_path1380=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.23556641 0.01740234 1.23556641 0.01740234 2.49609375 0.03515625 C3.32238281 0.04417969 4.14867187 0.05320312 5 0.0625 C5.63808594 0.07410156 6.27617187 0.08570313 6.93359375 0.09765625 C6.93359375 0.42765625 6.93359375 0.75765625 6.93359375 1.09765625 C4.29359375 1.09765625 1.65359375 1.09765625 -1.06640625 1.09765625 C-1.04320312 1.99226562 -1.02 2.886875 -0.99609375 3.80859375 C-0.88597151 11.18678383 -1.21981359 17.94210968 -3.06640625 25.09765625 C-3.39640625 25.09765625 -3.72640625 25.09765625 -4.06640625 25.09765625 C-4.25770064 7.58359236 -4.25770064 7.58359236 -3.06640625 1.09765625 C-2.06640625 0.09765625 -2.06640625 0.09765625 0 0 Z \",fill:\"#D4B085\",transform:\"translate(274.06640625,529.90234375)\"})),_path1381||(_path1381=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.72492561 4.02121329 9.37738645 8.1096703 13.984375 12.265625 C16.08675734 14.14611494 16.08675734 14.14611494 19 16 C19 16.66 19 17.32 19 18 C14.77943309 17.48481343 12.63398559 15.0988435 9.625 12.25 C5.83288771 8.70663403 2.03029089 5.26780342 -2 2 C-1.34 1.34 -0.68 0.68 0 0 Z \",fill:\"#6B4635\",transform:\"translate(575,529)\"})),_path1382||(_path1382=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.77730469 0.15082031 1.55460937 0.30164063 2.35546875 0.45703125 C3.14566406 0.59496094 3.93585938 0.73289062 4.75 0.875 C5.63751953 1.07029297 5.63751953 1.07029297 6.54296875 1.26953125 C6.87296875 2.58953125 7.20296875 3.90953125 7.54296875 5.26953125 C2.59296875 5.26953125 -2.35703125 5.26953125 -7.45703125 5.26953125 C-2.45703125 0.26953125 -2.45703125 0.26953125 0 0 Z \",fill:\"#E5455B\",transform:\"translate(254.45703125,486.73046875)\"})),_path1383||(_path1383=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.20625 0.5775 0.4125 1.155 0.625 1.75 C2.49750888 4.81410544 4.96958519 6.15539968 8 8 C6.68 9.32 5.36 10.64 4 12 C3.67 11.01 3.34 10.02 3 9 C1.33927151 8.31867549 -0.327767 7.65257873 -2 7 C-4 4 -4 4 -4 1 C-2 0 -2 0 0 0 Z \",fill:\"#936045\",transform:\"translate(493,464)\"})),_path1384||(_path1384=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.33 0.99 -0.66 1.98 -1 3 C-3.97 3 -6.94 3 -10 3 C-10 3.66 -10 4.32 -10 5 C-10.99 5 -11.98 5 -13 5 C-13 5.66 -13 6.32 -13 7 C-12.34 7.33 -11.68 7.66 -11 8 C-12.65 8.33 -14.3 8.66 -16 9 C-15.72960418 5.75525016 -15.1742292 4.20795098 -13.0625 1.6875 C-8.71708095 -0.70691458 -4.85670666 -0.33949794 0 0 Z \",fill:\"#F26F5C\",transform:\"translate(382,458)\"})),_path1385||(_path1385=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 1.32 0.66 2.64 1 4 C1.57234375 4.09410156 2.1446875 4.18820312 2.734375 4.28515625 C5.52332319 5.16511749 7.07276886 6.49815152 9.25 8.4375 C9.95640625 9.05496094 10.6628125 9.67242187 11.390625 10.30859375 C13 12 13 12 13 14 C9.51669784 13.35494404 6.90567134 12.01782732 4 10 C4 9.34 4 8.68 4 8 C3.01 8 2.02 8 1 8 C0.67 8.99 0.34 9.98 0 11 C0 7.37 0 3.74 0 0 Z \",fill:\"#9B6F56\",transform:\"translate(482,438)\"})),_path1386||(_path1386=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.03688965 0.05236816 2.0737793 0.10473633 3.14208984 0.15869141 C4.82431641 0.23603516 4.82431641 0.23603516 6.54052734 0.31494141 C7.71615234 0.37939453 8.89177734 0.44384766 10.10302734 0.51025391 C11.87806641 0.59533203 11.87806641 0.59533203 13.68896484 0.68212891 C16.61923847 0.82391634 19.54869507 0.97535724 22.47802734 1.13525391 C22.47802734 1.46525391 22.47802734 1.79525391 22.47802734 2.13525391 C14.78684139 2.88692304 7.20574842 3.27216235 -0.52197266 3.13525391 C-0.52197266 4.78525391 -0.52197266 6.43525391 -0.52197266 8.13525391 C-0.85197266 8.13525391 -1.18197266 8.13525391 -1.52197266 8.13525391 C-1.52197266 6.48525391 -1.52197266 4.83525391 -1.52197266 3.13525391 C-2.18197266 3.13525391 -2.84197266 3.13525391 -3.52197266 3.13525391 C-3.52197266 5.77525391 -3.52197266 8.41525391 -3.52197266 11.13525391 C-3.85197266 11.13525391 -4.18197266 11.13525391 -4.52197266 11.13525391 C-4.57597002 9.67732506 -4.61476442 8.21882679 -4.64697266 6.76025391 C-4.68177734 5.54208984 -4.68177734 5.54208984 -4.71728516 4.29931641 C-4.41492479 0.94916356 -3.28710384 0.17628805 0 0 Z \",fill:\"#A7860A\",transform:\"translate(300.52197265625,423.86474609375)\"})),_path1387||(_path1387=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.62493334 -0.05787784 7.24974857 -0.0935542 10.875 -0.125 C11.90753906 -0.14175781 12.94007813 -0.15851563 14.00390625 -0.17578125 C14.99003906 -0.18222656 15.97617187 -0.18867188 16.9921875 -0.1953125 C18.35899658 -0.21102295 18.35899658 -0.21102295 19.75341797 -0.22705078 C22 0 22 0 24 2 C15.64380043 2.75475351 7.39004715 3.13605482 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#120D12\",transform:\"translate(573,416)\"})),_path1388||(_path1388=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.33 0 0.66 0 1 C-1.65 1.33 -3.3 1.66 -5 2 C-2.525 2.495 -2.525 2.495 0 3 C0 3.33 0 3.66 0 4 C-7.51806849 4.44032071 -13.84224277 3.28612778 -21 1 C-21 0.67 -21 0.34 -21 0 C-6.21867882 -1.33257403 -6.21867882 -1.33257403 0 0 Z \",fill:\"#4D3E2E\",transform:\"translate(407,406)\"})),_path1389||(_path1389=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.91731918 0.11455681 3.8338675 0.24206258 5.75 0.375 C7.35101562 0.47941406 7.35101562 0.47941406 8.984375 0.5859375 C12 1 12 1 16 3 C12.7 3 9.4 3 6 3 C5.67 4.32 5.34 5.64 5 7 C4.67 6.34 4.34 5.68 4 5 C3.67 5.66 3.34 6.32 3 7 C1.68 7 0.36 7 -1 7 C-0.67 4.69 -0.34 2.38 0 0 Z \",fill:\"#2E2D28\",transform:\"translate(556,397)\"})),_path1390||(_path1390=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-3.3 2.33 -6.6 2.66 -10 3 C-7.36 3.33 -4.72 3.66 -2 4 C-2 4.33 -2 4.66 -2 5 C-7.8068781 5.20656879 -12.51044436 5.12096468 -18 3 C-19.99369031 2.63079809 -21.99279077 2.28674418 -24 2 C-24 1.67 -24 1.34 -24 1 C-23.01257813 0.93941406 -22.02515625 0.87882812 -21.0078125 0.81640625 C-19.72648438 0.73261719 -18.44515625 0.64882813 -17.125 0.5625 C-15.84882813 0.48128906 -14.57265625 0.40007812 -13.2578125 0.31640625 C-4.00862069 -0.58189655 -4.00862069 -0.58189655 0 0 Z \",fill:\"#780804\",transform:\"translate(150,401)\"})),_path1391||(_path1391=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C0.67 8.58 0.34 17.16 0 26 C-0.66 26 -1.32 26 -2 26 C-2 18.08 -2 10.16 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#EACA9C\",transform:\"translate(340,368)\"})),_path1392||(_path1392=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.66 2.64 1.32 4 2 C3.49396008 4.16874252 3.00016187 5.99967627 2 8 C1.34 8 0.68 8 0 8 C0 8.99 0 9.98 0 11 C-3.3 10.67 -6.6 10.34 -10 10 C-10 9.34 -10 8.68 -10 8 C-8.906875 7.855625 -7.81375 7.71125 -6.6875 7.5625 C-3.06877013 7.11711896 -3.06877013 7.11711896 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#ECE4CC\",transform:\"translate(328,330)\"})),_path1393||(_path1393=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.5775 0.268125 -1.155 0.53625 -1.75 0.8125 C-4.05396098 1.94184834 -4.05396098 1.94184834 -6.0625 3.625 C-8 5 -8 5 -11 5 C-11 6.65 -11 8.3 -11 10 C-12.65 9.67 -14.3 9.34 -16 9 C-15.42655063 6.13275314 -15.1385485 5.1385485 -13 3 C-13 2.34 -13 1.68 -13 1 C-8.60563789 0.14256349 -4.47427924 -0.08948558 0 0 Z \",fill:\"#E2D199\",transform:\"translate(453,331)\"})),_path1394||(_path1394=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C3.7041678 5.15946865 4.22225605 9.4425333 4.125 14.9375 C4.11597656 15.62134766 4.10695313 16.30519531 4.09765625 17.00976562 C4.07438958 18.67333287 4.03853167 20.33671631 4 22 C3.34 22 2.68 22 2 22 C0.90684754 17.4161086 0.67717375 12.87488993 0.4375 8.1875 C0.39431641 7.39923828 0.35113281 6.61097656 0.30664062 5.79882812 C0.20121679 3.86605785 0.10016906 1.93304974 0 0 Z \",fill:\"#301E10\",transform:\"translate(369,317)\"})),_path1395||(_path1395=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-3.62873743 1.20957914 -7.15146182 1.47206345 -10.9375 1.75 C-12.01161133 1.85248047 -12.01161133 1.85248047 -13.10742188 1.95703125 C-16.47930749 2.20078202 -18.55418767 2.26428812 -21.50390625 0.515625 C-21.99761719 0.01546875 -22.49132812 -0.4846875 -23 -1 C-6.02602032 -3.56211014 -6.02602032 -3.56211014 0 0 Z \",fill:\"#6A5740\",transform:\"translate(124,294)\"})),_path1396||(_path1396=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.625 -0.125 6.625 -0.125 10 1 C10 1.99 10 2.98 10 4 C11.32 4.33 12.64 4.66 14 5 C11.95840905 5.0272616 9.91671037 5.04651345 7.875 5.0625 C6.73804688 5.07410156 5.60109375 5.08570313 4.4296875 5.09765625 C1.1870844 5.005327 -1.81932612 4.61389906 -5 4 C-5 3.67 -5 3.34 -5 3 C-3.35 3 -1.7 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#50473F\",transform:\"translate(349,273)\"})),_path1397||(_path1397=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.96 0 7.92 0 12 0 C12 5.94 12 11.88 12 18 C12.66 18 13.32 18 14 18 C14 18.66 14 19.32 14 20 C12.68 20 11.36 20 10 20 C10 13.73 10 7.46 10 1 C6.7 1.33 3.4 1.66 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#BFB57A\",transform:\"translate(56,269)\"})),_path1398||(_path1398=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C4.5912689 4.873261 5.21192221 8.80790596 5 14 C5.66 13.67 6.32 13.34 7 13 C7 14.65 7 16.3 7 18 C5.68 17.67 4.36 17.34 3 17 C2.87625 15.9275 2.7525 14.855 2.625 13.75 C2.22660091 10.18185277 2.22660091 10.18185277 0.9375 7.9375 C-0.3589057 5.25826155 -0.13326354 2.93179788 0 0 Z \",fill:\"#C3745C\",transform:\"translate(71,247)\"})),_path1399||(_path1399=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 10.56 1 21.12 1 32 C0.01 32 -0.98 32 -2 32 C-2 31.34 -2 30.68 -2 30 C-3.32 29.67 -4.64 29.34 -6 29 C-4.68 28.67 -3.36 28.34 -2 28 C-2 26.68 -2 25.36 -2 24 C-1.34 24 -0.68 24 0 24 C0 16.08 0 8.16 0 0 Z \",fill:\"#909B88\",transform:\"translate(184,152)\"})),_path1400||(_path1400=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4.103125 0.763125 4.20625 1.52625 4.3125 2.3125 C5.05600892 5.21894395 5.84858032 6.03566029 8 8 C8 8.66 8 9.32 8 10 C8.66 10 9.32 10 10 10 C10.99 12.31 11.98 14.62 13 17 C12.01 17 11.02 17 10 17 C8.12488264 14.76462387 6.46383342 12.57851771 4.8125 10.1875 C4.34908203 9.54490234 3.88566406 8.90230469 3.40820312 8.24023438 C0 3.39646999 0 3.39646999 0 0 Z \",fill:\"#16211E\",transform:\"translate(112,0)\"})),_path1401||(_path1401=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.99 1.98 1.98 3 3 C1.79405824 7.63823754 0.54682129 11.88590406 -2 16 C-4.1015625 16.6640625 -4.1015625 16.6640625 -6 17 C-4.33846988 11.14340094 -2.52958084 5.5409866 0 0 Z \",fill:\"#5A3B2F\",transform:\"translate(135,592)\"})),_path1402||(_path1402=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C2.31477461 4.02468175 1.37595057 6.82290798 0.1875 9.6875 C-0.12832031 10.47511719 -0.44414062 11.26273438 -0.76953125 12.07421875 C-2 14 -2 14 -4.13671875 14.76953125 C-5.05904297 14.88361328 -5.05904297 14.88361328 -6 15 C-5.39644592 11.14974121 -4.23227397 8.13898841 -2.4375 4.6875 C-1.98246094 3.80449219 -1.52742187 2.92148437 -1.05859375 2.01171875 C-0.53458984 1.01591797 -0.53458984 1.01591797 0 0 Z \",fill:\"#82563F\",transform:\"translate(160,543)\"})),_path1403||(_path1403=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4.33 1.98 4.66 3.96 5 6 C1.7 5.67 -1.6 5.34 -5 5 C-5 5.99 -5 6.98 -5 8 C-6.66611905 8.042721 -8.33382885 8.04063832 -10 8 C-10.33 7.67 -10.66 7.34 -11 7 C-12.51469448 6.76807135 -14.03754562 6.58784762 -15.5625 6.4375 C-16.38878906 6.35371094 -17.21507812 6.26992188 -18.06640625 6.18359375 C-18.70449219 6.12300781 -19.34257812 6.06242188 -20 6 C-20 5.67 -20 5.34 -20 5 C-9.11 4.01 -9.11 4.01 2 3 C1.34 2.01 0.68 1.02 0 0 Z \",fill:\"#603D2F\",transform:\"translate(484,512)\"})),_path1404||(_path1404=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.33 0 0.66 0 1 C-4.29 1.66 -8.58 2.32 -13 3 C-13 3.33 -13 3.66 -13 4 C-17.95 4 -22.9 4 -28 4 C-27.34 3.67 -26.68 3.34 -26 3 C-26 2.34 -26 1.68 -26 1 C-17.31238511 0.34344611 -8.71782637 -0.16311941 0 0 Z \",fill:\"#D2AF8C\",transform:\"translate(354,509)\"})),_path1405||(_path1405=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.25 2.25 3.25 2.25 6 5 C6.171875 7.671875 6.171875 7.671875 6 10 C-3.59453303 3.84965831 -3.59453303 3.84965831 -7 0 C-3.73151642 -1.08949453 -3.09368603 -1.23747441 0 0 Z \",fill:\"#F1D2A8\",transform:\"translate(548,483)\"})),_path1406||(_path1406=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.62 0 9.24 0 14 0 C10.32767608 3.67232392 6.70116209 5.87627912 1.5625 6.25 C0.716875 6.1675 -0.12875 6.085 -1 6 C-0.67 4.02 -0.34 2.04 0 0 Z \",fill:\"#212E31\",transform:\"translate(212,409)\"})),_path1407||(_path1407=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 1.98 1 3.96 1 6 C1.84304687 5.98839844 2.68609375 5.97679687 3.5546875 5.96484375 C4.65039062 5.95582031 5.74609375 5.94679688 6.875 5.9375 C7.96554688 5.92589844 9.05609375 5.91429687 10.1796875 5.90234375 C13 6 13 6 15 7 C15 7.66 15 8.32 15 9 C12.52076199 9.02685095 10.0418116 9.04676547 7.5625 9.0625 C6.85544922 9.07087891 6.14839844 9.07925781 5.41992188 9.08789062 C3.61306441 9.09653588 1.80612397 9.05220011 0 9 C-0.33 8.67 -0.66 8.34 -1 8 C-0.82364548 5.30917128 -0.38164079 2.67148554 0 0 Z \",fill:\"#48231C\",transform:\"translate(65,394)\"})),_path1408||(_path1408=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.96 0 7.92 0 12 0 C12 0.33 12 0.66 12 1 C15.96 1.33 19.92 1.66 24 2 C24 2.66 24 3.32 24 4 C18.72 4 13.44 4 8 4 C8 3.34 8 2.68 8 2 C5.36 2 2.72 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#1E0508\",transform:\"translate(376,396)\"})),_path1409||(_path1409=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 4.62 2 9.24 2 14 C-0.97 13.67 -3.94 13.34 -7 13 C-7 12.34 -7 11.68 -7 11 C-6.195625 10.79375 -5.39125 10.5875 -4.5625 10.375 C-3.716875 9.92125 -2.87125 9.4675 -2 9 C-1.16442277 6.06991681 -1.16442277 6.06991681 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#81573F\",transform:\"translate(412,391)\"})),_path1410||(_path1410=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.70125 0.49371094 1.4025 0.98742187 2.125 1.49609375 C7.87273395 5.37737605 12.01131889 7.86813809 19 8 C19 8.33 19 8.66 19 9 C16.54220024 9.22126178 14.08472352 9.42750395 11.625 9.625 C10.57699219 9.72167969 10.57699219 9.72167969 9.5078125 9.8203125 C7.67630889 9.96119739 5.83687252 9.98761659 4 10 C2 8 2 8 1.875 5.375 C1.91625 4.59125 1.9575 3.8075 2 3 C1.34 3 0.68 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#04170C\",transform:\"translate(520,383)\"})),_path1411||(_path1411=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0 4.62 0 7 0 C7 3.63 7 7.26 7 11 C4.36 11 1.72 11 -1 11 C-0.01 10.67 0.98 10.34 2 10 C2 7.69 2 5.38 2 3 C2.66 2.67 3.32 2.34 4 2 C2.68 1.34 1.36 0.68 0 0 Z \",fill:\"#589A60\",transform:\"translate(588,376)\"})),_path1412||(_path1412=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.66 5.61 2.32 11.22 3 17 C3.99 17 4.98 17 6 17 C6 18.98 6 20.96 6 23 C4.68 23 3.36 23 2 23 C-0.48260659 15.39701733 -0.18508331 7.89688807 0 0 Z \",fill:\"#28291C\",transform:\"translate(200,345)\"})),_path1413||(_path1413=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 3.63 1 7.26 1 11 C-1 8 -1 8 -1 6 C-1.66 6 -2.32 6 -3 6 C-3.33 7.65 -3.66 9.3 -4 11 C-3.34 11 -2.68 11 -2 11 C-2 11.66 -2 12.32 -2 13 C-3.65 12.67 -5.3 12.34 -7 12 C-7.625 9.125 -7.625 9.125 -8 6 C-6 4 -6 4 -2.875 3.875 C-1.92625 3.91625 -0.9775 3.9575 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#793026\",transform:\"translate(65,340)\"})),_path1414||(_path1414=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.625 0.9375 1.625 0.9375 2.625 3.9375 C0.85994565 4.80354534 -0.91228074 5.65498642 -2.6875 6.5 C-4.16669922 7.21349609 -4.16669922 7.21349609 -5.67578125 7.94140625 C-8.375 8.9375 -8.375 8.9375 -11.375 7.9375 C-10.055 7.6075 -8.735 7.2775 -7.375 6.9375 C-7.375 6.2775 -7.375 5.6175 -7.375 4.9375 C-8.035 4.6075 -8.695 4.2775 -9.375 3.9375 C-3.04421899 -0.08011103 -3.04421899 -0.08011103 0 0 Z \",fill:\"#131B15\",transform:\"translate(490.375,335.0625)\"})),_path1415||(_path1415=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C0.99 2 1.98 2 3 2 C3.33 4.31 3.66 6.62 4 9 C3.34 9 2.68 9 2 9 C2 8.01 2 7.02 2 6 C1.34 6 0.68 6 0 6 C0 5.01 0 4.02 0 3 C-3.11785113 3.64644661 -3.11785113 3.64644661 -4 6 C-2.68 6.66 -1.36 7.32 0 8 C-3.37027852 8 -4.06702696 7.50175992 -6.6875 5.5625 C-7.31011719 5.11003906 -7.93273437 4.65757812 -8.57421875 4.19140625 C-9.04472656 3.79824219 -9.51523438 3.40507812 -10 3 C-10 2.67 -10 2.34 -10 2 C-6.38026598 0.68373308 -3.90432869 0 0 0 Z \",fill:\"#C32919\",transform:\"translate(151,332)\"})),_path1416||(_path1416=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4 1.98 4 3.96 4 6 C4.66 6 5.32 6 6 6 C5.67 6.99 5.34 7.98 5 9 C2.03 9 -0.94 9 -4 9 C-2.68 6.03 -1.36 3.06 0 0 Z \",fill:\"#19090C\",transform:\"translate(162,310)\"})),_path1417||(_path1417=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.47283543 -0.35164297 11.26560813 -0.17221678 17 3 C17.33 3.66 17.66 4.32 18 5 C11.73 4.34 5.46 3.68 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#3F4C2A\",transform:\"translate(218,301)\"})),_path1418||(_path1418=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.73025391 0.09603516 1.46050781 0.19207031 2.21289062 0.29101562 C3.67982609 0.48461473 5.14584763 0.68527303 6.61083984 0.89306641 C8.1079114 1.09327358 9.60879015 1.26646953 11.11181641 1.41552734 C13.01967262 1.60831317 14.91808703 1.8903785 16.8125 2.1875 C17.1425 2.8475 17.4725 3.5075 17.8125 4.1875 C11.11329127 4.35106156 4.8563831 3.76352131 -1.75 2.6875 C-3.11995117 2.47287109 -3.11995117 2.47287109 -4.51757812 2.25390625 C-6.74192736 1.90453202 -8.9650921 1.54898178 -11.1875 1.1875 C-7.24529038 -1.44063975 -4.45341479 -0.63948432 0 0 Z \",fill:\"#B5866A\",transform:\"translate(512.1875,296.8125)\"})),_path1419||(_path1419=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.99 2.97 3.98 5.94 5 9 C4.34 9 3.68 9 3 9 C3.185625 10.0725 3.37125 11.145 3.5625 12.25 C4.17073171 17.46341463 4.17073171 17.46341463 3 20 C2.01 20.33 1.02 20.66 0 21 C-0.33 18.69 -0.66 16.38 -1 14 C-0.01 14.33 0.98 14.66 2 15 C1.814375 14.05125 1.62875 13.1025 1.4375 12.125 C1 9 1 9 2 7 C1.01 6.34 0.02 5.68 -1 5 C-0.67 3.35 -0.34 1.7 0 0 Z \",fill:\"#66402D\",transform:\"translate(78,243)\"})),_path1420||(_path1420=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 1.32 0 2.64 0 4 C-2.75078884 4.91692961 -4.35948913 5.10886083 -7.1875 5.0625 C-9.0746875 5.0315625 -9.0746875 5.0315625 -11 5 C-11 3.35 -11 1.7 -11 0 C-3.57142857 -1.28571429 -3.57142857 -1.28571429 0 0 Z \",fill:\"#3E433F\",transform:\"translate(533,212)\"})),_path1421||(_path1421=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 4.95 1 9.9 1 15 C1.99 15 2.98 15 4 15 C4.33 10.71 4.66 6.42 5 2 C5.33 2 5.66 2 6 2 C6.33 5.96 6.66 9.92 7 14 C7.66 13.67 8.32 13.34 9 13 C10.125 16.75 10.125 16.75 9 19 C5.7 18.01 2.4 17.02 -1 16 C-0.67 10.72 -0.34 5.44 0 0 Z \",fill:\"#BF9F7D\",transform:\"translate(114,188)\"})),_path1422||(_path1422=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0.33 3.3 0.66 5 1 C5 1.99 5 2.98 5 4 C5.66 4.33 6.32 4.66 7 5 C7 4.34 7 3.68 7 3 C9.31 3 11.62 3 14 3 C13.01 3.495 13.01 3.495 12 4 C11.67 4.99 11.34 5.98 11 7 C8.31143576 8.00821159 6.58296785 8.22736824 3.88671875 7.17578125 C1.89205069 6.16604698 -0.0646772 5.11893353 -2 4 C-1.34 2.68 -0.68 1.36 0 0 Z \",fill:\"#301F19\",transform:\"translate(20,137)\"})),_path1423||(_path1423=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.045966 3.76877251 13.47567498 8.40844495 20 13 C19.01 13.66 18.02 14.32 17 15 C14.15531268 13.07876797 11.326442 11.13545327 8.5 9.1875 C7.68917969 8.64029297 6.87835937 8.09308594 6.04296875 7.52929688 C4.89248047 6.73168945 4.89248047 6.73168945 3.71875 5.91796875 C3.00654297 5.43094482 2.29433594 4.9439209 1.56054688 4.44213867 C1.04556641 3.96623291 0.53058594 3.49032715 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#AB8D60\",transform:\"translate(0,53)\"})),_path1424||(_path1424=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1 2 1 2 0.44140625 4.1640625 C0.15136719 4.97617187 -0.13867188 5.78828125 -0.4375 6.625 C-0.72496094 7.44226563 -1.01242188 8.25953125 -1.30859375 9.1015625 C-1.53675781 9.72804688 -1.76492187 10.35453125 -2 11 C-2.66 11 -3.32 11 -4 11 C-4.33 12.65 -4.66 14.3 -5 16 C-5.99 16 -6.98 16 -8 16 C-8.66 16.33 -9.32 16.66 -10 17 C-8.125 11.25 -8.125 11.25 -7 9 C-6.34 9 -5.68 9 -5 9 C-4.5978125 7.6078125 -4.5978125 7.6078125 -4.1875 6.1875 C-3.08851629 3.23759634 -2.37581439 1.94384814 0 0 Z \",fill:\"#54362A\",transform:\"translate(147,565)\"})),_path1425||(_path1425=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C3.12135928 2.24271857 4.24187002 4.48582513 5.359375 6.73046875 C6.58715895 9.17726676 7.82731731 11.61580726 9.078125 14.05078125 C9.80208333 15.47135417 10.52604167 16.89192708 11.25 18.3125 C11.60320312 18.99376953 11.95640625 19.67503906 12.3203125 20.37695312 C14.11217447 23.90858806 15.47677064 27.02191796 16 31 C13.138559 27.61061928 10.96160591 24.29872677 8.984375 20.33203125 C8.45585937 19.27435547 7.92734375 18.21667969 7.3828125 17.12695312 C6.57457031 15.48629883 6.57457031 15.48629883 5.75 13.8125 C5.19570313 12.70712891 4.64140625 11.60175781 4.0703125 10.46289062 C0 2.26712592 0 2.26712592 0 0 Z \",fill:\"#50342B\",transform:\"translate(433,538)\"})),_path1426||(_path1426=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31399023 2.31399023 2.32256804 2.98604724 2.6328125 6.1328125 C2.71660156 6.93847656 2.80039062 7.74414062 2.88671875 8.57421875 C2.96535156 9.41597656 3.04398437 10.25773437 3.125 11.125 C3.21136719 11.97449219 3.29773438 12.82398438 3.38671875 13.69921875 C3.59902557 15.79869727 3.80053603 17.89926242 4 20 C2.68 20 1.36 20 0 20 C0 13.4 0 6.8 0 0 Z \",fill:\"#310808\",transform:\"translate(342,478)\"})),_path1427||(_path1427=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C2.65 2 4.3 2 6 2 C5.01 3.485 5.01 3.485 4 5 C1.10904373 5.11073021 -1.51035963 5.04804767 -4.375 4.8125 C-5.14328125 4.76802734 -5.9115625 4.72355469 -6.703125 4.67773438 C-10.54179277 4.40876198 -13.68940597 4.15100093 -17 2 C-16.02417969 1.93941406 -15.04835938 1.87882812 -14.04296875 1.81640625 C-12.77066406 1.73261719 -11.49835938 1.64882813 -10.1875 1.5625 C-8.92292969 1.48128906 -7.65835937 1.40007812 -6.35546875 1.31640625 C-3.00818107 1.12815453 -3.00818107 1.12815453 0 0 Z \",fill:\"#723F2D\",transform:\"translate(365,456)\"})),_path1428||(_path1428=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.95998472 0.61632946 8.93671966 2.79835629 13.3125 5.0625 C14.05306641 5.43955078 14.79363281 5.81660156 15.55664062 6.20507812 C17.37387522 7.13128157 19.18732404 8.06490629 21 9 C17.59461804 9.96160467 15.44374437 9.97131252 12 9 C11.01 8.34 10.02 7.68 9 7 C9 6.34 9 5.68 9 5 C8.071875 4.731875 7.14375 4.46375 6.1875 4.1875 C3.23759634 3.08851629 1.94384814 2.37581439 0 0 Z \",fill:\"#5D3E2C\",transform:\"translate(539,445)\"})),_path1429||(_path1429=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.425 0.99 7.425 0.99 15 2 C15 2.99 15 3.98 15 5 C15.66 5.33 16.32 5.66 17 6 C15.41705218 6.05437607 13.83355744 6.09296271 12.25 6.125 C11.36828125 6.14820313 10.4865625 6.17140625 9.578125 6.1953125 C5.59314897 5.89342038 3.28966368 4.19310912 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#C2142F\",transform:\"translate(309,439)\"})),_path1430||(_path1430=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.26328125 0.11085938 2.5265625 0.22171875 3.828125 0.3359375 C4.79234375 0.43132812 5.7565625 0.52671875 6.75 0.625 C6.75 1.615 6.75 2.605 6.75 3.625 C-4.14 4.12 -4.14 4.12 -15.25 4.625 C-9.46144002 0.28358002 -7.29703169 -0.67565108 0 0 Z \",fill:\"#0B0D0E\",transform:\"translate(265.25,400.375)\"})),_path1431||(_path1431=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C3.67 2.31 3.34 4.62 3 7 C7.62 7 12.24 7 17 7 C17 5.35 17 3.7 17 2 C18.65 2 20.3 2 22 2 C21.01 2.33 20.02 2.66 19 3 C19 4.65 19 6.3 19 8 C17.41058594 8.09087891 17.41058594 8.09087891 15.7890625 8.18359375 C14.40102779 8.26800127 13.01300768 8.35264917 11.625 8.4375 C10.92632812 8.47681641 10.22765625 8.51613281 9.5078125 8.55664062 C5.62639508 8.74280134 5.62639508 8.74280134 2 10 C1.01 7.03 0.02 4.06 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#133224\",transform:\"translate(473,381)\"})),_path1432||(_path1432=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.33 2.31 1.66 4.62 2 7 C3.32 6.67 4.64 6.34 6 6 C6 7.32 6 8.64 6 10 C5.34 10 4.68 10 4 10 C3.67 11.98 3.34 13.96 3 16 C1.68 16 0.36 16 -1 16 C-1.02685095 13.52076199 -1.04676547 11.0418116 -1.0625 8.5625 C-1.07506836 7.50192383 -1.07506836 7.50192383 -1.08789062 6.41992188 C-1.09653588 4.61306441 -1.05220011 2.80612397 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#2E3A25\",transform:\"translate(45,344)\"})),_path1433||(_path1433=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C-1.105466 4.97185616 -4.02968261 7.70876501 -10 8 C-10 6.68 -10 5.36 -10 4 C-11.32 4 -12.64 4 -14 4 C-14 3.34 -14 2.68 -14 2 C-9.33333333 2 -4.66666667 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#07090C\",transform:\"translate(96,338)\"})),_path1434||(_path1434=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.268125 0.639375 0.53625 1.27875 0.8125 1.9375 C1.88667752 4.33131686 1.88667752 4.33131686 5 5 C3.68 5 2.36 5 1 5 C0.67 6.32 0.34 7.64 0 9 C3.63 9 7.26 9 11 9 C11 9.33 11 9.66 11 10 C7.04 10 3.08 10 -1 10 C-1 11.32 -1 12.64 -1 14 C-1.66 14 -2.32 14 -3 14 C-3.32374517 8.49633208 -3.53286034 4.56327794 0 0 Z \",fill:\"#10181F\",transform:\"translate(109,330)\"})),_path1435||(_path1435=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.78375 0.04125 1.5675 0.0825 2.375 0.125 C2.478125 0.764375 2.58125 1.40375 2.6875 2.0625 C2.914375 2.743125 3.14125 3.42375 3.375 4.125 C4.365 4.455 5.355 4.785 6.375 5.125 C3.735 5.455 1.095 5.785 -1.625 6.125 C-1.625 7.775 -1.625 9.425 -1.625 11.125 C-1.955 9.805 -2.285 8.485 -2.625 7.125 C-3.285 7.125 -3.945 7.125 -4.625 7.125 C-4.75 4.75 -4.75 4.75 -4.625 2.125 C-2.625 0.125 -2.625 0.125 0 0 Z \",fill:\"#1E4629\",transform:\"translate(508.625,305.875)\"})),_path1436||(_path1436=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4 2 4 2 5 4 C5.13415472 6.6723621 5.04318541 9.32250488 5 12 C3.35 12 1.7 12 0 12 C0 8.04 0 4.08 0 0 Z \",fill:\"#21492B\",transform:\"translate(482,303)\"})),_path1437||(_path1437=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.97226562 0.02126953 1.97226562 0.02126953 3.984375 0.04296875 C5.94117188 0.05263672 5.94117188 0.05263672 7.9375 0.0625 C11.29720029 0.21112872 14.4378713 0.59061943 17.734375 1.23046875 C17.734375 1.89046875 17.734375 2.55046875 17.734375 3.23046875 C1.98950028 3.414979 1.98950028 3.414979 -5.265625 2.23046875 C-3.265625 0.23046875 -3.265625 0.23046875 0 0 Z \",fill:\"#7F6448\",transform:\"translate(608.265625,303.76953125)\"})),_path1438||(_path1438=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 2.97 0 5.94 0 9 C0.99 9 1.98 9 3 9 C3 8.01 3 7.02 3 6 C4.65 6 6.3 6 8 6 C8 6.99 8 7.98 8 9 C9.32 9.33 10.64 9.66 12 10 C9.87506859 10.02693575 7.75004088 10.04636628 5.625 10.0625 C4.44164062 10.07410156 3.25828125 10.08570313 2.0390625 10.09765625 C-1 10 -1 10 -3 9 C-3 6.36 -3 3.72 -3 1 C-1 0 -1 0 0 0 Z \",fill:\"#C08860\",transform:\"translate(221,259)\"})),_path1439||(_path1439=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3.33 4.62 3.66 9.24 4 14 C5.32 14.33 6.64 14.66 8 15 C7.34 15 6.68 15 6 15 C6 15.66 6 16.32 6 17 C5.34 17 4.68 17 4 17 C4 16.34 4 15.68 4 15 C3.34 15 2.68 15 2 15 C2 14.34 2 13.68 2 13 C1.34 13 0.68 13 0 13 C0 8.71 0 4.42 0 0 Z \",fill:\"#4F2F27\",transform:\"translate(0,251)\"})),_path1440||(_path1440=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C0.99 2.33 1.98 2.66 3 3 C3.3125 5.8125 3.3125 5.8125 3 9 C0.5 10.875 0.5 10.875 -2 12 C-2.84454356 8.62182575 -3.10844919 6.32534757 -2 3 C-2.99 2.67 -3.98 2.34 -5 2 C-2 0 -2 0 0 0 Z \",fill:\"#A2604D\",transform:\"translate(121,244)\"})),_path1441||(_path1441=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C2.64 1.67 5.28 1.34 8 1 C7.42415568 3.38564077 6.77772405 5.66682784 6 8 C5.01 8 4.02 8 3 8 C2.67 7.34 2.34 6.68 2 6 C0.38004108 4.95499149 0.38004108 4.95499149 -1.5 4 C-4.88888889 2.22222222 -4.88888889 2.22222222 -6 0 C-3.50907189 -1.24546405 -2.58919267 -0.7767578 0 0 Z \",fill:\"#AF6A55\",transform:\"translate(68,239)\"})),_path1442||(_path1442=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C1.98 2 3.96 2 6 2 C6 2.66 6 3.32 6 4 C-3.41002278 7.44419134 -3.41002278 7.44419134 -8 7 C-7.01 6.34 -6.02 5.68 -5 5 C-5.99 3.68 -6.98 2.36 -8 1 C-5.29120665 -0.35439668 -2.99066732 -0.06501451 0 0 Z \",fill:\"#454C42\",transform:\"translate(452,228)\"})),_path1443||(_path1443=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.66 2 1.32 2 2 C2.66 2 3.32 2 4 2 C4.33 4.31 4.66 6.62 5 9 C2.03 8.01 -0.94 7.02 -4 6 C-4 5.34 -4 4.68 -4 4 C-5.32 4 -6.64 4 -8 4 C-7.67 3.01 -7.34 2.02 -7 1 C-4.36 1.99 -1.72 2.98 1 4 C0.67 2.68 0.34 1.36 0 0 Z \",fill:\"#8E7052\",transform:\"translate(146,130)\"})),_path1444||(_path1444=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1.54228144 4.40064304 -5.01426977 6.59595898 -8.625 9.25 C-9.54152344 9.93835938 -9.54152344 9.93835938 -10.4765625 10.640625 C-11.9790792 11.76751252 -13.48884409 12.88472437 -15 14 C-15 11 -15 11 -14 8 C-12.02 7.67 -10.04 7.34 -8 7 C-6.97786505 4.17784291 -6.97786505 4.17784291 -6.625 1.875 C-6.41875 1.25625 -6.2125 0.6375 -6 0 C-3 -1 -3 -1 0 0 Z \",fill:\"#819F86\",transform:\"translate(448,130)\"})),_path1445||(_path1445=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C0.54625 2.556875 0.0925 3.11375 -0.375 3.6875 C-2.10147793 5.9428546 -2.10147793 5.9428546 -3 8.625 C-4 11 -4 11 -7 13 C-7.99 13 -8.98 13 -10 13 C-9.40527314 9.70724395 -8.33371431 7.86941865 -6.125 5.375 C-5.61195312 4.78460937 -5.09890625 4.19421875 -4.5703125 3.5859375 C-3 2 -3 2 0 0 Z \",fill:\"#865D44\",transform:\"translate(81,583)\"})),_path1446||(_path1446=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.82937812 3.42142861 5.28804299 6.9143954 7.625 10.6875 C10.024646 14.5720649 10.024646 14.5720649 13 18 C12.67 18.99 12.34 19.98 12 21 C10.5 19.625 10.5 19.625 9 18 C9 17.34 9 16.68 9 16 C8.34 16 7.68 16 7 16 C5.5625 14.171875 5.5625 14.171875 4 11.75 C3.484375 10.96109375 2.96875 10.1721875 2.4375 9.359375 C-0.18434604 5.0561277 -0.18434604 5.0561277 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#9A6D4F\",transform:\"translate(455,535)\"})),_path1447||(_path1447=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.95825873 -0.02694851 3.91662226 -0.04637218 5.875 -0.0625 C6.96554687 -0.07410156 8.05609375 -0.08570313 9.1796875 -0.09765625 C12 0 12 0 14 1 C14 1.99 14 2.98 14 4 C9.38 4 4.76 4 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#FBC8A5\",transform:\"translate(480,498)\"})),_path1448||(_path1448=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.556875 0.474375 1.11375 0.94875 1.6875 1.4375 C4.18346074 3.12395996 6.0446237 3.58953107 9 4 C9 7 9 7 7 10 C7.66 10.33 8.32 10.66 9 11 C5.37031224 11 4.60929251 10.44621173 2 8 C0.1875 4.9375 0.1875 4.9375 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#6A402E\",transform:\"translate(489,490)\"})),_path1449||(_path1449=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-2.22508853 1.49793542 -4.45421568 2.98892348 -6.69140625 4.46875 C-8.34698041 5.56686349 -9.9901917 6.6837038 -11.625 7.8125 C-14.70310958 9.35155479 -17.59759312 9.6664307 -21 10 C-20 7 -20 7 -18.26586914 5.90917969 C-17.52973389 5.58336914 -16.79359863 5.25755859 -16.03515625 4.921875 C-14.83536133 4.38820313 -14.83536133 4.38820313 -13.61132812 3.84375 C-12.77021484 3.4828125 -11.92910156 3.121875 -11.0625 2.75 C-10.22525391 2.37359375 -9.38800781 1.9971875 -8.52539062 1.609375 C-2.26285661 -1.1314283 -2.26285661 -1.1314283 0 0 Z \",fill:\"#1A1F1B\",transform:\"translate(65,468)\"})),_path1450||(_path1450=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 1.98 0 3.96 0 6 C-0.33 5.01 -0.66 4.02 -1 3 C-8.92 2.67 -16.84 2.34 -25 2 C-25 1.67 -25 1.34 -25 1 C-16.64736824 0.04541351 -8.40215965 -0.11039334 0 0 Z \",fill:\"#C56955\",transform:\"translate(414,463)\"})),_path1451||(_path1451=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-7.07801815 4.23342457 -13.99755993 7.05783477 -22 9 C-22 8.34 -22 7.68 -22 7 C-20.12762629 6.03654556 -18.2519701 5.07946898 -16.375 4.125 C-15.33085937 3.59132813 -14.28671875 3.05765625 -13.2109375 2.5078125 C-4.32668712 -1.66411043 -4.32668712 -1.66411043 0 0 Z \",fill:\"#583F32\",transform:\"translate(22,448)\"})),_path1452||(_path1452=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 8.58 1 17.16 1 26 C0.01 26 -0.98 26 -2 26 C-3.20029908 23.59940183 -3.11459743 22.10639351 -3.09765625 19.4296875 C-3.09443359 18.53378906 -3.09121094 17.63789063 -3.08789062 16.71484375 C-3.07951172 15.77769531 -3.07113281 14.84054687 -3.0625 13.875 C-3.05798828 12.93011719 -3.05347656 11.98523438 -3.04882812 11.01171875 C-3.03702357 8.67441613 -3.02055759 6.33723939 -3 4 C-2.67 4 -2.34 4 -2 4 C-2 10.27 -2 16.54 -2 23 C-1.34 23 -0.68 23 0 23 C0 15.41 0 7.82 0 0 Z \",fill:\"#230301\",transform:\"translate(429,422)\"})),_path1453||(_path1453=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.29 0 8.58 0 13 0 C13 1.32 13 2.64 13 4 C8.71 4 4.42 4 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#F5C614\",transform:\"translate(311,436)\"})),_path1454||(_path1454=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.66 2 1.32 2 2 C2.763125 1.938125 3.52625 1.87625 4.3125 1.8125 C7 2 7 2 8.8125 3.25 C10 5 10 5 10 9 C10.928125 8.938125 11.85625 8.87625 12.8125 8.8125 C16 9 16 9 19 12 C15.7 11.34 12.4 10.68 9 10 C9 9.34 9 8.68 9 8 C8.071875 7.7525 7.14375 7.505 6.1875 7.25 C2.82214391 5.93025251 1.74084779 5.09484051 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#354730\",transform:\"translate(435,390)\"})),_path1455||(_path1455=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.70189453 0.00451172 1.40378906 0.00902344 2.12695312 0.01367188 C3.85550538 0.02543073 5.58401365 0.04336546 7.3125 0.0625 C7.3125 1.0525 7.3125 2.0425 7.3125 3.0625 C5.90097656 3.04509766 5.90097656 3.04509766 4.4609375 3.02734375 C2.59308594 3.01380859 2.59308594 3.01380859 0.6875 3 C-0.54226562 2.98839844 -1.77203125 2.97679687 -3.0390625 2.96484375 C-6.36473791 3.05386076 -9.42797588 3.42563913 -12.6875 4.0625 C-12.6875 4.7225 -12.6875 5.3825 -12.6875 6.0625 C-15.1875 7.6875 -15.1875 7.6875 -17.6875 9.0625 C-16.19271886 5.25760255 -13.99307786 3.40059165 -10.6875 1.0625 C-7.06882441 -0.1437252 -3.76243749 -0.04566918 0 0 Z \",fill:\"#CC8574\",transform:\"translate(138.6875,379.9375)\"})),_path1456||(_path1456=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C3.80980673 2.69227032 3.80980673 2.69227032 7.0625 3.125 C8.16722656 3.29257812 9.27195313 3.46015625 10.41015625 3.6328125 C11.26480469 3.75398438 12.11945313 3.87515625 13 4 C13 4.33 13 4.66 13 5 C6.07 5 -0.86 5 -8 5 C-7 2 -7 2 -5.125 0.8125 C-3 0 -3 0 0 0 Z \",fill:\"#855B39\",transform:\"translate(134,349)\"})),_path1457||(_path1457=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 1.32 0.66 2.64 1 4 C2.32 3.67 3.64 3.34 5 3 C4.34 4.65 3.68 6.3 3 8 C2.37351562 8.03738281 1.74703125 8.07476562 1.1015625 8.11328125 C0.28429687 8.17902344 -0.53296875 8.24476563 -1.375 8.3125 C-2.59316406 8.39951172 -2.59316406 8.39951172 -3.8359375 8.48828125 C-6.37921338 8.82990528 -6.37921338 8.82990528 -8 12 C-8.66 10.02 -9.32 8.04 -10 6 C-6.42355152 4.7619986 -3.66305234 5.25073929 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#2B272E\",transform:\"translate(323,344)\"})),_path1458||(_path1458=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.625 -0.25 6.625 -0.25 10 2 C8.6875 4 8.6875 4 7 6 C6.01 6 5.02 6 4 6 C3.67 6.66 3.34 7.32 3 8 C2.01 8 1.02 8 0 8 C0 5.36 0 2.72 0 0 Z \",fill:\"#494F4B\",transform:\"translate(320,342)\"})),_path1459||(_path1459=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.43927579 1.2419607 6.25207819 2.55740284 9 5 C9 5.66 9 6.32 9 7 C8.01 7.495 8.01 7.495 7 8 C8.32 8.99 9.64 9.98 11 11 C9.35 11.33 7.7 11.66 6 12 C4.99157547 10.56839732 3.99352109 9.12948547 3 7.6875 C2.1646875 6.48673828 2.1646875 6.48673828 1.3125 5.26171875 C0 3 0 3 0 0 Z \",fill:\"#151410\",transform:\"translate(518,336)\"})),_path1460||(_path1460=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C2.32 2 3.64 2 5 2 C5 5.63 5 9.26 5 13 C3.68 13 2.36 13 1 13 C-0.10228696 8.59085217 -0.07654536 4.51617599 0 0 Z \",fill:\"#504A3F\",transform:\"translate(263,330)\"})),_path1461||(_path1461=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C5 0.66 5 1.32 5 2 C6.98 2 8.96 2 11 2 C11 2.66 11 3.32 11 4 C14.3 4 17.6 4 21 4 C21 4.33 21 4.66 21 5 C14.4 5 7.8 5 1 5 C0.67 3.35 0.34 1.7 0 0 Z \",fill:\"#2C1C13\",transform:\"translate(326,318)\"})),_path1462||(_path1462=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.66 2 1.32 2 2 C5.63 2 9.26 2 13 2 C13 2.66 13 3.32 13 4 C11.77023438 3.93039062 11.77023438 3.93039062 10.515625 3.859375 C9.43796875 3.82328125 8.3603125 3.7871875 7.25 3.75 C6.18265625 3.70359375 5.1153125 3.6571875 4.015625 3.609375 C0.28856041 4.09215539 -0.45466933 5.37256188 -3 8 C-5.578125 8.390625 -5.578125 8.390625 -8.25 8.25 C-9.14203125 8.21390625 -10.0340625 8.1778125 -10.953125 8.140625 C-11.96632812 8.07101562 -11.96632812 8.07101562 -13 8 C-10.37638175 6.60150745 -8.32299116 5.83658407 -5.375 5.125 C-1.92657399 4.35589545 -1.92657399 4.35589545 -0.5625 1.875 C-0.376875 1.25625 -0.19125 0.6375 0 0 Z \",fill:\"#C56E5F\",transform:\"translate(173,317)\"})),_path1463||(_path1463=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.63001953 0.01353516 1.63001953 0.01353516 3.29296875 0.02734375 C4.12441406 0.03894531 4.95585937 0.05054688 5.8125 0.0625 C5.8125 0.3925 5.8125 0.7225 5.8125 1.0625 C2.5125 1.0625 -0.7875 1.0625 -4.1875 1.0625 C-4.1875 2.3825 -4.1875 3.7025 -4.1875 5.0625 C-3.5275 5.3925 -2.8675 5.7225 -2.1875 6.0625 C-3.8375 6.3925 -5.4875 6.7225 -7.1875 7.0625 C-7.1875 6.4025 -7.1875 5.7425 -7.1875 5.0625 C-11.6425 5.5575 -11.6425 5.5575 -16.1875 6.0625 C-15.8575 5.4025 -15.5275 4.7425 -15.1875 4.0625 C-13.52083333 3.72916667 -11.85416667 3.39583333 -10.1875 3.0625 C-9.8575 2.4025 -9.5275 1.7425 -9.1875 1.0625 C-5.90230525 -0.03256492 -3.45086585 -0.03710608 0 0 Z \",fill:\"#36150F\",transform:\"translate(173.1875,304.9375)\"})),_path1464||(_path1464=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.29 0 8.58 0 13 0 C13 0.66 13 1.32 13 2 C13.66 2.33 14.32 2.66 15 3 C11.68929162 4.00109515 8.69915231 4.10356134 5.25 4.0625 C4.26515625 4.05347656 3.2803125 4.04445313 2.265625 4.03515625 C1.51796875 4.02355469 0.7703125 4.01195312 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#6C4D34\",transform:\"translate(0,302)\"})),_path1465||(_path1465=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 2.31 1 4.62 1 7 C-3.12664277 6.55572929 -7.25089744 6.09221859 -11.375 5.625 C-12.550625 5.49867188 -13.72625 5.37234375 -14.9375 5.2421875 C-16.05898438 5.11328125 -17.18046875 4.984375 -18.3359375 4.8515625 C-19.37282715 4.73635254 -20.4097168 4.62114258 -21.47802734 4.50244141 C-24 4 -24 4 -26 2 C-19.97258105 1.83410774 -14.42505207 2.42885867 -8.5 3.5 C-7.67757813 3.64308594 -6.85515625 3.78617187 -6.0078125 3.93359375 C-4.00415373 4.28306912 -2.00191702 4.64068156 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#9E6748\",transform:\"translate(420,288)\"})),_path1466||(_path1466=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.68807156 0.11073668 7.37520029 0.24115972 11.0625 0.375 C12.62000977 0.42140625 12.62000977 0.42140625 14.20898438 0.46875 C19.80636091 0.68198339 24.7018472 1.15128285 30 3 C30 3.33 30 3.66 30 4 C23.42927736 4.25057841 17.01935104 3.90513124 10.5 3.125 C9.45875977 3.00729248 9.45875977 3.00729248 8.39648438 2.88720703 C4.90718332 2.44119971 2.98124426 1.98749617 0 0 Z \",fill:\"#132B2C\",transform:\"translate(487,286)\"})),_path1467||(_path1467=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0.66 3.96 1.32 6 2 C6.66666667 5.33333333 7.33333333 8.66666667 8 12 C7.01 11.67 6.02 11.34 5 11 C5 10.01 5 9.02 5 8 C3.68 8.33 2.36 8.66 1 9 C-0.61949011 6.42786866 -1.04408751 5.32330841 -0.625 2.25 C-0.41875 1.5075 -0.2125 0.765 0 0 Z \",fill:\"#A05D48\",transform:\"translate(9,242)\"})),_path1468||(_path1468=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.33 0.33 -0.66 0.66 -1 1 C-0.34 1.33 0.32 1.66 1 2 C-2 4 -2 4 -5.125 4.3125 C-10.09964763 5.19509877 -13.7364651 7.38000463 -18 10 C-18 9.01 -18 8.02 -18 7 C-15.98828125 5.46484375 -15.98828125 5.46484375 -13.3125 3.9375 C-12.44238281 3.43089844 -11.57226562 2.92429688 -10.67578125 2.40234375 C-3.72360953 -1.24120318 -3.72360953 -1.24120318 0 0 Z \",fill:\"#5E4338\",transform:\"translate(414,199)\"})),_path1469||(_path1469=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.33 5.61 1.66 11.22 2 17 C3.98 17.66 5.96 18.32 8 19 C8.875 21.125 8.875 21.125 9 23 C8.01 23.66 7.02 24.32 6 25 C5 24 5 24 4.9375 21.4375 C4.958125 20.633125 4.97875 19.82875 5 19 C4.01 19 3.02 19 2 19 C2 19.99 2 20.98 2 22 C1.34 22 0.68 22 0 22 C-1.05476879 17.04649325 -0.95554228 12.62160651 -0.5625 7.625 C-0.51029297 6.88894531 -0.45808594 6.15289062 -0.40429688 5.39453125 C-0.27582277 3.59589371 -0.13879051 1.79787091 0 0 Z \",fill:\"#30231C\",transform:\"translate(40,128)\"})),_path1470||(_path1470=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C2.85466965 10.44907631 3.23049133 20.42300905 3 31 C2.67 31 2.34 31 2 31 C0.32098543 20.56612375 -0.24965165 10.554717 0 0 Z \",fill:\"#6D4D3F\",transform:\"translate(327,556)\"})),_path1471||(_path1471=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1 4 1 4 1 4 Z M-4 2 C-2.68 2.66 -1.36 3.32 0 4 C-0.33 6.31 -0.66 8.62 -1 11 C-1.66 9.68 -2.32 8.36 -3 7 C-6.80824293 11.99011142 -8.42334814 16.95616788 -10 23 C-11.44650238 18.66049287 -10.4717091 15.26654129 -9 11 C-7.49296815 8.49926902 -5.79481659 6.31436876 -4 4 C-4 3.34 -4 2.68 -4 2 Z \",fill:\"#36231F\",transform:\"translate(213,534)\"})),_path1472||(_path1472=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.9719385 1.12451727 5.33440687 2.22293791 8 4 C8 4.66 8 5.32 8 6 C8.53625 6.226875 9.0725 6.45375 9.625 6.6875 C12.78500863 8.43382056 15.2676983 10.6402849 18 13 C17.67 13.66 17.34 14.32 17 15 C13.56247993 13.4722133 10.81046312 11.49818944 8 9 C8 8.34 8 7.68 8 7 C7.01 7 6.02 7 5 7 C2.3125 4.625 2.3125 4.625 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#7B4E37\",transform:\"translate(544,500)\"})),_path1473||(_path1473=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.26 0 14.52 0 22 0 C22.33 1.65 22.66 3.3 23 5 C22 6 22 6 19.4375 6.0625 C18.2309375 6.0315625 18.2309375 6.0315625 17 6 C17 4.35 17 2.7 17 1 C11.39 1 5.78 1 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#DE8876\",transform:\"translate(411,473)\"})),_path1474||(_path1474=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.62314474 -0.23576736 14.58569409 0.16282685 22 2 C22 2.33 22 2.66 22 3 C17.5621439 4.11165232 13.23043614 4.11527763 8.6875 4.0625 C7.94693359 4.05798828 7.20636719 4.05347656 6.44335938 4.04882812 C4.62887101 4.03712175 2.81442466 4.01918898 1 4 C1.33 3.34 1.66 2.68 2 2 C3.32 2 4.64 2 6 2 C3.03 1.505 3.03 1.505 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#70201F\",transform:\"translate(166,463)\"})),_path1475||(_path1475=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.62 0 9.24 0 14 0 C11 2 11 2 8 2 C8 3.32 8 4.64 8 6 C6.02 6.33 4.04 6.66 2 7 C1.34 4.69 0.68 2.38 0 0 Z \",fill:\"#FCD9B5\",transform:\"translate(388,454)\"})),_path1476||(_path1476=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-0.99 2.33 -1.98 2.66 -3 3 C4.425 3.99 4.425 3.99 12 5 C12 5.33 12 5.66 12 6 C1.11 6.495 1.11 6.495 -10 7 C-9.67 6.34 -9.34 5.68 -9 5 C-8.34 5 -7.68 5 -7 5 C-6.896875 4.360625 -6.79375 3.72125 -6.6875 3.0625 C-6.460625 2.381875 -6.23375 1.70125 -6 1 C-3 0 -3 0 0 0 Z \",fill:\"#E88055\",transform:\"translate(124,394)\"})),_path1477||(_path1477=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0 5.28 0 8 0 C7.34 0.66 6.68 1.32 6 2 C10.62440425 4.07626313 15.1008651 5.70022952 20 7 C18.41015625 8.140625 18.41015625 8.140625 16 9 C12.87109375 8.171875 12.87109375 8.171875 9.4375 6.75 C8.30183594 6.29109375 7.16617187 5.8321875 5.99609375 5.359375 C3 4 3 4 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#16130E\",transform:\"translate(366,397)\"})),_path1478||(_path1478=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0 3.96 0 6 0 C6 0.66 6 1.32 6 2 C5.01 2.66 4.02 3.32 3 4 C2.67 5.32 2.34 6.64 2 8 C-0.97 8 -3.94 8 -7 8 C-6.01 6.35 -5.02 4.7 -4 3 C-2.68 3.33 -1.36 3.66 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#32020D\",transform:\"translate(400,384)\"})),_path1479||(_path1479=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 5.28 2 10.56 2 16 C0.68 16 -0.64 16 -2 16 C-1.85936865 13.70800823 -1.71234057 11.41640814 -1.5625 9.125 C-1.48128906 7.84882813 -1.40007812 6.57265625 -1.31640625 5.2578125 C-1 2 -1 2 0 0 Z \",fill:\"#030904\",transform:\"translate(2,386)\"})),_path1480||(_path1480=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.63 0 7.26 0 11 0 C10.125 8.75 10.125 8.75 9 11 C8.34 11 7.68 11 7 11 C7.33 7.7 7.66 4.4 8 1 C6.02 1 4.04 1 2 1 C2 4.63 2 8.26 2 12 C1.34 12 0.68 12 0 12 C0 8.04 0 4.08 0 0 Z \",fill:\"#84442E\",transform:\"translate(309,371)\"})),_path1481||(_path1481=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.495 0.99 0.495 2 1 C4.55157655 1.0716735 7.07472971 1.09308442 9.625 1.0625 C10.33140625 1.05798828 11.0378125 1.05347656 11.765625 1.04882812 C13.51045275 1.03703875 15.255237 1.01910324 17 1 C17 2.32 17 3.64 17 5 C13.21286807 6.26237731 10.74348067 5.67558873 6.8125 5.0625 C5.54019531 4.86785156 4.26789063 4.67320312 2.95703125 4.47265625 C1.98121094 4.31667969 1.00539063 4.16070312 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#E74F62\",transform:\"translate(272,334)\"})),_path1482||(_path1482=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.81210937 0.29003906 1.62421875 0.58007812 2.4609375 0.87890625 C3.27820313 1.16636719 4.09546875 1.45382812 4.9375 1.75 C5.56398438 1.97816406 6.19046875 2.20632813 6.8359375 2.44140625 C6.8359375 3.10140625 6.8359375 3.76140625 6.8359375 4.44140625 C9.8059375 4.93640625 9.8059375 4.93640625 12.8359375 5.44140625 C13.1659375 4.78140625 13.4959375 4.12140625 13.8359375 3.44140625 C14.1659375 4.76140625 14.4959375 6.08140625 14.8359375 7.44140625 C12.1959375 7.44140625 9.5559375 7.44140625 6.8359375 7.44140625 C6.5059375 6.45140625 6.1759375 5.46140625 5.8359375 4.44140625 C4.9284375 4.33828125 4.0209375 4.23515625 3.0859375 4.12890625 C-0.18367825 3.43725676 -1.70123987 2.62005704 -4.1640625 0.44140625 C-2.1640625 -0.55859375 -2.1640625 -0.55859375 0 0 Z \",fill:\"#228A5C\",transform:\"translate(420.1640625,320.55859375)\"})),_path1483||(_path1483=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.2077558 3.62326739 0.54311128 4.64146369 -1 8 C-1.66 8 -2.32 8 -3 8 C-2.67 8.99 -2.34 9.98 -2 11 C-7.17578125 14.22265625 -7.17578125 14.22265625 -9 15 C-9.99 14.67 -10.98 14.34 -12 14 C-12 13.34 -12 12.68 -12 12 C-10.948125 11.505 -9.89625 11.01 -8.8125 10.5 C-4.36358512 8.00426726 -2.32812846 4.42022546 0 0 Z \",fill:\"#274934\",transform:\"translate(442,301)\"})),_path1484||(_path1484=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.76441406 -0.01417969 1.52882813 -0.02835937 2.31640625 -0.04296875 C4.4375 0.1875 4.4375 0.1875 7.4375 2.1875 C9.76137947 2.58137788 12.09543749 2.92236085 14.4375 3.1875 C14.4375 3.5175 14.4375 3.8475 14.4375 4.1875 C11.56243579 4.21462325 8.68763092 4.23439851 5.8125 4.25 C4.60013672 4.26256836 4.60013672 4.26256836 3.36328125 4.27539062 C-1.06591918 4.2933955 -5.20133424 4.08372662 -9.5625 3.1875 C-8.5625 1.1875 -8.5625 1.1875 -6.78515625 0.57421875 C-4.48669462 0.17431066 -2.33238621 0.01973254 0 0 Z \",fill:\"#A66F50\",transform:\"translate(534.5625,299.8125)\"})),_path1485||(_path1485=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.66 0.66 -1.32 1.32 -2 2 C-0.4221875 1.9690625 -0.4221875 1.9690625 1.1875 1.9375 C4.32704904 1.98896802 6.96883396 2.26517187 10 3 C6.13209648 5.57860235 3.23386085 5.01114505 -1.1875 4.625 C-1.93708984 4.56828125 -2.68667969 4.5115625 -3.45898438 4.453125 C-5.30676559 4.31189331 -7.153512 4.15723833 -9 4 C-9 3.34 -9 2.68 -9 2 C-11.31 2 -13.62 2 -16 2 C-16 1.67 -16 1.34 -16 1 C-10.65097076 0.40801257 -5.39115154 -0.14187241 0 0 Z \",fill:\"#C99575\",transform:\"translate(242,282)\"})),_path1486||(_path1486=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0 5.94 0 9 0 C8.01 0.495 8.01 0.495 7 1 C7.33 1.99 7.66 2.98 8 4 C9.32 4.66 10.64 5.32 12 6 C6.06 6.495 6.06 6.495 0 7 C0 4.69 0 2.38 0 0 Z \",fill:\"#857460\",transform:\"translate(268,269)\"})),_path1487||(_path1487=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3 0.66 3 1.32 3 2 C4.65 2 6.3 2 8 2 C8.33 2.66 8.66 3.32 9 4 C9.66 4 10.32 4 11 4 C11.33 5.32 11.66 6.64 12 8 C10.1128125 7.7525 10.1128125 7.7525 8.1875 7.5 C5.73543415 7.17841759 3.48349306 7 1 7 C0.67 4.69 0.34 2.38 0 0 Z \",fill:\"#A46955\",transform:\"translate(140,260)\"})),_path1488||(_path1488=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C8.60764545 -0.46112386 16.61479306 1.27151563 25 3 C25 3.66 25 4.32 25 5 C16.21156902 5.62774507 8.39685444 3.30784711 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#654F3E\",transform:\"translate(232,249)\"})),_path1489||(_path1489=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-1.65385233 3.34919532 -3.321702 4.68133728 -5 6 C-5.99 7.485 -5.99 7.485 -7 9 C-11 9 -11 9 -14 8 C-12.81344743 5.07317034 -11.77014822 3.36109514 -8.8671875 2 C-2.88641827 0 -2.88641827 0 0 0 Z \",fill:\"#2C0E10\",transform:\"translate(547,213)\"})),_path1490||(_path1490=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1 1 2 2 3 3 C3.8353125 3.7734375 3.8353125 3.7734375 4.6875 4.5625 C6 6 6 6 6 8 C7.65 7.34 9.3 6.68 11 6 C14 9.75 14 9.75 14 12 C11.23723823 11.47731534 8.6739124 10.89130413 6 10 C5.67 10.66 5.34 11.32 5 12 C4.61908203 11.16855469 4.61908203 11.16855469 4.23046875 10.3203125 C3.88628906 9.59585938 3.54210937 8.87140625 3.1875 8.125 C2.85105469 7.40570313 2.51460938 6.68640625 2.16796875 5.9453125 C1.00532903 3.69457194 1.00532903 3.69457194 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#4B2E21\",transform:\"translate(62,154)\"})),_path1491||(_path1491=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C-2.09545572 4.70385928 -5.20259834 6.38517398 -8.3125 8.0625 C-9.19357422 8.54783203 -10.07464844 9.03316406 -10.98242188 9.53320312 C-11.82998047 9.98759766 -12.67753906 10.44199219 -13.55078125 10.91015625 C-14.33106689 11.33433838 -15.11135254 11.75852051 -15.9152832 12.19555664 C-18 13 -18 13 -21 12 C-17.8409726 9.76556599 -14.90940281 7.87626112 -11.3125 6.4375 C-8.28497128 5.12366678 -7.17642359 4.27535194 -5 2 C-2.3125 0.8125 -2.3125 0.8125 0 0 Z \",fill:\"#5D4E46\",transform:\"translate(545,138)\"})),_path1492||(_path1492=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.258125 0.12375 2.51625 0.2475 3.8125 0.375 C4.87404297 0.47941406 4.87404297 0.47941406 5.95703125 0.5859375 C8 1 8 1 11 3 C11 4.32 11 5.64 11 7 C11.99 7.33 12.98 7.66 14 8 C13.01 8.495 13.01 8.495 12 9 C12 9.66 12 10.32 12 11 C11.34 11 10.68 11 10 11 C10 10.34 10 9.68 10 9 C9.34 9 8.68 9 8 9 C7.690625 7.824375 7.690625 7.824375 7.375 6.625 C6.19323388 3.69083714 6.19323388 3.69083714 2.875 2.6875 C1.92625 2.460625 0.9775 2.23375 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#281A17\",transform:\"translate(41,143)\"})),_path1493||(_path1493=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C4.71486934 3.97610786 4.22440753 8.13901977 4.125 12.75 C4.11597656 13.54277344 4.10695312 14.33554688 4.09765625 15.15234375 C4.07417012 17.10169281 4.03830137 19.05088575 4 21 C3.34 20.67 2.68 20.34 2 20 C1.58935547 18.05053711 1.58935547 18.05053711 1.3671875 15.52734375 C1.28339844 14.62822266 1.19960937 13.72910156 1.11328125 12.80273438 C1.03464844 11.85720703 0.95601562 10.91167969 0.875 9.9375 C0.78863281 8.98810547 0.70226562 8.03871094 0.61328125 7.06054688 C0.40045632 4.70764908 0.19642969 2.35431405 0 0 Z \",fill:\"#CEA787\",transform:\"translate(145,72)\"})),_path1494||(_path1494=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.33944736 0.28730055 4.6739143 0.61936779 7 1 C6.67 1.66 6.34 2.32 6 3 C6.66 3.33 7.32 3.66 8 4 C8 4.66 8 5.32 8 6 C4.71023192 7.09658936 3.28696233 6.79953138 0 6 C0.33 7.65 0.66 9.3 1 11 C0.34 11 -0.32 11 -1 11 C-1.02688151 9.35425434 -1.04634123 7.70838587 -1.0625 6.0625 C-1.07410156 5.14597656 -1.08570313 4.22945312 -1.09765625 3.28515625 C-1 1 -1 1 0 0 Z \",fill:\"#9A7E57\",transform:\"translate(447,59)\"})),_path1495||(_path1495=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.59687434 3.34249629 -1.73603877 5.46436342 -4 8 C-4.66 8 -5.32 8 -6 8 C-7.79341527 9.32854809 -7.79341527 9.32854809 -9.625 11 C-10.57246094 11.8353125 -10.57246094 11.8353125 -11.5390625 12.6875 C-12.02117187 13.120625 -12.50328125 13.55375 -13 14 C-13 11 -13 11 -12 9 C-11.34 9 -10.68 9 -10 9 C-9.67 8.01 -9.34 7.02 -9 6 C-7.44140625 4.39453125 -7.44140625 4.39453125 -5.5625 2.8125 C-4.94503906 2.28269531 -4.32757813 1.75289062 -3.69140625 1.20703125 C-2 0 -2 0 0 0 Z \",fill:\"#714B39\",transform:\"translate(89,594)\"})),_path1496||(_path1496=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.60903059 3.09305422 -1.59868803 5.19639762 -3.4375 7.75 C-3.86933594 8.36359375 -4.30117187 8.9771875 -4.74609375 9.609375 C-5.15988281 10.06828125 -5.57367188 10.5271875 -6 11 C-6.66 11 -7.32 11 -8 11 C-8.66 12.32 -9.32 13.64 -10 15 C-10.99 15 -11.98 15 -13 15 C-5.1875 0 -5.1875 0 0 0 Z \",fill:\"#8E6047\",transform:\"translate(97,564)\"})),_path1497||(_path1497=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.47266124 2.26237627 4.063866 4.57453333 5.6875 7.5 C6.34298828 8.66015625 6.34298828 8.66015625 7.01171875 9.84375 C8 12 8 12 8 15 C7.34 15 6.68 15 6 15 C5.731875 14.195625 5.46375 13.39125 5.1875 12.5625 C4.795625 11.716875 4.40375 10.87125 4 10 C3.01 9.67 2.02 9.34 1 9 C-0.39712274 7.04402816 -1.73779907 5.04563599 -3 3 C-2.67 2.34 -2.34 1.68 -2 1 C-1.34 1.33 -0.68 1.66 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#8D5E49\",transform:\"translate(462,556)\"})),_path1498||(_path1498=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.134375 0.020625 2.26875 0.04125 3.4375 0.0625 C3.7675 2.0425 4.0975 4.0225 4.4375 6.0625 C3.7775 6.0625 3.1175 6.0625 2.4375 6.0625 C2.1075 6.7225 1.7775 7.3825 1.4375 8.0625 C0.7775 8.0625 0.1175 8.0625 -0.5625 8.0625 C-0.8925 8.7225 -1.2225 9.3825 -1.5625 10.0625 C-2.5625 7.0625 -3.5625 4.0625 -4.5625 1.0625 C-3.5625 0.0625 -3.5625 0.0625 0 0 Z \",fill:\"#613B2F\",transform:\"translate(404.5625,521.9375)\"})),_path1499||(_path1499=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.43144398 3.93492365 5.75939223 9.20951631 6.12890625 15.03076172 C6.25393769 19.69130859 6.15605983 24.3413252 6 29 C5.67 29 5.34 29 5 29 C4.86722656 27.94039063 4.73445313 26.88078125 4.59765625 25.7890625 C4.41946125 24.40101721 4.2410654 23.01299769 4.0625 21.625 C3.97548828 20.92632812 3.88847656 20.22765625 3.79882812 19.5078125 C3.33681872 15.63216425 3.33681872 15.63216425 2 12 C1.86584528 9.3276379 1.95681459 6.67749512 2 4 C1.34 4 0.68 4 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#AF2C27\",transform:\"translate(340,466)\"})),_path1500||(_path1500=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.8680486 0.21270328 7.42601726 0.77084807 11.2109375 1.5859375 C13.04785156 1.96878906 13.04785156 1.96878906 14.921875 2.359375 C16.36433594 2.78089844 16.36433594 2.78089844 17.8359375 3.2109375 C18.1659375 3.8709375 18.4959375 4.5309375 18.8359375 5.2109375 C13.2259375 4.8809375 7.6159375 4.5509375 1.8359375 4.2109375 C1.8359375 3.8809375 1.8359375 3.5509375 1.8359375 3.2109375 C-0.4740625 2.8809375 -2.7840625 2.5509375 -5.1640625 2.2109375 C-3.1640625 0.2109375 -3.1640625 0.2109375 0 0 Z \",fill:\"#BF303C\",transform:\"translate(190.1640625,481.7890625)\"})),_path1501||(_path1501=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.63 0.33 7.26 0.66 11 1 C11 1.33 11 1.66 11 2 C7.7 2 4.4 2 1 2 C-1.12654277 5.89153477 -1.12654277 5.89153477 -2 10 C1.3 10.33 4.6 10.66 8 11 C8 11.33 8 11.66 8 12 C5.03 12 2.06 12 -1 12 C-1 12.66 -1 13.32 -1 14 C-1.66 14 -2.32 14 -3 14 C-3 13.34 -3 12.68 -3 12 C-3.66 12 -4.32 12 -5 12 C-4.47731534 9.23723823 -3.89130413 6.6739124 -3 4 C-2.34 4 -1.68 4 -1 4 C-0.67 2.68 -0.34 1.36 0 0 Z \",fill:\"#4D1D1C\",transform:\"translate(159,474)\"})),_path1502||(_path1502=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.928125 0.165 1.85625 0.33 2.8125 0.5 C5.95621353 1.07748388 5.95621353 1.07748388 9 1 C11.6875 2.25 11.6875 2.25 14 4 C14 5.32 14 6.64 14 8 C4.82713348 5.84682713 4.82713348 5.84682713 1.375 2.3125 C0.92125 1.549375 0.4675 0.78625 0 0 Z \",fill:\"#7D513C\",transform:\"translate(612,468)\"})),_path1503||(_path1503=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 1.65 2 3.3 2 5 C2.99 4.67 3.98 4.34 5 4 C6.72795352 3.93197033 8.45835365 3.91504355 10.1875 3.9375 C11.08855469 3.94652344 11.98960937 3.95554687 12.91796875 3.96484375 C13.60503906 3.97644531 14.29210937 3.98804688 15 4 C15 4.66 15 5.32 15 6 C14.18015625 6.12117188 13.3603125 6.24234375 12.515625 6.3671875 C11.43796875 6.53476562 10.3603125 6.70234375 9.25 6.875 C8.18265625 7.03742188 7.1153125 7.19984375 6.015625 7.3671875 C2.72986591 7.92340792 2.72986591 7.92340792 -1 10 C-0.67 6.7 -0.34 3.4 0 0 Z \",fill:\"#E6C210\",transform:\"translate(297,427)\"})),_path1504||(_path1504=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C1.66 2 2.32 2 3 2 C3.66 3.32 4.32 4.64 5 6 C2.4345406 8.5654594 0.52313332 8.54046087 -3 9 C-3.66 6.69 -4.32 4.38 -5 2 C-3.35 1.34 -1.7 0.68 0 0 Z \",fill:\"#3C060E\",transform:\"translate(281,348)\"})),_path1505||(_path1505=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 2.64 2 5.28 2 8 C1.01 8.495 1.01 8.495 0 9 C0 8.01 0 7.02 0 6 C-1.32 6 -2.64 6 -4 6 C-5.67225729 5.69595322 -7.34080104 5.36871088 -9 5 C-9.33 4.01 -9.66 3.02 -10 2 C-6.7 2 -3.4 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#130507\",transform:\"translate(284,344)\"})),_path1506||(_path1506=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.29160319 -0.02692484 4.58329546 -0.04636124 6.875 -0.0625 C8.15117188 -0.07410156 9.42734375 -0.08570313 10.7421875 -0.09765625 C14 0 14 0 16 1 C15.67 1.99 15.34 2.98 15 4 C9.72 3.67 4.44 3.34 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#A5825D\",transform:\"translate(110,336)\"})),_path1507||(_path1507=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.99 0 1.98 0 3 C-0.99 3.33 -1.98 3.66 -3 4 C-3.33 4.66 -3.66 5.32 -4 6 C-5.11375 5.690625 -6.2275 5.38125 -7.375 5.0625 C-12.20509012 3.84199336 -17.04290069 3.38600363 -22 3 C-18.03052452 0.28628352 -13.91259037 0.81089201 -9.3125 0.9375 C-6.53735733 0.99906849 -3.77676133 1.02065604 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#804D41\",transform:\"translate(168,317)\"})),_path1508||(_path1508=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.53625 0.2475 1.0725 0.495 1.625 0.75 C1.625 2.07 1.625 3.39 1.625 4.75 C0.305 4.75 -1.015 4.75 -2.375 4.75 C-2.375 6.07 -2.375 7.39 -2.375 8.75 C-4.685 8.42 -6.995 8.09 -9.375 7.75 C-8.385 7.42 -7.395 7.09 -6.375 6.75 C-6.375 6.09 -6.375 5.43 -6.375 4.75 C-7.035 4.42 -7.695 4.09 -8.375 3.75 C-2.95961538 -0.31153846 -2.95961538 -0.31153846 0 0 Z \",fill:\"#053D2A\",transform:\"translate(442.375,313.25)\"})),_path1509||(_path1509=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0.495 2.97 0.495 6 1 C5.67 2.98 5.34 4.96 5 7 C5.66 7 6.32 7 7 7 C6.67 8.32 6.34 9.64 6 11 C2.37 10.01 -1.26 9.02 -5 8 C-5 7.67 -5 7.34 -5 7 C-3.02 6.34 -1.04 5.68 1 5 C0.67 3.35 0.34 1.7 0 0 Z \",fill:\"#98CA9E\",transform:\"translate(499,306)\"})),_path1510||(_path1510=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 3 2 3 2 8 C-1.96 8 -5.92 8 -10 8 C-10 7.67 -10 7.34 -10 7 C-7.03 7 -4.06 7 -1 7 C-1 6.34 -1 5.68 -1 5 C-1.99 5.495 -1.99 5.495 -3 6 C-4.87056791 6.2275015 -6.74685958 6.40962811 -8.625 6.5625 C-9.62789062 6.64628906 -10.63078125 6.73007812 -11.6640625 6.81640625 C-12.43492187 6.87699219 -13.20578125 6.93757813 -14 7 C-14 6.34 -14 5.68 -14 5 C-13.11248047 4.96132813 -13.11248047 4.96132813 -12.20703125 4.921875 C-6.9279987 4.54295586 -3.89363339 3.89363339 0 0 Z \",fill:\"#EDD5B3\",transform:\"translate(184,302)\"})),_path1511||(_path1511=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0 3.96 0 6 0 C4.68 0.33 3.36 0.66 2 1 C2 1.66 2 2.32 2 3 C3.093125 2.95875 4.18625 2.9175 5.3125 2.875 C10.66203382 2.85579162 15.77842235 3.92496931 21 5 C21 5.33 21 5.66 21 6 C17.7 6.33 14.4 6.66 11 7 C11 6.34 11 5.68 11 5 C8.03 5 5.06 5 2 5 C1.67 5.99 1.34 6.98 1 8 C0.67 5.36 0.34 2.72 0 0 Z \",fill:\"#111D18\",transform:\"translate(477,283)\"})),_path1512||(_path1512=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C8.25 0.33 16.5 0.66 25 1 C24.67 1.66 24.34 2.32 24 3 C16.08 3 8.16 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#070A09\",transform:\"translate(284,277)\"})),_path1513||(_path1513=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C3.52733235 2.65555119 3.52733235 2.65555119 6 3 C-0.06106401 6.13503311 -5.28812161 6.90174919 -11.9375 5 C-12.948125 4.67 -13.95875 4.34 -15 4 C-15 3.67 -15 3.34 -15 3 C-11.04 3 -7.08 3 -3 3 C-3 2.34 -3 1.68 -3 1 C-2.01 0.67 -1.02 0.34 0 0 Z \",fill:\"#283727\",transform:\"translate(397,272)\"})),_path1514||(_path1514=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.33 4.62 2.66 9.24 3 14 C3.66 14 4.32 14 5 14 C4.67 14.66 4.34 15.32 4 16 C4.33 16.33 4.66 16.66 5 17 C4.71269945 19.33944736 4.38063221 21.6739143 4 24 C3.01 23.67 2.02 23.34 1 23 C0.67 15.41 0.34 7.82 0 0 Z \",fill:\"#3D3535\",transform:\"translate(562,232)\"})),_path1515||(_path1515=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.08304538 -0.05418326 4.16649768 -0.09287551 6.25 -0.125 C7.99023438 -0.15980469 7.99023438 -0.15980469 9.765625 -0.1953125 C12.82786046 -0.0103949 14.44202751 0.39176977 17 2 C11.2364368 4.64812363 6.09067424 3.8019749 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#8D7B68\",transform:\"translate(213,247)\"})),_path1516||(_path1516=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-2.87343437 1.91562291 -3.77503541 2.29210899 -7.01171875 2.6328125 C-7.76904297 2.71660156 -8.52636719 2.80039063 -9.30664062 2.88671875 C-10.09232422 2.96535156 -10.87800781 3.04398438 -11.6875 3.125 C-12.48478516 3.21136719 -13.28207031 3.29773438 -14.10351562 3.38671875 C-16.06823326 3.59848472 -18.03402796 3.80021473 -20 4 C-20 4.99 -20 5.98 -20 7 C-21.32 6.34 -22.64 5.68 -24 5 C-24 4.34 -24 3.68 -24 3 C-25.32 2.67 -26.64 2.34 -28 2 C-24.64637391 1.6610769 -21.29202668 1.32988036 -17.9375 1 C-16.99455078 0.90460938 -16.05160156 0.80921875 -15.08007812 0.7109375 C-10.02487778 0.21774722 -5.07896392 -0.11270932 0 0 Z \",fill:\"#1B0F11\",transform:\"translate(82,201)\"})),_path1517||(_path1517=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0.495 2.97 0.495 6 1 C6 1.66 6 2.32 6 3 C6.99 3 7.98 3 9 3 C9 3.66 9 4.32 9 5 C10.32 5 11.64 5 13 5 C13 5.66 13 6.32 13 7 C16.3 7.66 19.6 8.32 23 9 C23 9.99 23 10.98 23 12 C15.11740793 9.72874466 7.97448059 6.30715691 1 2 C0.67 1.34 0.34 0.68 0 0 Z \",fill:\"#A57340\",transform:\"translate(119,189)\"})),_path1518||(_path1518=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.66 2 1.32 2 2 C2.66 2 3.32 2 4 2 C4 5.63 4 9.26 4 13 C3.01 13.495 3.01 13.495 2 14 C2 13.34 2 12.68 2 12 C1.34 12 0.68 12 0 12 C-0.76173392 7.6835078 -1.16063604 4.25566547 0 0 Z \",fill:\"#A4B491\",transform:\"translate(370,166)\"})),_path1519||(_path1519=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0.495 1.98 0.495 4 1 C4 1.66 4 2.32 4 3 C4.66 3 5.32 3 6 3 C6 3.66 6 4.32 6 5 C6.66 5 7.32 5 8 5 C8 5.66 8 6.32 8 7 C8.66 7 9.32 7 10 7 C10 7.99 10 8.98 10 10 C10.99 10.33 11.98 10.66 13 11 C12.01 11.33 11.02 11.66 10 12 C7.30078125 10.34765625 7.30078125 10.34765625 4.3125 8.0625 C3.31863281 7.31097656 2.32476562 6.55945313 1.30078125 5.78515625 C0.54152344 5.19605469 -0.21773437 4.60695312 -1 4 C-0.67 2.68 -0.34 1.36 0 0 Z \",fill:\"#BEB083\",transform:\"translate(162,167)\"})),_path1520||(_path1520=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 3.3 2 6.6 2 10 C0.02 10.99 -1.96 11.98 -4 13 C-4.33 11.02 -4.66 9.04 -5 7 C-4.34 7 -3.68 7 -3 7 C-3 5.68 -3 4.36 -3 3 C-2.01 2.67 -1.02 2.34 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#B5AE85\",transform:\"translate(382,162)\"})),_path1521||(_path1521=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 5.61 1 11.22 1 17 C1.66 17.33 2.32 17.66 3 18 C-1.625 22 -1.625 22 -5 22 C-4.34 17.05 -3.68 12.1 -3 7 C-2.67 7 -2.34 7 -2 7 C-1.67 10.96 -1.34 14.92 -1 19 C-0.67 12.73 -0.34 6.46 0 0 Z \",fill:\"#7A927A\",transform:\"translate(466,97)\"})),_path1522||(_path1522=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1 3 1 3 0.36328125 4.796875 C0.01652344 5.44140625 -0.33023438 6.0859375 -0.6875 6.75 C-1.24244141 7.79414062 -1.24244141 7.79414062 -1.80859375 8.859375 C-3.51341825 11.92246952 -5.23356842 14.97183158 -7 18 C-9 15 -9 15 -8.7578125 12.95703125 C-8.171875 10.97135417 -7.5859375 8.98567708 -7 7 C-6.37609375 6.89816406 -5.7521875 6.79632812 -5.109375 6.69140625 C-2.62492543 6.13811453 -2.62492543 6.13811453 -1.25 2.9375 C-0.8375 1.968125 -0.425 0.99875 0 0 Z \",fill:\"#482F28\",transform:\"translate(156,574)\"})),_path1523||(_path1523=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.598125 0.350625 1.19625 0.70125 1.8125 1.0625 C1.8125 1.7225 1.8125 2.3825 1.8125 3.0625 C2.8025 3.3925 3.7925 3.7225 4.8125 4.0625 C4.8125 4.7225 4.8125 5.3825 4.8125 6.0625 C6.1325 6.7225 7.4525 7.3825 8.8125 8.0625 C8.8125 8.7225 8.8125 9.3825 8.8125 10.0625 C9.4725 10.0625 10.1325 10.0625 10.8125 10.0625 C10.8125 10.7225 10.8125 11.3825 10.8125 12.0625 C6.99089486 11.48795344 5.0506668 9.77491806 2.25 7.1875 C1.10337891 6.13949219 1.10337891 6.13949219 -0.06640625 5.0703125 C-1.80269085 3.42675765 -3.51056418 1.76622393 -5.1875 0.0625 C-2.1875 -0.9375 -2.1875 -0.9375 0 0 Z \",fill:\"#7F543E\",transform:\"translate(564.1875,517.9375)\"})),_path1524||(_path1524=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.3 0 6.6 0 10 0 C9.01 0.495 9.01 0.495 8 1 C7.34444881 3.52733235 7.34444881 3.52733235 7 6 C4.69 6 2.38 6 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#3E5451\",transform:\"translate(274,511)\"})),_path1525||(_path1525=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.28 0.33 10.56 0.66 16 1 C16 1.33 16 1.66 16 2 C6.73927697 3.67998124 -1.6499008 4.14934774 -11 3 C-11 2.67 -11 2.34 -11 2 C-7.37 2 -3.74 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#A8383E\",transform:\"translate(202,476)\"})),_path1526||(_path1526=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.66 2 1.32 2 2 C2.58265625 2.11214844 3.1653125 2.22429687 3.765625 2.33984375 C6.20310657 3.06000876 7.7250586 4.04379395 9.75 5.5625 C10.67039062 6.24505859 10.67039062 6.24505859 11.609375 6.94140625 C12.29773438 7.46541016 12.29773438 7.46541016 13 8 C12.67 8.66 12.34 9.32 12 10 C7.29302418 9.57209311 3.224768 7.44780671 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#8D6047\",transform:\"translate(480,453)\"})),_path1527||(_path1527=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-2.2058424 1.13011652 -4.41445027 2.25415788 -6.625 3.375 C-7.55119141 3.85066406 -7.55119141 3.85066406 -8.49609375 4.3359375 C-12.25649167 6.23592803 -15.95517816 7.76788504 -20 9 C-20.33 10.65 -20.66 12.3 -21 14 C-21.33 14 -21.66 14 -22 14 C-22.33 12.02 -22.66 10.04 -23 8 C-19.73638406 6.46331585 -16.46309912 4.94845148 -13.1875 3.4375 C-12.25873047 2.99986328 -11.32996094 2.56222656 -10.37304688 2.11132812 C-9.48037109 1.70205078 -8.58769531 1.29277344 -7.66796875 0.87109375 C-6.84578857 0.48880615 -6.0236084 0.10651855 -5.17651367 -0.28735352 C-3 -1 -3 -1 0 0 Z \",fill:\"#0C1517\",transform:\"translate(245,410)\"})),_path1528||(_path1528=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 2.31 1 4.62 1 7 C3.31 5.35 5.62 3.7 8 2 C6.50902342 5.7952131 4.24299151 7.61042731 1 10 C2.5830577 14.2742558 5.50568404 16.26531794 9 19 C5.26092546 19 3.3982216 18.19584605 0.38671875 16.04296875 C-2.69256707 11.50644344 -0.82627009 5.13120668 0 0 Z \",fill:\"#E3866C\",transform:\"translate(341,368)\"})),_path1529||(_path1529=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.67453101 7.68483539 2.1567564 15.28410183 2 23 C2.66 23 3.32 23 4 23 C4 23.66 4 24.32 4 25 C2.68 25 1.36 25 0 25 C0 24.01 0 23.02 0 22 C-0.99 21.67 -1.98 21.34 -3 21 C-3 20.34 -3 19.68 -3 19 C-2.01 19 -1.02 19 0 19 C0 12.73 0 6.46 0 0 Z \",fill:\"#290D0C\",transform:\"translate(206,349)\"})),_path1530||(_path1530=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.96 0 7.92 0 12 0 C10.1875 2.5 10.1875 2.5 8 5 C7.01 5 6.02 5 5 5 C5 5.66 5 6.32 5 7 C4.34 7 3.68 7 3 7 C0 2.61538462 0 2.61538462 0 0 Z \",fill:\"#F4746A\",transform:\"translate(398,367)\"})),_path1531||(_path1531=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 3.3 2 6.6 2 10 C4.97 10 7.94 10 11 10 C11 10.33 11 10.66 11 11 C9.60432165 11.31319144 8.20844918 11.62551788 6.8125 11.9375 C5.58466797 12.21400391 5.58466797 12.21400391 4.33203125 12.49609375 C2.56425805 12.87807489 0.78396416 13.20267264 -1 13.5 C-1.66 13.665 -2.32 13.83 -3 14 C-3.33 14.66 -3.66 15.32 -4 16 C-4 14.68 -4 13.36 -4 12 C-2.68 12 -1.36 12 0 12 C0 8.04 0 4.08 0 0 Z \",fill:\"#0D0E0E\",transform:\"translate(296,326)\"})),_path1532||(_path1532=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C8.02114786 0.84433135 16.00861581 1.91553021 24 3 C24 3.66 24 4.32 24 5 C18.26861756 5.15490223 13.10650794 4.65244885 7.5 3.5 C6.77296875 3.35691406 6.0459375 3.21382813 5.296875 3.06640625 C3.52990929 2.71766302 1.76474691 2.35980277 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#A36D53\",transform:\"translate(602,324)\"})),_path1533||(_path1533=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.23475448 1.61737724 4.70572021 2.47629223 7 5 C6.01 5 5.02 5 4 5 C3.34 8.3 2.68 11.6 2 15 C1.34 15 0.68 15 0 15 C0 10.05 0 5.1 0 0 Z \",fill:\"#A06D51\",transform:\"translate(352,312)\"})),_path1534||(_path1534=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 7.59 1 15.18 1 23 C-0.98 23 -2.96 23 -5 23 C-5 19.04 -5 15.08 -5 11 C-4.67 11 -4.34 11 -4 11 C-3.67 13.97 -3.34 16.94 -3 20 C-2.67 19.34 -2.34 18.68 -2 18 C-1.34 18 -0.68 18 0 18 C0 12.06 0 6.12 0 0 Z \",fill:\"#9F7D66\",transform:\"translate(268,302)\"})),_path1535||(_path1535=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.9453125 -0.29296875 1.9453125 -0.29296875 4.125 -0.1875 C5.40375 -0.125625 6.6825 -0.06375 8 0 C8.04254356 1.99954746 8.04080783 4.00041636 8 6 C7 7 7 7 3.9375 7.0625 C2.968125 7.041875 1.99875 7.02125 1 7 C1.66 6.34 2.32 5.68 3 5 C0.525 4.01 0.525 4.01 -2 3 C-1.34 2.01 -0.68 1.02 0 0 Z \",fill:\"#CDBE9D\",transform:\"translate(156,302)\"})),_path1536||(_path1536=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.63 0 7.26 0 11 0 C11 0.66 11 1.32 11 2 C7.0367404 5.11558306 4.24092415 5.29016939 -0.6875 4.8125 C-1.82574219 4.71582031 -2.96398437 4.61914062 -4.13671875 4.51953125 C-7 4 -7 4 -9 2 C-4.545 1.505 -4.545 1.505 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#B9765D\",transform:\"translate(441,292)\"})),_path1537||(_path1537=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C1.66 2 2.32 2 3 2 C3.33 1.34 3.66 0.68 4 0 C4.66 2.31 5.32 4.62 6 7 C5 8 5 8 2.93359375 8.09765625 C2.10988281 8.08605469 1.28617188 8.07445312 0.4375 8.0625 C-0.38878906 8.05347656 -1.21507812 8.04445313 -2.06640625 8.03515625 C-2.70449219 8.02355469 -3.34257813 8.01195312 -4 8 C-3.34 6.02 -2.68 4.04 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#361007\",transform:\"translate(605,284)\"})),_path1538||(_path1538=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C10.56 0 21.12 0 32 0 C32 0.33 32 0.66 32 1 C22.43 1.33 12.86 1.66 3 2 C3.33 3.32 3.66 4.64 4 6 C2.68 5.67 1.36 5.34 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#240507\",transform:\"translate(170,280)\"})),_path1539||(_path1539=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3 5.61 3 11.22 3 17 C2.01 16.67 1.02 16.34 0 16 C0 10.72 0 5.44 0 0 Z \",fill:\"#DE4B31\",transform:\"translate(114,270)\"})),_path1540||(_path1540=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 1.98 0 3.96 0 6 C-4.46839215 6.21278058 -7.82262526 5.59138085 -12 4 C-7.66457495 0.67617413 -5.52858726 -0.12018668 0 0 Z \",fill:\"#F2C499\",transform:\"translate(264,253)\"})),_path1541||(_path1541=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-14.59681093 6.88838269 -14.59681093 6.88838269 -22 6 C-21 4 -21 4 -17.32421875 2.67578125 C-15.78113026 2.21298807 -14.23539997 1.75893623 -12.6875 1.3125 C-11.91470703 1.07466797 -11.14191406 0.83683594 -10.34570312 0.59179688 C-9.59611328 0.37201172 -8.84652344 0.15222656 -8.07421875 -0.07421875 C-7.04687622 -0.37718872 -7.04687622 -0.37718872 -5.9987793 -0.6862793 C-3.71703466 -1.04441315 -2.18288038 -0.69770341 0 0 Z \",fill:\"#675146\",transform:\"translate(386,236)\"})),_path1542||(_path1542=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-2.484375 3.7265625 -2.484375 3.7265625 -5.75 5.625 C-6.81734375 6.25664062 -7.8846875 6.88828125 -8.984375 7.5390625 C-12 9 -12 9 -16 9 C-15 6 -15 6 -12 4 C-11.01 4 -10.02 4 -9 4 C-8.67 3.34 -8.34 2.68 -8 2 C-2.77777778 0 -2.77777778 0 0 0 Z \",fill:\"#604940\",transform:\"translate(384,215)\"})),_path1543||(_path1543=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.88387779 1.35216838 5.35417975 2.89752336 7.890625 4.8203125 C8.95410156 5.62275391 8.95410156 5.62275391 10.0390625 6.44140625 C10.76867187 6.99699219 11.49828125 7.55257812 12.25 8.125 C12.99507812 8.68832031 13.74015625 9.25164062 14.5078125 9.83203125 C16.34074811 11.21848254 18.17137013 12.60787768 20 14 C19.01 14.33 18.02 14.66 17 15 C15.20654297 14.05957031 15.20654297 14.05957031 13.2421875 12.578125 C12.53449219 12.04703125 11.82679688 11.5159375 11.09765625 10.96875 C10.36417969 10.4015625 9.63070312 9.834375 8.875 9.25 C8.13378906 8.69828125 7.39257812 8.1465625 6.62890625 7.578125 C1.13274235 3.39822704 1.13274235 3.39822704 0 0 Z \",fill:\"#E4C38F\",transform:\"translate(143,155)\"})),_path1544||(_path1544=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 2 2 2 2.1953125 4.1640625 C2.16050781 5.38222656 2.16050781 5.38222656 2.125 6.625 C2.10695312 7.44226563 2.08890625 8.25953125 2.0703125 9.1015625 C2.04710937 9.72804687 2.02390625 10.35453125 2 11 C2.66 11 3.32 11 4 11 C4.66 12.98 5.32 14.96 6 17 C5.34 17 4.68 17 4 17 C4 19.97 4 22.94 4 26 C3.34 26 2.68 26 2 26 C1.00544091 23.01632274 0.80440368 20.7995808 0.68359375 17.67578125 C0.64169922 16.64775391 0.59980469 15.61972656 0.55664062 14.56054688 C0.51732422 13.48869141 0.47800781 12.41683594 0.4375 11.3125 C0.39431641 10.22904297 0.35113281 9.14558594 0.30664062 8.02929688 C0.20053162 5.35299209 0.09847639 2.67659474 0 0 Z \",fill:\"#5F4C3F\",transform:\"translate(134,123)\"})),_path1545||(_path1545=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.99 1.32 1.98 2 3 C3.32 2.67 4.64 2.34 6 2 C6.33 3.32 6.66 4.64 7 6 C6.01 6 5.02 6 4 6 C4 6.66 4 7.32 4 8 C5.32 8.66 6.64 9.32 8 10 C7.01 10.495 7.01 10.495 6 11 C4.82780457 10.21654285 3.66236332 9.42297164 2.5 8.625 C1.8503125 8.18414062 1.200625 7.74328125 0.53125 7.2890625 C0.0259375 6.86367187 -0.479375 6.43828125 -1 6 C-1 5.34 -1 4.68 -1 4 C-1.99 3.67 -2.98 3.34 -4 3 C-4 2.34 -4 1.68 -4 1 C-2.68 0.67 -1.36 0.34 0 0 Z \",fill:\"#2A1C19\",transform:\"translate(96,106)\"})),_path1546||(_path1546=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.33 2.64 0.66 4 1 C3.40832031 1.58007812 2.81664062 2.16015625 2.20703125 2.7578125 C-3.08276941 7.96115791 -3.08276941 7.96115791 -7.9375 13.5625 C-8.618125 14.366875 -9.29875 15.17125 -10 16 C-10.66 16 -11.32 16 -12 16 C-12.66 17.32 -13.32 18.64 -14 20 C-14.66 19.34 -15.32 18.68 -16 18 C-15.55084229 17.56131592 -15.10168457 17.12263184 -14.63891602 16.6706543 C-12.60822431 14.68151799 -10.5853172 12.68464228 -8.5625 10.6875 C-7.85544922 9.99720703 -7.14839844 9.30691406 -6.41992188 8.59570312 C-5.40961914 7.59506836 -5.40961914 7.59506836 -4.37890625 6.57421875 C-3.44413452 5.65515747 -3.44413452 5.65515747 -2.49047852 4.7175293 C-0.77441733 2.96150438 -0.77441733 2.96150438 0 0 Z \",fill:\"#48533D\",transform:\"translate(532,0)\"})),_path1547||(_path1547=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.2756287 3.41344304 3.15420627 6.70220087 4.125 10.625 C4.30385742 11.33978516 4.48271484 12.05457031 4.66699219 12.79101562 C5.90178497 17.97949729 6.38183783 22.65427033 6 28 C2.90713275 21.90485156 1.73788967 16.4890221 1.21875 9.703125 C0.95451389 6.43792167 0.50334883 3.23581393 0 0 Z \",fill:\"#D2A182\",transform:\"translate(372,581)\"})),_path1548||(_path1548=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0 4.62 0 7 0 C7 3.3 7 6.6 7 10 C6.34 10 5.68 10 5 10 C4.67 8.68 4.34 7.36 4 6 C3.01 7.485 3.01 7.485 2 9 C1.34 6.03 0.68 3.06 0 0 Z \",fill:\"#663C31\",transform:\"translate(359,526)\"})),_path1549||(_path1549=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.625 -0.1875 3.625 -0.1875 7 0 C7 1.98 7 3.96 7 6 C4.36 6 1.72 6 -1 6 C-1.33 5.01 -1.66 4.02 -2 3 C-1.34 2.01 -0.68 1.02 0 0 Z \",fill:\"#282422\",transform:\"translate(317,511)\"})),_path1550||(_path1550=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.09434233 -0.09733092 13.98194143 -0.10087193 21 1 C21 1.66 21 2.32 21 3 C19.35 3 17.7 3 16 3 C16 3.66 16 4.32 16 5 C9.84765625 4.4140625 9.84765625 4.4140625 8 4 C7.67 3.34 7.34 2.68 7 2 C4.67843403 1.59270772 2.3431213 1.25561323 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#240D0C\",transform:\"translate(244,483)\"})),_path1551||(_path1551=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.05392397 2.77109307 2.09363455 5.54113818 2.125 8.3125 C2.14175781 9.09818359 2.15851563 9.88386719 2.17578125 10.69335938 C2.18222656 11.45068359 2.18867188 12.20800781 2.1953125 12.98828125 C2.20578613 13.68477783 2.21625977 14.38127441 2.22705078 15.09887695 C2 17 2 17 0 20 C0 15.38 0 10.76 0 6 C-1.98 6.99 -1.98 6.99 -4 8 C-2.87548273 5.0280615 -1.77706209 2.66559313 0 0 Z \",fill:\"#BC7A72\",transform:\"translate(163,444)\"})),_path1552||(_path1552=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.28 0 10.56 0 16 0 C16 2.64 16 5.28 16 8 C14.68 8.33 13.36 8.66 12 9 C11.67 6.69 11.34 4.38 11 2 C7.37 1.67 3.74 1.34 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#E8EF63\",transform:\"translate(312,424)\"})),_path1553||(_path1553=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.8333472 -0.08333357 9.23692563 0.04738513 14 1 C14 1.66 14 2.32 14 3 C16.64 3.99 19.28 4.98 22 6 C22 6.33 22 6.66 22 7 C16.78741465 7.54869319 13.10654069 6.02234815 8.4140625 4.0234375 C5.65642083 2.85434022 2.85526564 1.90166283 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#654333\",transform:\"translate(490,418)\"})),_path1554||(_path1554=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.99 2 1.98 2 3 C2.66 3 3.32 3 4 3 C4 4.98 4 6.96 4 9 C4.66 9 5.32 9 6 9 C6 10.98 6 12.96 6 15 C6.66 15 7.32 15 8 15 C7.67 16.32 7.34 17.64 7 19 C7 18.34 7 17.68 7 17 C6.01 17 5.02 17 4 17 C3.896875 15.948125 3.79375 14.89625 3.6875 13.8125 C3.0100714 10.05585049 1.93278998 8.19330518 0 5 C-0.1875 2.1875 -0.1875 2.1875 0 0 Z \",fill:\"#812325\",transform:\"translate(292,387)\"})),_path1555||(_path1555=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0 5.28 0 8 0 C7.01 0.33 6.02 0.66 5 1 C5 1.66 5 2.32 5 3 C4.34 3 3.68 3 3 3 C3.020625 3.804375 3.04125 4.60875 3.0625 5.4375 C3 8 3 8 2 9 C1.92820036 10.51928038 1.91607993 12.04167482 1.9375 13.5625 C1.94652344 14.38878906 1.95554688 15.21507812 1.96484375 16.06640625 C1.97644531 16.70449219 1.98804688 17.34257812 2 18 C1.34 18 0.68 18 0 18 C-0.19620767 15.93831015 -0.38160753 13.87559002 -0.5625 11.8125 C-0.66691406 10.66394531 -0.77132812 9.51539063 -0.87890625 8.33203125 C-0.98859985 5.31368801 -0.74002389 2.91076064 0 0 Z \",fill:\"#727B4F\",transform:\"translate(192,376)\"})),_path1556||(_path1556=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.12751449 0.60698743 7.3321148 2.03810791 11 4 C11.33 3.34 11.66 2.68 12 2 C13.32 3.65 14.64 5.3 16 7 C14.02 7.99 12.04 8.98 10 10 C8 8 8 8 7 5 C5.37051936 3.77554716 5.37051936 3.77554716 3.4375 2.8125 C2.303125 2.214375 1.16875 1.61625 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#484741\",transform:\"translate(518,335)\"})),_path1557||(_path1557=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4 1.32 4 2.64 4 4 C3.34 4 2.68 4 2 4 C2 4.66 2 5.32 2 6 C1.34 6 0.68 6 0 6 C0 6.66 0 7.32 0 8 C-0.66 8 -1.32 8 -2 8 C-2 9.32 -2 10.64 -2 12 C-2.66 12 -3.32 12 -4 12 C-4 9.36 -4 6.72 -4 4 C-3.34 4 -2.68 4 -2 4 C-2 3.34 -2 2.68 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#7D0E26\",transform:\"translate(78,320)\"})),_path1558||(_path1558=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.05303105 -0.26570232 11.52911806 0.74090637 17.4375 2 C18.82098633 2.28617187 18.82098633 2.28617187 20.23242188 2.578125 C22.48963929 3.04594208 24.7453418 3.52002747 27 4 C27 4.33 27 4.66 27 5 C24.69 5.66 22.38 6.32 20 7 C19.67 6.01 19.34 5.02 19 4 C17.700625 4.04125 16.40125 4.0825 15.0625 4.125 C10.26397019 4.125 5.53815414 3.64102895 1 2 C0.67 1.34 0.34 0.68 0 0 Z \",fill:\"#82583F\",transform:\"translate(549,321)\"})),_path1559||(_path1559=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.59064664 0.48701051 14.67059167 1.99763587 22 4 C14.38596602 6.53801133 7.35430221 4.57937948 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#8B5B47\",transform:\"translate(570,319)\"})),_path1560||(_path1560=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.3 0 6.6 0 10 0 C10 0.33 10 0.66 10 1 C7.03 1 4.06 1 1 1 C1 1.66 1 2.32 1 3 C1.66 2.67 2.32 2.34 3 2 C4.87056791 1.7724985 6.74685958 1.59037189 8.625 1.4375 C10.12933594 1.31181641 10.12933594 1.31181641 11.6640625 1.18359375 C12.43492187 1.12300781 13.20578125 1.06242187 14 1 C14.33 2.65 14.66 4.3 15 6 C12.87465341 5.85930804 10.74972471 5.71229079 8.625 5.5625 C7.44164062 5.48128906 6.25828125 5.40007812 5.0390625 5.31640625 C2 5 2 5 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#BC9B7F\",transform:\"translate(169,306)\"})),_path1561||(_path1561=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.82271337 -0.59720137 9.9209404 1.471757 15 4 C14.01 4.99 13.02 5.98 12 7 C9.99538701 6.34733531 7.99620166 5.67795528 6 5 C4.6078125 4.5359375 4.6078125 4.5359375 3.1875 4.0625 C2.465625 3.711875 1.74375 3.36125 1 3 C0.67 2.01 0.34 1.02 0 0 Z \",fill:\"#B27254\",transform:\"translate(376,295)\"})),_path1562||(_path1562=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.33 4.62 1.66 9.24 2 14 C2.33 9.71 2.66 5.42 3 1 C3.33 1 3.66 1 4 1 C4.33 6.28 4.66 11.56 5 17 C3.35 17 1.7 17 0 17 C-0.19386492 14.35448944 -0.38038267 11.70882217 -0.5625 9.0625 C-0.61857422 8.30775391 -0.67464844 7.55300781 -0.73242188 6.77539062 C-0.86176157 4.85254042 -0.93516912 2.92610452 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#C0C58A\",transform:\"translate(76,271)\"})),_path1563||(_path1563=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0.33 4.62 0.66 7 1 C6.67 2.32 6.34 3.64 6 5 C-3.41002278 7.29612756 -3.41002278 7.29612756 -8 7 C-5.47043472 3.9083091 -2.77545388 3.09068668 1 2 C0.67 1.34 0.34 0.68 0 0 Z \",fill:\"#5E6253\",transform:\"translate(379,243)\"})),_path1564||(_path1564=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-3.44450737 2.29633824 -5.93812283 2.54016485 -10 3 C-9.34 3.45375 -8.68 3.9075 -8 4.375 C-7.34 4.91125 -6.68 5.4475 -6 6 C-6 6.66 -6 7.32 -6 8 C-7.98 8 -9.96 8 -12 8 C-12 7.01 -12 6.02 -12 5 C-13.65 4.67 -15.3 4.34 -17 4 C-14.59327602 1.59327602 -12.88621451 1.20867825 -9.625 0.3125 C-8.66851562 0.04050781 -7.71203125 -0.23148438 -6.7265625 -0.51171875 C-4.02935339 -0.9947433 -2.55027856 -0.9004538 0 0 Z \",fill:\"#384D44\",transform:\"translate(496,216)\"})),_path1565||(_path1565=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.59678466 1.51228446 5.81419979 3.63672547 8.5 6.4375 C11.19579727 9.23946737 13.82172857 11.75353997 17 14 C16.67 14.99 16.34 15.98 16 17 C14 15.625 14 15.625 12 14 C12 13.34 12 12.68 12 12 C11.42765625 11.7525 10.8553125 11.505 10.265625 11.25 C7.64989389 9.80683801 5.85226544 8.11783778 3.75 6 C3.04359375 5.29875 2.3371875 4.5975 1.609375 3.875 C0 2 0 2 0 0 Z \",fill:\"#C8AB84\",transform:\"translate(207,183)\"})),_path1566||(_path1566=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-3.44260166 3.84761362 -5.99223766 5.72142238 -11 7 C-11.78375 7.20625 -12.5675 7.4125 -13.375 7.625 C-13.91125 7.74875 -14.4475 7.8725 -15 8 C-14.8359375 6.17578125 -14.8359375 6.17578125 -14 4 C-11.6015625 2.48046875 -11.6015625 2.48046875 -8.625 1.1875 C-7.64789063 0.74792969 -6.67078125 0.30835938 -5.6640625 -0.14453125 C-3 -1 -3 -1 0 0 Z \",fill:\"#362927\",transform:\"translate(485,187)\"})),_path1567||(_path1567=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4 0.66 4 1.32 4 2 C4.66 2 5.32 2 6 2 C6.33 2.99 6.66 3.98 7 5 C7.99 5.33 8.98 5.66 10 6 C10 6.66 10 7.32 10 8 C10.598125 8.12375 11.19625 8.2475 11.8125 8.375 C14 9 14 9 17 11 C17 11.66 17 12.32 17 13 C12.92546771 12.37695259 10.10460299 10.23467379 6.75 7.9375 C5.67234375 7.20402344 4.5946875 6.47054687 3.484375 5.71484375 C2.66453125 5.14894531 1.8446875 4.58304688 1 4 C1.33 3.34 1.66 2.68 2 2 C1.34 1.34 0.68 0.68 0 0 Z \",fill:\"#CDB07D\",transform:\"translate(172,176)\"})),_path1568||(_path1568=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0 5.28 0 8 0 C4.80173015 5.11723176 1.04165813 9.52692892 -3 14 C-3.33 13.34 -3.66 12.68 -4 12 C-2.7260411 9.96166576 -1.38938077 7.96147874 0 6 C0.66 6 1.32 6 2 6 C2 5.34 2 4.68 2 4 C1.34 3.67 0.68 3.34 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#163932\",transform:\"translate(504,0)\"})),_path1569||(_path1569=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.18659858 3.82774727 7.37820862 7.94607874 10 13 C10 13.66 10 14.32 10 15 C9.01 15.33 8.02 15.66 7 16 C5.63304778 13.90320896 4.28153009 11.7989062 2.9375 9.6875 C2.54755859 9.09259766 2.15761719 8.49769531 1.75585938 7.88476562 C0.75788505 6.30390365 -0.12868696 4.65405288 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#684334\",transform:\"translate(476,574)\"})),_path1570||(_path1570=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.73338977 7.07720843 5.44314183 14.02344709 5 22 C0.02318599 14.53477899 -0.15644055 8.79543554 0 0 Z \",fill:\"#E7B896\",transform:\"translate(363,546)\"})),_path1571||(_path1571=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C-6.09326321 3.72330907 -12.70968976 4.2494783 -20 4 C-15.37617543 -0.62382457 -6.27298552 -0.27879936 0 0 Z \",fill:\"#100907\",transform:\"translate(408,494)\"})),_path1572||(_path1572=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1.34 1.70125 0.68 2.4025 0 3.125 C-2.30233203 6.43460229 -2.36630156 8.06225823 -2 12 C-3.98 11.34 -5.96 10.68 -8 10 C-8 8.68 -8 7.36 -8 6 C-7.195625 5.731875 -6.39125 5.46375 -5.5625 5.1875 C-4.716875 4.795625 -3.87125 4.40375 -3 4 C-2.67 3.01 -2.34 2.02 -2 1 C-1.34 0.67 -0.68 0.34 0 0 Z \",fill:\"#0F1214\",transform:\"translate(19,489)\"})),_path1573||(_path1573=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C8.4342927 -0.45636453 15.85956596 0.82576642 24 3 C24 3.66 24 4.32 24 5 C12.12 3.515 12.12 3.515 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#C7514A\",transform:\"translate(160,478)\"})),_path1574||(_path1574=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.95857409 -0.05379226 5.91617721 -0.09357093 8.875 -0.125 C9.71675781 -0.14175781 10.55851563 -0.15851563 11.42578125 -0.17578125 C12.23144531 -0.18222656 13.03710938 -0.18867188 13.8671875 -0.1953125 C14.98262939 -0.21102295 14.98262939 -0.21102295 16.12060547 -0.22705078 C18 0 18 0 20 2 C16.07009 2.9142755 12.34462093 3.19482845 8.3125 3.25 C7.17425781 3.27578125 6.03601563 3.3015625 4.86328125 3.328125 C3.91839844 3.21984375 2.97351563 3.1115625 2 3 C1.34 2.01 0.68 1.02 0 0 Z \",fill:\"#A63542\",transform:\"translate(236,468)\"})),_path1575||(_path1575=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.12472576 -0.05386629 4.24983652 -0.09273071 6.375 -0.125 C7.55835938 -0.14820313 8.74171875 -0.17140625 9.9609375 -0.1953125 C13 0 13 0 15 2 C10.38 2 5.76 2 1 2 C0.67 4.31 0.34 6.62 0 9 C-0.99 9 -1.98 9 -3 9 C-2.30004181 5.85018814 -1.21744864 2.98423386 0 0 Z \",fill:\"#E9B29C\",transform:\"translate(419,450)\"})),_path1576||(_path1576=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.92 0 15.84 0 24 0 C22 2 22 2 20.07641602 2.21118164 C19.30998779 2.19434326 18.54355957 2.17750488 17.75390625 2.16015625 C16.91666016 2.14919922 16.07941406 2.13824219 15.21679688 2.12695312 C14.34087891 2.10568359 13.46496094 2.08441406 12.5625 2.0625 C10.83471989 2.02802102 9.10684609 1.99789134 7.37890625 1.97265625 C6.6113501 1.95468994 5.84379395 1.93672363 5.05297852 1.91821289 C2.79823335 1.91269267 2.79823335 1.91269267 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#DABBA6\",transform:\"translate(308,446)\"})),_path1577||(_path1577=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0 5.28 0 8 0 C8.33 3.3 8.66 6.6 9 10 C6.03 10 3.06 10 0 10 C0 9.67 0 9.34 0 9 C1.65 9 3.3 9 5 9 C4.67 6.36 4.34 3.72 4 1 C3.01 1 2.02 1 1 1 C0.67 2.32 0.34 3.64 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#040204\",transform:\"translate(360,416)\"})),_path1578||(_path1578=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C14.78132118 -0.3690205 14.78132118 -0.3690205 21 2 C19 4 19 4 16.93359375 4.046875 C11.18025413 3.36259674 5.63307435 2.36284057 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#CC151D\",transform:\"translate(11,394)\"})),_path1579||(_path1579=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4.66 3.3 5.32 6.6 6 10 C6.66 10 7.32 10 8 10 C8 11.32 8 12.64 8 14 C6 14 6 14 3.875 12.375 C1.52263985 9.39534381 1.66336938 7.70293685 2 4 C1.34 4 0.68 4 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#A7202E\",transform:\"translate(296,392)\"})),_path1580||(_path1580=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.33 2.64 0.66 4 1 C3.835 1.639375 3.67 2.27875 3.5 2.9375 C2.96073333 4.80826821 2.96073333 4.80826821 3 6 C2.67 6.99 2.34 7.98 2 9 C0.35 9.33 -1.3 9.66 -3 10 C-3 7.69 -3 5.38 -3 3 C-2.34 3 -1.68 3 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#E0B899\",transform:\"translate(130,385)\"})),_path1581||(_path1581=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.969375 0.144375 1.93875 0.28875 2.9375 0.4375 C4.29144229 0.6266134 5.64563192 0.81396043 7 1 C7.74507812 1.10699219 8.49015625 1.21398437 9.2578125 1.32421875 C13.75353042 1.91094804 17.52107394 2.03359832 22 1 C21.34 2.65 20.68 4.3 20 6 C17.04098541 5.52476432 14.08283097 5.04499898 11.125 4.5625 C10.28324219 4.42779297 9.44148438 4.29308594 8.57421875 4.15429688 C7.76855469 4.02216797 6.96289062 3.89003906 6.1328125 3.75390625 C5.38918457 3.63345947 4.64555664 3.5130127 3.87939453 3.38891602 C2 3 2 3 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#5D7068\",transform:\"translate(39,382)\"})),_path1582||(_path1582=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.62 0 9.24 0 14 0 C13.67 0.99 13.34 1.98 13 3 C10.93359375 3.73046875 10.93359375 3.73046875 8.4375 4.1875 C7.61121094 4.34605469 6.78492188 4.50460937 5.93359375 4.66796875 C4.97646484 4.83232422 4.97646484 4.83232422 4 5 C3.67 6.65 3.34 8.3 3 10 C2.67 10 2.34 10 2 10 C2.06510417 7.98177083 2.13020833 5.96354167 2.1953125 3.9453125 C2.18331689 1.76136355 2.18331689 1.76136355 0 0 Z \",fill:\"#D4C483\",transform:\"translate(446,375)\"})),_path1583||(_path1583=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.00972202 3.67557852 6.45335415 7.18966896 9 12 C4.71 11.34 0.42 10.68 -4 10 C-4 9.67 -4 9.34 -4 9 C-0.535 8.505 -0.535 8.505 3 8 C2.01 7.34 1.02 6.68 0 6 C-0.1875 2.875 -0.1875 2.875 0 0 Z \",fill:\"#E6E3B6\",transform:\"translate(536,366)\"})),_path1584||(_path1584=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C0.67 2.97 0.34 5.94 0 9 C-2.31 9 -4.62 9 -7 9 C-7.33 8.01 -7.66 7.02 -8 6 C-7.34 6 -6.68 6 -6 6 C-6 5.34 -6 4.68 -6 4 C-4.36368108 2.95107762 -2.69514137 1.95093297 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#DA3C3B\",transform:\"translate(409,368)\"})),_path1585||(_path1585=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.33 2.64 0.66 4 1 C4 1.66 4 2.32 4 3 C4.66 3 5.32 3 6 3 C6 4.65 6 6.3 6 8 C4.02 8 2.04 8 0 8 C0 7.01 0 6.02 0 5 C-0.66 5 -1.32 5 -2 5 C-1.34 3.35 -0.68 1.7 0 0 Z \",fill:\"#BA240E\",transform:\"translate(138,341)\"})),_path1586||(_path1586=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.66 9.57 2.32 19.14 3 29 C1.68 28.34 0.36 27.68 -1 27 C-0.67 18.09 -0.34 9.18 0 0 Z \",fill:\"#220705\",transform:\"translate(261,314)\"})),_path1587||(_path1587=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.86625 0.37125 0.86625 0.37125 1.75 0.75 C0.41666667 3.41666667 -0.91666667 6.08333333 -2.25 8.75 C-2.91 8.75 -3.57 8.75 -4.25 8.75 C-4.25 9.41 -4.25 10.07 -4.25 10.75 C-4.91 10.75 -5.57 10.75 -6.25 10.75 C-6.73514851 4.44306931 -6.73514851 4.44306931 -4.5 1.25 C-2.25 -0.25 -2.25 -0.25 0 0 Z \",fill:\"#F8F6E5\",transform:\"translate(56.25,331.25)\"})),_path1588||(_path1588=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.875 0.1875 1.875 0.1875 4 1 C5.125 3.5 5.125 3.5 6 6 C6.66 6.33 7.32 6.66 8 7 C8 5.35 8 3.7 8 2 C8.33 2 8.66 2 9 2 C9 6.29 9 10.58 9 15 C8.01 15.495 8.01 15.495 7 16 C6.896875 14.906875 6.79375 13.81375 6.6875 12.6875 C6.26993059 9.13072772 6.26993059 9.13072772 4.6875 7 C3.00680603 5.76601349 3.00680603 5.76601349 0.8125 6.3125 C0.214375 6.539375 -0.38375 6.76625 -1 7 C-0.01 5.02 0.98 3.04 2 1 C1.34 0.67 0.68 0.34 0 0 Z \",fill:\"#3A1D1B\",transform:\"translate(216,321)\"})),_path1589||(_path1589=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0 3.96 0 6 0 C6 1.98 6 3.96 6 6 C3.03 6 0.06 6 -3 6 C-3 4.35 -3 2.7 -3 1 C-2.67 1.66 -2.34 2.32 -2 3 C-1.34 3 -0.68 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#F52823\",transform:\"translate(120,312)\"})),_path1590||(_path1590=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 3.66666667 2 7.33333333 2 11 C-1.3 10.67 -4.6 10.34 -8 10 C-8.33 9.01 -8.66 8.02 -9 7 C-6.03 7 -3.06 7 0 7 C0 4.69 0 2.38 0 0 Z \",fill:\"#834B40\",transform:\"translate(311,306)\"})),_path1591||(_path1591=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.75 -0.125 6.75 -0.125 9 1 C9 2.65 9 4.3 9 6 C6.69 6.33 4.38 6.66 2 7 C2.66 6.67 3.32 6.34 4 6 C3.01 5.67 2.02 5.34 1 5 C0.67 3.35 0.34 1.7 0 0 Z \",fill:\"#093D27\",transform:\"translate(448,304)\"})),_path1592||(_path1592=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.375 0.75 2.375 0.75 5 2 C5.66 3.32 6.32 4.64 7 6 C2.05 6.33 -2.9 6.66 -8 7 C-7 5 -7 5 -4 4 C-4.66 3.34 -5.32 2.68 -6 2 C-5.01 1.67 -4.02 1.34 -3 1 C-3 1.66 -3 2.32 -3 3 C-2.01 2.67 -1.02 2.34 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#2F524E\",transform:\"translate(472,292)\"})),_path1593||(_path1593=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C1.66 2 2.32 2 3 2 C3.66 3.65 4.32 5.3 5 7 C7.64 6.67 10.28 6.34 13 6 C12 8 12 8 10.109375 8.6328125 C6.02124399 9.48563453 2.20385856 10.27121668 -2 10 C-1.34 9.67 -0.68 9.34 0 9 C0 6.03 0 3.06 0 0 Z \",fill:\"#ACB076\",transform:\"translate(226,272)\"})),_path1594||(_path1594=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-0.66 2 -1.32 2 -2 2 C-1.67 3.98 -1.34 5.96 -1 8 C-3.31 8 -5.62 8 -8 8 C-9 6 -9 6 -8.8125 4 C-8 2 -8 2 -6.1875 0.75 C-4 0 -4 0 0 0 Z \",fill:\"#592A2A\",transform:\"translate(64,230)\"})),_path1595||(_path1595=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.99 2 1.98 2 3 C2.66 3 3.32 3 4 3 C4 5.31 4 7.62 4 10 C5.32 10 6.64 10 8 10 C8 10.66 8 11.32 8 12 C5.66705225 12.04241723 3.33297433 12.04092937 1 12 C0 11 0 11 -0.09765625 8.49609375 C-0.08605469 7.48675781 -0.07445312 6.47742188 -0.0625 5.4375 C-0.05347656 4.42558594 -0.04445312 3.41367188 -0.03515625 2.37109375 C-0.02355469 1.58863281 -0.01195312 0.80617187 0 0 Z \",fill:\"#698B71\",transform:\"translate(176,140)\"})),_path1596||(_path1596=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.33 1.65 2.66 3.3 3 5 C3.99 5.33 4.98 5.66 6 6 C6 6.66 6 7.32 6 8 C7.32 8 8.64 8 10 8 C10 11.76687864 9.76462683 12.91190305 8 16 C5.9629395 13.42687094 4.11300976 10.74168532 2.3125 8 C1.87550781 7.34 1.43851563 6.68 0.98828125 6 C0 4 0 4 0 0 Z \",fill:\"#21433E\",transform:\"translate(158,64)\"})),_path1597||(_path1597=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 2.31 0.66 4.62 1 7 C-1.64 6.67 -4.28 6.34 -7 6 C-7 4.68 -7 3.36 -7 2 C-8.32 1.67 -9.64 1.34 -11 1 C-9.54182203 0.83197949 -8.0834516 0.66562857 -6.625 0.5 C-5.81289063 0.4071875 -5.00078125 0.314375 -4.1640625 0.21875 C-2 0 -2 0 0 0 Z \",fill:\"#675A48\",transform:\"translate(355,518)\"})),_path1598||(_path1598=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.6 0 13.2 0 20 0 C20 3.3 20 6.6 20 10 C19.67 10 19.34 10 19 10 C19 7.03 19 4.06 19 1 C13.555 1.495 13.555 1.495 8 2 C8 2.99 8 3.98 8 5 C5.36 4.34 2.72 3.68 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#9E6945\",transform:\"translate(322,488)\"})),_path1599||(_path1599=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C5 0.99 5 1.98 5 3 C4.01 3 3.02 3 2 3 C2 3.66 2 4.32 2 5 C-4.435 5.495 -4.435 5.495 -11 6 C-5.375 1.5 -5.375 1.5 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#D3AF9A\",transform:\"translate(408,478)\"})),_path1600||(_path1600=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.06393013 -0.25532751 4.63233212 -0.21861333 7.3125 1.375 C7.869375 1.91125 8.42625 2.4475 9 3 C9 3.66 9 4.32 9 5 C9.57234375 5.12246094 10.1446875 5.24492187 10.734375 5.37109375 C13.09953191 6.02762868 15.07206797 6.93723512 17.25 8.0625 C17.95640625 8.42472656 18.6628125 8.78695313 19.390625 9.16015625 C19.92171875 9.43730469 20.4528125 9.71445312 21 10 C20.01 11.485 20.01 11.485 19 13 C17.16136495 11.88368586 15.32920277 10.75670373 13.5 9.625 C12.4790625 8.99851562 11.458125 8.37203125 10.40625 7.7265625 C9.6121875 7.15679687 8.818125 6.58703125 8 6 C8 5.34 8 4.68 8 4 C7.05125 3.71125 6.1025 3.4225 5.125 3.125 C2 2 2 2 0 0 Z \",fill:\"#5C3D2E\",transform:\"translate(536,448)\"})),_path1601||(_path1601=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.95 0 9.9 0 15 0 C15 0.99 15 1.98 15 3 C7.25 3.125 7.25 3.125 5 2 C5 2.66 5 3.32 5 4 C3.35 3.67 1.7 3.34 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#736368\",transform:\"translate(187,454)\"})),_path1602||(_path1602=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C4.6875 2 4.6875 2 6 4 C-2.02124152 4.71413279 -9.94641862 5.14525497 -18 5 C-16 3 -16 3 -13.6171875 2.8046875 C-12.71226562 2.82789063 -11.80734375 2.85109375 -10.875 2.875 C-9.50988281 2.90207031 -9.50988281 2.90207031 -8.1171875 2.9296875 C-7.41851562 2.95289063 -6.71984375 2.97609375 -6 3 C-6 2.34 -6 1.68 -6 1 C-4.7934375 1.0309375 -4.7934375 1.0309375 -3.5625 1.0625 C-1.06645115 1.29633621 -1.06645115 1.29633621 0 0 Z \",fill:\"#311C15\",transform:\"translate(368,450)\"})),_path1603||(_path1603=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.763125 0.20625 1.52625 0.4125 2.3125 0.625 C-0.97480395 4.43135195 -4.94970034 5.47351251 -9.6875 6.625 C-10.39390625 6.80160156 -11.1003125 6.97820312 -11.828125 7.16015625 C-12.52421875 7.33417969 -13.2203125 7.50820313 -13.9375 7.6875 C-15.175 7.996875 -16.4125 8.30625 -17.6875 8.625 C-15.42615754 5.23298631 -14.45766882 4.90727856 -10.75 3.5625 C-0.75001269 -0.10465293 -0.75001269 -0.10465293 0 0 Z \",fill:\"#483028\",transform:\"translate(58.6875,436.375)\"})),_path1604||(_path1604=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.7602985 0.58107632 6.53035032 1.65199496 9.8125 3.5625 C10.60269531 4.01753906 11.39289062 4.47257812 12.20703125 4.94140625 C12.79871094 5.29074219 13.39039063 5.64007813 14 6 C13.67 6.66 13.34 7.32 13 8 C8.12335991 8.34833144 5.22949995 7.41685712 1 5 C1.99 4.34 2.98 3.68 4 3 C2.68 2.01 1.36 1.02 0 0 Z \",fill:\"#805640\",transform:\"translate(521,432)\"})),_path1605||(_path1605=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C0.75552339 3.5811481 -0.7493136 4.1873284 -4 5 C-4.67869141 5.70382812 -4.67869141 5.70382812 -5.37109375 6.421875 C-7.19584738 8.18974182 -8.6890981 8.88049201 -11.0625 9.75 C-11.75472656 10.01296875 -12.44695312 10.2759375 -13.16015625 10.546875 C-15 11 -15 11 -17 10 C-14.54220129 8.51993873 -12.08378912 7.04091426 -9.625 5.5625 C-8.92632812 5.14162109 -8.22765625 4.72074219 -7.5078125 4.28710938 C-6.8375 3.88427734 -6.1671875 3.48144531 -5.4765625 3.06640625 C-4.85861816 2.69459229 -4.24067383 2.32277832 -3.60400391 1.93969727 C-2.42685882 1.250073 -1.22024659 0.6101233 0 0 Z \",fill:\"#51392D\",transform:\"translate(99,433)\"})),_path1606||(_path1606=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.34249629 0.59687434 5.46436342 1.73603877 8 4 C8 4.66 8 5.32 8 6 C8.99 6 9.98 6 11 6 C12.28317892 9.84953676 12.06643637 12.94738135 12 17 C9.95100862 14.56072455 8.83790688 12.5754704 7.6875 9.5625 C5.66469361 5.29213095 3.71282813 3.80524792 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#4E4523\",transform:\"translate(464,403)\"})),_path1607||(_path1607=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.66 2 1.32 2 2 C2.99902344 2.12117188 3.99804688 2.24234375 5.02734375 2.3671875 C6.96287109 2.61855469 6.96287109 2.61855469 8.9375 2.875 C10.86916016 3.11863281 10.86916016 3.11863281 12.83984375 3.3671875 C13.88269531 3.57601563 14.92554688 3.78484375 16 4 C16.33 4.66 16.66 5.32 17 6 C13.7 6 10.4 6 7 6 C7 6.66 7 7.32 7 8 C6.34 8 5.68 8 5 8 C4.67 7.34 4.34 6.68 4 6 C3.34 6.66 2.68 7.32 2 8 C1.34 5.36 0.68 2.72 0 0 Z \",fill:\"#F0AE90\",transform:\"translate(373,356)\"})),_path1608||(_path1608=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0.33 4.62 0.66 7 1 C7 2.32 7 3.64 7 5 C6.34 5 5.68 5 5 5 C4.67 5.99 4.34 6.98 4 8 C2.35 7.67 0.7 7.34 -1 7 C-0.67 4.69 -0.34 2.38 0 0 Z \",fill:\"#F5AC90\",transform:\"translate(354,352)\"})),_path1609||(_path1609=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0 3.96 0 6 0 C5.01 0.33 4.02 0.66 3 1 C2.34 6.28 1.68 11.56 1 17 C1.66 17 2.32 17 3 17 C3.33 16.34 3.66 15.68 4 15 C3.67 16.98 3.34 18.96 3 21 C2.34 21 1.68 21 1 21 C-0.17426264 18.65147472 -0.11508173 17.26225935 -0.09765625 14.6484375 C-0.09443359 13.79765625 -0.09121094 12.946875 -0.08789062 12.0703125 C-0.07951172 11.18085938 -0.07113281 10.29140625 -0.0625 9.375 C-0.05798828 8.4778125 -0.05347656 7.580625 -0.04882812 6.65625 C-0.03702591 4.43743352 -0.02056155 2.21874982 0 0 Z \",fill:\"#D9BF7F\",transform:\"translate(202,327)\"})),_path1610||(_path1610=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C3.64 2 6.28 2 9 2 C9 3.32 9 4.64 9 6 C3.52667068 7.46845421 0.88077452 6.44038726 -4 4 C-3.34 3.01 -2.68 2.02 -2 1 C-2 1.99 -2 2.98 -2 4 C-1.34 2.68 -0.68 1.36 0 0 Z \",fill:\"#906245\",transform:\"translate(543,340)\"})),_path1611||(_path1611=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.3309303 -0.37010337 4.62731223 -0.27461204 7.375 1.75 C9 4 9 4 8.75 6.25 C8.5025 6.8275 8.255 7.405 8 8 C5.69 8.66 3.38 9.32 1 10 C1.59927826 6.64404172 2.84622436 4.62198774 5 2 C3.02 2 1.04 2 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#D5BD72\",transform:\"translate(53,330)\"})),_path1612||(_path1612=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.28 0 10.56 0 16 0 C15.67 0.99 15.34 1.98 15 3 C10.38 3 5.76 3 1 3 C0.67 2.01 0.34 1.02 0 0 Z \",fill:\"#F8A29A\",transform:\"translate(273,333)\"})),_path1613||(_path1613=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1 1 1 1 1.0625 3.5625 C1.041875 4.366875 1.02125 5.17125 1 6 C-1.875 6.1875 -1.875 6.1875 -5 6 C-7 3 -7 3 -7 0 C-4.31633121 -1.3418344 -2.84719317 -0.73004953 0 0 Z \",fill:\"#F7E9B5\",transform:\"translate(599,330)\"})),_path1614||(_path1614=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.44968831 0.69746064 14.79736147 1.98326121 22 4 C21.67 4.66 21.34 5.32 21 6 C18.08189078 5.5496745 15.16576016 5.09009058 12.25 4.625 C11.425 4.49867188 10.6 4.37234375 9.75 4.2421875 C8.95078125 4.11328125 8.1515625 3.984375 7.328125 3.8515625 C6.5949707 3.73635254 5.86181641 3.62114258 5.10644531 3.50244141 C2.84912166 2.96401163 1.02990066 2.1112302 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#91634C\",transform:\"translate(557,320)\"})),_path1615||(_path1615=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2 3.31 2 5.62 2 8 C-4.27 8 -10.54 8 -17 8 C-13.2632157 5.50881047 -11.25548181 5.7934774 -6.8125 5.875 C-5.54019531 5.89304687 -4.26789063 5.91109375 -2.95703125 5.9296875 C-1.49330078 5.96449219 -1.49330078 5.96449219 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#58573C\",transform:\"translate(390,300)\"})),_path1616||(_path1616=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.24658203 -0.34057617 2.24658203 -0.34057617 5.0078125 -0.29296875 C5.99394531 -0.28330078 6.98007812 -0.27363281 7.99609375 -0.26367188 C9.02863281 -0.23853516 10.06117188 -0.21339844 11.125 -0.1875 C12.68541016 -0.16719727 12.68541016 -0.16719727 14.27734375 -0.14648438 C16.85207627 -0.11105228 19.4257833 -0.06165221 22 0 C22 0.33 22 0.66 22 1 C14.08 1.495 14.08 1.495 6 2 C6.66 3.32 7.32 4.64 8 6 C7.67 6.99 7.34 7.98 7 9 C4 5.25 4 5.25 4 3 C2.02 3 0.04 3 -2 3 C-1.34 2.01 -0.68 1.02 0 0 Z \",fill:\"#B86A6C\",transform:\"translate(310,289)\"})),_path1617||(_path1617=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5 2 5 2 6 4 C5.34 4 4.68 4 4 4 C4 4.66 4 5.32 4 6 C6.31 6.33 8.62 6.66 11 7 C11 7.66 11 8.32 11 9 C8.03 8.67 5.06 8.34 2 8 C1.67 9.32 1.34 10.64 1 12 C0.67 8.04 0.34 4.08 0 0 Z \",fill:\"#A27961\",transform:\"translate(350,285)\"})),_path1618||(_path1618=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4 2.97 4 5.94 4 9 C-1.61 9 -7.22 9 -13 9 C-13 8.67 -13 8.34 -13 8 C-7.06 7.505 -7.06 7.505 -1 7 C0.06537205 2.52297636 0.06537205 2.52297636 0 0 Z \",fill:\"#DBB99A\",transform:\"translate(321,260)\"})),_path1619||(_path1619=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 1.485 0.99 1.485 2 3 C3.32 2.34 4.64 1.68 6 1 C6.33 2.65 6.66 4.3 7 6 C7.99 6.33 8.98 6.66 10 7 C10 7.66 10 8.32 10 9 C6.6875 9.25 6.6875 9.25 3 9 C1.0625 7.3125 1.0625 7.3125 0 5 C-0.1875 2.25 -0.1875 2.25 0 0 Z \",fill:\"#6A513E\",transform:\"translate(111,259)\"})),_path1620||(_path1620=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C5.09230769 4.43076923 5.09230769 4.43076923 4.625 7.3125 C4.41875 7.869375 4.2125 8.42625 4 9 C2.68 8.01 1.36 7.02 0 6 C0 7.32 0 8.64 0 10 C0.66 10 1.32 10 2 10 C2 10.66 2 11.32 2 12 C1.01 11.67 0.02 11.34 -1 11 C-2.23076923 4.6 -2.23076923 4.6 -1.0625 1.5625 C-0.711875 1.046875 -0.36125 0.53125 0 0 Z \",fill:\"#BA6E56\",transform:\"translate(145,250)\"})),_path1621||(_path1621=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.94 0 11.88 0 18 0 C17.67 0.99 17.34 1.98 17 3 C11.39 3 5.78 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#E4D3B7\",transform:\"translate(257,246)\"})),_path1622||(_path1622=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C5 0.66 5 1.32 5 2 C6.32 1.67 7.64 1.34 9 1 C9 0.67 9 0.34 9 0 C11.97 0.33 14.94 0.66 18 1 C17.01 1.66 16.02 2.32 15 3 C14.67 3.99 14.34 4.98 14 6 C12.56206608 5.68950274 11.1246682 5.3765224 9.6875 5.0625 C8.88699219 4.88847656 8.08648437 4.71445313 7.26171875 4.53515625 C5 4 5 4 2 3 C2 2.34 2 1.68 2 1 C1.34 0.67 0.68 0.34 0 0 Z \",fill:\"#5E3F30\",transform:\"translate(216,232)\"})),_path1623||(_path1623=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.5742977 0.32493615 5.55712453 0.63870686 8.375 2.9375 C10 5 10 5 10 7 C7.69 7 5.38 7 3 7 C3 6.01 3 5.02 3 4 C1.68 4.33 0.36 4.66 -1 5 C-1 2 -1 2 0 0 Z \",fill:\"#4E362B\",transform:\"translate(114,180)\"})),_path1624||(_path1624=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.60660347 0.94931769 7.20979798 1.91099137 10.8125 2.875 C11.83666016 3.14441406 12.86082031 3.41382813 13.91601562 3.69140625 C14.89892578 3.95566406 15.88183594 4.21992188 16.89453125 4.4921875 C17.80050049 4.73308105 18.70646973 4.97397461 19.63989258 5.22216797 C22 6 22 6 25 8 C16.6284396 7.46288661 7.10565969 6.73710646 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#809A80\",transform:\"translate(230,157)\"})),_path1625||(_path1625=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-2.20611566 2.81898266 -4.4145834 3.63027543 -6.625 4.4375 C-8.46964844 5.11619141 -8.46964844 5.11619141 -10.3515625 5.80859375 C-13.62400568 6.87721813 -16.57019549 7.72340286 -20 8 C-20.66 7.34 -21.32 6.68 -22 6 C-18.8980736 4.9929564 -15.79311902 3.99559195 -12.6875 3 C-11.80642578 2.71382812 -10.92535156 2.42765625 -10.01757812 2.1328125 C-8.74624023 1.72675781 -8.74624023 1.72675781 -7.44921875 1.3125 C-6.27879028 0.93544922 -6.27879028 0.93544922 -5.0847168 0.55078125 C-3 0 -3 0 0 0 Z \",fill:\"#383334\",transform:\"translate(626,153)\"})),_path1626||(_path1626=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 1 4 2 6 3 C6 5.97 6 8.94 6 12 C3 11 3 11 1.3125 8.25 C0.06049331 5.14979295 -0.28970125 3.28328088 0 0 Z \",fill:\"#E3CDAB\",transform:\"translate(150,81)\"})),_path1627||(_path1627=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C0.73870384 2.86698825 -1.53265728 4.71841047 -3.8125 6.5625 C-4.45509766 7.09552734 -5.09769531 7.62855469 -5.75976562 8.17773438 C-6.38173828 8.67724609 -7.00371094 9.17675781 -7.64453125 9.69140625 C-8.21534424 10.15748291 -8.78615723 10.62355957 -9.37426758 11.10375977 C-9.91075928 11.39951904 -10.44725098 11.69527832 -11 12 C-11.99 11.67 -12.98 11.34 -14 11 C-14 10.01 -14 9.02 -14 8 C-13.34 8 -12.68 8 -12 8 C-12 7.34 -12 6.68 -12 6 C-10.948125 5.7525 -9.89625 5.505 -8.8125 5.25 C-5.16144011 4.23950464 -2.94303011 2.37077426 0 0 Z \",fill:\"#737B60\",transform:\"translate(526,68)\"})),_path1628||(_path1628=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.99 2 1.98 2 3 C2.66 3.33 3.32 3.66 4 4 C3.34 4 2.68 4 2 4 C2.47939368 8.71403788 2.96834048 12.66579301 5 17 C4.34 17 3.68 17 3 17 C2.67 17.99 2.34 18.98 2 20 C0.68 17.03 -0.64 14.06 -2 11 C-1.34 11 -0.68 11 0 11 C0 7.37 0 3.74 0 0 Z \",fill:\"#5A3B2E\",transform:\"translate(123,42)\"})),_path1629||(_path1629=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3 1 3 1 4 3 C3.9129796 4.71233688 3.75902838 6.42175406 3.5625 8.125 C3.46066406 9.03507812 3.35882813 9.94515625 3.25390625 10.8828125 C3.17011719 11.58148438 3.08632812 12.28015625 3 13 C2.34 13 1.68 13 1 13 C1 12.01 1 11.02 1 10 C0.34 10 -0.32 10 -1 10 C-0.67 6.7 -0.34 3.4 0 0 Z \",fill:\"#B68465\",transform:\"translate(120,40)\"})),_path1630||(_path1630=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C3.65 3.63 5.3 7.26 7 11 C4.69 11 2.38 11 0 11 C0 7.37 0 3.74 0 0 Z \",fill:\"#A1725A\",transform:\"translate(477,478)\"})),_path1631||(_path1631=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.33 0.66 0.66 1 1 C3.18292774 1.23481693 5.37203174 1.41363323 7.5625 1.5625 C8.76003906 1.64628906 9.95757812 1.73007812 11.19140625 1.81640625 C12.11824219 1.87699219 13.04507812 1.93757813 14 2 C14 2.33 14 2.66 14 3 C13.19175781 3.04898437 12.38351562 3.09796875 11.55078125 3.1484375 C10.48214844 3.22320312 9.41351563 3.29796875 8.3125 3.375 C6.72888672 3.47941406 6.72888672 3.47941406 5.11328125 3.5859375 C2.09322731 3.98760089 -0.24078054 4.74069019 -3 6 C-3 5.34 -3 4.68 -3 4 C-3.66 4 -4.32 4 -5 4 C-5 3.34 -5 2.68 -5 2 C-5.99 1.67 -6.98 1.34 -8 1 C-5.05549278 0.01849759 -3.06481021 -0.1613058 0 0 Z \",fill:\"#380C09\",transform:\"translate(373,474)\"})),_path1632||(_path1632=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.33 2.64 0.66 4 1 C3.34 1 2.68 1 2 1 C2 3.64 2 6.28 2 9 C1.34 9 0.68 9 0 9 C0 9.66 0 10.32 0 11 C-1.32 11 -2.64 11 -4 11 C-4 9.68 -4 8.36 -4 7 C-3.34 7 -2.68 7 -2 7 C-1.855625 6.21625 -1.71125 5.4325 -1.5625 4.625 C-1 2 -1 2 0 0 Z \",fill:\"#581723\",transform:\"translate(292,451)\"})),_path1633||(_path1633=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.00113594 1.48008696 9.32915597 3.6318336 13.875 6.125 C14.56335938 6.49753906 15.25171875 6.87007813 15.9609375 7.25390625 C17.64294798 8.16499526 19.32180436 9.08190315 21 10 C19 11 19 11 16.4375 10.375 C10.30164325 7.9206573 4.35289398 5.10991902 0 0 Z \",fill:\"#9B684C\",transform:\"translate(584,451)\"})),_path1634||(_path1634=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0 4.62 0 7 0 C7 0.99 7 1.98 7 3 C7.66 3 8.32 3 9 3 C9.33 2.01 9.66 1.02 10 0 C11.33332095 2.6666419 10.67102033 4.16680303 10 7 C8.35 7 6.7 7 5 7 C5 5.68 5 4.36 5 3 C3.35 3 1.7 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#652525\",transform:\"translate(437,453)\"})),_path1635||(_path1635=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4.268125 0.99 4.53625 1.98 4.8125 3 C5.976839 7.09612784 7.46711578 11.02843633 9 15 C7 15 7 15 4.875 13.1875 C3 11 3 11 3 8 C2.34 8 1.68 8 1 8 C1.020625 7.05125 1.04125 6.1025 1.0625 5.125 C1.22551826 2.09333717 1.22551826 2.09333717 0 0 Z \",fill:\"#F7A78D\",transform:\"translate(330,449)\"})),_path1636||(_path1636=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4 0.66 4 1.32 4 2 C6.64 2 9.28 2 12 2 C12 2.66 12 3.32 12 4 C13.98 4 15.96 4 18 4 C18 4.66 18 5.32 18 6 C10.62346781 5.24984418 3.32168224 4.16558465 -4 3 C-2.68 2.67 -1.36 2.34 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#D01929\",transform:\"translate(26,388)\"})),_path1637||(_path1637=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.33 0.99 -0.66 1.98 -1 3 C-6.94 3.33 -12.88 3.66 -19 4 C-16.37412094 1.37412094 -14.22718377 1.14221649 -10.625 0.3125 C-9.48289062 0.04050781 -8.34078125 -0.23148437 -7.1640625 -0.51171875 C-4.27019132 -0.95830381 -2.70183009 -0.99155833 0 0 Z \",fill:\"#182022\",transform:\"translate(97,349)\"})),_path1638||(_path1638=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.99 1.32 1.98 2 3 C2.66 2.34 3.32 1.68 4 1 C3.58846263 5.97093824 3.20399168 10.44508386 1 15 C-1 13 -1 13 -1.23046875 10.72265625 C-1.21628906 9.84480469 -1.20210937 8.96695312 -1.1875 8.0625 C-1.18105469 7.18722656 -1.17460938 6.31195313 -1.16796875 5.41015625 C-1 3 -1 3 0 0 Z \",fill:\"#DE9415\",transform:\"translate(52,347)\"})),_path1639||(_path1639=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.95 0 9.9 0 15 0 C15 0.33 15 0.66 15 1 C13.02 1.33 11.04 1.66 9 2 C11.97 2.495 11.97 2.495 15 3 C15 3.33 15 3.66 15 4 C10.38 4 5.76 4 1 4 C0.67 2.68 0.34 1.36 0 0 Z \",fill:\"#F3C09C\",transform:\"translate(335,333)\"})),_path1640||(_path1640=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-11.88 2.99 -11.88 2.99 -24 4 C-24 3.34 -24 2.68 -24 2 C-15.95072024 0.70098079 -8.16240568 -0.33853295 0 0 Z \",fill:\"#886B52\",transform:\"translate(24,328)\"})),_path1641||(_path1641=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.7517398 0.43197635 6.92000054 1.32769295 10 5 C5.32798795 6.20568053 0.78503708 6.09382426 -4 6 C-4 5.34 -4 4.68 -4 4 C-3.34 4 -2.68 4 -2 4 C-2 3.34 -2 2.68 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#1A201B\",transform:\"translate(82,322)\"})),_path1642||(_path1642=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C2.74080846 3.59364906 2.74080846 3.59364906 5 4 C7.25833663 4.83187521 9.50780715 5.68804479 11.75 6.5625 C13.50570313 7.24505859 13.50570313 7.24505859 15.296875 7.94140625 C16.18890625 8.29074219 17.0809375 8.64007813 18 9 C17.67 9.66 17.34 10.32 17 11 C14.7255757 10.6034029 12.45546748 10.18199381 10.1875 9.75 C8.92292969 9.51796875 7.65835937 9.2859375 6.35546875 9.046875 C3 8 3 8 1.05078125 6.140625 C0 4 0 4 0 0 Z \",fill:\"#5E6F42\",transform:\"translate(378,312)\"})),_path1643||(_path1643=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.67546875 0.20496094 1.3509375 0.40992188 2.046875 0.62109375 C2.93890625 0.89050781 3.8309375 1.15992188 4.75 1.4375 C5.63171875 1.70433594 6.5134375 1.97117187 7.421875 2.24609375 C9.60565835 2.88468494 11.78835498 3.46775833 14 4 C14 4.66 14 5.32 14 6 C12.41705218 6.05437607 10.83355744 6.09296271 9.25 6.125 C8.36828125 6.14820313 7.4865625 6.17140625 6.578125 6.1953125 C3.8864142 5.99139502 2.30095026 5.36551721 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#EBDDC4\",transform:\"translate(156,294)\"})),_path1644||(_path1644=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 1.98 1 3.96 1 6 C4.96 6 8.92 6 13 6 C13 6.33 13 6.66 13 7 C6.30324864 8.03026944 -0.2314676 8.10152799 -7 8 C-6.34 7.67 -5.68 7.34 -5 7 C-5 6.34 -5 5.68 -5 5 C-3.68 5 -2.36 5 -1 5 C-0.67 3.35 -0.34 1.7 0 0 Z \",fill:\"#2E622B\",transform:\"translate(95,284)\"})),_path1645||(_path1645=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.3 0 6.6 0 10 0 C10 1.98 10 3.96 10 6 C9.36191406 5.9278125 8.72382813 5.855625 8.06640625 5.78125 C7.24011719 5.6884375 6.41382813 5.595625 5.5625 5.5 C4.73878906 5.4071875 3.91507812 5.314375 3.06640625 5.21875 C1.5360501 5.05543721 1.5360501 5.05543721 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#080905\",transform:\"translate(476,277)\"})),_path1646||(_path1646=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.04159095 -0.0272616 4.08328963 -0.04651345 6.125 -0.0625 C7.26195312 -0.07410156 8.39890625 -0.08570313 9.5703125 -0.09765625 C12.8129156 -0.005327 15.81932612 0.38610094 19 1 C19 1.66 19 2.32 19 3 C16.77110504 3.05428973 14.54182529 3.09292338 12.3125 3.125 C10.45044922 3.15980469 10.45044922 3.15980469 8.55078125 3.1953125 C5.18762143 3.01032021 3.0014413 2.45767895 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#E2A384\",transform:\"translate(359,280)\"})),_path1647||(_path1647=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.17700355 4.60209225 0.10814567 6.78370866 -2 11 C-2 8.03 -2 5.06 -2 2 C-2.66 2 -3.32 2 -4 2 C-4 2.66 -4 3.32 -4 4 C-7.96 4 -11.92 4 -16 4 C-16 3.34 -16 2.68 -16 2 C-13.52093719 1.66587842 -11.04175822 1.33266565 -8.5625 1 C-7.85544922 0.90460938 -7.14839844 0.80921875 -6.41992188 0.7109375 C-1.11328125 0 -1.11328125 0 0 0 Z \",fill:\"#C86151\",transform:\"translate(205,275)\"})),_path1648||(_path1648=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C3.59162079 5.57067277 4.20674944 10.21101581 4 16 C3.01 16.33 2.02 16.66 1 17 C0.67 11.39 0.34 5.78 0 0 Z \",fill:\"#5C2F19\",transform:\"translate(530,264)\"})),_path1649||(_path1649=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.27 0.33 12.54 0.66 19 1 C19.33 1.99 19.66 2.98 20 4 C13.06697907 4.22731216 6.7831364 3.42002108 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#313532\",transform:\"translate(359,275)\"})),_path1650||(_path1650=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.99 2 1.98 2 3 C5.63 3 9.26 3 13 3 C13.33 3.66 13.66 4.32 14 5 C10.7 5 7.4 5 4 5 C4.33 5.99 4.66 6.98 5 8 C2 8 2 8 -0.1875 6.125 C-2 4 -2 4 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#76B57F\",transform:\"translate(467,267)\"})),_path1651||(_path1651=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.0209375 0.2165625 1.0209375 0.2165625 2.0625 0.4375 C5.36273082 1.06945909 8.67144426 1.54313941 12 2 C10.22555028 4.24606427 9.41647515 4.95081002 6.51953125 5.29296875 C5.17955078 5.24076172 5.17955078 5.24076172 3.8125 5.1875 C2.46091797 5.14689453 2.46091797 5.14689453 1.08203125 5.10546875 C0.39496094 5.07066406 -0.29210937 5.03585937 -1 5 C-1.33 4.01 -1.66 3.02 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#D8A083\",transform:\"translate(284,265)\"})),_path1652||(_path1652=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.33 2.64 0.66 4 1 C3.67 2.65 3.34 4.3 3 6 C3.66 6 4.32 6 5 6 C5.33 5.01 5.66 4.02 6 3 C6.66 4.65 7.32 6.3 8 8 C6.02 8.33 4.04 8.66 2 9 C1.67 7.35 1.34 5.7 1 4 C0.01 4 -0.98 4 -2 4 C-2 4.66 -2 5.32 -2 6 C-1.34 6.33 -0.68 6.66 0 7 C-0.66 7 -1.32 7 -2 7 C-2 7.66 -2 8.32 -2 9 C-2.66 8.67 -3.32 8.34 -4 8 C-3.67 6.35 -3.34 4.7 -3 3 C-2.01 3 -1.02 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#83503D\",transform:\"translate(179,259)\"})),_path1653||(_path1653=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.56454251 0.54339792 7.9728176 1.79463821 12 4 C12 4.66 12 5.32 12 6 C10.68 6 9.36 6 8 6 C9.32 6.99 10.64 7.98 12 9 C10.35 9 8.7 9 7 9 C6.731875 8.360625 6.46375 7.72125 6.1875 7.0625 C5.11332248 4.66868314 5.11332248 4.66868314 2 4 C2.33 3.67 2.66 3.34 3 3 C2.01 2.01 1.02 1.02 0 0 Z \",fill:\"#F0C895\",transform:\"translate(199,229)\"})),_path1654||(_path1654=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.8125 2.4375 -0.8125 2.4375 -2 5 C-5.21232125 6.07077375 -7.63937807 6 -11 6 C-11 4.35 -11 2.7 -11 1 C-7.26562152 0.12132271 -3.83225427 -0.08912219 0 0 Z \",fill:\"#1A1415\",transform:\"translate(610,224)\"})),_path1655||(_path1655=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3 5.95 3 10.9 3 16 C1.68 15.34 0.36 14.68 -1 14 C-0.67 9.38 -0.34 4.76 0 0 Z \",fill:\"#8E7C62\",transform:\"translate(116,188)\"})),_path1656||(_path1656=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.33333333 0 6.66666667 0 10 0 C10 0.66 10 1.32 10 2 C10.66 2.33 11.32 2.66 12 3 C10.54263913 3.19491452 9.08405407 3.38069358 7.625 3.5625 C6.81289062 3.66691406 6.00078125 3.77132812 5.1640625 3.87890625 C3 4 3 4 1 3 C1.33 4.32 1.66 5.64 2 7 C0.68 6.34 -0.64 5.68 -2 5 C-1.34 5 -0.68 5 0 5 C0 4.34 0 3.68 0 3 C-1.32 3.33 -2.64 3.66 -4 4 C-4.33 3.34 -4.66 2.68 -5 2 C-3.35 2 -1.7 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#74836B\",transform:\"translate(182,136)\"})),_path1657||(_path1657=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.4160446 1.27108636 6.35706208 2.73394747 9.390625 4.75 C10.18210937 5.2759375 10.97359375 5.801875 11.7890625 6.34375 C13.00722656 7.16359375 13.00722656 7.16359375 14.25 8 C15.07757813 8.5465625 15.90515625 9.093125 16.7578125 9.65625 C17.54414063 10.1821875 18.33046875 10.708125 19.140625 11.25 C19.85766602 11.72953125 20.57470703 12.2090625 21.31347656 12.703125 C23 14 23 14 24 16 C13.49090909 11.98181818 13.49090909 11.98181818 12 9 C9.48997524 7.39637307 6.91306625 5.95147884 4.3125 4.5 C2 3 2 3 0 0 Z \",fill:\"#2F1E14\",transform:\"translate(6,61)\"})),_path1658||(_path1658=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.47050781 0.40992188 0.94101562 0.81984375 1.42578125 1.2421875 C2.04839844 1.78101563 2.67101562 2.31984375 3.3125 2.875 C3.92738281 3.40867187 4.54226563 3.94234375 5.17578125 4.4921875 C7.13498212 6.1640447 7.13498212 6.1640447 10 8 C10 8.66 10 9.32 10 10 C10.66 10 11.32 10 12 10 C12 10.66 12 11.32 12 12 C8.0479482 11.41827275 5.77904947 9.44842259 2.75 6.9375 C1.85796875 6.20402344 0.9659375 5.47054687 0.046875 4.71484375 C-0.62859375 4.14894531 -1.3040625 3.58304688 -2 3 C-1.34 2.67 -0.68 2.34 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#694635\",transform:\"translate(592,535)\"})),_path1659||(_path1659=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C2.01 8.26 1.02 15.52 0 23 C-0.33 23 -0.66 23 -1 23 C-1.02714434 20.2915983 -1.04690846 17.58347279 -1.0625 14.875 C-1.07087891 14.11445312 -1.07925781 13.35390625 -1.08789062 12.5703125 C-1.10646509 8.2610356 -0.86117265 4.24483526 0 0 Z \",fill:\"#684A39\",transform:\"translate(269,530)\"})),_path1660||(_path1660=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C2.43638038 3.83797544 -0.02510083 6.1667627 -3 9 C-4.1446875 10.1446875 -4.1446875 10.1446875 -5.3125 11.3125 C-5.869375 11.869375 -6.42625 12.42625 -7 13 C-7.66 12.67 -8.32 12.34 -9 12 C-7.35 10.02 -5.7 8.04 -4 6 C-4.66 6 -5.32 6 -6 6 C-6 5.34 -6 4.68 -6 4 C-4.02 3.34 -2.04 2.68 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#472F24\",transform:\"translate(98,518)\"})),_path1661||(_path1661=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.26457031 0.04640625 2.52914062 0.0928125 3.83203125 0.140625 C5.74048828 0.19476563 5.74048828 0.19476563 7.6875 0.25 C9.15123047 0.31960938 9.15123047 0.31960938 10.64453125 0.390625 C10.31453125 1.050625 9.98453125 1.710625 9.64453125 2.390625 C7.32296528 2.79791728 4.98765255 3.13501177 2.64453125 3.390625 C4.95453125 3.720625 7.26453125 4.050625 9.64453125 4.390625 C9.64453125 4.720625 9.64453125 5.050625 9.64453125 5.390625 C4.19759811 5.48750721 -0.99451542 5.51924675 -6.35546875 4.390625 C-4.58051784 1.03867309 -3.85822213 0.44915275 0 0 Z \",fill:\"#1C0C09\",transform:\"translate(230.35546875,493.609375)\"})),_path1662||(_path1662=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.67224609 -0.00773437 1.34449219 -0.01546875 2.03710938 -0.0234375 C5.72172836 -0.00880148 7.29365148 0.15410098 10.4375 2.25 C10.4375 2.91 10.4375 3.57 10.4375 4.25 C3.1775 3.59 -4.0825 2.93 -11.5625 2.25 C-7.18011817 0.05880909 -4.83510373 -0.01890559 0 0 Z \",fill:\"#D17077\",transform:\"translate(253.5625,480.75)\"})),_path1663||(_path1663=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4 0.66 4 1.32 4 2 C4.66 2.33 5.32 2.66 6 3 C5.34 3 4.68 3 4 3 C4 3.66 4 4.32 4 5 C5.0209375 4.7215625 5.0209375 4.7215625 6.0625 4.4375 C9.57232191 3.91476057 12.52188063 4.38621423 16 5 C16 5.33 16 5.66 16 6 C14.67935547 6.09087891 14.67935547 6.09087891 13.33203125 6.18359375 C11.58986328 6.30927734 11.58986328 6.30927734 9.8125 6.4375 C8.66394531 6.51871094 7.51539063 6.59992188 6.33203125 6.68359375 C3.48401829 6.95403812 0.78789518 7.37521747 -2 8 C-1.01 7.67 -0.02 7.34 1 7 C0.67 4.69 0.34 2.38 0 0 Z \",fill:\"#D9AC92\",transform:\"translate(412,474)\"})),_path1664||(_path1664=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.21556431 0.8020083 12.76868433 3.28356534 17 8 C16.34 8.66 15.68 9.32 15 10 C11.7 8.35 8.4 6.7 5 5 C5 4.34 5 3.68 5 3 C2.525 2.01 2.525 2.01 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#88583F\",transform:\"translate(581,447)\"})),_path1665||(_path1665=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.75492877 1.52410941 5.80785724 3.77268765 8.4375 6.8125 C12.0785253 10.97797926 12.0785253 10.97797926 15.9375 14.9375 C18 17 18 17 20 20 C14.9066065 18.54340223 12.28236753 15.51547774 8.875 11.6875 C8.35035156 11.11837891 7.82570313 10.54925781 7.28515625 9.96289062 C4.43668403 6.82235987 2.03863423 3.74686912 0 0 Z \",fill:\"#97806C\",transform:\"translate(458,442)\"})),_path1666||(_path1666=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.10832169 2.08218362 1.18573541 4.16599129 1.25 6.25 C1.29640625 7.41015625 1.3428125 8.5703125 1.390625 9.765625 C1 13 1 13 -0.75 15.40625 C-4.30031984 17.92105989 -6.74546782 17.28363548 -11 17 C-9.18692264 13.37384528 -4.58648608 12.51541665 -1 11 C-0.67 7.37 -0.34 3.74 0 0 Z \",fill:\"#724331\",transform:\"translate(363,437)\"})),_path1667||(_path1667=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 5.28 2 10.56 2 16 C-1 14 -1 14 -1.58203125 11.50390625 C-1.65808594 10.53324219 -1.73414063 9.56257813 -1.8125 8.5625 C-1.90144531 7.59441406 -1.99039062 6.62632812 -2.08203125 5.62890625 C-2 3 -2 3 0 0 Z \",fill:\"#FB6F74\",transform:\"translate(328,430)\"})),_path1668||(_path1668=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.445 1.485 5.445 1.485 11 3 C11 3.66 11 4.32 11 5 C6.05 5 1.1 5 -4 5 C-4 4.01 -4 3.02 -4 2 C-2.68 1.67 -1.36 1.34 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#573B33\",transform:\"translate(389,422)\"})),_path1669||(_path1669=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.75570312 0.04060547 1.75570312 0.04060547 3.546875 0.08203125 C4.43890625 0.11683594 5.3309375 0.15164063 6.25 0.1875 C5.19921875 2.203125 5.19921875 2.203125 3.25 4.1875 C-0.10546875 4.359375 -0.10546875 4.359375 -3.9375 3.9375 C-5.20980469 3.80859375 -6.48210937 3.6796875 -7.79296875 3.546875 C-8.76878906 3.42828125 -9.74460937 3.3096875 -10.75 3.1875 C-7.26391463 -0.10012011 -4.6928191 -0.14078457 0 0 Z \",fill:\"#6A493A\",transform:\"translate(99.75,416.8125)\"})),_path1670||(_path1670=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.39064765 0.46767554 5.3446091 1.92912911 8 4 C-1.04028922 4.1723784 -9.98865693 3.6331684 -19 3 C-19 2.67 -19 2.34 -19 2 C-17.71222656 1.93941406 -16.42445313 1.87882812 -15.09765625 1.81640625 C-13.41925841 1.73201753 -11.74087364 1.6473687 -10.0625 1.5625 C-8.78729492 1.50352539 -8.78729492 1.50352539 -7.48632812 1.44335938 C-6.67744141 1.40146484 -5.86855469 1.35957031 -5.03515625 1.31640625 C-3.91185913 1.26141968 -3.91185913 1.26141968 -2.76586914 1.20532227 C-0.97538674 1.18228937 -0.97538674 1.18228937 0 0 Z \",fill:\"#0F0907\",transform:\"translate(363,400)\"})),_path1671||(_path1671=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.3 0 6.6 0 10 0 C10 0.33 10 0.66 10 1 C7.36 1 4.72 1 2 1 C2 1.99 2 2.98 2 4 C5.96 4.99 5.96 4.99 10 6 C6 7 6 7 4 6 C4 6.66 4 7.32 4 8 C6.31 8 8.62 8 11 8 C11 8.33 11 8.66 11 9 C3.25 9.125 3.25 9.125 1 8 C0.40644386 5.35139573 0.25790731 2.70802678 0 0 Z \",fill:\"#5B9265\",transform:\"translate(528,382)\"})),_path1672||(_path1672=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3 1 3 1 4 2.75 C4 5 4 5 1.6875 7.75 C-1 10 -1 10 -3 10 C-3.29296875 3.9453125 -3.29296875 3.9453125 -3 2 C-2.01 1.34 -1.02 0.68 0 0 Z \",fill:\"#D8383C\",transform:\"translate(345,365)\"})),_path1673||(_path1673=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C10.55808656 0.77904328 10.55808656 0.77904328 15 3 C15 3.33 15 3.66 15 4 C11.7 4 8.4 4 5 4 C4.67 4.66 4.34 5.32 4 6 C2.62437146 4.71034824 1.29233607 3.37310707 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#AA6E55\",transform:\"translate(598,328)\"})),_path1674||(_path1674=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.96 0 7.92 0 12 0 C10 2 10 2 7.8359375 2.1953125 C6.61777344 2.16050781 6.61777344 2.16050781 5.375 2.125 C4.55773437 2.10695313 3.74046875 2.08890625 2.8984375 2.0703125 C2.27195312 2.04710937 1.64546875 2.02390625 1 2 C1.33 4.31 1.66 6.62 2 9 C-2.25061356 10.41687119 -4.71851625 9.19320039 -9 8 C-5.5647952 5.70986347 -4.014669 5.82157027 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#14281F\",transform:\"translate(454,322)\"})),_path1675||(_path1675=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.3 0 6.6 0 10 0 C10 0.99 10 1.98 10 3 C12.97 3.495 12.97 3.495 16 4 C15.34 4.66 14.68 5.32 14 6 C11.1796875 5.5390625 11.1796875 5.5390625 7.875 4.625 C6.77929688 4.32851563 5.68359375 4.03203125 4.5546875 3.7265625 C3.71164062 3.48679687 2.86859375 3.24703125 2 3 C2 2.34 2 1.68 2 1 C1.34 0.67 0.68 0.34 0 0 Z \",fill:\"#242D1C\",transform:\"translate(380,325)\"})),_path1676||(_path1676=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.61 0 11.22 0 17 0 C17 0.99 17 1.98 17 3 C10.88514973 3.09706112 5.06696699 2.77040851 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#4B4139\",transform:\"translate(96,316)\"})),_path1677||(_path1677=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C3.58538318 2.51796153 4.0373656 3.67865586 3.6875 6.6875 C3 9 3 9 2 10 C0.48071962 10.07179964 -1.04167482 10.08392007 -2.5625 10.0625 C-3.38878906 10.05347656 -4.21507812 10.04445313 -5.06640625 10.03515625 C-5.70449219 10.02355469 -6.34257812 10.01195312 -7 10 C-7 9.34 -7 8.68 -7 8 C-4.36 8 -1.72 8 1 8 C0.649375 7.05125 0.29875 6.1025 -0.0625 5.125 C-1 2 -1 2 0 0 Z \",fill:\"#C6DFD8\",transform:\"translate(455,310)\"})),_path1678||(_path1678=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3 1.99 3 2.98 3 4 C4.32 4 5.64 4 7 4 C7.33 5.65 7.66 7.3 8 9 C5.69 9 3.38 9 1 9 C-1.125 2.25 -1.125 2.25 0 0 Z \",fill:\"#5D6F46\",transform:\"translate(241,309)\"})),_path1679||(_path1679=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.62490954 -0.02698189 3.24994633 -0.04638757 4.875 -0.0625 C5.77992188 -0.07410156 6.68484375 -0.08570313 7.6171875 -0.09765625 C10 0 10 0 12 1 C12 1.99 12 2.98 12 4 C12.66 4.33 13.32 4.66 14 5 C12.02 5 10.04 5 8 5 C8 5.66 8 6.32 8 7 C3.71 7 -0.58 7 -5 7 C-5 6.67 -5 6.34 -5 6 C-1.04 6 2.92 6 7 6 C7 5.34 7 4.68 7 4 C7.66 4 8.32 4 9 4 C8.34 3.34 7.68 2.68 7 2 C5.65938457 2.30271961 4.32594105 2.63837971 3 3 C2.01 2.67 1.02 2.34 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#8C6B53\",transform:\"translate(277,270)\"})),_path1680||(_path1680=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0.495 2.97 0.495 6 1 C6 2.98 6 4.96 6 7 C5.67 6.34 5.34 5.68 5 5 C4.34 5 3.68 5 3 5 C2.67 7.31 2.34 9.62 2 12 C0.02 12 -1.96 12 -4 12 C-2.68 11.67 -1.36 11.34 0 11 C0 7.37 0 3.74 0 0 Z \",fill:\"#E3C878\",transform:\"translate(224,269)\"})),_path1681||(_path1681=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.63 0 7.26 0 11 0 C11 1.32 11 2.64 11 4 C7.37 4 3.74 4 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#94AE7F\",transform:\"translate(438,269)\"})),_path1682||(_path1682=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.29 0 8.58 0 13 0 C12.01 0.33 11.02 0.66 10 1 C10 1.99 10 2.98 10 4 C6.7 4.66 3.4 5.32 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#E28E6A\",transform:\"translate(223,260)\"})),_path1683||(_path1683=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.99 0 1.98 0 3 C-0.99 3 -1.98 3 -3 3 C-3 3.66 -3 4.32 -3 5 C-5.97 5.66 -8.94 6.32 -12 7 C-12 6.01 -12 5.02 -12 4 C-8.24831884 1.21303685 -4.66263733 0 0 0 Z \",fill:\"#664B3F\",transform:\"translate(348,255)\"})),_path1684||(_path1684=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.33 0 0.66 0 1 C-3.3 1 -6.6 1 -10 1 C-10 1.66 -10 2.32 -10 3 C-13.96 3 -17.92 3 -22 3 C-21 1 -21 1 -19.1015625 0.33203125 C-12.49500128 -1.05388774 -6.67074251 -0.93846948 0 0 Z \",fill:\"#4F4131\",transform:\"translate(370,253)\"})),_path1685||(_path1685=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.99 0.495 -0.99 0.495 -2 1 C-2 1.66 -2 2.32 -2 3 C-3.55966218 3.508783 -5.12289241 4.00663469 -6.6875 4.5 C-7.99267578 4.91765625 -7.99267578 4.91765625 -9.32421875 5.34375 C-11.99391677 5.99850805 -14.26396684 6.11831495 -17 6 C-14.38058783 4.25372522 -12.96175123 3.61277612 -10 3 C-10 2.34 -10 1.68 -10 1 C-3.375 -1.125 -3.375 -1.125 0 0 Z \",fill:\"#292623\",transform:\"translate(484,213)\"})),_path1686||(_path1686=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C0.32164905 4.65288148 -0.87371725 5.92882245 -4.4375 7.9375 C-8 9 -8 9 -10.22265625 8.06640625 C-10.80917969 7.71449219 -11.39570313 7.36257812 -12 7 C-10.04754815 5.80285445 -8.08785003 4.61751926 -6.125 3.4375 C-5.03445313 2.77621094 -3.94390625 2.11492187 -2.8203125 1.43359375 C-1.88960938 0.96050781 -0.95890625 0.48742187 0 0 Z \",fill:\"#472A23\",transform:\"translate(376,208)\"})),_path1687||(_path1687=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2 6.61 2 12.22 2 18 C-1.3 17.01 -4.6 16.02 -8 15 C-8 14.67 -8 14.34 -8 14 C-5.36 14.33 -2.72 14.66 0 15 C0 10.05 0 5.1 0 0 Z \",fill:\"#BE9771\",transform:\"translate(87,176)\"})),_path1688||(_path1688=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.33 0.99 -0.66 1.98 -1 3 C-0.34 3.66 0.32 4.32 1 5 C0.39671875 5.19335938 -0.2065625 5.38671875 -0.828125 5.5859375 C-1.62734375 5.84632813 -2.4265625 6.10671875 -3.25 6.375 C-4.03890625 6.63023437 -4.8278125 6.88546875 -5.640625 7.1484375 C-8.01062976 7.94423259 -8.01062976 7.94423259 -10.15625 9.125 C-12 10 -12 10 -14.25 9.625 C-14.8275 9.41875 -15.405 9.2125 -16 9 C-15.0409375 8.443125 -15.0409375 8.443125 -14.0625 7.875 C-10.62021299 5.76747734 -7.30866888 3.50060994 -3.98828125 1.20703125 C-2 0 -2 0 0 0 Z \",fill:\"#2F1F1D\",transform:\"translate(463,188)\"})),_path1689||(_path1689=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.445 1.485 5.445 1.485 11 3 C10.01 3.495 10.01 3.495 9 4 C9.33 6.31 9.66 8.62 10 11 C7.95880212 9.38405168 5.95927063 7.7143618 4 6 C4 5.34 4 4.68 4 4 C3.34 4 2.68 4 2 4 C2 3.34 2 2.68 2 2 C1.34 2 0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#A4B795\",transform:\"translate(222,186)\"})),_path1690||(_path1690=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3 0.66 3 1.32 3 2 C0.95032466 3.72682185 -1.10116271 5.34312715 -3.25 6.9375 C-4.12978516 7.60168945 -4.12978516 7.60168945 -5.02734375 8.27929688 C-6.68044068 9.52562052 -8.33926934 10.76387607 -10 12 C-11.19882812 12.89912109 -11.19882812 12.89912109 -12.421875 13.81640625 C-12.94265625 14.20699219 -13.4634375 14.59757813 -14 15 C-14.66 14.67 -15.32 14.34 -16 14 C-15.0409375 13.5978125 -15.0409375 13.5978125 -14.0625 13.1875 C-11.66868314 12.11332248 -11.66868314 12.11332248 -11 9 C-6.54285714 5 -6.54285714 5 -4 5 C-3.67 4.01 -3.34 3.02 -3 2 C-2.01 2 -1.02 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#97A492\",transform:\"translate(428,144)\"})),_path1691||(_path1691=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.99 0 1.98 0 3 C-0.60328125 3.19335938 -1.2065625 3.38671875 -1.828125 3.5859375 C-2.62734375 3.84632813 -3.4265625 4.10671875 -4.25 4.375 C-5.03890625 4.63023437 -5.8278125 4.88546875 -6.640625 5.1484375 C-9.01062976 5.94423259 -9.01062976 5.94423259 -11.15625 7.125 C-13 8 -13 8 -15.25 7.625 C-15.8275 7.41875 -16.405 7.2125 -17 7 C-11.93891643 2.41339301 -6.82491248 0 0 0 Z \",fill:\"#312520\",transform:\"translate(585,145)\"})),_path1692||(_path1692=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3 1.32 3 2.64 3 4 C3.66 4 4.32 4 5 4 C5.33 5.98 5.66 7.96 6 10 C2.21479387 9.45925627 0.40822445 7.92427254 -2 5 C-2 4.01 -2 3.02 -2 2 C-1.34 1.67 -0.68 1.34 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#F56862\",transform:\"translate(141,124)\"})),_path1693||(_path1693=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3 1.32 3 2.64 3 4 C1.35 4 -0.3 4 -2 4 C-2 4.66 -2 5.32 -2 6 C-5.50776784 7.60355101 -8.14354879 8.22036864 -12 8 C-8.70219679 4.17454828 -5.59475151 2.82056192 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#0B0709\",transform:\"translate(623,120)\"})),_path1694||(_path1694=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.66 1.98 1.32 3 2 C3.29296875 5.2578125 3.29296875 5.2578125 3.1875 9.125 C3.14689453 11.04699219 3.14689453 11.04699219 3.10546875 13.0078125 C3.07066406 13.99523437 3.03585938 14.98265625 3 16 C1.35 16 -0.3 16 -2 16 C-1.34 15.67 -0.68 15.34 0 15 C0 10.05 0 5.1 0 0 Z \",fill:\"#5E422F\",transform:\"translate(143,68)\"})),_path1695||(_path1695=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.20626034 1.50223584 5.73900021 4.28550034 8 8 C6.375 8.8125 6.375 8.8125 4 9 C1.75390165 7.53181864 -0.02378677 5.84147142 -2 4 C-1.34 2.68 -0.68 1.36 0 0 Z \",fill:\"#F1CA8A\",transform:\"translate(121,66)\"})),_path1696||(_path1696=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.04119788 1.61594832 4.04072937 3.2856382 6 5 C6 5.66 6 6.32 6 7 C5.01 7 4.02 7 3 7 C3.33 8.65 3.66 10.3 4 12 C1.69 10.02 -0.62 8.04 -3 6 C-2.67 5.34 -2.34 4.68 -2 4 C-0.515 4.99 -0.515 4.99 1 6 C0.34 4.35 -0.32 2.7 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#261D1E\",transform:\"translate(57,64)\"})),_path1697||(_path1697=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C0.38989473 4.07376031 -2.53822271 6.76507069 -5.625 9.75 C-6.140625 10.25660156 -6.65625 10.76320313 -7.1875 11.28515625 C-8.45383339 12.52803902 -9.7263144 13.76465276 -11 15 C-11.66 14.67 -12.32 14.34 -13 14 C-9.82767331 8.58060857 -5.80502622 4.99136045 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#7D543F\",transform:\"translate(86,543)\"})),_path1698||(_path1698=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.4375 0.375 2.4375 0.375 5 1 C5.33 1.66 5.66 2.32 6 3 C5.34 3 4.68 3 4 3 C4 3.66 4 4.32 4 5 C4.99 5.33 5.98 5.66 7 6 C7.33 6.99 7.66 7.98 8 9 C-0.71428571 7.14285714 -0.71428571 7.14285714 -3 4 C-2.505 3.525625 -2.01 3.05125 -1.5 2.5625 C0.11542197 1.24076302 0.11542197 1.24076302 0 0 Z \",fill:\"#593B2F\",transform:\"translate(600,497)\"})),_path1699||(_path1699=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.125 -0.1875 3.125 -0.1875 6 0 C8 5.75 8 5.75 8 8 C5.36 8 2.72 8 0 8 C0 7.34 0 6.68 0 6 C1.32 5.67 2.64 5.34 4 5 C4 4.34 4 3.68 4 3 C2.02 3 0.04 3 -2 3 C-1.34 2.01 -0.68 1.02 0 0 Z \",fill:\"#88614E\",transform:\"translate(524,395)\"})),_path1700||(_path1700=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C1.32 2.33 2.64 2.66 4 3 C-4.42857143 5.42857143 -4.42857143 5.42857143 -9 4 C-9 3.01 -9 2.02 -9 1 C-5.8035914 -0.06546953 -3.34252724 -0.07427838 0 0 Z \",fill:\"#C5CF9C\",transform:\"translate(594,397)\"})),_path1701||(_path1701=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-1.8253125 2.2165625 -1.8253125 2.2165625 -3.6875 2.4375 C-9.90779669 2.91368877 -9.90779669 2.91368877 -15 6 C-15 5.34 -15 4.68 -15 4 C-15.66 4 -16.32 4 -17 4 C-17 3.34 -17 2.68 -17 2 C-11.35600642 -0.44064587 -6.02248522 -0.19289099 0 0 Z \",fill:\"#FC6851\",transform:\"translate(143,382)\"})),_path1702||(_path1702=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.61 0 11.22 0 17 0 C13.45429137 1.77285431 10.56675327 2.71229813 6.75 3.625 C5.13351562 4.01558594 5.13351562 4.01558594 3.484375 4.4140625 C2.66453125 4.60742188 1.8446875 4.80078125 1 5 C0.67 3.35 0.34 1.7 0 0 Z \",fill:\"#070703\",transform:\"translate(462,355)\"})),_path1703||(_path1703=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.70125 0.309375 1.4025 0.61875 2.125 0.9375 C5.08936657 2.03302678 7.87698108 2.56422992 11 3 C11 3.66 11 4.32 11 5 C14.96 5.33 18.92 5.66 23 6 C23 6.33 23 6.66 23 7 C6.1016369 7.56854306 6.1016369 7.56854306 1.25 3.55078125 C0 2 0 2 0 0 Z \",fill:\"#323320\",transform:\"translate(431,351)\"})),_path1704||(_path1704=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 2.31 1 4.62 1 7 C-3.50353262 8.75747614 -7.17639811 9.19294408 -12 9 C-8.74580276 5.23198214 -4.74726951 4.05494878 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#BF6A6C\",transform:\"translate(269,351)\"})),_path1705||(_path1705=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4.81487171 2.24916619 5.62696918 4.49926978 6.4375 6.75 C6.78264648 7.70132812 6.78264648 7.70132812 7.13476562 8.671875 C8.24244769 11.75412076 9.29661036 14.79836438 10 18 C7 17 7 17 5.8671875 14.890625 C5.37605469 13.58351563 5.37605469 13.58351563 4.875 12.25 C4.54242188 11.38890625 4.20984375 10.5278125 3.8671875 9.640625 C3.03382723 7.10300543 2.46319234 4.62790754 2 2 C1.34 2 0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#889463\",transform:\"translate(424,328)\"})),_path1706||(_path1706=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.16144531 0.00902344 2.32289063 0.01804687 3.51953125 0.02734375 C4.39996094 0.03894531 5.28039062 0.05054688 6.1875 0.0625 C6.1875 0.7225 6.1875 1.3825 6.1875 2.0625 C2.77990374 3.09136361 -0.3867238 3.22818934 -3.9375 3.25 C-4.99195313 3.26417969 -6.04640625 3.27835937 -7.1328125 3.29296875 C-9.8125 3.0625 -9.8125 3.0625 -11.8125 1.0625 C-7.81454108 0.10630267 -4.10446078 -0.0414592 0 0 Z \",fill:\"#EDE6D8\",transform:\"translate(133.8125,318.9375)\"})),_path1707||(_path1707=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 1.65 2 3.3 2 5 C1.34 5 0.68 5 0 5 C0 5.66 0 6.32 0 7 C0.66 7 1.32 7 2 7 C2 7.99 2 8.98 2 10 C-0.31 9.67 -2.62 9.34 -5 9 C-5.33 7.68 -5.66 6.36 -6 5 C-4.35 5 -2.7 5 -1 5 C-0.67 3.35 -0.34 1.7 0 0 Z \",fill:\"#B3C3A2\",transform:\"translate(480,311)\"})),_path1708||(_path1708=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.103125 0.639375 0.20625 1.27875 0.3125 1.9375 C0.6528125 2.9584375 0.6528125 2.9584375 1 4 C1.99 4.33 2.98 4.66 4 5 C2.38219843 6.61780157 0.54364482 6.22272147 -1.69140625 6.31640625 C-2.63564453 6.35830078 -3.57988281 6.40019531 -4.55273438 6.44335938 C-6.04256836 6.50233398 -6.04256836 6.50233398 -7.5625 6.5625 C-8.55958984 6.60568359 -9.55667969 6.64886719 -10.58398438 6.69335938 C-13.0558415 6.79980298 -15.5278031 6.90181928 -18 7 C-18.33 6.34 -18.66 5.68 -19 5 C-14.71 4.34 -10.42 3.68 -6 3 C-6 3.66 -6 4.32 -6 5 C-4.02 5 -2.04 5 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#4A7058\",transform:\"translate(422,311)\"})),_path1709||(_path1709=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.19406478 1.64507218 1.38007935 3.29109594 1.5625 4.9375 C1.66691406 5.85402344 1.77132812 6.77054687 1.87890625 7.71484375 C1.91886719 8.46894531 1.95882812 9.22304688 2 10 C0.34920558 11.65079442 -1.63736179 11.22549447 -3.91015625 11.31640625 C-5.39418945 11.37924805 -5.39418945 11.37924805 -6.90820312 11.44335938 C-8.46958008 11.50233398 -8.46958008 11.50233398 -10.0625 11.5625 C-11.62967773 11.62727539 -11.62967773 11.62727539 -13.22851562 11.69335938 C-15.81886884 11.79981225 -18.40932186 11.9018276 -21 12 C-21 11.34 -21 10.68 -21 10 C-11.1 9.505 -11.1 9.505 -1 9 C-1 6.36 -1 3.72 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#343029\",transform:\"translate(138,308)\"})),_path1710||(_path1710=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0 3.96 0 6 0 C6.33 1.98 6.66 3.96 7 6 C4.03 6 1.06 6 -2 6 C-1.34 4.02 -0.68 2.04 0 0 Z \",fill:\"#52523E\",transform:\"translate(342,266)\"})),_path1711||(_path1711=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 1.65 1 3.3 1 5 C2.32 5 3.64 5 5 5 C5 5.66 5 6.32 5 7 C5.66 7 6.32 7 7 7 C7 7.66 7 8.32 7 9 C4.36 9 1.72 9 -1 9 C-1 8.01 -1 7.02 -1 6 C-1.66 6 -2.32 6 -3 6 C-2.42655063 3.13275314 -2.1385485 2.1385485 0 0 Z \",fill:\"#A8735E\",transform:\"translate(203,259)\"})),_path1712||(_path1712=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0.66 3.96 1.32 6 2 C6.19622241 6.21878192 5.80230168 9.17010894 4 13 C3.01 12.67 2.02 12.34 1 12 C1 11.01 1 10.02 1 9 C0.84872598 7.43593472 0.68097478 5.87340748 0.5 4.3125 C0.4071875 3.50425781 0.314375 2.69601563 0.21875 1.86328125 C0.1465625 1.24839844 0.074375 0.63351563 0 0 Z \",fill:\"#784538\",transform:\"translate(50,240)\"})),_path1713||(_path1713=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C1.99 2 2.98 2 4 2 C4 2.66 4 3.32 4 4 C-3.68483539 4.67453101 -11.28410183 5.1567564 -19 5 C-19 4.67 -19 4.34 -19 4 C-12.53205867 2.48766299 -6.64409958 1.78567421 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#BEB69E\",transform:\"translate(339,234)\"})),_path1714||(_path1714=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1 2 -1 2 -4.23828125 3.10546875 C-5.59404331 3.47473728 -6.95227218 3.83503685 -8.3125 4.1875 C-9.32860352 4.47270508 -9.32860352 4.47270508 -10.36523438 4.76367188 C-13.86371107 5.69044331 -16.56663499 6.38570259 -20 5 C-19.01 5 -18.02 5 -17 5 C-17 4.34 -17 3.68 -17 3 C-11.17745757 1.03181664 -6.16618181 -0.40214229 0 0 Z \",fill:\"#589286\",transform:\"translate(562,195)\"})),_path1715||(_path1715=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-2.54472397 2.54472397 -4.9426047 3.24821556 -8.3125 4.5 C-9.44300781 4.9228125 -10.57351563 5.345625 -11.73828125 5.78125 C-13.35283203 6.38453125 -13.35283203 6.38453125 -15 7 C-16.35158203 7.60328125 -16.35158203 7.60328125 -17.73046875 8.21875 C-20 9 -20 9 -23 8 C-19.73638406 6.46331585 -16.46309912 4.94845148 -13.1875 3.4375 C-12.25873047 2.99986328 -11.32996094 2.56222656 -10.37304688 2.11132812 C-9.48037109 1.70205078 -8.58769531 1.29277344 -7.66796875 0.87109375 C-6.84578857 0.48880615 -6.0236084 0.10651855 -5.17651367 -0.28735352 C-3 -1 -3 -1 0 0 Z \",fill:\"#160C0D\",transform:\"translate(535,161)\"})),_path1716||(_path1716=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.99 2 1.98 2 3 C2.66 3 3.32 3 4 3 C4 4.65 4 6.3 4 8 C2.01432292 7.47916667 0.02864583 6.95833333 -1.95703125 6.4375 C-4.14070009 5.8952993 -4.14070009 5.8952993 -7 6 C-6.67 5.01 -6.34 4.02 -6 3 C-5.195625 2.87625 -4.39125 2.7525 -3.5625 2.625 C-2.716875 2.41875 -1.87125 2.2125 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#4C3126\",transform:\"translate(32,141)\"})),_path1717||(_path1717=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.375 0.6875 2.375 0.6875 5 2 C6.25 4.4375 6.25 4.4375 7 7 C7.33 7.99 7.66 8.98 8 10 C8.66 10 9.32 10 10 10 C9.67 11.32 9.34 12.64 9 14 C3.54080267 10.31135316 2.02644725 6.07934175 0 0 Z \",fill:\"#40533A\",transform:\"translate(119,126)\"})),_path1718||(_path1718=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.96873434 1.32291145 4.29905037 2.91149738 6.1875 6.5625 C6.71730469 7.57441406 7.24710937 8.58632813 7.79296875 9.62890625 C8.19128906 10.41136719 8.58960938 11.19382812 9 12 C8.34 12.66 7.68 13.32 7 14 C6.16121545 12.71186658 5.32913217 11.41936744 4.5 10.125 C4.0359375 9.40570312 3.571875 8.68640625 3.09375 7.9453125 C2 6 2 6 2 4 C1.34 4 0.68 4 0 4 C-0.33 4.66 -0.66 5.32 -1 6 C-1.625 4.125 -1.625 4.125 -2 2 C-1.34 1.34 -0.68 0.68 0 0 Z \",fill:\"#956446\",transform:\"translate(441,519)\"})),_path1719||(_path1719=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.598125 0.28875 -1.19625 0.5775 -1.8125 0.875 C-4.19327792 2.04742026 -4.19327792 2.04742026 -7 4 C-9.04296875 4.4140625 -9.04296875 4.4140625 -11.1875 4.625 C-12.445625 4.74875 -13.70375 4.8725 -15 5 C-15 4.34 -15 3.68 -15 3 C-15.66 2.34 -16.32 1.68 -17 1 C-11.33357449 -0.22517308 -5.76291482 -0.09228867 0 0 Z \",fill:\"#D26356\",transform:\"translate(433,483)\"})),_path1720||(_path1720=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.96 0.33 7.92 0.66 12 1 C12 1.99 12 2.98 12 4 C8.04 4 4.08 4 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#E43C4A\",transform:\"translate(190,474)\"})),_path1721||(_path1721=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.1026211 0.33903451 10.21906976 1.91690206 15.58984375 4.7890625 C18.67833711 6.34081767 21.64725273 7.19825609 25 8 C25 8.66 25 9.32 25 10 C21.51423718 9.38965243 18.4128077 8.48391539 15.13671875 7.15234375 C14.25048828 6.79462891 13.36425781 6.43691406 12.45117188 6.06835938 C11.53916016 5.69517578 10.62714844 5.32199219 9.6875 4.9375 C8.75615234 4.56044922 7.82480469 4.18339844 6.86523438 3.79492188 C4.57521083 2.86716875 2.28690004 1.93541999 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#6D4530\",transform:\"translate(601,440)\"})),_path1722||(_path1722=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C4.35439668 2.70879335 4.06501451 5.00933268 4 8 C2.02 8 0.04 8 -2 8 C-2.33 6.02 -2.66 4.04 -3 2 C-2.34 2 -1.68 2 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#1F1716\",transform:\"translate(361,417)\"})),_path1723||(_path1723=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.051875 0.70576172 1.051875 0.70576172 2.125 1.42578125 C7.63320451 5.04054046 12.72189521 7.98626827 19 10 C19 10.33 19 10.66 19 11 C13.29842321 11.56838149 9.90810804 9.74379841 5.125 7 C4.43664062 6.6184375 3.74828125 6.236875 3.0390625 5.84375 C1.35307255 4.90708892 -0.32436814 3.95506752 -2 3 C-1.34 2.01 -0.68 1.02 0 0 Z \",fill:\"#1E130E\",transform:\"translate(382,412)\"})),_path1724||(_path1724=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.66 2 1.32 2 2 C2.66 2 3.32 2 4 2 C4 3.32 4 4.64 4 6 C10.27 6 16.54 6 23 6 C23 6.33 23 6.66 23 7 C19.35418313 7.02887512 15.70839537 7.04675585 12.0625 7.0625 C10.50112305 7.07506836 10.50112305 7.07506836 8.90820312 7.08789062 C7.91884766 7.09111328 6.92949219 7.09433594 5.91015625 7.09765625 C4.53549194 7.10551147 4.53549194 7.10551147 3.13305664 7.11352539 C1 7 1 7 0 6 C-0.04080783 4.00041636 -0.04254356 1.99954746 0 0 Z \",fill:\"#932516\",transform:\"translate(302,416)\"})),_path1725||(_path1725=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.6 0 13.2 0 20 0 C20 0.99 20 1.98 20 3 C19.34 2.67 18.68 2.34 18 2 C13.85496339 1.75212983 13.85496339 1.75212983 10 3 C10 2.34 10 1.68 10 1 C9.34 1 8.68 1 8 1 C8 1.66 8 2.32 8 3 C2.25 4.125 2.25 4.125 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#A56557\",transform:\"translate(337,415)\"})),_path1726||(_path1726=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.10054603 0.25680094 12.09755529 0.93387143 18 5 C18 5.66 18 6.32 18 7 C15.03 6.505 15.03 6.505 12 6 C11.67 5.01 11.34 4.02 11 3 C7.37 2.67 3.74 2.34 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#A49A56\",transform:\"translate(454,393)\"})),_path1727||(_path1727=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.33 0 0.66 0 1 C-4.455 1.495 -4.455 1.495 -9 2 C-7.35 2 -5.7 2 -4 2 C-4 2.66 -4 3.32 -4 4 C-6.29141286 4.05384521 -8.58318188 4.09272087 -10.875 4.125 C-12.78925781 4.15980469 -12.78925781 4.15980469 -14.7421875 4.1953125 C-18 4 -18 4 -20 2 C-13.1834265 0.2120463 -7.03482474 -0.23668569 0 0 Z \",fill:\"#B9BAA4\",transform:\"translate(580,376)\"})),_path1728||(_path1728=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.06892629 -0.25287193 11.16200408 0.30167391 17 2 C17 2.66 17 3.32 17 4 C15.10388566 3.85786703 13.20811606 3.71113093 11.3125 3.5625 C10.25675781 3.48128906 9.20101562 3.40007812 8.11328125 3.31640625 C5.34913703 3.03548319 2.71054259 2.59843148 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#AB7257\",transform:\"translate(609,369)\"})),_path1729||(_path1729=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3 3.3 3 6.6 3 10 C3.66 10.33 4.32 10.66 5 11 C2.36 11.33 -0.28 11.66 -3 12 C-3 11.34 -3 10.68 -3 10 C-2.01 10 -1.02 10 0 10 C0 6.7 0 3.4 0 0 Z \",fill:\"#1F1512\",transform:\"translate(149,368)\"})),_path1730||(_path1730=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C12.66970387 0.96355353 12.66970387 0.96355353 18 2 C18.33 3.32 18.66 4.64 19 6 C12.73 4.68 6.46 3.36 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#824F3E\",transform:\"translate(535,362)\"})),_path1731||(_path1731=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 3.96 1 7.92 1 12 C2.32 12.33 3.64 12.66 5 13 C5.33 12.01 5.66 11.02 6 10 C6.33 10.66 6.66 11.32 7 12 C5.86695008 15.39914975 4.87481525 16.05254451 2 18 C1.34 17.67 0.68 17.34 0 17 C-0.37890625 14.8203125 -0.37890625 14.8203125 -0.5625 12.125 C-0.77628346 9.13203161 -1.04428957 6.8671313 -2 4 C-1.34 4 -0.68 4 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#5A5932\",transform:\"translate(46,335)\"})),_path1732||(_path1732=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 1.32 0 2.64 0 4 C-3.96 4 -7.92 4 -12 4 C-12.33 4.99 -12.66 5.98 -13 7 C-13.33 5.68 -13.66 4.36 -14 3 C-9.03006806 0.56574762 -5.65394631 -0.34615998 0 0 Z \",fill:\"#776F69\",transform:\"translate(310,338)\"})),_path1733||(_path1733=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.7936743 1.1217963 3.5848773 2.24754483 5.375 3.375 C6.37273437 4.00148438 7.37046875 4.62796875 8.3984375 5.2734375 C11 7 11 7 13 9 C12.01 9.495 12.01 9.495 11 10 C9.66666667 9.33333333 8.33333333 8.66666667 7 8 C5.68 8 4.36 8 3 8 C3 6.68 3 5.36 3 4 C1.68 4 0.36 4 -1 4 C-0.67 2.68 -0.34 1.36 0 0 Z \",fill:\"#131111\",transform:\"translate(139,336)\"})),_path1734||(_path1734=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.875 0.875 3.875 0.875 5 2 C5.04063832 3.66617115 5.042721 5.33388095 5 7 C7.31 7 9.62 7 12 7 C12 7.33 12 7.66 12 8 C0.47835991 8.18451025 0.47835991 8.18451025 -5 7 C-5 6.67 -5 6.34 -5 6 C-2.69 6 -0.38 6 2 6 C1.34 4.02 0.68 2.04 0 0 Z \",fill:\"#A7AA77\",transform:\"translate(433,322)\"})),_path1735||(_path1735=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.33 0 0.66 0 1 C-2.31 1 -4.62 1 -7 1 C-7.10957031 1.63808594 -7.21914063 2.27617187 -7.33203125 2.93359375 C-7.49058594 3.75988281 -7.64914062 4.58617187 -7.8125 5.4375 C-7.96332031 6.26121094 -8.11414063 7.08492188 -8.26953125 7.93359375 C-8.51058594 8.61550781 -8.75164062 9.29742187 -9 10 C-9.99 10.33 -10.98 10.66 -12 11 C-12.33 11.66 -12.66 12.32 -13 13 C-13 10.36 -13 7.72 -13 5 C-12.01 5.495 -12.01 5.495 -11 6 C-11 4.68 -11 3.36 -11 2 C-8.51138338 -2.51061762 -4.32701402 -0.78028122 0 0 Z \",fill:\"#212B27\",transform:\"translate(470,299)\"})),_path1736||(_path1736=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.3 0 6.6 0 10 0 C10 0.99 10 1.98 10 3 C10.99 2.67 11.98 2.34 13 2 C13 2.66 13 3.32 13 4 C13.99 4.33 14.98 4.66 16 5 C12.7 5 9.4 5 6 5 C6 4.34 6 3.68 6 3 C5.01 3 4.02 3 3 3 C3 2.34 3 1.68 3 1 C2.01 0.67 1.02 0.34 0 0 Z \",fill:\"#764A38\",transform:\"translate(139,293)\"})),_path1737||(_path1737=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0 4.62 0 7 0 C7 5.28 7 10.56 7 16 C3.96582331 11.95443108 3.59473757 10.99159125 3.3125 6.25 C3.24675781 5.26515625 3.18101562 4.2803125 3.11328125 3.265625 C3.07589844 2.51796875 3.03851562 1.7703125 3 1 C2.01 0.67 1.02 0.34 0 0 Z \",fill:\"#633211\",transform:\"translate(598,258)\"})),_path1738||(_path1738=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.66 0.66 3.32 1.32 4 2 C4.66 1.34 5.32 0.68 6 0 C6.33 0.99 6.66 1.98 7 3 C6.34 3 5.68 3 5 3 C5 3.66 5 4.32 5 5 C5.99 5.33 6.98 5.66 8 6 C8 6.99 8 7.98 8 9 C6.68 9.33 5.36 9.66 4 10 C4 9.34 4 8.68 4 8 C3.34 8 2.68 8 2 8 C1.34 5.36 0.68 2.72 0 0 Z \",fill:\"#AA6452\",transform:\"translate(157,250)\"})),_path1739||(_path1739=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C0.66 2.33 1.32 2.66 2 3 C2.625 5.0625 2.625 5.0625 3 7 C2.01 7.33 1.02 7.66 0 8 C-0.33 7.01 -0.66 6.02 -1 5 C-1.99 5.33 -2.98 5.66 -4 6 C-4.66 5.67 -5.32 5.34 -6 5 C-6 3.68 -6 2.36 -6 1 C-3.92446352 0.4465236 -2.15634036 0 0 0 Z \",fill:\"#643828\",transform:\"translate(25,244)\"})),_path1740||(_path1740=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4.33 0.99 4.66 1.98 5 3 C7.31 3 9.62 3 12 3 C8.4602993 5.35980046 6.00893712 5.58600808 1.8125 6.125 C0.54019531 6.29257813 -0.73210937 6.46015625 -2.04296875 6.6328125 C-3.01878906 6.75398437 -3.99460937 6.87515625 -5 7 C-4.67 6.01 -4.34 5.02 -4 4 C-2.02 4 -0.04 4 2 4 C2 3.34 2 2.68 2 2 C1.34 2 0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#4A4C40\",transform:\"translate(431,232)\"})),_path1741||(_path1741=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3 1.66 3 2.32 3 3 C4.65 2.67 6.3 2.34 8 2 C7.67 2.99 7.34 3.98 7 5 C6.06027344 4.98259766 6.06027344 4.98259766 5.1015625 4.96484375 C3.87566406 4.95130859 3.87566406 4.95130859 2.625 4.9375 C1.40683594 4.92009766 1.40683594 4.92009766 0.1640625 4.90234375 C-2.04937142 4.85533666 -2.04937142 4.85533666 -4 6 C-4 5.34 -4 4.68 -4 4 C-5.65 4.66 -7.3 5.32 -9 6 C-9.33 4.68 -9.66 3.36 -10 2 C-3.25 1.875 -3.25 1.875 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#5B2B2A\",transform:\"translate(18,228)\"})),_path1742||(_path1742=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2 1.66 2 2.32 2 3 C-7.9 5.97 -7.9 5.97 -18 9 C-18.66 8.34 -19.32 7.68 -20 7 C-18.97519531 6.66226563 -17.95039063 6.32453125 -16.89453125 5.9765625 C-15.53382737 5.5261226 -14.17315178 5.07559724 -12.8125 4.625 C-12.13896484 4.40328125 -11.46542969 4.1815625 -10.77148438 3.953125 C-7.84436625 2.9821785 -4.97269436 1.98830291 -2.13671875 0.7734375 C-1.07904297 0.39058594 -1.07904297 0.39058594 0 0 Z \",fill:\"#372B2A\",transform:\"translate(525,186)\"})),_path1743||(_path1743=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.75390625 1.109375 1.75390625 1.109375 3.5625 2.75 C4.16191406 3.28109375 4.76132813 3.8121875 5.37890625 4.359375 C7 6 7 6 9 9 C7.02 9 5.04 9 3 9 C2.67 7.35 2.34 5.7 2 4 C0.02 4.33 -1.96 4.66 -4 5 C-3.6875 3.0625 -3.6875 3.0625 -3 1 C-2.01 0.67 -1.02 0.34 0 0 Z \",fill:\"#301D15\",transform:\"translate(208,176)\"})),_path1744||(_path1744=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.27 0 12.54 0 19 0 C19 0.66 19 1.32 19 2 C17.35 2.66 15.7 3.32 14 4 C14 3.34 14 2.68 14 2 C9.31469272 1.83903853 9.31469272 1.83903853 4.75 2.6875 C4.1725 2.790625 3.595 2.89375 3 3 C2.01 2.01 1.02 1.02 0 0 Z \",fill:\"#93A890\",transform:\"translate(402,172)\"})),_path1745||(_path1745=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-6.93966753 4.62644502 -16.78323488 5.49300591 -25 5 C-22.09009069 2.09009069 -18.66646801 2.02006532 -14.75 1.375 C-13.99847656 1.2409375 -13.24695313 1.106875 -12.47265625 0.96875 C-8.26568764 0.24923355 -4.28514169 -0.15011643 0 0 Z \",fill:\"#97A98E\",transform:\"translate(367,161)\"})),_path1746||(_path1746=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.5 1.796875 -0.5 1.796875 -2 4 C-4.55429198 5.39630555 -7.25119124 6.3081005 -10 7.25 C-11.10601563 7.6521875 -11.10601563 7.6521875 -12.234375 8.0625 C-17.65146684 10 -17.65146684 10 -20 10 C-20 9.34 -20 8.68 -20 8 C-18.06532058 7.16013916 -16.12714871 6.32831973 -14.1875 5.5 C-13.10855469 5.0359375 -12.02960937 4.571875 -10.91796875 4.09375 C-8 3 -8 3 -5 3 C-5 2.34 -5 1.68 -5 1 C-2 0 -2 0 0 0 Z \",fill:\"#11090B\",transform:\"translate(556,150)\"})),_path1747||(_path1747=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-3.26264139 1.70370011 -6.53627473 3.38509062 -9.8125 5.0625 C-10.74126953 5.54783203 -11.67003906 6.03316406 -12.62695312 6.53320312 C-13.51962891 6.98759766 -14.41230469 7.44199219 -15.33203125 7.91015625 C-16.15421143 8.33433838 -16.9763916 8.75852051 -17.82348633 9.19555664 C-20 10 -20 10 -23 9 C-20.61519097 5.42278646 -19.37832623 5.51989491 -15.36328125 4.67578125 C-11.70151195 3.62869681 -8.51405913 1.77314128 -5.19921875 -0.07421875 C-3 -1 -3 -1 0 0 Z \",fill:\"#463735\",transform:\"translate(572,131)\"})),_path1748||(_path1748=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.33 2.64 0.66 4 1 C1.40163864 2.36645701 -1.20265556 3.71830669 -3.8125 5.0625 C-4.91948242 5.64741211 -4.91948242 5.64741211 -6.04882812 6.24414062 C-6.76103516 6.60830078 -7.47324219 6.97246094 -8.20703125 7.34765625 C-8.8616333 7.68804932 -9.51623535 8.02844238 -10.19067383 8.37915039 C-12 9 -12 9 -15 8 C-6.53756416 1.13345777 -6.53756416 1.13345777 -2 1 C-1.34 1.33 -0.68 1.66 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#0C1715\",transform:\"translate(614,100)\"})),_path1749||(_path1749=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1 2 1 2 0.07421875 4.78515625 C-0.38339844 5.86667969 -0.84101563 6.94820312 -1.3125 8.0625 C-1.76238281 9.14660156 -2.21226562 10.23070312 -2.67578125 11.34765625 C-4 14 -4 14 -6 15 C-6 14.01 -6 13.02 -6 12 C-6.99 12.495 -6.99 12.495 -8 13 C-7.34 11.02 -6.68 9.04 -6 7 C-5.34 7 -4.68 7 -4 7 C-3.71125 6.21625 -3.4225 5.4325 -3.125 4.625 C-2 2 -2 2 0 0 Z \",fill:\"#54362A\",transform:\"translate(139,548)\"})),_path1750||(_path1750=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.65396407 0.61178756 5.86042559 2.1664456 8.75 4.4375 C9.54921875 5.05496094 10.3484375 5.67242188 11.171875 6.30859375 C12.07679688 7.14583984 12.07679688 7.14583984 13 8 C13 8.66 13 9.32 13 10 C8.53565783 9.1051649 5.40922436 6.95408861 2 4 C0.5625 1.6875 0.5625 1.6875 0 0 Z \",fill:\"#6A4330\",transform:\"translate(569,507)\"})),_path1751||(_path1751=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.19882812 0.07250977 1.19882812 0.07250977 2.421875 0.14648438 C3.246875 0.20255859 4.071875 0.25863281 4.921875 0.31640625 C5.76234375 0.36861328 6.6028125 0.42082031 7.46875 0.47460938 C9.5368102 0.60386314 11.6043972 0.74064899 13.671875 0.87890625 C13.671875 1.20890625 13.671875 1.53890625 13.671875 1.87890625 C12.92421875 1.93949219 12.1765625 2.00007813 11.40625 2.0625 C10.42140625 2.14628906 9.4365625 2.23007812 8.421875 2.31640625 C7.44734375 2.39761719 6.4728125 2.47882813 5.46875 2.5625 C2.77492312 2.79319634 2.77492312 2.79319634 0.640625 3.44140625 C-1.88851919 4.00343829 -4.01196926 3.74529311 -6.578125 3.44140625 C-7.47015625 3.33957031 -8.3621875 3.23773438 -9.28125 3.1328125 C-9.95671875 3.04902344 -10.6321875 2.96523438 -11.328125 2.87890625 C-7.39139882 0.25442213 -4.66557824 -0.29993003 0 0 Z \",fill:\"#10110F\",transform:\"translate(340.328125,506.12109375)\"})),_path1752||(_path1752=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.3 0.33 6.6 0.66 10 1 C10 1.33 10 1.66 10 2 C15.94 2.33 21.88 2.66 28 3 C28.33 3.66 28.66 4.32 29 5 C25.1030865 4.94803518 21.20837414 4.85293522 17.3125 4.75 C16.20970703 4.73582031 15.10691406 4.72164063 13.97070312 4.70703125 C5.7317694 4.45812087 5.7317694 4.45812087 1.73046875 1.953125 C1.15941406 1.30859375 0.58835937 0.6640625 0 0 Z \",fill:\"#432928\",transform:\"translate(266,498)\"})),_path1753||(_path1753=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0.33 3.3 0.66 5 1 C5.33 2.65 5.66 4.3 6 6 C5.34 6 4.68 6 4 6 C4 6.66 4 7.32 4 8 C0.7 8 -2.6 8 -6 8 C-6 7.34 -6 6.68 -6 6 C-2.78548731 4.39274365 0.43612536 4.94251815 4 5 C4 4.01 4 3.02 4 2 C2.68 2 1.36 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#7B0515\",transform:\"translate(318,480)\"})),_path1754||(_path1754=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 2.64 0 5.28 0 8 C-5.53846154 7.38461538 -5.53846154 7.38461538 -7.875 5.4375 C-8.24625 4.963125 -8.6175 4.48875 -9 4 C-7.35 4 -5.7 4 -4 4 C-4 3.01 -4 2.02 -4 1 C-2 0 -2 0 0 0 Z \",fill:\"#EFDAC8\",transform:\"translate(324,470)\"})),_path1755||(_path1755=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C1.8863485 2.62594784 1.75960946 5.25011547 1.625 7.875 C1.5940625 8.62136719 1.563125 9.36773437 1.53125 10.13671875 C1.2265625 15.7734375 1.2265625 15.7734375 -1 18 C-1.22119939 15.37549914 -1.42746669 12.75129514 -1.625 10.125 C-1.68945312 9.37863281 -1.75390625 8.63226563 -1.8203125 7.86328125 C-1.96087365 5.9129953 -1.98759849 3.95530533 -2 2 C-1.34 1.34 -0.68 0.68 0 0 Z \",fill:\"#D51F26\",transform:\"translate(161,454)\"})),_path1756||(_path1756=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.96 0 7.92 0 12 0 C12 0.99 12 1.98 12 3 C9.24921116 3.91692961 7.64051087 4.10886083 4.8125 4.0625 C2.9253125 4.0315625 2.9253125 4.0315625 1 4 C0.67 2.68 0.34 1.36 0 0 Z \",fill:\"#DB2637\",transform:\"translate(315,448)\"})),_path1757||(_path1757=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4 0.99 4 1.98 4 3 C7.96 3.33 11.92 3.66 16 4 C16 4.33 16 4.66 16 5 C15.09636719 5.04898437 14.19273437 5.09796875 13.26171875 5.1484375 C12.08222656 5.22320312 10.90273438 5.29796875 9.6875 5.375 C7.92986328 5.47941406 7.92986328 5.47941406 6.13671875 5.5859375 C2.84300113 5.78613747 2.84300113 5.78613747 0 8 C-0.99 8 -1.98 8 -3 8 C-3 7.34 -3 6.68 -3 6 C-1.68 5.34 -0.36 4.68 1 4 C0.67 2.68 0.34 1.36 0 0 Z \",fill:\"#80513A\",transform:\"translate(389,437)\"})),_path1758||(_path1758=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C-8.09433962 8.54716981 -8.09433962 8.54716981 -13 11 C-13.99 10.67 -14.98 10.34 -16 10 C-12.375 7 -12.375 7 -9 7 C-9 6.34 -9 5.68 -9 5 C-8.071875 4.54625 -7.14375 4.0925 -6.1875 3.625 C-2.96078611 2.0578367 -2.96078611 2.0578367 0 0 Z \",fill:\"#784F3E\",transform:\"translate(91,435)\"})),_path1759||(_path1759=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.71599191 -0.20086443 4.77208445 -0.1519437 8 2 C8 3.32 8 4.64 8 6 C1.84765625 5.4140625 1.84765625 5.4140625 0 5 C-0.33 4.34 -0.66 3.68 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#2C3232\",transform:\"translate(280,415)\"})),_path1760||(_path1760=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.33 0 0.66 0 1 C-1.98 1 -3.96 1 -6 1 C-6 1.66 -6 2.32 -6 3 C-2.7 3 0.6 3 4 3 C0.00889681 4.9955516 -1.69986566 5.19546065 -6 5 C-6 5.99 -6 6.98 -6 8 C-6.66 7.67 -7.32 7.34 -8 7 C-8 5.35 -8 3.7 -8 2 C-9.98 2 -11.96 2 -14 2 C-14 1.67 -14 1.34 -14 1 C-9.27685687 0.22887459 -4.78478822 -0.09764874 0 0 Z \",fill:\"#46160F\",transform:\"translate(128,400)\"})),_path1761||(_path1761=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C3.34 1.98 2.68 3.96 2 6 C0.35 6.33 -1.3 6.66 -3 7 C-3 7.66 -3 8.32 -3 9 C-3.99 9 -4.98 9 -6 9 C-4.46782946 5.55261628 -2.59429556 2.74690118 0 0 Z \",fill:\"#D0170C\",transform:\"translate(124,386)\"})),_path1762||(_path1762=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.45922693 0.11409593 2.91740598 0.24165544 4.375 0.375 C5.59316406 0.47941406 5.59316406 0.47941406 6.8359375 0.5859375 C9 1 9 1 11 3 C11 3.99 11 4.98 11 6 C7.37 5.67 3.74 5.34 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#1B2422\",transform:\"translate(43,379)\"})),_path1763||(_path1763=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.27875 0.103125 2.5575 0.20625 3.875 0.3125 C4.95394531 0.39951172 4.95394531 0.39951172 6.0546875 0.48828125 C8 1 8 1 10 4 C4.72 4 -0.56 4 -6 4 C-5.67 3.34 -5.34 2.68 -5 2 C-3.35 2 -1.7 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#E76254\",transform:\"translate(358,360)\"})),_path1764||(_path1764=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 1.485 0.99 1.485 2 3 C2.66 2.67 3.32 2.34 4 2 C4 3.98 4 5.96 4 8 C4.66 8.33 5.32 8.66 6 9 C3.03 11.475 3.03 11.475 0 14 C0 9.38 0 4.76 0 0 Z \",fill:\"#190F0E\",transform:\"translate(212,348)\"})),_path1765||(_path1765=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4.33 1.98 4.66 3.96 5 6 C5.66 6 6.32 6 7 6 C7 6.66 7 7.32 7 8 C7.66 8 8.32 8 9 8 C9 8.66 9 9.32 9 10 C7.02 9.34 5.04 8.68 3 8 C3 7.34 3 6.68 3 6 C2.01 5.67 1.02 5.34 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#B3DAAC\",transform:\"translate(503,342)\"})),_path1766||(_path1766=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 3.41099168 -0.49145406 6.63088314 -1 10 C-0.34 10 0.32 10 1 10 C1 9.34 1 8.68 1 8 C1.66 8.33 2.32 8.66 3 9 C2.01 11.31 1.02 13.62 0 16 C-0.66 16 -1.32 16 -2 16 C-4.01572036 11.96855928 -3.39099044 7.22510337 -2.0625 3.0625 C-1 1 -1 1 0 0 Z \",fill:\"#C9C28F\",transform:\"translate(51,332)\"})),_path1767||(_path1767=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.27388024 -0.50227431 7.91015695 0.67105798 12 4 C12.33 4.99 12.66 5.98 13 7 C10.0625 6.625 10.0625 6.625 7 6 C6.67 5.34 6.34 4.68 6 4 C4.02111039 3.27306096 2.02045442 2.60183749 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#A0C49D\",transform:\"translate(420,319)\"})),_path1768||(_path1768=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.35191406 0.96679688 0.35191406 0.96679688 0.7109375 1.953125 C1.81161073 4.2077908 1.81161073 4.2077908 4.1640625 4.609375 C4.97617188 4.65578125 5.78828125 4.7021875 6.625 4.75 C7.85089844 4.83507812 7.85089844 4.83507812 9.1015625 4.921875 C9.72804687 4.94765625 10.35453125 4.9734375 11 5 C11 5.99 11 6.98 11 8 C6.71 7.67 2.42 7.34 -2 7 C-2 6.34 -2 5.68 -2 5 C-2.66 5 -3.32 5 -4 5 C-4.33 5.66 -4.66 6.32 -5 7 C-5 6.01 -5 5.02 -5 4 C-3.35 4 -1.7 4 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#4C0C0B\",transform:\"translate(177,312)\"})),_path1769||(_path1769=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0.495 1.98 0.495 4 1 C3.67 1.99 3.34 2.98 3 4 C4.134375 4.12375 5.26875 4.2475 6.4375 4.375 C7.613125 4.58125 8.78875 4.7875 10 5 C10.33 5.66 10.66 6.32 11 7 C7.04 7 3.08 7 -1 7 C-0.67 4.69 -0.34 2.38 0 0 Z \",fill:\"#180A08\",transform:\"translate(127,311)\"})),_path1770||(_path1770=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.99 0.33 -1.98 0.66 -3 1 C-3 1.99 -3 2.98 -3 4 C-6.96 4 -10.92 4 -15 4 C-15 3.01 -15 2.02 -15 1 C-13.43784452 0.83013455 -11.8752548 0.66426036 -10.3125 0.5 C-9.44238281 0.4071875 -8.57226562 0.314375 -7.67578125 0.21875 C-5.10276661 0.00840136 -2.58015636 -0.03719144 0 0 Z \",fill:\"#A17F7A\",transform:\"translate(111,305)\"})),_path1771||(_path1771=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.33 1.32 -0.66 2.64 -1 4 C-6.22512279 5.46670113 -10.5814234 6.22577402 -16 6 C-13.63224279 3.63224279 -11.70288662 3.00103504 -8.5625 1.875 C-7.59441406 1.52179688 -6.62632812 1.16859375 -5.62890625 0.8046875 C-3 0 -3 0 0 0 Z \",fill:\"#F6D6B0\",transform:\"translate(252,275)\"})),_path1772||(_path1772=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C5 1.32 5 2.64 5 4 C3.68 4 2.36 4 1 4 C1 4.66 1 5.32 1 6 C-0.98 6.33 -2.96 6.66 -5 7 C-5 5.35 -5 3.7 -5 2 C-3.68 2 -2.36 2 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#EBD79A\",transform:\"translate(241,270)\"})),_path1773||(_path1773=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.86323318 0.25288812 3.71708432 0.57690153 5.5625 0.9375 C6.57441406 1.13214844 7.58632812 1.32679688 8.62890625 1.52734375 C9.80259766 1.76130859 9.80259766 1.76130859 11 2 C7.73409182 3.77887765 5.69890008 4 2 4 C1.34 4.66 0.68 5.32 0 6 C0.66 7.32 1.32 8.64 2 10 C1.01 10 0.02 10 -1 10 C-1.33 10.66 -1.66 11.32 -2 12 C-3.06106444 8.81680668 -2.96156637 7.98060942 -2.125 4.875 C-1.94195312 4.17117187 -1.75890625 3.46734375 -1.5703125 2.7421875 C-1 1 -1 1 0 0 Z \",fill:\"#7F4535\",transform:\"translate(126,244)\"})),_path1774||(_path1774=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 1.32 2 2.64 2 4 C3.32 4 4.64 4 6 4 C6 5.32 6 6.64 6 8 C3 9 3 9 0 8 C-0.33 8.99 -0.66 9.98 -1 11 C-1.33 9.35 -1.66 7.7 -2 6 C-1.34 6 -0.68 6 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#312829\",transform:\"translate(66,224)\"})),_path1775||(_path1775=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.66 2 1.32 2 2 C3.32 2.66 4.64 3.32 6 4 C6 4.99 6 5.98 6 7 C6.66 7 7.32 7 8 7 C8 7.66 8 8.32 8 9 C4.51329166 7.8905928 1.22515763 6.73662334 -2 5 C-1.125 1.125 -1.125 1.125 0 0 Z \",fill:\"#906138\",transform:\"translate(144,197)\"})),_path1776||(_path1776=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.20700048 1.37442878 4.29973362 2.37455603 6.0625 5.3125 C2.86734947 6.37755018 2.07241004 6.58943153 -0.9375 5.3125 C-3.1875 2.75 -3.1875 2.75 -4.9375 0.3125 C-2.9375 -0.6875 -2.9375 -0.6875 0 0 Z \",fill:\"#422A1A\",transform:\"translate(215.9375,184.6875)\"})),_path1777||(_path1777=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0.495 1.98 0.495 4 1 C3.01 1.495 3.01 1.495 2 2 C4.96178773 3.67110042 7.37071192 4.32682752 10.75 4.625 C11.94882812 4.73714844 11.94882812 4.73714844 13.171875 4.8515625 C13.77515625 4.90054688 14.3784375 4.94953125 15 5 C14.01 5.33 13.02 5.66 12 6 C12 6.66 12 7.32 12 8 C7.28596212 7.52060632 3.33420699 7.03165952 -1 5 C-0.67 3.35 -0.34 1.7 0 0 Z \",fill:\"#120A0C\",transform:\"translate(577,170)\"})),_path1778||(_path1778=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 2 0 2 -1.5 3.5625 C-4.9985316 5.57415567 -7.98949133 5.66579094 -12 6 C-11.77734375 4.11328125 -11.77734375 4.11328125 -11 2 C-9.00390625 0.91796875 -9.00390625 0.91796875 -6.5625 0.1875 C-5.75941406 -0.06644531 -4.95632813 -0.32039062 -4.12890625 -0.58203125 C-2 -1 -2 -1 0 0 Z \",fill:\"#2E2E27\",transform:\"translate(507,149)\"})),_path1779||(_path1779=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.433125 0.8353125 -0.433125 0.8353125 -0.875 1.6875 C-2.08067353 4.01052165 -2.08067353 4.01052165 -2.8125 6.6875 C-3.204375 7.450625 -3.59625 8.21375 -4 9 C-6.625 9.8125 -6.625 9.8125 -9 10 C-9.33 8.68 -9.66 7.36 -10 6 C-8.71283353 4.99421411 -7.42011342 3.99553202 -6.125 3 C-5.40570313 2.443125 -4.68640625 1.88625 -3.9453125 1.3125 C-2 0 -2 0 0 0 Z \",fill:\"#99B295\",transform:\"translate(394,144)\"})),_path1780||(_path1780=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.93054827 2.71683272 9.46284362 5.66657898 14 9 C13.01 9.66 12.02 10.32 11 11 C6.71 8.03 2.42 5.06 -2 2 C-1.34 1.34 -0.68 0.68 0 0 Z \",fill:\"#CCA46F\",transform:\"translate(57,92)\"})),_path1781||(_path1781=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C0.525625 2.5775 0.05125 3.155 -0.4375 3.75 C-2.09418867 5.84682179 -2.09418867 5.84682179 -2.5 8.0625 C-3.11862874 10.45968638 -4.20128042 11.35117372 -6 13 C-6.33 13.66 -6.66 14.32 -7 15 C-8.32 14.67 -9.64 14.34 -11 14 C-10.59007812 13.55269531 -10.18015625 13.10539063 -9.7578125 12.64453125 C-6.68034567 9.19158402 -4.6235238 6.37102561 -3 2 C-2.01 1.34 -1.02 0.68 0 0 Z \",fill:\"#6D4937\",transform:\"translate(73,611)\"})),_path1782||(_path1782=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.28139679 1.48539285 9.28054101 5.08672304 13 9 C13 9.66 13 10.32 13 11 C8.71193127 10.52354792 6.73352513 9.34097516 4 6 C4 5.34 4 4.68 4 4 C2.68 3.34 1.36 2.68 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#58392D\",transform:\"translate(609,559)\"})),_path1783||(_path1783=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.37562854 1.28965176 2.70766393 2.62689293 4 4 C4 4.66 4 5.32 4 6 C4.598125 6.061875 5.19625 6.12375 5.8125 6.1875 C8.95302542 7.35398087 9.58160876 9.02813263 11 12 C11.6875 14.8125 11.6875 14.8125 12 17 C11.34 17.33 10.68 17.66 10 18 C9.5875 16.9275 9.175 15.855 8.75 14.75 C7.33922167 11.43600185 5.63977672 9.47479068 3 7 C0 2.5 0 2.5 0 0 Z \",fill:\"#54392E\",transform:\"translate(448,543)\"})),_path1784||(_path1784=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1.07487334 2.98498051 0.13449763 4.96286018 -0.8125 6.9375 C-1.59560547 8.59072266 -1.59560547 8.59072266 -2.39453125 10.27734375 C-4 13 -4 13 -7 14 C-7.33 14.99 -7.66 15.98 -8 17 C-7.39644592 13.14974121 -6.23227397 10.13898841 -4.4375 6.6875 C-3.98246094 5.80449219 -3.52742187 4.92148437 -3.05859375 4.01171875 C-2.53458984 3.01591797 -2.53458984 3.01591797 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#6D4736\",transform:\"translate(159,530)\"})),_path1785||(_path1785=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C-0.29598016 4.68996811 -2.22792744 7.73675646 -6 10 C-6.66 10 -7.32 10 -8 10 C-8.33 8.68 -8.66 7.36 -9 6 C-4.25 3 -4.25 3 -2 3 C-2 2.34 -2 1.68 -2 1 C-1.34 0.67 -0.68 0.34 0 0 Z \",fill:\"#432B25\",transform:\"translate(22,522)\"})),_path1786||(_path1786=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.1875 -0.5 3.1875 -0.5 7 0 C9.23991735 2.37550556 10.82532912 4.9531974 12 8 C11.67 8.66 11.34 9.32 11 10 C9.16375669 8.52444734 7.3310715 7.04446569 5.5 5.5625 C4.4790625 4.73878906 3.458125 3.91507812 2.40625 3.06640625 C1.6121875 2.38449219 0.818125 1.70257813 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#E9C79F\",transform:\"translate(554,493)\"})),_path1787||(_path1787=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.26 0 14.52 0 22 0 C22 0.33 22 0.66 22 1 C21.01257813 1.04898437 20.02515625 1.09796875 19.0078125 1.1484375 C17.72648437 1.22320312 16.44515625 1.29796875 15.125 1.375 C13.21074219 1.47941406 13.21074219 1.47941406 11.2578125 1.5859375 C7.91938301 1.67241106 7.91938301 1.67241106 6 4 C2.875 4.125 2.875 4.125 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#D83F50\",transform:\"translate(238,480)\"})),_path1788||(_path1788=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.76082132 -0.12001711 11.31648386 -0.0149136 17 1 C17.33 1.66 17.66 2.32 18 3 C10.08 3.495 10.08 3.495 2 4 C2 3.34 2 2.68 2 2 C1.34 1.34 0.68 0.68 0 0 Z \",fill:\"#150B10\",transform:\"translate(220,474)\"})),_path1789||(_path1789=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 1.32 0 2.64 0 4 C-0.99 4.66 -1.98 5.32 -3 6 C-3.79798218 8.41607417 -3.79798218 8.41607417 -4.1875 11.125 C-4.34605469 12.03507812 -4.50460938 12.94515625 -4.66796875 13.8828125 C-4.77753906 14.58148438 -4.88710937 15.28015625 -5 16 C-5.99 15.67 -6.98 15.34 -8 15 C-7.34 15 -6.68 15 -6 15 C-5.979375 13.741875 -5.95875 12.48375 -5.9375 11.1875 C-5.92589844 10.47980469 -5.91429687 9.77210938 -5.90234375 9.04296875 C-5.91736783 6.79694539 -5.91736783 6.79694539 -7 4 C-3.17391304 0 -3.17391304 0 0 0 Z \",fill:\"#DF5749\",transform:\"translate(163,450)\"})),_path1790||(_path1790=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.77371275 2.77371275 2.72884742 5.09015749 3.3125 8.9375 C3.61607422 10.80728516 3.61607422 10.80728516 3.92578125 12.71484375 C4 16 4 16 2.54296875 17.94140625 C2.03378906 18.29074219 1.52460938 18.64007813 1 19 C0.03794912 12.62641289 -0.10655578 6.44070471 0 0 Z \",fill:\"#7C2016\",transform:\"translate(478,423)\"})),_path1791||(_path1791=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.57344937 2.86724686 -0.8614515 3.8614515 -3 6 C-5.65537372 6.56520003 -8.29144713 6.73788198 -11 7 C-10.4375 5.1875 -10.4375 5.1875 -9 3 C-3 0 -3 0 0 0 Z \",fill:\"#EC7832\",transform:\"translate(306,435)\"})),_path1792||(_path1792=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.65119704 0.4902458 9.59704519 2.74151945 14.375 5.5625 C15.11105469 5.98724609 15.84710937 6.41199219 16.60546875 6.84960938 C18.40839699 7.89156141 20.20487053 8.94466854 22 10 C21.01 10.495 21.01 10.495 20 11 C17.4997692 9.9673603 15.10928077 8.88107546 12.6875 7.6875 C11.35866466 7.04434885 10.02924867 6.40239587 8.69921875 5.76171875 C8.06806152 5.45669434 7.4369043 5.15166992 6.78662109 4.83740234 C4.56069755 3.79409574 2.29675528 2.87516594 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#6D4532\",transform:\"translate(523,429)\"})),_path1793||(_path1793=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0.99 1.98 0.99 4 2 C4.19622241 6.21878192 3.80230168 9.17010894 2 13 C2.639375 13.28875 3.27875 13.5775 3.9375 13.875 C6 15 6 15 7 17 C5 16 3 15 1 14 C0.5859375 10.83984375 0.5859375 10.83984375 0.375 6.9375 C0.30023438 5.64714844 0.22546875 4.35679687 0.1484375 3.02734375 C0.09945313 2.02832031 0.05046875 1.02929688 0 0 Z \",fill:\"#EAD2B0\",transform:\"translate(480,424)\"})),_path1794||(_path1794=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.66 1.32 3.32 2.64 4 4 C4.66 3.67 5.32 3.34 6 3 C6.33 5.64 6.66 8.28 7 11 C5.35 11 3.7 11 2 11 C1.34 7.37 0.68 3.74 0 0 Z \",fill:\"#246A3C\",transform:\"translate(536,395)\"})),_path1795||(_path1795=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.49995547 1.56189602 6.27172857 3.66333691 9.25 6.0625 C10.14203125 6.77535156 11.0340625 7.48820312 11.953125 8.22265625 C12.62859375 8.80917969 13.3040625 9.39570313 14 10 C14 10.33 14 10.66 14 11 C7.84765625 10.4140625 7.84765625 10.4140625 6 10 C5.67 9.34 5.34 8.68 5 8 C5.66 7.67 6.32 7.34 7 7 C6.4946875 6.66226562 5.989375 6.32453125 5.46875 5.9765625 C4.49421875 5.30753906 4.49421875 5.30753906 3.5 4.625 C2.8503125 4.18414062 2.200625 3.74328125 1.53125 3.2890625 C1.0259375 2.86367188 0.520625 2.43828125 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#6B3623\",transform:\"translate(341,383)\"})),_path1796||(_path1796=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.31471568 0.28151087 2.62675767 0.57553339 3.9375 0.875 C4.66839844 1.03742188 5.39929688 1.19984375 6.15234375 1.3671875 C8 2 8 2 9 4 C12.02934491 4.65772428 12.02934491 4.65772428 15 5 C15 5.33 15 5.66 15 6 C13.35 6 11.7 6 10 6 C10 6.66 10 7.32 10 8 C9.34 8 8.68 8 8 8 C8 7.34 8 6.68 8 6 C6.68 6 5.36 6 4 6 C4 5.34 4 4.68 4 4 C3.34 4 2.68 4 2 4 C2 3.34 2 2.68 2 2 C1.34 2 0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#83B690\",transform:\"translate(518,376)\"})),_path1797||(_path1797=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.55384615 -0.36923077 4.55384615 -0.36923077 6.8125 1.5 C7.204375 1.995 7.59625 2.49 8 3 C7.34 4.32 6.68 5.64 6 7 C4.35 6.01 2.7 5.02 1 4 C1 4.66 1 5.32 1 6 C0.34 6 -0.32 6 -1 6 C-0.67 4.02 -0.34 2.04 0 0 Z \",fill:\"#34503B\",transform:\"translate(67,342)\"})),_path1798||(_path1798=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.495 0.99 0.495 2 1 C3.99960012 1.039992 6.00047242 1.04346799 8 1 C7.6875 2.875 7.6875 2.875 7 5 C4 7 4 7 1.8125 6.625 C1.214375 6.41875 0.61625 6.2125 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#7E573E\",transform:\"translate(530,333)\"})),_path1799||(_path1799=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0 4.62 0 7 0 C6.67 1.32 6.34 2.64 6 4 C4.68 4 3.36 4 2 4 C2.66 5.32 3.32 6.64 4 8 C3.01 8 2.02 8 1 8 C-1.125 3.375 -1.125 3.375 0 0 Z \",fill:\"#433E34\",transform:\"translate(354,334)\"})),_path1800||(_path1800=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.96175123 0.61277612 4.38058783 1.25372522 7 3 C7 3.66 7 4.32 7 5 C7.66 5 8.32 5 9 5 C9 5.66 9 6.32 9 7 C6.36 7 3.72 7 1 7 C0.67 4.69 0.34 2.38 0 0 Z \",fill:\"#F7F5E5\",transform:\"translate(507,327)\"})),_path1801||(_path1801=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1.67 2.32 1.34 3.64 1 5 C-0.65 5 -2.3 5 -4 5 C-3.67 5.99 -3.34 6.98 -3 8 C-2.01 8.33 -1.02 8.66 0 9 C0 9.66 0 10.32 0 11 C-3.63 10.67 -7.26 10.34 -11 10 C-10.01 9.34 -9.02 8.68 -8 8 C-8.33 7.34 -8.66 6.68 -9 6 C-7.68 6 -6.36 6 -5 6 C-5 5.34 -5 4.68 -5 4 C-4.360625 3.896875 -3.72125 3.79375 -3.0625 3.6875 C-2.381875 3.460625 -1.70125 3.23375 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#2B885D\",transform:\"translate(478,311)\"})),_path1802||(_path1802=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.29 0 8.58 0 13 0 C11.68 0.33 10.36 0.66 9 1 C9 1.66 9 2.32 9 3 C11.97 3 14.94 3 18 3 C18 3.33 18 3.66 18 4 C14.7 4.33 11.4 4.66 8 5 C8 4.34 8 3.68 8 3 C5.69 3 3.38 3 1 3 C0.67 2.01 0.34 1.02 0 0 Z \",fill:\"#9C8C6D\",transform:\"translate(511,315)\"})),_path1803||(_path1803=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.99 1.32 1.98 2 3 C4.56282742 3.72965366 4.56282742 3.72965366 7 4 C7.33 5.32 7.66 6.64 8 8 C7.34 8 6.68 8 6 8 C6 7.34 6 6.68 6 6 C2.88667752 6.66868314 2.88667752 6.66868314 1.8125 9.0625 C1.544375 9.701875 1.27625 10.34125 1 11 C0.34 11 -0.32 11 -1 11 C-1.99 11.495 -1.99 11.495 -3 12 C-2.01 8.04 -1.02 4.08 0 0 Z \",fill:\"#E2442D\",transform:\"translate(169,282)\"})),_path1804||(_path1804=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.66 2 1.32 2 2 C3.04800781 1.87431641 3.04800781 1.87431641 4.1171875 1.74609375 C5.02726562 1.64425781 5.93734375 1.54242188 6.875 1.4375 C7.77992188 1.33308594 8.68484375 1.22867187 9.6171875 1.12109375 C12 1 12 1 14 2 C14.33 1.34 14.66 0.68 15 0 C15 1.32 15 2.64 15 4 C9.72 4 4.44 4 -1 4 C-0.67 2.68 -0.34 1.36 0 0 Z \",fill:\"#3E2C1D\",transform:\"translate(307,271)\"})),_path1805||(_path1805=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-2.72783111 2.72783111 -5.80543688 3.2024628 -9.4375 4.125 C-10.4594043 4.39763672 -10.4594043 4.39763672 -11.50195312 4.67578125 C-14.41655708 5.43511979 -16.97561204 6 -20 6 C-20 5.34 -20 4.68 -20 4 C-17.60612843 3.32550034 -15.21030779 2.66023359 -12.8125 2 C-12.13896484 1.80921875 -11.46542969 1.6184375 -10.77148438 1.421875 C-7.09444844 0.4174164 -3.8149818 -0.23704741 0 0 Z \",fill:\"#617968\",transform:\"translate(423,233)\"})),_path1806||(_path1806=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 1.375 2 1.375 4 3 C4 3.66 4 4.32 4 5 C5.98 5 7.96 5 10 5 C10 5.33 10 5.66 10 6 C5.59085217 7.10228696 1.51617599 7.07654536 -3 7 C-2.34 6.34 -1.68 5.68 -1 5 C-1.66 4.01 -2.32 3.02 -3 2 C-2.01 1.34 -1.02 0.68 0 0 Z \",fill:\"#2C0F10\",transform:\"translate(558,222)\"})),_path1807||(_path1807=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1.56580666 3.13161332 -4.17815522 3.45604434 -7.375 4.6875 C-8.53773438 5.14511719 -9.70046875 5.60273438 -10.8984375 6.07421875 C-14 7 -14 7 -17 6 C-15.75443908 5.18071114 -14.50333365 4.36984814 -13.25 3.5625 C-12.20585937 2.88380859 -12.20585937 2.88380859 -11.140625 2.19140625 C-7.41392302 0.11723818 -4.22125466 -0.11725707 0 0 Z \",fill:\"#3B2D29\",transform:\"translate(506,176)\"})),_path1808||(_path1808=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.33 2.64 0.66 4 1 C2.89764064 1.96041171 1.79303376 2.91824407 0.6875 3.875 C0.07261719 4.40867188 -0.54226563 4.94234375 -1.17578125 5.4921875 C-3 7 -3 7 -6 9 C-6.72965366 11.56282742 -6.72965366 11.56282742 -7 14 C-7.99 12.68 -8.98 11.36 -10 10 C-8.625 8 -8.625 8 -7 6 C-6.34 6 -5.68 6 -5 6 C-5 5.34 -5 4.68 -5 4 C-4.01 3.67 -3.02 3.34 -2 3 C-1.34 2.01 -0.68 1.02 0 0 Z \",fill:\"#9BAD95\",transform:\"translate(407,160)\"})),_path1809||(_path1809=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.556875 0.474375 1.11375 0.94875 1.6875 1.4375 C4.18346074 3.12395996 6.0446237 3.58953107 9 4 C9 5.32 9 6.64 9 8 C4.61110675 7.33501617 1.0188515 5.81242323 -3 4 C-2.67 3.01 -2.34 2.02 -2 1 C-1.34 0.67 -0.68 0.34 0 0 Z \",fill:\"#865934\",transform:\"translate(48,154)\"})),_path1810||(_path1810=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-0.71285156 2.38671875 -1.42570312 2.7734375 -2.16015625 3.171875 C-3.11792969 3.69265625 -4.07570313 4.2134375 -5.0625 4.75 C-6.0628125 5.29269531 -7.063125 5.83539063 -8.09375 6.39453125 C-10.45048463 7.69643707 -12.75844016 9.04627743 -15.0625 10.4375 C-16.031875 10.953125 -17.00125 11.46875 -18 12 C-18.66 11.67 -19.32 11.34 -20 11 C-4.01030928 0 -4.01030928 0 0 0 Z \",fill:\"#302622\",transform:\"translate(510,140)\"})),_path1811||(_path1811=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4 0.66 4 1.32 4 2 C4.66 2 5.32 2 6 2 C6.33 4.31 6.66 6.62 7 9 C4.13998967 7.71792641 1.92960588 6.50848764 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#EB6E61\",transform:\"translate(138,134)\"})),_path1812||(_path1812=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C5 4.62 5 9.24 5 14 C2.21139503 10.28186004 1.5477646 9.04846999 0.8125 4.75 C0.65394531 3.85796875 0.49539062 2.9659375 0.33203125 2.046875 C0.22246094 1.37140625 0.11289063 0.6959375 0 0 Z \",fill:\"#E4BF9F\",transform:\"translate(152,118)\"})),_path1813||(_path1813=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 0 2 0 4.375 2.25 C5.24125 3.1575 6.1075 4.065 7 5 C8.1446875 6.1446875 8.1446875 6.1446875 9.3125 7.3125 C9.869375 7.869375 10.42625 8.42625 11 9 C10.01 9.66 9.02 10.32 8 11 C6.65290838 10.12499183 5.32261014 9.22409067 4 8.3125 C3.2575 7.81363281 2.515 7.31476563 1.75 6.80078125 C0 5 0 5 -0.25 2.29296875 C-0.1675 1.53628906 -0.085 0.77960938 0 0 Z \",fill:\"#412F22\",transform:\"translate(72,98)\"})),_path1814||(_path1814=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C1.598125 2.268125 2.19625 2.53625 2.8125 2.8125 C5.65198628 4.35393541 7.10192934 6.42404696 9 9 C8.67 9.66 8.34 10.32 8 11 C5.00667261 10.0022242 4.05233685 9.2477975 2 7 C1.67 8.32 1.34 9.64 1 11 C-0.17571451 7.32589215 -0.07366746 3.83070817 0 0 Z \",fill:\"#8A654C\",transform:\"translate(132,55)\"})),_path1815||(_path1815=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C0.35 4.63 -1.3 8.26 -3 12 C-3.99 12 -4.98 12 -6 12 C-4.28571429 3.42857143 -4.28571429 3.42857143 0 0 Z \",fill:\"#4E332B\",transform:\"translate(127,614)\"})),_path1816||(_path1816=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.58203125 1.11328125 1.58203125 1.11328125 3 3 C2.63671875 5.91796875 2.63671875 5.91796875 1.6875 9.1875 C1.38199219 10.27417969 1.07648438 11.36085938 0.76171875 12.48046875 C0.51035156 13.31191406 0.25898438 14.14335938 0 15 C-0.66 15 -1.32 15 -2 15 C-2.22577402 9.5814234 -1.46670113 5.22512279 0 0 Z \",fill:\"#4F352B\",transform:\"translate(215,564)\"})),_path1817||(_path1817=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.598125 0.61875 3.19625 1.2375 3.8125 1.875 C6.12505706 4.121484 7.97199019 4.9906634 11 6 C11 7.65 11 9.3 11 11 C10.67 10.34 10.34 9.68 10 9 C8.68 9.33 7.36 9.66 6 10 C4.99723227 8.52270825 3.99785546 7.04311423 3 5.5625 C2.443125 4.73878906 1.88625 3.91507813 1.3125 3.06640625 C0 1 0 1 0 0 Z \",fill:\"#875B44\",transform:\"translate(462,551)\"})),_path1818||(_path1818=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 2 2 2 2 5 C2.66 5 3.32 5 4 5 C7.22265625 10.17578125 7.22265625 10.17578125 8 12 C7.67 12.99 7.34 13.98 7 15 C6.59007812 14.4225 6.18015625 13.845 5.7578125 13.25 C5.21898437 12.5075 4.68015625 11.765 4.125 11 C3.59132813 10.2575 3.05765625 9.515 2.5078125 8.75 C2.01023437 8.1725 1.51265625 7.595 1 7 C0.34 7 -0.32 7 -1 7 C-1.625 4.625 -1.625 4.625 -2 2 C-1.34 1.34 -0.68 0.68 0 0 Z \",fill:\"#946348\",transform:\"translate(449,518)\"})),_path1819||(_path1819=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.33 0.66 -0.66 1.32 -1 2 C-3.984375 2.8515625 -3.984375 2.8515625 -7.75 3.625 C-8.98234375 3.88539063 -10.2146875 4.14578125 -11.484375 4.4140625 C-14.42451906 4.90408651 -17.03411863 5.12452174 -20 5 C-19.67 4.34 -19.34 3.68 -19 3 C-16.015625 2.1484375 -16.015625 2.1484375 -12.25 1.375 C-11.01765625 1.11460937 -9.7853125 0.85421875 -8.515625 0.5859375 C-5.57548094 0.09591349 -2.96588137 -0.12452174 0 0 Z \",fill:\"#2E2322\",transform:\"translate(439,497)\"})),_path1820||(_path1820=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.79921875 0.00902344 1.5984375 0.01804687 2.421875 0.02734375 C3.02515625 0.03894531 3.6284375 0.05054688 4.25 0.0625 C4.25 0.3925 4.25 0.7225 4.25 1.0625 C1.94 1.0625 -0.37 1.0625 -2.75 1.0625 C-2.75 2.0525 -2.75 3.0425 -2.75 4.0625 C-1.76 4.3925 -0.77 4.7225 0.25 5.0625 C-4.04 5.0625 -8.33 5.0625 -12.75 5.0625 C-8.05052207 0.36302207 -6.30640562 -0.09274126 0 0 Z \",fill:\"#CC5053\",transform:\"translate(374.75,486.9375)\"})),_path1821||(_path1821=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.26 0.33 14.52 0.66 22 1 C22 1.33 22 1.66 22 2 C20.02 2 18.04 2 16 2 C16 2.66 16 3.32 16 4 C14.68 4 13.36 4 12 4 C12 3.34 12 2.68 12 2 C8.04 2 4.08 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#491E21\",transform:\"translate(220,488)\"})),_path1822||(_path1822=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C0.67 3.66 0.34 4.32 0 5 C-0.66 5 -1.32 5 -2 5 C-2.90833969 7.72501908 -3.18359985 9.62233971 -3.31640625 12.44921875 C-3.35830078 13.29677734 -3.40019531 14.14433594 -3.44335938 15.01757812 C-3.50233398 16.33918945 -3.50233398 16.33918945 -3.5625 17.6875 C-3.60568359 18.58017578 -3.64886719 19.47285156 -3.69335938 20.39257812 C-3.79935353 22.59490108 -3.90142051 24.79733473 -4 27 C-4.33 27 -4.66 27 -5 27 C-6.933178 9.08460788 -6.933178 9.08460788 -3.625 3.9375 C-1 1 -1 1 0 0 Z \",fill:\"#A44A3A\",transform:\"translate(155,455)\"})),_path1823||(_path1823=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4 0.66 4 1.32 4 2 C4.66 2 5.32 2 6 2 C6 2.66 6 3.32 6 4 C-1.07721931 4.12109311 -7.97195301 3.85373239 -15 3 C-15 2.67 -15 2.34 -15 2 C-10.05 1.67 -5.1 1.34 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#6B3236\",transform:\"translate(230,468)\"})),_path1824||(_path1824=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C5 1.65 5 3.3 5 5 C9.29 5 13.58 5 18 5 C18 5.33 18 5.66 18 6 C12.72 6 7.44 6 2 6 C2 5.34 2 4.68 2 4 C1.34 4 0.68 4 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#8A5652\",transform:\"translate(180,454)\"})),_path1825||(_path1825=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-2.12124966 2.86343824 -4.24713072 3.71550648 -6.375 4.5625 C-8.15003906 5.27599609 -8.15003906 5.27599609 -9.9609375 6.00390625 C-13 7 -13 7 -15 6 C-12.80858681 2.71288021 -12.20934976 2.43781911 -8.625 1.3125 C-7.85414062 1.06113281 -7.08328125 0.80976563 -6.2890625 0.55078125 C-4 0 -4 0 0 0 Z \",fill:\"#5C3F32\",transform:\"translate(38,440)\"})),_path1826||(_path1826=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C0.03518625 2.2334935 -1.93135418 3.46388743 -3.90234375 4.6875 C-5.5321416 5.70726178 -7.14476052 6.75450125 -8.75 7.8125 C-11 9 -11 9 -15 9 C-15 8.34 -15 7.68 -15 7 C-4.90463215 1.86376022 -4.90463215 1.86376022 0 0 Z \",fill:\"#000407\",transform:\"translate(240,412)\"})),_path1827||(_path1827=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 5.61 1 11.22 1 17 C-0.98 16.67 -2.96 16.34 -5 16 C-5 15.34 -5 14.68 -5 14 C-5.66 13.67 -6.32 13.34 -7 13 C-3.535 12.505 -3.535 12.505 0 12 C0 8.04 0 4.08 0 0 Z \",fill:\"#1E1914\",transform:\"translate(625,390)\"})),_path1828||(_path1828=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.98613281 0.04833984 1.97226562 0.09667969 2.98828125 0.14648438 C4.53708984 0.2305957 4.53708984 0.2305957 6.1171875 0.31640625 C7.15746094 0.36861328 8.19773437 0.42082031 9.26953125 0.47460938 C11.84403866 0.60451571 14.41818046 0.73948877 16.9921875 0.87890625 C16.9921875 1.20890625 16.9921875 1.53890625 16.9921875 1.87890625 C8.0821875 2.53890625 -0.8278125 3.19890625 -10.0078125 3.87890625 C-6.22155044 0.09264419 -5.13002179 -0.26534595 0 0 Z \",fill:\"#586564\",transform:\"translate(265.0078125,397.12109375)\"})),_path1829||(_path1829=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.47932789 1.54545146 10.11429181 4.15543212 15 7 C14.34 7.66 13.68 8.32 13 9 C12.39414062 8.6390625 11.78828125 8.278125 11.1640625 7.90625 C4.87439955 4.42274436 0.15591818 3.3148589 -7 4 C-7 3.67 -7 3.34 -7 3 C-4.36 2.67 -1.72 2.34 1 2 C0.67 1.34 0.34 0.68 0 0 Z \",fill:\"#A7957C\",transform:\"translate(358,395)\"})),_path1830||(_path1830=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.33 0.99 -0.66 1.98 -1 3 C-6.94 3 -12.88 3 -19 3 C-16.26945375 0.26945375 -14.43402229 0.60610922 -10.625 0.375 C-9.48289063 0.30023438 -8.34078125 0.22546875 -7.1640625 0.1484375 C-4.77815324 0.03650595 -2.38853338 0 0 0 Z \",fill:\"#F53E2C\",transform:\"translate(138,395)\"})),_path1831||(_path1831=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.43170173 1.51896368 8.03024076 3.92639809 11.8125 6.625 C12.40998047 7.04523438 13.00746094 7.46546875 13.62304688 7.8984375 C15.08520565 8.92779728 16.54304899 9.9632823 18 11 C17.01 11.33 16.02 11.66 15 12 C12.49834419 10.66970774 10.22387294 9.31117009 7.875 7.75 C7.22917969 7.34136719 6.58335937 6.93273437 5.91796875 6.51171875 C1.1300014 3.39000419 1.1300014 3.39000419 0 0 Z \",fill:\"#D6C1AA\",transform:\"translate(140,335)\"})),_path1832||(_path1832=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 1.65 0.66 3.3 1 5 C0.360625 5.4125 -0.27875 5.825 -0.9375 6.25 C-3.20990931 8.17810487 -3.60196439 9.11424181 -4 12 C-4.66 11.34 -5.32 10.68 -6 10 C-5.7578125 8.0546875 -5.7578125 8.0546875 -5.125 5.875 C-4.92132812 5.15054687 -4.71765625 4.42609375 -4.5078125 3.6796875 C-4.34023438 3.12539063 -4.17265625 2.57109375 -4 2 C-4.66 1.67 -5.32 1.34 -6 1 C-4 0 -4 0 0 0 Z \",fill:\"#153722\",transform:\"translate(32,326)\"})),_path1833||(_path1833=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 1.32 0.66 2.64 1 4 C-1.64 4 -4.28 4 -7 4 C-7 3.34 -7 2.68 -7 2 C-7.66 2 -8.32 2 -9 2 C-9 1.34 -9 0.68 -9 0 C-5.67465243 -1.10844919 -3.37817425 -0.84454356 0 0 Z \",fill:\"#103228\",transform:\"translate(455,314)\"})),_path1834||(_path1834=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.3 0 6.6 0 10 0 C9.01 0.495 9.01 0.495 8 1 C8 2.32 8 3.64 8 5 C5.36 5 2.72 5 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#210505\",transform:\"translate(169,311)\"})),_path1835||(_path1835=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.56280208 0.14154136 5.12515485 0.28808562 7.6875 0.4375 C8.40873047 0.47681641 9.12996094 0.51613281 9.87304688 0.55664062 C13.66707282 0.78185678 17.28651492 1.12839305 21 2 C21 2.33 21 2.66 21 3 C16.17113701 4.07558786 11.95964459 3.81674203 7.125 3.0625 C6.09246094 2.91264648 6.09246094 2.91264648 5.0390625 2.75976562 C3.35817003 2.51463547 1.67889513 2.25845587 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#20331B\",transform:\"translate(217,304)\"})),_path1836||(_path1836=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.09570312 0.19464844 2.19140625 0.38929688 3.3203125 0.58984375 C4.16335938 0.74582031 5.00640625 0.90179688 5.875 1.0625 C5.875 2.0525 5.875 3.0425 5.875 4.0625 C3.9162957 3.92173685 1.95803907 3.7747324 0 3.625 C-1.09054687 3.54378906 -2.18109375 3.46257812 -3.3046875 3.37890625 C-6.125 3.0625 -6.125 3.0625 -8.125 2.0625 C-8.125 1.4025 -8.125 0.7425 -8.125 0.0625 C-5.2144446 -1.3927777 -3.16650948 -0.57266661 0 0 Z \",fill:\"#7DBFA5\",transform:\"translate(451.125,300.9375)\"})),_path1837||(_path1837=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0 3.96 0 6 0 C6.33 0.99 6.66 1.98 7 3 C10.3 3.33 13.6 3.66 17 4 C17 4.33 17 4.66 17 5 C12.05 5 7.1 5 2 5 C2 4.34 2 3.68 2 3 C1.34 2.67 0.68 2.34 0 2 C-0.33 2.66 -0.66 3.32 -1 4 C-0.67 2.68 -0.34 1.36 0 0 Z \",fill:\"#1A484A\",transform:\"translate(477,281)\"})),_path1838||(_path1838=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.19050021 0.09017996 4.378466 0.24666208 6.5625 0.4375 C7.76003906 0.53933594 8.95757812 0.64117187 10.19140625 0.74609375 C11.11824219 0.82988281 12.04507812 0.91367187 13 1 C13 1.66 13 2.32 13 3 C10.03 3 7.06 3 4 3 C4 4.65 4 6.3 4 8 C3.34 8 2.68 8 2 8 C2 6.02 2 4.04 2 2 C1.01 1.67 0.02 1.34 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#3C5B49\",transform:\"translate(472,274)\"})),_path1839||(_path1839=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2 2.65 2 4.3 2 6 C2.61875 5.649375 3.2375 5.29875 3.875 4.9375 C4.57625 4.628125 5.2775 4.31875 6 4 C6.66 4.33 7.32 4.66 8 5 C8.625 7.0625 8.625 7.0625 9 9 C8.34 9 7.68 9 7 9 C6.67 8.34 6.34 7.68 6 7 C5.67 7.66 5.34 8.32 5 9 C2.03 8.505 2.03 8.505 -1 8 C-1.04241723 5.66705225 -1.04092937 3.33297433 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#88604C\",transform:\"translate(63,259)\"})),_path1840||(_path1840=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.99 1.98 1.98 3 3 C3.66 2.67 4.32 2.34 5 2 C5.66 2.33 6.32 2.66 7 3 C6.34 5.97 5.68 8.94 5 12 C4.01 11.67 3.02 11.34 2 11 C2.33 9.68 2.66 8.36 3 7 C2.01 7 1.02 7 0 7 C0.33 6.01 0.66 5.02 1 4 C0.61067144 1.85744207 0.61067144 1.85744207 0 0 Z \",fill:\"#814836\",transform:\"translate(101,245)\"})),_path1841||(_path1841=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.33333333 0 8.66666667 0 13 0 C12.67 1.32 12.34 2.64 12 4 C6.375 4.25 6.375 4.25 3 2 C2.67 2.99 2.34 3.98 2 5 C1.67 4.34 1.34 3.68 1 3 C-1.02463255 2.34786708 -1.02463255 2.34786708 -3 2 C-2.01 2 -1.02 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#7F3D32\",transform:\"translate(71,238)\"})),_path1842||(_path1842=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C5 0.99 5 1.98 5 3 C5.66 3.33 6.32 3.66 7 4 C5.58366664 4.16947579 4.16691467 4.33545507 2.75 4.5 C1.56664062 4.63921875 1.56664062 4.63921875 0.359375 4.78125 C-2 5 -2 5 -6 5 C-6 4.01 -6 3.02 -6 2 C-4.02 2 -2.04 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#2B2021\",transform:\"translate(520,200)\"})),_path1843||(_path1843=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.375 0.3125 3.375 0.3125 7 1 C7.66 1.99 8.32 2.98 9 4 C7.35 4 5.7 4 4 4 C4 4.99 4 5.98 4 7 C-1.75 6.25 -1.75 6.25 -4 4 C-3.34 3.34 -2.68 2.68 -2 2 C-0.68 2.66 0.64 3.32 2 4 C1.67 3.67 1.34 3.34 1 3 C0.67 2.01 0.34 1.02 0 0 Z \",fill:\"#583526\",transform:\"translate(5,134)\"})),_path1844||(_path1844=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0.99 1.98 0.99 4 2 C4 2.66 4 3.32 4 4 C4.66 4.33 5.32 4.66 6 5 C6 5.66 6 6.32 6 7 C6.66 7.33 7.32 7.66 8 8 C7.67 8.99 7.34 9.98 7 11 C7 10.34 7 9.68 7 9 C3.98968256 8.06576355 3.13349732 7.95550089 0 9 C0 6.03 0 3.06 0 0 Z \",fill:\"#42271E\",transform:\"translate(0,129)\"})),_path1845||(_path1845=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0 4.62 0 7 0 C5.61122646 3.35620271 4.08322035 5.07298728 1 7 C0.34 7 -0.32 7 -1 7 C-1 7.66 -1 8.32 -1 9 C-1.99 8.67 -2.98 8.34 -4 8 C-2.66666667 5.33333333 -1.33333333 2.66666667 0 0 Z \",fill:\"#2C1817\",transform:\"translate(535,63)\"})),_path1846||(_path1846=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.96 0 7.92 0 12 0 C12 0.33 12 0.66 12 1 C10.02 1 8.04 1 6 1 C6 1.66 6 2.32 6 3 C-0.4 6.07692308 -0.4 6.07692308 -3.4375 5.6875 C-3.953125 5.460625 -4.46875 5.23375 -5 5 C-4.360625 4.731875 -3.72125 4.46375 -3.0625 4.1875 C-0.66868314 3.11332248 -0.66868314 3.11332248 0 0 Z \",fill:\"#422419\",transform:\"translate(366,511)\"})),_path1847||(_path1847=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.03253906 0.00676758 1.03253906 0.00676758 2.0859375 0.01367188 C3.76566335 0.02533664 5.44534375 0.04326729 7.125 0.0625 C7.125 0.3925 7.125 0.7225 7.125 1.0625 C-0.135 2.0525 -7.395 3.0425 -14.875 4.0625 C-14.545 3.0725 -14.215 2.0825 -13.875 1.0625 C-9.21962644 0.14157719 -4.72814567 -0.05955997 0 0 Z \",fill:\"#EC746E\",transform:\"translate(337.875,497.9375)\"})),_path1848||(_path1848=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 1.32 0.66 2.64 1 4 C-3.29 4 -7.58 4 -12 4 C-11 2 -11 2 -8.8125 0.875 C-5.73230669 -0.08328236 -3.20690052 -0.14915816 0 0 Z \",fill:\"#050A08\",transform:\"translate(256,474)\"})),_path1849||(_path1849=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C2.195625 1.61875 1.39125 2.2375 0.5625 2.875 C-2.31633827 5.26232929 -2.87360585 5.96075917 -3.31640625 9.6015625 C-3.39761719 10.59929687 -3.47882813 11.59703125 -3.5625 12.625 C-3.64628906 13.62789063 -3.73007812 14.63078125 -3.81640625 15.6640625 C-3.87699219 16.43492187 -3.93757813 17.20578125 -4 18 C-4.66 18 -5.32 18 -6 18 C-6.50350402 11.04884731 -6.13500456 6.71603571 -2 1 C-1.34 0.67 -0.68 0.34 0 0 Z \",fill:\"#491E23\",transform:\"translate(289,465)\"})),_path1850||(_path1850=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.62 0 9.24 0 14 0 C13.67 0.99 13.34 1.98 13 3 C8.38 3 3.76 3 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#8E5D3C\",transform:\"translate(348,472)\"})),_path1851||(_path1851=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C1.66 3 2.32 3 3 3 C2.67 4.32 2.34 5.64 2 7 C1.01 7 0.02 7 -1 7 C-0.67 5.35 -0.34 3.7 0 2 C-0.99 2.495 -0.99 2.495 -2 3 C-3.99960012 3.039992 -6.00047242 3.04346799 -8 3 C-8.33 3.66 -8.66 4.32 -9 5 C-9 4.34 -9 3.68 -9 3 C-9.66 3 -10.32 3 -11 3 C-11 2.34 -11 1.68 -11 1 C-5.555 0.505 -5.555 0.505 0 0 Z \",fill:\"#9D1C29\",transform:\"translate(309,451)\"})),_path1852||(_path1852=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.65066939 1.24314727 8.60040212 3.07861928 13 7 C14.64418383 8.03655068 16.30330285 9.05184571 18 10 C15 11 15 11 12.95703125 10.22265625 C12.24933594 9.83980469 11.54164063 9.45695312 10.8125 9.0625 C10.09707031 8.68222656 9.38164063 8.30195313 8.64453125 7.91015625 C8.10183594 7.60980469 7.55914063 7.30945313 7 7 C7 6.34 7 5.68 7 5 C6.401875 4.731875 5.80375 4.46375 5.1875 4.1875 C3.02775192 3.01506533 1.64209744 1.80630718 0 0 Z \",fill:\"#6F4B3A\",transform:\"translate(538,446)\"})),_path1853||(_path1853=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.31022184 -0.1831111 8.9588784 0.21460277 14 2 C16.6638527 2.44074654 19.31207432 2.72193872 22 3 C22 3.33 22 3.66 22 4 C14.06421258 5.90458898 7.55666303 3.47289675 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#7F4F3A\",transform:\"translate(569,421)\"})),_path1854||(_path1854=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.3 0 6.6 0 10 0 C10 0.99 10 1.98 10 3 C11.299375 3.12375 12.59875 3.2475 13.9375 3.375 C16.15234375 3.5859375 16.15234375 3.5859375 18 4 C18.33 4.66 18.66 5.32 19 6 C13.31597205 5.63369598 9.01445283 4.91537955 4 2 C2.68 1.34 1.36 0.68 0 0 Z \",fill:\"#B27353\",transform:\"translate(586,419)\"})),_path1855||(_path1855=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.33 0.66 -0.66 1.32 -1 2 C-3.94921875 2.8515625 -3.94921875 2.8515625 -7.6875 3.625 C-8.90824219 3.88539063 -10.12898437 4.14578125 -11.38671875 4.4140625 C-14.67549245 4.94737715 -17.67793207 5.1122665 -21 5 C-17.93526297 2.95684198 -15.73045705 2.25739685 -12.1875 1.375 C-11.17042969 1.11460937 -10.15335938 0.85421875 -9.10546875 0.5859375 C-5.99225142 -0.001462 -3.15977385 -0.10390886 0 0 Z \",fill:\"#122E2E\",transform:\"translate(248,404)\"})),_path1856||(_path1856=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.18359375 1.859375 -0.18359375 1.859375 -1 4 C-6.98212014 7.40633906 -13.22028771 8.5116764 -20 8 C-16.27534407 5.99109993 -12.50856077 4.96493618 -8.4375 3.87890625 C-5.33209261 2.75916801 -3.26250588 0 0 0 Z \",fill:\"#D3B292\",transform:\"translate(154,386)\"})),_path1857||(_path1857=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 3.63 0 7.26 0 11 C2.31 11.33 4.62 11.66 7 12 C7 12.33 7 12.66 7 13 C3.7 13 0.4 13 -3 13 C-3 9.04 -3 5.08 -3 1 C-1 0 -1 0 0 0 Z \",fill:\"#770706\",transform:\"translate(7,385)\"})),_path1858||(_path1858=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.495 0.99 0.495 2 1 C2 2.65 2 4.3 2 6 C4.64 5.67 7.28 5.34 10 5 C10 5.66 10 6.32 10 7 C10.66 7.66 11.32 8.32 12 9 C8.04 9 4.08 9 0 9 C0 6.03 0 3.06 0 0 Z \",fill:\"#3B302B\",transform:\"translate(296,344)\"})),_path1859||(_path1859=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.75128818 0.28382946 3.50100003 0.57739529 5.25 0.875 C6.71179688 1.11863281 6.71179688 1.11863281 8.203125 1.3671875 C10.77264117 1.94855848 12.72071056 2.70840265 15 4 C14.67 4.66 14.34 5.32 14 6 C12.82630859 5.7834375 12.82630859 5.7834375 11.62890625 5.5625 C10.61699219 5.376875 9.60507812 5.19125 8.5625 5 C7.55316406 4.814375 6.54382813 4.62875 5.50390625 4.4375 C3.25946072 3.97131344 3.25946072 3.97131344 2 4 C1.01 4 0.02 4 -1 4 C-0.67 2.68 -0.34 1.36 0 0 Z \",fill:\"#AAC499\",transform:\"translate(488,316)\"})),_path1860||(_path1860=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 3.96 1 7.92 1 12 C-0.32 12 -1.64 12 -3 12 C-3 9.36 -3 6.72 -3 4 C-2.34 4 -1.68 4 -1 4 C-0.67 2.68 -0.34 1.36 0 0 Z \",fill:\"#0F0503\",transform:\"translate(215,304)\"})),_path1861||(_path1861=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 1.32 1.32 2.64 2 4 C5.03201925 6.24407254 5.03201925 6.24407254 8 8 C7.67 8.99 7.34 9.98 7 11 C4.69 10.67 2.38 10.34 0 10 C0 6.7 0 3.4 0 0 Z \",fill:\"#AB7459\",transform:\"translate(352,301)\"})),_path1862||(_path1862=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65322266 0.01740234 1.65322266 0.01740234 3.33984375 0.03515625 C4.99693359 0.04869141 4.99693359 0.04869141 6.6875 0.0625 C7.54214844 0.07410156 8.39679688 0.08570313 9.27734375 0.09765625 C9.27734375 0.75765625 9.27734375 1.41765625 9.27734375 2.09765625 C6.39523073 3.05836059 4.57884331 3.20347508 1.58984375 3.16015625 C0.37748047 3.14662109 0.37748047 3.14662109 -0.859375 3.1328125 C-1.78169922 3.11541016 -1.78169922 3.11541016 -2.72265625 3.09765625 C-3.05265625 4.08765625 -3.38265625 5.07765625 -3.72265625 6.09765625 C-3.76537725 4.4315372 -3.76329457 2.7638274 -3.72265625 1.09765625 C-2.72265625 0.09765625 -2.72265625 0.09765625 0 0 Z \",fill:\"#230B09\",transform:\"translate(161.72265625,271.90234375)\"})),_path1863||(_path1863=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.95703125 -0.390625 5.95703125 -0.390625 8 0 C8.99 1.32 9.98 2.64 11 4 C7.04 4 3.08 4 -1 4 C-0.67 2.68 -0.34 1.36 0 0 Z \",fill:\"#05281B\",transform:\"translate(470,266)\"})),_path1864||(_path1864=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.125 7.75 2.125 7.75 1 10 C-0.65 10 -2.3 10 -4 10 C-4 7.36 -4 4.72 -4 2 C-3.67 2 -3.34 2 -3 2 C-3 3.98 -3 5.96 -3 8 C-2.34 8 -1.68 8 -1 8 C-1.20625 7.236875 -1.4125 6.47375 -1.625 5.6875 C-2 3 -2 3 0 0 Z \",fill:\"#9F6A50\",transform:\"translate(46,258)\"})),_path1865||(_path1865=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.33 2.64 0.66 4 1 C4.33 4.3 4.66 7.6 5 11 C1 8 1 8 -1 5 C-1.66 5 -2.32 5 -3 5 C-2.67 4.01 -2.34 3.02 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#9B624A\",transform:\"translate(125,254)\"})),_path1866||(_path1866=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 1.66666667 0 3.33333333 0 5 C0.66 5.66 1.32 6.32 2 7 C1.34 8.32 0.68 9.64 0 11 C-0.66 10.67 -1.32 10.34 -2 10 C-2 7.69 -2 5.38 -2 3 C-2.33 3.99 -2.66 4.98 -3 6 C-5.5625 7.6875 -5.5625 7.6875 -8 9 C-7.67 7.68 -7.34 6.36 -7 5 C-6.34 5 -5.68 5 -5 5 C-4.67 3.68 -4.34 2.36 -4 1 C-2.68 0.67 -1.36 0.34 0 0 Z \",fill:\"#975A41\",transform:\"translate(104,251)\"})),_path1867||(_path1867=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.49957243 -0.30950345 12.06581955 0.11238541 18 3 C18.33 3.66 18.66 4.32 19 5 C12.31006781 4.46048934 6.36539272 3.11293829 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#D8AE83\",transform:\"translate(225,244)\"})),_path1868||(_path1868=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2 1.99 2 2.98 2 4 C0.54735962 4.8638129 -0.9123163 5.71580454 -2.375 6.5625 C-3.59316406 7.27599609 -3.59316406 7.27599609 -4.8359375 8.00390625 C-5.55007813 8.33261719 -6.26421875 8.66132813 -7 9 C-7.66 8.67 -8.32 8.34 -9 8 C-6.14723863 5.06799526 -3.34920216 2.35684596 0 0 Z \",fill:\"#664032\",transform:\"translate(374,205)\"})),_path1869||(_path1869=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.94 1.485 5.94 1.485 12 3 C12 4.32 12 5.64 12 7 C11.34 7 10.68 7 10 7 C9.67 7.66 9.34 8.32 9 9 C8.01 7.68 7.02 6.36 6 5 C5.01 5.495 5.01 5.495 4 6 C2.62437146 4.71034824 1.29233607 3.37310707 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#50392A\",transform:\"translate(146,197)\"})),_path1870||(_path1870=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.515625 0.185625 1.03125 0.37125 1.5625 0.5625 C4.85908739 1.15419517 7.72245735 0.567267 11 0 C8.30271832 3.33193619 4.97939813 4.60371996 1 6 C-1.4375 5.6875 -1.4375 5.6875 -3 5 C-2.01 3.35 -1.02 1.7 0 0 Z \",fill:\"#55382F\",transform:\"translate(414,195)\"})),_path1871||(_path1871=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-5.93852229 3.95901486 -12.08104381 4.24710558 -19 4 C-19.33 3.34 -19.66 2.68 -20 2 C-13.25846717 0.74158054 -6.86515862 -0.26404456 0 0 Z \",fill:\"#A5B097\",transform:\"translate(350,190)\"})),_path1872||(_path1872=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.556875 0.226875 1.11375 0.45375 1.6875 0.6875 C-1.29668329 4.01601213 -4.15812769 6.0080729 -8.3125 7.6875 C-9.3025 7.3575 -10.2925 7.0275 -11.3125 6.6875 C-4.51779801 -0.61051325 -4.51779801 -0.61051325 0 0 Z \",fill:\"#433531\",transform:\"translate(528.3125,133.3125)\"})),_path1873||(_path1873=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0.99 1.98 0.99 4 2 C4 2.66 4 3.32 4 4 C4.66 4 5.32 4 6 4 C6 4.66 6 5.32 6 6 C6.66 6.33 7.32 6.66 8 7 C7.34 8.32 6.68 9.64 6 11 C4.62437146 9.71034824 3.29233607 8.37310707 2 7 C2 6.34 2 5.68 2 5 C1.34 5 0.68 5 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#4B3021\",transform:\"translate(112,45)\"})),_path1874||(_path1874=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.93910275 3.87820551 2.34548009 5.91149615 2.625 10.125 C2.69976562 11.17945313 2.77453125 12.23390625 2.8515625 13.3203125 C2.93788185 14.87860393 3 16.43931964 3 18 C2.01 18 1.02 18 0 18 C0 12.06 0 6.12 0 0 Z \",fill:\"#CD9F7F\",transform:\"translate(335,608)\"})),_path1875||(_path1875=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C-0.64 4.3 -3.28 7.6 -6 11 C-6.66 10.67 -7.32 10.34 -8 10 C-6.75587233 6.55472339 -5.45185936 3.74608248 -3 1 C-2.01 0.67 -1.02 0.34 0 0 Z \",fill:\"#A37357\",transform:\"translate(103,565)\"})),_path1876||(_path1876=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.99 0.495 -0.99 0.495 -2 1 C-1.67 1.99 -1.34 2.98 -1 4 C-7.625 7.125 -7.625 7.125 -11 6 C-7.34769214 1.25199978 -6.01084259 -0.15818007 0 0 Z \",fill:\"#1A0805\",transform:\"translate(368,492)\"})),_path1877||(_path1877=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.7857936 0.54863863 13.35009036 1.54267938 20 3 C20 3.33 20 3.66 20 4 C16.37 4.33 12.74 4.66 9 5 C8.67 4.01 8.34 3.02 8 2 C5.36 2 2.72 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#632522\",transform:\"translate(196,492)\"})),_path1878||(_path1878=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.66 0 -1.32 0 -2 0 C-2 1.65 -2 3.3 -2 5 C-2.99 5.33 -3.98 5.66 -5 6 C-5 4.68 -5 3.36 -5 2 C-8.63 1.67 -12.26 1.34 -16 1 C-16 0.67 -16 0.34 -16 0 C-14.08416353 -0.1958009 -12.16727461 -0.38132214 -10.25 -0.5625 C-8.64898437 -0.71912109 -8.64898437 -0.71912109 -7.015625 -0.87890625 C-4.35858796 -0.98560074 -2.50039428 -0.81930395 0 0 Z \",fill:\"#9B5243\",transform:\"translate(391,477)\"})),_path1879||(_path1879=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.90105469 0.00902344 1.80210937 0.01804687 2.73046875 0.02734375 C3.41753906 0.03894531 4.10460937 0.05054688 4.8125 0.0625 C4.8125 1.0525 4.8125 2.0425 4.8125 3.0625 C3.69101562 3.02769531 3.69101562 3.02769531 2.546875 2.9921875 C1.56203125 2.97414063 0.5771875 2.95609375 -0.4375 2.9375 C-1.41203125 2.91429687 -2.3865625 2.89109375 -3.390625 2.8671875 C-6.2071498 3.06387219 -7.79699036 3.61681084 -10.1875 5.0625 C-9.375 3.125 -9.375 3.125 -8.1875 1.0625 C-5.17259443 0.05753148 -3.14568308 -0.04085303 0 0 Z \",fill:\"#3F0B0C\",transform:\"translate(295.1875,462.9375)\"})),_path1880||(_path1880=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.77375186 1.87540252 7.2027298 5.20614205 9.25 9.8125 C9.4975 10.534375 9.745 11.25625 10 12 C6.4213696 10.34832443 3.25179812 8.21713508 0 6 C1.32 5.67 2.64 5.34 4 5 C2.68 3.35 1.36 1.7 0 0 Z \",fill:\"#CE7772\",transform:\"translate(253,458)\"})),_path1881||(_path1881=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.99 0.495 -0.99 0.495 -2 1 C-2 1.99 -2 2.98 -2 4 C-4.64 4 -7.28 4 -10 4 C-10 4.66 -10 5.32 -10 6 C-11.65 6.33 -13.3 6.66 -15 7 C-10.37141192 2.02855355 -6.96211019 -0.48572862 0 0 Z \",fill:\"#704833\",transform:\"translate(116,434)\"})),_path1882||(_path1882=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.99 0 1.98 0 3 C-4.75544619 7.74248857 -11.100928 10.91391141 -17 14 C-17 13.34 -17 12.68 -17 12 C-15.15317545 10.63918191 -13.24529085 9.36068052 -11.3125 8.125 C-7.36291105 5.58838976 -3.61792218 2.99367957 0 0 Z \",fill:\"#4F4146\",transform:\"translate(281,381)\"})),_path1883||(_path1883=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.33 3.96 1.66 7.92 2 12 C2.99 12 3.98 12 5 12 C5 12.66 5 13.32 5 14 C1.7 14 -1.6 14 -5 14 C-5.33 13.01 -5.66 12.02 -6 11 C-3.03 11.495 -3.03 11.495 0 12 C0 8.04 0 4.08 0 0 Z \",fill:\"#8E5128\",transform:\"translate(49,366)\"})),_path1884||(_path1884=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2.33 6.61 2.66 12.22 3 18 C1.68 17.34 0.36 16.68 -1 16 C-1.02692484 13.70839681 -1.04636124 11.41670454 -1.0625 9.125 C-1.07410156 7.84882813 -1.08570313 6.57265625 -1.09765625 5.2578125 C-1 2 -1 2 0 0 Z \",fill:\"#7A1C26\",transform:\"translate(349,370)\"})),_path1885||(_path1885=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0 5.94 0 9 0 C8.67 1.32 8.34 2.64 8 4 C4.9375 5.75 4.9375 5.75 2 7 C2 5.35 2 3.7 2 2 C1.34 2 0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#305239\",transform:\"translate(168,376)\"})),_path1886||(_path1886=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3 5.62 3 10.24 3 15 C-0.15353333 10.7952889 -0.36246719 10.14908143 -0.1875 5.25 C-0.16042969 4.26515625 -0.13335937 3.2803125 -0.10546875 2.265625 C-0.07066406 1.51796875 -0.03585937 0.7703125 0 0 Z \",fill:\"#170C10\",transform:\"translate(285,369)\"})),_path1887||(_path1887=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C8.57142857 0.85714286 8.57142857 0.85714286 12 3 C12.33 2.34 12.66 1.68 13 1 C13.33 2.32 13.66 3.64 14 5 C12.41590006 4.88512252 10.83271037 4.75765492 9.25 4.625 C8.36828125 4.55539062 7.4865625 4.48578125 6.578125 4.4140625 C4.00933618 4.00149945 2.24158985 3.28839043 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#8F614E\",transform:\"translate(542,368)\"})),_path1888||(_path1888=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.28 0.66 10.56 1.32 16 2 C16 2.99 16 3.98 16 5 C14.27054347 4.85764543 12.54144346 4.71095618 10.8125 4.5625 C9.36810547 4.44068359 9.36810547 4.44068359 7.89453125 4.31640625 C5.21350398 4.02333849 2.6337014 3.57296246 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#B3785B\",transform:\"translate(610,364)\"})),_path1889||(_path1889=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3 1.66 3 2.32 3 3 C6.61867559 4.2062252 9.92506251 4.10816918 13.6875 4.0625 C14.38939453 4.05798828 15.09128906 4.05347656 15.81445312 4.04882812 C17.54300538 4.03706927 19.27151365 4.01913454 21 4 C21 4.66 21 5.32 21 6 C17.87517438 6.08687496 14.75065754 6.14034568 11.625 6.1875 C10.73554688 6.21263672 9.84609375 6.23777344 8.9296875 6.26367188 C7.65351563 6.27817383 7.65351563 6.27817383 6.3515625 6.29296875 C5.17327881 6.31653442 5.17327881 6.31653442 3.97119141 6.34057617 C3.32069824 6.22818604 2.67020508 6.1157959 2 6 C0 3 0 3 0 0 Z \",fill:\"#EC443B\",transform:\"translate(337,339)\"})),_path1890||(_path1890=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3.33 3.3 3.66 6.6 4 10 C3.67 9.34 3.34 8.68 3 8 C2.34 8 1.68 8 1 8 C1.33 9.65 1.66 11.3 2 13 C1.01 13 0.02 13 -1 13 C-0.67 8.71 -0.34 4.42 0 0 Z \",fill:\"#1B130F\",transform:\"translate(368,309)\"})),_path1891||(_path1891=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 1.65 1 3.3 1 5 C1.66 5 2.32 5 3 5 C3 6.32 3 7.64 3 9 C0.36 9 -2.28 9 -5 9 C-4.6875 7.0625 -4.6875 7.0625 -4 5 C-3.01 4.67 -2.02 4.34 -1 4 C-0.26676204 1.98491642 -0.26676204 1.98491642 0 0 Z \",fill:\"#520F07\",transform:\"translate(497,275)\"})),_path1892||(_path1892=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.61 0 11.22 0 17 0 C17 0.99 17 1.98 17 3 C14.9160597 2.88556397 12.83283507 2.75804453 10.75 2.625 C9.58984375 2.55539062 8.4296875 2.48578125 7.234375 2.4140625 C4 2 4 2 0 0 Z \",fill:\"#10231A\",transform:\"translate(404,278)\"})),_path1893||(_path1893=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C3.69542509 2.94422416 3.16507321 3.85920226 0.875 5.8125 C-2.79439779 7.32812083 -5.17481546 6.8250398 -9 6 C-5.91190305 4.23537317 -4.76687864 4 -1 4 C-0.67 2.68 -0.34 1.36 0 0 Z \",fill:\"#F1BA98\",transform:\"translate(252,275)\"})),_path1894||(_path1894=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0 4.62 0 7 0 C6.67 1.98 6.34 3.96 6 6 C3.69 5.34 1.38 4.68 -1 4 C-0.67 2.68 -0.34 1.36 0 0 Z \",fill:\"#4E6843\",transform:\"translate(414,268)\"})),_path1895||(_path1895=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C3.80411967 2.75924185 4.0127245 3.88972103 3.625 7.25 C3.41875 8.1575 3.2125 9.065 3 10 C1.02 10 -0.96 10 -3 10 C-3 8.68 -3 7.36 -3 6 C-2.01 5.67 -1.02 5.34 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#593E2B\",transform:\"translate(82,259)\"})),_path1896||(_path1896=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-6.325 4.44375 -6.325 4.44375 -10 3 C-10.66 2.67 -11.32 2.34 -12 2 C-12 1.34 -12 0.68 -12 0 C-7.91556885 -1.53166168 -4.20544343 -0.63081652 0 0 Z \",fill:\"#454B44\",transform:\"translate(505,220)\"})),_path1897||(_path1897=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4 1 4 1 7 2 C7 2.66 7 3.32 7 4 C6.01 4 5.02 4 4 4 C4 5.65 4 7.3 4 9 C2.68 9 1.36 9 0 9 C0 6.03 0 3.06 0 0 Z \",fill:\"#F3C598\",transform:\"translate(164,213)\"})),_path1898||(_path1898=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.59997031 3.5999838 12.7765509 7.78971917 19 12 C18.01 12.66 17.02 13.32 16 14 C15.47921875 13.42765625 14.9584375 12.8553125 14.421875 12.265625 C11.60818393 9.63346238 8.54487664 7.70520152 5.25 5.75 C4.64800781 5.38648438 4.04601562 5.02296875 3.42578125 4.6484375 C1.95361969 3.76046703 0.4772326 2.87950842 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#85654B\",transform:\"translate(211,210)\"})),_path1899||(_path1899=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1.93254772 2.0245738 -3.63158688 3.42105792 -6 5 C-7.32 5 -8.64 5 -10 5 C-10.33 4.01 -10.66 3.02 -11 2 C-10.01 1.67 -9.02 1.34 -8 1 C-9.32 0.67 -10.64 0.34 -12 0 C-7.66726186 -0.92844389 -4.33273814 -0.92844389 0 0 Z \",fill:\"#363E39\",transform:\"translate(558,207)\"})),_path1900||(_path1900=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.78982507 0.37035409 11.26884891 2.40476401 17 6 C13.06204091 7.22419163 10.83887763 6.48320272 7 5 C7 4.34 7 3.68 7 3 C5.68 3 4.36 3 3 3 C3 2.34 3 1.68 3 1 C2.01 0.67 1.02 0.34 0 0 Z \",fill:\"#744F34\",transform:\"translate(125,191)\"})),_path1901||(_path1901=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.3 0 6.6 0 10 0 C10 0.99 10 1.98 10 3 C10.99 3 11.98 3 13 3 C13 3.66 13 4.32 13 5 C12.01 5.33 11.02 5.66 10 6 C9.67 4.68 9.34 3.36 9 2 C8.34 2 7.68 2 7 2 C7 2.66 7 3.32 7 4 C5.68 4.33 4.36 4.66 3 5 C3 4.34 3 3.68 3 3 C2.01 2.67 1.02 2.34 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#3C2822\",transform:\"translate(126,186)\"})),_path1902||(_path1902=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-2.43218059 1.19963643 -4.86970578 2.38484438 -7.3125 3.5625 C-8.00279297 3.90474609 -8.69308594 4.24699219 -9.40429688 4.59960938 C-14.66015625 7.11328125 -14.66015625 7.11328125 -18 6 C-6.16396243 -2.05465414 -6.16396243 -2.05465414 0 0 Z \",fill:\"#0F080C\",transform:\"translate(592,137)\"})),_path1903||(_path1903=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.78520613 0.54074373 5.59177555 2.07572746 8 5 C8 5.99 8 6.98 8 8 C6.35 8 4.7 8 3 8 C2.67 6.35 2.34 4.7 2 3 C1.34 3 0.68 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#281613\",transform:\"translate(136,92)\"})),_path1904||(_path1904=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2 6.61 2 12.22 2 18 C0.35 16.35 -1.3 14.7 -3 13 C-2.34 12.67 -1.68 12.34 -1 12 C-0.53101037 9.1840151 -0.53101037 9.1840151 -0.375 5.9375 C-0.30023438 4.83277344 -0.22546875 3.72804688 -0.1484375 2.58984375 C-0.09945312 1.73519531 -0.05046875 0.88054687 0 0 Z \",fill:\"#6B4A2F\",transform:\"translate(149,80)\"})),_path1905||(_path1905=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C2.32286246 4.96073422 2.08893197 9.91111512 2 15 C1.01 14.67 0.02 14.34 -1 14 C-1.02694851 12.04174127 -1.04637218 10.08337774 -1.0625 8.125 C-1.07410156 7.03445312 -1.08570313 5.94390625 -1.09765625 4.8203125 C-1 2 -1 2 0 0 Z \",fill:\"#BE986E\",transform:\"translate(141,68)\"})),_path1906||(_path1906=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0 5.94 0 9 0 C9.33 0.66 9.66 1.32 10 2 C9.01 2 8.02 2 7 2 C6.67 3.65 6.34 5.3 6 7 C1.125 3.375 1.125 3.375 0 0 Z \",fill:\"#DFAA74\",transform:\"translate(57,0)\"})),_path1907||(_path1907=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3 0.99 3 1.98 3 3 C2.34 3 1.68 3 1 3 C0.566875 4.423125 0.566875 4.423125 0.125 5.875 C-1 9 -1 9 -3 11 C-3.66 11 -4.32 11 -5 11 C-4.26023275 7.1532103 -2.81328141 2.81328141 0 0 Z \",fill:\"#52362C\",transform:\"translate(155,571)\"})),_path1908||(_path1908=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.99 0 1.98 0 3 C-4.34285714 7 -4.34285714 7 -7 7 C-7.268125 7.61875 -7.53625 8.2375 -7.8125 8.875 C-9 11 -9 11 -12 13 C-12 10 -12 10 -9.8828125 7.51953125 C-8.97273438 6.62621094 -8.06265625 5.73289062 -7.125 4.8125 C-6.22007813 3.91144531 -5.31515625 3.01039063 -4.3828125 2.08203125 C-2 0 -2 0 0 0 Z \",fill:\"#33201D\",transform:\"translate(61,546)\"})),_path1909||(_path1909=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.19209404 -0.21192221 9.126739 0.4087311 14 2 C13.67 2.99 13.34 3.98 13 5 C13 4.34 13 3.68 13 3 C8.38 3 3.76 3 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#957B64\",transform:\"translate(345,524)\"})),_path1910||(_path1910=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.99 0.495 -0.99 0.495 -2 1 C-2.309375 1.61875 -2.61875 2.2375 -2.9375 2.875 C-4.02905268 5.05810535 -5.20711515 6.37010468 -7 8 C-7 7.34 -7 6.68 -7 6 C-7.66 6 -8.32 6 -9 6 C-9.33 6.99 -9.66 7.98 -10 9 C-10.33 8.34 -10.66 7.68 -11 7 C-9.21020584 1.63061752 -5.59163302 -0.63904377 0 0 Z \",fill:\"#8A6448\",transform:\"translate(136,519)\"})),_path1911||(_path1911=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C1.66 2 2.32 2 3 2 C3.33 3.32 3.66 4.64 4 6 C4.66 6 5.32 6 6 6 C5.67 7.32 5.34 8.64 5 10 C3.68 9.34 2.36 8.68 1 8 C1 7.34 1 6.68 1 6 C-0.32 6 -1.64 6 -3 6 C-3 5.34 -3 4.68 -3 4 C-2.01 3.67 -1.02 3.34 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#601A1F\",transform:\"translate(261,488)\"})),_path1912||(_path1912=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.96916636 0.51405169 9.29026351 1.23384882 14 3 C14 2.01 14 1.02 14 0 C14.66 0 15.32 0 16 0 C16 1.98 16 3.96 16 6 C10.23955788 5.39363767 5.27985631 3.24341721 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#E8968E\",transform:\"translate(372,490)\"})),_path1913||(_path1913=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.62 0 9.24 0 14 0 C14 0.66 14 1.32 14 2 C10.7 2.66 7.4 3.32 4 4 C4 3.34 4 2.68 4 2 C2.35 2 0.7 2 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#1F0B0A\",transform:\"translate(244,492)\"})),_path1914||(_path1914=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.28 0 10.56 0 16 0 C16 0.66 16 1.32 16 2 C18.97 2 21.94 2 25 2 C20.78370866 4.10814567 18.60209225 4.17700355 14 4 C14 3.01 14 2.02 14 1 C9.38 1 4.76 1 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#582728\",transform:\"translate(384,484)\"})),_path1915||(_path1915=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C1.60328125 3.04898437 2.2065625 3.09796875 2.828125 3.1484375 C3.62734375 3.22320312 4.4265625 3.29796875 5.25 3.375 C6.03890625 3.44460938 6.8278125 3.51421875 7.640625 3.5859375 C10.085877 4.01507113 11.84836903 4.78600638 14 6 C12.22925083 6.02705729 10.45838289 6.04642195 8.6875 6.0625 C7.70136719 6.07410156 6.71523438 6.08570313 5.69921875 6.09765625 C3 6 3 6 0 5 C0 5.99 0 6.98 0 8 C-0.66 8 -1.32 8 -2 8 C-1.34 5.36 -0.68 2.72 0 0 Z \",fill:\"#352927\",transform:\"translate(326,476)\"})),_path1916||(_path1916=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3 1.66 3 2.32 3 3 C5.64 3 8.28 3 11 3 C11 3.33 11 3.66 11 4 C10.20335937 4.04898437 9.40671875 4.09796875 8.5859375 4.1484375 C0.61842686 4.70029395 0.61842686 4.70029395 -7 7 C-5.65117186 2.95351557 -3.65173931 2.04497401 0 0 Z \",fill:\"#D04146\",transform:\"translate(369,470)\"})),_path1917||(_path1917=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-3.7367843 2.49118953 -5.74451819 2.2065226 -10.1875 2.125 C-11.45980469 2.10695313 -12.73210937 2.08890625 -14.04296875 2.0703125 C-15.50669922 2.03550781 -15.50669922 2.03550781 -17 2 C-17.33 1.34 -17.66 0.68 -18 0 C-11.67370431 -0.90375653 -6.32629569 -0.90375653 0 0 Z \",fill:\"#0D1211\",transform:\"translate(433,470)\"})),_path1918||(_path1918=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.0546875 -0.1953125 6.0546875 -0.1953125 8 0 C8.66 0.66 9.32 1.32 10 2 C9.67 2.33 9.34 2.66 9 3 C12.3 4.65 15.6 6.3 19 8 C16 9 16 9 14.19067383 8.37915039 C13.53607178 8.03875732 12.88146973 7.69836426 12.20703125 7.34765625 C11.49482422 6.98349609 10.78261719 6.61933594 10.04882812 6.24414062 C9.31083984 5.85419922 8.57285156 5.46425781 7.8125 5.0625 C7.06291016 4.67642578 6.31332031 4.29035156 5.54101562 3.89257812 C3.68939311 2.93728243 1.84407548 1.96978423 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#AB724E\",transform:\"translate(586,445)\"})),_path1919||(_path1919=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-0.75925781 2.33773438 -1.51851562 2.67546875 -2.30078125 3.0234375 C-3.29464844 3.46945312 -4.28851563 3.91546875 -5.3125 4.375 C-6.29863281 4.81585938 -7.28476563 5.25671875 -8.30078125 5.7109375 C-11.12745207 6.98242758 -11.12745207 6.98242758 -14 9 C-14.99 8.67 -15.98 8.34 -17 8 C-15.58531689 7.03874097 -14.1681636 6.08111675 -12.75 5.125 C-11.96109375 4.59132813 -11.1721875 4.05765625 -10.359375 3.5078125 C-6.49953747 1.04109514 -4.70096675 0 0 0 Z \",fill:\"#664637\",transform:\"translate(80,434)\"})),_path1920||(_path1920=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.7826166 0.66282553 5.48638937 1.43239854 8.1875 2.375 C8.88230469 2.60960937 9.57710937 2.84421875 10.29296875 3.0859375 C12 4 12 4 13 7 C8.545 6.01 8.545 6.01 4 5 C4 4.34 4 3.68 4 3 C3.01 2.67 2.02 2.34 1 2 C0.67 1.34 0.34 0.68 0 0 Z \",fill:\"#734C38\",transform:\"translate(510,423)\"})),_path1921||(_path1921=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.61 0.33 11.22 0.66 17 1 C16.67 1.66 16.34 2.32 16 3 C10.39 3 4.78 3 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#32030B\",transform:\"translate(387,395)\"})),_path1922||(_path1922=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.69738281 0.05220703 1.39476562 0.10441406 2.11328125 0.15820312 C3.82596203 0.28724072 5.53805066 0.42409614 7.25 0.5625 C7.25 0.8925 7.25 1.2225 7.25 1.5625 C0.55324864 2.59276944 -5.9814676 2.66402799 -12.75 2.5625 C-11.75 0.5625 -11.75 0.5625 -10.171875 -0.08984375 C-6.74917164 -0.5811673 -3.42728969 -0.28182817 0 0 Z \",fill:\"#0D0203\",transform:\"translate(152.75,358.4375)\"})),_path1923||(_path1923=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C9.24 0 18.48 0 28 0 C28 0.33 28 0.66 28 1 C20.08 1 12.16 1 4 1 C4 1.99 4 2.98 4 4 C3.01 3.67 2.02 3.34 1 3 C0.67 2.01 0.34 1.02 0 0 Z \",fill:\"#CE9877\",transform:\"translate(373,350)\"})),_path1924||(_path1924=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C2.25 7.625 2.25 7.625 0 11 C-0.70125 10.360625 -1.4025 9.72125 -2.125 9.0625 C-5.22841233 6.83613898 -7.24620139 6.34919057 -11 6 C-11 5.67 -11 5.34 -11 5 C-7.7 5 -4.4 5 -1 5 C-0.67 3.35 -0.34 1.7 0 0 Z \",fill:\"#4A3C19\",transform:\"translate(605,344)\"})),_path1925||(_path1925=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0 3.96 0 6 0 C6 2.97 6 5.94 6 9 C1.3125 5.484375 1.3125 5.484375 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#8E7A67\",transform:\"translate(164,342)\"})),_path1926||(_path1926=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3 2.32 3 3.64 3 5 C3.66 5 4.32 5 5 5 C5.45375 5.804375 5.9075 6.60875 6.375 7.4375 C7.73420995 10.15236193 7.73420995 10.15236193 10.1875 10.8125 C10.785625 10.874375 11.38375 10.93625 12 11 C12 11.66 12 12.32 12 13 C10.35 13 8.7 13 7 13 C7 12.34 7 11.68 7 11 C6.34 11 5.68 11 5 11 C5 10.34 5 9.68 5 9 C4.34 9 3.68 9 3 9 C2.01 6.03 1.02 3.06 0 0 Z \",fill:\"#63111F\",transform:\"translate(75,335)\"})),_path1927||(_path1927=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.69738281 0.00902344 1.39476563 0.01804687 2.11328125 0.02734375 C3.82566958 0.05080112 5.53788004 0.08666896 7.25 0.125 C6.26 1.61 6.26 1.61 5.25 3.125 C2.28471821 3.1812279 -0.43850026 3.08183804 -3.375 2.8125 C-4.17679687 2.75126953 -4.97859375 2.69003906 -5.8046875 2.62695312 C-7.78758124 2.47351492 -9.76898519 2.30104307 -11.75 2.125 C-8.00764681 -0.32489101 -4.30774581 -0.10586143 0 0 Z \",fill:\"#484F4B\",transform:\"translate(121.75,333.875)\"})),_path1928||(_path1928=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0.66 3.96 1.32 6 2 C6.33 4.64 6.66 7.28 7 10 C4.69 9.01 2.38 8.02 0 7 C0.66 6.67 1.32 6.34 2 6 C1.34 4.02 0.68 2.04 0 0 Z \",fill:\"#B1C29B\",transform:\"translate(488,328)\"})),_path1929||(_path1929=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.33 2.64 0.66 4 1 C3.67 1.99 3.34 2.98 3 4 C3.66 4.33 4.32 4.66 5 5 C5 5.66 5 6.32 5 7 C3.02 7.33 1.04 7.66 -1 8 C-1.625 5.6875 -1.625 5.6875 -2 3 C-1.34 2.01 -0.68 1.02 0 0 Z \",fill:\"#09311E\",transform:\"translate(180,327)\"})),_path1930||(_path1930=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4 4.95 4 9.9 4 15 C3.67 15 3.34 15 3 15 C2.67 12.03 2.34 9.06 2 6 C-0.31 5.67 -2.62 5.34 -5 5 C-5 4.67 -5 4.34 -5 4 C-3.35 4 -1.7 4 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#0C0707\",transform:\"translate(345,317)\"})),_path1931||(_path1931=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.37562854 1.28965176 2.70766393 2.62689293 4 4 C4 4.66 4 5.32 4 6 C4.99 6.33 5.98 6.66 7 7 C6.67 7.66 6.34 8.32 6 9 C2.9375 9.625 2.9375 9.625 0 10 C0 9.34 0 8.68 0 8 C0.66 8 1.32 8 2 8 C2 6.68 2 5.36 2 4 C0.02 4.66 -1.96 5.32 -4 6 C-4 5.34 -4 4.68 -4 4 C-3.34 4 -2.68 4 -2 4 C-1.34 2.68 -0.68 1.36 0 0 Z \",fill:\"#ED7C44\",transform:\"translate(188,306)\"})),_path1932||(_path1932=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.96 0 7.92 0 12 0 C12 0.99 12 1.98 12 3 C8.04 3 4.08 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#D5F0AE\",transform:\"translate(512,307)\"})),_path1933||(_path1933=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.33 1.65 1.66 3.3 2 5 C2.99 5 3.98 5 5 5 C5 5.99 5 6.98 5 8 C6.32 8 7.64 8 9 8 C9 8.66 9 9.32 9 10 C6.03 10 3.06 10 0 10 C0 6.7 0 3.4 0 0 Z \",fill:\"#0A1D0C\",transform:\"translate(489,303)\"})),_path1934||(_path1934=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C0.0007135 3.61405704 -1.77924257 4.37645724 -5.75 4.25 C-6.61882812 4.22421875 -7.48765625 4.1984375 -8.3828125 4.171875 C-11.95584942 3.9372278 -15.45786206 3.52476118 -19 3 C-19 2.67 -19 2.34 -19 2 C-17.71222656 1.93941406 -16.42445313 1.87882812 -15.09765625 1.81640625 C-13.41925841 1.73201753 -11.74087364 1.6473687 -10.0625 1.5625 C-8.78729492 1.50352539 -8.78729492 1.50352539 -7.48632812 1.44335938 C-6.67744141 1.40146484 -5.86855469 1.35957031 -5.03515625 1.31640625 C-3.91185913 1.26141968 -3.91185913 1.26141968 -2.76586914 1.20532227 C-0.97538674 1.18228937 -0.97538674 1.18228937 0 0 Z \",fill:\"#975E46\",transform:\"translate(443,297)\"})),_path1935||(_path1935=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.485 0.99 1.485 0.99 3 2 C3 2.99 3 3.98 3 5 C4.65 4.67 6.3 4.34 8 4 C6.68 3.67 5.36 3.34 4 3 C4.33 2.01 4.66 1.02 5 0 C6.65 0.33 8.3 0.66 10 1 C10 2.65 10 4.3 10 6 C8.02 6 6.04 6 4 6 C3.67 6.66 3.34 7.32 3 8 C0 2.25 0 2.25 0 0 Z \",fill:\"#572520\",transform:\"translate(316,292)\"})),_path1936||(_path1936=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.33 0 0.66 0 1 C-7.01805857 2.10087193 -13.90565767 2.09733092 -21 2 C-14.18647235 -1.68502047 -7.41647295 -1.11590449 0 0 Z \",fill:\"#C4B39F\",transform:\"translate(109,292)\"})),_path1937||(_path1937=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C5 2.64 5 5.28 5 8 C3.68 8 2.36 8 1 8 C0.67 5.36 0.34 2.72 0 0 Z \",fill:\"#066F39\",transform:\"translate(135,270)\"})),_path1938||(_path1938=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1.67 1.66 1.34 2.32 1 3 C0.34 3 -0.32 3 -1 3 C-1.33 4.65 -1.66 6.3 -2 8 C-1.01 8.33 -0.02 8.66 1 9 C-0.98 9.33 -2.96 9.66 -5 10 C-5 7.36 -5 4.72 -5 2 C-2.625 0.9375 -2.625 0.9375 0 0 Z \",fill:\"#C19E7C\",transform:\"translate(253,264)\"})),_path1939||(_path1939=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0 5.28 0 8 0 C7.67 1.65 7.34 3.3 7 5 C5.02 5 3.04 5 1 5 C0.67 3.35 0.34 1.7 0 0 Z \",fill:\"#4D5542\",transform:\"translate(368,267)\"})),_path1940||(_path1940=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.99 2 1.98 2 3 C3.32 3.33 4.64 3.66 6 4 C4.60804085 6.7839183 2.84424221 6.97898997 0 8 C-0.99 7.01 -1.98 6.02 -3 5 C-2.34 4.67 -1.68 4.34 -1 4 C-0.34786708 1.97536745 -0.34786708 1.97536745 0 0 Z \",fill:\"#A8614A\",transform:\"translate(181,249)\"})),_path1941||(_path1941=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.41481258 -0.42765417 11.88595404 1.14256832 18 3 C18 3.33 18 3.66 18 4 C16.06280622 4.05406122 14.12518079 4.09282025 12.1875 4.125 C11.10855469 4.14820313 10.02960938 4.17140625 8.91796875 4.1953125 C5.07105111 3.93782136 3.17048343 2.11365562 0 0 Z \",fill:\"#614336\",transform:\"translate(223,252)\"})),_path1942||(_path1942=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.21930632 1.44386126 14.05110733 3.57788174 21 6 C13.9014319 8.13571638 6.52791397 3.70573496 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#402B18\",transform:\"translate(219,243)\"})),_path1943||(_path1943=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0.66 4.62 1.32 7 2 C7 2.99 7 3.98 7 5 C6.01 5 5.02 5 4 5 C3.67 5.99 3.34 6.98 3 8 C2.34 8 1.68 8 1 8 C1 7.01 1 6.02 1 5 C0.34 4.67 -0.32 4.34 -1 4 C-0.67 2.68 -0.34 1.36 0 0 Z \",fill:\"#A35C49\",transform:\"translate(54,237)\"})),_path1944||(_path1944=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.49699606 3.65461928 8.62848394 7.25880554 12 12 C11.67 12.99 11.34 13.98 11 15 C9.0625 14.6875 9.0625 14.6875 7 14 C6.67 13.01 6.34 12.02 6 11 C6.66 11 7.32 11 8 11 C7.50628906 10.45730469 7.01257813 9.91460937 6.50390625 9.35546875 C5.86324219 8.64003906 5.22257813 7.92460937 4.5625 7.1875 C3.92441406 6.47980469 3.28632812 5.77210938 2.62890625 5.04296875 C1 3 1 3 0 0 Z \",fill:\"#36191B\",transform:\"translate(586,209)\"})),_path1945||(_path1945=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.31180732 0.48405436 6.0589554 1.62004866 8.8125 4.9375 C9.41707031 5.64777344 10.02164063 6.35804688 10.64453125 7.08984375 C12 9 12 9 12 11 C12.66 11 13.32 11 14 11 C13.67 12.65 13.34 14.3 13 16 C10 14 10 14 9.1875 10.6875 C7.65837097 5.93915195 5.9633337 4.88993082 2 2 C1.34 1.34 0.68 0.68 0 0 Z \",fill:\"#301216\",transform:\"translate(586,204)\"})),_path1946||(_path1946=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.43791516 0.14168137 2.8753237 0.28851043 4.3125 0.4375 C5.11300781 0.51871094 5.91351563 0.59992188 6.73828125 0.68359375 C9 1 9 1 12 2 C11.67 2.99 11.34 3.98 11 5 C9.54052295 4.93993922 8.08220728 4.8511311 6.625 4.75 C5.81289062 4.70359375 5.00078125 4.6571875 4.1640625 4.609375 C2 4 2 4 0.7109375 1.953125 C0.47632812 1.30859375 0.24171875 0.6640625 0 0 Z \",fill:\"#201718\",transform:\"translate(65,207)\"})),_path1947||(_path1947=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-2.26419196 1.05881632 -4.53435538 2.09702932 -6.8125 3.125 C-7.77639648 3.57939453 -7.77639648 3.57939453 -8.75976562 4.04296875 C-10.64453125 4.8828125 -10.64453125 4.8828125 -14 6 C-14.99 5.34 -15.98 4.68 -17 4 C-15.58521865 3.35004703 -14.16808513 2.70521278 -12.75 2.0625 C-11.96109375 1.70285156 -11.1721875 1.34320313 -10.359375 0.97265625 C-6.46237429 -0.63388875 -4.08933174 -1.31442806 0 0 Z \",fill:\"#594E40\",transform:\"translate(447,201)\"})),_path1948||(_path1948=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.27076842 -0.02699725 4.54162821 -0.04639453 6.8125 -0.0625 C8.07707031 -0.07410156 9.34164063 -0.08570313 10.64453125 -0.09765625 C14 0 14 0 17 1 C17 1.66 17 2.32 17 3 C11.39 2.67 5.78 2.34 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#0B0809\",transform:\"translate(0,170)\"})),_path1949||(_path1949=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3 2.32 3 3.64 3 5 C3.33 5.33 3.66 5.66 4 6 C4.04080783 7.99958364 4.04254356 10.00045254 4 12 C2.35 11.67 0.7 11.34 -1 11 C-0.67 10.34 -0.34 9.68 0 9 C0.06950541 7.45976004 0.08452357 5.91665012 0.0625 4.375 C0.05347656 3.55773437 0.04445312 2.74046875 0.03515625 1.8984375 C0.02355469 1.27195313 0.01195312 0.64546875 0 0 Z \",fill:\"#755E4F\",transform:\"translate(137,139)\"})),_path1950||(_path1950=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.66 1.65 -1.32 3.3 -2 5 C-4.97 4.505 -4.97 4.505 -8 4 C-8 2.68 -8 1.36 -8 0 C-5.13822943 -1.43088528 -3.06624227 -0.59991697 0 0 Z \",fill:\"#7E6644\",transform:\"translate(454,72)\"})),_path1951||(_path1951=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C-0.29296875 4.6015625 -0.29296875 4.6015625 -2.1875 7.625 C-3.10595703 9.12933594 -3.10595703 9.12933594 -4.04296875 10.6640625 C-4.68878906 11.43492187 -5.33460937 12.20578125 -6 13 C-7.32 13 -8.64 13 -10 13 C-10 11 -10 11 -7.8125 8.75 C-6.884375 7.8425 -5.95625 6.935 -5 6 C-3.28800793 4.03352262 -1.64629473 2.02259067 0 0 Z \",fill:\"#553729\",transform:\"translate(54,613)\"})),_path1952||(_path1952=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0 5.28 0 8 0 C8.33 1.32 8.66 2.64 9 4 C6.03 4 3.06 4 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#F6CAA3\",transform:\"translate(333,513)\"})),_path1953||(_path1953=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.475 0.495 2.475 0.495 5 1 C5 1.66 5 2.32 5 3 C5.66 3 6.32 3 7 3 C7 4.65 7 6.3 7 8 C5.68 8 4.36 8 3 8 C0.82542733 5.12645755 0 3.63563409 0 0 Z \",fill:\"#F9DAAB\",transform:\"translate(563,495)\"})),_path1954||(_path1954=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C3.10228696 4.40914783 3.07654536 8.48382401 3 13 C4.32 13.33 5.64 13.66 7 14 C6.34 14 5.68 14 5 14 C4.67 14.66 4.34 15.32 4 16 C2.68 15.67 1.36 15.34 0 15 C0 10.05 0 5.1 0 0 Z \",fill:\"#3C231C\",transform:\"translate(363,436)\"})),_path1955||(_path1955=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.48525648 0.656379 8.66914029 1.70074209 13 3 C12.67 3.99 12.34 4.98 12 6 C7.01208429 5.52496041 3.9767259 4.0298864 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#A0836A\",transform:\"translate(389,416)\"})),_path1956||(_path1956=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.33 0.33 2.66 0.66 3 1 C3 0.67 3 0.34 3 0 C5.64 0 8.28 0 11 0 C8.7962116 2.53435666 7.33421339 3.53691481 4 4 C1.66699067 4.03888349 -0.66709801 4.0448635 -3 4 C-2.67 3.34 -2.34 2.68 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#E98F8A\",transform:\"translate(345,416)\"})),_path1957||(_path1957=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.28 0.66 10.56 1.32 16 2 C16 2.33 16 2.66 16 3 C14.02 3.33 12.04 3.66 10 4 C12.475 4.99 12.475 4.99 15 6 C12.31485266 7.03274898 11.2078412 7.07566569 8.45703125 6.07421875 C7.58433594 5.61660156 6.71164062 5.15898437 5.8125 4.6875 C4.93207031 4.23761719 4.05164063 3.78773438 3.14453125 3.32421875 C1 2 1 2 0 0 Z \",fill:\"#412C20\",transform:\"translate(384,411)\"})),_path1958||(_path1958=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3 0.66 3 1.32 3 2 C0.02534237 3.70754834 -2.13860832 4.27317355 -5.5625 4.25 C-6.70912109 4.25773437 -6.70912109 4.25773437 -7.87890625 4.265625 C-10 4 -10 4 -13 2 C-8.85529486 0.67369435 -3.96769422 0.01615289 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#09080B\",transform:\"translate(365,410)\"})),_path1959||(_path1959=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.0544452 2.20805524 1.09299283 4.41650554 1.125 6.625 C1.14820313 7.85476563 1.17140625 9.08453125 1.1953125 10.3515625 C1.0030428 13.94316041 0.30258556 16.66661175 -1 20 C-1.66 20 -2.32 20 -3 20 C-2.85691406 19.16210938 -2.71382813 18.32421875 -2.56640625 17.4609375 C-1.97619612 13.8545501 -1.44952065 10.24327924 -0.9375 6.625 C-0.76089844 5.37976563 -0.58429688 4.13453125 -0.40234375 2.8515625 C-0.26957031 1.91054688 -0.13679688 0.96953125 0 0 Z \",fill:\"#F8DDA3\",transform:\"translate(337,380)\"})),_path1960||(_path1960=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.96 0 7.92 0 12 0 C12.33 0.99 12.66 1.98 13 3 C11.20841511 3.02696365 9.41671527 3.04637917 7.625 3.0625 C6.62726563 3.07410156 5.62953125 3.08570313 4.6015625 3.09765625 C2 3 2 3 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#054733\",transform:\"translate(478,392)\"})),_path1961||(_path1961=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.67542976 0.28604898 3.34385343 0.61781233 5 1 C5 1.99 5 2.98 5 4 C5.99 4 6.98 4 8 4 C8 4.66 8 5.32 8 6 C5.69 6 3.38 6 1 6 C0.34 4.35 -0.32 2.7 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#94A978\",transform:\"translate(591,388)\"})),_path1962||(_path1962=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.5 1 1.5 1 3 3 C3.27345479 5.71846235 3.13491285 8.25677199 3 11 C3.66 11 4.32 11 5 11 C4.67 12.32 4.34 13.64 4 15 C1.33566992 13.66783496 1.25552841 12.52848372 0.3125 9.75 C-0.83662501 6.14749309 -1.3018401 3.66882211 0 0 Z \",fill:\"#596745\",transform:\"translate(189,383)\"})),_path1963||(_path1963=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.99 2 1.98 2 3 C3.32 3.33 4.64 3.66 6 4 C6 4.99 6 5.98 6 7 C6.99 7.66 7.98 8.32 9 9 C6.69 9 4.38 9 2 9 C1.34 6.03 0.68 3.06 0 0 Z \",fill:\"#719F6B\",transform:\"translate(578,379)\"})),_path1964||(_path1964=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0 3.96 0 6 0 C6 0.66 6 1.32 6 2 C6.66 2 7.32 2 8 2 C8 4.64 8 7.28 8 10 C6.68 10 5.36 10 4 10 C4 9.34 4 8.68 4 8 C4.66 8 5.32 8 6 8 C5.29660434 5.49034386 5.29660434 5.49034386 4 3 C1.95894361 2.11306697 1.95894361 2.11306697 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#34211B\",transform:\"translate(22,378)\"})),_path1965||(_path1965=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.495 0.99 0.495 2 1 C2.4140625 3.06640625 2.4140625 3.06640625 2.625 5.5625 C2.69976562 6.38878906 2.77453125 7.21507812 2.8515625 8.06640625 C2.92503906 9.02353516 2.92503906 9.02353516 3 10 C5.64 10 8.28 10 11 10 C11 10.33 11 10.66 11 11 C7.37 11 3.74 11 0 11 C0 7.37 0 3.74 0 0 Z \",fill:\"#320807\",transform:\"translate(399,371)\"})),_path1966||(_path1966=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1.33333333 3.33333333 -2.66666667 6.66666667 -4 10 C-4.99 9.34 -5.98 8.68 -7 8 C-7 6.68 -7 5.36 -7 4 C-7.66 3.34 -8.32 2.68 -9 2 C-2.25 0 -2.25 0 0 0 Z \",fill:\"#C46860\",transform:\"translate(159,377)\"})),_path1967||(_path1967=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1 3 1 3 0 10 C-5.94 10 -11.88 10 -18 10 C-18 9.67 -18 9.34 -18 9 C-13.05 9 -8.1 9 -3 9 C-2.01 6.03 -1.02 3.06 0 0 Z \",fill:\"#3D2221\",transform:\"translate(246,355)\"})),_path1968||(_path1968=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.96327638 -0.33693273 12.43345544 0.6969113 19 3 C19 3.66 19 4.32 19 5 C14.71 4.34 10.42 3.68 6 3 C6 2.34 6 1.68 6 1 C4.02 1 2.04 1 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#747036\",transform:\"translate(585,343)\"})),_path1969||(_path1969=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.33 0.99 2.66 1.98 3 3 C3.66 3 4.32 3 5 3 C5 3.99 5 4.98 5 6 C5.66 6.33 6.32 6.66 7 7 C4.69 7.33 2.38 7.66 0 8 C-0.38063221 5.6739143 -0.71269945 3.33944736 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#0A1009\",transform:\"translate(460,338)\"})),_path1970||(_path1970=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C2.91284983 1.93833996 2.80467036 3.8757429 2.6875 5.8125 C2.62949219 6.89144531 2.57148438 7.97039062 2.51171875 9.08203125 C1.96931493 12.17497517 1.44710376 13.13022903 -1 15 C-1.18451025 4.44191344 -1.18451025 4.44191344 0 0 Z \",fill:\"#01201A\",transform:\"translate(25,328)\"})),_path1971||(_path1971=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0.99 5.94 1.98 9 3 C8.67 4.65 8.34 6.3 8 8 C7.34 8 6.68 8 6 8 C6 7.34 6 6.68 6 6 C5.01 6 4.02 6 3 6 C3 5.34 3 4.68 3 4 C2.34 4 1.68 4 1 4 C0.67 2.68 0.34 1.36 0 0 Z \",fill:\"#A28F77\",transform:\"translate(308,317)\"})),_path1972||(_path1972=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 1.98 1 3.96 1 6 C1.928125 5.938125 2.85625 5.87625 3.8125 5.8125 C7 6 7 6 10 9 C5.71 9 1.42 9 -3 9 C-2.01 8.67 -1.02 8.34 0 8 C0 5.36 0 2.72 0 0 Z \",fill:\"#664030\",transform:\"translate(203,308)\"})),_path1973||(_path1973=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2.36666667 8.33333333 2.36666667 8.33333333 0.625 11.5 C-1 13 -1 13 -3 13 C-3 12.34 -3 11.68 -3 11 C-5.31 11 -7.62 11 -10 11 C-10 10.67 -10 10.34 -10 10 C-6.7 9.67 -3.4 9.34 0 9 C0 6.03 0 3.06 0 0 Z \",fill:\"#55522F\",transform:\"translate(241,299)\"})),_path1974||(_path1974=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 3.3 1 6.6 1 10 C-3.95 10 -8.9 10 -14 10 C-14 9.67 -14 9.34 -14 9 C-9.59085217 7.89771304 -5.51617599 7.92345464 -1 8 C-0.67 5.36 -0.34 2.72 0 0 Z \",fill:\"#351F08\",transform:\"translate(577,280)\"})),_path1975||(_path1975=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C2.32 1.34 3.64 0.68 5 0 C4.67 1.32 4.34 2.64 4 4 C3.67 4 3.34 4 3 4 C2.67 7.3 2.34 10.6 2 14 C2.99 14.33 3.98 14.66 5 15 C3.68 15 2.36 15 1 15 C-0.09506492 11.71480525 -0.09960608 9.26336585 -0.0625 5.8125 C-0.05347656 4.72582031 -0.04445312 3.63914063 -0.03515625 2.51953125 C-0.02355469 1.68808594 -0.01195312 0.85664063 0 0 Z \",fill:\"#975D4D\",transform:\"translate(3,250)\"})),_path1976||(_path1976=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.01311815 0.81605283 4.20216235 1.31550326 6 3.8125 C6 4.4725 6 5.1325 6 5.8125 C3.15449988 5.15239524 0.47674001 4.29525034 -2.25 3.25 C-2.95640625 2.98058594 -3.6628125 2.71117187 -4.390625 2.43359375 C-4.92171875 2.22863281 -5.4528125 2.02367187 -6 1.8125 C-3 -0.1875 -3 -0.1875 0 0 Z \",fill:\"#DBAF78\",transform:\"translate(221,236.1875)\"})),_path1977||(_path1977=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C1.67 1.32 1.34 2.64 1 4 C1.99 4 2.98 4 4 4 C4.33 3.01 4.66 2.02 5 1 C6.32 1.99 7.64 2.98 9 4 C8.34 4 7.68 4 7 4 C7 5.32 7 6.64 7 8 C4.69 7.34 2.38 6.68 0 6 C-1.125 2.25 -1.125 2.25 0 0 Z \",fill:\"#47332A\",transform:\"translate(177,208)\"})),_path1978||(_path1978=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-1.72681437 2.50806447 -3.45657979 3.00610467 -5.1875 3.5 C-6.63189453 3.91765625 -6.63189453 3.91765625 -8.10546875 4.34375 C-10.85345876 4.96677608 -13.19598416 5.12302812 -16 5 C-15.01 4.67 -14.02 4.34 -13 4 C-13 3.34 -13 2.68 -13 2 C-4.57142857 -0.28571429 -4.57142857 -0.28571429 0 0 Z \",fill:\"#3A8C80\",transform:\"translate(601,184)\"})),_path1979||(_path1979=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C1.34 3.3 0.68 6.6 0 10 C-0.66 10 -1.32 10 -2 10 C-2 9.34 -2 8.68 -2 8 C-2.66 8 -3.32 8 -4 8 C-4 6.02 -4 4.04 -4 2 C-2.68 2 -1.36 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#BA9F74\",transform:\"translate(374,158)\"})),_path1980||(_path1980=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 2.64 1 5.28 1 8 C1.66 8.33 2.32 8.66 3 9 C2.67 9.33 2.34 9.66 2 10 C1.92820036 11.51928038 1.91607993 13.04167482 1.9375 14.5625 C1.94652344 15.38878906 1.95554688 16.21507812 1.96484375 17.06640625 C1.97644531 17.70449219 1.98804688 18.34257812 2 19 C1.01 19.33 0.02 19.66 -1 20 C-1.10152799 13.2314676 -1.03026944 6.69675136 0 0 Z \",fill:\"#4F8474\",transform:\"translate(159,136)\"})),_path1981||(_path1981=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3 4.96 3 8.92 3 13 C2.34 13 1.68 13 1 13 C1 10.69 1 8.38 1 6 C0.34 6 -0.32 6 -1 6 C-1.042721 4.33388095 -1.04063832 2.66617115 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#DE5F53\",transform:\"translate(147,139)\"})),_path1982||(_path1982=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3.33 0.66 3.66 1.32 4 2 C4 1.34 4 0.68 4 0 C4.99 0.33 5.98 0.66 7 1 C6.75 3.375 6.75 3.375 6 6 C3.9375 7.3125 3.9375 7.3125 2 8 C1.67 6.68 1.34 5.36 1 4 C0.34 4 -0.32 4 -1 4 C-0.67 2.68 -0.34 1.36 0 0 Z \",fill:\"#B99C75\",transform:\"translate(179,139)\"})),_path1983||(_path1983=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0.66 4.62 1.32 7 2 C6.34 2.66 5.68 3.32 5 4 C4.01 4 3.02 4 2 4 C2.99 4.66 3.98 5.32 5 6 C3.68 6 2.36 6 1 6 C1 6.66 1 7.32 1 8 C-1.46800047 6.84826645 -3.04783565 5.95216435 -5 4 C-3.35 4 -1.7 4 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#2A1815\",transform:\"translate(9,128)\"})),_path1984||(_path1984=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.125 0.9375 2.125 0.9375 4 2 C3.67 2.66 3.34 3.32 3 4 C4.32 4 5.64 4 7 4 C7.66 5.98 8.32 7.96 9 10 C0.6849642 5.3627685 0.6849642 5.3627685 -2 3 C-2 2.34 -2 1.68 -2 1 C-1.34 0.67 -0.68 0.34 0 0 Z \",fill:\"#41342E\",transform:\"translate(111,123)\"})),_path1985||(_path1985=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C-0.09966775 3.29549899 -1.20491801 4.58626071 -2.3125 5.875 C-2.92738281 6.59429687 -3.54226563 7.31359375 -4.17578125 8.0546875 C-6 10 -6 10 -9 12 C-8.67 10.35 -8.34 8.7 -8 7 C-7.34 7 -6.68 7 -6 7 C-5.34 5.68 -4.68 4.36 -4 3 C-3.34 3 -2.68 3 -2 3 C-2 2.34 -2 1.68 -2 1 C-1.34 0.67 -0.68 0.34 0 0 Z \",fill:\"#7E9C81\",transform:\"translate(425,117)\"})),_path1986||(_path1986=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.63 0.33 7.26 0.66 11 1 C10.67 1.99 10.34 2.98 10 4 C6.7 4 3.4 4 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#D0A06D\",transform:\"translate(447,65)\"})),_path1987||(_path1987=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.31047865 8.56662354 4.31047865 8.56662354 4 14 C3.01 14 2.02 14 1 14 C-0.04976964 10.85069107 -0.10131595 8.61185544 -0.0625 5.3125 C-0.05347656 4.31863281 -0.04445313 3.32476563 -0.03515625 2.30078125 C-0.02355469 1.54152344 -0.01195312 0.78226563 0 0 Z \",fill:\"#A3795E\",transform:\"translate(381,612)\"})),_path1988||(_path1988=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C2.32 1.34 3.64 0.68 5 0 C4.67 0.99 4.34 1.98 4 3 C3.34 3 2.68 3 2 3 C1.89816406 3.58265625 1.79632813 4.1653125 1.69140625 4.765625 C0.88482847 7.37219275 -0.24157009 8.73535414 -2.0625 10.75 C-2.61035156 11.36359375 -3.15820312 11.9771875 -3.72265625 12.609375 C-4.14417969 13.06828125 -4.56570312 13.5271875 -5 14 C-5 10.06764531 -3.45054659 8.97035951 -1 6 C-0.67 5.01 -0.34 4.02 0 3 C-0.99 3.33 -1.98 3.66 -3 4 C-3 3.34 -3 2.68 -3 2 C-2.01 1.34 -1.02 0.68 0 0 Z \",fill:\"#734F3C\",transform:\"translate(64,603)\"})),_path1989||(_path1989=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C0.6302836 4.99500618 -1.25722422 7.80009492 -4 11 C-4.66 10.67 -5.32 10.34 -6 10 C-6 9.34 -6 8.68 -6 8 C-5.34 8 -4.68 8 -4 8 C-3.896875 7.236875 -3.79375 6.47375 -3.6875 5.6875 C-2.95635961 2.82940576 -2.23048087 1.84257115 0 0 Z \",fill:\"#7A503C\",transform:\"translate(143,520)\"})),_path1990||(_path1990=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C6 3 6 3 5.75 6.125 C5.5025 7.07375 5.255 8.0225 5 9 C4.01 9.495 4.01 9.495 3 10 C2.01 6.7 1.02 3.4 0 0 Z \",fill:\"#4B2D22\",transform:\"translate(393,524)\"})),_path1991||(_path1991=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C4.67 0.99 4.34 1.98 4 3 C5.98 3.66 7.96 4.32 10 5 C10 5.33 10 5.66 10 6 C6.04 6 2.08 6 -2 6 C-1.34 5.67 -0.68 5.34 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#181010\",transform:\"translate(350,481)\"})),_path1992||(_path1992=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.96 0 7.92 0 12 0 C12.33 0.99 12.66 1.98 13 3 C9.0186217 4.3271261 5.14954773 4.06915913 1 4 C1.33 3.34 1.66 2.68 2 2 C1.34 1.34 0.68 0.68 0 0 Z \",fill:\"#922927\",transform:\"translate(427,482)\"})),_path1993||(_path1993=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.475 0.495 2.475 0.495 5 1 C4.67 2.65 4.34 4.3 4 6 C3.01 6 2.02 6 1 6 C1 9.3 1 12.6 1 16 C0.67 16 0.34 16 0 16 C0 10.72 0 5.44 0 0 Z \",fill:\"#21151B\",transform:\"translate(281,464)\"})),_path1994||(_path1994=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.29 0 8.58 0 13 0 C13 0.66 13 1.32 13 2 C9.10835652 3.29721449 6.10570774 3.13033993 2 3 C1.34 2.67 0.68 2.34 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#F07F74\",transform:\"translate(313,452)\"})),_path1995||(_path1995=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.89992483 -0.76128062 10.8858849 2.44294245 16 5 C16 5.66 16 6.32 16 7 C4.00448483 4.03788505 4.00448483 4.03788505 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#6B4430\",transform:\"translate(610,433)\"})),_path1996||(_path1996=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3 1 3 1 5 3 C5.33 3.99 5.66 4.98 6 6 C5.67 6.66 5.34 7.32 5 8 C2.9375 8.625 2.9375 8.625 1 9 C0.63877119 7.68942607 0.28619689 6.37646376 -0.0625 5.0625 C-0.35833984 3.96615234 -0.35833984 3.96615234 -0.66015625 2.84765625 C-0.77230469 2.23792969 -0.88445313 1.62820313 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#0D2D14\",transform:\"translate(531,394)\"})),_path1997||(_path1997=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.39205856 0.72362927 12.68027076 1.80343362 19 3 C19 3.33 19 3.66 19 4 C12.88909517 4.09945415 7.02596573 4.0712828 1 3 C0.67 2.01 0.34 1.02 0 0 Z \",fill:\"#CC413A\",transform:\"translate(6,394)\"})),_path1998||(_path1998=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.125 0.375 2.125 0.375 4 1 C3.62875 1.886875 3.2575 2.77375 2.875 3.6875 C1.870252 7.49118884 2.41206891 8.54391469 4 12 C3.67 12.99 3.34 13.98 3 15 C1.35 10.71 -0.3 6.42 -2 2 C-1.34 1.34 -0.68 0.68 0 0 Z \",fill:\"#344F35\",transform:\"translate(431,375)\"})),_path1999||(_path1999=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3 1.66 3 2.32 3 3 C1.68 3 0.36 3 -1 3 C-1.66 4.32 -2.32 5.64 -3 7 C-0.69 7.66 1.62 8.32 4 9 C-0.00200378 10.60080151 -3.04556236 9.29279692 -7 8 C-6.02133662 6.85373678 -5.04205413 5.70800212 -4.0625 4.5625 C-3.51722656 3.92441406 -2.97195312 3.28632813 -2.41015625 2.62890625 C-1.63204305 1.73008851 -0.84063472 0.84063472 0 0 Z \",fill:\"#B6A785\",transform:\"translate(101,362)\"})),_path2000||(_path2000=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 3.75 2 3.75 2 6 C0.54054712 5.91291331 -0.91765868 5.80473093 -2.375 5.6875 C-3.18710937 5.62949219 -3.99921875 5.57148438 -4.8359375 5.51171875 C-7 5 -7 5 -9 2 C-6.03 2 -3.06 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#F99B83\",transform:\"translate(372,358)\"})),_path2001||(_path2001=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 1.32 0.66 2.64 1 4 C0.34 4 -0.32 4 -1 4 C-1 4.66 -1 5.32 -1 6 C-4.01031744 6.93423645 -4.86650268 7.04449911 -8 6 C-8 5.34 -8 4.68 -8 4 C-6.68 4 -5.36 4 -4 4 C-4 3.34 -4 2.68 -4 2 C-4.66 1.67 -5.32 1.34 -6 1 C-4.02 0.67 -2.04 0.34 0 0 Z \",fill:\"#F0F0DB\",transform:\"translate(113,358)\"})),_path2002||(_path2002=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.96 0 7.92 0 12 0 C11.67 0.99 11.34 1.98 11 3 C7.7 3 4.4 3 1 3 C0.67 2.01 0.34 1.02 0 0 Z \",fill:\"#341210\",transform:\"translate(296,356)\"})),_path2003||(_path2003=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C6.28 2 11.56 2 17 2 C17 2.33 17 2.66 17 3 C8.09 3.99 8.09 3.99 -1 5 C-1 5.99 -1 6.98 -1 8 C-1.66 8 -2.32 8 -3 8 C-1.125 2.25 -1.125 2.25 0 0 Z \",fill:\"#643325\",transform:\"translate(123,354)\"})),_path2004||(_path2004=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.125 5.75 1.125 5.75 0 8 C-3.375 8.8125 -3.375 8.8125 -7 9 C-8.9375 7.5625 -8.9375 7.5625 -10 6 C-6.78548731 4.39274365 -3.56387464 4.94251815 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#735039\",transform:\"translate(554,343)\"})),_path2005||(_path2005=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 1.65 2 3.3 2 5 C1.31292969 5.04898437 0.62585938 5.09796875 -0.08203125 5.1484375 C-0.98308594 5.22320312 -1.88414062 5.29796875 -2.8125 5.375 C-3.70582031 5.44460938 -4.59914063 5.51421875 -5.51953125 5.5859375 C-8.24398499 5.86645036 -8.24398499 5.86645036 -11 8 C-10.625 6.0625 -10.625 6.0625 -10 4 C-6.78548731 2.39274365 -3.56387464 2.94251815 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#CF8774\",transform:\"translate(360,343)\"})),_path2006||(_path2006=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.96 0 7.92 0 12 0 C12 0.99 12 1.98 12 3 C10.37509046 3.02698189 8.75005367 3.04638757 7.125 3.0625 C5.76761719 3.07990234 5.76761719 3.07990234 4.3828125 3.09765625 C2 3 2 3 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#7A4E3C\",transform:\"translate(614,345)\"})),_path2007||(_path2007=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.27 0 12.54 0 19 0 C19 1.32 19 2.64 19 4 C18.34 4 17.68 4 17 4 C17 3.34 17 2.68 17 2 C11.39 1.67 5.78 1.34 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#E3AEA0\",transform:\"translate(242,341)\"})),_path2008||(_path2008=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 3.96 1 7.92 1 12 C-0.65 11.67 -2.3 11.34 -4 11 C-4 7.7 -4 4.4 -4 1 C-3.67 1 -3.34 1 -3 1 C-2.67 3.31 -2.34 5.62 -2 8 C-1.34 5.36 -0.68 2.72 0 0 Z \",fill:\"#23130C\",transform:\"translate(351,322)\"})),_path2009||(_path2009=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C2.175625 1.9071875 2.175625 1.9071875 3.375 1.8125 C4.674375 1.9053125 4.674375 1.9053125 6 2 C8.29013653 5.4352048 8.17842973 6.985331 8 11 C7.01 10.34 6.02 9.68 5 9 C5 7.68 5 6.36 5 5 C3.35 4.67 1.7 4.34 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#4A130F\",transform:\"translate(108,311)\"})),_path2010||(_path2010=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.33 0 0.66 0 1 C-3.3 1 -6.6 1 -10 1 C-10 1.66 -10 2.32 -10 3 C-14.62 3 -19.24 3 -24 3 C-24 2.67 -24 2.34 -24 2 C-15.91191011 0.39385449 -8.2425317 -0.26305952 0 0 Z \",fill:\"#675546\",transform:\"translate(106,305)\"})),_path2011||(_path2011=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.3828125 -0.29296875 2.3828125 -0.29296875 5.125 -0.1875 C6.03507812 -0.16042969 6.94515625 -0.13335937 7.8828125 -0.10546875 C8.58148438 -0.07066406 9.28015625 -0.03585937 10 0 C10 1.32 10 2.64 10 4 C6.04 3.67 2.08 3.34 -2 3 C-1.34 2.01 -0.68 1.02 0 0 Z \",fill:\"#BE7655\",transform:\"translate(410,289)\"})),_path2012||(_path2012=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.93 0 13.86 0 21 0 C21 0.33 21 0.66 21 1 C18.69 1 16.38 1 14 1 C14 2.98 14 4.96 14 7 C13.34 6.67 12.68 6.34 12 6 C11.67 4.35 11.34 2.7 11 1 C7.37 1 3.74 1 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#31422E\",transform:\"translate(386,266)\"})),_path2013||(_path2013=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.0625 1.5625 2.0625 1.5625 4 4 C3.75 7.75 3.75 7.75 3 11 C2.01 11.33 1.02 11.66 0 12 C-0.66 10.02 -1.32 8.04 -2 6 C-1.34 5.67 -0.68 5.34 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#B56A54\",transform:\"translate(153,249)\"})),_path2014||(_path2014=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.475 0.99 2.475 0.99 5 2 C5.125 8.75 5.125 8.75 4 11 C2.68 10.67 1.36 10.34 0 10 C-0.33 8.68 -0.66 7.36 -1 6 C-0.01 6 0.98 6 2 6 C2.33 5.01 2.66 4.02 3 3 C2.01 3 1.02 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#6D4834\",transform:\"translate(114,245)\"})),_path2015||(_path2015=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.928125 0.5259375 0.928125 0.5259375 1.875 1.0625 C2.57625 1.371875 3.2775 1.68125 4 2 C4.66 1.67 5.32 1.34 6 1 C6 2.32 6 3.64 6 5 C5.34 5 4.68 5 4 5 C4 5.99 4 6.98 4 8 C3.01 8 2.02 8 1 8 C0.34 5.69 -0.32 3.38 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#543227\",transform:\"translate(35,250)\"})),_path2016||(_path2016=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 1.32 0 2.64 0 4 C-4.29 4 -8.58 4 -13 4 C-9.4281377 0.4281377 -4.89813766 0 0 0 Z \",fill:\"#2A3932\",transform:\"translate(548,201)\"})),_path2017||(_path2017=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3 1.66 3 2.32 3 3 C4.65 3.33 6.3 3.66 8 4 C8.33 4.99 8.66 5.98 9 7 C6.69 6.34 4.38 5.68 2 5 C1.67 5.99 1.34 6.98 1 8 C0.34 5.69 -0.32 3.38 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#422D25\",transform:\"translate(142,192)\"})),_path2018||(_path2018=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-2.43123269 1.36663387 -4.86886163 2.7183867 -7.3125 4.0625 C-8.00279297 4.45244141 -8.69308594 4.84238281 -9.40429688 5.24414062 C-11.22925688 6.24037483 -13.11273877 7.12752842 -15 8 C-15.99 7.67 -16.98 7.34 -18 7 C-15.75820623 5.63034792 -13.50827662 4.27947192 -11.25 2.9375 C-10.61578125 2.54755859 -9.9815625 2.15761719 -9.328125 1.75585938 C-5.74435102 -0.35334093 -3.96345928 -1.34013518 0 0 Z \",fill:\"#615043\",transform:\"translate(433,189)\"})),_path2019||(_path2019=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.98275588 2.94826763 3.13414725 4.92652504 3.125 8 C3.12757813 8.86625 3.13015625 9.7325 3.1328125 10.625 C3 13 3 13 2 16 C1.34 16 0.68 16 0 16 C0 10.72 0 5.44 0 0 Z \",fill:\"#73A997\",transform:\"translate(188,166)\"})),_path2020||(_path2020=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-2.45620851 3.17133058 -4.91474917 4.33721722 -7.375 5.5 C-8.07367187 5.83386719 -8.77234375 6.16773438 -9.4921875 6.51171875 C-14.7734375 9 -14.7734375 9 -17 9 C-16 6 -16 6 -13.85546875 4.90234375 C-12.97503906 4.58394531 -12.09460938 4.26554688 -11.1875 3.9375 C-7.43028393 2.55564195 -7.43028393 2.55564195 -3.80078125 0.87890625 C-2 0 -2 0 0 0 Z \",fill:\"#3D2F2A\",transform:\"translate(525,152)\"})),_path2021||(_path2021=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1 3 -1 3 -3.25 4.3515625 C-4.1575 4.77179688 -5.065 5.19203125 -6 5.625 C-9.22632063 6.97651725 -9.22632063 6.97651725 -12 9 C-13.66617115 9.04063832 -15.33388095 9.042721 -17 9 C-13.94746898 6.59124922 -10.78648153 4.67456202 -7.375 2.8125 C-6.41335938 2.28269531 -5.45171875 1.75289062 -4.4609375 1.20703125 C-2 0 -2 0 0 0 Z \",fill:\"#46463C\",transform:\"translate(538,141)\"})),_path2022||(_path2022=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 0 2 0 3.625 1.5 C5.61605945 5.12010808 5.2050035 7.89993009 5 12 C4.34 12 3.68 12 3 12 C2.87625 11.195625 2.7525 10.39125 2.625 9.5625 C2.315625 8.2940625 2.315625 8.2940625 2 7 C1.34 6.67 0.68 6.34 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#B1885D\",transform:\"translate(105,23)\"})),_path2023||(_path2023=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1.56129062 4.21548466 -4.58691713 6.22687017 -8 9 C-8.99 10.485 -8.99 10.485 -10 12 C-10.99 11.67 -11.98 11.34 -13 11 C-10.36 8.36 -7.72 5.72 -5 3 C-5.33 2.34 -5.66 1.68 -6 1 C-3 0 -3 0 0 0 Z \",fill:\"#324435\",transform:\"translate(568,5)\"})),_path2024||(_path2024=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C5.4375 2.1875 5.4375 2.1875 7 5 C7.886875 5.886875 8.77375 6.77375 9.6875 7.6875 C12 10 12 10 12 12 C11.34 12 10.68 12 10 12 C10 11.34 10 10.68 10 10 C9.34 10 8.68 10 8 10 C8 9.34 8 8.68 8 8 C6.68 7.67 5.36 7.34 4 7 C4 6.01 4 5.02 4 4 C3.34 4 2.68 4 2 4 C2 3.34 2 2.68 2 2 C1.34 2 0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#311E1D\",transform:\"translate(570,576)\"})),_path2025||(_path2025=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.3734229 1.44575267 5.61595146 3.2049086 8 6 C8.75 8.25 8.75 8.25 9 10 C5.55261628 8.46782946 2.74690118 6.59429556 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#6B4637\",transform:\"translate(560,506)\"})),_path2026||(_path2026=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.47932789 1.54545146 10.11429181 4.15543212 15 7 C13 8 13 8 10.3984375 7.22265625 C8.90183594 6.64837891 8.90183594 6.64837891 7.375 6.0625 C6.37210938 5.68222656 5.36921875 5.30195313 4.3359375 4.91015625 C3.17964844 4.45962891 3.17964844 4.45962891 2 4 C2 3.34 2 2.68 2 2 C1.34 2 0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#764E3A\",transform:\"translate(606,479)\"})),_path2027||(_path2027=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C-3.39304453 5.33788364 -8.30108234 7.34211897 -15 9 C-14.67 8.01 -14.34 7.02 -14 6 C-12.35 6 -10.7 6 -9 6 C-9 5.34 -9 4.68 -9 4 C-7.54618103 3.30300448 -6.08677047 2.61766134 -4.625 1.9375 C-3.81289063 1.55464844 -3.00078125 1.17179687 -2.1640625 0.77734375 C-1.09285156 0.39255859 -1.09285156 0.39255859 0 0 Z \",fill:\"#443329\",transform:\"translate(43,476)\"})),_path2028||(_path2028=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.33 1.32 -0.66 2.64 -1 4 C-2.98 4 -4.96 4 -7 4 C-7.33 3.34 -7.66 2.68 -8 2 C-10.12576782 1.53348793 -10.12576782 1.53348793 -12.5625 1.375 C-13.38878906 1.30023438 -14.21507812 1.22546875 -15.06640625 1.1484375 C-15.70449219 1.09945313 -16.34257812 1.05046875 -17 1 C-17 0.67 -17 0.34 -17 0 C-14.54203147 -0.19436491 -12.08390706 -0.3807742 -9.625 -0.5625 C-8.92632812 -0.61857422 -8.22765625 -0.67464844 -7.5078125 -0.73242188 C-2.2265625 -1.11328125 -2.2265625 -1.11328125 0 0 Z \",fill:\"#AE2127\",transform:\"translate(191,474)\"})),_path2029||(_path2029=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.50539661 0.94983358 3.00420347 1.91011891 4.5 2.875 C5.75296875 3.67550781 5.75296875 3.67550781 7.03125 4.4921875 C7.6809375 4.98976563 8.330625 5.48734375 9 6 C9 6.66 9 7.32 9 8 C8.34 8 7.68 8 7 8 C6.67 8.66 6.34 9.32 6 10 C4.29115995 8.37660195 2.62553283 6.70680947 1 5 C1 4.34 1 3.68 1 3 C0.67 2.01 0.34 1.02 0 0 Z \",fill:\"#EECFAA\",transform:\"translate(526,467)\"})),_path2030||(_path2030=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.33 1.98 2.66 3.96 3 6 C3.66 6 4.32 6 5 6 C6.625 8 6.625 8 8 10 C5.69 10 3.38 10 1 10 C0.63883954 8.5225254 0.28624952 7.04295325 -0.0625 5.5625 C-0.25972656 4.73878906 -0.45695312 3.91507812 -0.66015625 3.06640625 C-0.82837891 2.04353516 -0.82837891 2.04353516 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#F75253\",transform:\"translate(323,454)\"})),_path2031||(_path2031=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.62 0 9.24 0 14 0 C14.99 2.64 15.98 5.28 17 8 C16.01 8 15.02 8 14 8 C14 7.01 14 6.02 14 5 C13.34 5 12.68 5 12 5 C12 3.68 12 2.36 12 1 C8.04 1 4.08 1 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#572B2D\",transform:\"translate(190,451)\"})),_path2032||(_path2032=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.75 0.875 4.75 0.875 7 2 C7 3.32 7 4.64 7 6 C0.25 5.25 0.25 5.25 -2 3 C-1.01 3 -0.02 3 1 3 C0.67 2.01 0.34 1.02 0 0 Z \",fill:\"#A26C4C\",transform:\"translate(619,442)\"})),_path2033||(_path2033=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.5625 1 3.5625 1 6 2 C6 2.66 6 3.32 6 4 C0.06 3.34 -5.88 2.68 -12 2 C-7.94317738 -0.70454841 -4.75789116 -0.42076588 0 0 Z \",fill:\"#BB7553\",transform:\"translate(620,405)\"})),_path2034||(_path2034=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.33 1.98 2.66 3.96 3 6 C3.33 6 3.66 6 4 6 C4 8.64 4 11.28 4 14 C2.68 14 1.36 14 0 14 C0 9.38 0 4.76 0 0 Z \",fill:\"#A53F35\",transform:\"translate(310,384)\"})),_path2035||(_path2035=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.63 1.32 7.26 2.64 11 4 C10.01 5.485 10.01 5.485 9 7 C4.16743695 6.58578031 2.17320782 4.53586014 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#B76E57\",transform:\"translate(350,387)\"})),_path2036||(_path2036=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3.33 3.31 3.66 5.62 4 8 C4.99 8.33 5.98 8.66 7 9 C4.69 9 2.38 9 0 9 C0 6.03 0 3.06 0 0 Z \",fill:\"#3A1611\",transform:\"translate(80,383)\"})),_path2037||(_path2037=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.99 1.485 -0.99 1.485 -2 3 C-1.01 3.66 -0.02 4.32 1 5 C1 5.66 1 6.32 1 7 C-1.31 6.67 -3.62 6.34 -6 6 C-6 4.02 -6 2.04 -6 0 C-3 -1 -3 -1 0 0 Z \",fill:\"#D4BA7B\",transform:\"translate(97,381)\"})),_path2038||(_path2038=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.37590142 3.70416126 2.20500286 6.92984573 2.125 11.25 C2.10695313 12.51328125 2.08890625 13.7765625 2.0703125 15.078125 C2.03550781 16.52445312 2.03550781 16.52445312 2 18 C-0.32197421 14.51703868 -0.40590968 12.56903016 -0.6875 8.4375 C-0.77386719 7.28121094 -0.86023438 6.12492187 -0.94921875 4.93359375 C-1 2 -1 2 0 0 Z \",fill:\"#3F2309\",transform:\"translate(570,350)\"})),_path2039||(_path2039=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3.33 2.97 3.66 5.94 4 9 C2.68 9 1.36 9 0 9 C0 6.03 0 3.06 0 0 Z \",fill:\"#F7E3C6\",transform:\"translate(368,351)\"})),_path2040||(_path2040=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.63 0 7.26 0 11 0 C11.33 1.65 11.66 3.3 12 5 C11.34 5 10.68 5 10 5 C10 4.34 10 3.68 10 3 C7.03 2.67 4.06 2.34 1 2 C0.67 3.32 0.34 4.64 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#4F0818\",transform:\"translate(336,354)\"})),_path2041||(_path2041=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 2.97 1 5.94 1 9 C1.66 9 2.32 9 3 9 C3 12.3 3 15.6 3 19 C-0.28912736 14.61449685 -0.37748314 12.40390167 -0.1875 7.25 C-0.17396484 6.55261719 -0.16042969 5.85523438 -0.14648438 5.13671875 C-0.1112945 3.42414459 -0.05749155 1.71197059 0 0 Z \",fill:\"#6F3533\",transform:\"translate(289,339)\"})),_path2042||(_path2042=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3 1.65 3 3.3 3 5 C2.34 5 1.68 5 1 5 C1 6.32 1 7.64 1 9 C0.34 9 -0.32 9 -1 9 C-1 10.32 -1 11.64 -1 13 C-1.66 13 -2.32 13 -3 13 C-2.68991116 11.39536551 -2.37683713 9.79130769 -2.0625 8.1875 C-1.88847656 7.29417969 -1.71445313 6.40085937 -1.53515625 5.48046875 C-1 3 -1 3 0 0 Z \",fill:\"#103F67\",transform:\"translate(103,339)\"})),_path2043||(_path2043=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.28 0.33 10.56 0.66 16 1 C16 2.65 16 4.3 16 6 C15.67 5.34 15.34 4.68 15 4 C14.34 4 13.68 4 13 4 C13 4.66 13 5.32 13 6 C12.34 6 11.68 6 11 6 C11 4.68 11 3.36 11 2 C8.02148438 2.09765625 8.02148438 2.09765625 5.04296875 2.1953125 C3 2 3 2 0 0 Z \",fill:\"#AF151A\",transform:\"translate(365,342)\"})),_path2044||(_path2044=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.3 0.66 6.6 1.32 10 2 C10 2.33 10 2.66 10 3 C7 4 4 5 1 6 C0.26676204 8.01508358 0.26676204 8.01508358 0 10 C-1.231394 6.30581799 -0.64432764 3.7943739 0 0 Z \",fill:\"#775544\",transform:\"translate(352,327)\"})),_path2045||(_path2045=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.6875 1.9375 -0.6875 1.9375 -2 4 C-4.4375 4.9375 -4.4375 4.9375 -7 5 C-8.8125 3.5625 -8.8125 3.5625 -10 2 C-6.49223216 0.39644899 -3.85645121 -0.22036864 0 0 Z \",fill:\"#AAB1BB\",transform:\"translate(218,323)\"})),_path2046||(_path2046=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0 3.96 0 6 0 C6 2.31 6 4.62 6 7 C5.01 7 4.02 7 3 7 C0.64276511 4.46815512 0 3.52809907 0 0 Z \",fill:\"#F5E6B9\",transform:\"translate(394,309)\"})),_path2047||(_path2047=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.99 0 1.98 0 3 C-3.96 3 -7.92 3 -12 3 C-12 2.67 -12 2.34 -12 2 C-10.02 2 -8.04 2 -6 2 C-6 1.34 -6 0.68 -6 0 C-7.32 -0.33 -8.64 -0.66 -10 -1 C-6.18510326 -2.46726798 -3.70988378 -1.43336419 0 0 Z \",fill:\"#F8DFAA\",transform:\"translate(176,298)\"})),_path2048||(_path2048=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.14229879 3.42689636 0.90861076 5.61102218 0.5625 9.1875 C0.40974609 10.81751953 0.40974609 10.81751953 0.25390625 12.48046875 C0.17011719 13.31191406 0.08632812 14.14335937 0 15 C-0.99 15 -1.98 15 -3 15 C-2.8858134 13.06183265 -2.75826577 11.12444901 -2.625 9.1875 C-2.55539063 8.10855469 -2.48578125 7.02960938 -2.4140625 5.91796875 C-2 3 -2 3 0 0 Z \",fill:\"#C2BE92\",transform:\"translate(90,273)\"})),_path2049||(_path2049=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.66 1.65 -1.32 3.3 -2 5 C0.31 5 2.62 5 5 5 C4.67 5.66 4.34 6.32 4 7 C0.9375 7.625 0.9375 7.625 -2 8 C-5 4.375 -5 4.375 -5 1 C-2 0 -2 0 0 0 Z \",fill:\"#604A3C\",transform:\"translate(342,227)\"})),_path2050||(_path2050=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 1.65 0 3.3 0 5 C-4.95 5 -9.9 5 -15 5 C-12.00262497 3.00174998 -9.82427561 2.27599812 -6.375 1.375 C-5.39273438 1.11460937 -4.41046875 0.85421875 -3.3984375 0.5859375 C-1 0 -1 0 0 0 Z \",fill:\"#36453B\",transform:\"translate(520,208)\"})),_path2051||(_path2051=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C-4.94 2 -10.88 2 -17 2 C-17 1.67 -17 1.34 -17 1 C-11.17248537 -0.80123179 -5.99944443 -1.62785801 0 0 Z \",fill:\"#251614\",transform:\"translate(116,209)\"})),_path2052||(_path2052=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.3 0 6.6 0 10 0 C10 1.32 10 2.64 10 4 C8.35 4.33 6.7 4.66 5 5 C5.33 4.34 5.66 3.68 6 3 C4.02 3 2.04 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#533431\",transform:\"translate(426,192)\"})),_path2053||(_path2053=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-2.45570175 1.33838733 -4.91429916 2.67086232 -7.375 4 C-8.42300781 4.57234375 -8.42300781 4.57234375 -9.4921875 5.15625 C-14.7734375 8 -14.7734375 8 -17 8 C-16.67 7.01 -16.34 6.02 -16 5 C-14.32346698 4.21104328 -12.63872195 3.43291525 -10.91015625 2.765625 C-8.73094574 1.9337244 -8.73094574 1.9337244 -5.75 0.25 C-3 -1 -3 -1 0 0 Z \",fill:\"#51473D\",transform:\"translate(571,128)\"})),_path2054||(_path2054=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.62276315 1.3255581 6.63505348 2.94346955 9.8125 5.125 C10.60269531 5.66382812 11.39289062 6.20265625 12.20703125 6.7578125 C12.79871094 7.16773437 13.39039063 7.57765625 14 8 C13.67 8.66 13.34 9.32 13 10 C10.525 9.01 10.525 9.01 8 8 C8 7.34 8 6.68 8 6 C7.4225 5.7525 6.845 5.505 6.25 5.25 C3.6997003 3.83316683 1.98214299 2.12372463 0 0 Z \",fill:\"#160F10\",transform:\"translate(33,66)\"})),_path2055||(_path2055=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C4.88391785 3.26545761 5.49287967 6.28111761 6 10 C3 9 3 9 1.83203125 7.15234375 C1.49558594 6.42144531 1.15914062 5.69054688 0.8125 4.9375 C0.46832031 4.20402344 0.12414062 3.47054687 -0.23046875 2.71484375 C-0.48441406 2.14894531 -0.73835937 1.58304688 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#2A1513\",transform:\"translate(130,48)\"})),_path2056||(_path2056=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.375 0.25 2.375 0.25 5 1 C6.1875 3 6.1875 3 7 5 C7.66 5.33 8.32 5.66 9 6 C7.3125 6.75 7.3125 6.75 5 7 C2.25 5.25 2.25 5.25 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#432A22\",transform:\"translate(610,564)\"})),_path2057||(_path2057=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.40489519 1.52012677 8.98492628 5.27385218 13 9 C12.01 9.33 11.02 9.66 10 10 C7.51953125 8.41796875 7.51953125 8.41796875 4.8125 6.1875 C3.91144531 5.45917969 3.01039063 4.73085938 2.08203125 3.98046875 C1.39496094 3.32691406 0.70789063 2.67335938 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#895E45\",transform:\"translate(559,510)\"})),_path2058||(_path2058=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.12583611 -0.10251672 9.94997778 -0.03590199 15 1 C15 1.66 15 2.32 15 3 C9.84828377 3.09038099 5.08086796 2.84681133 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#B46B65\",transform:\"translate(223,501)\"})),_path2059||(_path2059=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.134375 0.020625 2.26875 0.04125 3.4375 0.0625 C3.4375 1.0525 3.4375 2.0425 3.4375 3.0625 C2.75042969 3.19527344 2.06335938 3.32804687 1.35546875 3.46484375 C0.00388672 3.72974609 0.00388672 3.72974609 -1.375 4 C-2.71498047 4.26103516 -2.71498047 4.26103516 -4.08203125 4.52734375 C-6.67647171 5.03991153 -6.67647171 5.03991153 -9.5625 6.0625 C-11.75 5.125 -11.75 5.125 -13.5625 4.0625 C-12.92441406 3.85753906 -12.28632813 3.65257812 -11.62890625 3.44140625 C-10.80261719 3.17199219 -9.97632813 2.90257812 -9.125 2.625 C-8.30128906 2.35816406 -7.47757812 2.09132813 -6.62890625 1.81640625 C-1.73362299 0.03041444 -1.73362299 0.03041444 0 0 Z \",fill:\"#D2A093\",transform:\"translate(372.5625,495.9375)\"})),_path2060||(_path2060=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.89492188 0.15275391 1.89492188 0.15275391 3.828125 0.30859375 C4.79234375 0.39238281 5.7565625 0.47617187 6.75 0.5625 C6.42 1.2225 6.09 1.8825 5.75 2.5625 C5.06292969 2.55089844 4.37585938 2.53929687 3.66796875 2.52734375 C2.76691406 2.51832031 1.86585938 2.50929688 0.9375 2.5 C0.04417969 2.48839844 -0.84914063 2.47679687 -1.76953125 2.46484375 C-4.38413791 2.45240033 -4.38413791 2.45240033 -7.25 3.5625 C-9.4375 2.125 -9.4375 2.125 -11.25 0.5625 C-7.43483536 -0.73812431 -3.97438237 -0.33119853 0 0 Z \",fill:\"#993737\",transform:\"translate(440.25,490.4375)\"})),_path2061||(_path2061=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-4.67201205 3.20568053 -9.21496292 3.09382426 -14 3 C-14 2.34 -14 1.68 -14 1 C-9.32798795 -0.20568053 -4.78503708 -0.09382426 0 0 Z \",fill:\"#F9CABA\",transform:\"translate(430,466)\"})),_path2062||(_path2062=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.66 2.64 1.32 4 2 C4 2.66 4 3.32 4 4 C4.66 4 5.32 4 6 4 C6 4.66 6 5.32 6 6 C-1.92 6.495 -1.92 6.495 -10 7 C-9.67 5.35 -9.34 3.7 -9 2 C-8.67 2.99 -8.34 3.98 -8 5 C-4.37 5 -0.74 5 3 5 C2.01 4.01 1.02 3.02 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#AC4B45\",transform:\"translate(176,454)\"})),_path2063||(_path2063=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.96 0 7.92 0 12 0 C12 2.31 12 4.62 12 7 C11.67 7 11.34 7 11 7 C11 5.35 11 3.7 11 2 C9.35 2 7.7 2 6 2 C5.67 2.66 5.34 3.32 5 4 C2.525 3.01 2.525 3.01 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#782825\",transform:\"translate(174,452)\"})),_path2064||(_path2064=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.8871875 0.061875 1.8871875 0.061875 3.8125 0.125 C0.0625 2.125 0.0625 2.125 -2.1875 2.125 C-2.5175 3.445 -2.8475 4.765 -3.1875 6.125 C-5.4975 5.465 -7.8075 4.805 -10.1875 4.125 C-3.8125 -0.125 -3.8125 -0.125 0 0 Z \",fill:\"#22130D\",transform:\"translate(396.1875,441.875)\"})),_path2065||(_path2065=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.94 0.33 11.88 0.66 18 1 C18 1.33 18 1.66 18 2 C11.30324864 3.03026944 4.7685324 3.10152799 -2 3 C-1.34 2.67 -0.68 2.34 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#9AD888\",transform:\"translate(542,408)\"})),_path2066||(_path2066=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 1.32 0.66 2.64 1 4 C5.95 4 10.9 4 16 4 C16 4.33 16 4.66 16 5 C12.87517438 5.08687496 9.75065754 5.14034568 6.625 5.1875 C5.73554687 5.21263672 4.84609375 5.23777344 3.9296875 5.26367188 C2.65351562 5.27817383 2.65351562 5.27817383 1.3515625 5.29296875 C0.17327881 5.31653442 0.17327881 5.31653442 -1.02880859 5.34057617 C-1.67930176 5.22818604 -2.32979492 5.1157959 -3 5 C-3.66 4.01 -4.32 3.02 -5 2 C-3.35 1.34 -1.7 0.68 0 0 Z \",fill:\"#717F67\",transform:\"translate(560,392)\"})),_path2067||(_path2067=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C-0.44615385 5.8 -0.44615385 5.8 -3.25 6.8125 C-4.11625 6.9053125 -4.11625 6.9053125 -5 7 C-5 6.34 -5 5.68 -5 5 C-5.66 5 -6.32 5 -7 5 C-7.33 4.01 -7.66 3.02 -8 2 C-6.8553125 2.3403125 -6.8553125 2.3403125 -5.6875 2.6875 C-4.800625 2.790625 -3.91375 2.89375 -3 3 C-1.1645201 1.66621425 -1.1645201 1.66621425 0 0 Z \",fill:\"#27301E\",transform:\"translate(547,389)\"})),_path2068||(_path2068=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.66 1.32 1.32 2 2 C1.625 5.125 1.625 5.125 1 8 C-0.32 7.67 -1.64 7.34 -3 7 C-3 6.34 -3 5.68 -3 5 C-3.66 5 -4.32 5 -5 5 C-5 3.68 -5 2.36 -5 1 C-3.02 1.99 -3.02 1.99 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#6E5B4B\",transform:\"translate(557,385)\"})),_path2069||(_path2069=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.495 0.99 0.495 2 1 C1.67 1.66 1.34 2.32 1 3 C1.639375 3.28875 2.27875 3.5775 2.9375 3.875 C5 5 5 5 6 7 C4.68 7 3.36 7 2 7 C2 8.65 2 10.3 2 12 C1.34 12 0.68 12 0 12 C0 8.04 0 4.08 0 0 Z \",fill:\"#BF6E58\",transform:\"translate(340,382)\"})),_path2070||(_path2070=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.96 0 7.92 0 12 0 C12 1.32 12 2.64 12 4 C10.35 4.33 8.7 4.66 7 5 C7.33 4.01 7.66 3.02 8 2 C6.02 2.33 4.04 2.66 2 3 C1.34 2.01 0.68 1.02 0 0 Z \",fill:\"#1B1A1E\",transform:\"translate(52,382)\"})),_path2071||(_path2071=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.60945598 0.69817944 7.18432916 1.47876382 10.75 2.375 C11.71421875 2.60960937 12.6784375 2.84421875 13.671875 3.0859375 C14.82429687 3.53839844 14.82429687 3.53839844 16 4 C16.33 4.99 16.66 5.98 17 7 C10.77012202 6.49487476 5.54525767 3.67395877 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#4E3422\",transform:\"translate(609,378)\"})),_path2072||(_path2072=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 1.32 0.66 2.64 1 4 C-0.175625 4.12375 -0.175625 4.12375 -1.375 4.25 C-4.14749104 4.72806339 -4.14749104 4.72806339 -5.3125 7.0625 C-5.539375 7.701875 -5.76625 8.34125 -6 9 C-6.33 6.36 -6.66 3.72 -7 1 C-4.50935112 0.31292445 -2.62113708 0 0 0 Z \",fill:\"#C1221E\",transform:\"translate(11,381)\"})),_path2073||(_path2073=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.6045556 0.14148989 3.20863767 0.28835686 4.8125 0.4375 C5.70582031 0.51871094 6.59914063 0.59992188 7.51953125 0.68359375 C10 1 10 1 13 2 C13.33 1.34 13.66 0.68 14 0 C14 0.99 14 1.98 14 3 C8.65998179 4.33500455 5.16044765 3.512545 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#0A0B0B\",transform:\"translate(476,376)\"})),_path2074||(_path2074=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-2.93447357 2.93447357 -6.18259456 2.46158423 -10.125 2.625 C-10.87910156 2.66367187 -11.63320313 2.70234375 -12.41015625 2.7421875 C-14.27303184 2.83651031 -16.13648255 2.91934662 -18 3 C-13.08038068 -1.91961932 -6.29622726 -1.1243263 0 0 Z \",fill:\"#080B07\",transform:\"translate(480,350)\"})),_path2075||(_path2075=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.37478516 0.01740234 1.37478516 0.01740234 2.77734375 0.03515625 C3.69644531 0.04417969 4.61554688 0.05320312 5.5625 0.0625 C6.27277344 0.07410156 6.98304688 0.08570313 7.71484375 0.09765625 C7.71484375 0.75765625 7.71484375 1.41765625 7.71484375 2.09765625 C4.74484375 2.09765625 1.77484375 2.09765625 -1.28515625 2.09765625 C-1.28515625 3.41765625 -1.28515625 4.73765625 -1.28515625 6.09765625 C-2.27515625 6.42765625 -3.26515625 6.75765625 -4.28515625 7.09765625 C-3.24873605 0.13883487 -3.24873605 0.13883487 0 0 Z \",fill:\"#3F0D10\",transform:\"translate(354.28515625,347.90234375)\"})),_path2076||(_path2076=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0 4.62 0 7 0 C7.33 0.99 7.66 1.98 8 3 C7.67 3.66 7.34 4.32 7 5 C5.02 5 3.04 5 1 5 C0.67 3.35 0.34 1.7 0 0 Z \",fill:\"#A26A4F\",transform:\"translate(607,346)\"})),_path2077||(_path2077=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C2.32 2 3.64 2 5 2 C4.67 2.66 4.34 3.32 4 4 C3.01 4 2.02 4 1 4 C0.34 5.32 -0.32 6.64 -1 8 C-0.34 8 0.32 8 1 8 C1 8.66 1 9.32 1 10 C-0.98 9.34 -2.96 8.68 -5 8 C-3.35 5.36 -1.7 2.72 0 0 Z \",fill:\"#51120C\",transform:\"translate(137,338)\"})),_path2078||(_path2078=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.33 2.64 0.66 4 1 C0.91709845 5.22797927 0.91709845 5.22797927 -1 7 C-3.8125 7.375 -3.8125 7.375 -6 7 C-4.625 5 -4.625 5 -3 3 C-2.34 3 -1.68 3 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#F45E3B\",transform:\"translate(137,333)\"})),_path2079||(_path2079=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3 1.65 3 3.3 3 5 C2.01 5.495 2.01 5.495 1 6 C0.27306096 7.97888961 -0.39816251 9.97954558 -1 12 C-3.97 11.505 -3.97 11.505 -7 11 C-5.68 10.67 -4.36 10.34 -3 10 C-3 9.01 -3 8.02 -3 7 C-2.34 7 -1.68 7 -1 7 C-0.67 4.69 -0.34 2.38 0 0 Z \",fill:\"#DAA574\",transform:\"translate(331,331)\"})),_path2080||(_path2080=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 2.31 0 4.62 0 7 C-0.33 7 -0.66 7 -1 7 C-1 5.35 -1 3.7 -1 2 C-4.63 2 -8.26 2 -12 2 C-12 1.34 -12 0.68 -12 0 C-7.91556885 -1.53166168 -4.20544343 -0.63081652 0 0 Z \",fill:\"#101C12\",transform:\"translate(544,329)\"})),_path2081||(_path2081=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.66500865 -0.59244521 11.86952975 1.51677155 18 4 C18 4.66 18 5.32 18 6 C15.42709818 5.55893112 13.11172763 5.04529499 10.6875 4.0625 C7.18479463 2.6777095 3.66446953 1.86953514 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#434F2C\",transform:\"translate(379,321)\"})),_path2082||(_path2082=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C3.06277107 1.85805236 5.12521031 1.71127784 7.1875 1.5625 C8.33605469 1.48128906 9.48460937 1.40007812 10.66796875 1.31640625 C13.51598171 1.04596188 16.21210482 0.62478253 19 0 C17.515625 1.984375 17.515625 1.984375 15 4 C12.10550051 4.2906124 9.62050065 4.38186045 6.75 4.25 C5.63238281 4.22292969 5.63238281 4.22292969 4.4921875 4.1953125 C2.66090299 4.14835649 0.83028351 4.07661652 -1 4 C-0.67 2.68 -0.34 1.36 0 0 Z \",fill:\"#8C2725\",transform:\"translate(165,302)\"})),_path2083||(_path2083=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.96 0 7.92 0 12 0 C12 0.66 12 1.32 12 2 C10.35 2 8.7 2 7 2 C6.67 2.66 6.34 3.32 6 4 C6 3.34 6 2.68 6 2 C5.34 2 4.68 2 4 2 C4 2.99 4 3.98 4 5 C3.34 5 2.68 5 2 5 C2 4.01 2 3.02 2 2 C1.34 2 0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#C3986A\",transform:\"translate(338,290)\"})),_path2084||(_path2084=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0.99 5.28 1.98 8 3 C8 3.99 8 4.98 8 6 C5.36 6 2.72 6 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#F6D4AA\",transform:\"translate(251,266)\"})),_path2085||(_path2085=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C1.78375 2.814375 2.5675 2.62875 3.375 2.4375 C6 2 6 2 8 3 C8 3.99 8 4.98 8 6 C5.03 6 2.06 6 -1 6 C-1.042721 4.33388095 -1.04063832 2.66617115 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#4D2E23\",transform:\"translate(28,263)\"})),_path2086||(_path2086=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-4.95 2 -9.9 2 -15 2 C-15 1.34 -15 0.68 -15 0 C-4.44191344 -1.33257403 -4.44191344 -1.33257403 0 0 Z \",fill:\"#39251E\",transform:\"translate(195,234)\"})),_path2087||(_path2087=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.63 1.32 7.26 2.64 11 4 C10.01 5.485 10.01 5.485 9 7 C6.64828869 6.40138258 4.3140622 5.73075648 2 5 C1.67 4.34 1.34 3.68 1 3 C0.01 2.67 -0.98 2.34 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#644532\",transform:\"translate(174,212)\"})),_path2088||(_path2088=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.6875 0.3125 2.6875 0.3125 5 1 C5.33 1.99 5.66 2.98 6 4 C3.47524538 5.26237731 1.68799534 5.09856404 -1.125 5.0625 C-2.03507813 5.05347656 -2.94515625 5.04445312 -3.8828125 5.03515625 C-4.58148437 5.02355469 -5.28015625 5.01195312 -6 5 C-5.01 4.34 -4.02 3.68 -3 3 C-2.54625 2.443125 -2.0925 1.88625 -1.625 1.3125 C-0.820625 0.6628125 -0.820625 0.6628125 0 0 Z \",fill:\"#2B1E20\",transform:\"translate(568,187)\"})),_path2089||(_path2089=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3 1 3 1 4 2 C5.32 2 6.64 2 8 2 C8.33 3.65 8.66 5.3 9 7 C5.62294375 6.46274105 2.303314 5.88935377 -1 5 C-0.34 5 0.32 5 1 5 C0.67 3.35 0.34 1.7 0 0 Z \",fill:\"#462F29\",transform:\"translate(202,178)\"})),_path2090||(_path2090=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 1.32 0 2.64 0 4 C-0.66 4 -1.32 4 -2 4 C-2.33 4.99 -2.66 5.98 -3 7 C-4.32 6.67 -5.64 6.34 -7 6 C-6.67 5.34 -6.34 4.68 -6 4 C-6.33 3.01 -6.66 2.02 -7 1 C-4.53721199 -0.231394 -2.7204945 -0.07159196 0 0 Z \",fill:\"#BB9E73\",transform:\"translate(194,139)\"})),_path2091||(_path2091=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.60296594 -0.41176754 4.78402067 -0.1535853 7.8125 2 C8.534375 2.66 9.25625 3.32 10 4 C9.67 5.32 9.34 6.64 9 8 C7.49712782 6.85793642 5.99776716 5.71125043 4.5 4.5625 C3.6646875 3.92441406 2.829375 3.28632813 1.96875 2.62890625 C1.3190625 2.09136719 0.669375 1.55382812 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#81724F\",transform:\"translate(119,136)\"})),_path2092||(_path2092=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.40021656 0.36668471 6.744666 2.11670417 10 5 C9.67 5.99 9.34 6.98 9 8 C8.52949219 7.66226563 8.05898438 7.32453125 7.57421875 6.9765625 C6.95160156 6.53054687 6.32898437 6.08453125 5.6875 5.625 C5.07261719 5.18414062 4.45773438 4.74328125 3.82421875 4.2890625 C2.2347608 3.16589093 0.61937829 2.07958553 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#33231B\",transform:\"translate(30,96)\"})),_path2093||(_path2093=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.29608947 0.93137592 2.58671632 1.8703566 3.875 2.8125 C4.59429687 3.33457031 5.31359375 3.85664062 6.0546875 4.39453125 C8 6 8 6 10 9 C9.01 9.495 9.01 9.495 8 10 C5.875 9.0625 5.875 9.0625 4 8 C4 7.01 4 6.02 4 5 C3.01 5 2.02 5 1 5 C0.67 3.35 0.34 1.7 0 0 Z \",fill:\"#231414\",transform:\"translate(127,81)\"})),_path2094||(_path2094=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2 1.99 2 2.98 2 4 C1.01 4 0.02 4 -1 4 C-1.309375 4.61875 -1.61875 5.2375 -1.9375 5.875 C-2.625 7.25 -3.3125 8.625 -4 10 C-4.66 9.67 -5.32 9.34 -6 9 C-5.67 7.02 -5.34 5.04 -5 3 C-3.35 2.67 -1.7 2.34 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#5B7865\",transform:\"translate(446,78)\"})),_path2095||(_path2095=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C0.29648785 4.7076441 -0.77707514 5.88853757 -4.5 7.75 C-6.65922844 8.52115302 -8.82485633 9.27495211 -11 10 C-11 9.34 -11 8.68 -11 8 C-9.217871 6.55925285 -7.37339724 5.19489351 -5.5 3.875 C-4.4790625 3.15054688 -3.458125 2.42609375 -2.40625 1.6796875 C-1.6121875 1.12539062 -0.818125 0.57109375 0 0 Z \",fill:\"#1F0F0C\",transform:\"translate(533,65)\"})),_path2096||(_path2096=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C4.1875 3.5625 4.1875 3.5625 5 6 C4.67 6 4.34 6 4 6 C3.67 7.98 3.34 9.96 3 12 C1.09598862 10.09598862 0.06479561 8.66574314 -0.19921875 5.953125 C-0.1886578 3.96766727 -0.09915043 1.9830086 0 0 Z \",fill:\"#956A52\",transform:\"translate(125,46)\"})),_path2097||(_path2097=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.0725 0.103125 2.145 0.20625 3.25 0.3125 C2.92 0.9725 2.59 1.6325 2.25 2.3125 C1.26 2.6425 0.27 2.9725 -0.75 3.3125 C-1.08 4.3025 -1.41 5.2925 -1.75 6.3125 C-5.75 6.3125 -5.75 6.3125 -7.75 5.3125 C-5.36605526 1.49818842 -4.61542062 0.38461838 0 0 Z \",fill:\"#173934\",transform:\"translate(517.75,-0.3125)\"})),_path2098||(_path2098=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 3.20395416 -0.74335022 5.09399739 -2 8 C-1.34 8.33 -0.68 8.66 0 9 C-1.28965176 10.37562854 -2.62689293 11.70766393 -4 13 C-4.66 13 -5.32 13 -6 13 C-5.26083824 7.97370003 -3.63107238 3.63107238 0 0 Z \",fill:\"#6D4936\",transform:\"translate(58,609)\"})),_path2099||(_path2099=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-2.78469002 1.85646001 -4.2681416 2.45157815 -7.4375 3.125 C-8.19933594 3.29257812 -8.96117187 3.46015625 -9.74609375 3.6328125 C-12 4 -12 4 -16 4 C-16 3.34 -16 2.68 -16 2 C-10.54538831 0.61470179 -5.63281599 -0.2396943 0 0 Z \",fill:\"#513830\",transform:\"translate(397,506)\"})),_path2100||(_path2100=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.61 0 11.22 0 17 0 C17 0.66 17 1.32 17 2 C16.34 2 15.68 2 15 2 C15 2.66 15 3.32 15 4 C14.34 4 13.68 4 13 4 C13 3.34 13 2.68 13 2 C8.71 1.67 4.42 1.34 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#A01A20\",transform:\"translate(225,500)\"})),_path2101||(_path2101=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.3 0.66 6.6 1.32 10 2 C10 2.33 10 2.66 10 3 C3.41276707 4.04559253 -1.59233959 3.83292414 -8 2 C-8 1.67 -8 1.34 -8 1 C-5.36 1 -2.72 1 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#711A26\",transform:\"translate(208,485)\"})),_path2102||(_path2102=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.29 0 8.58 0 13 0 C13.33 1.98 13.66 3.96 14 6 C12.68 6 11.36 6 10 6 C9.67 4.68 9.34 3.36 9 2 C6.03 1.67 3.06 1.34 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#7D2926\",transform:\"translate(424,472)\"})),_path2103||(_path2103=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.42761914 1.39153744 6.9556255 3.52071486 10 7 C10 7.66 10 8.32 10 9 C6.04322598 7.32598022 3.15535787 4.86850715 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#795235\",transform:\"translate(516,465)\"})),_path2104||(_path2104=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-4.76307437 2.95261487 -9.1666528 3.08333357 -14 3 C-14 2.34 -14 1.68 -14 1 C-9.27685687 0.22887459 -4.78478822 -0.09764874 0 0 Z \",fill:\"#AE7B78\",transform:\"translate(306,446)\"})),_path2105||(_path2105=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.33 2.31 1.66 4.62 2 7 C2.33 7 2.66 7 3 7 C3 10.63 3 14.26 3 18 C2.67 16.68 2.34 15.36 2 14 C1.34 14 0.68 14 0 14 C0 9.38 0 4.76 0 0 Z \",fill:\"#300907\",transform:\"translate(478,434)\"})),_path2106||(_path2106=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.26630019 3.40554079 10.2703193 6.87668862 15 11 C14.01 11.495 14.01 11.495 13 12 C12.39671875 11.51789063 11.7934375 11.03578125 11.171875 10.5390625 C10.37265625 9.90742188 9.5734375 9.27578125 8.75 8.625 C7.96109375 7.99851562 7.1721875 7.37203125 6.359375 6.7265625 C4.28818811 5.21089263 2.32930503 4.05780366 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#7C5A3B\",transform:\"translate(483,439)\"})),_path2107||(_path2107=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 1 2 1 4 3 C4.36933645 5.75372909 4.18336678 8.20365661 4 11 C3.01 11 2.02 11 1 11 C0.63890458 9.35567294 0.28629924 7.7094792 -0.0625 6.0625 C-0.25972656 5.14597656 -0.45695312 4.22945313 -0.66015625 3.28515625 C-0.77230469 2.53105469 -0.88445312 1.77695312 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#150908\",transform:\"translate(378,415)\"})),_path2108||(_path2108=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 1.98 1 3.96 1 6 C4.3 6 7.6 6 11 6 C11 6.33 11 6.66 11 7 C6.38 7 1.76 7 -3 7 C-2 2 -2 2 0 0 Z \",fill:\"#250702\",transform:\"translate(97,394)\"})),_path2109||(_path2109=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0.33 3.3 0.66 5 1 C4.67 1.99 4.34 2.98 4 4 C3.67 3.01 3.34 2.02 3 1 C1.70366379 2.06645115 1.70366379 2.06645115 1.9375 4.5625 C1.958125 5.366875 1.97875 6.17125 2 7 C3.32 6.67 4.64 6.34 6 6 C5.67 6.99 5.34 7.98 5 9 C4.01 9.33 3.02 9.66 2 10 C1 9 1 9 0.9375 5.9375 C0.958125 4.968125 0.97875 3.99875 1 3 C0.01 3.33 -0.98 3.66 -2 4 C-2 3.34 -2 2.68 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#827E65\",transform:\"translate(14,382)\"})),_path2110||(_path2110=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.46800711 4.05606165 -0.87953208 7.46588679 -3 11 C-3.33 11 -3.66 11 -4 11 C-4 7.7 -4 4.4 -4 1 C-2 0 -2 0 0 0 Z \",fill:\"#FAF8F4\",transform:\"translate(202,385)\"})),_path2111||(_path2111=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.77226453 0.28284018 3.542788 0.57660498 5.3125 0.875 C6.29863281 1.03742188 7.28476562 1.19984375 8.30078125 1.3671875 C11 2 11 2 14 4 C10.37 4.33 6.74 4.66 3 5 C2.01 3.35 1.02 1.7 0 0 Z \",fill:\"#9D6D56\",transform:\"translate(541,372)\"})),_path2112||(_path2112=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C2.01 2.485 2.01 2.485 1 4 C2.0725 3.95875 3.145 3.9175 4.25 3.875 C8 4 8 4 12 6 C7.38 6 2.76 6 -2 6 C-1.34 4.02 -0.68 2.04 0 0 Z \",fill:\"#96AB7A\",transform:\"translate(520,370)\"})),_path2113||(_path2113=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.66 2 1.32 2 2 C3.32 2 4.64 2 6 2 C6 2.66 6 3.32 6 4 C5.01 4.33 4.02 4.66 3 5 C2.67 5.99 2.34 6.98 2 8 C1.01 7.67 0.02 7.34 -1 7 C-1 3 -1 3 0 0 Z \",fill:\"#311214\",transform:\"translate(90,370)\"})),_path2114||(_path2114=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.96 0 7.92 0 12 0 C12 0.66 12 1.32 12 2 C13.65 2 15.3 2 17 2 C17 2.33 17 2.66 17 3 C11.39 2.67 5.78 2.34 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#030600\",transform:\"translate(180,372)\"})),_path2115||(_path2115=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.66 1.98 1.32 3 2 C2.01 3.485 2.01 3.485 1 5 C0.34 5 -0.32 5 -1 5 C-1 5.66 -1 6.32 -1 7 C-0.01 7.33 0.98 7.66 2 8 C0.35 8.33 -1.3 8.66 -3 9 C-3 9.66 -3 10.32 -3 11 C-3.66 11 -4.32 11 -5 11 C-3.77472971 6.94718288 -2.30119506 3.55639236 0 0 Z \",fill:\"#340E0B\",transform:\"translate(119,363)\"})),_path2116||(_path2116=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C5 0.33 5 0.66 5 1 C7.31 1.66 9.62 2.32 12 3 C12 3.33 12 3.66 12 4 C8.04 4 4.08 4 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#F37A28\",transform:\"translate(140,362)\"})),_path2117||(_path2117=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-2.29688569 2.29688569 -3.78928171 2.71851303 -6.875 3.625 C-7.73867188 3.88539063 -8.60234375 4.14578125 -9.4921875 4.4140625 C-12 5 -12 5 -16 5 C-16 4.34 -16 3.68 -16 3 C-14.27318563 2.49193553 -12.54342021 1.99389533 -10.8125 1.5 C-9.84957031 1.2215625 -8.88664062 0.943125 -7.89453125 0.65625 C-5.14654124 0.03322392 -2.80401584 -0.12302812 0 0 Z \",fill:\"#777060\",transform:\"translate(480,356)\"})),_path2118||(_path2118=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C5 0.66 5 1.32 5 2 C4.34 2 3.68 2 3 2 C3 2.66 3 3.32 3 4 C8.61 4 14.22 4 20 4 C20 4.33 20 4.66 20 5 C14.06 5 8.12 5 2 5 C1.34 3.35 0.68 1.7 0 0 Z \",fill:\"#667C3F\",transform:\"translate(505,356)\"})),_path2119||(_path2119=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-2.75927344 2.75927344 -5.21154052 2.51783243 -9 3 C-9.33 3.33 -9.66 3.66 -10 4 C-11.99958364 4.04080783 -14.00045254 4.04254356 -16 4 C-16 3.01 -16 2.02 -16 1 C-10.65097076 0.40801257 -5.39115154 -0.14187241 0 0 Z \",fill:\"#2E3134\",transform:\"translate(76,353)\"})),_path2120||(_path2120=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99386719 0.00902344 1.98773438 0.01804687 3.01171875 0.02734375 C4.15060547 0.04474609 4.15060547 0.04474609 5.3125 0.0625 C5.6425 0.7225 5.9725 1.3825 6.3125 2.0625 C1.3625 2.3925 -3.5875 2.7225 -8.6875 3.0625 C-8.6875 2.4025 -8.6875 1.7425 -8.6875 1.0625 C-5.53819107 0.01273036 -3.29935544 -0.03881595 0 0 Z \",fill:\"#7E7360\",transform:\"translate(471.6875,351.9375)\"})),_path2121||(_path2121=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 1.98 0.66 3.96 1 6 C-0.32 5.67 -1.64 5.34 -3 5 C-2.34 4.67 -1.68 4.34 -1 4 C-1 3.01 -1 2.02 -1 1 C-6.31411494 2.92391649 -6.31411494 2.92391649 -10 7 C-10.66 6.67 -11.32 6.34 -12 6 C-10.91663521 2.50915788 -9.8952877 1.94478806 -6.5625 0.1875 C-3 -1 -3 -1 0 0 Z \",fill:\"#D2712D\",transform:\"translate(64,338)\"})),_path2122||(_path2122=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 3.75 2 3.75 2 6 C2.66 6.33 3.32 6.66 4 7 C2.68 7 1.36 7 0 7 C0 8.32 0 9.64 0 11 C-0.99 11 -1.98 11 -3 11 C-2.32829194 7.1936543 -1.27253436 3.64793184 0 0 Z \",fill:\"#F5A374\",transform:\"translate(326,323)\"})),_path2123||(_path2123=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.66 1.32 1.32 2 2 C1.67 2.66 1.34 3.32 1 4 C-7.25 4 -15.5 4 -24 4 C-24 3.67 -24 3.34 -24 3 C-16.41 3 -8.82 3 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#5F321D\",transform:\"translate(297,319)\"})),_path2124||(_path2124=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0 5.28 0 8 0 C8 1.65 8 3.3 8 5 C7.01 4.67 6.02 4.34 5 4 C5 3.34 5 2.68 5 2 C2.37098712 3.52206009 0.15634036 4.84365964 -2 7 C-1.125 2.25 -1.125 2.25 0 0 Z \",fill:\"#3B211B\",transform:\"translate(301,316)\"})),_path2125||(_path2125=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C5 0.66 5 1.32 5 2 C6.65 2.33 8.3 2.66 10 3 C10 3.33 10 3.66 10 4 C6.7 4.33 3.4 4.66 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#B67956\",transform:\"translate(272,312)\"})),_path2126||(_path2126=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0.33 3.3 0.66 5 1 C5 2.65 5 4.3 5 6 C3.02 6 1.04 6 -1 6 C-0.67 4.02 -0.34 2.04 0 0 Z \",fill:\"#DB9462\",transform:\"translate(417,310)\"})),_path2127||(_path2127=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.125 0.375 2.125 0.375 4 1 C3.34 1 2.68 1 2 1 C2 1.66 2 2.32 2 3 C2.99 2.67 3.98 2.34 5 2 C5 2.66 5 3.32 5 4 C4.01 4.33 3.02 4.66 2 5 C1.67 5.99 1.34 6.98 1 8 C0.01 7.67 -0.98 7.34 -2 7 C-2.125 4.625 -2.125 4.625 -2 2 C-1.34 1.34 -0.68 0.68 0 0 Z \",fill:\"#14312F\",transform:\"translate(149,311)\"})),_path2128||(_path2128=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0.495 2.97 0.495 6 1 C6.33 2.65 6.66 4.3 7 6 C7.99 6.33 8.98 6.66 10 7 C9.67 7.66 9.34 8.32 9 9 C8.01 8.67 7.02 8.34 6 8 C6 7.01 6 6.02 6 5 C4.68 4.67 3.36 4.34 2 4 C2 3.34 2 2.68 2 2 C1.34 2 0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#979D61\",transform:\"translate(380,308)\"})),_path2129||(_path2129=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.33 0.99 -0.66 1.98 -1 3 C-8.425 2.01 -8.425 2.01 -16 1 C-16 0.67 -16 0.34 -16 0 C-14.08416353 -0.1958009 -12.16727461 -0.38132214 -10.25 -0.5625 C-8.64898438 -0.71912109 -8.64898438 -0.71912109 -7.015625 -0.87890625 C-4.35858796 -0.98560074 -2.50039428 -0.81930395 0 0 Z \",fill:\"#B07758\",transform:\"translate(604,308)\"})),_path2130||(_path2130=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.84235498 1.13524124 7.1258669 2.1258669 10 5 C10 6.32 10 7.64 10 9 C9.01 9 8.02 9 7 9 C6.34 7.68 5.68 6.36 5 5 C4.34 5 3.68 5 3 5 C3 4.01 3 3.02 3 2 C2.01 2 1.02 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#CE3849\",transform:\"translate(471,300)\"})),_path2131||(_path2131=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.28 0 10.56 0 16 0 C16 0.33 16 0.66 16 1 C12.7 1.33 9.4 1.66 6 2 C6 2.66 6 3.32 6 4 C4.35 4 2.7 4 1 4 C0.67 2.68 0.34 1.36 0 0 Z \",fill:\"#DFEBC9\",transform:\"translate(394,296)\"})),_path2132||(_path2132=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.9375 0.375 1.9375 0.375 4 1 C5.35439668 3.70879335 5.06501451 6.00933268 5 9 C4.01 9.33 3.02 9.66 2 10 C1.34 8.68 0.68 7.36 0 6 C0.66 5.67 1.32 5.34 2 5 C1.34 3.35 0.68 1.7 0 0 Z \",fill:\"#CFE5CB\",transform:\"translate(476,292)\"})),_path2133||(_path2133=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.18975773 3.28463659 2.99806563 6.20696275 4 10 C2.02 10.99 2.02 10.99 0 12 C-1.32 10.68 -2.64 9.36 -4 8 C-2.35 8 -0.7 8 1 8 C0.67 7.34 0.34 6.68 0 6 C-0.039992 4.00039988 -0.04346799 1.99952758 0 0 Z \",fill:\"#75A18E\",transform:\"translate(475,282)\"})),_path2134||(_path2134=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C6 3 6 3 6 6 C4.35 6 2.7 6 1 6 C0.67 4.02 0.34 2.04 0 0 Z \",fill:\"#C4916D\",transform:\"translate(261,269)\"})),_path2135||(_path2135=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.3 0 6.6 0 10 0 C10.33 0.99 10.66 1.98 11 3 C7.37 3 3.74 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#D6C13B\",transform:\"translate(160,269)\"})),_path2136||(_path2136=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C5 3.96 5 7.92 5 12 C4.67 12 4.34 12 4 12 C3.67 9.36 3.34 6.72 3 4 C2.34 4.99 1.68 5.98 1 7 C0.67 4.69 0.34 2.38 0 0 Z \",fill:\"#583921\",transform:\"translate(582,263)\"})),_path2137||(_path2137=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.25425781 0.19464844 2.50851563 0.38929688 3.80078125 0.58984375 C4.75339844 0.74582031 5.70601562 0.90179688 6.6875 1.0625 C6.6875 1.3925 6.6875 1.7225 6.6875 2.0625 C4.45840129 2.08964735 2.22920633 2.10896254 0 2.125 C-1.24136719 2.13660156 -2.48273438 2.14820313 -3.76171875 2.16015625 C-6.77485454 2.07728673 -9.39525339 1.77089449 -12.3125 1.0625 C-12.3125 0.7325 -12.3125 0.4025 -12.3125 0.0625 C-7.955598 -1.12877531 -4.43292737 -0.70429687 0 0 Z \",fill:\"#855245\",transform:\"translate(230.3125,255.9375)\"})),_path2138||(_path2138=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.99 2.64 1.98 4 3 C-1.2734375 6.22265625 -1.2734375 6.22265625 -3 7 C-3.66 6.67 -4.32 6.34 -5 6 C-5 4.68 -5 3.36 -5 2 C-5.66 1.67 -6.32 1.34 -7 1 C-5.68 1 -4.36 1 -3 1 C-3 1.66 -3 2.32 -3 3 C-2.01 2.67 -1.02 2.34 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#91886A\",transform:\"translate(340,247)\"})),_path2139||(_path2139=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.485 0.99 1.485 0.99 3 2 C2.34 2 1.68 2 1 2 C1 2.66 1 3.32 1 4 C2.32 4.66 3.64 5.32 5 6 C4.505 6.598125 4.01 7.19625 3.5 7.8125 C1.71723582 9.97029994 1.71723582 9.97029994 2 13 C0 11 0 11 -0.1953125 8.3984375 C-0.17210937 7.40070313 -0.14890625 6.40296875 -0.125 5.375 C-0.10695313 4.37210938 -0.08890625 3.36921875 -0.0703125 2.3359375 C-0.04710937 1.56507813 -0.02390625 0.79421875 0 0 Z \",fill:\"#292123\",transform:\"translate(564,233)\"})),_path2140||(_path2140=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 1 4 2 6 3 C6 2.34 6 1.68 6 1 C7.32 1.66 8.64 2.32 10 3 C10 3.99 10 4.98 10 6 C9.01 6.33 8.02 6.66 7 7 C5.17578125 5.8203125 5.17578125 5.8203125 3.3125 4.125 C2.68988281 3.57070312 2.06726563 3.01640625 1.42578125 2.4453125 C0 1 0 1 0 0 Z \",fill:\"#3B1C1E\",transform:\"translate(581,218)\"})),_path2141||(_path2141=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0.33 3.3 0.66 5 1 C4.01 1.33 3.02 1.66 2 2 C2.33 2.66 2.66 3.32 3 4 C3.13415472 6.6723621 3.04318541 9.32250488 3 12 C1.35 11.67 -0.3 11.34 -2 11 C-1.34 10.34 -0.68 9.68 0 9 C0 8.01 0 7.02 0 6 C0 4 0 2 0 0 Z \",fill:\"#E0B588\",transform:\"translate(150,206)\"})),_path2142||(_path2142=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-2 3 -2 3 -4.1640625 3.51171875 C-5.38222656 3.59873047 -5.38222656 3.59873047 -6.625 3.6875 C-7.44226563 3.75324219 -8.25953125 3.81898438 -9.1015625 3.88671875 C-9.72804688 3.92410156 -10.35453125 3.96148437 -11 4 C-11 3.01 -11 2.02 -11 1 C-7.32589215 -0.17571451 -3.83070817 -0.07366746 0 0 Z \",fill:\"#3E2B30\",transform:\"translate(597,200)\"})),_path2143||(_path2143=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3 1.65 3 3.3 3 5 C2.01 4.67 1.02 4.34 0 4 C-0.33 4.66 -0.66 5.32 -1 6 C-5 6 -5 6 -7 5 C-6.01 4.67 -5.02 4.34 -4 4 C-4 3.34 -4 2.68 -4 2 C-2.68 2.33 -1.36 2.66 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#573C26\",transform:\"translate(42,147)\"})),_path2144||(_path2144=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-7.28571429 5.42857143 -7.28571429 5.42857143 -12 5 C-4.28571429 -1.42857143 -4.28571429 -1.42857143 0 0 Z \",fill:\"#130C0F\",transform:\"translate(570,145)\"})),_path2145||(_path2145=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.06058594 1.10859375 1.12117187 2.2171875 1.18359375 3.359375 C1.26802951 4.8229282 1.35267599 6.28646925 1.4375 7.75 C1.47681641 8.47960937 1.51613281 9.20921875 1.55664062 9.9609375 C1.76147098 13.4272973 2.0852002 16.65333026 3 20 C2.34 20 1.68 20 1 20 C0.67 21.32 0.34 22.64 0 24 C0 16.08 0 8.16 0 0 Z \",fill:\"#9D4D3A\",transform:\"translate(152,124)\"})),_path2146||(_path2146=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 3.69349436 -0.88153908 5.00493457 -3 8 C-5.6875 10.3125 -5.6875 10.3125 -8 12 C-8.33 11.01 -8.66 10.02 -9 9 C-6 6 -3 3 0 0 Z \",fill:\"#7E9779\",transform:\"translate(425,107)\"})),_path2147||(_path2147=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C0.23381453 3.12901814 -1.537644 5.25323015 -3.3125 7.375 C-3.81201172 7.97828125 -4.31152344 8.5815625 -4.82617188 9.203125 C-5.55610352 10.07324219 -5.55610352 10.07324219 -6.30078125 10.9609375 C-6.74591064 11.49509277 -7.19104004 12.02924805 -7.6496582 12.57958984 C-9 14 -9 14 -12 16 C-10.32770299 12.04030824 -7.63695006 8.9838799 -4.875 5.75 C-4.40707031 5.19570312 -3.93914062 4.64140625 -3.45703125 4.0703125 C-2.30824672 2.71052674 -1.15460347 1.35484835 0 0 Z \",fill:\"#50583E\",transform:\"translate(512,0)\"})),_path2148||(_path2148=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C-1.09990301 10.09117362 -1.09990301 10.09117362 -4 14 C-4.66 14 -5.32 14 -6 14 C-4.50829734 9.0276578 -2.39542583 4.58154261 0 0 Z \",fill:\"#3E2821\",transform:\"translate(130,612)\"})),_path2149||(_path2149=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.63572653 2.96904984 2.48650988 5.67579747 3.125 9 C3.29257812 9.845625 3.46015625 10.69125 3.6328125 11.5625 C4 14 4 14 4 18 C3.34 18 2.68 18 2 18 C0.59545452 11.88019467 -0.23268915 6.28260706 0 0 Z \",fill:\"#DCAC88\",transform:\"translate(360,608)\"})),_path2150||(_path2150=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 3.60573896 -0.81707462 4.41336566 -3 7.1875 C-3.556875 7.90292969 -4.11375 8.61835937 -4.6875 9.35546875 C-5.120625 9.89816406 -5.55375 10.44085937 -6 11 C-6.57421875 9.09375 -6.57421875 9.09375 -7 7 C-5.8125 5.5 -5.8125 5.5 -4 4 C-2.9171875 2.9171875 -2.9171875 2.9171875 -1.8125 1.8125 C-1.214375 1.214375 -0.61625 0.61625 0 0 Z M-9 6 C-8.34 6.66 -7.68 7.32 -7 8 C-8.98 8.99 -8.98 8.99 -11 10 C-10.34 8.68 -9.68 7.36 -9 6 Z \",fill:\"#7A533D\",transform:\"translate(80,593)\"})),_path2151||(_path2151=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.22036864 3.85645121 -0.39644899 6.49223216 -2 10 C-3.32 10 -4.64 10 -6 10 C-5.55090939 8.51800098 -5.09043436 7.03944764 -4.625 5.5625 C-4.36976562 4.73878906 -4.11453125 3.91507813 -3.8515625 3.06640625 C-2.98795614 0.97077431 -2.43893676 0 0 0 Z \",fill:\"#654230\",transform:\"translate(126,584)\"})),_path2152||(_path2152=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C-0.11733729 3.50571657 -1.24410035 5.00444292 -2.375 6.5 C-3.00148438 7.3353125 -3.62796875 8.170625 -4.2734375 9.03125 C-4.84320313 9.6809375 -5.41296875 10.330625 -6 11 C-6.66 11 -7.32 11 -8 11 C-8.66 12.32 -9.32 13.64 -10 15 C-10 11.28151944 -9.15593473 10.72513871 -6.6875 8.0625 C-4.29953617 5.46427521 -2.07620151 2.85557562 0 0 Z \",fill:\"#593B2F\",transform:\"translate(48,576)\"})),_path2153||(_path2153=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.37562854 1.28965176 2.70766393 2.62689293 4 4 C4 4.66 4 5.32 4 6 C4.66 6 5.32 6 6 6 C8 9 8 9 8 12 C4.52999689 10.8433323 4.15298541 10.14273284 2.3125 7.125 C1.87550781 6.42632813 1.43851562 5.72765625 0.98828125 5.0078125 C0 3 0 3 0 0 Z \",fill:\"#845B43\",transform:\"translate(470,571)\"})),_path2154||(_path2154=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 1.65 0.66 3.3 1 5 C-1.475 6.485 -1.475 6.485 -4 8 C-4.33 6.02 -4.66 4.04 -5 2 C-2 0 -2 0 0 0 Z \",fill:\"#4E3329\",transform:\"translate(64,557)\"})),_path2155||(_path2155=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.92 0 15.84 0 24 0 C24 0.33 24 0.66 24 1 C23.37351563 1.04898438 22.74703125 1.09796875 22.1015625 1.1484375 C20.87566406 1.26058594 20.87566406 1.26058594 19.625 1.375 C18.81289062 1.44460938 18.00078125 1.51421875 17.1640625 1.5859375 C14.79665809 1.82892588 14.79665809 1.82892588 13 4 C12.67 3.01 12.34 2.02 12 1 C8.04 1 4.08 1 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#623E25\",transform:\"translate(132,518)\"})),_path2156||(_path2156=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.4125 0.474375 0.825 0.94875 1.25 1.4375 C3.182185 3.16266518 4.48192275 3.56584875 7 4 C7 6.31 7 8.62 7 11 C6.01 11 5.02 11 4 11 C4 9.35 4 7.7 4 6 C3.34 6 2.68 6 2 6 C0 3 0 3 0 0 Z \",fill:\"#271C1B\",transform:\"translate(9,496)\"})),_path2157||(_path2157=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-4.64849515 4.3992233 -8.91086074 4.19957409 -14 4 C-9.52281208 1.01520806 -5.36175907 0 0 0 Z \",fill:\"#E8A38E\",transform:\"translate(432,494)\"})),_path2158||(_path2158=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.0831351 1.19899698 6.06279492 2.47700477 9 4 C9 5.65 9 7.3 9 9 C7.68 8.34 6.36 7.68 5 7 C5 6.34 5 5.68 5 5 C2.525 4.01 2.525 4.01 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#784F39\",transform:\"translate(617,477)\"})),_path2159||(_path2159=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 1.32 0.66 2.64 1 4 C2.2375 3.773125 3.475 3.54625 4.75 3.3125 C7.86853111 2.90333102 8.68127899 2.81673542 11.5 4.4375 C11.995 4.953125 12.49 5.46875 13 6 C4.57142857 7.42857143 4.57142857 7.42857143 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#34120C\",transform:\"translate(414,477)\"})),_path2160||(_path2160=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0.33 5.28 0.66 8 1 C8.33 2.65 8.66 4.3 9 6 C6.69 5.67 4.38 5.34 2 5 C1.34 3.35 0.68 1.7 0 0 Z \",fill:\"#240606\",transform:\"translate(203,480)\"})),_path2161||(_path2161=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.14560041 1.17960015 6.20999556 2.51044756 9.25 3.9375 C9.93578125 4.25589844 10.6215625 4.57429688 11.328125 4.90234375 C13 6 13 6 14 9 C10.26234143 8.37123501 7.80966403 6.6829182 4.75 4.5 C3.85796875 3.8709375 2.9659375 3.241875 2.046875 2.59375 C1.37140625 2.0678125 0.6959375 1.541875 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#4E3224\",transform:\"translate(546,466)\"})),_path2162||(_path2162=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.95 0.99 4.95 0.99 10 2 C10 3.32 10 4.64 10 6 C8.5164999 5.57742724 7.03823576 5.13643678 5.5625 4.6875 C4.73878906 4.44386719 3.91507813 4.20023437 3.06640625 3.94921875 C2.04353516 3.47935547 2.04353516 3.47935547 1 3 C0.67 2.01 0.34 1.02 0 0 Z \",fill:\"#AE7756\",transform:\"translate(616,438)\"})),_path2163||(_path2163=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.99 1.485 -0.99 1.485 -2 3 C-2 2.34 -2 1.68 -2 1 C-7.445 3.475 -7.445 3.475 -13 6 C-13 4.35 -13 2.7 -13 1 C-12.01 1 -11.02 1 -10 1 C-6.78548731 -0.60725635 -3.56387464 -0.05748185 0 0 Z \",fill:\"#A33728\",transform:\"translate(308,434)\"})),_path2164||(_path2164=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.66 2 1.32 2 2 C2.680625 2.226875 3.36125 2.45375 4.0625 2.6875 C7.79614324 4.35572357 10.72163421 6.55729608 14 9 C13.34 9.66 12.68 10.32 12 11 C10.37327315 9.87749844 8.74867418 8.75191267 7.125 7.625 C5.76761719 6.68527344 5.76761719 6.68527344 4.3828125 5.7265625 C2 4 2 4 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#695449\",transform:\"translate(376,406)\"})),_path2165||(_path2165=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0.33 3.3 0.66 5 1 C4.67 1.99 4.34 2.98 4 4 C2.68 4 1.36 4 0 4 C0 4.99 0 5.98 0 7 C-2.97 6.505 -2.97 6.505 -6 6 C-4.68 5.67 -3.36 5.34 -2 5 C-2 4.34 -2 3.68 -2 3 C-1.34 3 -0.68 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#951613\",transform:\"translate(116,404)\"})),_path2166||(_path2166=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4 0.66 4 1.32 4 2 C6.64 2 9.28 2 12 2 C12 2.33 12 2.66 12 3 C4.74 3 -2.52 3 -10 3 C-10 2.67 -10 2.34 -10 2 C-6.7 2 -3.4 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#320207\",transform:\"translate(70,406)\"})),_path2167||(_path2167=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.63 0 7.26 0 11 0 C11.33 1.32 11.66 2.64 12 4 C8.04 4 4.08 4 0 4 C0 3.67 0 3.34 0 3 C3.465 2.505 3.465 2.505 7 2 C4.69 1.67 2.38 1.34 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#041B12\",transform:\"translate(501,403)\"})),_path2168||(_path2168=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.6224715 2.6224715 2.64217954 4.35023127 3 8 C2.5625 10.875 2.5625 10.875 2 13 C1.34 13 0.68 13 0 13 C-1.28571429 4.57142857 -1.28571429 4.57142857 0 0 Z \",fill:\"#AD713D\",transform:\"translate(473,396)\"})),_path2169||(_path2169=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C-4.61 2.67 -10.22 2.34 -16 2 C-16 1.67 -16 1.34 -16 1 C-10.65097076 0.40801257 -5.39115154 -0.14187241 0 0 Z \",fill:\"#071213\",transform:\"translate(510,398)\"})),_path2170||(_path2170=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.485 0.99 1.485 0.99 3 2 C4.71444889 2.43738696 6.44667784 2.80848688 8.1875 3.125 C9.08855469 3.29257812 9.98960937 3.46015625 10.91796875 3.6328125 C11.60503906 3.75398438 12.29210937 3.87515625 13 4 C13 4.99 13 5.98 13 7 C9.18507894 6.32677864 5.57596926 5.50985369 2 4 C0.625 1.875 0.625 1.875 0 0 Z \",fill:\"#636942\",transform:\"translate(442,391)\"})),_path2171||(_path2171=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.93 0.495 6.93 0.495 14 1 C13.67 1.66 13.34 2.32 13 3 C8.71 3 4.42 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#F1EFC6\",transform:\"translate(559,379)\"})),_path2172||(_path2172=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4 0.66 4 1.32 4 2 C5.32 2.66 6.64 3.32 8 4 C8 4.33 8 4.66 8 5 C5.36 5 2.72 5 0 5 C-0.33 4.01 -0.66 3.02 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#F4EFC5\",transform:\"translate(532,370)\"})),_path2173||(_path2173=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0 4.62 0 7 0 C6.67 1.98 6.34 3.96 6 6 C5.34 6 4.68 6 4 6 C3.67 6.66 3.34 7.32 3 8 C2.01 5.36 1.02 2.72 0 0 Z \",fill:\"#531C27\",transform:\"translate(218,368)\"})),_path2174||(_path2174=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.5 1.375 2.5 1.375 5 3 C5 3.66 5 4.32 5 5 C2.64561267 6.42944945 1.51967567 7.08661261 -1.25 6.625 C-1.8275 6.41875 -2.405 6.2125 -3 6 C-3 4.68 -3 3.36 -3 2 C-2.01 1.34 -1.02 0.68 0 0 Z \",fill:\"#300B0C\",transform:\"translate(351,363)\"})),_path2175||(_path2175=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C0.01 4.485 0.01 4.485 -1 6 C-3.625 6.1875 -3.625 6.1875 -6 6 C-5.67 4.35 -5.34 2.7 -5 1 C-3.35 0.67 -1.7 0.34 0 0 Z \",fill:\"#E49C8D\",transform:\"translate(246,352)\"})),_path2176||(_path2176=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.59355614 2.64860427 0.74209269 5.29197322 1 8 C0.01 7.67 -0.98 7.34 -2 7 C-2.33 5.02 -2.66 3.04 -3 1 C-3.66 1 -4.32 1 -5 1 C-5.33 2.32 -5.66 3.64 -6 5 C-6.33 4.34 -6.66 3.68 -7 3 C-6.67 2.01 -6.34 1.02 -6 0 C-3.42525708 -0.99667468 -2.51072708 -1.25536354 0 0 Z \",fill:\"#622121\",transform:\"translate(337,337)\"})),_path2177||(_path2177=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.66 1.98 1.32 3 2 C1.35 3.65 -0.3 5.3 -2 7 C-2.33 6.34 -2.66 5.68 -3 5 C-6.96 5 -10.92 5 -15 5 C-15 4.67 -15 4.34 -15 4 C-13.62714844 3.94392578 -13.62714844 3.94392578 -12.2265625 3.88671875 C-11.03804688 3.82097656 -9.84953125 3.75523437 -8.625 3.6875 C-7.44164063 3.62949219 -6.25828125 3.57148438 -5.0390625 3.51171875 C-4.03617188 3.34285156 -3.03328125 3.17398437 -2 3 C-1.34 2.01 -0.68 1.02 0 0 Z \",fill:\"#F7A384\",transform:\"translate(125,341)\"})),_path2178||(_path2178=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.78637633 4.1795645 1.79562512 6.14668677 1 11 C-1.64 11 -4.28 11 -7 11 C-6.67 10.01 -6.34 9.02 -6 8 C-4.35 8.33 -2.7 8.66 -1 9 C-0.67 6.03 -0.34 3.06 0 0 Z \",fill:\"#D7BCA7\",transform:\"translate(505,327)\"})),_path2179||(_path2179=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C1.99 1.67 2.98 1.34 4 1 C4 1.99 4 2.98 4 4 C4.66 4.33 5.32 4.66 6 5 C6.33 5.66 6.66 6.32 7 7 C6.34 7 5.68 7 5 7 C5 7.66 5 8.32 5 9 C4.34 9 3.68 9 3 9 C3 8.34 3 7.68 3 7 C2.34 7 1.68 7 1 7 C0.67 4.69 0.34 2.38 0 0 Z \",fill:\"#6C2F23\",transform:\"translate(313,323)\"})),_path2180||(_path2180=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0.66 4.62 1.32 7 2 C7.33 1.34 7.66 0.68 8 0 C8 1.98 8 3.96 8 6 C3.25 5.125 3.25 5.125 1 4 C0.375 1.9375 0.375 1.9375 0 0 Z \",fill:\"#846A3C\",transform:\"translate(396,323)\"})),_path2181||(_path2181=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C2.26457031 3.16435547 2.26457031 3.16435547 3.5546875 3.33203125 C5.19824219 3.56986328 5.19824219 3.56986328 6.875 3.8125 C8.51082031 4.03873047 8.51082031 4.03873047 10.1796875 4.26953125 C13 5 13 5 15 8 C14.01 7.67 13.02 7.34 12 7 C10.10787263 6.77820215 8.21115528 6.59385985 6.3125 6.4375 C5.31863281 6.35371094 4.32476562 6.26992188 3.30078125 6.18359375 C2.16189453 6.09271484 2.16189453 6.09271484 1 6 C0.67 4.02 0.34 2.04 0 0 Z \",fill:\"#2D3F26\",transform:\"translate(378,319)\"})),_path2182||(_path2182=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C4.34 3.3 3.68 6.6 3 10 C0 7 0 7 -0.1875 3.3125 C-0.125625 2.219375 -0.06375 1.12625 0 0 Z \",fill:\"#8F976A\",transform:\"translate(250,308)\"})),_path2183||(_path2183=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C-3.7749209 2.95498418 -8.15139376 3.24243031 -13 3 C-13.66 2.34 -14.32 1.68 -15 1 C-9.9752761 0.37470103 -5.07471573 -0.13012092 0 0 Z \",fill:\"#A68C7A\",transform:\"translate(61,300)\"})),_path2184||(_path2184=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.33 0 0.66 0 1 C-4.83974712 2.17327203 -9.73256121 2.9302313 -14.4375 1 C-14.953125 0.67 -15.46875 0.34 -16 0 C-10.71694183 -1.69057861 -5.32900731 -1.29188056 0 0 Z \",fill:\"#D79D7C\",transform:\"translate(364,279)\"})),_path2185||(_path2185=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.3 0.33 6.6 0.66 10 1 C10 1.99 10 2.98 10 4 C6.7 4 3.4 4 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#97B48B\",transform:\"translate(422,269)\"})),_path2186||(_path2186=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0 3.96 0 6 0 C6 0.66 6 1.32 6 2 C6.66 2 7.32 2 8 2 C7.67 3.32 7.34 4.64 7 6 C6.01 5.34 5.02 4.68 4 4 C4 4.66 4 5.32 4 6 C3.34 6 2.68 6 2 6 C1.34 4.02 0.68 2.04 0 0 Z \",fill:\"#665146\",transform:\"translate(16,262)\"})),_path2187||(_path2187=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.475 0.495 2.475 0.495 5 1 C4.67 2.65 4.34 4.3 4 6 C4.66 6.33 5.32 6.66 6 7 C6 8.98 6 10.96 6 13 C2.03139717 8.65934066 2.03139717 8.65934066 1.875 5.375 C1.91625 4.59125 1.9575 3.8075 2 3 C1.34 2.01 0.68 1.02 0 0 Z \",fill:\"#B7765E\",transform:\"translate(191,256)\"})),_path2188||(_path2188=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.9375 0.3125 1.9375 0.3125 4 1 C4.97608217 3.92824652 5.08226668 5.95613276 5 9 C4.360625 9.28875 3.72125 9.5775 3.0625 9.875 C0.84793921 10.82823451 0.84793921 10.82823451 0 13 C0.69941596 9.85262818 1.76078698 6.97411124 3 4 C2.34 4 1.68 4 1 4 C0.67 2.68 0.34 1.36 0 0 Z \",fill:\"#6D3A2A\",transform:\"translate(84,242)\"})),_path2189||(_path2189=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-3.4352048 2.29013653 -4.985331 2.17842973 -9 2 C-9.33 3.32 -9.66 4.64 -10 6 C-10.33 5.34 -10.66 4.68 -11 4 C-11.99 3.67 -12.98 3.34 -14 3 C-14 2.34 -14 1.68 -14 1 C-9.27685687 0.22887459 -4.78478822 -0.09764874 0 0 Z \",fill:\"#332220\",transform:\"translate(517,238)\"})),_path2190||(_path2190=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0.33 4.62 0.66 7 1 C7 4 7 7 7 10 C6.34 8.68 5.68 7.36 5 6 C4.34 6 3.68 6 3 6 C3 5.01 3 4.02 3 3 C2.01 3 1.02 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#4F2C23\",transform:\"translate(9,236)\"})),_path2191||(_path2191=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.75 0.875 5.75 0.875 8 2 C8 2.66 8 3.32 8 4 C7.01 4 6.02 4 5 4 C5 4.66 5 5.32 5 6 C4.01 6.33 3.02 6.66 2 7 C1.01 6.34 0.02 5.68 -1 5 C-0.67 4.34 -0.34 3.68 0 3 C0.66 3 1.32 3 2 3 C2 2.34 2 1.68 2 1 C1.34 0.67 0.68 0.34 0 0 Z \",fill:\"#F4CC9A\",transform:\"translate(190,225)\"})),_path2192||(_path2192=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.20626034 1.50223584 5.73900021 4.28550034 8 8 C4.12867972 7.42647107 1.91827204 5.51295648 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#672F19\",transform:\"translate(236,205)\"})),_path2193||(_path2193=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 1.32 0 2.64 0 4 C-2.8125 5.5625 -2.8125 5.5625 -6 7 C-6.99 6.67 -7.98 6.34 -9 6 C-3.15384615 0 -3.15384615 0 0 0 Z \",fill:\"#594A3F\",transform:\"translate(444,188)\"})),_path2194||(_path2194=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.99 0.66 -1.98 1.32 -3 2 C-3 2.33 -3 2.66 -3 3 C-6.63 3.33 -10.26 3.66 -14 4 C-14 3.34 -14 2.68 -14 2 C-12.42085985 1.46658816 -10.83645613 0.94874237 -9.25 0.4375 C-8.36828125 0.14746094 -7.4865625 -0.14257812 -6.578125 -0.44140625 C-3.92165684 -1.01697435 -2.52968894 -0.89248371 0 0 Z \",fill:\"#307066\",transform:\"translate(617,180)\"})),_path2195||(_path2195=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 1.32 0 2.64 0 4 C0.66 4 1.32 4 2 4 C2 4.99 2 5.98 2 7 C1.236875 6.690625 0.47375 6.38125 -0.3125 6.0625 C-2.18789677 5.32106407 -4.08684652 4.63771783 -6 4 C-6 3.01 -6 2.02 -6 1 C-3.92446352 0.4465236 -2.15634036 0 0 0 Z \",fill:\"#523727\",transform:\"translate(110,176)\"})),_path2196||(_path2196=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.21524305 1.40844718 5.32183868 3.10344786 7.75 5.625 C8.67039063 6.57246094 8.67039063 6.57246094 9.609375 7.5390625 C10.29773438 8.26222656 10.29773438 8.26222656 11 9 C10.34 9.66 9.68 10.32 9 11 C7.49403892 9.54782324 5.99537896 8.08807139 4.5 6.625 C3.6646875 5.81289062 2.829375 5.00078125 1.96875 4.1640625 C0 2 0 2 0 0 Z \",fill:\"#D9BD93\",transform:\"translate(210,176)\"})),_path2197||(_path2197=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C2.67 2.65 2.34 4.3 2 6 C-0.97 5.01 -3.94 4.02 -7 3 C-3 1 -3 1 -2 1 C-1.34 0.67 -0.68 0.34 0 0 Z \",fill:\"#795134\",transform:\"translate(42,151)\"})),_path2198||(_path2198=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C4.14285714 7.42857143 4.14285714 7.42857143 5 11 C3.35 10.67 1.7 10.34 0 10 C0 6.7 0 3.4 0 0 Z \",fill:\"#71907A\",transform:\"translate(194,149)\"})),_path2199||(_path2199=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.78504172 2.48454089 7.86077669 4.47951843 11 9 C7.78147169 8.36934243 5.49198931 7.21979305 2.75 5.4375 C2.04359375 4.98246094 1.3371875 4.52742188 0.609375 4.05859375 C-0.18726563 3.53458984 -0.18726563 3.53458984 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#1F1A1B\",transform:\"translate(33,57)\"})),_path2200||(_path2200=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.33 2.64 0.66 4 1 C4 1.66 4 2.32 4 3 C4.99 3 5.98 3 7 3 C7.12375 3.804375 7.2475 4.60875 7.375 5.4375 C7.684375 6.7059375 7.684375 6.7059375 8 8 C8.66 8.33 9.32 8.66 10 9 C10.33 8.34 10.66 7.68 11 7 C11 8.65 11 10.3 11 12 C8.5 10.75 8.5 10.75 6 9 C6 7.68 6 6.36 6 5 C5.38125 4.690625 4.7625 4.38125 4.125 4.0625 C2.75 3.375 1.375 2.6875 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#634134\",transform:\"translate(104,34)\"})),_path2201||(_path2201=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C2.32407669 2.68486725 3.65909241 3.34870203 5 4 C7.25 5.5 7.25 5.5 9 7 C9 7.66 9 8.32 9 9 C4.25 7.125 4.25 7.125 2 6 C2 5.34 2 4.68 2 4 C0.68 3.34 -0.64 2.68 -2 2 C-1.34 1.34 -0.68 0.68 0 0 Z \",fill:\"#7A513C\",transform:\"translate(572,519)\"})),_path2202||(_path2202=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.33 0.66 2.66 1.32 3 2 C3.99 2.33 4.98 2.66 6 3 C8.32265612 5.58072903 9 6.45176068 9 10 C4.71095765 8.4114658 2.67654474 5.56872632 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#523227\",transform:\"translate(454,518)\"})),_path2203||(_path2203=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-1.36125 1.87625 -1.36125 1.87625 -2.75 1.75 C-6.10041408 1.68975201 -6.10041408 1.68975201 -8.375 4 C-8.91125 4.66 -9.4475 5.32 -10 6 C-10.66 5.67 -11.32 5.34 -12 5 C-9.57303371 0.26741573 -9.57303371 0.26741573 -7.125 -0.875 C-4.59542424 -1.02379857 -2.45069642 -0.6126741 0 0 Z \",fill:\"#62513F\",transform:\"translate(159,499)\"})),_path2204||(_path2204=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.97582031 0.00902344 1.95164062 0.01804687 2.95703125 0.02734375 C3.69308594 0.03894531 4.42914063 0.05054688 5.1875 0.0625 C5.1875 0.3925 5.1875 0.7225 5.1875 1.0625 C-3.2275 2.5475 -3.2275 2.5475 -11.8125 4.0625 C-11.4825 3.0725 -11.1525 2.0825 -10.8125 1.0625 C-7.13862505 0.20951624 -3.7677607 -0.04539471 0 0 Z \",fill:\"#3C2A2B\",transform:\"translate(458.8125,488.9375)\"})),_path2205||(_path2205=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.66 2 1.32 2 2 C1.34 2 0.68 2 0 2 C0 2.66 0 3.32 0 4 C1.32 3.67 2.64 3.34 4 3 C4 3.66 4 4.32 4 5 C0.7 5.66 -2.6 6.32 -6 7 C-5.34 5.68 -4.68 4.36 -4 3 C-3.01 3 -2.02 3 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#684432\",transform:\"translate(30,477)\"})),_path2206||(_path2206=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.58409994 0.11487748 3.16728963 0.24234508 4.75 0.375 C6.07257813 0.47941406 6.07257813 0.47941406 7.421875 0.5859375 C10 1 10 1 14 3 C9.38 3 4.76 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#221115\",transform:\"translate(210,473)\"})),_path2207||(_path2207=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 1.32 2 2.64 2 4 C2.66 4 3.32 4 4 4 C4 4.66 4 5.32 4 6 C4.66 6 5.32 6 6 6 C6 7.32 6 8.64 6 10 C2.83884224 8.63016497 2.0072908 8.0109362 0 5 C-0.125 2.3125 -0.125 2.3125 0 0 Z \",fill:\"#F2DDB8\",transform:\"translate(338,458)\"})),_path2208||(_path2208=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.46326465 -0.45356243 9.60931587 0.40621058 15 4 C14.01 4.495 14.01 4.495 13 5 C11.824375 4.505 11.824375 4.505 10.625 4 C8.11239588 2.73635834 8.11239588 2.73635834 5.9375 3.625 C5.298125 3.74875 4.65875 3.8725 4 4 C1.75 2.0625 1.75 2.0625 0 0 Z \",fill:\"#624130\",transform:\"translate(491,430)\"})),_path2209||(_path2209=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 1.65 0 3.3 0 5 C-0.680625 4.690625 -1.36125 4.38125 -2.0625 4.0625 C-5.36965912 2.86629351 -8.51545878 2.40994603 -12 2 C-12 1.67 -12 1.34 -12 1 C-7.9472484 0.01751476 -4.16138263 -0.08159574 0 0 Z \",fill:\"#082921\",transform:\"translate(513,407)\"})),_path2210||(_path2210=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.60186108 2.60186108 2.29810177 3.82354355 2.3125 7.4375 C2.32925781 8.40558594 2.34601563 9.37367188 2.36328125 10.37109375 C2 13 2 13 -1 16 C-0.67 10.72 -0.34 5.44 0 0 Z \",fill:\"#F4C607\",transform:\"translate(202,400)\"})),_path2211||(_path2211=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0 3.96 0 6 0 C6.33 0.66 6.66 1.32 7 2 C6.01 2.495 6.01 2.495 5 3 C5.99 3.66 6.98 4.32 8 5 C5.69 5 3.38 5 1 5 C0.67 3.35 0.34 1.7 0 0 Z \",fill:\"#975442\",transform:\"translate(342,389)\"})),_path2212||(_path2212=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0 5.28 0 8 0 C7.01 0.33 6.02 0.66 5 1 C5.33 2.32 5.66 3.64 6 5 C4.02 5 2.04 5 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#B0C0BC\",transform:\"translate(134,386)\"})),_path2213||(_path2213=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.67542976 0.28604898 3.34385343 0.61781233 5 1 C5.33 2.98 5.66 4.96 6 7 C1.32307692 5.52307692 1.32307692 5.52307692 -0.3125 2.875 C-0.539375 2.25625 -0.76625 1.6375 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#A91622\",transform:\"translate(342,377)\"})),_path2214||(_path2214=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.375 -0.1875 3.375 -0.1875 7 0 C7.66 0.99 8.32 1.98 9 3 C8.34 3.66 7.68 4.32 7 5 C6.67 4.67 6.34 4.34 6 4 C3.67182036 3.63239269 1.3381615 3.29758419 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#E3CB8D\",transform:\"translate(460,375)\"})),_path2215||(_path2215=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 3 2 3 2 5 C-2.29 5 -6.58 5 -11 5 C-7.23312136 3.11656068 -5.97041037 2.77942165 -2 3 C-2 2.34 -2 1.68 -2 1 C-1.34 0.67 -0.68 0.34 0 0 Z \",fill:\"#1F0F0F\",transform:\"translate(272,357)\"})),_path2216||(_path2216=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.07358419 3.11037628 2.29487123 3.99561252 2.3125 7.5625 C2.33763672 8.74005859 2.33763672 8.74005859 2.36328125 9.94140625 C2.18345703 10.96041016 2.18345703 10.96041016 2 12 C1.01 12.66 0.02 13.32 -1 14 C-1.33 12.68 -1.66 11.36 -2 10 C-1.34 10 -0.68 10 0 10 C0 6.7 0 3.4 0 0 Z \",fill:\"#371E13\",transform:\"translate(413,350)\"})),_path2217||(_path2217=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 3.96 1 7.92 1 12 C0.01 12 -0.98 12 -2 12 C-3.60725635 8.78548731 -3.05748185 5.56387464 -3 2 C-2.67 2 -2.34 2 -2 2 C-1.67 3.65 -1.34 5.3 -1 7 C-0.67 4.69 -0.34 2.38 0 0 Z \",fill:\"#8A541B\",transform:\"translate(205,350)\"})),_path2218||(_path2218=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-1.73696562 3.5830205 -3.54056497 5.09353724 -5.375 6.5625 C-6.37273437 7.36816406 -7.37046875 8.17382812 -8.3984375 9.00390625 C-11 11 -11 11 -13 12 C-11.50198648 8.38522825 -9.42462583 6.31379537 -6.5 3.75 C-5.7059375 3.04359375 -4.911875 2.3371875 -4.09375 1.609375 C-2 0 -2 0 0 0 Z \",fill:\"#A99F9F\",transform:\"translate(224,353)\"})),_path2219||(_path2219=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 5.28 1 10.56 1 16 C0.01 16 -0.98 16 -2 16 C-1.34 10.72 -0.68 5.44 0 0 Z \",fill:\"#060B08\",transform:\"translate(411,344)\"})),_path2220||(_path2220=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.475 0.99 2.475 0.99 5 2 C5.66 1.34 6.32 0.68 7 0 C7.625 2.875 7.625 2.875 8 6 C7.34 6.66 6.68 7.32 6 8 C5.38125 7.195625 4.7625 6.39125 4.125 5.5625 C2.25835959 2.96125481 2.25835959 2.96125481 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#302612\",transform:\"translate(600,352)\"})),_path2221||(_path2221=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C1.66 2 2.32 2 3 2 C3.33 1.34 3.66 0.68 4 0 C3.67 3.96 3.34 7.92 3 12 C2.34 11.67 1.68 11.34 1 11 C0.5859375 8.49609375 0.5859375 8.49609375 0.375 5.4375 C0.30023438 4.42558594 0.22546875 3.41367187 0.1484375 2.37109375 C0.09945312 1.58863281 0.05046875 0.80617188 0 0 Z \",fill:\"#BF8545\",transform:\"translate(202,346)\"})),_path2222||(_path2222=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.455 0.99 4.455 0.99 9 2 C8.01 2.66 7.02 3.32 6 4 C6.66 4.33 7.32 4.66 8 5 C8 5.66 8 6.32 8 7 C7.01 7.33 6.02 7.66 5 8 C2.525 4.04 2.525 4.04 0 0 Z \",fill:\"#1F1B15\",transform:\"translate(525,348)\"})),_path2223||(_path2223=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C5 0.66 5 1.32 5 2 C5.94875 1.95875 6.8975 1.9175 7.875 1.875 C11 2 11 2 13 4 C5.25 4.125 5.25 4.125 3 3 C2.67 3.66 2.34 4.32 2 5 C1.34 3.35 0.68 1.7 0 0 Z \",fill:\"#BF1F16\",transform:\"translate(155,336)\"})),_path2224||(_path2224=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C9.41002278 -0.18451025 9.41002278 -0.18451025 14 1 C14 1.66 14 2.32 14 3 C7.07 2.505 7.07 2.505 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#9E674D\",transform:\"translate(544,332)\"})),_path2225||(_path2225=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 3.96 0 7.92 0 12 C-0.99 12 -1.98 12 -3 12 C-3 8.37 -3 4.74 -3 1 C-1 0 -1 0 0 0 Z \",fill:\"#20110B\",transform:\"translate(273,322)\"})),_path2226||(_path2226=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C-1.99480917 2.8723412 -4.63575911 3.10829766 -7.75 3.0625 C-8.54921875 3.05347656 -9.3484375 3.04445313 -10.171875 3.03515625 C-10.77515625 3.02355469 -11.3784375 3.01195312 -12 3 C-12 2.34 -12 1.68 -12 1 C-7.9472484 0.01751476 -4.16138263 -0.08159574 0 0 Z \",fill:\"#081916\",transform:\"translate(426,326)\"})),_path2227||(_path2227=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.66 2.64 1.32 4 2 C4 2.66 4 3.32 4 4 C4.99 4 5.98 4 7 4 C7 4.66 7 5.32 7 6 C5.35 6.66 3.7 7.32 2 8 C1.67 7.01 1.34 6.02 1 5 C0.01 4.67 -0.98 4.34 -2 4 C-2 3.34 -2 2.68 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#D3D8B6\",transform:\"translate(490,318)\"})),_path2228||(_path2228=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.042721 1.66611905 1.04063832 3.33382885 1 5 C0 6 0 6 -2.50390625 6.09765625 C-4.01791016 6.08025391 -4.01791016 6.08025391 -5.5625 6.0625 C-6.57441406 6.05347656 -7.58632812 6.04445313 -8.62890625 6.03515625 C-9.41136719 6.02355469 -10.19382813 6.01195312 -11 6 C-11 5.34 -11 4.68 -11 4 C-5.555 3.505 -5.555 3.505 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#E51D0D\",transform:\"translate(177,298)\"})),_path2229||(_path2229=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.1105424 -0.11269443 11.95170514 0.10395632 18 1 C17.67 1.66 17.34 2.32 17 3 C14.03 3 11.06 3 8 3 C8 2.34 8 1.68 8 1 C5.36 1 2.72 1 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#87674C\",transform:\"translate(20,300)\"})),_path2230||(_path2230=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0.33 5.94 0.66 9 1 C9 1.99 9 2.98 9 4 C6.03 3.67 3.06 3.34 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#403E31\",transform:\"translate(340,272)\"})),_path2231||(_path2231=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.5 1.8125 2.5 1.8125 5 4 C5 4.99 5 5.98 5 7 C5.99 6.67 6.98 6.34 8 6 C8.33 6.66 8.66 7.32 9 8 C5.37 8 1.74 8 -2 8 C-0.68 7.67 0.64 7.34 2 7 C1.34 6.01 0.68 5.02 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#625132\",transform:\"translate(89,261)\"})),_path2232||(_path2232=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.33 2.97 2.66 5.94 3 9 C1.68 9 0.36 9 -1 9 C-0.67 6.03 -0.34 3.06 0 0 Z \",fill:\"#88583C\",transform:\"translate(38,260)\"})),_path2233||(_path2233=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.33 2.31 2.66 4.62 3 7 C0.03 6.505 0.03 6.505 -3 6 C-3.33 4.68 -3.66 3.36 -4 2 C-2.68 2 -1.36 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#B36C58\",transform:\"translate(136,260)\"})),_path2234||(_path2234=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.33 1.65 2.66 3.3 3 5 C3.66 5 4.32 5 5 5 C4.6875 6.9375 4.6875 6.9375 4 9 C3.01 9.33 2.02 9.66 1 10 C0.67 6.7 0.34 3.4 0 0 Z \",fill:\"#D07E61\",transform:\"translate(197,254)\"})),_path2235||(_path2235=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C5.33 1.98 5.66 3.96 6 6 C4.68 6.33 3.36 6.66 2 7 C1.34 4.69 0.68 2.38 0 0 Z \",fill:\"#AE6555\",transform:\"translate(16,237)\"})),_path2236||(_path2236=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0.33 4.62 0.66 7 1 C7 1.66 7 2.32 7 3 C7.99 3.33 8.98 3.66 10 4 C9.67 4.66 9.34 5.32 9 6 C7.68 5.67 6.36 5.34 5 5 C5 4.34 5 3.68 5 3 C4.34 3 3.68 3 3 3 C2.67 3.66 2.34 4.32 2 5 C1.34 4.67 0.68 4.34 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#693A31\",transform:\"translate(116,241)\"})),_path2237||(_path2237=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0 4.62 0 7 0 C7.33 0.66 7.66 1.32 8 2 C10.52733235 2.65555119 10.52733235 2.65555119 13 3 C13 3.66 13 4.32 13 5 C9.7 4.67 6.4 4.34 3 4 C3 3.34 3 2.68 3 2 C2.01 1.67 1.02 1.34 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#32201C\",transform:\"translate(145,229)\"})),_path2238||(_path2238=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.33 1.65 -0.66 3.3 -1 5 C-3.97 4.505 -3.97 4.505 -7 4 C-7.33 3.01 -7.66 2.02 -8 1 C-3.375 -1.125 -3.375 -1.125 0 0 Z \",fill:\"#3C1A1D\",transform:\"translate(530,229)\"})),_path2239||(_path2239=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-5.73303505 3.57300962 -10.15659442 4.24327778 -16 3 C-16 2.67 -16 2.34 -16 2 C-13.70858188 1.66496236 -11.41685737 1.33201958 -9.125 1 C-7.21074219 0.7215625 -7.21074219 0.7215625 -5.2578125 0.4375 C-2 0 -2 0 0 0 Z \",fill:\"#6A5E51\",transform:\"translate(626,219)\"})),_path2240||(_path2240=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.33 0.99 -0.66 1.98 -1 3 C-3.55307196 4.25024577 -6.17025281 4.80219243 -9 5 C-11.5 3.625 -11.5 3.625 -13 2 C-11.58461283 1.66127487 -10.16762037 1.32925376 -8.75 1 C-7.56664062 0.7215625 -7.56664062 0.7215625 -6.359375 0.4375 C-4 0 -4 0 0 0 Z \",fill:\"#2B2B25\",transform:\"translate(548,210)\"})),_path2241||(_path2241=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.56203125 0.36867187 1.1240625 0.73734375 1.703125 1.1171875 C-1.93350104 3.57725806 -4.88819688 4.82327563 -9.296875 5.1171875 C-9.956875 4.4571875 -10.616875 3.7971875 -11.296875 3.1171875 C-9.88995893 2.38967962 -8.47081478 1.68578397 -7.046875 0.9921875 C-6.25796875 0.59773437 -5.4690625 0.20328125 -4.65625 -0.203125 C-2.296875 -0.8828125 -2.296875 -0.8828125 0 0 Z \",fill:\"#2D1F1E\",transform:\"translate(470.296875,180.8828125)\"})),_path2242||(_path2242=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.99 0 1.98 0 3 C-1.96875 4.82421875 -1.96875 4.82421875 -4.5 6.6875 C-5.3353125 7.31011719 -6.170625 7.93273437 -7.03125 8.57421875 C-7.6809375 9.04472656 -8.330625 9.51523438 -9 10 C-9.33 9.01 -9.66 8.02 -10 7 C-9.34 7 -8.68 7 -8 7 C-7.79375 6.401875 -7.5875 5.80375 -7.375 5.1875 C-5.49073918 2.18981233 -3.18867916 1.38638224 0 0 Z \",fill:\"#42312B\",transform:\"translate(429,167)\"})),_path2243||(_path2243=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3 2.31 3 4.62 3 7 C3.66 7 4.32 7 5 7 C4.67 7.99 4.34 8.98 4 10 C1.24049934 7.50754779 -0.62030099 5.79699009 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#928967\",transform:\"translate(155,157)\"})),_path2244||(_path2244=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C3.26237731 2.52475462 3.09856404 4.31200466 3.0625 7.125 C3.05347656 8.03507813 3.04445312 8.94515625 3.03515625 9.8828125 C3.02355469 10.58148438 3.01195312 11.28015625 3 12 C2.01 12 1.02 12 0 12 C0 8.04 0 4.08 0 0 Z \",fill:\"#DFA986\",transform:\"translate(154,145)\"})),_path2245||(_path2245=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.66 1.32 1.32 2 2 C1.625 4.125 1.625 4.125 1 6 C0.67 5.34 0.34 4.68 0 4 C-3.31460705 5.70892499 -3.31460705 5.70892499 -3.6875 9.125 C-3.790625 10.07375 -3.89375 11.0225 -4 12 C-4.33 12 -4.66 12 -5 12 C-5 8.7 -5 5.4 -5 2 C-3.35 2 -1.7 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#4A705E\",transform:\"translate(472,80)\"})),_path2246||(_path2246=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.78375 0.04125 1.5675 0.0825 2.375 0.125 C2.045 1.445 1.715 2.765 1.375 4.125 C0.385 4.125 -0.605 4.125 -1.625 4.125 C-2.285 4.785 -2.945 5.445 -3.625 6.125 C-4.615 6.125 -5.605 6.125 -6.625 6.125 C-3.85227273 0.18344156 -3.85227273 0.18344156 0 0 Z \",fill:\"#507760\",transform:\"translate(461.625,81.875)\"})),_path2247||(_path2247=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.875 0.875 4.875 0.875 6 2 C6.04080783 3.99958364 6.04254356 6.00045254 6 8 C5.34 7.01 4.68 6.02 4 5 C3.67 7.97 3.34 10.94 3 14 C2.67 14 2.34 14 2 14 C1.93941406 13.15695313 1.87882813 12.31390625 1.81640625 11.4453125 C1.73261719 10.34960938 1.64882812 9.25390625 1.5625 8.125 C1.48128906 7.03445312 1.40007812 5.94390625 1.31640625 4.8203125 C1.16998297 2.05271029 1.16998297 2.05271029 0 0 Z \",fill:\"#A68167\",transform:\"translate(137,65)\"})),_path2248||(_path2248=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.15224028 0.92961422 2.29659176 1.8690125 3.4375 2.8125 C4.07558594 3.33457031 4.71367188 3.85664062 5.37109375 4.39453125 C7 6 7 6 8 9 C3.58110387 7.64978174 1.65654657 5.73884332 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#4A3128\",transform:\"translate(606,585)\"})),_path2249||(_path2249=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C0.00390625 4.82421875 0.00390625 4.82421875 -1.4375 6.6875 C-1.91058594 7.31011719 -2.38367188 7.93273437 -2.87109375 8.57421875 C-3.24363281 9.04472656 -3.61617188 9.51523437 -4 10 C-4.66 9.67 -5.32 9.34 -6 9 C-4.47291037 5.56404834 -2.40072955 2.88087546 0 0 Z \",fill:\"#674735\",transform:\"translate(81,588)\"})),_path2250||(_path2250=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.43970626 1.14656875 3.8782229 1.84518278 5.75 4.8125 C6.19859375 5.49957031 6.6471875 6.18664062 7.109375 6.89453125 C8.16892656 9.39934831 7.92399724 10.49281235 7 13 C1.62870159 4.738041 1.62870159 4.738041 0 0 Z \",fill:\"#764E3A\",transform:\"translate(460,551)\"})),_path2251||(_path2251=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.75 0.75 4.75 0.75 7 3 C7 4.32 7 5.64 7 7 C4.20171644 6.61402985 3.1794116 6.19863427 1.25 4.0625 C0 2 0 2 0 0 Z \",fill:\"#442D1F\",transform:\"translate(619,546)\"})),_path2252||(_path2252=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0 5.28 0 8 0 C7.67 0.99 7.34 1.98 7 3 C4.69 3.33 2.38 3.66 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#990A1E\",transform:\"translate(242,488)\"})),_path2253||(_path2253=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.5775 0.2475 -1.155 0.495 -1.75 0.75 C-4.12162133 1.93275056 -4.12162133 1.93275056 -6.0625 4.0625 C-8 6 -8 6 -11 7 C-10.9375 4.6875 -10.9375 4.6875 -10 2 C-4 -1.33333333 -4 -1.33333333 0 0 Z \",fill:\"#322721\",transform:\"translate(21,489)\"})),_path2254||(_path2254=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.28477792 2.30718811 7.72291137 4.32966073 11 8 C9.35 8.33 7.7 8.66 6 9 C6 7.68 6 6.36 6 5 C4.68 5 3.36 5 2 5 C2 4.01 2 3.02 2 2 C1.34 2 0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#E6CDAB\",transform:\"translate(570,483)\"})),_path2255||(_path2255=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0 5.94 0 9 0 C9.33 1.32 9.66 2.64 10 4 C2.25 3.125 2.25 3.125 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#E2877F\",transform:\"translate(373,480)\"})),_path2256||(_path2256=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0 3.96 0 6 0 C5.34 1.65 4.68 3.3 4 5 C0.7 4.67 -2.6 4.34 -6 4 C-6 3.67 -6 3.34 -6 3 C-4.02 2.67 -2.04 2.34 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#9F6144\",transform:\"translate(312,471)\"})),_path2257||(_path2257=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0 4.62 0 7 0 C7 1.32 7 2.64 7 4 C4.69 4 2.38 4 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#C55D4A\",transform:\"translate(435,456)\"})),_path2258||(_path2258=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.93423645 3.01031744 1.04449911 3.86650268 0 7 C-1.32 7 -2.64 7 -4 7 C-4 5.02 -4 3.04 -4 1 C-2.68 0.67 -1.36 0.34 0 0 Z \",fill:\"#160907\",transform:\"translate(349,440)\"})),_path2259||(_path2259=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.33 0 0.66 0 1 C-1.65 1.33 -3.3 1.66 -5 2 C-5 2.33 -5 2.66 -5 3 C-11.625 2.25 -11.625 2.25 -15 0 C-9.65370398 -1.0024305 -5.37625234 -0.84888195 0 0 Z \",fill:\"#3A291E\",transform:\"translate(367,429)\"})),_path2260||(_path2260=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4 2.31 4 4.62 4 7 C1.03 6.505 1.03 6.505 -2 6 C-2 4 -2 4 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#F6F123\",transform:\"translate(320,426)\"})),_path2261||(_path2261=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-9.41002278 3.44419134 -9.41002278 3.44419134 -14 3 C-14 2.01 -14 1.02 -14 0 C-12.41773035 -0.19627391 -10.83410729 -0.38165538 -9.25 -0.5625 C-8.36828125 -0.66691406 -7.4865625 -0.77132813 -6.578125 -0.87890625 C-4.11567549 -0.99456676 -2.33461936 -0.73638695 0 0 Z \",fill:\"#3A2A1F\",transform:\"translate(14,422)\"})),_path2262||(_path2262=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1.57643318 1.01084265 -3.1614517 2.00830511 -4.75 3 C-5.63171875 3.556875 -6.5134375 4.11375 -7.421875 4.6875 C-10 6 -10 6 -14 6 C-14 5.34 -14 4.68 -14 4 C-12.9275 3.54625 -11.855 3.0925 -10.75 2.625 C-8.6710887 1.74481578 -6.72669587 0.84816437 -4.75 -0.25 C-3 -1 -3 -1 0 0 Z \",fill:\"#121C1F\",transform:\"translate(239,417)\"})),_path2263||(_path2263=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.3 0 6.6 0 10 0 C10 0.66 10 1.32 10 2 C10.66 2.33 11.32 2.66 12 3 C8.98968256 3.93423645 8.13349732 4.04449911 5 3 C3.33637583 2.65179959 1.67004829 2.31595508 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#DCB48E\",transform:\"translate(208,416)\"})),_path2264||(_path2264=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.6875 0.3125 2.6875 0.3125 5 1 C4.01 2.98 3.02 4.96 2 7 C0.0625 6.6875 0.0625 6.6875 -2 6 C-2.33 5.01 -2.66 4.02 -3 3 C-1.8125 1.4375 -1.8125 1.4375 0 0 Z \",fill:\"#0D1014\",transform:\"translate(220,411)\"})),_path2265||(_path2265=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.08142204 0.98403218 7.62784925 1.24057024 11.8125 1.0625 C11.4825 1.7225 11.1525 2.3825 10.8125 3.0625 C8.35316009 2.94880789 5.8957091 2.82207349 3.4375 2.6875 C2.73882813 2.6565625 2.04015625 2.625625 1.3203125 2.59375 C-3.9609375 2.2890625 -3.9609375 2.2890625 -6.1875 0.0625 C-3.61912348 -1.22168826 -2.7355858 -0.72038662 0 0 Z \",fill:\"#053C26\",transform:\"translate(524.1875,406.9375)\"})),_path2266||(_path2266=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C1.74535902 2.1270011 1.47077058 4.25162215 1.1875 6.375 C1.03667969 7.55835938 0.88585937 8.74171875 0.73046875 9.9609375 C0 13 0 13 -3 15 C-2.01 10.05 -1.02 5.1 0 0 Z \",fill:\"#400C08\",transform:\"translate(207,396)\"})),_path2267||(_path2267=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.3 0 6.6 0 10 0 C7 3 7 3 4.95703125 3.29296875 C2.97135417 3.1953125 0.98567708 3.09765625 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#B7CB9C\",transform:\"translate(588,403)\"})),_path2268||(_path2268=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0 3.96 0 6 0 C6 0.66 6 1.32 6 2 C4.68 2 3.36 2 2 2 C2 2.99 2 3.98 2 5 C-0.64 4.34 -3.28 3.68 -6 3 C-6 2.67 -6 2.34 -6 2 C-4.02 2 -2.04 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#03070D\",transform:\"translate(114,402)\"})),_path2269||(_path2269=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.10469338 5.75813575 0.74016701 11.29014022 0 17 C-0.66 17 -1.32 17 -2 17 C-2.22084624 10.90218999 -2.01167675 5.78357065 0 0 Z \",fill:\"#F14639\",transform:\"translate(65,386)\"})),_path2270||(_path2270=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C2.67 1.66 2.34 2.32 2 3 C2.66386719 2.98839844 3.32773437 2.97679687 4.01171875 2.96484375 C12.78207381 2.87521968 12.78207381 2.87521968 17 4 C13.24464902 6.50356732 12.13110586 5.9608592 7.8125 5.125 C6.72582031 4.92132813 5.63914062 4.71765625 4.51953125 4.5078125 C3.68808594 4.34023438 2.85664063 4.17265625 2 4 C1.67 4.66 1.34 5.32 1 6 C0.67 4.02 0.34 2.04 0 0 Z \",fill:\"#081D16\",transform:\"translate(477,394)\"})),_path2271||(_path2271=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.33 2.64 0.66 4 1 C3.34 1 2.68 1 2 1 C2.33 2.65 2.66 4.3 3 6 C3.99 6.33 4.98 6.66 6 7 C3 9 3 9 0 9 C0 6.03 0 3.06 0 0 Z \",fill:\"#BDC1AE\",transform:\"translate(7,386)\"})),_path2272||(_path2272=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3 2 3 2 3.51171875 4.1640625 C3.56972656 4.97617187 3.62773437 5.78828125 3.6875 6.625 C3.75324219 7.44226563 3.81898438 8.25953125 3.88671875 9.1015625 C3.92410156 9.72804688 3.96148437 10.35453125 4 11 C3.67 10.01 3.34 9.02 3 8 C1.68 8.33 0.36 8.66 -1 9 C-0.67 6.03 -0.34 3.06 0 0 Z \",fill:\"#A78932\",transform:\"translate(205,382)\"})),_path2273||(_path2273=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.33 2.64 0.66 4 1 C3.25 7.75 3.25 7.75 1 10 C1.33 8.02 1.66 6.04 2 4 C0.68 4.33 -0.64 4.66 -2 5 C-1.34 3.35 -0.68 1.7 0 0 Z \",fill:\"#05261D\",transform:\"translate(161,376)\"})),_path2274||(_path2274=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3 1 3 1 4.25 2.8125 C5.11637742 5.33943414 4.88492145 6.52221994 4 9 C3.01 8.67 2.02 8.34 1 8 C-0.35439668 5.29120665 -0.06501451 2.99066732 0 0 Z \",fill:\"#E8D7AC\",transform:\"translate(468,378)\"})),_path2275||(_path2275=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-3 2 -3 2 -7 2 C-7 2.99 -7 3.98 -7 5 C-6.34 5.33 -5.68 5.66 -5 6 C-6.65 5.67 -8.3 5.34 -10 5 C-9.8125 3.125 -9.8125 3.125 -9 1 C-5.6868424 -0.8804408 -3.58825658 -1.32898392 0 0 Z \",fill:\"#EBDEA7\",transform:\"translate(461,379)\"})),_path2276||(_path2276=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C5.9078584 3.1749094 6.1609041 5.10585211 5.625 8.75 C5.51414062 9.54921875 5.40328125 10.3484375 5.2890625 11.171875 C5.19367188 11.77515625 5.09828125 12.3784375 5 13 C3.43912307 10.19923293 2.73936931 8.00209602 2.5 4.8125 C2.335 3.554375 2.17 2.29625 2 1 C1.34 0.67 0.68 0.34 0 0 Z \",fill:\"#69302C\",transform:\"translate(394,367)\"})),_path2277||(_path2277=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.495 0.99 0.495 2 1 C2 1.99 2 2.98 2 4 C3.65 4 5.3 4 7 4 C7.33 4.99 7.66 5.98 8 7 C7.67 7.66 7.34 8.32 7 9 C6.01 8.67 5.02 8.34 4 8 C3.67 7.34 3.34 6.68 3 6 C2.34 6 1.68 6 1 6 C0.67 4.02 0.34 2.04 0 0 Z \",fill:\"#649160\",transform:\"translate(512,366)\"})),_path2278||(_path2278=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.66 2.64 1.32 4 2 C3.34 2 2.68 2 2 2 C1.34 5.96 0.68 9.92 0 14 C-0.66 13.67 -1.32 13.34 -2 13 C-1.85915204 11.20793453 -1.71216299 9.41635083 -1.5625 7.625 C-1.48128906 6.62726563 -1.40007812 5.62953125 -1.31640625 4.6015625 C-1 2 -1 2 0 0 Z \",fill:\"#23070A\",transform:\"translate(225,367)\"})),_path2279||(_path2279=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0 5.94 0 9 0 C9 0.66 9 1.32 9 2 C4.545 3.485 4.545 3.485 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#806C5C\",transform:\"translate(67,362)\"})),_path2280||(_path2280=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.94 0 11.88 0 18 0 C18 0.33 18 0.66 18 1 C14.37 1 10.74 1 7 1 C7 1.66 7 2.32 7 3 C4.36 2.67 1.72 2.34 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#BD6831\",transform:\"translate(145,362)\"})),_path2281||(_path2281=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C1.35550393 3.01217112 0.34977818 5.51655836 -1.0625 8.25 C-1.42472656 8.95640625 -1.78695312 9.6628125 -2.16015625 10.390625 C-2.43730469 10.92171875 -2.71445313 11.4528125 -3 12 C-3.66 11.01 -4.32 10.02 -5 9 C-3.35 6.03 -1.7 3.06 0 0 Z \",fill:\"#F15D3F\",transform:\"translate(118,360)\"})),_path2282||(_path2282=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.3 0 6.6 0 10 0 C6.09618178 3.90381822 4.33820964 3.56244183 -1 4 C-0.67 2.68 -0.34 1.36 0 0 Z \",fill:\"#D68986\",transform:\"translate(250,357)\"})),_path2283||(_path2283=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 1.32 2 2.64 2 4 C3.32 4 4.64 4 6 4 C6 4.66 6 5.32 6 6 C0.72 5.34 -4.56 4.68 -10 4 C-10 3.67 -10 3.34 -10 3 C-9.36191406 2.95101563 -8.72382813 2.90203125 -8.06640625 2.8515625 C-7.24011719 2.77679688 -6.41382813 2.70203125 -5.5625 2.625 C-4.73878906 2.55539062 -3.91507812 2.48578125 -3.06640625 2.4140625 C-2.38449219 2.27742188 -1.70257813 2.14078125 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#32352F\",transform:\"translate(478,351)\"})),_path2284||(_path2284=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.57011026 3.732388 4.10913442 8.0949989 5 13 C4.01 13 3.02 13 2 13 C1.67 11.02 1.34 9.04 1 7 C0.67 7 0.34 7 0 7 C0 4.69 0 2.38 0 0 Z \",fill:\"#0A2319\",transform:\"translate(428,345)\"})),_path2285||(_path2285=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0 4.62 0 7 0 C6.625 1.9375 6.625 1.9375 6 4 C3.50907189 5.24546405 2.58919267 4.7767578 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#EDEBE4\",transform:\"translate(115,346)\"})),_path2286||(_path2286=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.33 1.32 -0.66 2.64 -1 4 C-4.3 4 -7.6 4 -11 4 C-11 3.34 -11 2.68 -11 2 C-3.375 0 -3.375 0 0 0 Z \",fill:\"#230608\",transform:\"translate(259,344)\"})),_path2287||(_path2287=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0.495 2.97 0.495 6 1 C4.68 1.33 3.36 1.66 2 2 C2 4.64 2 7.28 2 10 C1.01 10 0.02 10 -1 10 C-0.67 6.7 -0.34 3.4 0 0 Z \",fill:\"#66605B\",transform:\"translate(318,340)\"})),_path2288||(_path2288=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-2 4 -2 4 -5 6 C-6.32 6 -7.64 6 -9 6 C-9 5.01 -9 4.02 -9 3 C-5.66696609 0.50022457 -4.26696398 0 0 0 Z \",fill:\"#394237\",transform:\"translate(483,340)\"})),_path2289||(_path2289=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C6.1519437 3.22791555 6.20086443 4.28400809 6 8 C5.34 8 4.68 8 4 8 C0 2.58823529 0 2.58823529 0 0 Z \",fill:\"#683C07\",transform:\"translate(412,338)\"})),_path2290||(_path2290=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4 0.66 4 1.32 4 2 C4.66 2 5.32 2 6 2 C6 2.66 6 3.32 6 4 C6.66 4 7.32 4 8 4 C8 4.66 8 5.32 8 6 C6.02 6 4.04 6 2 6 C2 4.68 2 3.36 2 2 C1.34 2 0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#3B090F\",transform:\"translate(310,328)\"})),_path2291||(_path2291=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.455 0.99 4.455 0.99 9 2 C9 2.99 9 3.98 9 5 C7.02 5 5.04 5 3 5 C3 4.01 3 3.02 3 2 C2.01 2 1.02 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#8A5941\",transform:\"translate(550,328)\"})),_path2292||(_path2292=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 3.33156142 -0.45664761 5.06028115 -2 8 C-4.625 9.8125 -4.625 9.8125 -7 11 C-7 7.22089522 -6.00296038 6.53893899 -3.5 3.8125 C-2.8503125 3.09707031 -2.200625 2.38164062 -1.53125 1.64453125 C-1.0259375 1.10183594 -0.520625 0.55914062 0 0 Z \",fill:\"#993927\",transform:\"translate(137,323)\"})),_path2293||(_path2293=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0 5.28 0 8 0 C7.37609375 0.07089844 6.7521875 0.14179688 6.109375 0.21484375 C3.80770679 0.80004532 3.80770679 0.80004532 2.953125 3.06640625 C2.72109375 3.89011719 2.4890625 4.71382813 2.25 5.5625 C2.00765625 6.38878906 1.7653125 7.21507812 1.515625 8.06640625 C1.34546875 8.70449219 1.1753125 9.34257812 1 10 C0.67 10 0.34 10 0 10 C0 6.7 0 3.4 0 0 Z \",fill:\"#D1C987\",transform:\"translate(586,326)\"})),_path2294||(_path2294=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0 5.28 0 8 0 C8 1.32 8 2.64 8 4 C6.02 4 4.04 4 2 4 C2 3.34 2 2.68 2 2 C1.34 2 0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#DB0811\",transform:\"translate(100,324)\"})),_path2295||(_path2295=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0.33 5.94 0.66 9 1 C8.01 1.495 8.01 1.495 7 2 C7 2.66 7 3.32 7 4 C5.35 4 3.7 4 2 4 C1.67 4.99 1.34 5.98 1 7 C0.67 4.69 0.34 2.38 0 0 Z \",fill:\"#BFE7AC\",transform:\"translate(505,322)\"})),_path2296||(_path2296=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 2 2 2 2 5 C2.66 5 3.32 5 4 5 C4 5.99 4 6.98 4 8 C6.31 8.33 8.62 8.66 11 9 C10.67 9.66 10.34 10.32 10 11 C5.545 10.01 5.545 10.01 1 9 C1 7.02 1 5.04 1 3 C0.34 2.67 -0.32 2.34 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#304D2E\",transform:\"translate(230,309)\"})),_path2297||(_path2297=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.8638129 1.45264038 3.71580454 2.9123163 4.5625 4.375 C5.27599609 5.59316406 5.27599609 5.59316406 6.00390625 6.8359375 C6.33261719 7.55007813 6.66132813 8.26421875 7 9 C6.67 9.66 6.34 10.32 6 11 C5.62875 10.0409375 5.62875 10.0409375 5.25 9.0625 C4.18437567 6.81258459 4.18437567 6.81258459 1.875 6.25 C1.25625 6.1675 0.6375 6.085 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#D4CE90\",transform:\"translate(392,309)\"})),_path2298||(_path2298=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0 3.96 0 6 0 C6.33 1.32 6.66 2.64 7 4 C6.01 4.66 5.02 5.32 4 6 C4 5.34 4 4.68 4 4 C2.68 4 1.36 4 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#083420\",transform:\"translate(494,307)\"})),_path2299||(_path2299=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0.33 5.28 0.66 8 1 C8 2.65 8 4.3 8 6 C6.68 6 5.36 6 4 6 C4 5.34 4 4.68 4 4 C3.34 4 2.68 4 2 4 C2 3.34 2 2.68 2 2 C1.34 2 0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#CD8A6C\",transform:\"translate(382,300)\"})),_path2300||(_path2300=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.0625 1.5625 2.0625 1.5625 4 4 C4 7.625 4 7.625 3 11 C0.9375 12.4375 0.9375 12.4375 -1 13 C-0.01 10.36 0.98 7.72 2 5 C1.34 5 0.68 5 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#F8422A\",transform:\"translate(178,291)\"})),_path2301||(_path2301=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C5.33 0.66 5.66 1.32 6 2 C5.1028125 2.0309375 5.1028125 2.0309375 4.1875 2.0625 C1.56685398 2.90456616 1.56685398 2.90456616 0.25 6.5625 C-0.1625 7.696875 -0.575 8.83125 -1 10 C-1.33 10 -1.66 10 -2 10 C-2.17942163 6.05272412 -2.09350689 3.4019487 0 0 Z \",fill:\"#2C1C1A\",transform:\"translate(153,279)\"})),_path2302||(_path2302=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 2.31 1 4.62 1 7 C2.32 7 3.64 7 5 7 C5 8.32 5 9.64 5 11 C3.0625 11.5625 3.0625 11.5625 1 12 C0 11 0 11 -0.09765625 8.49609375 C-0.08605469 7.48675781 -0.07445312 6.47742188 -0.0625 5.4375 C-0.05347656 4.42558594 -0.04445313 3.41367187 -0.03515625 2.37109375 C-0.02355469 1.58863281 -0.01195312 0.80617188 0 0 Z \",fill:\"#43200E\",transform:\"translate(539,275)\"})),_path2303||(_path2303=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.66 2.64 1.32 4 2 C4 3.65 4 5.3 4 7 C1.03 7 -1.94 7 -5 7 C-3.68 6.67 -2.36 6.34 -1 6 C-0.67 4.02 -0.34 2.04 0 0 Z \",fill:\"#744F32\",transform:\"translate(48,262)\"})),_path2304||(_path2304=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0.33 4.62 0.66 7 1 C6.01 1.495 6.01 1.495 5 2 C5.33 2.99 5.66 3.98 6 5 C4.02 5 2.04 5 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#CA896E\",transform:\"translate(277,265)\"})),_path2305||(_path2305=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1.1875 4.4375 1.1875 4.4375 0 8 C-0.99 8.33 -1.98 8.66 -3 9 C-3.33 7.35 -3.66 5.7 -4 4 C-3.01 3.67 -2.02 3.34 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#87594A\",transform:\"translate(57,260)\"})),_path2306||(_path2306=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0.66 5.28 1.32 8 2 C7.67 2.66 7.34 3.32 7 4 C3.37 4 -0.26 4 -4 4 C-3.67 3.34 -3.34 2.68 -3 2 C-2.01 2 -1.02 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#B07F68\",transform:\"translate(254,257)\"})),_path2307||(_path2307=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3 0 3 0 5 1 C4.67 3.97 4.34 6.94 4 10 C3.67 9.01 3.34 8.02 3 7 C2.34 7 1.68 7 1 7 C0.67 4.69 0.34 2.38 0 0 Z \",fill:\"#D58667\",transform:\"translate(19,253)\"})),_path2308||(_path2308=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.33 1.65 1.66 3.3 2 5 C5.96 5.33 9.92 5.66 14 6 C14 6.33 14 6.66 14 7 C11.79245484 7.19656224 9.58390461 7.38185459 7.375 7.5625 C6.14523437 7.66691406 4.91546875 7.77132813 3.6484375 7.87890625 C0.24372538 7.99191061 -2.67558398 7.69045563 -6 7 C-6 6.67 -6 6.34 -6 6 C-4.02 6 -2.04 6 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#160D09\",transform:\"translate(562,250)\"})),_path2309||(_path2309=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.62 0 9.24 0 14 0 C14 0.33 14 0.66 14 1 C12.43883181 1.33951619 10.87598662 1.67132544 9.3125 2 C8.00732422 2.2784375 8.00732422 2.2784375 6.67578125 2.5625 C4.06287036 2.98972047 1.64186962 3.07616201 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#5A564D\",transform:\"translate(386,244)\"})),_path2310||(_path2310=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.12375 0.639375 0.2475 1.27875 0.375 1.9375 C0.684375 2.9584375 0.684375 2.9584375 1 4 C1.66 4.33 2.32 4.66 3 5 C2.34 5 1.68 5 1 5 C1 6.98 1 8.96 1 11 C0.34 11 -0.32 11 -1 11 C-1.33 9.02 -1.66 7.04 -2 5 C-2.66 5 -3.32 5 -4 5 C-4 4.34 -4 3.68 -4 3 C-3.01 3 -2.02 3 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#C57C62\",transform:\"translate(5,231)\"})),_path2311||(_path2311=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 1.32 0.66 2.64 1 4 C-2.3 4 -5.6 4 -9 4 C-8.67 2.68 -8.34 1.36 -8 0 C-4.71023192 -1.09658936 -3.28696233 -0.79953138 0 0 Z \",fill:\"#34251E\",transform:\"translate(144,214)\"})),_path2312||(_path2312=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1.5625 2.0625 -1.5625 2.0625 -4 4 C-7.75 3.75 -7.75 3.75 -11 3 C-7.48550811 -0.37391222 -4.73940561 -0.27342725 0 0 Z \",fill:\"#313334\",transform:\"translate(577,194)\"})),_path2313||(_path2313=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.75 0.75 6.75 0.75 9 3 C9 3.99 9 4.98 9 6 C9.66 6.33 10.32 6.66 11 7 C10.01 7 9.02 7 8 7 C8 6.34 8 5.68 8 5 C5.03 4.01 2.06 3.02 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#63402C\",transform:\"translate(90,173)\"})),_path2314||(_path2314=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3 2 3 2 3.75 4.375 C3.99286095 6.92504 3.8028831 8.59135071 3 11 C2.34 11 1.68 11 1 11 C0.690625 9.88625 0.38125 8.7725 0.0625 7.625 C-0.82326483 4.2054845 -0.82326483 4.2054845 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#907059\",transform:\"translate(140,140)\"})),_path2315||(_path2315=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.598125 0.309375 1.19625 0.61875 1.8125 0.9375 C4.08956772 2.10209704 4.08956772 2.10209704 7 3 C7 4.32 7 5.64 7 7 C5.02 6.34 3.04 5.68 1 5 C0.67 3.35 0.34 1.7 0 0 Z \",fill:\"#985E35\",transform:\"translate(9,138)\"})),_path2316||(_path2316=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C2.32 2 3.64 2 5 2 C5 2.66 5 3.32 5 4 C0.545 4.495 0.545 4.495 -4 5 C-3.67 3.68 -3.34 2.36 -3 1 C-2.01 0.67 -1.02 0.34 0 0 Z \",fill:\"#A48A68\",transform:\"translate(477,70)\"})),_path2317||(_path2317=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1.10095362 3.30286086 -1.6896019 3.78510901 -4.4375 5.6875 C-5.36369141 6.34298828 -5.36369141 6.34298828 -6.30859375 7.01171875 C-8 8 -8 8 -10 8 C-7.80926025 2.88827391 -5.76796198 0 0 0 Z \",fill:\"#2C4F41\",transform:\"translate(594,16)\"})),_path2318||(_path2318=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C-1.3125 6.1875 -1.3125 6.1875 -4 9 C-4.66 9 -5.32 9 -6 9 C-4.83857315 4.64464931 -3.92300495 2.35380297 0 0 Z \",fill:\"#5D3A29\",transform:\"translate(117,560)\"})),_path2319||(_path2319=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.04854904 2.48741501 3.60648591 4.61274286 4.25 8.4375 C4.50523437 9.85869141 4.50523437 9.85869141 4.765625 11.30859375 C4.98916046 13.87552599 4.80225346 15.57604847 4 18 C3.32678716 15.75194998 2.66165877 13.50147776 2 11.25 C1.62875 9.99703125 1.2575 8.7440625 0.875 7.453125 C0 4 0 4 0 0 Z \",fill:\"#946E53\",transform:\"translate(363,542)\"})),_path2320||(_path2320=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C0.22265625 4.1640625 0.22265625 4.1640625 -0.9375 6.625 C-1.31777344 7.44226563 -1.69804687 8.25953125 -2.08984375 9.1015625 C-2.39019531 9.72804688 -2.69054687 10.35453125 -3 11 C-3.33 10.01 -3.66 9.02 -4 8 C-4.99 8.495 -4.99 8.495 -6 9 C-4.68775452 5.06326356 -3.08089673 2.77280706 0 0 Z \",fill:\"#6B4633\",transform:\"translate(159,542)\"})),_path2321||(_path2321=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4 0.66 4 1.32 4 2 C4.66 2 5.32 2 6 2 C6 3.32 6 4.64 6 6 C3.03 5.505 3.03 5.505 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#F9D9AB\",transform:\"translate(590,516)\"})),_path2322||(_path2322=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.94 0 11.88 0 18 0 C16.68 1.32 15.36 2.64 14 4 C13.67 3.34 13.34 2.68 13 2 C9.95418731 1.53045739 9.95418731 1.53045739 6.4375 1.375 C5.23996094 1.30023437 4.04242188 1.22546875 2.80859375 1.1484375 C1.41833984 1.07496094 1.41833984 1.07496094 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#4F2F21\",transform:\"translate(114,518)\"})),_path2323||(_path2323=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.17219543 0.78345715 2.33763668 1.57702836 3.5 2.375 C4.47453125 3.03628906 4.47453125 3.03628906 5.46875 3.7109375 C6.22671875 4.34902344 6.22671875 4.34902344 7 5 C7 5.66 7 6.32 7 7 C2.68607774 6.5206753 0.83430453 5.2542015 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#855A42\",transform:\"translate(573,512)\"})),_path2324||(_path2324=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.37507382 2.71928517 -0.84218661 3.84218661 -2.8125 5.8125 C-5 7 -5 7 -7.25 6.6875 C-7.8275 6.460625 -8.405 6.23375 -9 6 C-8.67 5.34 -8.34 4.68 -8 4 C-7.01 4 -6.02 4 -5 4 C-5 3.34 -5 2.68 -5 2 C-2 0 -2 0 0 0 Z \",fill:\"#51342C\",transform:\"translate(12,503)\"})),_path2325||(_path2325=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-3.94444444 4.62962963 -3.94444444 4.62962963 -7 5 C-9.25 4.0625 -9.25 4.0625 -11 3 C-7.75987532 -0.24012468 -4.46544827 0 0 0 Z \",fill:\"#211613\",transform:\"translate(404,502)\"})),_path2326||(_path2326=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C3 3 3 3 1 4 C-1.04055005 4.07065617 -3.08334257 4.08421976 -5.125 4.0625 C-6.22070312 4.05347656 -7.31640625 4.04445313 -8.4453125 4.03515625 C-9.70988281 4.01775391 -9.70988281 4.01775391 -11 4 C-10.67 3.34 -10.34 2.68 -10 2 C-3.375 1.875 -3.375 1.875 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#E1C6C2\",transform:\"translate(318,500)\"})),_path2327||(_path2327=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C2.74476126 1.62752231 2.47025506 3.25203196 2.1875 4.875 C2.03667969 5.77992188 1.88585937 6.68484375 1.73046875 7.6171875 C1 10 1 10 -2 12 C-1.85904936 10.3745692 -1.71207913 8.74965949 -1.5625 7.125 C-1.48128906 6.22007812 -1.40007812 5.31515625 -1.31640625 4.3828125 C-1 2 -1 2 0 0 Z \",fill:\"#150608\",transform:\"translate(153,486)\"})),_path2328||(_path2328=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2 1.66 2 2.32 2 3 C1.01 3 0.02 3 -1 3 C-1 3.66 -1 4.32 -1 5 C1.97 5.495 1.97 5.495 5 6 C5 6.33 5 6.66 5 7 C2.36 7 -0.28 7 -3 7 C-3.33 5.68 -3.66 4.36 -4 3 C-2.68 2.01 -1.36 1.02 0 0 Z \",fill:\"#EE6F6B\",transform:\"translate(375,466)\"})),_path2329||(_path2329=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C3.00016466 4.20882096 3.00016466 4.20882096 5 5 C4.01 6.485 4.01 6.485 3 8 C3 7.34 3 6.68 3 6 C2.34 6 1.68 6 1 6 C0.67 6.99 0.34 7.98 0 9 C-0.66 8.67 -1.32 8.34 -2 8 C-1.34 5.36 -0.68 2.72 0 0 Z \",fill:\"#6D4939\",transform:\"translate(479,454)\"})),_path2330||(_path2330=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4.33 1.98 4.66 3.96 5 6 C4.34 6 3.68 6 3 6 C3 7.32 3 8.64 3 10 C2.34 10 1.68 10 1 10 C1.33 7.03 1.66 4.06 2 1 C1.34 0.67 0.68 0.34 0 0 Z \",fill:\"#924132\",transform:\"translate(432,450)\"})),_path2331||(_path2331=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C2.01 1.495 2.01 1.495 1 2 C0.67 2.99 0.34 3.98 0 5 C1.32 5.33 2.64 5.66 4 6 C4 6.66 4 7.32 4 8 C3.01 7.67 2.02 7.34 1 7 C-0.66362417 6.65179959 -2.32995171 6.31595508 -4 6 C-4 5.01 -4 4.02 -4 3 C-2.1875 1.25 -2.1875 1.25 0 0 Z \",fill:\"#1F211E\",transform:\"translate(86,448)\"})),_path2332||(_path2332=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1 3 -1 3 -3 4.125 C-6.9645352 5.28132277 -10.89443077 5.66010538 -15 6 C-14 4 -14 4 -11.78515625 3.18359375 C-10.88667969 2.93738281 -9.98820312 2.69117188 -9.0625 2.4375 C-0.28497409 0 -0.28497409 0 0 0 Z \",fill:\"#21211D\",transform:\"translate(107,441)\"})),_path2333||(_path2333=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-3.12706959 3.5635348 -6.57982443 3.39958487 -10 3 C-10.99 2.34 -11.98 1.68 -13 1 C-8.61414671 0.29826347 -4.44209357 -0.10834375 0 0 Z \",fill:\"#9ADF9B\",transform:\"translate(576,400)\"})),_path2334||(_path2334=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.94 0.99 5.94 0.99 12 2 C12 2.33 12 2.66 12 3 C8.7 3 5.4 3 2 3 C1.67 4.32 1.34 5.64 1 7 C0.67 4.69 0.34 2.38 0 0 Z \",fill:\"#201E1E\",transform:\"translate(560,397)\"})),_path2335||(_path2335=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 1.32 0.66 2.64 1 4 C0.34 4 -0.32 4 -1 4 C-1 5.32 -1 6.64 -1 8 C-3.31 8.33 -5.62 8.66 -8 9 C-6.8553125 7.88625 -6.8553125 7.88625 -5.6875 6.75 C-3.5606298 4.5736677 -1.7440044 2.47832204 0 0 Z \",fill:\"#5A3B29\",transform:\"translate(411,392)\"})),_path2336||(_path2336=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C-0.65 3 -2.3 3 -4 3 C-4 2.34 -4 1.68 -4 1 C-7.3 1 -10.6 1 -14 1 C-14 0.67 -14 0.34 -14 0 C-4.58997722 -1.33257403 -4.58997722 -1.33257403 0 0 Z \",fill:\"#DDE9B9\",transform:\"translate(580,392)\"})),_path2337||(_path2337=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C1.99 3.33 2.98 3.66 4 4 C4.99 5.485 4.99 5.485 6 7 C5.67 7.99 5.34 8.98 5 10 C5 9.34 5 8.68 5 8 C4.34 8 3.68 8 3 8 C3 7.34 3 6.68 3 6 C2.34 6 1.68 6 1 6 C0.34 6.99 -0.32 7.98 -1 9 C-1.09765625 2.84765625 -1.09765625 2.84765625 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#242421\",transform:\"translate(417,384)\"})),_path2338||(_path2338=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.66 1.98 1.32 3 2 C3 3.32 3 4.64 3 6 C2.34 6 1.68 6 1 6 C1 6.66 1 7.32 1 8 C0.34 8 -0.32 8 -1 8 C-1.33 5.69 -1.66 3.38 -2 1 C-1.34 0.67 -0.68 0.34 0 0 Z \",fill:\"#6A6859\",transform:\"translate(25,380)\"})),_path2339||(_path2339=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4.33292585 4.24480464 4.43885872 6.35542625 2 9.9375 C1.34 10.618125 0.68 11.29875 0 12 C-0.75 9.875 -0.75 9.875 -1 7 C0.9375 3.6875 0.9375 3.6875 3 1 C2.01 1.33 1.02 1.66 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#190D0E\",transform:\"translate(156,376)\"})),_path2340||(_path2340=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0 5.94 0 9 0 C9 0.99 9 1.98 9 3 C7.02 3.33 5.04 3.66 3 4 C2.01 2.68 1.02 1.36 0 0 Z \",fill:\"#98634E\",transform:\"translate(547,380)\"})),_path2341||(_path2341=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 1.98 1 3.96 1 6 C-1.64 6 -4.28 6 -7 6 C-7 5.01 -7 4.02 -7 3 C-4.69 3 -2.38 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#8C0E10\",transform:\"translate(409,374)\"})),_path2342||(_path2342=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C1.67 2.64 1.34 5.28 1 8 C0.01 8.33 -0.98 8.66 -2 9 C-2.25 3.375 -2.25 3.375 0 0 Z \",fill:\"#FB3C49\",transform:\"translate(320,371)\"})),_path2343||(_path2343=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.88671875 0.22265625 1.88671875 0.22265625 4 1 C5.08203125 2.99609375 5.08203125 2.99609375 5.8125 5.4375 C6.06644531 6.24058594 6.32039062 7.04367187 6.58203125 7.87109375 C7 10 7 10 6 12 C4.99466333 10.37829621 3.99588093 8.75252763 3 7.125 C2.443125 6.22007812 1.88625 5.31515625 1.3125 4.3828125 C0 2 0 2 0 0 Z \",fill:\"#2DAE78\",transform:\"translate(506,360)\"})),_path2344||(_path2344=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-3.3 2.66 -6.6 3.32 -10 4 C-10 3.01 -10 2.02 -10 1 C-6.78548731 -0.60725635 -3.56387464 -0.05748185 0 0 Z \",fill:\"#312E32\",transform:\"translate(323,357)\"})),_path2345||(_path2345=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C1.66 2.33 2.32 2.66 3 3 C3.33 3.99 3.66 4.98 4 6 C4.99 6.33 5.98 6.66 7 7 C4.69 7.33 2.38 7.66 0 8 C0 5.36 0 2.72 0 0 Z \",fill:\"#32534F\",transform:\"translate(298,342)\"})),_path2346||(_path2346=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.4389165 -0.21755666 9.87080814 -0.10428384 15 2 C15 2.66 15 3.32 15 4 C11.0946863 4.22316078 8.57288993 3.51847822 5 2 C3.34080104 1.63128912 1.6752357 1.28718326 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#B5A661\",transform:\"translate(589,340)\"})),_path2347||(_path2347=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.495 0.99 0.495 2 1 C2 1.66 2 2.32 2 3 C2.99 3 3.98 3 5 3 C5.33 3.66 5.66 4.32 6 5 C8.01669827 6.13350534 8.01669827 6.13350534 10 7 C10 7.33 10 7.66 10 8 C7.25 8.375 7.25 8.375 4 8 C0 3.15789474 0 3.15789474 0 0 Z \",fill:\"#697646\",transform:\"translate(575,335)\"})),_path2348||(_path2348=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C2.52389341 4.99911924 0.96837781 7.97832683 -2 12 C-3.15957207 8.52128379 -2.77456651 7.65780355 -1.5625 4.3125 C-1.13130859 3.10013672 -1.13130859 3.10013672 -0.69140625 1.86328125 C-0.46324219 1.24839844 -0.23507813 0.63351562 0 0 Z \",fill:\"#D2B949\",transform:\"translate(209,330)\"})),_path2349||(_path2349=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.08268593 -0.08126087 4.16628658 -0.13930839 6.25 -0.1875 C7.99023438 -0.23970703 7.99023438 -0.23970703 9.765625 -0.29296875 C13.22268407 0.02017066 14.51565563 0.65709108 17 3 C14.36 3 11.72 3 9 3 C9 2.34 9 1.68 9 1 C6.03 1 3.06 1 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#59673D\",transform:\"translate(39,327)\"})),_path2350||(_path2350=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.43458973 1.3937282 6.87378374 3.60582235 10 7 C9.67 7.66 9.34 8.32 9 9 C8.113125 8.21625 7.22625 7.4325 6.3125 6.625 C3.69279481 4.42843009 1.28284399 3.06209659 -2 2 C-1.34 1.34 -0.68 0.68 0 0 Z \",fill:\"#3B4A2B\",transform:\"translate(244,319)\"})),_path2351||(_path2351=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3 0.99 3 1.98 3 3 C5.41645782 3.16687448 5.41645782 3.16687448 8 3 C8.66 2.34 9.32 1.68 10 1 C10 2.32 10 3.64 10 5 C7.03 5 4.06 5 1 5 C0.67 3.35 0.34 1.7 0 0 Z \",fill:\"#081010\",transform:\"translate(458,312)\"})),_path2352||(_path2352=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 1.32 0.66 2.64 1 4 C-1.97 4 -4.94 4 -8 4 C-7.67 3.01 -7.34 2.02 -7 1 C-2.25 0 -2.25 0 0 0 Z \",fill:\"#39746B\",transform:\"translate(158,314)\"})),_path2353||(_path2353=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0 5.94 0 9 0 C9 0.99 9 1.98 9 3 C6.03 3 3.06 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#AA7053\",transform:\"translate(617,311)\"})),_path2354||(_path2354=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.3 0.33 6.6 0.66 10 1 C10 1.33 10 1.66 10 2 C3.65758005 3.15316726 -2.56688704 3.09507063 -9 3 C-9 2.67 -9 2.34 -9 2 C-6.03 2 -3.06 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#9B9067\",transform:\"translate(524,308)\"})),_path2355||(_path2355=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.62 0 9.24 0 14 0 C14 0.99 14 1.98 14 3 C9.38 2.34 4.76 1.68 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#5D453E\",transform:\"translate(402,284)\"})),_path2356||(_path2356=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 2.64 1 5.28 1 8 C1.66 8 2.32 8 3 8 C3 10.97 3 13.94 3 17 C2.67 15.68 2.34 14.36 2 13 C1.34 13 0.68 13 0 13 C0 8.71 0 4.42 0 0 Z \",fill:\"#5E854B\",transform:\"translate(69,272)\"})),_path2357||(_path2357=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4 0.99 4 1.98 4 3 C4.66 3 5.32 3 6 3 C6 2.34 6 1.68 6 1 C7.32 1.66 8.64 2.32 10 3 C10 3.33 10 3.66 10 4 C6.7 4 3.4 4 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#301D18\",transform:\"translate(14,265)\"})),_path2358||(_path2358=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0 5.28 0 8 0 C7.01 0.495 7.01 0.495 6 1 C6.33 1.99 6.66 2.98 7 4 C6.01 4.495 6.01 4.495 5 5 C4.67 5.66 4.34 6.32 4 7 C2 6 2 6 0.875 2.9375 C0.58625 1.968125 0.2975 0.99875 0 0 Z \",fill:\"#975A42\",transform:\"translate(198,253)\"})),_path2359||(_path2359=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.33 0.99 -0.66 1.98 -1 3 C-3.0625 3.6875 -3.0625 3.6875 -5 4 C-5 3.34 -5 2.68 -5 2 C-5.99 2 -6.98 2 -8 2 C-8.33 2.66 -8.66 3.32 -9 4 C-9.99 3.01 -10.98 2.02 -12 1 C-8.0186217 -0.3271261 -4.14954773 -0.06915913 0 0 Z \",fill:\"#342522\",transform:\"translate(496,241)\"})),_path2360||(_path2360=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0.66 3.96 1.32 6 2 C6.33 1.34 6.66 0.68 7 0 C7 1.98 7 3.96 7 6 C5.35 5.67 3.7 5.34 2 5 C2 4.01 2 3.02 2 2 C1.01 1.67 0.02 1.34 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#684734\",transform:\"translate(165,208)\"})),_path2361||(_path2361=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-3.68734758 2.45823172 -6.69699971 3.01242616 -11 4 C-11.33 3.01 -11.66 2.02 -12 1 C-7.53763531 -0.80619523 -4.68965706 -1.11658501 0 0 Z \",fill:\"#507364\",transform:\"translate(528,205)\"})),_path2362||(_path2362=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-8.02058824 4.15882353 -8.02058824 4.15882353 -11.3125 3.625 C-11.869375 3.41875 -12.42625 3.2125 -13 3 C-8.07780292 -0.77368442 -6.24627114 -1.04104519 0 0 Z \",fill:\"#43382D\",transform:\"translate(443,200)\"})),_path2363||(_path2363=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.08938811 1.59043379 8.87456643 4.7446951 13 8 C12.01 8.495 12.01 8.495 11 9 C9.16015625 8.0390625 9.16015625 8.0390625 7.0625 6.625 C4.6262255 4.99474529 2.81111264 3.93703755 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#361D16\",transform:\"translate(174,181)\"})),_path2364||(_path2364=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C5.66 1.32 6.32 2.64 7 4 C6.34 4 5.68 4 5 4 C5 4.66 5 5.32 5 6 C4.01 5.67 3.02 5.34 2 5 C2 4.34 2 3.68 2 3 C1.34 3 0.68 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#2D201B\",transform:\"translate(55,152)\"})),_path2365||(_path2365=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3 0.66 3 1.32 3 2 C4.32 2.66 5.64 3.32 7 4 C6.01 4.33 5.02 4.66 4 5 C4 6.32 4 7.64 4 9 C2.35 9.33 0.7 9.66 -1 10 C-1 9.01 -1 8.02 -1 7 C0.32 7.33 1.64 7.66 3 8 C2.01 5.36 1.02 2.72 0 0 Z \",fill:\"#A65A48\",transform:\"translate(145,118)\"})),_path2366||(_path2366=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.66 1.32 1.32 2 2 C1.360625 2.2475 0.72125 2.495 0.0625 2.75 C-2.18729876 3.7925291 -2.18729876 3.7925291 -2.5625 6 C-2.7790625 6.99 -2.7790625 6.99 -3 8 C-3.99 8.66 -4.98 9.32 -6 10 C-6 8.02 -6 6.04 -6 4 C-4.02 3.34 -2.04 2.68 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#2D544A\",transform:\"translate(476,38)\"})),_path2367||(_path2367=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.28788824 3.11016455 5.83735988 6.01618925 8 10 C7.4225 9.690625 6.845 9.38125 6.25 9.0625 C4.15705816 8.07416636 2.25464725 7.4831387 0 7 C0 4.69 0 2.38 0 0 Z \",fill:\"#2A170F\",transform:\"translate(128,32)\"})),_path2368||(_path2368=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.4375 0.6875 2.4375 0.6875 5 2 C5.8125 4.625 5.8125 4.625 6 7 C4.02 5.35 2.04 3.7 0 2 C0 5.3 0 8.6 0 12 C-0.33 12 -0.66 12 -1 12 C-1.02687279 10.18757948 -1.04633715 8.37504767 -1.0625 6.5625 C-1.07410156 5.55316406 -1.08570312 4.54382813 -1.09765625 3.50390625 C-1 1 -1 1 0 0 Z \",fill:\"#76573F\",transform:\"translate(104,20)\"})),_path2369||(_path2369=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.485 0.99 1.485 0.99 3 2 C3.29296875 4.6015625 3.29296875 4.6015625 3.1875 7.625 C3.16042969 8.62789062 3.13335937 9.63078125 3.10546875 10.6640625 C3.07066406 11.43492188 3.03585938 12.20578125 3 13 C2.34 13 1.68 13 1 13 C0.67 8.71 0.34 4.42 0 0 Z \",fill:\"#86674E\",transform:\"translate(88,3)\"})),_path2370||(_path2370=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C-1.3125 6.1875 -1.3125 6.1875 -4 9 C-4.66 9 -5.32 9 -6 9 C-5.52797514 4.75177626 -3.03344482 2.80010291 0 0 Z \",fill:\"#B38262\",transform:\"translate(118,547)\"})),_path2371||(_path2371=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.36179774 1.44077046 5.59156268 3.24750021 8 6 C8 6.66 8 7.32 8 8 C7.01 8 6.02 8 5 8 C5 7.34 5 6.68 5 6 C4.01 5.67 3.02 5.34 2 5 C2 4.34 2 3.68 2 3 C1.34 3 0.68 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#79503B\",transform:\"translate(505,498)\"})),_path2372||(_path2372=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.41750563 0.11509661 2.83401169 0.24253658 4.25 0.375 C5.03890625 0.44460938 5.8278125 0.51421875 6.640625 0.5859375 C9 1 9 1 13 3 C8.71 3 4.42 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#FACEBD\",transform:\"translate(350,499)\"})),_path2373||(_path2373=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 1.65 3.96 3.3 6 5 C5.34 6.32 4.68 7.64 4 9 C0.94117299 7.47058649 0.31048766 5.05780454 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#734733\",transform:\"translate(489,490)\"})),_path2374||(_path2374=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4 0.99 4 1.98 4 3 C-1.94 3 -7.88 3 -14 3 C-14 2.67 -14 2.34 -14 2 C-9.38 2 -4.76 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#400105\",transform:\"translate(318,482)\"})),_path2375||(_path2375=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.63 0 7.26 0 11 0 C11.33 0.99 11.66 1.98 12 3 C12.66 3.33 13.32 3.66 14 4 C12.68 4 11.36 4 10 4 C10 3.34 10 2.68 10 2 C8.3603125 2.061875 8.3603125 2.061875 6.6875 2.125 C3 2 3 2 0 0 Z \",fill:\"#010806\",transform:\"translate(192,480)\"})),_path2376||(_path2376=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4 1.98 4 3.96 4 6 C2.35 6 0.7 6 -1 6 C-1 5.01 -1 4.02 -1 3 C-0.34 3.33 0.32 3.66 1 4 C0.67 2.68 0.34 1.36 0 0 Z \",fill:\"#F8D3C0\",transform:\"translate(382,466)\"})),_path2377||(_path2377=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.12113714 3.12113714 3.48336807 3.86694458 4 8 C4 8.99 4 9.98 4 11 C2.68 11 1.36 11 0 11 C0 7.37 0 3.74 0 0 Z \",fill:\"#5E2D24\",transform:\"translate(162,458)\"})),_path2378||(_path2378=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C3.67 2.64 3.34 5.28 3 8 C2.01 7.67 1.02 7.34 0 7 C0 4.69 0 2.38 0 0 Z \",fill:\"#EE7458\",transform:\"translate(430,452)\"})),_path2379||(_path2379=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.99 1.98 1.98 3 3 C-0.3 3 -3.6 3 -7 3 C-7 2.01 -7 1.02 -7 0 C-3.83170302 -1.05609899 -3.01480825 -1.13055309 0 0 Z \",fill:\"#A56748\",transform:\"translate(400,437)\"})),_path2380||(_path2380=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.75 0.75 4.75 0.75 7 3 C6.67 3.99 6.34 4.98 6 6 C3.5625 5.25 3.5625 5.25 1 4 C0.1875 1.875 0.1875 1.875 0 0 Z \",fill:\"#5D463C\",transform:\"translate(383,419)\"})),_path2381||(_path2381=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C3.13764351 4.26616316 4 7.56486311 4 12 C3.34 12 2.68 12 2 12 C2 10.68 2 9.36 2 8 C1.34 8 0.68 8 0 8 C0 5.36 0 2.72 0 0 Z \",fill:\"#9E1C2B\",transform:\"translate(304,410)\"})),_path2382||(_path2382=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.85645121 -0.22036864 6.49223216 0.39644899 10 2 C10 2.66 10 3.32 10 4 C2.25 4.125 2.25 4.125 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#4B5336\",transform:\"translate(445,396)\"})),_path2383||(_path2383=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.21979128 -0.1799928 9.07262981 0.02905192 14 2 C14 2.66 14 3.32 14 4 C9.03083364 3.48594831 4.70973649 2.76615118 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#5F754D\",transform:\"translate(596,395)\"})),_path2384||(_path2384=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-3.66291938 2.47785723 -6.6109185 3.48964169 -11 4 C-7.39987093 0.15158617 -5.25169925 -1.6298377 0 0 Z \",fill:\"#C9342B\",transform:\"translate(151,392)\"})),_path2385||(_path2385=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C3.42258812 3.82320557 4.24042276 6.91281305 4 11 C3.01 11.495 3.01 11.495 2 12 C0.86235649 7.73383684 0 4.43513689 0 0 Z \",fill:\"#182F3E\",transform:\"translate(208,384)\"})),_path2386||(_path2386=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0 3.96 0 6 0 C5.34 1.65 4.68 3.3 4 5 C3.34 5 2.68 5 2 5 C1.67 5.66 1.34 6.32 1 7 C0.67 4.69 0.34 2.38 0 0 Z \",fill:\"#4C3525\",transform:\"translate(83,384)\"})),_path2387||(_path2387=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.33 0 0.66 0 1 C-3.96 1 -7.92 1 -12 1 C-12.33 0.34 -12.66 -0.32 -13 -1 C-7.96488101 -2.0070238 -4.76052962 -1.97387813 0 0 Z \",fill:\"#36514E\",transform:\"translate(58,388)\"})),_path2388||(_path2388=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0.495 2.97 0.495 6 1 C6 2.65 6 4.3 6 6 C4.35 5.67 2.7 5.34 1 5 C0.67 3.35 0.34 1.7 0 0 Z \",fill:\"#D9DFAF\",transform:\"translate(526,369)\"})),_path2389||(_path2389=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.43775304 1.14591768 6.6759927 2.55750627 10 4 C10 4.66 10 5.32 10 6 C8.68 6 7.36 6 6 6 C6 5.34 6 4.68 6 4 C4.02 4 2.04 4 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#A21F24\",transform:\"translate(92,368)\"})),_path2390||(_path2390=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0 5.94 0 9 0 C7.02 0.99 7.02 0.99 5 2 C5 2.66 5 3.32 5 4 C2.03 3.67 -0.94 3.34 -4 3 C-2.68 2.67 -1.36 2.34 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#B0D2B3\",transform:\"translate(104,358)\"})),_path2391||(_path2391=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 1.66666667 0 3.33333333 0 5 C-0.66 5 -1.32 5 -2 5 C-2.37125 4.525625 -2.7425 4.05125 -3.125 3.5625 C-6.10178935 1.08184221 -9.18902265 1.31237519 -13 1 C-13 0.67 -13 0.34 -13 0 C-11.58456585 -0.19658808 -10.16755969 -0.38187546 -8.75 -0.5625 C-7.96109375 -0.66691406 -7.1721875 -0.77132813 -6.359375 -0.87890625 C-3.99467126 -1.00027349 -2.2488963 -0.69633257 0 0 Z \",fill:\"#110E0F\",transform:\"translate(554,359)\"})),_path2392||(_path2392=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-2.52475462 3.26237731 -4.31200466 3.09856404 -7.125 3.0625 C-8.03507813 3.05347656 -8.94515625 3.04445313 -9.8828125 3.03515625 C-10.58148438 3.02355469 -11.28015625 3.01195312 -12 3 C-12 2.34 -12 1.68 -12 1 C-7.915021 0.45533613 -4.1274515 0 0 0 Z \",fill:\"#513D35\",transform:\"translate(12,354)\"})),_path2393||(_path2393=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0.33 4.62 0.66 7 1 C6.01 1.33 5.02 1.66 4 2 C4.99 4.64 5.98 7.28 7 10 C4 9 4 9 2.83203125 7.1875 C2.32736328 6.1046875 2.32736328 6.1046875 1.8125 5 C1.46832031 4.278125 1.12414062 3.55625 0.76953125 2.8125 C0 1 0 1 0 0 Z \",fill:\"#55C284\",transform:\"translate(500,350)\"})),_path2394||(_path2394=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1.28207359 2.86001033 -2.49151236 5.07039412 -5 7 C-6.32 7 -7.64 7 -9 7 C-9 6.34 -9 5.68 -9 5 C-7.68 5 -6.36 5 -5 5 C-5 3.68 -5 2.36 -5 1 C-3 0 -3 0 0 0 Z \",fill:\"#601B1A\",transform:\"translate(113,323)\"})),_path2395||(_path2395=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.01217112 0.64449607 5.51655836 1.65022182 8.25 3.0625 C8.95640625 3.42472656 9.6628125 3.78695313 10.390625 4.16015625 C10.92171875 4.43730469 11.4528125 4.71445312 12 5 C9.5332355 5.88336837 8.36140628 6.1312406 5.859375 5.22265625 C5.16328125 4.83980469 4.4671875 4.45695312 3.75 4.0625 C3.04359375 3.68222656 2.3371875 3.30195313 1.609375 2.91015625 C1.07828125 2.60980469 0.5471875 2.30945313 0 2 C0 1.34 0 0.68 0 0 Z M-1 3 C-0.34 3 0.32 3 1 3 C1 3.66 1 4.32 1 5 C0.34 5 -0.32 5 -1 5 C-1 4.34 -1 3.68 -1 3 Z \",fill:\"#A36E52\",transform:\"translate(361,302)\"})),_path2396||(_path2396=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0.66 3.96 1.32 6 2 C6 2.33 6 2.66 6 3 C1.38 3.33 -3.24 3.66 -8 4 C-8 3.34 -8 2.68 -8 2 C-5.36 2 -2.72 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#58150C\",transform:\"translate(156,298)\"})),_path2397||(_path2397=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.3 0 6.6 0 10 0 C10 1.65 10 3.3 10 5 C8.68 5 7.36 5 6 5 C6 3.68 6 2.36 6 1 C4.02 1 2.04 1 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#0F1116\",transform:\"translate(444,285)\"})),_path2398||(_path2398=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.96 0 7.92 0 12 0 C12 0.66 12 1.32 12 2 C6.140625 3.07421875 6.140625 3.07421875 4 3 C2.68 2.01 1.36 1.02 0 0 Z \",fill:\"#D38F6D\",transform:\"translate(372,285)\"})),_path2399||(_path2399=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.66 2.97 3.32 5.94 4 9 C2.68 9 1.36 9 0 9 C0 6.03 0 3.06 0 0 Z \",fill:\"#571E08\",transform:\"translate(600,272)\"})),_path2400||(_path2400=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.96 0 7.92 0 12 0 C12 0.33 12 0.66 12 1 C9.36 1 6.72 1 4 1 C4 1.66 4 2.32 4 3 C3.34 3 2.68 3 2 3 C2 5.64 2 8.28 2 11 C1.67 11 1.34 11 1 11 C0.67 7.37 0.34 3.74 0 0 Z \",fill:\"#F0C97A\",transform:\"translate(100,269)\"})),_path2401||(_path2401=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.66 2 1.32 2 2 C2.66 2 3.32 2 4 2 C4 2.66 4 3.32 4 4 C5.98 4 7.96 4 10 4 C10.33 3.34 10.66 2.68 11 2 C11.33 2.99 11.66 3.98 12 5 C8.04 5 4.08 5 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#2F130D\",transform:\"translate(0,264)\"})),_path2402||(_path2402=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3 1.98 3 3.96 3 6 C3.66 5.67 4.32 5.34 5 5 C5 6.65 5 8.3 5 10 C3.68 9.67 2.36 9.34 1 9 C0.67 6.03 0.34 3.06 0 0 Z \",fill:\"#E08C6F\",transform:\"translate(73,255)\"})),_path2403||(_path2403=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.33 2.64 0.66 4 1 C4 2.98 4 4.96 4 7 C2.02 7.33 0.04 7.66 -2 8 C-2 7.34 -2 6.68 -2 6 C-1.34 6 -0.68 6 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#D4836D\",transform:\"translate(55,250)\"})),_path2404||(_path2404=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.33 2.64 0.66 4 1 C3.375 7.625 3.375 7.625 0 11 C0 7.37 0 3.74 0 0 Z \",fill:\"#633322\",transform:\"translate(5,253)\"})),_path2405||(_path2405=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0 4.62 0 7 0 C7 0.66 7 1.32 7 2 C7.66 2.33 8.32 2.66 9 3 C8 4 8 4 4.4375 4.0625 C3.303125 4.041875 2.16875 4.02125 1 4 C0.67 2.68 0.34 1.36 0 0 Z \",fill:\"#CDBD97\",transform:\"translate(328,251)\"})),_path2406||(_path2406=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C5 4.29 5 8.58 5 13 C3.68 12.67 2.36 12.34 1 12 C1.309375 11.29875 1.61875 10.5975 1.9375 9.875 C3.03302678 6.91063343 3.56422992 4.12301892 4 1 C2.68 0.67 1.36 0.34 0 0 Z \",fill:\"#251917\",transform:\"translate(557,231)\"})),_path2407||(_path2407=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.63 1.98 7.26 3.96 11 6 C11 6.66 11 7.32 11 8 C10.01 8 9.02 8 8 8 C8 7.34 8 6.68 8 6 C5.69 5.34 3.38 4.68 1 4 C0.67 2.68 0.34 1.36 0 0 Z \",fill:\"#5C3F2C\",transform:\"translate(241,235)\"})),_path2408||(_path2408=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3 1.66 3 2.32 3 3 C3.99 2.67 4.98 2.34 6 2 C6 2.66 6 3.32 6 4 C6.99 3.67 7.98 3.34 9 3 C9.99 3.99 10.98 4.98 12 6 C11.01 6.495 11.01 6.495 10 7 C7.92803369 6.26821134 5.8891448 5.44100997 3.875 4.5625 C2.77929688 4.08941406 1.68359375 3.61632812 0.5546875 3.12890625 C-0.28835937 2.75636719 -1.13140625 2.38382813 -2 2 C-1.34 1.34 -0.68 0.68 0 0 Z \",fill:\"#9A734A\",transform:\"translate(207,229)\"})),_path2409||(_path2409=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.66 1.32 -1.32 2.64 -2 4 C-2.99 4 -3.98 4 -5 4 C-5.33 4.99 -5.66 5.98 -6 7 C-6.66 6.67 -7.32 6.34 -8 6 C-7.625 3.5625 -7.625 3.5625 -7 1 C-4.53721199 -0.231394 -2.7204945 -0.07159196 0 0 Z \",fill:\"#382722\",transform:\"translate(424,188)\"})),_path2410||(_path2410=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.33 4.29 1.66 8.58 2 13 C0.68 12.01 -0.64 11.02 -2 10 C-1.34 6.7 -0.68 3.4 0 0 Z \",fill:\"#CCBB94\",transform:\"translate(156,101)\"})),_path2411||(_path2411=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 2.64 1 5.28 1 8 C1.66 8.33 2.32 8.66 3 9 C-0.75 10.125 -0.75 10.125 -3 9 C-1.125 2.25 -1.125 2.25 0 0 Z \",fill:\"#416555\",transform:\"translate(479,62)\"})),_path2412||(_path2412=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 1.65 2.64 3.3 4 5 C2.68 5.99 1.36 6.98 0 8 C-0.99 6.68 -1.98 5.36 -3 4 C-2.01 2.68 -1.02 1.36 0 0 Z \",fill:\"#E6BF81\",transform:\"translate(118,61)\"})),_path2413||(_path2413=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.10958767 1.45044271 7.43258745 3.51110752 11 6 C10.01 6.66 9.02 7.32 8 8 C6.66102417 7.04956626 5.32894573 6.08940853 4 5.125 C3.2575 4.59132813 2.515 4.05765625 1.75 3.5078125 C1.1725 3.01023438 0.595 2.51265625 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#BB9768\",transform:\"translate(9,60)\"})),_path2414||(_path2414=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C4.75 2.25 4.75 2.25 6 5 C5.6875 7.3125 5.6875 7.3125 5 9 C0 3.375 0 3.375 0 0 Z \",fill:\"#E1C392\",transform:\"translate(136,40)\"})),_path2415||(_path2415=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3.268125 0.598125 3.53625 1.19625 3.8125 1.8125 C4.98493467 3.97224808 6.19369282 5.35790256 8 7 C7.01 8.485 7.01 8.485 6 10 C4.99421411 8.71283353 3.99553202 7.42011342 3 6.125 C2.443125 5.40570312 1.88625 4.68640625 1.3125 3.9453125 C0 2 0 2 0 0 Z \",fill:\"#162824\",transform:\"translate(128,24)\"})),_path2416||(_path2416=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.30874711 2.16614803 4.05290181 4.39206608 5.75 7.0625 C6.19859375 7.75472656 6.6471875 8.44695313 7.109375 9.16015625 C7.40328125 9.76730469 7.6971875 10.37445312 8 11 C7.67 11.66 7.34 12.32 7 13 C4.5 10.75 4.5 10.75 2 8 C2 6.68 2 5.36 2 4 C1.34 4 0.68 4 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#492F28\",transform:\"translate(484,598)\"})),_path2417||(_path2417=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.67578125 1.73828125 0.67578125 1.73828125 1 4 C-0.14453125 6.10546875 -0.14453125 6.10546875 -1.8125 8.1875 C-2.35519531 8.88230469 -2.89789063 9.57710937 -3.45703125 10.29296875 C-5 12 -5 12 -7 13 C-5.54331217 10.03216871 -3.98767914 7.13584687 -2.375 4.25 C-1.92898437 3.45078125 -1.48296875 2.6515625 -1.0234375 1.828125 C-0.68570313 1.22484375 -0.34796875 0.6215625 0 0 Z \",fill:\"#6C4636\",transform:\"translate(104,576)\"})),_path2418||(_path2418=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 1.65 3.96 3.3 6 5 C5.67 5.66 5.34 6.32 5 7 C1.62496331 5.8141763 -0.64722731 4.72426311 -3 2 C-2.01 2 -1.02 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#875840\",transform:\"translate(567,531)\"})),_path2419||(_path2419=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.57142857 5.14285714 5.57142857 5.14285714 6 9 C5.01 9 4.02 9 3 9 C3 8.01 3 7.02 3 6 C2.01 6.33 1.02 6.66 0 7 C0 4.69 0 2.38 0 0 Z \",fill:\"#7B4E39\",transform:\"translate(459,528)\"})),_path2420||(_path2420=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 1 4 2 6 3 C6 3.66 6 4.32 6 5 C4.25 5.6875 4.25 5.6875 2 6 C-0.25 4.5625 -0.25 4.5625 -2 3 C-1 1 -1 1 0 0 Z \",fill:\"#6A4533\",transform:\"translate(554,529)\"})),_path2421||(_path2421=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0 4.62 0 7 0 C7 0.66 7 1.32 7 2 C5.7934375 2.4021875 5.7934375 2.4021875 4.5625 2.8125 C3.716875 3.204375 2.87125 3.59625 2 4 C1.67 4.99 1.34 5.98 1 7 C0.67 4.69 0.34 2.38 0 0 Z \",fill:\"#613E2B\",transform:\"translate(385,524)\"})),_path2422||(_path2422=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 1.32 0.66 2.64 1 4 C-2.375 4.125 -2.375 4.125 -6 4 C-6.66 3.34 -7.32 2.68 -8 2 C-4.91190305 0.23537317 -3.76687864 0 0 0 Z \",fill:\"#1D120E\",transform:\"translate(428,488)\"})),_path2423||(_path2423=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0 5.28 0 8 0 C8 0.66 8 1.32 8 2 C3.32798795 3.20568053 -1.21496292 3.09382426 -6 3 C-6 2.67 -6 2.34 -6 2 C-4.02 2 -2.04 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#350A12\",transform:\"translate(445,488)\"})),_path2424||(_path2424=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C1.32 2.66 2.64 3.32 4 4 C4 4.66 4 5.32 4 6 C4.99 6.33 5.98 6.66 7 7 C7 7.66 7 8.32 7 9 C4.53199953 7.84826645 2.95216435 6.95216435 1 5 C0.01 4.34 -0.98 3.68 -2 3 C-2.66 2.34 -3.32 1.68 -4 1 C-2 0 -2 0 0 0 Z \",fill:\"#C5535F\",transform:\"translate(258,470)\"})),_path2425||(_path2425=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3 3.31 3 5.62 3 8 C2.01 8.33 1.02 8.66 0 9 C0 6.03 0 3.06 0 0 Z \",fill:\"#765937\",transform:\"translate(308,460)\"})),_path2426||(_path2426=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C1.66 2 2.32 2 3 2 C3.66 3.65 4.32 5.3 5 7 C7.31 7.33 9.62 7.66 12 8 C12 8.33 12 8.66 12 9 C9.36 9 6.72 9 4 9 C3.67 8.01 3.34 7.02 3 6 C2.34 6 1.68 6 1 6 C0.67 4.02 0.34 2.04 0 0 Z \",fill:\"#F86864\",transform:\"translate(325,454)\"})),_path2427||(_path2427=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.5994614 3.19892281 2.42595236 5.35462576 3.125 8.75 C3.29257812 9.54921875 3.46015625 10.3484375 3.6328125 11.171875 C3.81457031 12.07679688 3.81457031 12.07679688 4 13 C3.34 13 2.68 13 2 13 C2 12.34 2 11.68 2 11 C1.34 11 0.68 11 0 11 C0 7.37 0 3.74 0 0 Z \",fill:\"#DBA974\",transform:\"translate(340,451)\"})),_path2428||(_path2428=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C4.01 0.495 4.01 0.495 3 1 C3 5.62 3 10.24 3 15 C2.67 15 2.34 15 2 15 C2 11.04 2 7.08 2 3 C1.01 3 0.02 3 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#CC4D3A\",transform:\"translate(317,455)\"})),_path2429||(_path2429=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.99911924 0.47610659 7.97832683 2.03162219 12 5 C8.35839192 6.21386936 7.66834531 5.6674695 4.3125 4.0625 C3.10013672 3.49208984 3.10013672 3.49208984 1.86328125 2.91015625 C1.24839844 2.60980469 0.63351562 2.30945313 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#83563F\",transform:\"translate(581,452)\"})),_path2430||(_path2430=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0.495 2.97 0.495 6 1 C4.515 3.475 4.515 3.475 3 6 C1.68 5.67 0.36 5.34 -1 5 C-0.01 5 0.98 5 2 5 C2 4.34 2 3.68 2 3 C0.68 2.67 -0.64 2.34 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#7C3538\",transform:\"translate(304,443)\"})),_path2431||(_path2431=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0 4.62 0 7 0 C7 0.66 7 1.32 7 2 C7.66 2.33 8.32 2.66 9 3 C5.7 3 2.4 3 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#C62634\",transform:\"translate(317,442)\"})),_path2432||(_path2432=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 1.32 0 2.64 0 4 C-5.53846154 4.36923077 -5.53846154 4.36923077 -7.875 2.5 C-8.24625 2.005 -8.6175 1.51 -9 1 C-2.25 0 -2.25 0 0 0 Z \",fill:\"#A57F5A\",transform:\"translate(402,413)\"})),_path2433||(_path2433=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1.34 3.31 0.68 5.62 0 8 C-0.66 8 -1.32 8 -2 8 C-2.33 5.69 -2.66 3.38 -3 1 C-2.01 0.67 -1.02 0.34 0 0 Z \",fill:\"#D4AD69\",transform:\"translate(200,396)\"})),_path2434||(_path2434=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0 3.96 0 6 0 C4.35 2.64 2.7 5.28 1 8 C0.02391783 5.07175348 -0.08226668 3.04386724 0 0 Z \",fill:\"#280606\",transform:\"translate(112,391)\"})),_path2435||(_path2435=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0 3.96 0 6 0 C6.33 0.66 6.66 1.32 7 2 C7.99 2.66 8.98 3.32 10 4 C7.36 4 4.72 4 2 4 C1.34 2.68 0.68 1.36 0 0 Z \",fill:\"#CAC281\",transform:\"translate(452,387)\"})),_path2436||(_path2436=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 3 0 3 -2.25 5.6875 C-5 8 -5 8 -9 8 C-9 7.34 -9 6.68 -9 6 C-8.34 6 -7.68 6 -7 6 C-7 5.34 -7 4.68 -7 4 C-5.824375 3.566875 -5.824375 3.566875 -4.625 3.125 C-1.90328368 2.15087746 -1.90328368 2.15087746 0 0 Z \",fill:\"#A53924\",transform:\"translate(127,362)\"})),_path2437||(_path2437=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C5 0.66 5 1.32 5 2 C9.62 2 14.24 2 19 2 C19 2.33 19 2.66 19 3 C16.39521117 3.0809313 13.79293347 3.14045434 11.1875 3.1875 C10.08051758 3.22520508 10.08051758 3.22520508 8.95117188 3.26367188 C3.45025238 3.33834499 3.45025238 3.33834499 0.98828125 1.48828125 C0.66214844 0.99714844 0.33601563 0.50601562 0 0 Z \",fill:\"#FECA9C\",transform:\"translate(389,360)\"})),_path2438||(_path2438=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.475 0.99 2.475 0.99 5 2 C4.67 3.98 4.34 5.96 4 8 C1.10067643 5.60490662 0.49831724 3.68754757 0 0 Z \",fill:\"#052C20\",transform:\"translate(501,358)\"})),_path2439||(_path2439=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.62 0.66 9.24 1.32 14 2 C14 2.33 14 2.66 14 3 C8.06 3.495 8.06 3.495 2 4 C1.34 2.68 0.68 1.36 0 0 Z \",fill:\"#AF8064\",transform:\"translate(532,359)\"})),_path2440||(_path2440=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0 4.62 0 7 0 C7 1.65 7 3.3 7 5 C7.66 5.33 8.32 5.66 9 6 C4.75177626 5.52797514 2.80010291 3.03344482 0 0 Z \",fill:\"#FC6851\",transform:\"translate(337,338)\"})),_path2441||(_path2441=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 1.32 0.66 2.64 1 4 C1.66 4 2.32 4 3 4 C3 6.31 3 8.62 3 11 C2.01 11 1.02 11 0 11 C0 7.37 0 3.74 0 0 Z \",fill:\"#7B321B\",transform:\"translate(258,329)\"})),_path2442||(_path2442=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0.99 1.98 0.99 4 2 C4 5.3 4 8.6 4 12 C1.21366885 7.82050327 0 5.06624674 0 0 Z \",fill:\"#383928\",transform:\"translate(254,328)\"})),_path2443||(_path2443=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3 1.66 3 2.32 3 3 C3.66 3.66 4.32 4.32 5 5 C4.01 5.495 4.01 5.495 3 6 C2.01 5.67 1.02 5.34 0 5 C-0.33 5.66 -0.66 6.32 -1 7 C-1.66 5.68 -2.32 4.36 -3 3 C-2.01 2.01 -1.02 1.02 0 0 Z \",fill:\"#24614D\",transform:\"translate(433,317)\"})),_path2444||(_path2444=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 1.65 2 3.3 2 5 C2.66 5.33 3.32 5.66 4 6 C1.03 6 -1.94 6 -5 6 C-5.33 5.34 -5.66 4.68 -6 4 C-4.02 4 -2.04 4 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#140F0B\",transform:\"translate(106,310)\"})),_path2445||(_path2445=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0 3.96 0 6 0 C5.67 1.98 5.34 3.96 5 6 C4.01 6 3.02 6 2 6 C2 4.35 2 2.7 2 1 C1.34 0.67 0.68 0.34 0 0 Z \",fill:\"#053520\",transform:\"translate(369,308)\"})),_path2446||(_path2446=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0 5.28 0 8 0 C7.6875 1.9375 7.6875 1.9375 7 4 C6.01 4.33 5.02 4.66 4 5 C4 4.34 4 3.68 4 3 C3.34 3 2.68 3 2 3 C2 2.34 2 1.68 2 1 C1.34 0.67 0.68 0.34 0 0 Z \",fill:\"#695F4E\",transform:\"translate(182,293)\"})),_path2447||(_path2447=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0 3.96 0 6 0 C4.68 0.33 3.36 0.66 2 1 C2 1.66 2 2.32 2 3 C4.31 3 6.62 3 9 3 C9 3.33 9 3.66 9 4 C8.05125 4.103125 7.1025 4.20625 6.125 4.3125 C2.70892499 4.68539295 2.70892499 4.68539295 1 8 C0.67 5.36 0.34 2.72 0 0 Z \",fill:\"#021209\",transform:\"translate(477,283)\"})),_path2448||(_path2448=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.33 2.97 1.66 5.94 2 9 C2.99 9 3.98 9 5 9 C5 9.66 5 10.32 5 11 C2.69 11 0.38 11 -2 11 C-2 10.34 -2 9.68 -2 9 C-1.34 9 -0.68 9 0 9 C0 6.03 0 3.06 0 0 Z \",fill:\"#3F150A\",transform:\"translate(526,275)\"})),_path2449||(_path2449=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0 3.96 0 6 0 C6 0.66 6 1.32 6 2 C4.35 2.33 2.7 2.66 1 3 C0.67 3.99 0.34 4.98 0 6 C-0.66 6 -1.32 6 -2 6 C-1.49396008 3.83125748 -1.00016187 2.00032373 0 0 Z \",fill:\"#EECB3E\",transform:\"translate(148,276)\"})),_path2450||(_path2450=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.52519276 0.08937803 3.04681929 0.24537146 4.5625 0.4375 C5.80193359 0.59025391 5.80193359 0.59025391 7.06640625 0.74609375 C7.70449219 0.82988281 8.34257812 0.91367187 9 1 C9 1.33 9 1.66 9 2 C6.69 2.33 4.38 2.66 2 3 C2.99 3.33 3.98 3.66 5 4 C5 4.66 5 5.32 5 6 C3.35 5.67 1.7 5.34 0 5 C-0.5625 3.0625 -0.5625 3.0625 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#E8DA64\",transform:\"translate(171,268)\"})),_path2451||(_path2451=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 1.32 2 2.64 2 4 C2.5775 3.79375 3.155 3.5875 3.75 3.375 C6 3 6 3 10 5 C6.37 5.33 2.74 5.66 -1 6 C-0.67 4.02 -0.34 2.04 0 0 Z \",fill:\"#6F6B5A\",transform:\"translate(270,270)\"})),_path2452||(_path2452=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0 5.94 0 9 0 C9 0.99 9 1.98 9 3 C6.36 3 3.72 3 1 3 C0.67 2.01 0.34 1.02 0 0 Z \",fill:\"#DACF54\",transform:\"translate(147,269)\"})),_path2453||(_path2453=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.3 0 6.6 0 10 0 C10 0.66 10 1.32 10 2 C9.01 2 8.02 2 7 2 C7 2.99 7 3.98 7 5 C6.34 5 5.68 5 5 5 C5 4.01 5 3.02 5 2 C3.35 1.67 1.7 1.34 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#E2B388\",transform:\"translate(254,267)\"})),_path2454||(_path2454=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1.32 0.33 -2.64 0.66 -4 1 C-4 1.66 -4 2.32 -4 3 C-7.96 2.67 -11.92 2.34 -16 2 C-16 1.67 -16 1.34 -16 1 C-14.95199219 0.90912109 -14.95199219 0.90912109 -13.8828125 0.81640625 C-12.97273438 0.73261719 -12.06265625 0.64882813 -11.125 0.5625 C-10.22007812 0.48128906 -9.31515625 0.40007812 -8.3828125 0.31640625 C-1.84090909 -0.55227273 -1.84090909 -0.55227273 0 0 Z \",fill:\"#272C21\",transform:\"translate(468,263)\"})),_path2455||(_path2455=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 2.97 0 5.94 0 9 C-0.99 9 -1.98 9 -3 9 C-3 6.36 -3 3.72 -3 1 C-1 0 -1 0 0 0 Z \",fill:\"#E59570\",transform:\"translate(221,259)\"})),_path2456||(_path2456=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.61277612 2.96175123 -1.25372522 4.38058783 -3 7 C-3.33 6.01 -3.66 5.02 -4 4 C-4.99 4 -5.98 4 -7 4 C-6.67 3.01 -6.34 2.02 -6 1 C-3.90006779 0.25486277 -2.22568901 0 0 0 Z \",fill:\"#D08B6B\",transform:\"translate(113,257)\"})),_path2457||(_path2457=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.99 0 1.98 0 3 C-0.99 3 -1.98 3 -3 3 C-4.33981486 3.3062434 -5.67511887 3.63451555 -7 4 C-7 3.34 -7 2.68 -7 2 C-8.32 1.67 -9.64 1.34 -11 1 C-7.26562152 0.12132271 -3.83225427 -0.08912219 0 0 Z \",fill:\"#CEC4AC\",transform:\"translate(344,246)\"})),_path2458||(_path2458=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97722547 0.70333538 5.85256543 1.58248537 8.75 2.5625 C9.94882813 2.96662109 9.94882813 2.96662109 11.171875 3.37890625 C11.77515625 3.58386719 12.3784375 3.78882813 13 4 C12.67 4.66 12.34 5.32 12 6 C8.7 5.01 5.4 4.02 2 3 C2 2.34 2 1.68 2 1 C1.34 0.67 0.68 0.34 0 0 Z \",fill:\"#AC7F56\",transform:\"translate(236,243)\"})),_path2459||(_path2459=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0.66 4.62 1.32 7 2 C7 2.33 7 2.66 7 3 C8.65 3.33 10.3 3.66 12 4 C12 4.33 12 4.66 12 5 C6.60550707 5.27429625 3.48074195 5.36055646 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#C4A781\",transform:\"translate(267,234)\"})),_path2460||(_path2460=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.75 0.875 7.75 0.875 10 2 C10 2.66 10 3.32 10 4 C2.25 3.125 2.25 3.125 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#412A24\",transform:\"translate(82,208)\"})),_path2461||(_path2461=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.33 0.99 -0.66 1.98 -1 3 C-4.3 3 -7.6 3 -11 3 C-11 2.34 -11 1.68 -11 1 C-7.27569643 0.30710631 -3.78916254 -0.11144596 0 0 Z \",fill:\"#434F47\",transform:\"translate(545,208)\"})),_path2462||(_path2462=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1 2 -1 2 -3.6875 3.125 C-6.9579435 3.98889074 -9.63706182 4.16013991 -13 4 C-8.66957446 0.44286474 -5.53947792 -0.15387439 0 0 Z \",fill:\"#5F8D79\",transform:\"translate(518,207)\"})),_path2463||(_path2463=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.46800047 1.15173355 4.04783565 2.04783565 6 4 C5.67 4.66 5.34 5.32 5 6 C-0.75 4.25 -0.75 4.25 -3 2 C-2.01 1.34 -1.02 0.68 0 0 Z \",fill:\"#8F663D\",transform:\"translate(73,166)\"})),_path2464||(_path2464=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-2.54605302 2.00047023 -4.9664636 3.82572785 -8 5 C-8.99 4.67 -9.98 4.34 -11 4 C-7.35237315 0.18657193 -5.28949249 -0.11498897 0 0 Z \",fill:\"#544B40\",transform:\"translate(499,162)\"})),_path2465||(_path2465=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3 0.66 3 1.32 3 2 C4.32 2 5.64 2 7 2 C7 1.34 7 0.68 7 0 C7.99 0 8.98 0 10 0 C9.34 1.32 8.68 2.64 8 4 C6.02 4 4.04 4 2 4 C2 3.34 2 2.68 2 2 C1.34 2 0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#A2B38B\",transform:\"translate(376,156)\"})),_path2466||(_path2466=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C4.67 1.32 4.34 2.64 4 4 C2.68 4 1.36 4 0 4 C0 4.66 0 5.32 0 6 C-0.66 6 -1.32 6 -2 6 C-2 4.68 -2 3.36 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#AEB18C\",transform:\"translate(370,156)\"})),_path2467||(_path2467=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.62566606 0.47690204 3.25051311 0.95659666 4.875 1.4375 C5.77992187 1.70433594 6.68484375 1.97117188 7.6171875 2.24609375 C10 3 10 3 12 4 C12 4.66 12 5.32 12 6 C7.61110675 5.33501617 4.0188515 3.81242323 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#DAAD80\",transform:\"translate(12,144)\"})),_path2468||(_path2468=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1.01 2.32 0.02 3.64 -1 5 C-0.34 5.33 0.32 5.66 1 6 C0.01 6 -0.98 6 -2 6 C-2 6.99 -2 7.98 -2 9 C-3.65 9.66 -5.3 10.32 -7 11 C-6.34 10.01 -5.68 9.02 -5 8 C-4.34 8 -3.68 8 -3 8 C-3.2475 7.4225 -3.495 6.845 -3.75 6.25 C-3.8325 5.5075 -3.915 4.765 -4 4 C-2.0625 1.75 -2.0625 1.75 0 0 Z \",fill:\"#2A1712\",transform:\"translate(468,115)\"})),_path2469||(_path2469=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1.59766103 0.86627399 -3.20339944 1.71766465 -4.8125 2.5625 C-5.70582031 3.03816406 -6.59914063 3.51382813 -7.51953125 4.00390625 C-10 5 -10 5 -13 4 C-4.95935583 -1.53911043 -4.95935583 -1.53911043 0 0 Z \",fill:\"#111915\",transform:\"translate(589,115)\"})),_path2470||(_path2470=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C1.82374165 2.37948772 1.30280227 3.70225849 -0.40234375 5.37890625 C-1.90649092 6.62115486 -3.45129851 7.81376056 -5 9 C-4.67 7.02 -4.34 5.04 -4 3 C-3.01 2.67 -2.02 2.34 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#779379\",transform:\"translate(431,110)\"})),_path2471||(_path2471=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3 1.65 3 3.3 3 5 C3.99 5.33 4.98 5.66 6 6 C5.01 6.33 4.02 6.66 3 7 C1.35 5.35 -0.3 3.7 -2 2 C-1.34 1.34 -0.68 0.68 0 0 Z \",fill:\"#2F2118\",transform:\"translate(83,106)\"})),_path2472||(_path2472=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 1.65 5.94 3.3 9 5 C8.01 5.66 7.02 6.32 6 7 C3.36 5.35 0.72 3.7 -2 2 C-1.34 1.34 -0.68 0.68 0 0 Z \",fill:\"#CAA771\",transform:\"translate(35,77)\"})),_path2473||(_path2473=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0 4.62 0 7 0 C7.66 1.32 8.32 2.64 9 4 C7.35 4.33 5.7 4.66 4 5 C2.68 3.35 1.36 1.7 0 0 Z \",fill:\"#E3BD7C\",transform:\"translate(123,74)\"})),_path2474||(_path2474=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1.67 4.3 1.34 7.6 1 11 C-0.65 11.66 -2.3 12.32 -4 13 C-4.33 12.01 -4.66 11.02 -5 10 C-4.01 10 -3.02 10 -2 10 C-1.34 6.7 -0.68 3.4 0 0 Z \",fill:\"#6E4F38\",transform:\"translate(137,66)\"})),_path2475||(_path2475=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.48285242 0.95262034 2.96118201 1.91228405 4.4375 2.875 C5.67306641 3.67550781 5.67306641 3.67550781 6.93359375 4.4921875 C9 6 9 6 10 8 C5.80639551 7.32902328 2.59665648 5.1441606 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#201819\",transform:\"translate(46,66)\"})),_path2476||(_path2476=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4 1.32 4 2.64 4 4 C4.66 4 5.32 4 6 4 C6 4.66 6 5.32 6 6 C6.66 6 7.32 6 8 6 C8.66 7.65 9.32 9.3 10 11 C5.86062408 7.69984002 2.41337795 4.82675589 0 0 Z \",fill:\"#2F1A0E\",transform:\"translate(80,16)\"})),_path2477||(_path2477=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.64453125 1.765625 0.64453125 1.765625 1 4 C0.07421875 5.921875 0.07421875 5.921875 -1.3125 7.75 C-1.98732422 8.67039062 -1.98732422 8.67039062 -2.67578125 9.609375 C-3.11277344 10.06828125 -3.54976563 10.5271875 -4 11 C-4.66 11 -5.32 11 -6 11 C-6 10.34 -6 9.68 -6 9 C-5.34 9 -4.68 9 -4 9 C-3.896875 8.443125 -3.79375 7.88625 -3.6875 7.3125 C-2.86866423 4.55823422 -1.54146219 2.41272343 0 0 Z \",fill:\"#55372A\",transform:\"translate(83,612)\"})),_path2478||(_path2478=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.52307692 -0.36923077 6.52307692 -0.36923077 8.9375 1.5 C9.288125 1.995 9.63875 2.49 10 3 C9.67 3.66 9.34 4.32 9 5 C6.03 4.01 3.06 3.02 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#D37E54\",transform:\"translate(467,500)\"})),_path2479||(_path2479=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.62 0.99 9.24 1.98 14 3 C14 3.33 14 3.66 14 4 C12.41676312 4.027193 10.83338938 4.04648306 9.25 4.0625 C7.92742187 4.07990234 7.92742187 4.07990234 6.578125 4.09765625 C4.2181162 4.00826198 2.25501476 3.66912821 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#C14B4D\",transform:\"translate(210,488)\"})),_path2480||(_path2480=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.86724686 0.57344937 3.8614515 0.8614515 6 3 C6.69937532 4.31647119 7.36729133 5.65022151 8 7 C8.33 7.66 8.66 8.32 9 9 C7.68 8.67 6.36 8.34 5 8 C5 7.34 5 6.68 5 6 C4.34 6 3.68 6 3 6 C2.01 4.02 1.02 2.04 0 0 Z \",fill:\"#8D5E42\",transform:\"translate(510,479)\"})),_path2481||(_path2481=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-3.83325617 2.70582788 -6.32538149 3.32613618 -11 3 C-11.33 2.34 -11.66 1.68 -12 1 C-10.37681021 0.63762737 -8.7513642 0.28534843 -7.125 -0.0625 C-6.22007812 -0.25972656 -5.31515625 -0.45695312 -4.3828125 -0.66015625 C-2 -1 -2 -1 0 0 Z \",fill:\"#0E0B0C\",transform:\"translate(435,479)\"})),_path2482||(_path2482=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C3 5.75 3 5.75 3 8 C2.34 8 1.68 8 1 8 C0.67 9.32 0.34 10.64 0 12 C0 8.04 0 4.08 0 0 Z \",fill:\"#FD1021\",transform:\"translate(154,468)\"})),_path2483||(_path2483=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0.33 5.28 0.66 8 1 C7.67 1.66 7.34 2.32 7 3 C6.34 2.67 5.68 2.34 5 2 C5 4.31 5 6.62 5 9 C4.67 9 4.34 9 4 9 C3.87625 7.865625 3.7525 6.73125 3.625 5.5625 C3.41875 4.386875 3.2125 3.21125 3 2 C2.34 1.67 1.68 1.34 1 1 C1 2.98 1 4.96 1 7 C0.67 7 0.34 7 0 7 C0 4.69 0 2.38 0 0 Z \",fill:\"#C58F51\",transform:\"translate(307,459)\"})),_path2484||(_path2484=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0 4.62 0 7 0 C7 0.99 7 1.98 7 3 C4.69 3.33 2.38 3.66 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#8E3C39\",transform:\"translate(435,463)\"})),_path2485||(_path2485=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.07765625 0.11085938 2.1553125 0.22171875 3.265625 0.3359375 C4.08546875 0.43132812 4.9053125 0.52671875 5.75 0.625 C5.75 0.955 5.75 1.285 5.75 1.625 C5.00234375 1.68558594 4.2546875 1.74617188 3.484375 1.80859375 C2.49953125 1.89238281 1.5146875 1.97617187 0.5 2.0625 C-0.47453125 2.14371094 -1.4490625 2.22492188 -2.453125 2.30859375 C-4.81461753 2.57574584 -6.96901065 2.97871968 -9.25 3.625 C-9.58 2.965 -9.91 2.305 -10.25 1.625 C-6.69181064 -0.63773207 -4.12452049 -0.44831744 0 0 Z \",fill:\"#310502\",transform:\"translate(383.25,463.375)\"})),_path2486||(_path2486=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.63 0 7.26 0 11 0 C11 0.99 11 1.98 11 3 C7.37 2.67 3.74 2.34 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#7A3039\",transform:\"translate(240,460)\"})),_path2487||(_path2487=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.928125 0.20625 1.85625 0.4125 2.8125 0.625 C2.4825 1.285 2.1525 1.945 1.8125 2.625 C-0.25390625 3.2578125 -0.25390625 3.2578125 -2.75 3.75 C-3.57628906 3.91757812 -4.40257813 4.08515625 -5.25390625 4.2578125 C-5.89199219 4.37898438 -6.53007813 4.50015625 -7.1875 4.625 C-5.78075725 0.40477175 -4.42930454 -0.52109465 0 0 Z \",fill:\"#523A2D\",transform:\"translate(89.1875,445.375)\"})),_path2488||(_path2488=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.77545388 1.09068668 6.47043472 1.9083091 9 5 C8.01 5.33 7.02 5.66 6 6 C2.8125 4.1875 2.8125 4.1875 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#5A412B\",transform:\"translate(506,439)\"})),_path2489||(_path2489=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.53625 0.226875 1.0725 0.45375 1.625 0.6875 C-5 4.6875 -5 4.6875 -8.375 4.6875 C-8.375 4.0275 -8.375 3.3675 -8.375 2.6875 C-2.95961538 -0.38942308 -2.95961538 -0.38942308 0 0 Z \",fill:\"#50332B\",transform:\"translate(91.375,426.3125)\"})),_path2490||(_path2490=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4.33 2.97 4.66 5.94 5 9 C4.01 9 3.02 9 2 9 C2 6.69 2 4.38 2 2 C1.34 2 0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#CD2133\",transform:\"translate(304,398)\"})),_path2491||(_path2491=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.66 4.62 2.32 9.24 3 14 C1.68 14 0.36 14 -1 14 C-0.67 9.38 -0.34 4.76 0 0 Z \",fill:\"#0F0302\",transform:\"translate(1,388)\"})),_path2492||(_path2492=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C-0.32 2 -1.64 2 -3 2 C-2.67 2.99 -2.34 3.98 -2 5 C-4.97 4.505 -4.97 4.505 -8 4 C-8 3.01 -8 2.02 -8 1 C-5.36 0.67 -2.72 0.34 0 0 Z \",fill:\"#AEBC8F\",transform:\"translate(538,382)\"})),_path2493||(_path2493=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.33 2.97 2.66 5.94 3 9 C2.34 9 1.68 9 1 9 C1 8.34 1 7.68 1 7 C0.34 7 -0.32 7 -1 7 C-1.625 5.1875 -1.625 5.1875 -2 3 C-1.34 2.01 -0.68 1.02 0 0 Z \",fill:\"#576B46\",transform:\"translate(434,377)\"})),_path2494||(_path2494=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 2.31 0 4.62 0 7 C-2.49092811 8.24546405 -3.41080733 7.7767578 -6 7 C-6 5 -6 5 -3.5625 2.375 C-1 0 -1 0 0 0 Z \",fill:\"#F46459\",transform:\"translate(322,377)\"})),_path2495||(_path2495=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.09350689 3.4019487 2.17942163 6.05272412 2 10 C1.01 9.67 0.02 9.34 -1 9 C-1.09765625 2.84765625 -1.09765625 2.84765625 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#5F3A37\",transform:\"translate(276,351)\"})),_path2496||(_path2496=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 1.32 0.66 2.64 1 4 C-1.64 4 -4.28 4 -7 4 C-7 3.34 -7 2.68 -7 2 C-4.35261084 0.5393715 -3.10551666 0 0 0 Z \",fill:\"#B7876D\",transform:\"translate(134,349)\"})),_path2497||(_path2497=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.66 1.98 3.32 3.96 4 6 C3.34 6 2.68 6 2 6 C2 6.66 2 7.32 2 8 C0.68 7.67 -0.64 7.34 -2 7 C-1.01 7 -0.02 7 1 7 C1 6.34 1 5.68 1 5 C0.34 5 -0.32 5 -1 5 C-0.67 3.35 -0.34 1.7 0 0 Z \",fill:\"#3F0A0C\",transform:\"translate(62,346)\"})),_path2498||(_path2498=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.29 0.33 8.58 0.66 13 1 C13 1.66 13 2.32 13 3 C10.03 3 7.06 3 4 3 C4 2.34 4 1.68 4 1 C2.68 0.67 1.36 0.34 0 0 Z \",fill:\"#AA7055\",transform:\"translate(613,341)\"})),_path2499||(_path2499=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3.268125 0.61875 3.53625 1.2375 3.8125 1.875 C4.95556848 4.2995233 4.95556848 4.2995233 8 6 C5.36 5.67 2.72 5.34 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#F6BA9D\",transform:\"translate(347,338)\"})),_path2500||(_path2500=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 1.65 0.66 3.3 1 5 C-3.625 7.125 -3.625 7.125 -7 6 C-5.68 5.67 -4.36 5.34 -3 5 C-3 4.34 -3 3.68 -3 3 C-3.66 2.67 -4.32 2.34 -5 2 C-2 0 -2 0 0 0 Z \",fill:\"#081109\",transform:\"translate(486,337)\"})),_path2501||(_path2501=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3 1.66 3 2.32 3 3 C4.32 3.33 5.64 3.66 7 4 C7 4.66 7 5.32 7 6 C3.7 6 0.4 6 -3 6 C-3 5.67 -3 5.34 -3 5 C-1.35 5 0.3 5 2 5 C2 4.01 2 3.02 2 2 C1.34 2 0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#B2171F\",transform:\"translate(318,332)\"})),_path2502||(_path2502=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99773437 0.02320313 1.99546875 0.04640625 3.0234375 0.0703125 C4.52777344 0.09738281 4.52777344 0.09738281 6.0625 0.125 C6.83335937 0.14820313 7.60421875 0.17140625 8.3984375 0.1953125 C8.3984375 0.8553125 8.3984375 1.5153125 8.3984375 2.1953125 C3.76922225 3.2114817 0.05381143 3.03327981 -4.6015625 2.1953125 C-2.6015625 0.1953125 -2.6015625 0.1953125 0 0 Z \",fill:\"#20502D\",transform:\"translate(185.6015625,325.8046875)\"})),_path2503||(_path2503=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0 5.28 0 8 0 C8 0.99 8 1.98 8 3 C5.36 3 2.72 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#142F2F\",transform:\"translate(92,324)\"})),_path2504||(_path2504=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0 3.96 0 6 0 C5.01 0.495 5.01 0.495 4 1 C4 2.65 4 4.3 4 6 C2.68 6 1.36 6 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#081918\",transform:\"translate(408,322)\"})),_path2505||(_path2505=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0 5.94 0 9 0 C9 0.66 9 1.32 9 2 C6.03 2.66 3.06 3.32 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#F4462A\",transform:\"translate(141,320)\"})),_path2506||(_path2506=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.60332791 -0.08121924 3.20784026 -0.13929134 4.8125 -0.1875 C6.15248047 -0.23970703 6.15248047 -0.23970703 7.51953125 -0.29296875 C10.41647515 0.04918998 11.22555028 0.75393573 13 3 C10.36 3 7.72 3 5 3 C5 2.34 5 1.68 5 1 C3.35 1 1.7 1 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#0B6346\",transform:\"translate(459,317)\"})),_path2507||(_path2507=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0 5.28 0 8 0 C8 0.99 8 1.98 8 3 C5.36 3 2.72 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#F5E1DE\",transform:\"translate(191,319)\"})),_path2508||(_path2508=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.475 0.99 2.475 0.99 5 2 C4.67 3.32 4.34 4.64 4 6 C2.68 6 1.36 6 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#755A45\",transform:\"translate(204,305)\"})),_path2509||(_path2509=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0.33 3.3 0.66 5 1 C5 2.32 5 3.64 5 5 C1.7 5 -1.6 5 -5 5 C-5 4.67 -5 4.34 -5 4 C-3.02 4 -1.04 4 1 4 C0.67 2.68 0.34 1.36 0 0 Z \",fill:\"#8B5344\",transform:\"translate(345,292)\"})),_path2510||(_path2510=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3.05399736 1.45792884 3.09279177 2.91642712 3.125 4.375 C3.14820313 5.18710937 3.17140625 5.99921875 3.1953125 6.8359375 C3 9 3 9 1 11 C1.33 9.35 1.66 7.7 2 6 C1.34 6 0.68 6 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#7C4138\",transform:\"translate(203,286)\"})),_path2511||(_path2511=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.66 1.32 1.32 2 2 C1.625 4.625 1.625 4.625 1 7 C-1.375 7.625 -1.375 7.625 -4 8 C-4.66 7.34 -5.32 6.68 -6 6 C-5 5 -5 5 -2.4375 4.9375 C-1.2309375 4.9684375 -1.2309375 4.9684375 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#2D0E06\",transform:\"translate(166,285)\"})),_path2512||(_path2512=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.66 1.32 1.32 2 2 C1.98252112 4.59269983 1.86231408 7.0525154 1.625 9.625 C1.56828125 10.33140625 1.5115625 11.0378125 1.453125 11.765625 C1.31159079 13.51121361 1.15702613 15.25573673 1 17 C0.67 17 0.34 17 0 17 C-0.03867188 15.51886719 -0.03867188 15.51886719 -0.078125 14.0078125 C-0.13484375 12.72648437 -0.1915625 11.44515625 -0.25 10.125 C-0.29640625 8.84882813 -0.3428125 7.57265625 -0.390625 6.2578125 C-0.62555056 2.90811895 -0.62555056 2.90811895 -3.046875 1.5546875 C-3.69140625 1.37164062 -4.3359375 1.18859375 -5 1 C-2.625 0.375 -2.625 0.375 0 0 Z \",fill:\"#F6BB55\",transform:\"translate(112,269)\"})),_path2513||(_path2513=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.62 0.66 9.24 1.32 14 2 C14 2.33 14 2.66 14 3 C9.38 3 4.76 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#7EA763\",transform:\"translate(424,279)\"})),_path2514||(_path2514=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C1.66 2 2.32 2 3 2 C3 3.32 3 4.64 3 6 C0.36 5.34 -2.28 4.68 -5 4 C-5 3.34 -5 2.68 -5 2 C-2 0 -2 0 0 0 Z \",fill:\"#E2B49C\",transform:\"translate(165,276)\"})),_path2515||(_path2515=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C2.98 2.67 4.96 2.34 7 2 C6.67 2.99 6.34 3.98 6 5 C2.37 5.33 -1.26 5.66 -5 6 C-4.67 4.68 -4.34 3.36 -4 2 C-4 2.66 -4 3.32 -4 4 C-2.68 2.68 -1.36 1.36 0 0 Z \",fill:\"#D0C489\",transform:\"translate(235,274)\"})),_path2516||(_path2516=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4 2.97 4 5.94 4 9 C2.35 9 0.7 9 -1 9 C-1.33 9.66 -1.66 10.32 -2 11 C-2 10.01 -2 9.02 -2 8 C-0.35 8 1.3 8 3 8 C2.65555119 5.52733235 2.65555119 5.52733235 2 3 C1.34 2.67 0.68 2.34 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#D29D78\",transform:\"translate(264,267)\"})),_path2517||(_path2517=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 3.3 1.32 6.6 2 10 C1.01 10 0.02 10 -1 10 C-1.66 7.03 -2.32 4.06 -3 1 C-1 0 -1 0 0 0 Z \",fill:\"#5D3F27\",transform:\"translate(140,258)\"})),_path2518||(_path2518=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4.66 3.3 5.32 6.6 6 10 C5.01 10 4.02 10 3 10 C2.67 7.36 2.34 4.72 2 2 C1.34 2 0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#B76C54\",transform:\"translate(218,258)\"})),_path2519||(_path2519=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.33 2.64 0.66 4 1 C4 1.99 4 2.98 4 4 C6.64 4 9.28 4 12 4 C12 4.33 12 4.66 12 5 C8.37 5 4.74 5 1 5 C0.67 3.35 0.34 1.7 0 0 Z \",fill:\"#B38550\",transform:\"translate(198,264)\"})),_path2520||(_path2520=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 1.485 0.99 1.485 2 3 C2.99 3 3.98 3 5 3 C5.99 3 6.98 3 8 3 C8 3.66 8 4.32 8 5 C7.01 5 6.02 5 5 5 C4.67 5.66 4.34 6.32 4 7 C2.68 7 1.36 7 0 7 C0 4.69 0 2.38 0 0 Z \",fill:\"#894D36\",transform:\"translate(166,255)\"})),_path2521||(_path2521=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C5 3 5 3 5 6 C3.35 6 1.7 6 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#907763\",transform:\"translate(264,253)\"})),_path2522||(_path2522=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.99 0.33 -1.98 0.66 -3 1 C-3 1.66 -3 2.32 -3 3 C-5.3431213 2.74438677 -7.67843403 2.40729228 -10 2 C-10.33 1.34 -10.66 0.68 -11 0 C-7.18243176 -1.37432457 -3.92744671 -0.67975039 0 0 Z \",fill:\"#A3917D\",transform:\"translate(235,250)\"})),_path2523||(_path2523=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3.33 3.97 3.66 6.94 4 10 C3.01 9.67 2.02 9.34 1 9 C0.67 6.03 0.34 3.06 0 0 Z \",fill:\"#B97862\",transform:\"translate(13,244)\"})),_path2524||(_path2524=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.45903258 0.30921884 2.91720722 0.62248799 4.375 0.9375 C5.18710938 1.11152344 5.99921875 1.28554687 6.8359375 1.46484375 C9 2 9 2 11 3 C11 3.66 11 4.32 11 5 C7.0507432 4.44894091 3.65079826 3.61064629 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#7B593E\",transform:\"translate(221,235)\"})),_path2525||(_path2525=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3 1.66 3 2.32 3 3 C4.32 3.66 5.64 4.32 7 5 C6.67 5.99 6.34 6.98 6 8 C5.34 8 4.68 8 4 8 C4 7.34 4 6.68 4 6 C3.34 6 2.68 6 2 6 C1.34 4.02 0.68 2.04 0 0 Z \",fill:\"#68342B\",transform:\"translate(35,231)\"})),_path2526||(_path2526=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 1.98 2.97 1.98 6 4 C5.67 4.99 5.34 5.98 5 7 C2.11562221 5.70700306 0.12780579 4.34058637 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#D0A688\",transform:\"translate(249,220)\"})),_path2527||(_path2527=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.66 2.64 1.32 4 2 C4 3.32 4 4.64 4 6 C2.02 6 0.04 6 -2 6 C-2 3.17555626 -1.98538594 1.98538594 0 0 Z \",fill:\"#23070A\",transform:\"translate(598,217)\"})),_path2528||(_path2528=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C2.67 3.97 2.34 6.94 2 10 C0.35 9.67 -1.3 9.34 -3 9 C-2.01 8.67 -1.02 8.34 0 8 C0 5.36 0 2.72 0 0 Z \",fill:\"#D0A77F\",transform:\"translate(162,212)\"})),_path2529||(_path2529=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-2 3 -2 3 -3.9453125 3.51171875 C-4.66460938 3.56972656 -5.38390625 3.62773437 -6.125 3.6875 C-8.043125 3.8421875 -8.043125 3.8421875 -10 4 C-9.01 3.67 -8.02 3.34 -7 3 C-7.33 2.01 -7.66 1.02 -8 0 C-5.13822943 -1.43088528 -3.06624227 -0.59991697 0 0 Z \",fill:\"#393331\",transform:\"translate(540,213)\"})),_path2530||(_path2530=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.2742558 1.5830577 6.26531794 4.50568404 9 8 C6 8 6 8 4.39453125 6.7578125 C3.87246094 6.21898437 3.35039062 5.68015625 2.8125 5.125 C2.28269531 4.59132812 1.75289062 4.05765625 1.20703125 3.5078125 C0 2 0 2 0 0 Z \",fill:\"#B69370\",transform:\"translate(207,183)\"})),_path2531||(_path2531=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2 3.31 2 5.62 2 8 C1.67 7.34 1.34 6.68 1 6 C-0.32 6 -1.64 6 -3 6 C-3 4.35 -3 2.7 -3 1 C-2.67 1.66 -2.34 2.32 -2 3 C-1.34 3 -0.68 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#AF956D\",transform:\"translate(183,144)\"})),_path2532||(_path2532=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3 1.99 3 2.98 3 4 C2.34 4 1.68 4 1 4 C1 8.29 1 12.58 1 17 C0.67 17 0.34 17 0 17 C0 11.39 0 5.78 0 0 Z \",fill:\"#342D2D\",transform:\"translate(37,120)\"})),_path2533||(_path2533=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 1.32 2.64 2.64 4 4 C3.67 4.99 3.34 5.98 3 7 C1 7 1 7 -1.125 5.125 C-3 3 -3 3 -3 1 C-2.01 0.67 -1.02 0.34 0 0 Z \",fill:\"#32231F\",transform:\"translate(103,111)\"})),_path2534||(_path2534=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.598125 0.763125 1.19625 1.52625 1.8125 2.3125 C3.46959332 4.3483575 5.10297674 6.1978279 7 8 C6.67 8.66 6.34 9.32 6 10 C4.02 9.34 2.04 8.68 0 8 C0 5.33333333 0 2.66666667 0 0 Z \",fill:\"#43352D\",transform:\"translate(87,106)\"})),_path2535||(_path2535=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4 0.66 4 1.32 4 2 C4.99 2.33 5.98 2.66 7 3 C5.68 3.99 4.36 4.98 3 6 C2.34 5.67 1.68 5.34 1 5 C1.33 4.34 1.66 3.68 2 3 C1.34 3 0.68 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#548168\",transform:\"translate(488,90)\"})),_path2536||(_path2536=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C-1.64 2.99 -4.28 3.98 -7 5 C-7 4.01 -7 3.02 -7 2 C-7.61875 2.20625 -8.2375 2.4125 -8.875 2.625 C-9.57625 2.74875 -10.2775 2.8725 -11 3 C-11.66 2.34 -12.32 1.68 -13 1 C-6.565 0.505 -6.565 0.505 0 0 Z \",fill:\"#3C453E\",transform:\"translate(162,78)\"})),_path2537||(_path2537=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C4.67 1.65 4.34 3.3 4 5 C2.68 5 1.36 5 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#BC8A5F\",transform:\"translate(466,77)\"})),_path2538||(_path2538=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1.67 1.99 1.34 2.98 1 4 C1.66 4 2.32 4 3 4 C3.33 3.34 3.66 2.68 4 2 C5 3 5 3 5.0625 5.5625 C5.041875 6.366875 5.02125 7.17125 5 8 C0.22753346 5.55258126 0.22753346 5.55258126 -0.875 2.875 C-0.91625 2.25625 -0.9575 1.6375 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#F4C788\",transform:\"translate(93,36)\"})),_path2539||(_path2539=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.0625 0.4375 2.0625 0.4375 4 1 C2.73608512 2.00873016 1.46359117 3.00671822 0.1875 4 C-0.87404297 4.8353125 -0.87404297 4.8353125 -1.95703125 5.6875 C-4 7 -4 7 -7 7 C-5.74797133 3.24391399 -4.36936427 2.85315035 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#234332\",transform:\"translate(608,4)\"})),_path2540||(_path2540=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C-0.64 4.3 -3.28 7.6 -6 11 C-6.33 10.34 -6.66 9.68 -7 9 C-4.69 6.03 -2.38 3.06 0 0 Z \",fill:\"#35211D\",transform:\"translate(47,609)\"})),_path2541||(_path2541=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 1.32 1.32 2.64 2 4 C0.35 5.32 -1.3 6.64 -3 8 C-3 3.73173127 -2.62386487 3.06117568 0 0 Z \",fill:\"#56382D\",transform:\"translate(30,597)\"})),_path2542||(_path2542=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C0.67 2.66 0.34 3.32 0 4 C0.99 3.67 1.98 3.34 3 3 C2.6875 5.875 2.6875 5.875 2 9 C1.01 9.66 0.02 10.32 -1 11 C-1.02688151 9.35425434 -1.04634123 7.70838587 -1.0625 6.0625 C-1.07410156 5.14597656 -1.08570313 4.22945312 -1.09765625 3.28515625 C-1 1 -1 1 0 0 Z \",fill:\"#684535\",transform:\"translate(146,570)\"})),_path2543||(_path2543=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3 1.66 3 2.32 3 3 C3.66 3 4.32 3 5 3 C5.33 4.32 5.66 5.64 6 7 C5.01 7.33 4.02 7.66 3 8 C0 3.375 0 3.375 0 0 Z \",fill:\"#452B27\",transform:\"translate(475,559)\"})),_path2544||(_path2544=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2 1.66 2 2.32 2 3 C3.32 3.33 4.64 3.66 6 4 C5.67 5.32 5.34 6.64 5 8 C3.02 6.68 1.04 5.36 -1 4 C-0.67 2.68 -0.34 1.36 0 0 Z \",fill:\"#5F4133\",transform:\"translate(620,549)\"})),_path2545||(_path2545=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.17119503 1.09351553 4.00783543 2.0126988 5.8125 4.9375 C7 8 7 8 6 11 C4.99735282 9.35577799 3.99794896 7.70957779 3 6.0625 C2.443125 5.14597656 1.88625 4.22945312 1.3125 3.28515625 C0 1 0 1 0 0 Z \",fill:\"#8D6048\",transform:\"translate(457,534)\"})),_path2546||(_path2546=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C2.52307692 4.67692308 2.52307692 4.67692308 -0.125 6.3125 C-1.053125 6.6528125 -1.053125 6.6528125 -2 7 C-1.34 4.69 -0.68 2.38 0 0 Z \",fill:\"#54372A\",transform:\"translate(182,521)\"})),_path2547||(_path2547=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.94727588 -0.17942163 6.5980513 -0.09350689 10 2 C10 2.66 10 3.32 10 4 C6.39703406 4.41176754 5.21597933 4.1535853 2.1875 2 C1.465625 1.34 0.74375 0.68 0 0 Z \",fill:\"#EE5562\",transform:\"translate(263,500)\"})),_path2548||(_path2548=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.66 0.66 -1.32 1.32 -2 2 C-4.6015625 1.9765625 -4.6015625 1.9765625 -7.625 1.625 C-8.62789062 1.51414062 -9.63078125 1.40328125 -10.6640625 1.2890625 C-11.82035156 1.14597656 -11.82035156 1.14597656 -13 1 C-13 0.67 -13 0.34 -13 0 C-8.38926889 -1.29676812 -4.66159911 -0.71109139 0 0 Z \",fill:\"#A05E59\",transform:\"translate(225,500)\"})),_path2549||(_path2549=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.33 0.66 -0.66 1.32 -1 2 C-2.010625 1.938125 -3.02125 1.87625 -4.0625 1.8125 C-8.55499372 2.02642827 -11.01085961 3.04613532 -15 5 C-14 2 -14 2 -12 0.8125 C-7.96195446 -0.28113733 -4.15684292 -0.16301345 0 0 Z \",fill:\"#883032\",transform:\"translate(262,494)\"})),_path2550||(_path2550=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.24822374 0.47202486 6.19989709 2.96655518 9 6 C4.9666466 6 3.16482462 4.39120082 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#6B442A\",transform:\"translate(537,482)\"})),_path2551||(_path2551=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C5 0.99 5 1.98 5 3 C0.545 3.495 0.545 3.495 -4 4 C-2.68 3.34 -1.36 2.68 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#FADFC9\",transform:\"translate(408,478)\"})),_path2552||(_path2552=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.90105469 0.01804687 1.80210937 0.03609375 2.73046875 0.0546875 C3.41753906 0.07789063 4.10460937 0.10109375 4.8125 0.125 C3.4925 0.455 2.1725 0.785 0.8125 1.125 C0.8125 1.785 0.8125 2.445 0.8125 3.125 C-2.1575 2.795 -5.1275 2.465 -8.1875 2.125 C-4.87379 -0.08414 -3.8428979 -0.09981553 0 0 Z \",fill:\"#280503\",transform:\"translate(179.1875,476.875)\"})),_path2553||(_path2553=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 3.96 1 7.92 1 12 C1.66 12 2.32 12 3 12 C3.33 13.32 3.66 14.64 4 16 C2.68 15.67 1.36 15.34 0 15 C0 10.05 0 5.1 0 0 Z \",fill:\"#584336\",transform:\"translate(477,463)\"})),_path2554||(_path2554=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.48305042 0.64500934 6.06202164 2.04134776 9 4 C9 4.33 9 4.66 9 5 C6.1875 5.3125 6.1875 5.3125 3 5 C1.125 2.5 1.125 2.5 0 0 Z \",fill:\"#754D3B\",transform:\"translate(595,473)\"})),_path2555||(_path2555=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C2.34 1 1.68 1 1 1 C1 4.63 1 8.26 1 12 C-1 8 -1 8 -1 6 C-2.32 5.67 -3.64 5.34 -5 5 C-3.35 4.67 -1.7 4.34 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#E85047\",transform:\"translate(326,464)\"})),_path2556||(_path2556=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.95 0 9.9 0 15 0 C13.68 0.33 12.36 0.66 11 1 C10.67 1.99 10.34 2.98 10 4 C9.34 4 8.68 4 8 4 C8 3.01 8 2.02 8 1 C5.36 1 2.72 1 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#F6AB92\",transform:\"translate(389,465)\"})),_path2557||(_path2557=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 2.64 2 5.28 2 8 C0.68 8 -0.64 8 -2 8 C-2 4 -2 4 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#851728\",transform:\"translate(298,454)\"})),_path2558||(_path2558=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0 5.28 0 8 0 C8 0.99 8 1.98 8 3 C5.36 3 2.72 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#72524E\",transform:\"translate(194,454)\"})),_path2559||(_path2559=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.63 0 7.26 0 11 0 C11 0.66 11 1.32 11 2 C9.01432292 1.96744792 7.02864583 1.93489583 5.04296875 1.90234375 C2.79694539 1.91736783 2.79694539 1.91736783 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#C6968C\",transform:\"translate(308,446)\"})),_path2560||(_path2560=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.495 0.99 0.495 2 1 C1.67 1.66 1.34 2.32 1 3 C1.8971875 3.1546875 1.8971875 3.1546875 2.8125 3.3125 C5.28243264 4.08876455 6.32251235 5.07088921 8 7 C2.25 7.125 2.25 7.125 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#991025\",transform:\"translate(308,438)\"})),_path2561||(_path2561=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3 1.98 3 3.96 3 6 C3.66 6 4.32 6 5 6 C4.67 7.32 4.34 8.64 4 10 C4 9.34 4 8.68 4 8 C3.01 8 2.02 8 1 8 C0.67 5.36 0.34 2.72 0 0 Z \",fill:\"#721B27\",transform:\"translate(295,396)\"})),_path2562||(_path2562=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 1.98 2 3.96 2 6 C0.35 6 -1.3 6 -3 6 C-2.67 4.68 -2.34 3.36 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#232528\",transform:\"translate(280,386)\"})),_path2563||(_path2563=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 1.98 1 3.96 1 6 C0.34 6 -0.32 6 -1 6 C-1.33 7.32 -1.66 8.64 -2 10 C-2.66 9.01 -3.32 8.02 -4 7 C-3.67 6.01 -3.34 5.02 -3 4 C-2.34 4 -1.68 4 -1 4 C-0.67 2.68 -0.34 1.36 0 0 Z \",fill:\"#F75C21\",transform:\"translate(105,380)\"})),_path2564||(_path2564=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0 3.96 0 6 0 C6 2 6 2 4.125 4.125 C2 6 2 6 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#42010B\",transform:\"translate(400,384)\"})),_path2565||(_path2565=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.33 1.65 -0.66 3.3 -1 5 C-1.33 4.34 -1.66 3.68 -2 3 C-4.31 3 -6.62 3 -9 3 C-7.14340032 -0.71319936 -3.69365381 -0.09982848 0 0 Z \",fill:\"#EFDA98\",transform:\"translate(105,379)\"})),_path2566||(_path2566=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0 5.28 0 8 0 C7.01 1.485 7.01 1.485 6 3 C5.01 3 4.02 3 3 3 C3 5.31 3 7.62 3 10 C2.67 10 2.34 10 2 10 C2.06510417 7.98177083 2.13020833 5.96354167 2.1953125 3.9453125 C2.18331689 1.76136355 2.18331689 1.76136355 0 0 Z \",fill:\"#C2BC82\",transform:\"translate(446,375)\"})),_path2567||(_path2567=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 3.3 1 6.6 1 10 C2.32 9.67 3.64 9.34 5 9 C5.33 9.99 5.66 10.98 6 12 C4.02 12 2.04 12 0 12 C0 8.04 0 4.08 0 0 Z \",fill:\"#21090D\",transform:\"translate(214,368)\"})),_path2568||(_path2568=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.3 0 6.6 0 10 0 C8.68 0.33 7.36 0.66 6 1 C6 1.66 6 2.32 6 3 C4.68 3.33 3.36 3.66 2 4 C1.34 2.68 0.68 1.36 0 0 Z \",fill:\"#EEA895\",transform:\"translate(398,367)\"})),_path2569||(_path2569=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.66 2 1.32 2 2 C2.66 2.33 3.32 2.66 4 3 C2.50260417 4.23697917 1.00520833 5.47395833 -0.4921875 6.7109375 C-1.71051161 7.75250992 -2.86660097 8.86660097 -4 10 C-4.33 8.68 -4.66 7.36 -5 6 C-4.360625 5.7525 -3.72125 5.505 -3.0625 5.25 C-0.81258459 4.18437567 -0.81258459 4.18437567 -0.25 1.875 C-0.1675 1.25625 -0.085 0.6375 0 0 Z \",fill:\"#F79D69\",transform:\"translate(112,362)\"})),_path2570||(_path2570=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4.33 1.98 4.66 3.96 5 6 C3.35 6 1.7 6 0 6 C0 4 0 2 0 0 Z \",fill:\"#DAD15A\",transform:\"translate(524,356)\"})),_path2571||(_path2571=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 1.32 3.3 2.64 5 4 C4.67 4.99 4.34 5.98 4 7 C1.96166576 5.7260411 -0.03852126 4.38938077 -2 3 C-2 2.34 -2 1.68 -2 1 C-1.34 0.67 -0.68 0.34 0 0 Z \",fill:\"#DAAE99\",transform:\"translate(403,353)\"})),_path2572||(_path2572=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3 1.65 3 3.3 3 5 C1.02 5 -0.96 5 -3 5 C-2 2 -2 2 0 0 Z \",fill:\"#A71F0E\",transform:\"translate(141,344)\"})),_path2573||(_path2573=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0 5.94 0 9 0 C9 0.66 9 1.32 9 2 C10.98 2 12.96 2 15 2 C15 2.33 15 2.66 15 3 C11.7 3 8.4 3 5 3 C5 2.34 5 1.68 5 1 C3.35 1 1.7 1 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#A39458\",transform:\"translate(434,345)\"})),_path2574||(_path2574=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.66 2.64 1.32 4 2 C4 2.99 4 3.98 4 5 C2.02 5 0.04 5 -2 5 C-2 4.01 -2 3.02 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#435447\",transform:\"translate(68,346)\"})),_path2575||(_path2575=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3.33 0.99 3.66 1.98 4 3 C5.99665314 4.68538601 5.99665314 4.68538601 8 6 C6.35 6.33 4.7 6.66 3 7 C0 3.375 0 3.375 0 0 Z \",fill:\"#282726\",transform:\"translate(521,341)\"})),_path2576||(_path2576=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C1.42415568 2.38564077 0.77772405 4.66682784 0 7 C-0.99 7 -1.98 7 -3 7 C-3.33 7.66 -3.66 8.32 -4 9 C-3.4739075 5.21213403 -2.61896089 2.82847776 0 0 Z \",fill:\"#050D0F\",transform:\"translate(24,329)\"})),_path2577||(_path2577=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.33 0.66 -0.66 1.32 -1 2 C-1.66 1.67 -2.32 1.34 -3 1 C-3 1.66 -3 2.32 -3 3 C-6.96 2.67 -10.92 2.34 -15 2 C-15 1.67 -15 1.34 -15 1 C-9.92928099 0.28832014 -5.11791642 -0.10662326 0 0 Z \",fill:\"#482E24\",transform:\"translate(23,330)\"})),_path2578||(_path2578=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 1.32 1.98 2.64 3 4 C1.1875 5.0625 1.1875 5.0625 -1 6 C-1.99 5.67 -2.98 5.34 -4 5 C-3.34 5 -2.68 5 -2 5 C-2 4.34 -2 3.68 -2 3 C-3.98 3 -5.96 3 -8 3 C-8 2.67 -8 2.34 -8 2 C-6.865625 1.855625 -5.73125 1.71125 -4.5625 1.5625 C-1.19222799 1.38828522 -1.19222799 1.38828522 0 0 Z \",fill:\"#170C08\",transform:\"translate(219,326)\"})),_path2579||(_path2579=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3 3.3 3 6.6 3 10 C2.34 10 1.68 10 1 10 C-0.60725635 6.78548731 -0.05748185 3.56387464 0 0 Z \",fill:\"#B6B977\",transform:\"translate(582,326)\"})),_path2580||(_path2580=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 1.65 1 3.3 1 5 C-2.3 4.67 -5.6 4.34 -9 4 C-6.22569089 2.15046059 -4.35957737 1 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#7AA16C\",transform:\"translate(504,322)\"})),_path2581||(_path2581=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.99 0 1.98 0 3 C-3.63 2.67 -7.26 2.34 -11 2 C-6.78370866 -0.10814567 -4.60209225 -0.17700355 0 0 Z \",fill:\"#935F43\",transform:\"translate(626,324)\"})),_path2582||(_path2582=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C3.32229189 2.64458379 3.09677194 4.67761301 3.0625 7.625 C3.05347656 8.62789063 3.04445313 9.63078125 3.03515625 10.6640625 C3.02355469 11.43492187 3.01195312 12.20578125 3 13 C1.32889958 10.03821227 0.67317248 7.62928808 0.375 4.25 C0.30023438 3.45078125 0.22546875 2.6515625 0.1484375 1.828125 C0.09945313 1.22484375 0.05046875 0.6215625 0 0 Z \",fill:\"#984014\",transform:\"translate(369,317)\"})),_path2583||(_path2583=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4 0.66 4 1.32 4 2 C4.66 2 5.32 2 6 2 C6 2.66 6 3.32 6 4 C4.35 4.33 2.7 4.66 1 5 C0.67 3.35 0.34 1.7 0 0 Z \",fill:\"#F08445\",transform:\"translate(178,312)\"})),_path2584||(_path2584=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2 2.32 2 3.64 2 5 C2.66 5.33 3.32 5.66 4 6 C2.02 6 0.04 6 -2 6 C-2 4.35 -2 2.7 -2 1 C-1.34 0.67 -0.68 0.34 0 0 Z \",fill:\"#A60824\",transform:\"translate(476,304)\"})),_path2585||(_path2585=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3 3.31 3 5.62 3 8 C2.01 8.33 1.02 8.66 0 9 C0 6.03 0 3.06 0 0 Z \",fill:\"#112F1B\",transform:\"translate(393,299)\"})),_path2586||(_path2586=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3 3.64 3 6.28 3 9 C2.34 9 1.68 9 1 9 C0.67 6.03 0.34 3.06 0 0 Z \",fill:\"#DCC48C\",transform:\"translate(238,298)\"})),_path2587||(_path2587=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.875 1.5 1.875 1.5 3 3 C1.741875 3.04125 0.48375 3.0825 -0.8125 3.125 C-1.52019531 3.14820313 -2.22789062 3.17140625 -2.95703125 3.1953125 C-5 3 -5 3 -8 1 C-5.20129973 -0.39935013 -3.09501208 -0.25265405 0 0 Z \",fill:\"#A77D60\",transform:\"translate(490,298)\"})),_path2588||(_path2588=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.66 1.98 1.32 3 2 C2.67 3.65 2.34 5.3 2 7 C-0.97 6.505 -0.97 6.505 -4 6 C-3.34 5.01 -2.68 4.02 -2 3 C-1.34 3 -0.68 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#0A2F18\",transform:\"translate(452,295)\"})),_path2589||(_path2589=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0 5.28 0 8 0 C7.67 1.32 7.34 2.64 7 4 C6.67 3.01 6.34 2.02 6 1 C5.67 1.66 5.34 2.32 5 3 C2.4375 3.625 2.4375 3.625 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#C76B48\",transform:\"translate(159,275)\"})),_path2590||(_path2590=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C7.75 -0.125 7.75 -0.125 10 1 C10 1.66 10 2.32 10 3 C6.7 2.67 3.4 2.34 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#3E4138\",transform:\"translate(362,273)\"})),_path2591||(_path2591=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3 1.32 3 2.64 3 4 C3.2981424 5.34164079 3.62243192 6.67851173 4 8 C2.68 8 1.36 8 0 8 C-0.38063221 5.6739143 -0.71269945 3.33944736 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#E48E81\",transform:\"translate(163,259)\"})),_path2592||(_path2592=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 2 2 2 2.125 4.625 C2.08375 5.40875 2.0425 6.1925 2 7 C0.35 7 -1.3 7 -3 7 C-2.34 6.34 -1.68 5.68 -1 5 C-1.66 4.01 -2.32 3.02 -3 2 C-2.01 1.34 -1.02 0.68 0 0 Z \",fill:\"#B28B6A\",transform:\"translate(98,263)\"})),_path2593||(_path2593=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C2.65 2 4.3 2 6 2 C6 2.99 6 3.98 6 5 C2.28111761 4.49287967 -0.73454239 3.88391785 -4 2 C-2.68 1.34 -1.36 0.68 0 0 Z \",fill:\"#DAAF8A\",transform:\"translate(256,254)\"})),_path2594||(_path2594=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0.495 1.98 0.495 4 1 C3.01 1.495 3.01 1.495 2 2 C2.33 3.98 2.66 5.96 3 8 C2.01 8 1.02 8 0 8 C-0.98120464 4.94736336 -0.98120464 3.05263664 0 0 Z \",fill:\"#BE7153\",transform:\"translate(49,250)\"})),_path2595||(_path2595=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0 3.96 0 6 0 C5.67 1.32 5.34 2.64 5 4 C5 3.01 5 2.02 5 1 C4.34 1 3.68 1 3 1 C2.67 2.32 2.34 3.64 2 5 C1.01 5 0.02 5 -1 5 C-1.33 4.01 -1.66 3.02 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#633A2B\",transform:\"translate(178,248)\"})),_path2596||(_path2596=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.63 0 7.26 0 11 0 C8.09907498 1.93395001 7.10325263 2.30131941 3.8125 2.625 C2.554375 2.74875 1.29625 2.8725 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#908A7B\",transform:\"translate(344,245)\"})),_path2597||(_path2597=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C1.67 1.32 1.34 2.64 1 4 C-3.62 4 -8.24 4 -13 4 C-13 3.67 -13 3.34 -13 3 C-8.6835078 2.23826608 -5.25566547 1.83936396 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#573D37\",transform:\"translate(150,244)\"})),_path2598||(_path2598=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C-3.14285714 6.57142857 -3.14285714 6.57142857 -7 7 C-7.33 6.34 -7.66 5.68 -8 5 C-6.71475739 4.13619741 -5.42157581 3.28419631 -4.125 2.4375 C-3.04605469 1.72400391 -3.04605469 1.72400391 -1.9453125 0.99609375 C-1.30335938 0.66738281 -0.66140625 0.33867187 0 0 Z \",fill:\"#825945\",transform:\"translate(365,211)\"})),_path2599||(_path2599=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-1.24420647 2.5345256 -2.49570936 3.05208611 -3.75 3.5625 C-4.44609375 3.85253906 -5.1421875 4.14257812 -5.859375 4.44140625 C-8.30012784 5.07831803 -9.6403655 4.80248831 -12 4 C-10.75539217 3.32332002 -9.50403104 2.65905281 -8.25 2 C-7.55390625 1.62875 -6.8578125 1.2575 -6.140625 0.875 C-4 0 -4 0 0 0 Z \",fill:\"#271916\",transform:\"translate(456,209)\"})),_path2600||(_path2600=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.33 0 0.66 0 1 C-4.873261 2.5912689 -8.80790596 3.21192221 -14 3 C-11.39395012 1.26263341 -9.92766764 0.54996173 -7 -0.1875 C-6.319375 -0.36667969 -5.63875 -0.54585937 -4.9375 -0.73046875 C-3 -1 -3 -1 0 0 Z \",fill:\"#34463D\",transform:\"translate(536,205)\"})),_path2601||(_path2601=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.59937954 2.46941056 4.79020692 5.18060883 7 8 C6.01 8.66 5.02 9.32 4 10 C3.566875 9.05125 3.13375 8.1025 2.6875 7.125 C1.20697799 3.79958063 1.20697799 3.79958063 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#41281E\",transform:\"translate(62,154)\"})),_path2602||(_path2602=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C-2.96 4.98 -2.96 4.98 -7 7 C-7.33 6.34 -7.66 5.68 -8 5 C-5.64722731 2.27573689 -3.37503669 1.1858237 0 0 Z \",fill:\"#564C3C\",transform:\"translate(545,138)\"})),_path2603||(_path2603=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C3.01669827 3.13350534 3.01669827 3.13350534 5 4 C4.01 4 3.02 4 2 4 C1.67 5.98 1.34 7.96 1 10 C0.34 10 -0.32 10 -1 10 C-1.125 2.25 -1.125 2.25 0 0 Z \",fill:\"#9C7A56\",transform:\"translate(186,140)\"})),_path2604||(_path2604=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.465 1.485 3.465 1.485 7 3 C7 3.66 7 4.32 7 5 C5.35 5.33 3.7 5.66 2 6 C0 3 0 3 0 0 Z \",fill:\"#DFA879\",transform:\"translate(0,138)\"})),_path2605||(_path2605=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.455 2.97 4.455 2.97 9 6 C8.01 6.66 7.02 7.32 6 8 C3.69 6.35 1.38 4.7 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#CDAF7D\",transform:\"translate(90,115)\"})),_path2606||(_path2606=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C0.71372289 2.17260611 -0.57919783 3.3379283 -1.875 4.5 C-2.59429687 5.1496875 -3.31359375 5.799375 -4.0546875 6.46875 C-6 8 -6 8 -8 8 C-6.49776416 3.79373966 -3.71449966 2.26099979 0 0 Z \",fill:\"#41231F\",transform:\"translate(475,112)\"})),_path2607||(_path2607=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C2.98 2 4.96 2 7 2 C6.67 2.66 6.34 3.32 6 4 C2.65506316 4.99444068 0.31044803 5.10348268 -3 4 C-3 3.34 -3 2.68 -3 2 C-2.01 2 -1.02 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#73583D\",transform:\"translate(451,67)\"})),_path2608||(_path2608=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.66 2.64 1.32 4 2 C3.67 2.66 3.34 3.32 3 4 C2.34 4 1.68 4 1 4 C0.67 7.3 0.34 10.6 0 14 C-0.33 14 -0.66 14 -1 14 C-1.02694851 12.04174127 -1.04637218 10.08337774 -1.0625 8.125 C-1.07410156 7.03445312 -1.08570312 5.94390625 -1.09765625 4.8203125 C-1 2 -1 2 0 0 Z \",fill:\"#513525\",transform:\"translate(103,17)\"})),_path2609||(_path2609=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C1.66 3 2.32 3 3 3 C3.33 4.98 3.66 6.96 4 9 C1 8 1 8 -0.25 5.625 C-1 3 -1 3 0 0 Z \",fill:\"#9A6B4F\",transform:\"translate(458,549)\"})),_path2610||(_path2610=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C-0.32 3.65 -1.64 5.3 -3 7 C-4.32 6.67 -5.64 6.34 -7 6 C-3.375 1.125 -3.375 1.125 0 0 Z \",fill:\"#A77759\",transform:\"translate(122,542)\"})),_path2611||(_path2611=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.144375 0.598125 0.28875 1.19625 0.4375 1.8125 C0.8872439 3.56150404 1.42892341 5.28677023 2 7 C1.01 8.485 1.01 8.485 0 10 C-0.99 9.67 -1.98 9.34 -3 9 C-2.67 7.02 -2.34 5.04 -2 3 C-1.34 3 -0.68 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#372520\",transform:\"translate(184,525)\"})),_path2612||(_path2612=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.721875 0.61875 1.44375 1.2375 2.1875 1.875 C4.78381938 3.83666353 6.94671666 4.95316 10 6 C9.67 6.99 9.34 7.98 9 9 C7.68103535 8.07161713 6.37001311 7.13194268 5.0625 6.1875 C4.33160156 5.66542969 3.60070312 5.14335938 2.84765625 4.60546875 C1 3 1 3 0 0 Z \",fill:\"#754C37\",transform:\"translate(557,521)\"})),_path2613||(_path2613=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.7824349 1.39121745 3.55210065 3.30164212 5 6 C5 6.66 5 7.32 5 8 C4.34 8 3.68 8 3 8 C2.67 8.66 2.34 9.32 2 10 C1 7 0 4 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#50332A\",transform:\"translate(401,522)\"})),_path2614||(_path2614=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.66 1.32 -1.32 2.64 -2 4 C-2.66 3.67 -3.32 3.34 -4 3 C-4 2.34 -4 1.68 -4 1 C-5.65 2.32 -7.3 3.64 -9 5 C-9 3.68 -9 2.36 -9 1 C-6.04335481 -0.4783226 -3.25770263 -0.06032783 0 0 Z \",fill:\"#432C27\",transform:\"translate(214,523)\"})),_path2615||(_path2615=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.33 2.64 0.66 4 1 C3.67 2.32 3.34 3.64 3 5 C-0.63 4.67 -4.26 4.34 -8 4 C-8 3.67 -8 3.34 -8 3 C-5.03 3 -2.06 3 1 3 C0.67 2.01 0.34 1.02 0 0 Z \",fill:\"#141210\",transform:\"translate(328,493)\"})),_path2616||(_path2616=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.4589426 0.47730838 2.91713496 0.95691042 4.375 1.4375 C5.18710937 1.70433594 5.99921875 1.97117187 6.8359375 2.24609375 C9 3 9 3 11 4 C11 4.66 11 5.32 11 6 C6.14922412 4.88059018 3.222107 3.8665284 0 0 Z \",fill:\"#4B2F22\",transform:\"translate(585,492)\"})),_path2617||(_path2617=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.3 0.33 6.6 0.66 10 1 C10 1.66 10 2.32 10 3 C7.36 3 4.72 3 2 3 C2 2.34 2 1.68 2 1 C1.34 0.67 0.68 0.34 0 0 Z \",fill:\"#7F1C29\",transform:\"translate(306,475)\"})),_path2618||(_path2618=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.33 2.64 0.66 4 1 C4 2.32 4 3.64 4 5 C0.7 4.67 -2.6 4.34 -6 4 C-6 3.67 -6 3.34 -6 3 C-4.02 2.67 -2.04 2.34 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#260706\",transform:\"translate(256,475)\"})),_path2619||(_path2619=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-3.3125 3.625 -3.3125 3.625 -7 5 C-7.99 4.34 -8.98 3.68 -10 3 C-6.71687741 1.24118433 -3.76143005 0 0 0 Z \",fill:\"#634332\",transform:\"translate(58,468)\"})),_path2620||(_path2620=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 1.65 2 3.3 2 5 C-1.82097239 4.46930939 -4.06171403 3.50298434 -7 1 C-4.69 1 -2.38 1 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#996449\",transform:\"translate(624,464)\"})),_path2621||(_path2621=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.66 1.32 1.32 2 2 C0.38007835 2.86375896 -1.24611861 3.71575854 -2.875 4.5625 C-4.23238281 5.27599609 -4.23238281 5.27599609 -5.6171875 6.00390625 C-6.40351563 6.33261719 -7.18984375 6.66132813 -8 7 C-8.66 6.67 -9.32 6.34 -10 6 C-6.74820188 3.78286492 -3.5786304 1.65167557 0 0 Z \",fill:\"#493127\",transform:\"translate(19,460)\"})),_path2622||(_path2622=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0 3.96 0 6 0 C6 1.98 6 3.96 6 6 C5.67 5.34 5.34 4.68 5 4 C4.01 4 3.02 4 2 4 C2 3.34 2 2.68 2 2 C1.34 2 0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#FD8E6A\",transform:\"translate(424,452)\"})),_path2623||(_path2623=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0.99 5.28 1.98 8 3 C7.67 3.99 7.34 4.98 7 6 C1.25 4.25 1.25 4.25 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#7A5039\",transform:\"translate(574,448)\"})),_path2624||(_path2624=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1.81817001 2.31459868 -2.75615543 2.95377187 -5.69921875 3.51171875 C-6.68535156 3.56972656 -7.67148438 3.62773437 -8.6875 3.6875 C-9.68136719 3.75324219 -10.67523438 3.81898438 -11.69921875 3.88671875 C-12.45847656 3.92410156 -13.21773438 3.96148437 -14 4 C-9.92203929 -0.38351396 -5.80155772 -0.13491995 0 0 Z \",fill:\"#533B30\",transform:\"translate(115,429)\"})),_path2625||(_path2625=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.2065625 0.0309375 1.2065625 0.0309375 2.4375 0.0625 C2.7675 1.3825 3.0975 2.7025 3.4375 4.0625 C1.0625 4.25 1.0625 4.25 -1.5625 4.0625 C-2.2225 3.0725 -2.8825 2.0825 -3.5625 1.0625 C-2.5625 0.0625 -2.5625 0.0625 0 0 Z \",fill:\"#1F3130\",transform:\"translate(270.5625,414.9375)\"})),_path2626||(_path2626=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0 5.94 0 9 0 C9 0.33 9 0.66 9 1 C7.02 1 5.04 1 3 1 C3 1.66 3 2.32 3 3 C3.66 3.33 4.32 3.66 5 4 C3.35 4 1.7 4 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#040E09\",transform:\"translate(529,405)\"})),_path2627||(_path2627=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.95 0.99 4.95 0.99 10 2 C10 3.32 10 4.64 10 6 C6.66666667 4.33333333 3.33333333 2.66666667 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#DFCD89\",transform:\"translate(462,390)\"})),_path2628||(_path2628=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.33 1.65 2.66 3.3 3 5 C1.35 5.66 -0.3 6.32 -2 7 C-2.33 5.02 -2.66 3.04 -3 1 C-2 1 -1 1 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#BFB4A0\",transform:\"translate(18,382)\"})),_path2629||(_path2629=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0 5.28 0 8 0 C7.01 0.33 6.02 0.66 5 1 C5 1.66 5 2.32 5 3 C4.34 3 3.68 3 3 3 C3 4.65 3 6.3 3 8 C1.58622659 5.36095629 0.62759865 2.92879371 0 0 Z \",fill:\"#7F8650\",transform:\"translate(192,376)\"})),_path2630||(_path2630=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.475 0.99 2.475 0.99 5 2 C4.67 3.98 4.34 5.96 4 8 C2.68 7.34 1.36 6.68 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#221517\",transform:\"translate(277,365)\"})),_path2631||(_path2631=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C1.99 2 2.98 2 4 2 C4 3.98 4 5.96 4 8 C3.01 8 2.02 8 1 8 C0.67 5.36 0.34 2.72 0 0 Z \",fill:\"#382F14\",transform:\"translate(202,360)\"})),_path2632||(_path2632=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3 0.66 3 1.32 3 2 C5.31 2.33 7.62 2.66 10 3 C9.01 4.485 9.01 4.485 8 6 C4.63408134 4.55746343 2.48952921 2.66735273 0 0 Z \",fill:\"#DC7A7F\",transform:\"translate(279,362)\"})),_path2633||(_path2633=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.16115776 1.36983503 3.9927092 1.9890638 6 5 C5.67 5.99 5.34 6.98 5 8 C4.7525 7.360625 4.505 6.72125 4.25 6.0625 C3.18437567 3.81258459 3.18437567 3.81258459 0.875 3.25 C-0.053125 3.12625 -0.053125 3.12625 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#DDC9BC\",transform:\"translate(407,359)\"})),_path2634||(_path2634=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.22589844 0.15275391 1.22589844 0.15275391 2.4765625 0.30859375 C3.41628906 0.43427734 3.41628906 0.43427734 4.375 0.5625 C4.375 1.2225 4.375 1.8825 4.375 2.5625 C3.116875 2.60375 1.85875 2.645 0.5625 2.6875 C-0.14519531 2.71070313 -0.85289062 2.73390625 -1.58203125 2.7578125 C-3.625 2.5625 -3.625 2.5625 -6.625 0.5625 C-4.10446405 -0.69776798 -2.7707902 -0.35624445 0 0 Z \",fill:\"#8F5A40\",transform:\"translate(621.625,357.4375)\"})),_path2635||(_path2635=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.66 2 1.32 2 2 C2.66 2.33 3.32 2.66 4 3 C2.07423885 5.43929746 0.19909405 7.80090595 -2 10 C-1.46274105 6.62294375 -0.88935377 3.303314 0 0 Z \",fill:\"#F65D43\",transform:\"translate(124,346)\"})),_path2636||(_path2636=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.66 2 1.32 2 2 C2.99 2.33 3.98 2.66 5 3 C2.11788698 3.96070434 0.30149956 4.10581883 -2.6875 4.0625 C-3.89986328 4.04896484 -3.89986328 4.04896484 -5.13671875 4.03515625 C-6.05904297 4.01775391 -6.05904297 4.01775391 -7 4 C-4 2 -4 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#430B12\",transform:\"translate(378,346)\"})),_path2637||(_path2637=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.02992782 0.55312735 8.02022924 1.1558062 12 2 C12 2.33 12 2.66 12 3 C10.37509046 3.02698189 8.75005367 3.04638757 7.125 3.0625 C5.76761719 3.07990234 5.76761719 3.07990234 4.3828125 3.09765625 C2 3 2 3 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#9A654B\",transform:\"translate(605,341)\"})),_path2638||(_path2638=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 1.98 2 3.96 2 6 C-1 7 -1 7 -3.1875 6.0625 C-3.785625 5.711875 -4.38375 5.36125 -5 5 C-4.67 4.34 -4.34 3.68 -4 3 C-2.02 3.495 -2.02 3.495 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#FB5634\",transform:\"translate(326,330)\"})),_path2639||(_path2639=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.66 1.32 -1.32 2.64 -2 4 C-6.455 3.01 -6.455 3.01 -11 2 C-11 1.67 -11 1.34 -11 1 C-9.54182203 0.83197949 -8.0834516 0.66562857 -6.625 0.5 C-5.81289063 0.4071875 -5.00078125 0.314375 -4.1640625 0.21875 C-2 0 -2 0 0 0 Z \",fill:\"#93694C\",transform:\"translate(295,327)\"})),_path2640||(_path2640=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2 2.65 2 4.3 2 6 C-1.63 6 -5.26 6 -9 6 C-9 5.67 -9 5.34 -9 5 C-6.03 5 -3.06 5 0 5 C-0.33 3.68 -0.66 2.36 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#AFC992\",transform:\"translate(541,322)\"})),_path2641||(_path2641=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.3 0.33 6.6 0.66 10 1 C10 1.66 10 2.32 10 3 C6.7 2.67 3.4 2.34 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#93624A\",transform:\"translate(570,319)\"})),_path2642||(_path2642=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.37702633 1.22556737 8.69677317 2.53060547 13 4 C12.67 4.66 12.34 5.32 12 6 C9.36 5.34 6.72 4.68 4 4 C4 3.34 4 2.68 4 2 C2.68 1.67 1.36 1.34 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#6C7644\",transform:\"translate(383,317)\"})),_path2643||(_path2643=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0 4.62 0 7 0 C6.67 0.99 6.34 1.98 6 3 C3.69 3 1.38 3 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#F7B3C0\",transform:\"translate(202,319)\"})),_path2644||(_path2644=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.875 0.3125 2.875 0.3125 6 1 C6.66 1.99 7.32 2.98 8 4 C5.36 4 2.72 4 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#10C55A\",transform:\"translate(396,300)\"})),_path2645||(_path2645=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0 5.94 0 9 0 C9 0.33 9 0.66 9 1 C6.69 1.66 4.38 2.32 2 3 C1.67 4.65 1.34 6.3 1 8 C0.67 8 0.34 8 0 8 C0 5.36 0 2.72 0 0 Z \",fill:\"#8D6B58\",transform:\"translate(206,286)\"})),_path2646||(_path2646=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 3.3 2 6.6 2 10 C1.01 10 0.02 10 -1 10 C-1.02689216 8.52093108 -1.04634621 7.04172517 -1.0625 5.5625 C-1.07410156 4.73878906 -1.08570313 3.91507812 -1.09765625 3.06640625 C-1 1 -1 1 0 0 Z \",fill:\"#2E110A\",transform:\"translate(605,258)\"})),_path2647||(_path2647=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 1.98 0 3.96 0 6 C-0.99 6 -1.98 6 -3 6 C-5 4 -5 4 -6 2 C-2.25 0 -2.25 0 0 0 Z \",fill:\"#6E4738\",transform:\"translate(30,252)\"})),_path2648||(_path2648=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C3.35439668 2.70879335 3.06501451 5.00933268 3 8 C2.34 7.01 1.68 6.02 1 5 C0.01 5.495 0.01 5.495 -1 6 C-1 5.34 -1 4.68 -1 4 C-1.66 3.67 -2.32 3.34 -3 3 C-2.34 3 -1.68 3 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#583B2B\",transform:\"translate(70,254)\"})),_path2649||(_path2649=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.66 1.98 3.32 3.96 4 6 C3.34 6.66 2.68 7.32 2 8 C1.67 7.34 1.34 6.68 1 6 C0.34 6.99 -0.32 7.98 -1 9 C-1.09765625 2.84765625 -1.09765625 2.84765625 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#A0694D\",transform:\"translate(94,250)\"})),_path2650||(_path2650=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-5.93609666 2.89316269 -11.06975197 2.97040422 -17 2 C-17 1.67 -17 1.34 -17 1 C-11.29014022 0.25983299 -5.75813575 -0.10469338 0 0 Z \",fill:\"#562C27\",transform:\"translate(433,245)\"})),_path2651||(_path2651=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 1.32 0 2.64 0 4 C-2.64 4 -5.28 4 -8 4 C-8 3.34 -8 2.68 -8 2 C-2.25 0 -2.25 0 0 0 Z \",fill:\"#4A3F39\",transform:\"translate(140,242)\"})),_path2652||(_path2652=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C-2.96 2 -6.92 2 -11 2 C-7.13288408 -0.57807728 -4.48091374 -1.69965693 0 0 Z \",fill:\"#535F52\",transform:\"translate(400,242)\"})),_path2653||(_path2653=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C9.59453303 1.74259681 9.59453303 1.74259681 13 5 C12.01 5.33 11.02 5.66 10 6 C9.34 5.67 8.68 5.34 8 5 C8 4.34 8 3.68 8 3 C7.236875 3.061875 6.47375 3.12375 5.6875 3.1875 C2.51219194 2.96596688 2.04264341 2.28224968 0 0 Z \",fill:\"#27140B\",transform:\"translate(142,215)\"})),_path2654||(_path2654=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.99 1.485 -0.99 1.485 -2 3 C-4.1640625 3.29296875 -4.1640625 3.29296875 -6.625 3.1875 C-7.44226563 3.16042969 -8.25953125 3.13335937 -9.1015625 3.10546875 C-10.04128906 3.05326172 -10.04128906 3.05326172 -11 3 C-7.70039114 0.18922208 -4.22288017 -2.11144009 0 0 Z \",fill:\"#3D352C\",transform:\"translate(439,189)\"})),_path2655||(_path2655=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.66 1.98 1.32 3 2 C2.01 3.485 2.01 3.485 1 5 C-2.125 5.1875 -2.125 5.1875 -5 5 C-3.35 3.35 -1.7 1.7 0 0 Z \",fill:\"#4F342A\",transform:\"translate(405,165)\"})),_path2656||(_path2656=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.66 2 1.32 2 2 C2.66 2 3.32 2 4 2 C4 3.32 4 4.64 4 6 C2.68 6.33 1.36 6.66 0 7 C0 4.69 0 2.38 0 0 Z \",fill:\"#A7A67F\",transform:\"translate(370,166)\"})),_path2657||(_path2657=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C0.55527654 4.80881639 -1.32603071 6.29742886 -5 8 C-5.99 7.67 -6.98 7.34 -8 7 C-5.36 4.69 -2.72 2.38 0 0 Z \",fill:\"#271511\",transform:\"translate(442,139)\"})),_path2658||(_path2658=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1.8125 2 -1.8125 2 -4 4 C-4.99 4 -5.98 4 -7 4 C-7.33 2.68 -7.66 1.36 -8 0 C-4.71303767 -0.79953138 -3.28976808 -1.09658936 0 0 Z \",fill:\"#341B17\",transform:\"translate(503,94)\"})),_path2659||(_path2659=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C-0.21484375 4.3828125 -0.21484375 4.3828125 -1.9375 7.125 C-2.50339844 8.03507813 -3.06929688 8.94515625 -3.65234375 9.8828125 C-4.09707031 10.58148437 -4.54179688 11.28015625 -5 12 C-5.33 11.34 -5.66 10.68 -6 10 C-5.29296875 8.125 -5.29296875 8.125 -4.1875 6 C-3.83042969 5.29875 -3.47335938 4.5975 -3.10546875 3.875 C-2 2 -2 2 0 0 Z \",fill:\"#452B23\",transform:\"translate(114,591)\"})),_path2660||(_path2660=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.12375 0.639375 0.2475 1.27875 0.375 1.9375 C0.684375 2.9584375 0.684375 2.9584375 1 4 C1.66 4.33 2.32 4.66 3 5 C0.84365964 7.15634036 -1.37098712 8.47793991 -4 10 C-3.52449439 8.51965236 -3.04448784 7.04074979 -2.5625 5.5625 C-2.29566406 4.73878906 -2.02882812 3.91507813 -1.75390625 3.06640625 C-1 1 -1 1 0 0 Z \",fill:\"#6A4535\",transform:\"translate(146,554)\"})),_path2661||(_path2661=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0.99 5.94 1.98 9 3 C9 4.32 9 5.64 9 7 C5.18315774 5.44499019 2.80804268 2.96404505 0 0 Z \",fill:\"#DCB88F\",transform:\"translate(610,536)\"})),_path2662||(_path2662=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C5 2.97 5 5.94 5 9 C4.67 9 4.34 9 4 9 C4 7.02 4 5.04 4 3 C2.68 3 1.36 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#FBE3C0\",transform:\"translate(296,531)\"})),_path2663||(_path2663=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C0.01 3.33 -0.98 3.66 -2 4 C-2.309375 4.639375 -2.61875 5.27875 -2.9375 5.9375 C-4.2342338 8.45468915 -5.4221737 8.96886948 -8 10 C-7.21654285 8.82780457 -6.42297164 7.66236332 -5.625 6.5 C-5.18414062 5.8503125 -4.74328125 5.200625 -4.2890625 4.53125 C-3.86367187 4.0259375 -3.43828125 3.520625 -3 3 C-2.34 3 -1.68 3 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#5F3E32\",transform:\"translate(88,531)\"})),_path2664||(_path2664=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3 0.66 3 1.32 3 2 C2.34 2 1.68 2 1 2 C1 4.31 1 6.62 1 9 C0.34 9 -0.32 9 -1 9 C-1.09765625 2.84765625 -1.09765625 2.84765625 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#7B4B3C\",transform:\"translate(240,526)\"})),_path2665||(_path2665=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.1725131 0.95117134 2.33787015 1.91117009 3.5 2.875 C4.47453125 3.67550781 4.47453125 3.67550781 5.46875 4.4921875 C6.22671875 5.23855469 6.22671875 5.23855469 7 6 C7 6.66 7 7.32 7 8 C2.58110387 6.64978174 0.65654657 4.73884332 -2 1 C-1.34 0.67 -0.68 0.34 0 0 Z \",fill:\"#744C38\",transform:\"translate(575,529)\"})),_path2666||(_path2666=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.45606519 4.52092968 0.27032841 7.51648796 -1 12 C-1.33 12 -1.66 12 -2 12 C-2 8.7 -2 5.4 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#6C4132\",transform:\"translate(243,526)\"})),_path2667||(_path2667=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C-0.1875 5.0625 -0.1875 5.0625 -2 8 C-4.1875 8.875 -4.1875 8.875 -6 9 C-4.47291037 5.56404834 -2.40072955 2.88087546 0 0 Z \",fill:\"#6A4432\",transform:\"translate(151,526)\"})),_path2668||(_path2668=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3 1.66 3 2.32 3 3 C-0.46153846 6 -0.46153846 6 -3 6 C-2.625 3.5625 -2.625 3.5625 -2 1 C-1.34 0.67 -0.68 0.34 0 0 Z \",fill:\"#3A2520\",transform:\"translate(3,529)\"})),_path2669||(_path2669=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.3 0 6.6 0 10 0 C10.66 1.32 11.32 2.64 12 4 C10.68 4.33 9.36 4.66 8 5 C8.33 3.68 8.66 2.36 9 1 C6.03 1 3.06 1 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#3C251C\",transform:\"translate(177,520)\"})),_path2670||(_path2670=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.33 2.31 2.66 4.62 3 7 C1.68 7 0.36 7 -1 7 C-1.04254356 5.00045254 -1.04080783 2.99958364 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#595448\",transform:\"translate(353,518)\"})),_path2671||(_path2671=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.475 0.495 2.475 0.495 5 1 C5 2.32 5 3.64 5 5 C3.35 5 1.7 5 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#9F6E47\",transform:\"translate(331,493)\"})),_path2672||(_path2672=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.2065625 0.0309375 1.2065625 0.0309375 2.4375 0.0625 C2.4375 0.7225 2.4375 1.3825 2.4375 2.0625 C3.0975 2.3925 3.7575 2.7225 4.4375 3.0625 C-0.0175 3.5575 -0.0175 3.5575 -4.5625 4.0625 C-3.23463115 0.07889344 -3.23463115 0.07889344 0 0 Z \",fill:\"#512E22\",transform:\"translate(309.5625,470.9375)\"})),_path2673||(_path2673=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.75 1.875 4.75 1.875 7 3 C7 3.66 7 4.32 7 5 C4.625 5.625 4.625 5.625 2 6 C1.34 5.34 0.68 4.68 0 4 C0.66 4 1.32 4 2 4 C1.34 2.68 0.68 1.36 0 0 Z \",fill:\"#5E4238\",transform:\"translate(558,471)\"})),_path2674||(_path2674=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C3.31 1.34 5.62 0.68 8 0 C8.33 0.99 8.66 1.98 9 3 C5.7 3.33 2.4 3.66 -1 4 C-0.67 2.68 -0.34 1.36 0 0 Z \",fill:\"#461A1D\",transform:\"translate(365,465)\"})),_path2675||(_path2675=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.62 0 9.24 0 14 0 C14 0.33 14 0.66 14 1 C9.05 1.66 4.1 2.32 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#642325\",transform:\"translate(286,462)\"})),_path2676||(_path2676=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1.6875 2.0625 -1.6875 2.0625 -4 4 C-6.75 3.75 -6.75 3.75 -9 3 C-9 2.34 -9 1.68 -9 1 C-5.92677456 0.08941469 -3.19902639 -0.08886184 0 0 Z \",fill:\"#8A503F\",transform:\"translate(375,455)\"})),_path2677||(_path2677=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.48285242 0.95262034 2.96118201 1.91228405 4.4375 2.875 C5.67306641 3.67550781 5.67306641 3.67550781 6.93359375 4.4921875 C9 6 9 6 10 8 C8.35 7.67 6.7 7.34 5 7 C5 6.34 5 5.68 5 5 C4.360625 4.731875 3.72125 4.46375 3.0625 4.1875 C1 3 1 3 0 0 Z \",fill:\"#795434\",transform:\"translate(499,451)\"})),_path2678||(_path2678=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.598125 0.45375 1.19625 0.9075 1.8125 1.375 C3.50590652 2.63295913 5.24477086 3.82984724 7 5 C5.68 5 4.36 5 3 5 C2.67 6.32 2.34 7.64 2 9 C2 8.01 2 7.02 2 6 C1.34 6 0.68 6 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#76462F\",transform:\"translate(382,442)\"})),_path2679||(_path2679=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.46015291 0.28241641 2.91809793 0.57626614 4.375 0.875 C5.18710937 1.03742188 5.99921875 1.19984375 6.8359375 1.3671875 C9 2 9 2 11 4 C8 5 8 5 5.95703125 4.22265625 C5.24933594 3.83980469 4.54164063 3.45695312 3.8125 3.0625 C3.09707031 2.68222656 2.38164063 2.30195313 1.64453125 1.91015625 C1.10183594 1.60980469 0.55914063 1.30945313 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#885336\",transform:\"translate(582,432)\"})),_path2680||(_path2680=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0.99 5.94 1.98 9 3 C8.34 3.66 7.68 4.32 7 5 C4.8359375 4.7578125 4.8359375 4.7578125 2.375 4.125 C1.55773437 3.92132813 0.74046875 3.71765625 -0.1015625 3.5078125 C-0.72804688 3.34023438 -1.35453125 3.17265625 -2 3 C-1.34 2.01 -0.68 1.02 0 0 Z \",fill:\"#715240\",transform:\"translate(498,432)\"})),_path2681||(_path2681=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C0.75 3.0625 0.75 3.0625 -2 5 C-4.3125 4.75 -4.3125 4.75 -6 4 C-3.1875 1.9375 -3.1875 1.9375 0 0 Z \",fill:\"#52382D\",transform:\"translate(28,429)\"})),_path2682||(_path2682=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.60875 0.3403125 1.60875 0.3403125 3.25 0.6875 C3.25 1.3475 3.25 2.0075 3.25 2.6875 C-0.38 2.6875 -4.01 2.6875 -7.75 2.6875 C-3.75 -0.3125 -3.75 -0.3125 0 0 Z \",fill:\"#452B1A\",transform:\"translate(396.75,424.3125)\"})),_path2683||(_path2683=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C3.28317892 3.84953676 3.06643637 6.94738135 3 11 C0.60236815 8.60236815 0.65719414 7.66726502 0.375 4.375 C0.30023438 3.55773437 0.22546875 2.74046875 0.1484375 1.8984375 C0.09945313 1.27195312 0.05046875 0.64546875 0 0 Z \",fill:\"#694D2B\",transform:\"translate(473,409)\"})),_path2684||(_path2684=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C4.01 0.33 3.02 0.66 2 1 C2 1.66 2 2.32 2 3 C3.32 3 4.64 3 6 3 C6 3.66 6 4.32 6 5 C4.02 5 2.04 5 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#080602\",transform:\"translate(342,409)\"})),_path2685||(_path2685=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.495 0.99 0.495 2 1 C2.33 1.99 2.66 2.98 3 4 C3.99 4.33 4.98 4.66 6 5 C6 6.32 6 7.64 6 9 C4 9 4 9 1.875 7.3125 C0 5 0 5 -0.25 2.25 C-0.1675 1.5075 -0.085 0.765 0 0 Z \",fill:\"#9C1D2B\",transform:\"translate(298,397)\"})),_path2686||(_path2686=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.99 0 1.98 0 3 C-3.3 3.33 -6.6 3.66 -10 4 C-4.66666667 0 -4.66666667 0 0 0 Z \",fill:\"#010308\",transform:\"translate(260,401)\"})),_path2687||(_path2687=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.66 1.32 1.32 2 2 C0.68 3.32 -0.64 4.64 -2 6 C-2.66 5.67 -3.32 5.34 -4 5 C-4 4.34 -4 3.68 -4 3 C-4.99 2.34 -5.98 1.68 -7 1 C-3.625 0.375 -3.625 0.375 0 0 Z \",fill:\"#C07156\",transform:\"translate(120,388)\"})),_path2688||(_path2688=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0 5.28 0 8 0 C6.35 1.65 4.7 3.3 3 5 C3 4.01 3 3.02 3 2 C2.01 2 1.02 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#E2E2BF\",transform:\"translate(540,388)\"})),_path2689||(_path2689=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.66 1.32 1.32 2 2 C0.35 3.32 -1.3 4.64 -3 6 C-4.32 5.34 -5.64 4.68 -7 4 C-4.69 2.68 -2.38 1.36 0 0 Z \",fill:\"#815641\",transform:\"translate(92,379)\"})),_path2690||(_path2690=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.556875 0.144375 1.11375 0.28875 1.6875 0.4375 C4.11384195 1.02769128 6.54906345 1.523429 9 2 C9.33 2.99 9.66 3.98 10 5 C8.02 5 6.04 5 4 5 C4 4.34 4 3.68 4 3 C3.34 3 2.68 3 2 3 C2 2.34 2 1.68 2 1 C1.34 0.67 0.68 0.34 0 0 Z \",fill:\"#0A0E0D\",transform:\"translate(492,377)\"})),_path2691||(_path2691=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4 1 4 1 6 2 C6 2.66 6 3.32 6 4 C6.66 4.33 7.32 4.66 8 5 C7.01 5.66 6.02 6.32 5 7 C3.35 4.69 1.7 2.38 0 0 Z \",fill:\"#1E221B\",transform:\"translate(467,375)\"})),_path2692||(_path2692=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0 3.96 0 6 0 C4.02 0.99 4.02 0.99 2 2 C2 4.31 2 6.62 2 9 C1.01 8.67 0.02 8.34 -1 8 C-0.34 8 0.32 8 1 8 C0.67 5.36 0.34 2.72 0 0 Z \",fill:\"#AAC88D\",transform:\"translate(588,377)\"})),_path2693||(_path2693=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1.65 0.66 -3.3 1.32 -5 2 C-5 3.65 -5 5.3 -5 7 C-5.99 6.67 -6.98 6.34 -8 6 C-8 4.35 -8 2.7 -8 1 C-4.93251126 -0.86240388 -3.40254489 -1.2151946 0 0 Z \",fill:\"#DACF92\",transform:\"translate(457,379)\"})),_path2694||(_path2694=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.67542976 0.28604898 3.34385343 0.61781233 5 1 C5 1.66 5 2.32 5 3 C5.66 3 6.32 3 7 3 C7 3.66 7 4.32 7 5 C5.35 5 3.7 5 2 5 C2 4.01 2 3.02 2 2 C1.01 1.67 0.02 1.34 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#174032\",transform:\"translate(163,375)\"})),_path2695||(_path2695=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.01822917 0.06510417 4.03645833 0.13020833 6.0546875 0.1953125 C5.7246875 1.5153125 5.3946875 2.8353125 5.0546875 4.1953125 C4.7246875 3.5353125 4.3946875 2.8753125 4.0546875 2.1953125 C1.4146875 2.1953125 -1.2253125 2.1953125 -3.9453125 2.1953125 C-1.9453125 0.1953125 -1.9453125 0.1953125 0 0 Z \",fill:\"#F5CB85\",transform:\"translate(109.9453125,355.8046875)\"})),_path2696||(_path2696=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C5 0.99 5 1.98 5 3 C4.34 3 3.68 3 3 3 C3 3.66 3 4.32 3 5 C2.01 5 1.02 5 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#BD3F33\",transform:\"translate(100,354)\"})),_path2697||(_path2697=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.875 4.75 4.875 4.75 6 7 C5.34 7.66 4.68 8.32 4 9 C0 4.5 0 4.5 0 0 Z \",fill:\"#BDC1AA\",transform:\"translate(523,347)\"})),_path2698||(_path2698=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-3.3 2 -6.6 2 -10 2 C-10 1.34 -10 0.68 -10 0 C-6.42355152 -1.2380014 -3.66305234 -0.74926071 0 0 Z \",fill:\"#1A2316\",transform:\"translate(598,352)\"})),_path2699||(_path2699=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.33 1.65 -0.66 3.3 -1 5 C-1.33 4.34 -1.66 3.68 -2 3 C-3.98 3 -5.96 3 -8 3 C-8 2.34 -8 1.68 -8 1 C-5.10765685 0.17361624 -3.11257569 0 0 0 Z \",fill:\"#372F26\",transform:\"translate(172,339)\"})),_path2700||(_path2700=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3 1.32 3 2.64 3 4 C2.34 4 1.68 4 1 4 C1 5.65 1 7.3 1 9 C-0.61949011 6.42786866 -1.04408751 5.32330841 -0.625 2.25 C-0.41875 1.5075 -0.2125 0.765 0 0 Z \",fill:\"#0A322F\",transform:\"translate(291,334)\"})),_path2701||(_path2701=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 2.64 2 5.28 2 8 C1.01 7.67 0.02 7.34 -1 7 C-0.67 4.69 -0.34 2.38 0 0 Z \",fill:\"#DD5E35\",transform:\"translate(222,320)\"})),_path2702||(_path2702=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.99 1.32 1.98 2 3 C1 4 1 4 -1.06640625 4.09765625 C-1.89011719 4.08605469 -2.71382813 4.07445312 -3.5625 4.0625 C-4.38878906 4.05347656 -5.21507812 4.04445313 -6.06640625 4.03515625 C-6.70449219 4.02355469 -7.34257812 4.01195312 -8 4 C-8 3.34 -8 2.68 -8 2 C-5.36 2 -2.72 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#B8D9B6\",transform:\"translate(456,316)\"})),_path2703||(_path2703=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2 2.65 2 4.3 2 6 C1.67 5.34 1.34 4.68 1 4 C-1.35599235 3.53248212 -1.35599235 3.53248212 -4.0625 3.375 C-4.98160156 3.30023438 -5.90070313 3.22546875 -6.84765625 3.1484375 C-7.55792969 3.09945313 -8.26820313 3.05046875 -9 3 C-9 2.67 -9 2.34 -9 2 C-6.03 2 -3.06 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#D8EBBD\",transform:\"translate(413,298)\"})),_path2704||(_path2704=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.33 5.28 1.66 10.56 2 16 C1.01 16 0.02 16 -1 16 C-0.67 10.72 -0.34 5.44 0 0 Z \",fill:\"#FAA44E\",transform:\"translate(111,272)\"})),_path2705||(_path2705=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.63 0.33 7.26 0.66 11 1 C6.01222852 3.49388574 4.33016752 2.88836125 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#1C2A20\",transform:\"translate(397,276)\"})),_path2706||(_path2706=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.33 2.31 2.66 4.62 3 7 C2.01 7.33 1.02 7.66 0 8 C0 5.36 0 2.72 0 0 Z \",fill:\"#E29569\",transform:\"translate(34,256)\"})),_path2707||(_path2707=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 1.65 0.66 3.3 1 5 C-0.65 5.33 -2.3 5.66 -4 6 C-4 4.35 -4 2.7 -4 1 C-2 0 -2 0 0 0 Z \",fill:\"#D5886E\",transform:\"translate(69,259)\"})),_path2708||(_path2708=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3.66 1.65 4.32 3.3 5 5 C3.35 5.33 1.7 5.66 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#C1705B\",transform:\"translate(130,254)\"})),_path2709||(_path2709=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2 2.32 2 3.64 2 5 C1.01 5.495 1.01 5.495 0 6 C-1.0194119 6.98020375 -2.02246356 7.97803008 -3 9 C-2.5020163 5.26512223 -2.12508244 3.18762365 0 0 Z \",fill:\"#A86E5B\",transform:\"translate(78,253)\"})),_path2710||(_path2710=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C1.02 3.97 1.02 3.97 -1 7 C-1.66 5.68 -2.32 4.36 -3 3 C-2.01 2.01 -1.02 1.02 0 0 Z \",fill:\"#8D6145\",transform:\"translate(78,249)\"})),_path2711||(_path2711=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 1.32 1.32 2.64 2 4 C1.34 4 0.68 4 0 4 C-0.33 4.66 -0.66 5.32 -1 6 C-4.875 4.25 -4.875 4.25 -6 2 C-4.02 2 -2.04 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#A39278\",transform:\"translate(264,247)\"})),_path2712||(_path2712=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.99 2 1.98 2 3 C2.99 3 3.98 3 5 3 C4.67 4.32 4.34 5.64 4 7 C2.68 6.34 1.36 5.68 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#AF5F4E\",transform:\"translate(112,245)\"})),_path2713||(_path2713=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0 4.62 0 7 0 C7 0.99 7 1.98 7 3 C4.69 3 2.38 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#E1CCAE\",transform:\"translate(277,246)\"})),_path2714||(_path2714=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C0.99 2.33 1.98 2.66 3 3 C2.34 4.32 1.68 5.64 1 7 C0.67 5.68 0.34 4.36 0 3 C-1.65 2.67 -3.3 2.34 -5 2 C-2 0 -2 0 0 0 Z \",fill:\"#945240\",transform:\"translate(121,244)\"})),_path2715||(_path2715=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.46941546 0.45822468 6.67395049 0.89131683 10 2 C10 2.66 10 3.32 10 4 C6.7 3.34 3.4 2.68 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#624032\",transform:\"translate(244,244)\"})),_path2716||(_path2716=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C2.65 1.67 4.3 1.34 6 1 C6 1.66 6 2.32 6 3 C2.92382812 3.29296875 2.92382812 3.29296875 -0.15234375 3.5859375 C-0.76207031 3.72257813 -1.37179688 3.85921875 -2 4 C-2.33 4.66 -2.66 5.32 -3 6 C-3.33 5.34 -3.66 4.68 -4 4 C-2.68 2.68 -1.36 1.36 0 0 Z \",fill:\"#995645\",transform:\"translate(29,238)\"})),_path2717||(_path2717=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.875 -0.125 2.875 -0.125 6 0 C6.66 0.66 7.32 1.32 8 2 C5.09399739 3.25664978 3.20395416 4 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#382323\",transform:\"translate(56,228)\"})),_path2718||(_path2718=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0 4.62 0 7 0 C5.68 0.33 4.36 0.66 3 1 C3 1.66 3 2.32 3 3 C2.34 3 1.68 3 1 3 C1 3.66 1 4.32 1 5 C0.01 4.67 -0.98 4.34 -2 4 C-1.34 2.68 -0.68 1.36 0 0 Z \",fill:\"#321418\",transform:\"translate(499,223)\"})),_path2719||(_path2719=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 2 2 2 2 6 C2.66 6 3.32 6 4 6 C4 6.99 4 7.98 4 9 C2.68 8.67 1.36 8.34 0 8 C0 6.68 0 5.36 0 4 C-0.66 3.34 -1.32 2.68 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#D6BDA2\",transform:\"translate(254,220)\"})),_path2720||(_path2720=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.56454251 0.54339792 7.9728176 1.79463821 12 4 C12 4.33 12 4.66 12 5 C6.92387682 5.61528766 4.17017994 3.61658349 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#221818\",transform:\"translate(110,219)\"})),_path2721||(_path2721=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C2.67 1.99 2.34 2.98 2 4 C2.9590625 4.433125 2.9590625 4.433125 3.9375 4.875 C6 6 6 6 7 8 C3.62496331 6.8141763 1.35277269 5.72426311 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#290B0F\",transform:\"translate(570,212)\"})),_path2722||(_path2722=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0 5.28 0 8 0 C8.33 0.66 8.66 1.32 9 2 C6.36 2.33 3.72 2.66 1 3 C0.67 2.01 0.34 1.02 0 0 Z \",fill:\"#313330\",transform:\"translate(549,200)\"})),_path2723||(_path2723=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 3.3 1 6.6 1 10 C-0.32 10 -1.64 10 -3 10 C-2.67 8.68 -2.34 7.36 -2 6 C-1.34 6 -0.68 6 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#AEC7A9\",transform:\"translate(373,194)\"})),_path2724||(_path2724=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.928125 0.3403125 -0.928125 0.3403125 -1.875 0.6875 C-4.61410209 2.37929835 -5.05024472 3.99244161 -6 7 C-6.66 7 -7.32 7 -8 7 C-8.33 5.35 -8.66 3.7 -9 2 C-5.86501708 0.14223235 -3.62528568 -0.20140476 0 0 Z \",fill:\"#1C2622\",transform:\"translate(607,185)\"})),_path2725||(_path2725=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.27275026 0 5.846632 0.29925156 9 1 C5.46588679 3.12046792 2.05606165 3.53199289 -2 4 C-2 3.34 -2 2.68 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#7E9984\",transform:\"translate(192,178)\"})),_path2726||(_path2726=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.21736634 1.10868317 4.03617993 2.49440461 6 4 C3.36 4.33 0.72 4.66 -2 5 C-2.33 4.01 -2.66 3.02 -3 2 C-2.01 1.34 -1.02 0.68 0 0 Z \",fill:\"#2F2F29\",transform:\"translate(531,130)\"})),_path2727||(_path2727=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-2.31 3.32 -4.62 4.64 -7 6 C-7.33 4.68 -7.66 3.36 -8 2 C-5.09399739 0.74335022 -3.20395416 0 0 0 Z \",fill:\"#3A221C\",transform:\"translate(485,106)\"})),_path2728||(_path2728=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 1.32 0.66 2.64 1 4 C0.01 4.495 0.01 4.495 -1 5 C-1 4.34 -1 3.68 -1 3 C-2.1446875 3.7425 -2.1446875 3.7425 -3.3125 4.5 C-6 6 -6 6 -9 6 C-7.8803014 4.99406757 -6.7540588 3.9954151 -5.625 3 C-4.68527344 2.1646875 -4.68527344 2.1646875 -3.7265625 1.3125 C-2 0 -2 0 0 0 Z \",fill:\"#211209\",transform:\"translate(496,95)\"})),_path2729||(_path2729=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 1.32 0.66 2.64 1 4 C-4.2734375 7.22265625 -4.2734375 7.22265625 -6 8 C-6.66 7.67 -7.32 7.34 -8 7 C-5.36 4.69 -2.72 2.38 0 0 Z \",fill:\"#345444\",transform:\"translate(531,36)\"})),_path2730||(_path2730=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 2.64 2 5.28 2 8 C0.68 6.68 -0.64 5.36 -2 4 C-1.34 2.68 -0.68 1.36 0 0 Z \",fill:\"#151E23\",transform:\"translate(126,16)\"})),_path2731||(_path2731=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0 3.96 0 6 0 C5.79375 0.61875 5.5875 1.2375 5.375 1.875 C5.25125 2.57625 5.1275 3.2775 5 4 C5.66 4.66 6.32 5.32 7 6 C5.1875 5.8125 5.1875 5.8125 3 5 C1.25 2.4375 1.25 2.4375 0 0 Z \",fill:\"#251611\",transform:\"translate(66,0)\"})),_path2732||(_path2732=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.33 2.97 1.66 5.94 2 9 C1.01 9 0.02 9 -1 9 C-1.80967438 6.08517222 -2.21845993 4.53886783 -1.0625 1.6875 C-0.711875 1.130625 -0.36125 0.57375 0 0 Z \",fill:\"#55372D\",transform:\"translate(436,563)\"})),_path2733||(_path2733=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 2 2 2 2 5 C2.66 5 3.32 5 4 5 C4.33 6.32 4.66 7.64 5 9 C2.09303901 7.93411431 1.15567038 7.29651501 -0.3125 4.5 C-1 2 -1 2 0 0 Z \",fill:\"#744D3B\",transform:\"translate(467,548)\"})),_path2734||(_path2734=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.57142857 5.14285714 5.57142857 5.14285714 6 9 C4 7.625 4 7.625 2 6 C2 5.34 2 4.68 2 4 C1.34 4 0.68 4 0 4 C-0.33 3.01 -0.66 2.02 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#92634A\",transform:\"translate(462,547)\"})),_path2735||(_path2735=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.465 1.98 3.465 1.98 7 4 C7 4.99 7 5.98 7 7 C4.50638429 5.79618552 2.31856917 4.54571278 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#794D3C\",transform:\"translate(601,535)\"})),_path2736||(_path2736=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.93065133 2.60582371 1.14917407 3.64198224 0.0625 6.25 C-0.4634375 7.11625 -0.4634375 7.11625 -1 8 C-2.32 7.34 -3.64 6.68 -5 6 C-3.35 4.02 -1.7 2.04 0 0 Z \",fill:\"#91684C\",transform:\"translate(122,530)\"})),_path2737||(_path2737=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0.99 3.3 1.98 5 3 C4.34 3.66 3.68 4.32 3 5 C3.33 5.66 3.66 6.32 4 7 C3.01 6.67 2.02 6.34 1 6 C0.67 4.02 0.34 2.04 0 0 Z M0 6 C0 9 0 9 0 9 Z \",fill:\"#6A4433\",transform:\"translate(600,529)\"})),_path2738||(_path2738=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.82524236 1.450954 5.19090966 3.38181932 7 7 C7 7.66 7 8.32 7 9 C6.34 9 5.68 9 5 9 C3.7109375 7.5390625 3.7109375 7.5390625 2.375 5.625 C1.92898438 4.99851562 1.48296875 4.37203125 1.0234375 3.7265625 C0 2 0 2 0 0 Z \",fill:\"#643D2E\",transform:\"translate(459,526)\"})),_path2739||(_path2739=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4 1.65 4 3.3 4 5 C2.68 5 1.36 5 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#4F6664\",transform:\"translate(276,511)\"})),_path2740||(_path2740=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3 1.32 3 2.64 3 4 C0.03 3.67 -2.94 3.34 -6 3 C-6 2.67 -6 2.34 -6 2 C-4.02 2 -2.04 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#E4A58B\",transform:\"translate(412,488)\"})),_path2741||(_path2741=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.5 1.3125 2.5 1.3125 5 3 C5 3.99 5 4.98 5 6 C3.35 5.67 1.7 5.34 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#F7DAAE\",transform:\"translate(554,488)\"})),_path2742||(_path2742=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.64615385 1.47692308 6.64615385 1.47692308 8.4375 4.125 C8.7159375 5.053125 8.7159375 5.053125 9 6 C7.68 5.67 6.36 5.34 5 5 C5 4.34 5 3.68 5 3 C3.35 2.67 1.7 2.34 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#603D30\",transform:\"translate(612,484)\"})),_path2743||(_path2743=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 1.32 0 2.64 0 4 C0.66 4.33 1.32 4.66 2 5 C-0.31 4.67 -2.62 4.34 -5 4 C-4.67 3.01 -4.34 2.02 -4 1 C-2 0 -2 0 0 0 Z \",fill:\"#F2BAA3\",transform:\"translate(386,479)\"})),_path2744||(_path2744=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.63 0.33 7.26 0.66 11 1 C11 1.33 11 1.66 11 2 C7.7 2.33 4.4 2.66 1 3 C0.67 2.01 0.34 1.02 0 0 Z \",fill:\"#C52533\",transform:\"translate(191,474)\"})),_path2745||(_path2745=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0 3.96 0 6 0 C4.25 2 4.25 2 2 4 C0.68 4 -0.64 4 -2 4 C-2 3.34 -2 2.68 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#160C09\",transform:\"translate(366,468)\"})),_path2746||(_path2746=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0.495 2.97 0.495 6 1 C2.5233662 3.14336161 -0.21229195 3.21277626 -4.25 3.125 C-5.32765625 3.10695313 -6.4053125 3.08890625 -7.515625 3.0703125 C-8.33546875 3.04710937 -9.1553125 3.02390625 -10 3 C-10 2.67 -10 2.34 -10 2 C-6.7 2 -3.4 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#21080E\",transform:\"translate(246,462)\"})),_path2747||(_path2747=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2 2.32 2 3.64 2 5 C-0.64 5 -3.28 5 -6 5 C-5.38125 4.9175 -4.7625 4.835 -4.125 4.75 C-1.81562433 4.18741541 -1.81562433 4.18741541 -0.75 1.9375 C-0.5025 1.298125 -0.255 0.65875 0 0 Z \",fill:\"#3C151A\",transform:\"translate(454,455)\"})),_path2748||(_path2748=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 1.98 2 3.96 2 6 C2.99 6.33 3.98 6.66 5 7 C3.02 7 1.04 7 -1 7 C-0.67 4.69 -0.34 2.38 0 0 Z \",fill:\"#FCA87F\",transform:\"translate(420,452)\"})),_path2749||(_path2749=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.90492188 0.02320313 1.80984375 0.04640625 2.7421875 0.0703125 C4.10730469 0.09738281 4.10730469 0.09738281 5.5 0.125 C6.19867188 0.14820313 6.89734375 0.17140625 7.6171875 0.1953125 C6.9571875 1.5153125 6.2971875 2.8353125 5.6171875 4.1953125 C4.9571875 4.1953125 4.2971875 4.1953125 3.6171875 4.1953125 C3.6171875 3.5353125 3.6171875 2.8753125 3.6171875 2.1953125 C0.9771875 2.1953125 -1.6628125 2.1953125 -4.3828125 2.1953125 C-2.3828125 0.1953125 -2.3828125 0.1953125 0 0 Z \",fill:\"#FAB484\",transform:\"translate(404.3828125,453.8046875)\"})),_path2750||(_path2750=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.62463842 -0.05395478 3.24978541 -0.09277195 4.875 -0.125 C5.77992188 -0.14820313 6.68484375 -0.17140625 7.6171875 -0.1953125 C10 0 10 0 12 2 C11.67 2.33 11.34 2.66 11 3 C9.14227838 2.91015699 7.28752015 2.75388139 5.4375 2.5625 C3.91962891 2.40974609 3.91962891 2.40974609 2.37109375 2.25390625 C1.58863281 2.17011719 0.80617188 2.08632813 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#541D1C\",transform:\"translate(291,448)\"})),_path2751||(_path2751=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.25 5.625 1.25 5.625 -1 9 C-2.32 8.67 -3.64 8.34 -5 8 C-4.01 8 -3.02 8 -2 8 C-1.855625 6.865625 -1.71125 5.73125 -1.5625 4.5625 C-1 1 -1 1 0 0 Z \",fill:\"#3C2118\",transform:\"translate(351,439)\"})),_path2752||(_path2752=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 1.32 0 2.64 0 4 C-2.64 3.34 -5.28 2.68 -8 2 C-4.77208445 -0.1519437 -3.71599191 -0.20086443 0 0 Z \",fill:\"#80553E\",transform:\"translate(626,434)\"})),_path2753||(_path2753=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.99 0 1.98 0 3 C-4.95 2.67 -9.9 2.34 -15 2 C-15 1.67 -15 1.34 -15 1 C-13.06263299 0.83179449 -11.12510094 0.66548905 -9.1875 0.5 C-7.56908203 0.36078125 -7.56908203 0.36078125 -5.91796875 0.21875 C-3 0 -3 0 0 0 Z \",fill:\"#1C1915\",transform:\"translate(365,409)\"})),_path2754||(_path2754=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0 3.96 0 6 0 C6 1.32 6 2.64 6 4 C4.35 3.67 2.7 3.34 1 3 C0.67 2.01 0.34 1.02 0 0 Z \",fill:\"#1B261A\",transform:\"translate(454,406)\"})),_path2755||(_path2755=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.3 0.33 6.6 0.66 10 1 C10 1.33 10 1.66 10 2 C8.02 2 6.04 2 4 2 C4 2.66 4 3.32 4 4 C2.68 4 1.36 4 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#1E0402\",transform:\"translate(18,398)\"})),_path2756||(_path2756=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.99 0 1.98 0 3 C-1.98 3.33 -3.96 3.66 -6 4 C-6.33 3.01 -6.66 2.02 -7 1 C-4 0 -4 0 0 0 Z \",fill:\"#7F0F10\",transform:\"translate(150,396)\"})),_path2757||(_path2757=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3.33 2.97 3.66 5.94 4 9 C3.34 9 2.68 9 2 9 C1.34 6.03 0.68 3.06 0 0 Z \",fill:\"#5A5C57\",transform:\"translate(509,393)\"})),_path2758||(_path2758=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 1.32 2 2.64 2 4 C-0.64 4 -3.28 4 -6 4 C-6 3.34 -6 2.68 -6 2 C-4.02 2 -2.04 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#63080A\",transform:\"translate(58,392)\"})),_path2759||(_path2759=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.11375 0.3403125 1.11375 0.3403125 2.25 0.6875 C1.92 2.0075 1.59 3.3275 1.25 4.6875 C1.25 4.0275 1.25 3.3675 1.25 2.6875 C-1.39 2.6875 -4.03 2.6875 -6.75 2.6875 C-4.29511132 0.41445492 -3.41240272 -0.38777304 0 0 Z \",fill:\"#8D503C\",transform:\"translate(549.75,393.3125)\"})),_path2760||(_path2760=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.433125 0.495 0.86625 0.99 1.3125 1.5 C2.99740483 3.33218192 2.99740483 3.33218192 6 3 C5.67 3.99 5.34 4.98 5 6 C3.35 6.33 1.7 6.66 0 7 C0 4.69 0 2.38 0 0 Z \",fill:\"#D99C76\",transform:\"translate(127,388)\"})),_path2761||(_path2761=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3 0.99 3 1.98 3 3 C3.66 3 4.32 3 5 3 C4.67 3.99 4.34 4.98 4 6 C2.68 6 1.36 6 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#888E73\",transform:\"translate(9,387)\"})),_path2762||(_path2762=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 1.98 2.97 1.98 6 4 C5.01 4.495 5.01 4.495 4 5 C3.34786708 7.02463255 3.34786708 7.02463255 3 9 C2 8 2 8 1.9375 5.4375 C1.958125 4.633125 1.97875 3.82875 2 3 C1.34 3 0.68 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#021F17\",transform:\"translate(520,383)\"})),_path2763||(_path2763=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 1.32 0 2.64 0 4 C-1.98 4.33 -3.96 4.66 -6 5 C-6 4.01 -6 3.02 -6 2 C-2.25 0 -2.25 0 0 0 Z \",fill:\"#BFD2CD\",transform:\"translate(145,385)\"})),_path2764||(_path2764=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C3.34 1.98 2.68 3.96 2 6 C1.01 6 0.02 6 -1 6 C-0.67 4.02 -0.34 2.04 0 0 Z \",fill:\"#F51B17\",transform:\"translate(124,386)\"})),_path2765||(_path2765=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 1.98 1 3.96 1 6 C0.34 6 -0.32 6 -1 6 C-1 6.66 -1 7.32 -1 8 C-1.66 8 -2.32 8 -3 8 C-3 6.02 -3 4.04 -3 2 C-2.34 2 -1.68 2 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#A90909\",transform:\"translate(33,380)\"})),_path2766||(_path2766=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0 3.96 0 6 0 C6.33 1.65 6.66 3.3 7 5 C4.11562221 3.70700306 2.12780579 2.34058637 0 0 Z \",fill:\"#0E9E72\",transform:\"translate(522,384)\"})),_path2767||(_path2767=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.875 -0.125 2.875 -0.125 6 0 C8 2 8 2 8 5 C5.69 4.67 3.38 4.34 1 4 C1.99 3.34 2.98 2.68 4 2 C2.68 1.34 1.36 0.68 0 0 Z \",fill:\"#373D3A\",transform:\"translate(46,380)\"})),_path2768||(_path2768=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.33 2.64 0.66 4 1 C4 1.66 4 2.32 4 3 C5.32 3 6.64 3 8 3 C8 3.66 8 4.32 8 5 C3.48279689 5.36625971 3.48279689 5.36625971 1.1875 3.625 C0 2 0 2 0 0 Z \",fill:\"#19A77B\",transform:\"translate(518,379)\"})),_path2769||(_path2769=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C2.814375 1.9075 2.62875 2.815 2.4375 3.75 C2.04265379 6.68314324 2.05308428 8.2644657 3 11 C2.01 10.67 1.02 10.34 0 10 C0 6.7 0 3.4 0 0 Z \",fill:\"#A8A66C\",transform:\"translate(442,376)\"})),_path2770||(_path2770=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-2.31 3.32 -4.62 4.64 -7 6 C-7.33 4.68 -7.66 3.36 -8 2 C-2.25 0 -2.25 0 0 0 Z \",fill:\"#E9BEAE\",transform:\"translate(348,362)\"})),_path2771||(_path2771=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C2.32 2 3.64 2 5 2 C5 2.66 5 3.32 5 4 C4.401875 4.12375 3.80375 4.2475 3.1875 4.375 C0.73768652 4.95475985 0.73768652 4.95475985 -2 7 C-2.33 6.34 -2.66 5.68 -3 5 C-2.67 4.34 -2.34 3.68 -2 3 C-1.34 3 -0.68 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#5B7668\",transform:\"translate(99,359)\"})),_path2772||(_path2772=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.52588702 2.36292656 3.88820837 3.66462511 5 7 C3.68 7.33 2.36 7.66 1 8 C0.67 5.36 0.34 2.72 0 0 Z \",fill:\"#D3E2B8\",transform:\"translate(528,354)\"})),_path2773||(_path2773=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C1.55090939 1.48199902 1.09043436 2.96055236 0.625 4.4375 C0.36976563 5.26121094 0.11453125 6.08492188 -0.1484375 6.93359375 C-1 9 -1 9 -3 10 C-2.67 7.36 -2.34 4.72 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#AB7F76\",transform:\"translate(249,351)\"})),_path2774||(_path2774=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97069541 2.54631035 4.4775751 5.42230149 6 9 C5.67 9.66 5.34 10.32 5 11 C3.5 9.75 3.5 9.75 2 8 C2 6.68 2 5.36 2 4 C1.34 4 0.68 4 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#0A503F\",transform:\"translate(498,348)\"})),_path2775||(_path2775=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C-0.4375 5.6875 -0.4375 5.6875 -2 8 C-2.99 7.67 -3.98 7.34 -5 7 C-1.125 1.125 -1.125 1.125 0 0 Z \",fill:\"#F48C5B\",transform:\"translate(123,347)\"})),_path2776||(_path2776=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.33 0 0.66 0 1 C-4.97063121 1.91297308 -9.02936879 1.91297308 -14 1 C-14 0.67 -14 0.34 -14 0 C-9.02936879 -0.91297308 -4.97063121 -0.91297308 0 0 Z \",fill:\"#855138\",transform:\"translate(159,351)\"})),_path2777||(_path2777=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 1.32 0.66 2.64 1 4 C2.32 3.67 3.64 3.34 5 3 C4.34 4.65 3.68 6.3 3 8 C2.01 8 1.02 8 0 8 C0 5.36 0 2.72 0 0 Z \",fill:\"#181F2A\",transform:\"translate(323,344)\"})),_path2778||(_path2778=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.33 0.99 -0.66 1.98 -1 3 C-2.98 3 -4.96 3 -7 3 C-7.33 2.34 -7.66 1.68 -8 1 C-5.29120665 -0.35439668 -2.99066732 -0.06501451 0 0 Z \",fill:\"#D7D4C1\",transform:\"translate(115,346)\"})),_path2779||(_path2779=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.32382587 4.33542505 4.12018668 6.47141274 4 12 C1.21366885 7.82050327 0 5.06624674 0 0 Z \",fill:\"#603A1F\",transform:\"translate(566,340)\"})),_path2780||(_path2780=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-7.42857143 2.28571429 -7.42857143 2.28571429 -11 0 C-6.94952424 -1.35015859 -4.2079832 -0.62084998 0 0 Z \",fill:\"#8C5B43\",transform:\"translate(626,340)\"})),_path2781||(_path2781=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3 0.99 3 1.98 3 3 C2.34 3 1.68 3 1 3 C1 3.66 1 4.32 1 5 C0.34 5 -0.32 5 -1 5 C-1.33 5.66 -1.66 6.32 -2 7 C-2.125 4.625 -2.125 4.625 -2 2 C-1.34 1.34 -0.68 0.68 0 0 Z \",fill:\"#F3E459\",transform:\"translate(211,337)\"})),_path2782||(_path2782=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3 0.99 3 1.98 3 3 C3.66 3 4.32 3 5 3 C5 3.99 5 4.98 5 6 C3 5 1 4 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#F07142\",transform:\"translate(148,335)\"})),_path2783||(_path2783=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C3.02463255 2.65213292 3.02463255 2.65213292 5 3 C4.01 3.33 3.02 3.66 2 4 C1.67 4.66 1.34 5.32 1 6 C-0.32 6 -1.64 6 -3 6 C-3 5.34 -3 4.68 -3 4 C-2.34 4 -1.68 4 -1 4 C-0.67 2.68 -0.34 1.36 0 0 Z \",fill:\"#F8C79D\",transform:\"translate(135,330)\"})),_path2784||(_path2784=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0 5.28 0 8 0 C5.37801226 2.15377564 3.35595828 3.40072174 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#FACFA0\",transform:\"translate(140,328)\"})),_path2785||(_path2785=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.94 0.99 5.94 0.99 12 2 C12 2.33 12 2.66 12 3 C10.37581255 3.08090971 8.75048255 3.13914995 7.125 3.1875 C5.76761719 3.23970703 5.76761719 3.23970703 4.3828125 3.29296875 C3.20332031 3.14794922 3.20332031 3.14794922 2 3 C1.34 2.01 0.68 1.02 0 0 Z \",fill:\"#72492E\",transform:\"translate(595,325)\"})),_path2786||(_path2786=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.83206182 0.41427695 6.08025204 1.51280729 9 4 C1.25 3.25 1.25 3.25 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#1C261A\",transform:\"translate(383,326)\"})),_path2787||(_path2787=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 1.65 1 3.3 1 5 C-0.98 5 -2.96 5 -5 5 C-5 4.01 -5 3.02 -5 2 C-3.35 2 -1.7 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#BA855B\",transform:\"translate(347,311)\"})),_path2788||(_path2788=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0 3.96 0 6 0 C6 1.65 6 3.3 6 5 C5.34 5 4.68 5 4 5 C3.67 4.34 3.34 3.68 3 3 C2.01 3 1.02 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#FC3D27\",transform:\"translate(120,312)\"})),_path2789||(_path2789=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 2.31 1 4.62 1 7 C-1.97 6.505 -1.97 6.505 -5 6 C-5 5.34 -5 4.68 -5 4 C-3.35 3.67 -1.7 3.34 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#665038\",transform:\"translate(211,308)\"})),_path2790||(_path2790=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.66 1.32 1.32 2 2 C-4.0546875 2.9765625 -4.0546875 2.9765625 -6 3 C-6.66 2.34 -7.32 1.68 -8 1 C-5.23749964 -0.38125018 -3.05268901 -0.19079306 0 0 Z \",fill:\"#674D38\",transform:\"translate(159,306)\"})),_path2791||(_path2791=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.181798 1.06059933 6.0173094 2.47551369 9 4 C9 4.33 9 4.66 9 5 C5.625 4.75 5.625 4.75 2 4 C0.5625 1.9375 0.5625 1.9375 0 0 Z \",fill:\"#BA7F63\",transform:\"translate(366,302)\"})),_path2792||(_path2792=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C5 1.32 5 2.64 5 4 C3.35 4 1.7 4 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#EE5044\",transform:\"translate(334,292)\"})),_path2793||(_path2793=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C3.31 3.33 5.62 3.66 8 4 C8 4.66 8 5.32 8 6 C2.25 6.125 2.25 6.125 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#A36F53\",transform:\"translate(353,288)\"})),_path2794||(_path2794=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C3.00016466 4.20882096 3.00016466 4.20882096 5 5 C4.34 5.66 3.68 6.32 3 7 C0.875 6.625 0.875 6.625 -1 6 C-1.042721 4.33388095 -1.04063832 2.66617115 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#336636\",transform:\"translate(65,288)\"})),_path2795||(_path2795=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.66 2 1.32 2 2 C5.63 2 9.26 2 13 2 C13 2.33 13 2.66 13 3 C8.05 3 3.1 3 -2 3 C-1.34 2.01 -0.68 1.02 0 0 Z \",fill:\"#BB8366\",transform:\"translate(231,284)\"})),_path2796||(_path2796=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.66 0.66 -1.32 1.32 -2 2 C-2 2.99 -2 3.98 -2 5 C-2.66 5 -3.32 5 -4 5 C-4 4.34 -4 3.68 -4 3 C-5.32 3 -6.64 3 -8 3 C-8 2.34 -8 1.68 -8 1 C-5.29120665 -0.35439668 -2.99066732 -0.06501451 0 0 Z \",fill:\"#EC8B76\",transform:\"translate(260,272)\"})),_path2797||(_path2797=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.2380014 3.57644848 0.74926071 6.33694766 0 10 C-0.66 10 -1.32 10 -2 10 C-2 7.36 -2 4.72 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#FCBE65\",transform:\"translate(104,270)\"})),_path2798||(_path2798=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0.495 2.97 0.495 6 1 C5.67 2.32 5.34 3.64 5 5 C4.01 5 3.02 5 2 5 C1.34 3.35 0.68 1.7 0 0 Z \",fill:\"#F8C252\",transform:\"translate(200,271)\"})),_path2799||(_path2799=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C5 1.32 5 2.64 5 4 C2.03 3.505 2.03 3.505 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#90A875\",transform:\"translate(444,269)\"})),_path2800||(_path2800=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-1.65 2 -3.3 2 -5 2 C-5 3.32 -5 4.64 -5 6 C-5.66 6 -6.32 6 -7 6 C-7 5.01 -7 4.02 -7 3 C-7.66 2.67 -8.32 2.34 -9 2 C-5.5647952 -0.29013653 -4.014669 -0.17842973 0 0 Z \",fill:\"#A48A72\",transform:\"translate(340,268)\"})),_path2801||(_path2801=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.3 0 6.6 0 10 0 C9.67 1.32 9.34 2.64 9 4 C8.34 3.34 7.68 2.68 7 2 C5.65938457 2.30271961 4.32594105 2.63837971 3 3 C2.01 2.67 1.02 2.34 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#6F6A53\",transform:\"translate(277,270)\"})),_path2802||(_path2802=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C1.67 3.96 1.34 7.92 1 12 C0.67 12 0.34 12 0 12 C0 9.36 0 6.72 0 4 C-1.32 3.67 -2.64 3.34 -4 3 C-2.68 3 -1.36 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#5A351C\",transform:\"translate(595,260)\"})),_path2803||(_path2803=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.33 3.3 2.66 6.6 3 10 C-0.16130459 5.78492722 -0.3367697 4.93928888 0 0 Z \",fill:\"#502008\",transform:\"translate(602,264)\"})),_path2804||(_path2804=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.2065625 0.0309375 1.2065625 0.0309375 2.4375 0.0625 C2.4375 2.0425 2.4375 4.0225 2.4375 6.0625 C2.1075 5.4025 1.7775 4.7425 1.4375 4.0625 C0.4475 4.3925 -0.5425 4.7225 -1.5625 5.0625 C-1.5625 4.0725 -1.5625 3.0825 -1.5625 2.0625 C-2.2225 1.7325 -2.8825 1.4025 -3.5625 1.0625 C-2.5625 0.0625 -2.5625 0.0625 0 0 Z \",fill:\"#9E6857\",transform:\"translate(167.5625,260.9375)\"})),_path2805||(_path2805=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4 0.99 4 1.98 4 3 C3.34 3 2.68 3 2 3 C2 3.66 2 4.32 2 5 C2.66 5.33 3.32 5.66 4 6 C3.01 6.99 2.02 7.98 1 9 C0.67 6.03 0.34 3.06 0 0 Z \",fill:\"#593A2B\",transform:\"translate(51,253)\"})),_path2806||(_path2806=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.09658936 3.28976808 0.79953138 4.71303767 0 8 C-1.32 7.34 -2.64 6.68 -4 6 C-4 4.35 -4 2.7 -4 1 C-2.68 1.33 -1.36 1.66 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#8B5E4E\",transform:\"translate(34,253)\"})),_path2807||(_path2807=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C2.34 1 1.68 1 1 1 C1 2.98 1 4.96 1 7 C0.01 7.33 -0.98 7.66 -2 8 C-1.125 1.125 -1.125 1.125 0 0 Z \",fill:\"#91563E\",transform:\"translate(189,254)\"})),_path2808||(_path2808=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 2.97 0 5.94 0 9 C-3 6 -3 6 -3.1875 3.3125 C-3.125625 2.549375 -3.06375 1.78625 -3 1 C-1 0 -1 0 0 0 Z \",fill:\"#844C39\",transform:\"translate(13,252)\"})),_path2809||(_path2809=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4.93423645 3.01031744 5.04449911 3.86650268 4 7 C3.01 6.67 2.02 6.34 1 6 C1.33 5.01 1.66 4.02 2 3 C1.34 3 0.68 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#573223\",transform:\"translate(89,251)\"})),_path2810||(_path2810=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 1.98 2 3.96 2 6 C1.01 5.34 0.02 4.68 -1 4 C-1.66 4.99 -2.32 5.98 -3 7 C-3.33 5.35 -3.66 3.7 -4 2 C-2.68 2 -1.36 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#D1795F\",transform:\"translate(44,247)\"})),_path2811||(_path2811=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1.65 0.66 -3.3 1.32 -5 2 C-4.34 2.66 -3.68 3.32 -3 4 C-5.31 4.33 -7.62 4.66 -10 5 C-8.8125 2.5625 -8.8125 2.5625 -7 0 C-4.08670507 -0.99478363 -2.78002188 -1.39001094 0 0 Z \",fill:\"#616250\",transform:\"translate(362,249)\"})),_path2812||(_path2812=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3 1 3 1 5 4 C4.625 6.6875 4.625 6.6875 4 9 C2 8 2 8 1 5 C0.65179959 3.33637583 0.31595508 1.67004829 0 0 Z \",fill:\"#B16F5E\",transform:\"translate(65,245)\"})),_path2813||(_path2813=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-2.90572328 2.47524576 -5.15822926 3.69670231 -9 4 C-9.66 3.34 -10.32 2.68 -11 2 C-7.17679443 0.57741188 -4.08718695 -0.24042276 0 0 Z \",fill:\"#5B4A40\",transform:\"translate(395,232)\"})),_path2814||(_path2814=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0.495 1.98 0.495 4 1 C3.67 1.33 3.34 1.66 3 2 C3.66 2.33 4.32 2.66 5 3 C5 3.66 5 4.32 5 5 C3.68 5.33 2.36 5.66 1 6 C0.34 5.01 -0.32 4.02 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#341418\",transform:\"translate(491,225)\"})),_path2815||(_path2815=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0 3.96 0 6 0 C6 0.66 6 1.32 6 2 C5.34 2 4.68 2 4 2 C4 2.66 4 3.32 4 4 C2.68 4 1.36 4 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#A2C3A8\",transform:\"translate(242,216)\"})),_path2816||(_path2816=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0.33 5.94 0.66 9 1 C9 1.99 9 2.98 9 4 C6.03 3.01 3.06 2.02 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#9D744E\",transform:\"translate(158,209)\"})),_path2817||(_path2817=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 1 2 1 3 3 C-0.96 4.98 -0.96 4.98 -5 7 C-5.33 6.34 -5.66 5.68 -6 5 C-5.01 4.67 -4.02 4.34 -3 4 C-1.31461399 2.00334686 -1.31461399 2.00334686 0 0 Z \",fill:\"#463730\",transform:\"translate(425,187)\"})),_path2818||(_path2818=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1.67 1.99 1.34 2.98 1 4 C1.66 4.33 2.32 4.66 3 5 C1.35 5.33 -0.3 5.66 -2 6 C-2.33 5.34 -2.66 4.68 -3 4 C-3.66 3.67 -4.32 3.34 -5 3 C-2.625 1.4375 -2.625 1.4375 0 0 Z \",fill:\"#392F28\",transform:\"translate(508,142)\"})),_path2819||(_path2819=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1.360625 1.268125 0.72125 1.53625 0.0625 1.8125 C-2.33131686 2.88667752 -2.33131686 2.88667752 -3 6 C-5.5625 7.6875 -5.5625 7.6875 -8 9 C-6.4169423 4.7257442 -3.49431596 2.73468206 0 0 Z \",fill:\"#482B22\",transform:\"translate(458,125)\"})),_path2820||(_path2820=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C5 1.32 5 2.64 5 4 C4.34 4 3.68 4 3 4 C2.67 4.99 2.34 5.98 2 7 C1.34 4.69 0.68 2.38 0 0 Z \",fill:\"#EAB694\",transform:\"translate(152,118)\"})),_path2821||(_path2821=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0 4.62 0 7 0 C6.67 1.65 6.34 3.3 6 5 C3.98079663 3.69593116 1.98075027 2.36176581 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#F0A47F\",transform:\"translate(138,118)\"})),_path2822||(_path2822=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.87132028 0.57352893 6.08172796 2.48704352 9 5 C8.01 5.33 7.02 5.66 6 6 C2.8125 4.1875 2.8125 4.1875 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#CDAB7E\",transform:\"translate(62,97)\"})),_path2823||(_path2823=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0.99 1.98 0.99 4 2 C4 3.32 4 4.64 4 6 C3.01 6.33 2.02 6.66 1 7 C0.67 4.69 0.34 2.38 0 0 Z \",fill:\"#CEAC8E\",transform:\"translate(150,81)\"})),_path2824||(_path2824=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0 3.96 0 6 0 C4.37660195 1.70884005 2.70680947 3.37446717 1 5 C0.34 5 -0.32 5 -1 5 C-0.67 3.35 -0.34 1.7 0 0 Z \",fill:\"#547767\",transform:\"translate(505,80)\"})),_path2825||(_path2825=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.33 0.99 -0.66 1.98 -1 3 C-2.65 3 -4.3 3 -6 3 C-6 2.01 -6 1.02 -6 0 C-3.50907189 -1.24546405 -2.58919267 -0.7767578 0 0 Z \",fill:\"#D3A072\",transform:\"translate(478,66)\"})),_path2826||(_path2826=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C3.8125 1.875 3.8125 1.875 3 4 C0.4375 5.25 0.4375 5.25 -2 6 C-2 5.34 -2 4.68 -2 4 C-1.34 4 -0.68 4 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#3F6659\",transform:\"translate(484,64)\"})),_path2827||(_path2827=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3.33 2.97 3.66 5.94 4 9 C3.34 9 2.68 9 2 9 C2 8.01 2 7.02 2 6 C1.34 6 0.68 6 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#A57A5E\",transform:\"translate(119,44)\"})),_path2828||(_path2828=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C2.34 3.31 1.68 5.62 1 8 C0.34 7.67 -0.32 7.34 -1 7 C-1.04254356 5.00045254 -1.04080783 2.99958364 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#EFBF7A\",transform:\"translate(70,7)\"})),_path2829||(_path2829=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C1.66 3 2.32 3 3 3 C2.67 4.98 2.34 6.96 2 9 C1.34 8.01 0.68 7.02 0 6 C-0.99 6.495 -0.99 6.495 -2 7 C-1.34 4.69 -0.68 2.38 0 0 Z \",fill:\"#482D23\",transform:\"translate(125,589)\"})),_path2830||(_path2830=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1 2 1 2 0.51171875 3.91015625 C0.23972656 4.62042969 -0.03226563 5.33070313 -0.3125 6.0625 C-0.57675781 6.77535156 -0.84101563 7.48820313 -1.11328125 8.22265625 C-2 10 -2 10 -4 11 C-3.39301257 6.87248551 -1.96189209 3.6678852 0 0 Z \",fill:\"#503329\",transform:\"translate(135,567)\"})),_path2831||(_path2831=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.75 1.625 0.75 1.625 1 4 C-0.9375 7.25 -0.9375 7.25 -3 10 C-3.33 8.68 -3.66 7.36 -4 6 C-3.34 6 -2.68 6 -2 6 C-1.855625 5.195625 -1.71125 4.39125 -1.5625 3.5625 C-1 1 -1 1 0 0 Z \",fill:\"#7B553D\",transform:\"translate(116,555)\"})),_path2832||(_path2832=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.66 1.32 1.32 2 2 C1.67 2.66 1.34 3.32 1 4 C1.99 3.67 2.98 3.34 4 3 C3.67 4.32 3.34 5.64 3 7 C1.02 5.35 -0.96 3.7 -3 2 C-2.01 1.34 -1.02 0.68 0 0 Z \",fill:\"#E0B88F\",transform:\"translate(622,542)\"})),_path2833||(_path2833=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0.33 5.94 0.66 9 1 C9 1.33 9 1.66 9 2 C7.3603125 2.2165625 7.3603125 2.2165625 5.6875 2.4375 C2.06877013 2.88288104 2.06877013 2.88288104 -1 4 C-0.67 2.68 -0.34 1.36 0 0 Z \",fill:\"#7F2824\",transform:\"translate(155,488)\"})),_path2834||(_path2834=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 1.65 0.66 3.3 1 5 C0.34 5 -0.32 5 -1 5 C-1 4.01 -1 3.02 -1 2 C-2.65 2 -4.3 2 -6 2 C-6.33 1.34 -6.66 0.68 -7 0 C-3.98968256 -0.93423645 -3.13349732 -1.04449911 0 0 Z \",fill:\"#CE5345\",transform:\"translate(416,486)\"})),_path2835||(_path2835=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C4.3 2 7.6 2 11 2 C10.67 2.66 10.34 3.32 10 4 C6.04 4 2.08 4 -2 4 C-1.34 2.68 -0.68 1.36 0 0 Z \",fill:\"#7B3D3B\",transform:\"translate(159,478)\"})),_path2836||(_path2836=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1.360625 1.103125 0.72125 1.20625 0.0625 1.3125 C-0.9584375 1.6528125 -0.9584375 1.6528125 -2 2 C-2.33 2.99 -2.66 3.98 -3 5 C-4.65 5.33 -6.3 5.66 -8 6 C-7 3 -7 3 -3.5625 1.25 C-2.386875 0.8375 -1.21125 0.425 0 0 Z \",fill:\"#2F2A20\",transform:\"translate(52,472)\"})),_path2837||(_path2837=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C2.236875 1.5775 1.47375 2.155 0.6875 2.75 C-1.66200917 4.71703093 -3.29323505 6.48476744 -5 9 C-4.5206753 4.68607774 -3.2542015 2.83430453 0 0 Z \",fill:\"#5C1C24\",transform:\"translate(289,465)\"})),_path2838||(_path2838=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.75 0.25 2.75 0.25 5 1 C5 1.66 5 2.32 5 3 C4.01 3.33 3.02 3.66 2 4 C2 3.34 2 2.68 2 2 C0.02 2.66 -1.96 3.32 -4 4 C-2.3125 1.9375 -2.3125 1.9375 0 0 Z \",fill:\"#563A2B\",transform:\"translate(56,466)\"})),_path2839||(_path2839=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0 4.62 0 7 0 C7 1.65 7 3.3 7 5 C6.01 5.495 6.01 5.495 5 6 C4.67 4.35 4.34 2.7 4 1 C2.68 0.67 1.36 0.34 0 0 Z \",fill:\"#A6473F\",transform:\"translate(427,463)\"})),_path2840||(_path2840=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C0.67 3.66 0.34 4.32 0 5 C-0.66 5 -1.32 5 -2 5 C-2.66 6.32 -3.32 7.64 -4 9 C-4.33 8.34 -4.66 7.68 -5 7 C-1.125 1.125 -1.125 1.125 0 0 Z \",fill:\"#783934\",transform:\"translate(155,455)\"})),_path2841||(_path2841=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.33 2.64 0.66 4 1 C3.34 1 2.68 1 2 1 C1.34 2.98 0.68 4.96 0 7 C-0.66 7 -1.32 7 -2 7 C-1.125 2.25 -1.125 2.25 0 0 Z \",fill:\"#42131B\",transform:\"translate(292,451)\"})),_path2842||(_path2842=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C1.71475739 1.86380259 0.42157581 2.71580369 -0.875 3.5625 C-1.59429687 4.03816406 -2.31359375 4.51382812 -3.0546875 5.00390625 C-3.69664063 5.33261719 -4.33859375 5.66132813 -5 6 C-5.66 5.67 -6.32 5.34 -7 5 C-2.25 1.125 -2.25 1.125 0 0 Z \",fill:\"#74513F\",transform:\"translate(61,451)\"})),_path2843||(_path2843=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C5.33 0.99 5.66 1.98 6 3 C2.98968256 3.93423645 2.13349732 4.04449911 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#522A1E\",transform:\"translate(379,449)\"})),_path2844||(_path2844=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 2.64 1 5.28 1 8 C2.98 8.495 2.98 8.495 5 9 C4.01 9.495 4.01 9.495 3 10 C2.34 10.99 1.68 11.98 1 13 C-0.00496852 9.98509443 -0.10335303 7.95818308 -0.0625 4.8125 C-0.05347656 3.91144531 -0.04445312 3.01039063 -0.03515625 2.08203125 C-0.02355469 1.39496094 -0.01195312 0.70789063 0 0 Z \",fill:\"#2E0805\",transform:\"translate(165,446)\"})),_path2845||(_path2845=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-2 3 -2 3 -5.125 3.6875 C-6.07375 3.790625 -7.0225 3.89375 -8 4 C-8 3.34 -8 2.68 -8 2 C-4.77208445 -0.1519437 -3.71599191 -0.20086443 0 0 Z \",fill:\"#433229\",transform:\"translate(118,426)\"})),_path2846||(_path2846=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.66 2 1.32 2 2 C3.65 2 5.3 2 7 2 C4.77810176 4.22189824 2.91517292 4.92598892 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#530F1A\",transform:\"translate(296,420)\"})),_path2847||(_path2847=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.804375 0.226875 -1.60875 0.45375 -2.4375 0.6875 C-3.283125 1.120625 -4.12875 1.55375 -5 2 C-5.89386164 4.54775306 -5.89386164 4.54775306 -6 7 C-6.33 7 -6.66 7 -7 7 C-7.33 5.02 -7.66 3.04 -8 1 C-3.375 -1.125 -3.375 -1.125 0 0 Z \",fill:\"#1E1E1C\",transform:\"translate(230,417)\"})),_path2848||(_path2848=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.95 0.99 4.95 0.99 10 2 C10 2.33 10 2.66 10 3 C7.03 3 4.06 3 1 3 C0.67 2.01 0.34 1.02 0 0 Z \",fill:\"#0E6F44\",transform:\"translate(513,407)\"})),_path2849||(_path2849=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.02992782 0.55312735 8.02022924 1.1558062 12 2 C12 2.33 12 2.66 12 3 C10.37581255 3.08090971 8.75048255 3.13914995 7.125 3.1875 C5.76761719 3.23970703 5.76761719 3.23970703 4.3828125 3.29296875 C3.20332031 3.14794922 3.20332031 3.14794922 2 3 C1.34 2.01 0.68 1.02 0 0 Z \",fill:\"#604B40\",transform:\"translate(395,407)\"})),_path2850||(_path2850=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.33 1.32 -0.66 2.64 -1 4 C-5.75 3.25 -5.75 3.25 -8 1 C-2.25 0 -2.25 0 0 0 Z \",fill:\"#20170F\",transform:\"translate(612,402)\"})),_path2851||(_path2851=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.0546875 -0.1953125 6.0546875 -0.1953125 8 0 C8.66 0.66 9.32 1.32 10 2 C6.6875 2.6875 6.6875 2.6875 3 3 C1.0625 1.5625 1.0625 1.5625 0 0 Z \",fill:\"#99B176\",transform:\"translate(594,402)\"})),_path2852||(_path2852=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.94 0.99 5.94 0.99 12 2 C12 2.33 12 2.66 12 3 C8.7 3.33 5.4 3.66 2 4 C1.34 2.68 0.68 1.36 0 0 Z \",fill:\"#774430\",transform:\"translate(518,398)\"})),_path2853||(_path2853=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.33 0 0.66 0 1 C-5.94 1.495 -5.94 1.495 -12 2 C-7.31956791 -2.68043209 -6.14466179 -1.93443056 0 0 Z \",fill:\"#43504D\",transform:\"translate(267,399)\"})),_path2854||(_path2854=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.40114397 0.50298788 6.71195019 2.08772731 10 5 C9.01 5.495 9.01 5.495 8 6 C6.0546875 5.0390625 6.0546875 5.0390625 3.875 3.625 C3.15054687 3.16351563 2.42609375 2.70203125 1.6796875 2.2265625 C1.12539063 1.82179688 0.57109375 1.41703125 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#B19875\",transform:\"translate(363,398)\"})),_path2855||(_path2855=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3.33 2.65 3.66 4.3 4 6 C2.68 6 1.36 6 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#B8C393\",transform:\"translate(588,389)\"})),_path2856||(_path2856=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C1.66 3 2.32 3 3 3 C3 4.32 3 5.64 3 7 C1.35 6.67 -0.3 6.34 -2 6 C-1.34 5.67 -0.68 5.34 0 5 C-0.2784375 4.0409375 -0.2784375 4.0409375 -0.5625 3.0625 C-0.7790625 2.0415625 -0.7790625 2.0415625 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#05100C\",transform:\"translate(519,383)\"})),_path2857||(_path2857=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 3 2 3 2 5 C3.32 5 4.64 5 6 5 C6 5.66 6 6.32 6 7 C4.35 7.33 2.7 7.66 1 8 C0.67 5.36 0.34 2.72 0 0 Z \",fill:\"#DCE5B5\",transform:\"translate(558,379)\"})),_path2858||(_path2858=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.66 2 1.32 2 2 C2.99 2.33 3.98 2.66 5 3 C4.01 3.33 3.02 3.66 2 4 C1.67 4.99 1.34 5.98 1 7 C0.34 6.67 -0.32 6.34 -1 6 C-0.67 4.02 -0.34 2.04 0 0 Z \",fill:\"#0C0A05\",transform:\"translate(34,380)\"})),_path2859||(_path2859=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C0.52307692 5.66153846 0.52307692 5.66153846 -2.125 7.375 C-3.053125 7.684375 -3.053125 7.684375 -4 8 C-4 7.34 -4 6.68 -4 6 C-3.34 6 -2.68 6 -2 6 C-2 4.68 -2 3.36 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#E3513B\",transform:\"translate(108,380)\"})),_path2860||(_path2860=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.33 3.63 1.66 7.26 2 11 C1.67 10.34 1.34 9.68 1 9 C0.34 9 -0.32 9 -1 9 C-0.67 6.03 -0.34 3.06 0 0 Z \",fill:\"#FDEFC3\",transform:\"translate(335,375)\"})),_path2861||(_path2861=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.5534764 2.07553648 1 3.84365964 1 6 C-0.65 6 -2.3 6 -4 6 C-2.84826645 3.53199953 -1.95216435 1.95216435 0 0 Z \",fill:\"#FB703A\",transform:\"translate(113,366)\"})),_path2862||(_path2862=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0.33 5.28 0.66 8 1 C6 4 6 4 3.375 4.6875 C2.199375 4.8421875 2.199375 4.8421875 1 5 C0.67 3.35 0.34 1.7 0 0 Z \",fill:\"#120F0A\",transform:\"translate(462,355)\"})),_path2863||(_path2863=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.99 2.64 1.98 4 3 C2.68 3 1.36 3 0 3 C0 4.32 0 5.64 0 7 C-0.66 7 -1.32 7 -2 7 C-2 5.02 -2 3.04 -2 1 C-1.34 0.67 -0.68 0.34 0 0 Z \",fill:\"#010809\",transform:\"translate(146,343)\"})),_path2864||(_path2864=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.51478398 0.53115106 7.34666857 2.36620292 11 5 C8 6 8 6 5.95703125 5.0390625 C5.24933594 4.57242187 4.54164063 4.10578125 3.8125 3.625 C3.09707031 3.16351563 2.38164062 2.70203125 1.64453125 2.2265625 C1.10183594 1.82179688 0.55914062 1.41703125 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#C5B5AA\",transform:\"translate(147,341)\"})),_path2865||(_path2865=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-0.66 2 -1.32 2 -2 2 C-1.34 3.32 -0.68 4.64 0 6 C-0.99 6 -1.98 6 -3 6 C-3.66 4.35 -4.32 2.7 -5 1 C-3 0 -3 0 0 0 Z \",fill:\"#543E33\",transform:\"translate(358,336)\"})),_path2866||(_path2866=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.475 0.495 2.475 0.495 5 1 C5 2.65 5 4.3 5 6 C3.0625 5.25 3.0625 5.25 1 4 C0.25 1.875 0.25 1.875 0 0 Z \",fill:\"#70613B\",transform:\"translate(253,324)\"})),_path2867||(_path2867=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0.495 2.97 0.495 6 1 C5.34 2.65 4.68 4.3 4 6 C3.67 4.68 3.34 3.36 3 2 C2.34 2 1.68 2 1 2 C1 2.66 1 3.32 1 4 C0.34 4 -0.32 4 -1 4 C-0.67 2.68 -0.34 1.36 0 0 Z \",fill:\"#F4ECA1\",transform:\"translate(205,328)\"})),_path2868||(_path2868=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.0546875 -0.1953125 6.0546875 -0.1953125 8 0 C8.66 0.66 9.32 1.32 10 2 C9.34 2.66 8.68 3.32 8 4 C7.01 4 6.02 4 5 4 C5 3.34 5 2.68 5 2 C3.35 1.67 1.7 1.34 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#B1AE9A\",transform:\"translate(121,329)\"})),_path2869||(_path2869=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0 5.94 0 9 0 C9 0.99 9 1.98 9 3 C4.545 2.01 4.545 2.01 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#584838\",transform:\"translate(57,328)\"})),_path2870||(_path2870=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 1.32 1.32 2.64 2 4 C-0.64 4 -3.28 4 -6 4 C-6.33 3.34 -6.66 2.68 -7 2 C-4.69 2 -2.38 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#1A4D3B\",transform:\"translate(433,324)\"})),_path2871||(_path2871=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.33 2.64 0.66 4 1 C4.33 2.32 4.66 3.64 5 5 C4.01 5 3.02 5 2 5 C1.34 3.35 0.68 1.7 0 0 Z \",fill:\"#C4C5A4\",transform:\"translate(433,322)\"})),_path2872||(_path2872=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.66 2 1.32 2 2 C2.66 2 3.32 2 4 2 C4 3.32 4 4.64 4 6 C2.35 6 0.7 6 -1 6 C-0.01 5.67 0.98 5.34 2 5 C2 4.34 2 3.68 2 3 C1.01 3 0.02 3 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#331E17\",transform:\"translate(309,321)\"})),_path2873||(_path2873=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C5 1.65 5 3.3 5 5 C4.01 5 3.02 5 2 5 C2 4.01 2 3.02 2 2 C1.34 2 0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#3E5A35\",transform:\"translate(232,312)\"})),_path2874||(_path2874=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.66 2.31 3.32 4.62 4 7 C2.68 6.67 1.36 6.34 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#5E5248\",transform:\"translate(188,300)\"})),_path2875||(_path2875=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 1.66666667 0 3.33333333 0 5 C-1.65 5 -3.3 5 -5 5 C-5 3.68 -5 2.36 -5 1 C-2 0 -2 0 0 0 Z \",fill:\"#B06B53\",transform:\"translate(156,301)\"})),_path2876||(_path2876=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0 5.28 0 8 0 C8.33 0.99 8.66 1.98 9 3 C11.01508358 3.73323796 11.01508358 3.73323796 13 4 C10.69 3.67 8.38 3.34 6 3 C6 2.34 6 1.68 6 1 C4.02 1 2.04 1 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#796952\",transform:\"translate(7,301)\"})),_path2877||(_path2877=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3 0.66 3 1.32 3 2 C2.34 2 1.68 2 1 2 C0.67 3.32 0.34 4.64 0 6 C-0.99 5.67 -1.98 5.34 -3 5 C-3 4.01 -3 3.02 -3 2 C-2.01 2 -1.02 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#DA552E\",transform:\"translate(155,292)\"})),_path2878||(_path2878=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.185625 1.2065625 2.185625 1.2065625 2.375 2.4375 C2.58125 3.283125 2.7875 4.12875 3 5 C3.66 5.33 4.32 5.66 5 6 C4.34 6 3.68 6 3 6 C2.67 6.99 2.34 7.98 2 9 C0 2.25 0 2.25 0 0 Z \",fill:\"#C98E74\",transform:\"translate(269,286)\"})),_path2879||(_path2879=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 1.98 2 3.96 2 6 C0.68 6 -0.64 6 -2 6 C-1.49396008 3.83125748 -1.00016187 2.00032373 0 0 Z \",fill:\"#F3D753\",transform:\"translate(188,270)\"})),_path2880||(_path2880=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C2.67 1.65 2.34 3.3 2 5 C0.68 5 -0.64 5 -2 5 C-1.125 1.125 -1.125 1.125 0 0 Z \",fill:\"#5A5843\",transform:\"translate(351,266)\"})),_path2881||(_path2881=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 1.65 0 3.3 0 5 C-0.66 5 -1.32 5 -2 5 C-2 5.66 -2 6.32 -2 7 C-2.66 7 -3.32 7 -4 7 C-4 5.02 -4 3.04 -4 1 C-2 0 -2 0 0 0 Z \",fill:\"#D78870\",transform:\"translate(157,260)\"})),_path2882||(_path2882=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.70884005 1.62339805 3.37446717 3.29319053 5 5 C5 5.66 5 6.32 5 7 C4.01 7 3.02 7 2 7 C2 6.34 2 5.68 2 5 C1.34 5 0.68 5 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#E67B66\",transform:\"translate(8,256)\"})),_path2883||(_path2883=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.33 2.64 0.66 4 1 C4.33 2.98 4.66 4.96 5 7 C4.01 7 3.02 7 2 7 C1.34 4.69 0.68 2.38 0 0 Z \",fill:\"#D88068\",transform:\"translate(202,257)\"})),_path2884||(_path2884=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3 4.96 3 8.92 3 13 C2.34 13 1.68 13 1 13 C0.67 8.71 0.34 4.42 0 0 Z \",fill:\"#CE8361\",transform:\"translate(40,256)\"})),_path2885||(_path2885=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.495 0.99 0.495 2 1 C2 1.99 2 2.98 2 4 C2.66 4 3.32 4 4 4 C4.33 4.99 4.66 5.98 5 7 C4.34 7 3.68 7 3 7 C2.67 7.66 2.34 8.32 2 9 C0.50178941 5.62902617 0 3.79557881 0 0 Z \",fill:\"#8F5E49\",transform:\"translate(87,250)\"})),_path2886||(_path2886=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.1875 0.3125 3.1875 0.3125 6 1 C6 1.66 6 2.32 6 3 C3.03 3 0.06 3 -3 3 C-2.01 2.01 -1.02 1.02 0 0 Z \",fill:\"#593F34\",transform:\"translate(216,250)\"})),_path2887||(_path2887=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0.99 1.98 0.99 4 2 C3.67 3.65 3.34 5.3 3 7 C2.01 7 1.02 7 0 7 C0 4.69 0 2.38 0 0 Z \",fill:\"#784236\",transform:\"translate(0,244)\"})),_path2888||(_path2888=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.29 0.33 8.58 0.66 13 1 C13 1.33 13 1.66 13 2 C9.37 2.33 5.74 2.66 2 3 C2 2.34 2 1.68 2 1 C1.34 0.67 0.68 0.34 0 0 Z \",fill:\"#AC8F77\",transform:\"translate(255,241)\"})),_path2889||(_path2889=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0.33 5.94 0.66 9 1 C8.67 1.66 8.34 2.32 8 3 C5.36 3 2.72 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#62352F\",transform:\"translate(192,241)\"})),_path2890||(_path2890=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.66 1.32 1.32 2 2 C1.625 4.125 1.625 4.125 1 6 C-2 5 -2 5 -3.1875 2.9375 C-3.5896875 1.9784375 -3.5896875 1.9784375 -4 1 C-2.125 0.375 -2.125 0.375 0 0 Z \",fill:\"#C46C58\",transform:\"translate(82,240)\"})),_path2891||(_path2891=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C4.67 0.99 4.34 1.98 4 3 C3.34 3 2.68 3 2 3 C1.67 3.99 1.34 4.98 1 6 C0.34 5.01 -0.32 4.02 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#B7735E\",transform:\"translate(24,237)\"})),_path2892||(_path2892=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3.33 1.32 3.66 2.64 4 4 C3.34 4 2.68 4 2 4 C2 4.66 2 5.32 2 6 C1.34 6 0.68 6 0 6 C-0.38218767 4.34385343 -0.71395102 2.67542976 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#A65C4E\",transform:\"translate(11,232)\"})),_path2893||(_path2893=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3 1.99 3 2.98 3 4 C3.66 4 4.32 4 5 4 C5.33 5.32 5.66 6.64 6 8 C4.125 7.375 4.125 7.375 2 6 C0.75 2.875 0.75 2.875 0 0 Z \",fill:\"#BD7465\",transform:\"translate(34,233)\"})),_path2894||(_path2894=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.66 1.98 1.32 3 2 C3 2.99 3 3.98 3 5 C0.03 4.505 0.03 4.505 -3 4 C-2.67 3.01 -2.34 2.02 -2 1 C-1.34 0.67 -0.68 0.34 0 0 Z \",fill:\"#3A191A\",transform:\"translate(519,230)\"})),_path2895||(_path2895=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.66 1.98 1.32 3 2 C2.67 2.33 2.34 2.66 2 3 C3.32 3.99 4.64 4.98 6 6 C0.25 5.125 0.25 5.125 -2 4 C-2 3.34 -2 2.68 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#DDB37F\",transform:\"translate(198,227)\"})),_path2896||(_path2896=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C0.195625 3.12375 -0.60875 3.2475 -1.4375 3.375 C-2.7059375 3.684375 -2.7059375 3.684375 -4 4 C-4.33 4.66 -4.66 5.32 -5 6 C-5.66 5.01 -6.32 4.02 -7 3 C-4.69 2.01 -2.38 1.02 0 0 Z \",fill:\"#987A61\",transform:\"translate(341,224)\"})),_path2897||(_path2897=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.66 2 1.32 2 2 C2.66 2 3.32 2 4 2 C4.33 2.99 4.66 3.98 5 5 C3.35 5.33 1.7 5.66 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#2C1417\",transform:\"translate(0,222)\"})),_path2898||(_path2898=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.93673644 1.31224548 6.22719294 2.91910327 9 6 C7.35 6 5.7 6 4 6 C3.67 5.01 3.34 4.02 3 3 C1.50014391 1.33289654 1.50014391 1.33289654 0 0 Z \",fill:\"#4A2918\",transform:\"translate(225,216)\"})),_path2899||(_path2899=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-3.47325181 1.1577506 -6.36067448 1.06866652 -10 1 C-10 0.34 -10 -0.32 -10 -1 C-5.92224809 -1.9267618 -3.57818963 -2.33958553 0 0 Z \",fill:\"#363B37\",transform:\"translate(532,211)\"})),_path2900||(_path2900=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 1.32 2 2.64 2 4 C0.35 4.33 -1.3 4.66 -3 5 C-3.33 4.01 -3.66 3.02 -4 2 C-2.68 2 -1.36 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#4D382B\",transform:\"translate(162,203)\"})),_path2901||(_path2901=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-2.64 2.33 -5.28 2.66 -8 3 C-8.33 2.34 -8.66 1.68 -9 1 C-5.57367167 -0.61798838 -3.61944899 -1.34053666 0 0 Z \",fill:\"#427669\",transform:\"translate(570,193)\"})),_path2902||(_path2902=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-2.68841859 2.25245881 -4.64641875 3.88213958 -8 5 C-7.25 2.5625 -7.25 2.5625 -6 0 C-3.40713222 -1.13437965 -2.55267344 -1.27633672 0 0 Z \",fill:\"#402B1F\",transform:\"translate(408,186)\"})),_path2903||(_path2903=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 1.98 2 3.96 2 6 C0.35 6 -1.3 6 -3 6 C-3.33 5.34 -3.66 4.68 -4 4 C-2.68 4 -1.36 4 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#76AB8D\",transform:\"translate(182,176)\"})),_path2904||(_path2904=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C5 0.66 5 1.32 5 2 C6.32 2.66 7.64 3.32 9 4 C5.20442119 4 3.37097383 3.49821059 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#74927A\",transform:\"translate(212,151)\"})),_path2905||(_path2905=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.33 2.31 2.66 4.62 3 7 C1.68 6.34 0.36 5.68 -1 5 C-0.67 3.35 -0.34 1.7 0 0 Z \",fill:\"#E18673\",transform:\"translate(142,136)\"})),_path2906||(_path2906=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.66 2 1.32 2 2 C2.66 2 3.32 2 4 2 C4 3.32 4 4.64 4 6 C2.35 5.67 0.7 5.34 -1 5 C-0.34 4.67 0.32 4.34 1 4 C0.67 2.68 0.34 1.36 0 0 Z \",fill:\"#B55A51\",transform:\"translate(146,130)\"})),_path2907||(_path2907=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 3 0 3 -2.5 5.6875 C-3.325 6.450625 -4.15 7.21375 -5 8 C-5.99 7.67 -6.98 7.34 -8 7 C-5.36 4.69 -2.72 2.38 0 0 Z \",fill:\"#231513\",transform:\"translate(459,126)\"})),_path2908||(_path2908=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C2.67 2.32 2.34 3.64 2 5 C1.34 5 0.68 5 0 5 C-0.33 6.32 -0.66 7.64 -1 9 C-1.09765625 2.84765625 -1.09765625 2.84765625 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#8E6348\",transform:\"translate(138,119)\"})),_path2909||(_path2909=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.24822374 0.47202486 6.19989709 2.96655518 9 6 C4.75177626 5.52797514 2.80010291 3.03344482 0 0 Z \",fill:\"#E0BC87\",transform:\"translate(97,122)\"})),_path2910||(_path2910=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3 3.625 3 3.625 3 7 C0.525 6.01 0.525 6.01 -2 5 C-1.34 3.35 -0.68 1.7 0 0 Z \",fill:\"#D88C65\",transform:\"translate(145,119)\"})),_path2911||(_path2911=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0 4.62 0 7 0 C5.68 1.65 4.36 3.3 3 5 C2.67 4.01 2.34 3.02 2 2 C1.34 2 0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#556E60\",transform:\"translate(450,82)\"})),_path2912||(_path2912=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.33 2.64 2.66 5.28 3 8 C2.01 7.67 1.02 7.34 0 7 C0 4.69 0 2.38 0 0 Z \",fill:\"#A97D5E\",transform:\"translate(112,32)\"})),_path2913||(_path2913=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C0.52307692 4.67692308 0.52307692 4.67692308 -2.125 6.3125 C-3.053125 6.6528125 -3.053125 6.6528125 -4 7 C-2.79618552 4.50638429 -1.54571278 2.31856917 0 0 Z \",fill:\"#926449\",transform:\"translate(66,614)\"})),_path2914||(_path2914=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C3.27678571 8.03571429 3.27678571 8.03571429 2 12 C-0.13586678 8.79619983 -0.23132175 7.98060033 -0.125 4.3125 C-0.10695313 3.50425781 -0.08890625 2.69601562 -0.0703125 1.86328125 C-0.04710937 1.24839844 -0.02390625 0.63351562 0 0 Z \",fill:\"#F2BD9B\",transform:\"translate(368,568)\"})),_path2915||(_path2915=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C3.01669827 3.13350534 3.01669827 3.13350534 5 4 C5 4.66 5 5.32 5 6 C1.73045798 5.43628586 0.17424117 4.50037734 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#5B3C2F\",transform:\"translate(612,552)\"})),_path2916||(_path2916=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.66 1.98 1.32 3 2 C1.35 4.31 -0.3 6.62 -2 9 C-2.33 8.34 -2.66 7.68 -3 7 C-2.06421005 4.64018187 -1.06652192 2.30368736 0 0 Z \",fill:\"#865B45\",transform:\"translate(128,538)\"})),_path2917||(_path2917=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 3.41761705 -0.75938546 5.82954062 -2 9 C-2.99 9.495 -2.99 9.495 -4 10 C-3.43454163 6.04179141 -2.19097652 3.3340947 0 0 Z \",fill:\"#4B3026\",transform:\"translate(177,533)\"})),_path2918||(_path2918=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C2.95125002 2.62187494 2.35068687 3.79371361 -0.125 5.25 C-0.74375 5.4975 -1.3625 5.745 -2 6 C-1.34 4.02 -0.68 2.04 0 0 Z \",fill:\"#966346\",transform:\"translate(166,520)\"})),_path2919||(_path2919=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4 1.32 4 2.64 4 4 C3.01 4 2.02 4 1 4 C0.67 4.66 0.34 5.32 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#726151\",transform:\"translate(344,520)\"})),_path2920||(_path2920=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.66666667 1.33333333 5.33333333 2.66666667 8 4 C7.67 4.66 7.34 5.32 7 6 C2.32307692 4.52307692 2.32307692 4.52307692 0.6875 1.875 C0.460625 1.25625 0.23375 0.6375 0 0 Z \",fill:\"#704933\",transform:\"translate(535,499)\"})),_path2921||(_path2921=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C0.66 2.33 1.32 2.66 2 3 C-0.25 3.6875 -0.25 3.6875 -3 4 C-5.3125 2.5625 -5.3125 2.5625 -7 1 C-4 0 -4 0 0 0 Z \",fill:\"#3C201D\",transform:\"translate(412,492)\"})),_path2922||(_path2922=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.91517292 1.07401108 4.77810176 1.77810176 7 4 C6.67 4.99 6.34 5.98 6 7 C1.125 3.375 1.125 3.375 0 0 Z \",fill:\"#784F36\",transform:\"translate(538,489)\"})),_path2923||(_path2923=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0 4.62 0 7 0 C6.01 1.485 6.01 1.485 5 3 C2.375 3.1875 2.375 3.1875 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#0F0906\",transform:\"translate(428,488)\"})),_path2924||(_path2924=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.33 2.64 0.66 4 1 C3.67 1.66 3.34 2.32 3 3 C3.99 3.33 4.98 3.66 6 4 C4.02 4.99 4.02 4.99 2 6 C1.34 4.02 0.68 2.04 0 0 Z \",fill:\"#DE947E\",transform:\"translate(415,485)\"})),_path2925||(_path2925=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.875 0.3125 2.875 0.3125 6 1 C6.66 1.99 7.32 2.98 8 4 C4 4 4 4 1.75 2 C1.1725 1.34 0.595 0.68 0 0 Z \",fill:\"#E1C09A\",transform:\"translate(541,483)\"})),_path2926||(_path2926=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0 4.62 0 7 0 C7 0.66 7 1.32 7 2 C4.69 2.33 2.38 2.66 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#FEDFC6\",transform:\"translate(389,467)\"})),_path2927||(_path2927=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.99 0 1.98 0 3 C-0.66 3.66 -1.32 4.32 -2 5 C-2.103125 4.360625 -2.20625 3.72125 -2.3125 3.0625 C-2.539375 2.381875 -2.76625 1.70125 -3 1 C-3.99 0.67 -4.98 0.34 -6 0 C-3.50907189 -1.24546405 -2.58919267 -0.7767578 0 0 Z \",fill:\"#9C684B\",transform:\"translate(496,463)\"})),_path2928||(_path2928=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.66 1.98 1.32 3 2 C2.195625 2.12375 1.39125 2.2475 0.5625 2.375 C-0.7059375 2.684375 -0.7059375 2.684375 -2 3 C-2.33 3.66 -2.66 4.32 -3 5 C-3.99 4.01 -4.98 3.02 -6 2 C-3.1875 0.875 -3.1875 0.875 0 0 Z \",fill:\"#7B543F\",transform:\"translate(590,461)\"})),_path2929||(_path2929=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.93673644 1.31224548 6.22719294 2.91910327 9 6 C4.58763974 6 3.21615077 3.9302707 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#87563C\",transform:\"translate(504,462)\"})),_path2930||(_path2930=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.33 1.32 -0.66 2.64 -1 4 C-2.65 4 -4.3 4 -6 4 C-6 3.01 -6 2.02 -6 1 C-3 0 -3 0 0 0 Z \",fill:\"#9F7B3B\",transform:\"translate(318,460)\"})),_path2931||(_path2931=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0.99 1.98 0.99 4 2 C4 3.65 4 5.3 4 7 C3.01 7 2.02 7 1 7 C0.67 4.69 0.34 2.38 0 0 Z \",fill:\"#F4AF86\",transform:\"translate(386,454)\"})),_path2932||(_path2932=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0 4.62 0 7 0 C6.67 1.65 6.34 3.3 6 5 C3.98079663 3.69593116 1.98075027 2.36176581 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#EBD1AA\",transform:\"translate(504,454)\"})),_path2933||(_path2933=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C2.98 3 4.96 3 7 3 C6.67 3.99 6.34 4.98 6 6 C3.9375 6.6875 3.9375 6.6875 2 7 C2.33 6.01 2.66 5.02 3 4 C2.01 4 1.02 4 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#3D2E23\",transform:\"translate(81,451)\"})),_path2934||(_path2934=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0 5.28 0 8 0 C8 0.66 8 1.32 8 2 C6.35 2 4.7 2 3 2 C2.67 2.66 2.34 3.32 2 4 C2 3.34 2 2.68 2 2 C1.34 2 0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#BB4858\",transform:\"translate(298,452)\"})),_path2935||(_path2935=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.96 1.98 3.96 1.98 8 4 C4 5 4 5 1.75 4.0625 C1.1725 3.711875 0.595 3.36125 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#664232\",transform:\"translate(552,450)\"})),_path2936||(_path2936=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C5 0.99 5 1.98 5 3 C2.36 3.33 -0.28 3.66 -3 4 C-1.68 3.67 -0.36 3.34 1 3 C0.67 2.01 0.34 1.02 0 0 Z \",fill:\"#EF3C4C\",transform:\"translate(322,448)\"})),_path2937||(_path2937=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C0.75823305 1.70226141 -0.49385599 2.38629109 -1.75 3.0625 C-2.79414062 3.63677734 -2.79414062 3.63677734 -3.859375 4.22265625 C-6.36140628 5.1312406 -7.5332355 4.88336837 -10 4 C-3.375 1.125 -3.375 1.125 0 0 Z \",fill:\"#252422\",transform:\"translate(117,436)\"})),_path2938||(_path2938=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 3.96 2 7.92 2 12 C1.67 12 1.34 12 1 12 C1 9.36 1 6.72 1 4 C0.34 4 -0.32 4 -1 4 C-0.67 2.68 -0.34 1.36 0 0 Z \",fill:\"#1F0803\",transform:\"translate(361,436)\"})),_path2939||(_path2939=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3.33 1.98 3.66 3.96 4 6 C3.34 6 2.68 6 2 6 C2 5.34 2 4.68 2 4 C1.34 4 0.68 4 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#282324\",transform:\"translate(361,417)\"})),_path2940||(_path2940=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C6.625 -0.125 6.625 -0.125 10 1 C10 1.66 10 2.32 10 3 C8.35 3.33 6.7 3.66 5 4 C5 3.34 5 2.68 5 2 C3.35 1.67 1.7 1.34 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#483326\",transform:\"translate(23,416)\"})),_path2941||(_path2941=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.29 0.33 8.58 0.66 13 1 C13 1.33 13 1.66 13 2 C6.565 2.495 6.565 2.495 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#BBC297\",transform:\"translate(567,406)\"})),_path2942||(_path2942=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0.33 5.94 0.66 9 1 C8.67 1.66 8.34 2.32 8 3 C5.36 3 2.72 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#DFECC3\",transform:\"translate(558,405)\"})),_path2943||(_path2943=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.33 2.64 0.66 4 1 C4 2.66666667 4 4.33333333 4 6 C2.68 6 1.36 6 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#D92101\",transform:\"translate(90,395)\"})),_path2944||(_path2944=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3 0.66 3 1.32 3 2 C4.32 2.66 5.64 3.32 7 4 C4.69 4 2.38 4 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#C9E1A3\",transform:\"translate(561,392)\"})),_path2945||(_path2945=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0 4.62 0 7 0 C7 0.66 7 1.32 7 2 C8.65 2 10.3 2 12 2 C12 2.33 12 2.66 12 3 C9.36 3 6.72 3 4 3 C4 2.34 4 1.68 4 1 C2.68 0.67 1.36 0.34 0 0 Z \",fill:\"#C7DAAB\",transform:\"translate(569,393)\"})),_path2946||(_path2946=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.56687367 3.8503105 1.83288724 5.58569763 1 10 C-1.56687367 6.1496895 -0.83288724 4.41430237 0 0 Z \",fill:\"#DCBA97\",transform:\"translate(475,391)\"})),_path2947||(_path2947=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4 0.66 4 1.32 4 2 C4.66 2.33 5.32 2.66 6 3 C2.7 3 -0.6 3 -4 3 C-2.68 2.67 -1.36 2.34 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#BC2D28\",transform:\"translate(26,388)\"})),_path2948||(_path2948=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0 4.62 0 7 0 C7 1.32 7 2.64 7 4 C3.73045798 3.43628586 2.17424117 2.50037734 0 0 Z \",fill:\"#F6EBB8\",transform:\"translate(464,388)\"})),_path2949||(_path2949=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.81684226 1.55500981 6.19195732 4.03595495 9 7 C5.56072421 5.7580393 2.74792181 4.44259716 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#7B321A\",transform:\"translate(341,383)\"})),_path2950||(_path2950=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0.99 1.98 0.99 4 2 C3.67 3.32 3.34 4.64 3 6 C2.01 6 1.02 6 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#616C49\",transform:\"translate(438,385)\"})),_path2951||(_path2951=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.33 0.66 -0.66 1.32 -1 2 C-1.66 2 -2.32 2 -3 2 C-3.66 2.66 -4.32 3.32 -5 4 C-5 3.34 -5 2.68 -5 2 C-5.66 2 -6.32 2 -7 2 C-7 1.34 -7 0.68 -7 0 C-4.3333581 -1.33332095 -2.83319697 -0.67102033 0 0 Z \",fill:\"#F17E62\",transform:\"translate(133,384)\"})),_path2952||(_path2952=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C2.814375 1.11375 2.62875 2.2275 2.4375 3.375 C1.68319343 6.82568861 1.68319343 6.82568861 3 9 C2.01 9 1.02 9 0 9 C0 6.03 0 3.06 0 0 Z \",fill:\"#79A14D\",transform:\"translate(313,374)\"})),_path2953||(_path2953=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0 5.94 0 9 0 C8.34 1.32 7.68 2.64 7 4 C6.01 4 5.02 4 4 4 C4 3.01 4 2.02 4 1 C3.01 1.33 2.02 1.66 1 2 C0.67 1.34 0.34 0.68 0 0 Z \",fill:\"#C7CF81\",transform:\"translate(576,378)\"})),_path2954||(_path2954=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.42944945 2.35438733 2.08661261 3.48032433 1.625 6.25 C1.41875 6.8275 1.2125 7.405 1 8 C1 7.34 1 6.68 1 6 C0.34 6 -0.32 6 -1 6 C-1 5.34 -1 4.68 -1 4 C-1.66 4 -2.32 4 -3 4 C-3 3.34 -3 2.68 -3 2 C-2.01 2 -1.02 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#D91410\",transform:\"translate(31,376)\"})),_path2955||(_path2955=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0.33 5.28 0.66 8 1 C7.67 1.66 7.34 2.32 7 3 C4.69 2.67 2.38 2.34 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#A16C53\",transform:\"translate(542,368)\"})),_path2956||(_path2956=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C0.67 4.62 0.34 9.24 0 14 C-0.33 14 -0.66 14 -1 14 C-1.22226864 12.23086176 -1.42733873 10.45955629 -1.625 8.6875 C-1.74101563 7.70136719 -1.85703125 6.71523438 -1.9765625 5.69921875 C-2 3 -2 3 0 0 Z \",fill:\"#17130E\",transform:\"translate(607,358)\"})),_path2957||(_path2957=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0.66 3.96 1.32 6 2 C6 3.32 6 4.64 6 6 C5.34 6 4.68 6 4 6 C3.67 5.34 3.34 4.68 3 4 C2.01 3.67 1.02 3.34 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#DFE2BF\",transform:\"translate(518,362)\"})),_path2958||(_path2958=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2 2.65 2 4.3 2 6 C0.68 6.33 -0.64 6.66 -2 7 C-1.34 4.69 -0.68 2.38 0 0 Z \",fill:\"#265055\",transform:\"translate(95,361)\"})),_path2959||(_path2959=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0 5.28 0 8 0 C8.33 0.66 8.66 1.32 9 2 C7.02 2.33 5.04 2.66 3 3 C3 2.34 3 1.68 3 1 C2.01 0.67 1.02 0.34 0 0 Z \",fill:\"#240C10\",transform:\"translate(131,361)\"})),_path2960||(_path2960=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 1.32 0.66 2.64 1 4 C0.34 4 -0.32 4 -1 4 C-1 4.66 -1 5.32 -1 6 C-1.99 5.67 -2.98 5.34 -4 5 C-3.6875 3.0625 -3.6875 3.0625 -3 1 C-2.01 0.67 -1.02 0.34 0 0 Z \",fill:\"#423F29\",transform:\"translate(50,350)\"})),_path2961||(_path2961=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.3 0.99 6.6 1.98 10 3 C9.01 3.66 8.02 4.32 7 5 C3.875 4.3125 3.875 4.3125 1 3 C0.67 2.01 0.34 1.02 0 0 Z \",fill:\"#8F604C\",transform:\"translate(536,345)\"})),_path2962||(_path2962=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0.33 5.28 0.66 8 1 C8 1.66 8 2.32 8 3 C5.36 3 2.72 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#140B0B\",transform:\"translate(310,333)\"})),_path2963||(_path2963=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3 1.98 3 3.96 3 6 C2.01 5.67 1.02 5.34 0 5 C0 4.34 0 3.68 0 3 C-0.66 2.67 -1.32 2.34 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#E8E1D8\",transform:\"translate(502,327)\"})),_path2964||(_path2964=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0 3.96 0 6 0 C5.01 0.33 4.02 0.66 3 1 C1.77479736 4.00847418 1.77479736 4.00847418 1 7 C0.67 7 0.34 7 0 7 C0 4.69 0 2.38 0 0 Z \",fill:\"#93A262\",transform:\"translate(202,327)\"})),_path2965||(_path2965=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.99 2 1.98 2 3 C2.66 3.33 3.32 3.66 4 4 C3.34 4 2.68 4 2 4 C2 5.32 2 6.64 2 8 C1.34 8 0.68 8 0 8 C0 5.36 0 2.72 0 0 Z \",fill:\"#5B0519\",transform:\"translate(74,324)\"})),_path2966||(_path2966=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3 1.66 3 2.32 3 3 C4.65 3.33 6.3 3.66 8 4 C8 4.33 8 4.66 8 5 C2.25 5.125 2.25 5.125 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#112017\",transform:\"translate(379,325)\"})),_path2967||(_path2967=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C1.32 2 2.64 2 4 2 C3.67 3.32 3.34 4.64 3 6 C0.37098712 4.47793991 -1.84365964 3.15634036 -4 1 C-2 0 -2 0 0 0 Z \",fill:\"#91D292\",transform:\"translate(484,322)\"})),_path2968||(_path2968=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 2.31 1 4.62 1 7 C-0.65 6.67 -2.3 6.34 -4 6 C-3 4 -3 4 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#AF9756\",transform:\"translate(257,318)\"})),_path2969||(_path2969=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C5.75 -0.125 5.75 -0.125 8 1 C8 1.66 8 2.32 8 3 C6.02 3 4.04 3 2 3 C2 2.34 2 1.68 2 1 C1.34 0.67 0.68 0.34 0 0 Z \",fill:\"#0B1919\",transform:\"translate(446,315)\"})),_path2970||(_path2970=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.12375 1.11375 2.2475 2.2275 2.375 3.375 C2.6465813 7.03103677 2.6465813 7.03103677 5 9 C3.68 9 2.36 9 1 9 C0.67 6.03 0.34 3.06 0 0 Z \",fill:\"#0A321E\",transform:\"translate(228,312)\"})),_path2971||(_path2971=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4 1.98 4 3.96 4 6 C2.68 5.34 1.36 4.68 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#420309\",transform:\"translate(166,312)\"})),_path2972||(_path2972=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4.66 2.31 5.32 4.62 6 7 C5.01 6.67 4.02 6.34 3 6 C2.87625 5.195625 2.7525 4.39125 2.625 3.5625 C2.315625 2.2940625 2.315625 2.2940625 2 1 C1.34 0.67 0.68 0.34 0 0 Z \",fill:\"#A6AB69\",transform:\"translate(384,308)\"})),_path2973||(_path2973=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C1.66 3.33 2.32 3.66 3 4 C0.04335481 5.4783226 -2.74229737 5.06032783 -6 5 C-5.67 4.34 -5.34 3.68 -5 3 C-3.35 3 -1.7 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#777949\",transform:\"translate(238,304)\"})),_path2974||(_path2974=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 1.65 0 3.3 0 5 C-1.32 5 -2.64 5 -4 5 C-4 3.68 -4 2.36 -4 1 C-2 0 -2 0 0 0 Z \",fill:\"#158661\",transform:\"translate(457,305)\"})),_path2975||(_path2975=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C2.67 1.98 2.34 3.96 2 6 C0.68 6 -0.64 6 -2 6 C-2 5.34 -2 4.68 -2 4 C-1.34 4 -0.68 4 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#1B0306\",transform:\"translate(466,302)\"})),_path2976||(_path2976=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C3.01508358 3.73323796 3.01508358 3.73323796 5 4 C4.67 4.99 4.34 5.98 4 7 C1.525 6.01 1.525 6.01 -1 5 C-0.67 3.35 -0.34 1.7 0 0 Z \",fill:\"#C5D8AC\",transform:\"translate(481,297)\"})),_path2977||(_path2977=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.02045442 0.60183749 4.02111039 1.27306096 6 2 C6.33 2.66 6.66 3.32 7 4 C5.68 3.67 4.36 3.34 3 3 C2.67 3.66 2.34 4.32 2 5 C2.66 5.33 3.32 5.66 4 6 C3.01 6 2.02 6 1 6 C0.67 4.02 0.34 2.04 0 0 Z \",fill:\"#BB8265\",transform:\"translate(352,299)\"})),_path2978||(_path2978=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 1.98 1 3.96 1 6 C-0.65 6 -2.3 6 -4 6 C-4 5.34 -4 4.68 -4 4 C-3.34 4 -2.68 4 -2 4 C-2 3.34 -2 2.68 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#281205\",transform:\"translate(608,284)\"})),_path2979||(_path2979=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C0.67 2.97 0.34 5.94 0 9 C-1.32 7.35 -2.64 5.7 -4 4 C-3.34 3.34 -2.68 2.68 -2 2 C-2 2.66 -2 3.32 -2 4 C-1.34 4 -0.68 4 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#EB8052\",transform:\"translate(168,278)\"})),_path2980||(_path2980=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 1.65 2 3.3 2 5 C0.02 5 -1.96 5 -4 5 C-4 4.34 -4 3.68 -4 3 C-2.68 3 -1.36 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#F5C747\",transform:\"translate(184,271)\"})),_path2981||(_path2981=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.97 0.495 2.97 0.495 6 1 C6 1.66 6 2.32 6 3 C3.03 3 0.06 3 -3 3 C-2.67 2.34 -2.34 1.68 -2 1 C-1.34 1.33 -0.68 1.66 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#8CB276\",transform:\"translate(456,270)\"})),_path2982||(_path2982=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1.33 2.64 1.66 5.28 2 8 C1.01 8.33 0.02 8.66 -1 9 C-1.33 7.02 -1.66 5.04 -2 3 C-1.34 3 -0.68 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#E29876\",transform:\"translate(120,255)\"})),_path2983||(_path2983=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.66 2.64 1.32 4 2 C3.34 2 2.68 2 2 2 C1.896875 2.639375 1.79375 3.27875 1.6875 3.9375 C1.460625 4.618125 1.23375 5.29875 1 6 C0.01 6.33 -0.98 6.66 -2 7 C-1.125 2.25 -1.125 2.25 0 0 Z \",fill:\"#3C2C1C\",transform:\"translate(55,257)\"})),_path2984||(_path2984=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.09350689 3.4019487 2.17942163 6.05272412 2 10 C1.01 10.495 1.01 10.495 0 11 C0 9.35 0 7.7 0 6 C-0.66 5.67 -1.32 5.34 -2 5 C-1.34 3.35 -0.68 1.7 0 0 Z \",fill:\"#7B4531\",transform:\"translate(110,247)\"})),_path2985||(_path2985=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C1.99 2.33 2.98 2.66 4 3 C4 3.66 4 4.32 4 5 C1.03 4.505 1.03 4.505 -2 4 C-1 1 -1 1 0 0 Z \",fill:\"#8F5743\",transform:\"translate(150,249)\"})),_path2986||(_path2986=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0 4.62 0 7 0 C7 0.66 7 1.32 7 2 C5.68 2 4.36 2 3 2 C2.67 2.99 2.34 3.98 2 5 C0 1.125 0 1.125 0 0 Z \",fill:\"#50312D\",transform:\"translate(411,250)\"})),_path2987||(_path2987=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1.67 1.66 1.34 2.32 1 3 C0.34 3 -0.32 3 -1 3 C-1 3.99 -1 4.98 -1 6 C-1.99 5.67 -2.98 5.34 -4 5 C-4 3.68 -4 2.36 -4 1 C-2.68 1.33 -1.36 1.66 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#905740\",transform:\"translate(62,246)\"})),_path2988||(_path2988=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 1.32 2.64 2.64 4 4 C3.34 4 2.68 4 2 4 C2 4.99 2 5.98 2 7 C1.01 6.67 0.02 6.34 -1 6 C-1.33 5.01 -1.66 4.02 -2 3 C-1.34 3 -0.68 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#9A5B48\",transform:\"translate(127,246)\"})),_path2989||(_path2989=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.66 2.31 3.32 4.62 4 7 C1.525 6.01 1.525 6.01 -1 5 C-0.67 3.35 -0.34 1.7 0 0 Z \",fill:\"#714531\",transform:\"translate(78,243)\"})),_path2990||(_path2990=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0 4.62 0 7 0 C6.01 0.495 6.01 0.495 5 1 C5 1.66 5 2.32 5 3 C4.34 3 3.68 3 3 3 C2.67 3.66 2.34 4.32 2 5 C2 4.34 2 3.68 2 3 C1.01 2.67 0.02 2.34 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#975642\",transform:\"translate(107,244)\"})),_path2991||(_path2991=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.66 2 1.32 2 2 C2.66 2 3.32 2 4 2 C3.67 3.32 3.34 4.64 3 6 C1.68 5.34 0.36 4.68 -1 4 C-0.67 2.68 -0.34 1.36 0 0 Z \",fill:\"#59302E\",transform:\"translate(112,240)\"})),_path2992||(_path2992=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0.66 4.62 1.32 7 2 C7 2.99 7 3.98 7 5 C5.68 4.67 4.36 4.34 3 4 C3 3.34 3 2.68 3 2 C2.01 1.67 1.02 1.34 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#A86750\",transform:\"translate(54,237)\"})),_path2993||(_path2993=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C1.99 2 2.98 2 4 2 C4 2.66 4 3.32 4 4 C1.03 4 -1.94 4 -5 4 C-4.34 3.34 -3.68 2.68 -3 2 C-2.01 2 -1.02 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#B1A484\",transform:\"translate(339,234)\"})),_path2994||(_path2994=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3.6875 3.0625 3.6875 3.0625 4 5 C2.35 4.67 0.7 4.34 -1 4 C-1 1 -1 1 0 0 Z \",fill:\"#613229\",transform:\"translate(67,235)\"})),_path2995||(_path2995=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C4.75 0.875 4.75 0.875 7 2 C7 2.66 7 3.32 7 4 C7.66 4.33 8.32 4.66 9 5 C4.68607774 4.5206753 2.83430453 3.2542015 0 0 Z \",fill:\"#462820\",transform:\"translate(229,225)\"})),_path2996||(_path2996=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-2.25 1.625 -2.25 1.625 -5 3 C-7.3125 2.1875 -7.3125 2.1875 -9 1 C-5.57367167 -0.61798838 -3.61944899 -1.34053666 0 0 Z \",fill:\"#6A5449\",transform:\"translate(366,226)\"})),_path2997||(_path2997=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C-2.465 4.485 -2.465 4.485 -6 6 C-6 5.01 -6 4.02 -6 3 C-4.02 2.01 -2.04 1.02 0 0 Z \",fill:\"#7D6252\",transform:\"translate(348,221)\"})),_path2998||(_path2998=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.9375 0.3125 1.9375 0.3125 4 1 C4.33 1.99 4.66 2.98 5 4 C3.02 4 1.04 4 -1 4 C-0.67 2.68 -0.34 1.36 0 0 Z \",fill:\"#343E36\",transform:\"translate(485,220)\"})),_path2999||(_path2999=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0.66 4.62 1.32 7 2 C6.67 2.99 6.34 3.98 6 5 C3.69 4.01 1.38 3.02 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#A78259\",transform:\"translate(176,216)\"})),_path3000||(_path3000=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0.33 4.62 0.66 7 1 C5.68 1.99 4.36 2.98 3 4 C1.68 3.34 0.36 2.68 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#3A2A24\",transform:\"translate(436,205)\"})),_path3001||(_path3001=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.93673644 1.31224548 6.22719294 2.91910327 9 6 C4.9666466 6 3.16482462 4.39120082 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#8B654A\",transform:\"translate(189,196)\"})),_path3002||(_path3002=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-0.33 0.66 -0.66 1.32 -1 2 C-3.875 2.75 -3.875 2.75 -7 3 C-7.99 2.34 -8.98 1.68 -10 1 C-6.52674819 -0.1577506 -3.63932552 -0.06866652 0 0 Z \",fill:\"#528375\",transform:\"translate(562,195)\"})),_path3003||(_path3003=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.37503669 1.1858237 5.64722731 2.27573689 8 5 C7.01 5.33 6.02 5.66 5 6 C5 5.34 5 4.68 5 4 C2.525 3.01 2.525 3.01 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#212220\",transform:\"translate(611,187)\"})),_path3004||(_path3004=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C3.33 1.65 3.66 3.3 4 5 C3.34 5 2.68 5 2 5 C1.67 5.99 1.34 6.98 1 8 C0.67 5.36 0.34 2.72 0 0 Z \",fill:\"#3A251E\",transform:\"translate(102,172)\"})),_path3005||(_path3005=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.33 2.64 0.66 4 1 C4 1.66 4 2.32 4 3 C3.01 3.33 2.02 3.66 1 4 C-0.34090759 4.65129797 -1.67592331 5.31513275 -3 6 C-2.01 4.02 -1.02 2.04 0 0 Z \",fill:\"#6B422B\",transform:\"translate(60,157)\"})),_path3006||(_path3006=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C1.375 4.875 1.375 4.875 -2 6 C-1.34 4.02 -0.68 2.04 0 0 Z \",fill:\"#939F89\",transform:\"translate(434,138)\"})),_path3007||(_path3007=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.86625 0.4640625 0.86625 0.4640625 1.75 0.9375 C3.84294184 1.92583364 5.74535275 2.5168613 8 3 C7.67 4.32 7.34 5.64 7 7 C3.00003714 5.66667905 2.16217663 3.5042173 0 0 Z \",fill:\"#675946\",transform:\"translate(113,129)\"})),_path3008||(_path3008=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 3 0 3 -2.375 5.6875 C-5 8 -5 8 -7 8 C-5.50902342 4.2047869 -3.24299151 2.38957269 0 0 Z \",fill:\"#8DA78C\",transform:\"translate(407,128)\"})),_path3009||(_path3009=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-0.66 2 -1.32 2 -2 2 C-1.67 2.99 -1.34 3.98 -1 5 C-1.66 5 -2.32 5 -3 5 C-3 4.34 -3 3.68 -3 3 C-3.66 3 -4.32 3 -5 3 C-5.33 2.01 -5.66 1.02 -6 0 C-2.25 -1.125 -2.25 -1.125 0 0 Z \",fill:\"#8A553E\",transform:\"translate(151,127)\"})),_path3010||(_path3010=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.66 2 1.32 2 2 C3.32 2.33 4.64 2.66 6 3 C1.545 3.495 1.545 3.495 -3 4 C-3 3.34 -3 2.68 -3 2 C-2.01 2 -1.02 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#8A7754\",transform:\"translate(451,78)\"})),_path3011||(_path3011=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.96661363 3.12180401 2.98988909 5.52083795 2.5625 8.75 C2.40974609 9.94882813 2.40974609 9.94882813 2.25390625 11.171875 C2.12822266 12.07679687 2.12822266 12.07679687 2 13 C1.67 13 1.34 13 1 13 C0.67 8.71 0.34 4.42 0 0 Z \",fill:\"#9F7957\",transform:\"translate(145,72)\"})),_path3012||(_path3012=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.33 2.64 0.66 4 1 C4 1.66 4 2.32 4 3 C4.99 3.33 5.98 3.66 7 4 C7 4.66 7 5.32 7 6 C2.32307692 4.52307692 2.32307692 4.52307692 0.6875 1.875 C0.460625 1.25625 0.23375 0.6375 0 0 Z \",fill:\"#2C2320\",transform:\"translate(37,71)\"})),_path3013||(_path3013=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4 1.32 4 2.64 4 4 C2.35 4 0.7 4 -1 4 C-0.67 2.68 -0.34 1.36 0 0 Z \",fill:\"#D0976C\",transform:\"translate(460,71)\"})),_path3014||(_path3014=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.62187494 1.04874998 3.79371361 1.64931313 5.25 4.125 C5.4975 4.74375 5.745 5.3625 6 6 C4.02 5.34 2.04 4.68 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#130F12\",transform:\"translate(16,60)\"})),_path3015||(_path3015=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 1.65 3.3 3.3 5 5 C3.68 5 2.36 5 1 5 C0.34 3.68 -0.32 2.36 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#24160F\",transform:\"translate(90,38)\"})),_path3016||(_path3016=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C-0.98 4.97 -0.98 4.97 -3 8 C-3.99 7.67 -4.98 7.34 -6 7 C-4.02 4.69 -2.04 2.38 0 0 Z \",fill:\"#203A30\",transform:\"translate(509,6)\"})),_path3017||(_path3017=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 1.98 1 3.96 1 6 C0.01 6.33 -0.98 6.66 -2 7 C-2.125 4.625 -2.125 4.625 -2 2 C-1.34 1.34 -0.68 0.68 0 0 Z \",fill:\"#F5C7A0\",transform:\"translate(275,603)\"})),_path3018||(_path3018=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 1.3125 2 1.3125 4 3 C4 3.99 4 4.98 4 6 C2.68 5.67 1.36 5.34 0 5 C0 3.35 0 1.7 0 0 Z \",fill:\"#5C3D2F\",transform:\"translate(582,562)\"})),_path3019||(_path3019=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.33 2.64 0.66 4 1 C4.33 2.32 4.66 3.64 5 5 C4.01 5 3.02 5 2 5 C1.34 3.35 0.68 1.7 0 0 Z \",fill:\"#81543E\",transform:\"translate(576,540)\"})),_path3020||(_path3020=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.33 2.64 0.66 4 1 C4.33 2.32 4.66 3.64 5 5 C3.68 5 2.36 5 1 5 C0.67 3.35 0.34 1.7 0 0 Z \",fill:\"#1E1A1E\",transform:\"translate(375,499)\"})),_path3021||(_path3021=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C0.71034824 2.37562854 -0.62689293 3.70766393 -2 5 C-2.66 5 -3.32 5 -4 5 C-3.6875 3.0625 -3.6875 3.0625 -3 1 C-2.01 0.67 -1.02 0.34 0 0 Z \",fill:\"#64272B\",transform:\"translate(246,496)\"})),_path3022||(_path3022=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.33 0 0.66 0 1 C-3.63 1.66 -7.26 2.32 -11 3 C-10.34 2.67 -9.68 2.34 -9 2 C-9 1.34 -9 0.68 -9 0 C-5.52176885 -1.15941038 -3.54104422 -0.70820884 0 0 Z \",fill:\"#A97757\",transform:\"translate(441,494)\"})),_path3023||(_path3023=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.63 0 7.26 0 11 0 C10.01 0.33 9.02 0.66 8 1 C8 1.66 8 2.32 8 3 C7.01 3 6.02 3 5 3 C5 2.34 5 1.68 5 1 C3.35 1 1.7 1 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#321217\",transform:\"translate(434,481)\"})),_path3024||(_path3024=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.33 2.64 0.66 4 1 C3.67 2.65 3.34 4.3 3 6 C2.34 5.67 1.68 5.34 1 5 C0.375 2.4375 0.375 2.4375 0 0 Z \",fill:\"#BE4F48\",transform:\"translate(430,473)\"})),_path3025||(_path3025=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.475 0.99 2.475 0.99 5 2 C4.67 2.99 4.34 3.98 4 5 C2.02 4.01 0.04 3.02 -2 2 C-1.34 1.34 -0.68 0.68 0 0 Z \",fill:\"#6B4735\",transform:\"translate(593,462)\"})),_path3026||(_path3026=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0.66 3.96 1.32 6 2 C5.01 2.495 5.01 2.495 4 3 C4 3.66 4 4.32 4 5 C3.01 4.67 2.02 4.34 1 4 C0.3125 1.9375 0.3125 1.9375 0 0 Z \",fill:\"#9A5B42\",transform:\"translate(382,440)\"})),_path3027||(_path3027=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.125 -0.1875 3.125 -0.1875 6 0 C5.01 0.495 5.01 0.495 4 1 C4 1.66 4 2.32 4 3 C2.02 3 0.04 3 -2 3 C-1.34 2.01 -0.68 1.02 0 0 Z \",fill:\"#7B503B\",transform:\"translate(110,434)\"})),_path3028||(_path3028=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0 5.28 0 8 0 C4 2 4 2 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#523E36\",transform:\"translate(480,417)\"})),_path3029||(_path3029=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.875 0.875 3.875 0.875 5 2 C5.04080783 3.99958364 5.04254356 6.00045254 5 8 C4.34 7.67 3.68 7.34 3 7 C2.66666667 5 2.33333333 3 2 1 C1.34 0.67 0.68 0.34 0 0 Z \",fill:\"#C9A886\",transform:\"translate(218,417)\"})),_path3030||(_path3030=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C3.45925163 1.2491742 6.14693203 2.67527795 9 5 C5.65626525 4.44271087 2.96687001 3.64826111 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#4A3F38\",transform:\"translate(375,412)\"})),_path3031||(_path3031=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.99 0 1.98 0 3 C-2.64 2.67 -5.28 2.34 -8 2 C-4.91190305 0.23537317 -3.76687864 0 0 0 Z \",fill:\"#020501\",transform:\"translate(360,411)\"})),_path3032||(_path3032=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0 4.62 0 7 0 C5.02 2.97 5.02 2.97 3 6 C2.67 5.01 2.34 4.02 2 3 C2.33 2.67 2.66 2.34 3 2 C2.01 1.34 1.02 0.68 0 0 Z \",fill:\"#E34128\",transform:\"translate(90,394)\"})),_path3033||(_path3033=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 3 0 3 -1 5 C-2.65 4.67 -4.3 4.34 -6 4 C-5.67 3.01 -5.34 2.02 -5 1 C-3.35 0.67 -1.7 0.34 0 0 Z \",fill:\"#4E5F58\",transform:\"translate(60,383)\"})),_path3034||(_path3034=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 1.98 0 3.96 0 6 C-0.33 5.01 -0.66 4.02 -1 3 C-2.65 3 -4.3 3 -6 3 C-3.375 0 -3.375 0 0 0 Z \",fill:\"#E3E2B5\",transform:\"translate(588,378)\"})),_path3035||(_path3035=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 1.32 3.3 2.64 5 4 C4.34 4 3.68 4 3 4 C2.67 4.99 2.34 5.98 2 7 C1.67 5.68 1.34 4.36 1 3 C0.34 3 -0.32 3 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#835D4C\",transform:\"translate(555,375)\"})),_path3036||(_path3036=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0 5.28 0 8 0 C8 1.65 8 3.3 8 5 C7.34 4.67 6.68 4.34 6 4 C6 3.34 6 2.68 6 2 C3.03 1.505 3.03 1.505 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#BFD4A9\",transform:\"translate(520,376)\"})),_path3037||(_path3037=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.66 2 1.32 2 2 C2.66 2 3.32 2 4 2 C4 2.66 4 3.32 4 4 C2.02 4 0.04 4 -2 4 C-1.34 2.68 -0.68 1.36 0 0 Z \",fill:\"#BEC794\",transform:\"translate(523,370)\"})),_path3038||(_path3038=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0 5.28 0 8 0 C7.67 0.66 7.34 1.32 7 2 C3.9375 2.625 3.9375 2.625 1 3 C0.67 2.01 0.34 1.02 0 0 Z \",fill:\"#701C27\",transform:\"translate(298,370)\"})),_path3039||(_path3039=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0.99 1.98 0.99 4 2 C4 3.32 4 4.64 4 6 C2.68 6 1.36 6 0 6 C0 5.34 0 4.68 0 4 C0.66 4 1.32 4 2 4 C2 3.34 2 2.68 2 2 C1.34 2 0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#43161E\",transform:\"translate(216,368)\"})),_path3040||(_path3040=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 1.32 1.32 2.64 2 4 C0.71034824 5.37562854 -0.62689293 6.70766393 -2 8 C-2.66 8 -3.32 8 -4 8 C-4 7.34 -4 6.68 -4 6 C-3.34 5.67 -2.68 5.34 -2 5 C-1.27840576 3.35636866 -0.60648579 1.68949614 0 0 Z \",fill:\"#B7151E\",transform:\"translate(347,366)\"})),_path3041||(_path3041=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0 1.98 0 3 0 C1.95125002 2.62187494 1.35068687 3.79371361 -1.125 5.25 C-1.74375 5.4975 -2.3625 5.745 -3 6 C-3 5.01 -3 4.02 -3 3 C-2.34 3 -1.68 3 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#E27E7D\",transform:\"translate(349,361)\"})),_path3042||(_path3042=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C1.66 2 2.32 2 3 2 C3 2.66 3 3.32 3 4 C0.125 4.125 0.125 4.125 -3 4 C-3.66 3.34 -4.32 2.68 -5 2 C-3.35 1.34 -1.7 0.68 0 0 Z \",fill:\"#2A040B\",transform:\"translate(281,348)\"})),_path3043||(_path3043=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 1.32 0.66 2.64 1 4 C-1.375 5.5625 -1.375 5.5625 -4 7 C-4.66 6.67 -5.32 6.34 -6 6 C-4.02 4.02 -2.04 2.04 0 0 Z \",fill:\"#431711\",transform:\"translate(130,346)\"})),_path3044||(_path3044=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.125 0.9375 2.125 0.9375 4 2 C4 2.99 4 3.98 4 5 C4.66 5.33 5.32 5.66 6 6 C3 6 3 6 1.4375 4.625 C0.963125 4.08875 0.48875 3.5525 0 3 C-0.66 2.34 -1.32 1.68 -2 1 C-1.34 0.67 -0.68 0.34 0 0 Z \",fill:\"#060807\",transform:\"translate(531,343)\"})),_path3045||(_path3045=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C4.34 1.32 3.68 2.64 3 4 C2.01 4 1.02 4 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#32324D\",transform:\"translate(324,344)\"})),_path3046||(_path3046=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0.33 2.64 0.66 4 1 C4 1.99 4 2.98 4 4 C3.34 4 2.68 4 2 4 C1.34 4.66 0.68 5.32 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#F9A991\",transform:\"translate(497,331)\"})),_path3047||(_path3047=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4.33 2.31 4.66 4.62 5 7 C4.34 7 3.68 7 3 7 C3 6.01 3 5.02 3 4 C2.34 4 1.68 4 1 4 C0.67 2.68 0.34 1.36 0 0 Z \",fill:\"#B22112\",transform:\"translate(150,334)\"})),_path3048||(_path3048=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C2 1.66 2 2.32 2 3 C2.66 3 3.32 3 4 3 C4 3.66 4 4.32 4 5 C2.02 5 0.04 5 -2 5 C-2 4.34 -2 3.68 -2 3 C-1.34 3 -0.68 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#FAF3D3\",transform:\"translate(512,329)\"})),_path3049||(_path3049=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C1.66 2.33 2.32 2.66 3 3 C-0.75 6 -0.75 6 -3 6 C-2.42655063 3.13275314 -2.1385485 2.1385485 0 0 Z \",fill:\"#38503E\",transform:\"translate(113,326)\"})),_path3050||(_path3050=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0 4.62 0 7 0 C6.67 0.99 6.34 1.98 6 3 C5.01 2.67 4.02 2.34 3 2 C2.01 2.33 1.02 2.66 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#A9A280\",transform:\"translate(114,329)\"})),_path3051||(_path3051=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4 1.32 4 2.64 4 4 C2.68 4 1.36 4 0 4 C-0.33 3.01 -0.66 2.02 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#5C5A4A\",transform:\"translate(264,328)\"})),_path3052||(_path3052=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.33 1.98 0.66 3 1 C3 1.66 3 2.32 3 3 C3.66 3.33 4.32 3.66 5 4 C3.68 4.33 2.36 4.66 1 5 C0.67 4.01 0.34 3.02 0 2 C-0.66 1.67 -1.32 1.34 -2 1 C-1.34 0.67 -0.68 0.34 0 0 Z \",fill:\"#ECD19F\",transform:\"translate(317,321)\"})),_path3053||(_path3053=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.475 0.495 2.475 0.495 5 1 C4.67 2.65 4.34 4.3 4 6 C3.34 6 2.68 6 2 6 C2 4.68 2 3.36 2 2 C1.34 2 0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#E2D8B9\",transform:\"translate(480,316)\"})),_path3054||(_path3054=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.66 0.66 1.32 1 2 C1.66 2 2.32 2 3 2 C3 4.31 3 6.62 3 9 C2.34 8.67 1.68 8.34 1 8 C0.40644386 5.35139573 0.25790731 2.70802678 0 0 Z \",fill:\"#1F5437\",transform:\"translate(375,310)\"})),_path3055||(_path3055=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.99 2 1.98 2 3 C-1.96 3 -5.92 3 -10 3 C-10 2.67 -10 2.34 -10 2 C-9.04287109 1.90912109 -9.04287109 1.90912109 -8.06640625 1.81640625 C-6.82697266 1.69072266 -6.82697266 1.69072266 -5.5625 1.5625 C-4.73878906 1.48128906 -3.91507813 1.40007812 -3.06640625 1.31640625 C-1.01337975 1.21069185 -1.01337975 1.21069185 0 0 Z \",fill:\"#F5E7D1\",transform:\"translate(184,307)\"})),_path3056||(_path3056=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0 4.62 0 7 0 C6.67 0.66 6.34 1.32 6 2 C4.68 2 3.36 2 2 2 C2 2.66 2 3.32 2 4 C1.34 4 0.68 4 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#BA7859\",transform:\"translate(424,294)\"})),_path3057||(_path3057=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.66 2 1.32 2 2 C2.66 2 3.32 2 4 2 C4 2.66 4 3.32 4 4 C4.66 4 5.32 4 6 4 C6 4.66 6 5.32 6 6 C4.68 6 3.36 6 2 6 C1.34 4.02 0.68 2.04 0 0 Z \",fill:\"#C8231F\",transform:\"translate(180,292)\"})),_path3058||(_path3058=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.09658936 3.28976808 0.79953138 4.71303767 0 8 C0.66 8.33 1.32 8.66 2 9 C0.68 9.33 -0.64 9.66 -2 10 C-1.85950482 8.52031676 -1.71245174 7.04125484 -1.5625 5.5625 C-1.48128906 4.73878906 -1.40007812 3.91507812 -1.31640625 3.06640625 C-1 1 -1 1 0 0 Z \",fill:\"#00210E\",transform:\"translate(463,283)\"})),_path3059||(_path3059=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C4 1.32 4 2.64 4 4 C1.69 4 -0.62 4 -3 4 C-2.01 3.34 -1.02 2.68 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#242228\",transform:\"translate(446,286)\"})),_path3060||(_path3060=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 1.32 0.66 2.64 1 4 C-0.65 4.33 -2.3 4.66 -4 5 C-3.6875 3.0625 -3.6875 3.0625 -3 1 C-2.01 0.67 -1.02 0.34 0 0 Z \",fill:\"#C68750\",transform:\"translate(171,273)\"})),_path3061||(_path3061=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0 0.66 0 1 0 C1 1.98 1 3.96 1 6 C1.99 5.67 2.98 5.34 4 5 C4.33 5.99 4.66 6.98 5 8 C3.35 8 1.7 8 0 8 C0 5.36 0 2.72 0 0 Z \",fill:\"#8C584E\",transform:\"translate(42,260)\"})),_path3062||(_path3062=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.66 0 1.32 0 2 C-3.21451269 3.60725635 -6.43612536 3.05748185 -10 3 C-10 2.67 -10 2.34 -10 2 C-6.38026598 0.68373308 -3.90432869 0 0 0 Z \",fill:\"#B78167\",transform:\"translate(250,264)\"})),_path3063||(_path3063=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C0.79618552 3.49361571 -0.45428722 5.68143083 -2 8 C-2.6875 5.6875 -2.6875 5.6875 -3 3 C-1.5625 1.1875 -1.5625 1.1875 0 0 Z \",fill:\"#B5705A\",transform:\"translate(11,249)\"})),_path3064||(_path3064=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.4606285 2.64738916 2 3.89448334 2 7 C0.68 6.67 -0.64 6.34 -2 6 C-2 4.68 -2 3.36 -2 2 C-1.34 2 -0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#995842\",transform:\"translate(32,245)\"})),_path3065||(_path3065=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C5 0.66 5 1.32 5 2 C5.66 2.33 6.32 2.66 7 3 C4.69 3 2.38 3 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#E6D5B8\",transform:\"translate(286,246)\"})),_path3066||(_path3066=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C1.42415568 2.38564077 0.77772405 4.66682784 0 7 C-0.99 7 -1.98 7 -3 7 C-2.25 2.25 -2.25 2.25 0 0 Z \",fill:\"#A15A49\",transform:\"translate(74,240)\"})),_path3067||(_path3067=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.64 0.66 5.28 1.32 8 2 C5 3 5 3 2 2 C1.67 2.99 1.34 3.98 1 5 C0.67 3.35 0.34 1.7 0 0 Z \",fill:\"#3A2322\",transform:\"translate(64,230)\"})),_path3068||(_path3068=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1.65 1.32 -3.3 2.64 -5 4 C-5 3.34 -5 2.68 -5 2 C-7.31 2 -9.62 2 -12 2 C-12 1.67 -12 1.34 -12 1 C-7.93631321 0.22596442 -4.13574827 -0.0984702 0 0 Z \",fill:\"#110A07\",transform:\"translate(597,226)\"})),_path3069||(_path3069=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1.32 1.32 -2.64 2.64 -4 4 C-5.32 3.34 -6.64 2.68 -8 2 C-8.33 2.66 -8.66 3.32 -9 4 C-9 3.01 -9 2.02 -9 1 C-5.92677456 0.08941469 -3.19902639 -0.08886184 0 0 Z \",fill:\"#311817\",transform:\"translate(490,226)\"})),_path3070||(_path3070=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.94956528 1.36944102 5.52468811 2.87830409 8 5 C8 5.66 8 6.32 8 7 C5.05043472 5.63055898 2.47531189 4.12169591 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#26070B\",transform:\"translate(579,210)\"})),_path3071||(_path3071=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0.66 4.62 1.32 7 2 C6.67 2.66 6.34 3.32 6 4 C3.03 3.505 3.03 3.505 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#281B12\",transform:\"translate(105,202)\"})),_path3072||(_path3072=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.9375 0.3125 1.9375 0.3125 4 1 C4.33 1.99 4.66 2.98 5 4 C3.02 4 1.04 4 -1 4 C-0.67 2.68 -0.34 1.36 0 0 Z \",fill:\"#372620\",transform:\"translate(162,200)\"})),_path3073||(_path3073=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.99 0 1.98 0 3 C-3.3 2.67 -6.6 2.34 -10 2 C-10 1.67 -10 1.34 -10 1 C-6.59437148 0.22157062 -3.49234244 -0.09978121 0 0 Z \",fill:\"#201414\",transform:\"translate(21,190)\"})),_path3074||(_path3074=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.9375 0.8125 2.9375 0.8125 6 2 C6.33 2.99 6.66 3.98 7 5 C4.69 4.34 2.38 3.68 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#C29F7C\",transform:\"translate(58,180)\"})),_path3075||(_path3075=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 1.32 1.32 2.64 2 4 C1.01 4.99 0.02 5.98 -1 7 C-1.33 6.01 -1.66 5.02 -2 4 C-2.66 3.67 -3.32 3.34 -4 3 C-3.01 2.67 -2.02 2.34 -1 2 C-0.67 1.34 -0.34 0.68 0 0 Z \",fill:\"#382622\",transform:\"translate(114,176)\"})),_path3076||(_path3076=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.33 0.99 0.66 1.98 1 3 C-2.75 6 -2.75 6 -5 6 C-3.63016497 2.83884224 -3.0109362 2.0072908 0 0 Z \",fill:\"#443226\",transform:\"translate(417,175)\"})),_path3077||(_path3077=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0.33 1.32 0.66 2 1 C1.34 2.32 0.68 3.64 0 5 C-1.32 5 -2.64 5 -4 5 C-4 4.01 -4 3.02 -4 2 C-2.125 0.9375 -2.125 0.9375 0 0 Z \",fill:\"#382525\",transform:\"translate(444,156)\"})),_path3078||(_path3078=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 1.32 3.3 2.64 5 4 C4.34 4.66 3.68 5.32 3 6 C1.35 4.35 -0.3 2.7 -2 1 C-1.34 0.67 -0.68 0.34 0 0 Z \",fill:\"#D8B47D\",transform:\"translate(139,151)\"})),_path3079||(_path3079=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.475 0.495 2.475 0.495 5 1 C4.67 2.32 4.34 3.64 4 5 C2.68 4.34 1.36 3.68 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#7C4D2C\",transform:\"translate(31,148)\"})),_path3080||(_path3080=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0 3.96 0 6 0 C6.33 0.99 6.66 1.98 7 3 C5.02 3.33 3.04 3.66 1 4 C0.67 2.68 0.34 1.36 0 0 Z \",fill:\"#4A2A19\",transform:\"translate(25,144)\"})),_path3081||(_path3081=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2.33 2.64 2.66 5.28 3 8 C1.68 7.01 0.36 6.02 -1 5 C-0.67 3.35 -0.34 1.7 0 0 Z \",fill:\"#715B42\",transform:\"translate(133,141)\"})),_path3082||(_path3082=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2 0.25 2 0.25 4 1 C4.33 1.99 4.66 2.98 5 4 C4.01 4 3.02 4 2 4 C1.67 4.66 1.34 5.32 1 6 C1 4.68 1 3.36 1 2 C0.34 1.67 -0.32 1.34 -1 1 C-0.67 0.67 -0.34 0.34 0 0 Z \",fill:\"#382C29\",transform:\"translate(514,138)\"})),_path3083||(_path3083=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 0.66 2 1.32 2 2 C3.32 2.66 4.64 3.32 6 4 C5.01 4 4.02 4 3 4 C2.67 4.66 2.34 5.32 2 6 C1.34 6 0.68 6 0 6 C0 4.02 0 2.04 0 0 Z \",fill:\"#7A534C\",transform:\"translate(136,128)\"})),_path3084||(_path3084=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C-1 3 -1 3 -4 5 C-4.99 4.67 -5.98 4.34 -7 4 C-3.375 0 -3.375 0 0 0 Z \",fill:\"#37201D\",transform:\"translate(495,98)\"})),_path3085||(_path3085=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.475 0.495 2.475 0.495 5 1 C5 2.65 5 4.3 5 6 C4.34 6 3.68 6 3 6 C0 2.53846154 0 2.53846154 0 0 Z \",fill:\"#332622\",transform:\"translate(68,96)\"})),_path3086||(_path3086=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.86724686 0.57344937 3.8614515 0.8614515 6 3 C5.67 3.99 5.34 4.98 5 6 C3.31237149 4.3545622 1.6459651 2.68711423 0 1 C0 0.67 0 0.34 0 0 Z \",fill:\"#251819\",transform:\"translate(58,90)\"})),_path3087||(_path3087=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.99 0.99 1.98 1.98 3 3 C2.01 3.99 1.02 4.98 0 6 C-0.66 5.67 -1.32 5.34 -2 5 C-1.67 4.01 -1.34 3.02 -1 2 C-1.66 1.67 -2.32 1.34 -3 1 C-2.01 0.67 -1.02 0.34 0 0 Z \",fill:\"#231819\",transform:\"translate(78,83)\"})),_path3088||(_path3088=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.32 0 2.64 0 4 0 C3.67 1.32 3.34 2.64 3 4 C1.68 4 0.36 4 -1 4 C-0.67 2.68 -0.34 1.36 0 0 Z \",fill:\"#D3A474\",transform:\"translate(448,71)\"})),_path3089||(_path3089=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0.66 0 1.32 0 2 0 C2 1.98 2 3.96 2 6 C2.66 6.33 3.32 6.66 4 7 C2.68 7 1.36 7 0 7 C-1.125 2.25 -1.125 2.25 0 0 Z \",fill:\"#11110E\",transform:\"translate(150,72)\"})),_path3090||(_path3090=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.475 0.495 2.475 0.495 5 1 C4.67 1.99 4.34 2.98 4 4 C2.68 3.67 1.36 3.34 0 3 C0 2.01 0 1.02 0 0 Z \",fill:\"#CCA070\",transform:\"translate(465,59)\"})),_path3091||(_path3091=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 1.32 0 2.64 0 4 C-1.98 4.33 -3.96 4.66 -6 5 C-4.87312259 1.61936778 -3.78825335 0 0 0 Z \",fill:\"#DD9C66\",transform:\"translate(462,58)\"})),_path3092||(_path3092=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 0 3.3 0 5 0 C5 0.99 5 1.98 5 3 C3.02 3 1.04 3 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#CFA268\",transform:\"translate(472,60)\"})),_path3093||(_path3093=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.65 1.65 3.3 3.3 5 5 C4.34 5.66 3.68 6.32 3 7 C3 6.34 3 5.68 3 5 C1.68 4.34 0.36 3.68 -1 3 C-0.67 2.01 -0.34 1.02 0 0 Z \",fill:\"#281613\",transform:\"translate(98,47)\"})),_path3094||(_path3094=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C0 0.99 0 1.98 0 3 C-2.31 3.66 -4.62 4.32 -7 5 C-2.25 0 -2.25 0 0 0 Z \",fill:\"#1C0E0D\",transform:\"translate(564,43)\"})),_path3095||(_path3095=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C1.98 0 3.96 0 6 0 C4.71034824 1.37562854 3.37310707 2.70766393 2 4 C1.34 4 0.68 4 0 4 C0 2.68 0 1.36 0 0 Z \",fill:\"#295240\",transform:\"translate(578,24)\"})),_path3096||(_path3096=/*#__PURE__*/React.createElement(\"path\",{d:\"M0 0 C2.31 0 4.62 0 7 0 C5.68 1.32 4.36 2.64 3 4 C2.67 3.34 2.34 2.68 2 2 C1.34 2 0.68 2 0 2 C0 1.34 0 0.68 0 0 Z \",fill:\"#163726\",transform:\"translate(610,0)\"})),_rect||(_rect=/*#__PURE__*/React.createElement(\"rect\",{id:0,x:0,y:250,height:200,width:210,fill:\"rgba(0, 0, 255, 0.0)\"})),_rect2||(_rect2=/*#__PURE__*/React.createElement(\"rect\",{id:1,x:210,y:250,height:250,width:210,fill:\"rgba(17, 255, 0, 0.0)\"})),_rect3||(_rect3=/*#__PURE__*/React.createElement(\"rect\",{id:2,x:420,y:250,height:200,width:210,fill:\"rgba(255, 42, 0, 0)\"})));}const ForwardRef=/*#__PURE__*/React.forwardRef(Svg3F1Cars);export default __webpack_public_path__+\"static/media/3 f1 cars.e9bca5afc0a626e370b44ded42db95c2.svg\";export{ForwardRef as ReactComponent};","import React from \"react\";\r\nimport \"../static/card.css\";\r\n\r\nexport default function Card({\r\n  candidateName = \"John Doe\",\r\n  collegeName = \"APSIT\",\r\n  teamName = \"XYZ Team\",\r\n}) {\r\n  return (\r\n    <div className=\"flip-card\">\r\n      <div className=\"driver-card\">\r\n        <div className=\"overlay\">\r\n          <div className=\"candidate-name\">{candidateName}</div>\r\n          <div className=\"team-name\">Team: {teamName}</div>\r\n          <div className=\"college-name\">{collegeName}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport Card from \"./cards\";\r\nimport getData from \"./database.js\";\r\n\r\nexport default function Profile() {\r\n  const [data, setData] = useState([]);\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const database = getData();\r\n  let currTeam = location.pathname.split(\"/\");\r\n  currTeam = currTeam[currTeam.length - 1];\r\n\r\n  function getTeamMembers() {\r\n    let members = database.filter((candidate) => {\r\n      return candidate.teamName === currTeam;\r\n    });\r\n\r\n    if (members.length === 0) {\r\n      alert(\"Team not found...\");\r\n      navigate(\"/\");\r\n      return;\r\n    }\r\n    setData(members);\r\n  }\r\n\r\n  useEffect(() => {\r\n    getTeamMembers(); // eslint-disable-next-line\r\n  }, []);\r\n\r\n  if (data.length === 0) {\r\n    return <div style={{ color: \"white\" }}>Loading...</div>;\r\n  }\r\n\r\n  return (\r\n    <div style={{ display: \"flex\", flexDirection: \"column\", rowGap: \"40px\" }}>\r\n      {data.map((candidate) => {\r\n        return <Card {...candidate} />;\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useEffect, useState, useRef } from \"react\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport getData from \"./database.js\";\r\nimport { ReactComponent as F13cars } from \"../static/3 f1 cars.svg\";\r\nimport Card from \"./cards\";\r\n\r\nexport function ProfileV2() {\r\n  const [teamData, setTeamData] = useState([]);\r\n  const [memberID, setMemberID] = useState(); //Member ID is just the index in recieved array of objects\r\n  const svgRef = useRef(null);\r\n  const navigate = useNavigate();\r\n  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });\r\n  const location = useLocation();\r\n  const database = getData();\r\n  let currTeam = location.pathname.split(\"/\");\r\n  currTeam = currTeam[currTeam.length - 1];\r\n\r\n  function getTeamMembers() {\r\n    let members = database.filter((candidate) => {\r\n      return candidate.teamName === currTeam;\r\n    });\r\n\r\n    if (members.length === 0) {\r\n      alert(\"Team not found...\");\r\n      navigate(\"/\");\r\n      return;\r\n    }\r\n    setTeamData(members);\r\n    console.log(members);\r\n  }\r\n\r\n  useEffect(() => {\r\n    getTeamMembers(); // eslint-disable-next-line\r\n  }, []);\r\n\r\n  function handleMouseEnter(id) {\r\n    setMemberID(id);\r\n  }\r\n\r\n  function handleMouseLeave() {\r\n    setMemberID(null);\r\n  }\r\n\r\n  function handleMouseMove(e) {\r\n    setMousePosition({ x: e.clientX, y: e.clientY });\r\n  }\r\n\r\n  useEffect(() => {\r\n    const svgElement = svgRef.current;\r\n    if (svgElement) {\r\n      // Get all ares of cars i.e rects/polygons/circles\r\n      const cars = svgElement.querySelectorAll(\"rect, polygon, circle\");\r\n\r\n      cars.forEach((car) => {\r\n        // Add event listeners for cars\r\n        car.addEventListener(\"mouseenter\", () => handleMouseEnter(car.id));\r\n        car.addEventListener(\"mouseleave\", handleMouseLeave);\r\n      });\r\n    }\r\n\r\n    return () => {\r\n      if (svgElement) {\r\n        const cars = svgElement.querySelectorAll(\"rect, polygon, circle\");\r\n        cars.forEach((car) => {\r\n          car.removeEventListener(\"mouseenter\", () => handleMouseEnter(car.id));\r\n          car.removeEventListener(\"mouseleave\", handleMouseLeave);\r\n        });\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  //   useEffect(() => {\r\n  //     if (!memberID || !teamData) {\r\n  //       console.log();\r\n  //     } else {\r\n  //       console.log(teamData[memberID].candidateName);\r\n  //     }\r\n  //   }, [memberID]);\r\n\r\n  return (\r\n    <div style={{ margin: \"auto\" }}>\r\n      <F13cars\r\n        width=\"630px\"\r\n        height=\"630px\"\r\n        ref={svgRef}\r\n        style={{ cursor: \"pointer\" }}\r\n        onMouseMove={(e) => {\r\n          handleMouseMove(e);\r\n        }}\r\n      />\r\n      {memberID ? (\r\n        <div\r\n          style={{\r\n            position: \"absolute\",\r\n            top: mousePosition.y + 20,\r\n            left: mousePosition.x + 20,\r\n            fontSize: \"1.3rem\",\r\n            border: \"1px solid #ccc\",\r\n            backgroundColor: \"#fff\",\r\n            boxShadow: \"0px 0px 16px 16px rgba(0, 0, 0, 0.2)\",\r\n            // pointerEvents: \"none\",\r\n            zIndex: 1000,\r\n          }}\r\n        >\r\n          <Card {...teamData[memberID]} />\r\n        </div>\r\n      ) : (\r\n        <div></div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import \"./App.css\";\r\nimport GenerateQRCode from \"./components/generateQRCode\";\r\nimport Profile from \"./components/profile\";\r\nimport { HashRouter, Routes, Route } from \"react-router-dom\";\r\nimport { ProfileV2 } from \"./components/profileV2\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <HashRouter>\r\n        <Routes>\r\n          <Route exact path=\"/profile/:username\" element={<Profile />}></Route>\r\n          <Route\r\n            exact\r\n            path=\"/profile2/:username\"\r\n            element={<ProfileV2 />}\r\n          ></Route>\r\n          <Route exact path=\"/\" element={<GenerateQRCode />}></Route>\r\n        </Routes>\r\n      </HashRouter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\r\nroot.render(<App />);\r\n"],"names":["Scheduler","require","React","ReactDOM","formatProdErrorMessage","code","url","arguments","length","encodeURIComponent","i","isValidContainer","node","nodeType","REACT_LEGACY_ELEMENT_TYPE","Symbol","for","REACT_ELEMENT_TYPE","REACT_PORTAL_TYPE","REACT_FRAGMENT_TYPE","REACT_STRICT_MODE_TYPE","REACT_PROFILER_TYPE","REACT_PROVIDER_TYPE","REACT_CONSUMER_TYPE","REACT_CONTEXT_TYPE","REACT_FORWARD_REF_TYPE","REACT_SUSPENSE_TYPE","REACT_SUSPENSE_LIST_TYPE","REACT_MEMO_TYPE","REACT_LAZY_TYPE","REACT_OFFSCREEN_TYPE","REACT_MEMO_CACHE_SENTINEL","MAYBE_ITERATOR_SYMBOL","iterator","getIteratorFn","maybeIterable","REACT_CLIENT_REFERENCE","getComponentNameFromType","type","$$typeof","displayName","name","_context","innerType","render","_payload","_init","x","prefix","suffix","ReactSharedInternals","__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE","assign","Object","describeBuiltInComponentFrame","Error","match","stack","trim","indexOf","reentry","describeNativeComponentFrame","fn","construct","previousPrepareStackTrace","prepareStackTrace","RunInRootFrame","DetermineComponentFrameRoot","Fake","defineProperty","prototype","set","Reflect","control","call","x$0","x$1","catch","sample","namePropDescriptor","getOwnPropertyDescriptor","configurable","value","_RunInRootFrame$Deter","sampleStack","controlStack","sampleLines","split","controlLines","includes","frame","replace","describeFiber","fiber","tag","getStackByFiberInDevAndProd","workInProgress","info","return","message","getNearestMountedFiber","nearestMounted","alternate","flags","getSuspenseInstanceFromFiber","suspenseState","memoizedState","dehydrated","assertIsMounted","findCurrentHostFiberImpl","child","sibling","isArrayImpl","Array","isArray","ReactDOMSharedInternals","__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE","sharedNotPendingObject","pending","data","method","action","valueStack","index","createCursor","defaultValue","current","pop","cursor","push","contextStackCursor","contextFiberStackCursor","rootInstanceStackCursor","hostTransitionProviderCursor","pushHostContainer","nextRootInstance","documentElement","namespaceURI","getOwnHostContext","parentNode","tagName","getChildHostContextProd","popHostContainer","pushHostContext","context","JSCompiler_inline_result","popHostContext","HostTransitionContext","_currentValue","hasOwnProperty","scheduleCallback$3","unstable_scheduleCallback","cancelCallback$1","unstable_cancelCallback","shouldYield","unstable_shouldYield","requestPaint","unstable_requestPaint","now","unstable_now","getCurrentPriorityLevel","unstable_getCurrentPriorityLevel","ImmediatePriority","unstable_ImmediatePriority","UserBlockingPriority","unstable_UserBlockingPriority","NormalPriority$1","unstable_NormalPriority","LowPriority","unstable_LowPriority","IdlePriority","unstable_IdlePriority","log$1","log","unstable_setDisableYieldValue","rendererID","injectedHook","setIsStrictModeForDevtools","newIsStrictMode","setStrictMode","err","clz32","Math","LN2","nextTransitionLane","nextRetryLane","getHighestPriorityLanes","lanes","pendingSyncLanes","getNextLanes","root","wipLanes","pendingLanes","nextLanes","suspendedLanes","pingedLanes","warmLanes","finishedLanes","nonIdlePendingLanes","checkIfRootIsPrerendering","renderLanes","computeExpirationTime","lane","currentTime","claimNextTransitionLane","claimNextRetryLane","createLaneMap","initial","laneMap","markRootUpdated$1","updateLane","markSpawnedDeferredLane","spawnedLane","entangledLanes","spawnedLaneIndex","entanglements","markRootEntangled","rootEntangledLanes","index$8","lanesToEventPriority","resolveUpdatePriority","updatePriority","p","window","event","getEventPriority","randomKey","random","toString","slice","internalInstanceKey","internalPropsKey","internalContainerInstanceKey","internalEventHandlersKey","internalEventHandlerListenersKey","internalEventHandlesSetKey","internalRootNodeResourcesKey","internalHoistableMarker","detachDeletedInstance","getClosestInstanceFromNode","targetNode","targetInst","getParentSuspenseInstance","getInstanceFromNode","getNodeFromInstance","inst","stateNode","getResourcesFromRoot","resources","hoistableStyles","Map","hoistableScripts","markNodeAsHoistable","allNativeEvents","Set","registrationNameDependencies","registerTwoPhaseEvent","registrationName","dependencies","registerDirectEvent","add","canUseDOM","document","createElement","VALID_ATTRIBUTE_NAME_REGEX","RegExp","illegalAttributeNameCache","validatedAttributeNameCache","setValueForAttribute","attributeName","test","removeAttribute","prefix$10","toLowerCase","setAttribute","setValueForKnownAttribute","setValueForNamespacedAttribute","namespace","setAttributeNS","getToStringValue","isCheckable","elem","nodeName","track","_valueTracker","valueField","descriptor","constructor","currentValue","get","this","enumerable","getValue","setValue","stopTracking","trackValueOnNode","updateValueIfChanged","tracker","lastValue","checked","getActiveElement","doc","activeElement","body","e","escapeSelectorAttributeValueInsideDoubleQuotesRegex","escapeSelectorAttributeValueInsideDoubleQuotes","ch","charCodeAt","updateInput","element","lastDefaultValue","defaultChecked","setDefaultValue","initInput","isHydrating","ownerDocument","updateOptions","multiple","propValue","setDefaultSelected","options","selected","defaultSelected","disabled","updateTextarea","initTextarea","children","textContent","setTextContent","text","firstChild","lastChild","nodeValue","unitlessNumbers","setValueForStyle","style","styleName","isCustomProperty","setProperty","cssFloat","has","setValueForStyles","styles","prevStyles","styleName$16","styleName$17","isCustomElement","aliases","isJavaScriptProtocol","sanitizeURL","currentReplayingEvent","getEventTarget","nativeEvent","target","srcElement","correspondingUseElement","restoreTarget","restoreQueue","restoreStateOfTarget","internalInstance","props","a","querySelectorAll","otherNode","form","otherProps","isInsideEventHandler","batchedUpdates$1","b","flushSyncWork$1","getListener","passiveBrowserEventsSupported","addEventListener","removeEventListener","startText","fallbackText","getData","start","end","startValue","startLength","endValue","endLength","minEnd","getEventCharCode","keyCode","charCode","functionThatReturnsTrue","functionThatReturnsFalse","createSyntheticEvent","Interface","SyntheticBaseEvent","reactName","reactEventType","nativeEventTarget","propName","_reactName","_targetInst","currentTarget","isDefaultPrevented","defaultPrevented","returnValue","isPropagationStopped","preventDefault","stopPropagation","cancelBubble","persist","isPersistent","lastMovementX","lastMovementY","lastMouseEvent","EventInterface","eventPhase","bubbles","cancelable","timeStamp","Date","isTrusted","SyntheticEvent","UIEventInterface","view","detail","SyntheticUIEvent","MouseEventInterface","screenX","screenY","clientX","clientY","pageX","pageY","ctrlKey","shiftKey","altKey","metaKey","getModifierState","getEventModifierState","button","buttons","relatedTarget","fromElement","toElement","movementX","movementY","SyntheticMouseEvent","SyntheticDragEvent","dataTransfer","SyntheticFocusEvent","SyntheticAnimationEvent","animationName","elapsedTime","pseudoElement","SyntheticClipboardEvent","clipboardData","SyntheticCompositionEvent","normalizeKey","Esc","Spacebar","Left","Up","Right","Down","Del","Win","Menu","Apps","Scroll","MozPrintableKey","translateToKey","modifierKeyToProp","Alt","Control","Meta","Shift","modifierStateGetter","keyArg","SyntheticKeyboardEvent","key","String","fromCharCode","location","repeat","locale","which","SyntheticPointerEvent","pointerId","width","height","pressure","tangentialPressure","tiltX","tiltY","twist","pointerType","isPrimary","SyntheticTouchEvent","touches","targetTouches","changedTouches","SyntheticTransitionEvent","propertyName","SyntheticWheelEvent","deltaX","wheelDeltaX","deltaY","wheelDeltaY","wheelDelta","deltaZ","deltaMode","SyntheticToggleEvent","newState","oldState","END_KEYCODES","canUseCompositionEvent","documentMode","canUseTextInputEvent","useFallbackCompositionData","SPACEBAR_CHAR","hasSpaceKeypress","isFallbackCompositionEnd","domEventName","getDataFromCustomEvent","isComposing","supportedInputTypes","color","date","datetime","email","month","number","password","range","search","tel","time","week","isTextInputElement","createAndAccumulateChangeEvent","dispatchQueue","accumulateTwoPhaseListeners","listeners","activeElement$1","activeElementInst$1","runEventInBatch","processDispatchQueue","getInstIfValueChanged","getTargetInstForChangeEvent","isInputEventSupported","JSCompiler_inline_result$jscomp$283","isSupported$jscomp$inline_418","element$jscomp$inline_419","oninput","stopWatchingForValueChange","detachEvent","handlePropertyChange","handleEventsForInputEventPolyfill","attachEvent","getTargetInstForInputEventPolyfill","getTargetInstForClickEvent","getTargetInstForInputOrChangeEvent","objectIs","is","y","shallowEqual","objA","objB","keysA","keys","keysB","currentKey","getLeafNode","getNodeForCharacterOffset","offset","nodeEnd","nextSibling","containsNode","outerNode","innerNode","contains","compareDocumentPosition","getActiveElementDeep","containerInfo","defaultView","HTMLIFrameElement","contentWindow","href","hasSelectionCapabilities","contentEditable","restoreSelection","priorSelectionInformation","curFocusedElem","focusedElem","priorSelectionRange","selectionRange","selectionStart","selectionEnd","min","getSelection","extend","endMarker","rangeCount","anchorNode","anchorOffset","focusNode","focusOffset","createRange","setStart","removeAllRanges","addRange","setEnd","left","scrollLeft","top","scrollTop","focus","skipSelectionChangeEvent","activeElementInst","lastSelection","mouseDown","constructSelectEvent","makePrefixMap","styleProp","eventName","prefixes","vendorPrefixes","animationend","animationiteration","animationstart","transitionrun","transitionstart","transitioncancel","transitionend","prefixedEventNames","getVendorPrefixedEventName","prefixMap","animation","transition","ANIMATION_END","ANIMATION_ITERATION","ANIMATION_START","TRANSITION_RUN","TRANSITION_START","TRANSITION_CANCEL","TRANSITION_END","topLevelEventsToReactNames","simpleEventPluginEvents","registerSimpleEvent","concurrentQueues","concurrentQueuesIndex","concurrentlyUpdatedLanes","finishQueueingConcurrentUpdates","endIndex","queue","update","next","markUpdateLaneFromFiberToRoot","enqueueUpdate$1","enqueueConcurrentHookUpdate","getRootForUpdatedFiber","enqueueConcurrentRenderForLane","sourceFiber","isHidden","parent","childLanes","_visibility","hiddenUpdates","nestedUpdateCount","rootWithNestedUpdates","emptyContextObject","CapturedStacks","WeakMap","createCapturedValueAtFiber","source","existing","forkStack","forkStackIndex","treeForkProvider","treeForkCount","idStack","idStackIndex","treeContextProvider","treeContextId","treeContextOverflow","pushTreeFork","totalChildren","pushTreeId","baseIdWithLeadingBit","baseLength","numberOfOverflowBits","pushMaterializedTreeId","popTreeContext","hydrationParentFiber","nextHydratableInstance","hydrationErrors","rootOrSingletonContext","HydrationMismatchException","throwOnHydrationMismatch","queueHydrationError","prepareToHydrateHostInstance","instance","memoizedProps","listenToNonDelegatedEvent","mediaEventTypes","suppressHydrationWarning","checkForUnmatchedText","popover","onScroll","onScrollEnd","onClick","onclick","noop$1","popToNextHostParent","popHydrationState","JSCompiler_temp","shouldClear","shouldSetTextContent","getNextHydratable","resetHydrationState","error","SuspenseException","SuspenseyCommitException","noopSuspenseyCommitThenable","then","isThenableResolved","thenable","status","noop$3","trackUsedThenable","thenableState","reason","workInProgressRoot","shellSuspendCounter","fulfilledValue","fulfilledThenable","rejectedThenable","suspendedThenable","getSuspendedThenable","thenableState$1","thenableIndexCounter$1","unwrapThenable","coerceRef","ref","throwOnInvalidObjectType","returnFiber","newChild","join","resolveLazy","lazyType","init","createChildReconciler","shouldTrackSideEffects","deleteChild","childToDelete","deletions","deleteRemainingChildren","currentFirstChild","mapRemainingChildren","existingChildren","useFiber","pendingProps","createWorkInProgress","placeChild","newFiber","lastPlacedIndex","newIndex","placeSingleChild","updateTextNode","createFiberFromText","mode","updateElement","elementType","updateFragment","createFiberFromTypeAndProps","updatePortal","portal","implementation","createFiberFromPortal","fragment","createFiberFromFragment","createChild","readContextDuringReconciliation","updateSlot","oldFiber","updateFromMap","newIdx","reconcileChildFibersImpl","newChildren","resultingFirstChild","previousNewFiber","nextOldFiber","delete","forEach","reconcileChildrenArray","step","done","reconcileChildrenIterator","firstChildFiber","createFiberImplClass","reconcileChildFibers","mountChildFibers","currentTreeHiddenStackCursor","prevEntangledRenderLanesCursor","pushHiddenContext","entangledRenderLanes","baseLanes","reuseHiddenContextOnStack","popHiddenContext","suspenseHandlerStackCursor","shellBoundary","pushPrimaryTreeSuspenseHandler","handler","suspenseStackCursor","pushOffscreenSuspenseHandler","reuseSuspenseHandlerOnStack","popSuspenseHandler","findFirstSuspended","row","state","revealOrder","AbortControllerLocal","AbortController","signal","aborted","listener","abort","scheduleCallback$2","NormalPriority","CacheContext","Consumer","Provider","_currentValue2","_threadCount","createCache","controller","refCount","releaseCache","cache","currentEntangledListeners","currentEntangledPendingCount","currentEntangledLane","currentEntangledActionThenable","pingEngtangledActionScope","prevOnStartTransitionFinish","S","entangledListeners","requestTransitionLane","resolve","entangleAsyncAction","resumedCache","peekCacheFromPool","cacheResumedFromPreviousRender","pooledCache","pushTransition","offscreenWorkInProgress","prevCachePool","pool","getSuspendedCache","cacheFromPool","currentlyRenderingFiber$1","currentHook","workInProgressHook","didScheduleRenderPhaseUpdate","didScheduleRenderPhaseUpdateDuringThisPass","shouldDoubleInvokeUserFnsInHooksDEV","localIdCounter","thenableIndexCounter","globalClientIdCounter","throwInvalidHookError","areHookInputsEqual","nextDeps","prevDeps","renderWithHooks","Component","secondArg","nextRenderLanes","updateQueue","H","HooksDispatcherOnMount","HooksDispatcherOnUpdate","renderWithHooksAgain","finishRenderingHooks","ContextOnlyDispatcher","didRenderTooFewHooks","didReceiveUpdate","checkIfContextChanged","numberOfReRenders","lastEffect","events","stores","memoCache","HooksDispatcherOnRerender","TransitionAwareHostComponent","dispatcher","maybeThenable","useState","useThenable","checkDidRenderIdHook","didRenderIdHook","bailoutHooks","resetHooksOnUnwind","mountWorkInProgressHook","hook","baseState","baseQueue","updateWorkInProgressHook","nextCurrentHook","nextWorkInProgressHook","use","usable","readContext","useMemoCache","size","map","array","basicStateReducer","updateReducer","reducer","updateReducerImpl","lastRenderedReducer","pendingQueue","baseFirst","newBaseQueueFirst","newBaseQueueLast","didReadFromEntangledAsyncAction$54","workInProgressRootRenderLanes","revertLane","hasEagerState","eagerState","workInProgressRootSkippedLanes","lastRenderedState","dispatch","rerenderReducer","lastRenderPhaseUpdate","updateSyncExternalStore","subscribe","getSnapshot","getServerSnapshot","isHydrating$jscomp$0","snapshotChanged","updateEffect","subscribeToStore","bind","pushEffect","updateStoreInstance","destroy","pushStoreConsistencyCheck","renderedSnapshot","nextSnapshot","checkIfSnapshotChanged","forceStoreRerender","latestGetSnapshot","nextValue","scheduleUpdateOnFiber","mountStateImpl","initialState","initialStateInitializer","updateOptimisticImpl","passthrough","dispatchActionState","actionQueue","setPendingState","setState","payload","isRenderPhaseUpdate","actionNode","isTransition","T","runActionStateAction","prevState","prevTransition","currentTransition","onStartTransitionFinish","handleActionReturnValue","onActionError","error$60","nextState","onActionSuccess","notifyActionListeners","last","actionStateReducer","mountActionState","initialStateProp","ssrFormState","formState","JSCompiler_inline_result$jscomp$0","inRootOrSingleton","dispatchSetState","dispatchOptimisticSetState","updateActionState","updateActionStateImpl","stateHook","currentStateHook","actionQueueHook","actionStateActionEffect","rerenderActionState","create","deps","updateRef","mountEffectImpl","fiberFlags","hookFlags","updateEffectImpl","mountEffect","updateInsertionEffect","updateLayoutEffect","imperativeHandleEffect","refCleanup","updateImperativeHandle","concat","mountDebugValue","updateCallback","callback","updateMemo","nextCreate","mountDeferredValueImpl","initialValue","requestDeferredLane","updateDeferredValueImpl","prevValue","startTransition","pendingState","finishedState","previousPriority","dispatchSetStateInternal","result","thenableWithOverride","chainThenableValue","requestUpdateLane","noop$2","startHostTransition","formFiber","formData","ensureFormComponentIsStateful","requestFormReset$1","existingStateHook","initialResetState","useHostTransitionStatus","updateId","updateRefresh","refreshCache","provider","root$63","enqueueUpdate","createUpdate","entangleTransitions","dispatchReducerAction","enqueueRenderPhaseUpdate","entangleTransitionUpdate","currentState","throwIfDuringRender","queueLanes","useCallback","useContext","useEffect","useImperativeHandle","useLayoutEffect","useInsertionEffect","useMemo","useReducer","useRef","useDebugValue","useDeferredValue","useTransition","useSyncExternalStore","useId","useCacheRefresh","useFormState","useActionState","useOptimistic","initialArg","identifierPrefix","booleanOrThenable","applyDerivedStateFromProps","ctor","getDerivedStateFromProps","nextProps","classComponentUpdater","isMounted","component","_reactInternals","enqueueSetState","enqueueReplaceState","enqueueForceUpdate","checkShouldComponentUpdate","oldProps","newProps","nextContext","shouldComponentUpdate","isPureReactComponent","callComponentWillReceiveProps","componentWillReceiveProps","UNSAFE_componentWillReceiveProps","resolveClassComponentProps","baseProps","defaultProps","propName$67","reportGlobalError","reportError","ErrorEvent","dispatchEvent","process","emit","console","defaultOnUncaughtError","defaultOnCaughtError","defaultOnRecoverableError","logUncaughtError","errorInfo","onUncaughtError","componentStack","e$68","setTimeout","logCaughtError","boundary","onCaughtError","errorBoundary","e$69","createRootErrorUpdate","createClassErrorUpdate","initializeClassErrorUpdate","getDerivedStateFromError","componentDidCatch","legacyErrorBoundariesThatAlreadyFailed","SelectiveHydrationException","reconcileChildren","nextChildren","updateForwardRef","propsWithoutRef","prepareToReadContext","bailoutOnAlreadyFinishedWork","updateMemoComponent","shouldConstruct","compare","updateSimpleMemoComponent","checkScheduledUpdateOrContext","prevProps","updateFunctionComponent","updateOffscreenComponent","nextIsDetached","_pendingVisibility","markRef","deferHiddenOffscreenComponent","cachePool","nextBaseLanes","propagateParentContextChanges","replayFunctionComponent","updateClassComponent","contextType","updater","refs","initializeUpdateQueue","getSnapshotBeforeUpdate","UNSAFE_componentWillMount","componentWillMount","processUpdateQueue","suspendIfUpdateReadFromEntangledAsyncAction","componentDidMount","unresolvedOldProps","oldContext","contextType$jscomp$0","hasForceUpdate","cloneUpdateQueue","UNSAFE_componentWillUpdate","componentWillUpdate","componentDidUpdate","mountHostRootWithoutHydrating","SUSPENDED_MARKER","treeContext","retryLane","mountSuspenseOffscreenState","getRemainingWorkInPrimaryTree","primaryTreeDidDefer","workInProgressDeferredLane","updateSuspenseComponent","showFallback","didSuspend","JSCompiler_temp$jscomp$0","nextInstance","c","id","overflow","fallback","mountWorkInProgressOffscreenFiber","mountSuspensePrimaryChildren","retrySuspenseComponentWithoutHydrating","dataset","digest","dgst","renderDidSuspendDelayIfPossible","retryDehydratedSuspenseBoundary","_reactRetry","subtreeFlags","primaryChildren","offscreenProps","createFiberFromOffscreen","scheduleSuspenseWorkOnFiber","propagationRoot","scheduleContextWorkOnParentPath","initSuspenseListRenderState","isBackwards","tail","lastContentRow","tailMode","renderState","rendering","renderingStartTime","updateSuspenseListComponent","beginWork","pushProvider","didSuspendBefore","attemptEarlyBailoutIfNoScheduledUpdate","lazyComponent","propagateContextChanges","isDehydrated","getResource","getOwnerDocumentFromRootContainer","setInitialProperties","resolveSingletonInstance","anyProps","hasAttribute","getAttribute","rel","crossOrigin","title","src","canHydrateInstance","canHydrateTextInstance","pooledCacheLanes","valueCursor","currentlyRenderingFiber","lastContextDependency","providerFiber","popProvider","contexts","forcePropagateEntireTree","list","nextFiber","firstContext","dependency","isInsidePropagationBailout","currentParent","currentDependencies","memoizedValue","readContextForConsumer","consumer","firstBaseUpdate","lastBaseUpdate","shared","hiddenCallbacks","callbacks","executionContext","enqueueCapturedUpdate","capturedUpdate","newFirst","newLast","clone","didReadFromEntangledAsyncAction","workInProgress$jscomp$0","instance$jscomp$0","lastPendingUpdate","firstPendingUpdate","isHiddenUpdate","callCallback","commitCallbacks","commitHookEffectListMount","finishedWork","firstEffect","captureCommitPhaseError","commitHookEffectListUnmount","nearestMountedAncestor$jscomp$0","nearestMountedAncestor","commitClassCallbacks","safelyCallComponentWillUnmount","componentWillUnmount","safelyAttachRef","instanceToUse","safelyDetachRef","error$112","commitHostMount","autoFocus","srcSet","srcset","commitHostUpdate","domElement","lastProps","propKey","lastProp","setProp","propKey$203","propKey$219","propKey$224","propKey$229","setPropOnCustomElement","propKey$234","updateProperties","isHostParent","getHostSibling","insertOrAppendPlacementNodeIntoContainer","before","insertBefore","appendChild","_reactRootContainer","insertOrAppendPlacementNode","offscreenSubtreeIsHidden","offscreenSubtreeWasHidden","needsFormReset","PossiblyWeakSet","WeakSet","nextEffect","shouldFireAfterActiveInstanceBlur","commitLayoutEffectOnFiber","finishedRoot","recursivelyTraverseLayoutEffects","__reactInternalSnapshotBeforeUpdate","error$111","commitSuspenseHydrationCallbacks","prevOffscreenSubtreeIsHidden","prevOffscreenSubtreeWasHidden","recursivelyTraverseReappearLayoutEffects","detachFiberAfterEffects","hostParent","hostParentIsContainer","recursivelyTraverseDeletionEffects","commitDeletionEffectsOnFiber","deletedFiber","onCommitFiberUnmount","count","removeChild","prevHostParent","prevHostParentIsContainer","attributes","removeAttributeNode","prevHostParentIsContainer$119","clearSuspenseBoundary","retryIfBlockedOn","attachSuspenseRetryListeners","wakeables","retryCache","_retryCache","getRetryCache","wakeable","retry","resolveRetryWakeable","recursivelyTraverseMutationEffects","root$jscomp$0","parentFiber","commitMutationEffectsOnFiber","currentHoistableRoot","commitReconciliationEffects","hoistableRoot","currentResource","getElementsByTagName","head","querySelector","maybeNodes","getHydratableHoistableCache","splice","content","property","httpEquiv","charSet","mountHoistable","acquireResource","nextNode","tagCaches","getHoistableRoot","recursivelyResetForms","globalMostRecentFallbackTime","_current","recursivelyTraverseDisappearLayoutEffects","display","retryQueue","parent$jscomp$0","parent$113","parent$115","reset","finishedRoot$jscomp$0","includeWorkInProgressEffects","commitOffscreenPassiveMountEffects","previousCache","commitCachePassiveMountEffect","recursivelyTraversePassiveMountEffects","committedLanes","committedTransitions","commitPassiveMountOnFiber","_finishedWork$memoize2","onPostCommit","passiveEffectDuration","recursivelyTraverseAtomicPassiveEffects","recursivelyTraverseReconnectPassiveEffects","committedLanes$jscomp$0","committedTransitions$jscomp$0","suspenseyCommitFlag","recursivelyAccumulateSuspenseyCommit","accumulateSuspenseyCommitOnFiber","resource","suspendedState","media","matchMedia","matches","loading","getStyleKey","getStylesheetSelectorFromKey","_p","onUnsuspend","stylesheetPropsFromRawProps","preloadPropsMap","adoptPreloadPropsForStylesheet","linkInstance","Promise","reject","onload","onerror","stylesheets","preload","suspendResource","previousHoistableRoot","detachAlternateSiblings","previousFiber","recursivelyTraversePassiveUnmountEffects","commitPassiveUnmountEffectsInsideOfDeletedTree_begin","commitPassiveUnmountOnFiber","recursivelyTraverseDisconnectPassiveEffects","deletedSubtreeRoot","FiberNode","isReactComponent","resetWorkInProgress","owner","fiberTag","hostContext","itemProp","precedence","onLoad","onError","async","isHostHoistableType","elements","primaryChildInstance","_pendingMarkers","_transitions","detach","attach","pendingChildren","markUpdate","preloadResourceAndSuspendIfNeeded","preloadResource","scheduleRetryEffect","workInProgressSuspendedRetryLanes","cutOffTailIfNeeded","hasRenderedATailFallback","lastTailNode","lastTailNode$131","bubbleProperties","completedWork","didBailout","newChildLanes","child$132","completeWork","pendingContext","queueRecoverableErrors","createElementNS","innerHTML","createTextNode","cache$144","listenToAllSupportedEvents","workInProgressRootExitStatus","workInProgressRootRenderTargetTime","unwindWork","unwindInterruptedWork","interruptedWork","DefaultAsyncDispatcher","getCacheForType","resourceType","cacheForType","PossiblyWeakMap","workInProgressSuspendedReason","workInProgressThrownValue","workInProgressRootDidSkipSuspendedSiblings","workInProgressRootIsPrerendering","workInProgressRootDidAttachPingListener","workInProgressRootInterleavedUpdatedLanes","workInProgressRootPingedLanes","workInProgressRootConcurrentErrors","workInProgressRootRecoverableErrors","workInProgressRootDidIncludeRecursiveRenderUpdate","Infinity","workInProgressTransitions","rootDoesHavePassiveEffects","rootWithPendingPassiveEffects","pendingPassiveEffectsLanes","pendingPassiveEffectsRemainingLanes","pendingPassiveTransitions","suspenseHandler","cancelPendingCommit","prepareFreshStack","markRootSuspended","ensureRootIsScheduled","performWorkOnRoot","forceSync","shouldTimeSlice","expiredLanes","exitStatus","prevExecutionContext","prevDispatcher","pushDispatcher","prevAsyncDispatcher","pushAsyncDispatcher","thrownValue","throwAndUnwindWorkLoop","replaySuspendedUnitOfWork","hostFiber","completeUnitOfWork","resetWorkInProgressStack","workLoopConcurrent","thrownValue$166","handleThrow","A","renderRootConcurrent","renderRootSync","renderWasConcurrent","isRenderConsistentWithExternalStores","errorRecoveryDisabledLanes","wasRootDehydrated","timeoutHandle","scheduleTimeout","commitRootWhenReady","errors","apply","recoverableErrors","transitions","didIncludeRenderPhaseUpdate","updatedLanes","suspendedRetryLanes","didSkipSuspendedSiblings","suspendedCommitReason","completedRenderStartTime","completedRenderEndTime","unsuspend","noop","insertSuspendedStylesheets","commit","stylesheetTimer","clearTimeout","waitForCommitToBeReady","commitRoot","check","didAttemptEntireTree","expirationTimes","index$6","flushSyncWorkAcrossRoots_impl","cancelTimeout","allEntangledLanes","index$4","shouldYieldForPrerendering","unitOfWork","workLoopSync","thrownValue$164","performUnitOfWork","suspendedReason","rootRenderLanes","attachPingListener","markerInstances","cause","wrapperError","throwException","unwindUnitOfWork","skipSiblings","previousUpdateLanePriority","renderPriorityLevel","flushPassiveEffects","callbackNode","callbackPriority","remainingLanes","previouslyPendingLanes","index$7","hiddenUpdatesForLane","markRootFinished","priorityLevel","scheduleCallback$1","eventsEnabled","_enabled","selection","e$20","indexWithinAnchor","indexWithinFocus","selectionInformation","resolvedPrevProps","clearContainerSparingly","commitBeforeMutationEffects","releaseRootPooledCache","onCommitFiberRoot","onCommitRoot","onRecoverableError","commitRootImpl","root$170","renderPriority","onPostCommitFiberRoot","captureCommitPhaseErrorOnRoot","rootFiber","pingCache","threadIDs","pingSuspendedRoot","retryTimedOutBoundary","boundaryFiber","firstScheduledRoot","lastScheduledRoot","didScheduleMicrotask","mightHavePendingSyncWork","isFlushingWork","currentEventTransitionLane","cb","processRootScheduleInMicrotask","scheduleMicrotask","syncTransitionLanes","onlyLegacy","didPerformSomeWork","root$172","performSyncWorkOnRoot","currentPopstateTransitionEvent","shouldAttemptEagerTransition","prev","scheduleTaskForRootDuringMicrotask","index$5","expirationTime","performWorkOnRootViaSchedulerTask","didTimeout","originalCallbackNode","workInProgressRootRenderLanes$jscomp$0","coerceFormActionProp","actionProp","createFormDataWithSubmitter","submitter","temp","FormData","i$jscomp$inline_1439","eventName$jscomp$inline_1440","toUpperCase","nonDelegatedEvents","eventSystemFlags","_dispatchQueue$i","previousInstance","i$jscomp$0","_dispatchListeners$i","targetElement","listenerSetKey","addTrappedEventListener","listenToNativeEvent","isCapturePhaseListener","listeningMarker","rootContainerElement","targetContainer","listenerWrapper","dispatchDiscreteEvent","dispatchContinuousEvent","capture","passive","dispatchEventForPluginEventSystem","targetInst$jscomp$0","ancestorInst","nodeTag","container","grandTag","SyntheticEventCtor","inCapturePhase","accumulateTargetOnly","reactEventName","lastHostComponent","_instance","createDispatchListener","parentWindow","getParent","accumulateEnterLeaveListenersForEvent","getTargetInstFunc","handleEventFunc","fallbackData","eventType","getNativeBeforeInputChars","char","getFallbackBeforeInputChars","maybeTargetInst","formAction","extractEvents$1","targetFiber","captureName","_instance2","unshift","common","_instance3","NORMALIZE_NEWLINES_REGEX","NORMALIZE_NULL_AND_REPLACEMENT_REGEX","normalizeMarkupForTextOrAttribute","markup","serverText","clientText","formEncType","formMethod","formTarget","encType","__html","muted","isNaN","endsWith","hasSrc","hasSrcSet","propValue$186","parentNamespace","dangerouslySetInnerHTML","localPromise","queueMicrotask","handleErrorInNextTick","parentInstance","suspenseInstance","depth","targetInstance","previousSibling","rootContainerInstance","preconnectsSet","getRootNode","previousDispatcher","d","f","previousWasRendering","wasRendering","r","formInst","D","preconnectAs","C","L","as","globalDocument","preloadSelector","imageSrcSet","imageSizes","getScriptKey","getScriptSelectorFromKey","m","X","scripts","adoptPreloadPropsForScript","link","insertStylesheet","M","limitedEscapedHref","currentProps","preloadProps","styles$242","resource$243","integrity","hrefLang","referrerPolicy","rawProps","styleProps","instance$248","nodes","prior","stylesheetProps","scriptProps","keyAttribute","caches","nodeKey","precedencesByRoot","insertStylesheetIntoRoot","precedences","FiberRootNode","hydrate","incompleteTransitions","createFiberRoot","initialChildren","hydrationCallbacks","isStrictMode","transitionCallbacks","getContextForSubtree","parentComponent","updateContainerImpl","markRetryLaneImpl","markRetryLaneIfNotHydrated","attemptContinuousHydration","blockedOn","findInstanceBlockingEvent","return_targetInst","clearIfContinuousEvent","queuedFocus","accumulateOrCreateContinuousQueuedReplayableEvent","queuedDrag","queuedMouse","queuedPointers","queuedPointerCaptures","queueIfContinuousEvent","discreteReplayableEvents","findInstanceBlockingTarget","hasScheduledReplayAttempt","queuedExplicitHydrationTargets","existingQueuedEvent","targetContainers","attemptExplicitHydrationTarget","queuedTarget","priority","runWithPriority","attemptReplayContinuousQueuedEvent","queuedEvent","nextBlockedOn","nativeEventClone","shift","attemptReplayContinuousQueuedEventInMap","replayUnblockedEvents","scheduleCallbackIfUnblocked","unblocked","lastScheduledReplayQueue","scheduleReplayQueueIfNeeded","formReplayingQueue","submitterOrAction","unblock","$$reactFormReplay","formProps","ReactDOMRoot","internalRoot","_internalRoot","ReactDOMHydrationRoot","unmount","unstable_scheduleHydration","isomorphicReactPackageVersion$jscomp$inline_1686","version","findDOMNode","componentOrElement","parentA","parentB","didFindChild","child$2","findCurrentFiberUsingSlowPath","internals$jscomp$inline_2165","bundleType","rendererPackageName","currentDispatcherRef","findFiberByHostInstance","reconcilerVersion","__REACT_DEVTOOLS_GLOBAL_HOOK__","hook$jscomp$inline_2166","isDisabled","supportsFiber","inject","exports","createRoot","unstable_strictMode","unstable_transitionCallbacks","hydrateRoot","Internals","getCrossOriginStringAs","input","createPortal","createPortal$1","flushSync","previousTransition","previousUpdatePriority","preconnect","prefetchDNS","preinit","fetchPriority","nonce","preinitModule","preloadModule","requestFormReset","unstable_batchedUpdates","permalink","useFormStatus","checkDCE","module","cookieNameRegExp","cookieValueRegExp","domainValueRegExp","pathValueRegExp","__toString","NullObject","startIndex","str","max","decode","decodeURIComponent","jsxProd","config","maybeKey","jsx","jsxs","ReactNoopUpdateQueue","emptyObject","ComponentDummy","PureComponent","partialState","forceUpdate","pureComponentPrototype","ReactElement","self","isValidElement","object","userProvidedKeyEscapeRegex","getElementKey","escaperLookup","escape","mapIntoArray","escapedPrefix","nameSoFar","oldElement","newKey","invokeCallback","nextNamePrefix","resolveThenable","mapChildren","func","lazyInitializer","_status","_result","moduleObject","default","Children","forEachFunc","forEachContext","n","toArray","only","Fragment","Profiler","StrictMode","Suspense","act","cloneElement","childArray","createContext","childrenLength","createRef","forwardRef","lazy","memo","scope","unstable_useCacheRefresh","Context","heap","parentIndex","peek","first","halfLength","leftIndex","rightIndex","right","diff","sortIndex","performance","localPerformance","localDate","initialTime","taskQueue","timerQueue","taskIdCounter","currentTask","currentPriorityLevel","isPerformingWork","isHostCallbackScheduled","isHostTimeoutScheduled","localSetTimeout","localClearTimeout","localSetImmediate","setImmediate","advanceTimers","timer","startTime","handleTimeout","requestHostCallback","firstTimer","requestHostTimeout","schedulePerformWorkUntilDeadline","isMessageLoopRunning","taskTimeoutID","frameInterval","shouldYieldToHost","performWorkUntilDeadline","hasMoreWork","previousPriorityLevel","continuationCallback","MessageChannel","channel","port","port2","port1","onmessage","postMessage","ms","unstable_Profiling","task","unstable_continueExecution","unstable_forceFrameRate","fps","floor","unstable_getFirstCallbackNode","unstable_next","eventHandler","unstable_pauseExecution","unstable_runWithPriority","delay","timeout","unstable_wrapCallback","parentPriorityLevel","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","qrcodegen","__defProp","__getOwnPropSymbols","getOwnPropertySymbols","__hasOwnProp","__propIsEnum","propertyIsEnumerable","__defNormalProp","obj","writable","__spreadValues","prop","__objRest","exclude","qrcodegen2","_QrCode","errorCorrectionLevel","dataCodewords","msk","modules","isFunction","MIN_VERSION","MAX_VERSION","RangeError","drawFunctionPatterns","allCodewords","addEccAndInterleave","drawCodewords","minPenalty","applyMask","drawFormatBits","penalty","getPenaltyScore","assert","mask","encodeText","ecl","segs","QrSegment","makeSegments","encodeSegments","encodeBinary","seg","makeBytes","dataUsedBits","minVersion","maxVersion","boostEcl","dataCapacityBits2","getNumDataCodewords","usedBits","getTotalBits","newEcl","Ecc","MEDIUM","QUARTILE","HIGH","bb","appendBits","modeBits","numChars","numCharCountBits","dataCapacityBits","padByte","getModule","getModules","setFunctionModule","drawFinderPattern","alignPatPos","getAlignmentPatternPositions","numAlign","j","drawAlignmentPattern","drawVersion","formatBits","rem","bits","getBit","dy","dx","dist","abs","xx","yy","isDark","ver","numBlocks","NUM_ERROR_CORRECTION_BLOCKS","ordinal","blockEccLen","ECC_CODEWORDS_PER_BLOCK","rawCodewords","getNumRawDataModules","numShortBlocks","shortBlockLen","blocks","rsDiv","reedSolomonComputeDivisor","k","dat","ecc","reedSolomonComputeRemainder","block","vert","invert","runColor","runX","runHistory","PENALTY_N1","finderPenaltyAddHistory","finderPenaltyCountPatterns","PENALTY_N3","finderPenaltyTerminateAndCount","runY","PENALTY_N2","dark","reduce","sum","total","ceil","PENALTY_N4","pos","degree","reedSolomonMultiply","divisor","_","factor","coef","z","core","currentRunColor","currentRunLength","val","len","cond","QrCode","_QrSegment","bitData","Mode","BYTE","makeNumeric","digits","isNumeric","parseInt","substring","NUMERIC","makeAlphanumeric","isAlphanumeric","ALPHANUMERIC_CHARSET","charAt","ALPHANUMERIC","toUtf8ByteArray","makeEci","assignVal","ECI","NUMERIC_REGEX","ALPHANUMERIC_REGEX","ccbits","encodeURI","QrCode2","_Ecc","LOW","QrSegment2","_Mode","numBitsCharCount","KANJI","qrcodegen_default","ERROR_LEVEL_MAP","Q","DEFAULT_SIZE","DEFAULT_LEVEL","DEFAULT_BGCOLOR","DEFAULT_FGCOLOR","DEFAULT_INCLUDEMARGIN","DEFAULT_MINVERSION","generatePath","margin","ops","cell","excavateModules","excavation","h","w","useQRCode","_ref","level","includeMargin","marginSize","imageSettings","boostLevel","qrcode","segments","accum","v","cells","numCells","calculatedImageSettings","cells2","margin2","getMarginSize","numCells2","calculatedImageSettings2","defaultSize","scale","opacity","excavate","floorX","floorY","getImageSettings","SUPPORTS_PATH2D","Path2D","addPath","QRCodeCanvas","forwardedRef","_a","bgColor","fgColor","_b","imgSrc","_canvas","_image","setCanvasRef","isImgLoaded","setIsImageLoaded","canvas","ctx","getContext","cellsToDraw","image","haveImageToRender","complete","naturalHeight","naturalWidth","pixelRatio","devicePixelRatio","fillStyle","fillRect","fill","rdx","cdx","globalAlpha","drawImage","canvasStyle","img","role","preserveAspectRatio","fgPath","viewBox","shapeRendering","GenerateQRCode","username","setUsername","isValid","setIsValid","setUrl","_jsxs","_jsx","fontSize","padding","placeholder","onChange","present","candidateName","collegeName","teamName","candidate","alert","PopStateEventType","createHashHistory","getUrlBasedHistory","window2","globalHistory","pathname","hash","parsePath","startsWith","createLocation","usr","to","base","hashIndex","createPath","warning","JSON","stringify","invariant","warn","getHistoryState","idx","path","parsedPath","searchIndex","getLocation","createHref2","validateLocation","v5Compat","history","getIndex","handlePop","nextIndex","delta","createURL","origin","URL","replaceState","listen","createHref","encodeLocation","historyState","pushState","DOMException","go","matchRoutes","routes","locationArg","matchRoutesImpl","basename","allowPartial","stripBasename","branches","flattenRoutes","sort","score","siblings","every","compareIndexes","routesMeta","meta","childrenIndex","rankRouteBranches","decoded","decodePath","matchRouteBranch","parentsMeta","parentPath","flattenRoute","route","relativePath","caseSensitive","joinPaths","computeScore","exploded","explodeOptionalSegments","rest","isOptional","required","restExploded","subpath","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","some","filter","segment","branch","matchedParams","matchedPathname","remainingPathname","matchPath","params","pathnameBase","normalizePathname","pattern","matcher","compiledParams","regexpSource","paramName","compilePath","captureGroups","memo2","_ref2","splatValue","nextChar","getInvalidPathError","field","dest","getPathContributingMatches","getResolveToMatches","pathMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","from","isEmptyPath","toPathname","routePathnameIndex","toSegments","fromPathname","resolvePathname","normalizeSearch","normalizeHash","resolvePath","hasExplicitTrailingSlash","hasCurrentTrailingSlash","paths","isRouteErrorResponse","statusText","internal","validMutationMethodsArr","validRequestMethodsArr","DataRouterContext","DataRouterStateContext","ViewTransitionContext","isTransitioning","FetchersContext","AwaitContext","NavigationContext","LocationContext","RouteContext","outlet","isDataRoute","RouteErrorContext","useInRouterContext","React2","useLocation","navigateEffectWarning","useIsomorphicLayoutEffect","static","useNavigate","router","useDataRouterContext","useCurrentRouteId","activeRef","navigate","fromRouteId","useNavigateStable","dataRouterContext","navigator","navigator2","routePathnamesJson","parse","relative","useNavigateUnstable","useResolvedPath","useRoutesImpl","dataRouterState","future","isStatic","parentMatches","routeMatch","parentParams","parentPathname","parentPathnameBase","parentRoute","warningOnce","locationFromContext","parsedLocationArg","parentSegments","renderedMatches","_renderMatches","navigationType","DefaultErrorComponent","useRouteError","lightgrey","preStyles","backgroundColor","codeStyles","devInfo","fontStyle","defaultErrorElement","RenderErrorBoundary","super","revalidation","routeContext","RenderedRoute","_ref9","staticContext","errorElement","ErrorBoundary","_deepestRenderedBoundaryId","initialized","errorIndex","findIndex","renderFallback","fallbackIndex","HydrateFallback","hydrateFallbackElement","loaderData","errors2","needsToRunLoader","loader","reduceRight","shouldRenderHydrateFallback","matches2","getChildren","getDataRouterConsoleError","hookName","useDataRouterState","useRouteContext","thisRoute","routeId","alreadyWarned","React3","_ref12","Route","_props","Router","_ref15","basenameProp","locationProp","staticProp","navigationContext","locationContext","trailingPathname","Routes","_ref16","createRoutesFromChildren","treePath","hasErrorBoundary","shouldRevalidate","handle","defaultMethod","defaultEncType","isHtmlElement","_formDataSupportsSubmitter","supportedFormEncTypes","getFormEncType","getFormSubmissionInfo","attr","isButtonElement","isInputElement","isFormDataSubmitterSupported","append","invariant2","loadRouteModule","routeModulesCache","routeModule","import","__reactRouterContext","isSpaMode","reload","isPageLinkDescriptor","page","isHtmlLinkDescriptor","getNewMatchesForLinks","nextMatches","currentMatches","manifest","isNew","matchPathChanged","manifestRoute","hasLoader","routeChoice","currentUrl","currentParams","nextUrl","nextParams","defaultShouldRevalidate","dedupeHrefs","hrefs","dedupeLinkDescriptors","descriptors","preloads","preloadsSet","deduped","sorted","sortKeys","createHtml","html","singleFetchUrl","reqUrl","React5","RemixRootDefaultErrorBoundary","_ref21","isOutsideRemixApp","errorInstance","heyDeveloper","BoundaryShell","errorString","background","_ref22","renderScripts","routeModules","useFrameworkContext","Layout","lang","fontFamily","Scripts","isFogOfWarEnabled","useDataRouterContext2","React9","useDataRouterStateContext","FrameworkContext","composeEventHandlers","theirHandler","ourHandler","getActiveMatches","isHydrated","errorIdx","PrefetchPageLinks","_ref29","dataLinkProps","PrefetchPageLinksImpl","useKeyedPrefetchLinks","keyedPrefetchLinks","setKeyedPrefetchLinks","interrupted","all","mod","links","flat","getKeyedPrefetchLinks","_ref30","linkProps","newMatchesForData","newMatchesForAssets","dataHrefs","routesParams","foundOptOutRoute","m2","hasClientLoader","searchParams","moduleHrefs","manifestPatch","imports","getModuleLinkHrefs","_ref31","serverHandoffString","renderMeta","routerMatches","enableFogOfWar","didRenderScripts","initialScripts","contextScript","routeModulesScript","hmr","runtime","routeIds","Boolean","initialRoutes","acc","getPartialManifest","entry","routePreloads","mergeRefs","_len3","_key3","isBrowser","__reactRouterVersion","HashRouter","_ref33","historyRef","React10","setStateImpl","ABSOLUTE_URL_REGEX2","Link","_ref35","absoluteHref","discover","prefetch","reloadDocument","replace2","preventScrollReset","viewTransition","isAbsolute","isExternal","targetUrl","protocol","joinedPathname","useHref","shouldPrefetch","prefetchRef","prefetchHandlers","theirElementProps","frameworkContext","maybePrefetch","setMaybePrefetch","setShouldPrefetch","onFocus","onBlur","onMouseEnter","onMouseLeave","onTouchStart","observer","IntersectionObserver","entries","isIntersecting","threshold","observe","disconnect","setIntent","cancelIntent","usePrefetchBehavior","internalOnClick","replaceProp","isModifiedEvent","shouldProcessLinkClick","useLinkClickHandler","_ref36","ariaCurrentProp","className","classNameProp","routerState","opts","vtContext","useDataRouterContext3","currentPath","currentLocation","nextPath","nextLocation","useViewTransitionState","nextLocationPathname","navigation","endSlashPosition","isActive","isPending","renderProps","ariaCurrent","Form","_ref37","fetcherKey","onSubmit","submit","useSubmit","URLSearchParams","indexValues","getAll","qs","useFormAction","submitMethod","getDataRouterConsoleError2","fetcherId","getUniqueFetcherId","currentRouteId","fetch","TextEncoder","_path","_path2","_path3","_path4","_path5","_path6","_path7","_path8","_path9","_path10","_path11","_path12","_path13","_path14","_path15","_path16","_path17","_path18","_path19","_path20","_path21","_path22","_path23","_path24","_path25","_path26","_path27","_path28","_path29","_path30","_path31","_path32","_path33","_path34","_path35","_path36","_path37","_path38","_path39","_path40","_path41","_path42","_path43","_path44","_path45","_path46","_path47","_path48","_path49","_path50","_path51","_path52","_path53","_path54","_path55","_path56","_path57","_path58","_path59","_path60","_path61","_path62","_path63","_path64","_path65","_path66","_path67","_path68","_path69","_path70","_path71","_path72","_path73","_path74","_path75","_path76","_path77","_path78","_path79","_path80","_path81","_path82","_path83","_path84","_path85","_path86","_path87","_path88","_path89","_path90","_path91","_path92","_path93","_path94","_path95","_path96","_path97","_path98","_path99","_path100","_path101","_path102","_path103","_path104","_path105","_path106","_path107","_path108","_path109","_path110","_path111","_path112","_path113","_path114","_path115","_path116","_path117","_path118","_path119","_path120","_path121","_path122","_path123","_path124","_path125","_path126","_path127","_path128","_path129","_path130","_path131","_path132","_path133","_path134","_path135","_path136","_path137","_path138","_path139","_path140","_path141","_path142","_path143","_path144","_path145","_path146","_path147","_path148","_path149","_path150","_path151","_path152","_path153","_path154","_path155","_path156","_path157","_path158","_path159","_path160","_path161","_path162","_path163","_path164","_path165","_path166","_path167","_path168","_path169","_path170","_path171","_path172","_path173","_path174","_path175","_path176","_path177","_path178","_path179","_path180","_path181","_path182","_path183","_path184","_path185","_path186","_path187","_path188","_path189","_path190","_path191","_path192","_path193","_path194","_path195","_path196","_path197","_path198","_path199","_path200","_path201","_path202","_path203","_path204","_path205","_path206","_path207","_path208","_path209","_path210","_path211","_path212","_path213","_path214","_path215","_path216","_path217","_path218","_path219","_path220","_path221","_path222","_path223","_path224","_path225","_path226","_path227","_path228","_path229","_path230","_path231","_path232","_path233","_path234","_path235","_path236","_path237","_path238","_path239","_path240","_path241","_path242","_path243","_path244","_path245","_path246","_path247","_path248","_path249","_path250","_path251","_path252","_path253","_path254","_path255","_path256","_path257","_path258","_path259","_path260","_path261","_path262","_path263","_path264","_path265","_path266","_path267","_path268","_path269","_path270","_path271","_path272","_path273","_path274","_path275","_path276","_path277","_path278","_path279","_path280","_path281","_path282","_path283","_path284","_path285","_path286","_path287","_path288","_path289","_path290","_path291","_path292","_path293","_path294","_path295","_path296","_path297","_path298","_path299","_path300","_path301","_path302","_path303","_path304","_path305","_path306","_path307","_path308","_path309","_path310","_path311","_path312","_path313","_path314","_path315","_path316","_path317","_path318","_path319","_path320","_path321","_path322","_path323","_path324","_path325","_path326","_path327","_path328","_path329","_path330","_path331","_path332","_path333","_path334","_path335","_path336","_path337","_path338","_path339","_path340","_path341","_path342","_path343","_path344","_path345","_path346","_path347","_path348","_path349","_path350","_path351","_path352","_path353","_path354","_path355","_path356","_path357","_path358","_path359","_path360","_path361","_path362","_path363","_path364","_path365","_path366","_path367","_path368","_path369","_path370","_path371","_path372","_path373","_path374","_path375","_path376","_path377","_path378","_path379","_path380","_path381","_path382","_path383","_path384","_path385","_path386","_path387","_path388","_path389","_path390","_path391","_path392","_path393","_path394","_path395","_path396","_path397","_path398","_path399","_path400","_path401","_path402","_path403","_path404","_path405","_path406","_path407","_path408","_path409","_path410","_path411","_path412","_path413","_path414","_path415","_path416","_path417","_path418","_path419","_path420","_path421","_path422","_path423","_path424","_path425","_path426","_path427","_path428","_path429","_path430","_path431","_path432","_path433","_path434","_path435","_path436","_path437","_path438","_path439","_path440","_path441","_path442","_path443","_path444","_path445","_path446","_path447","_path448","_path449","_path450","_path451","_path452","_path453","_path454","_path455","_path456","_path457","_path458","_path459","_path460","_path461","_path462","_path463","_path464","_path465","_path466","_path467","_path468","_path469","_path470","_path471","_path472","_path473","_path474","_path475","_path476","_path477","_path478","_path479","_path480","_path481","_path482","_path483","_path484","_path485","_path486","_path487","_path488","_path489","_path490","_path491","_path492","_path493","_path494","_path495","_path496","_path497","_path498","_path499","_path500","_path501","_path502","_path503","_path504","_path505","_path506","_path507","_path508","_path509","_path510","_path511","_path512","_path513","_path514","_path515","_path516","_path517","_path518","_path519","_path520","_path521","_path522","_path523","_path524","_path525","_path526","_path527","_path528","_path529","_path530","_path531","_path532","_path533","_path534","_path535","_path536","_path537","_path538","_path539","_path540","_path541","_path542","_path543","_path544","_path545","_path546","_path547","_path548","_path549","_path550","_path551","_path552","_path553","_path554","_path555","_path556","_path557","_path558","_path559","_path560","_path561","_path562","_path563","_path564","_path565","_path566","_path567","_path568","_path569","_path570","_path571","_path572","_path573","_path574","_path575","_path576","_path577","_path578","_path579","_path580","_path581","_path582","_path583","_path584","_path585","_path586","_path587","_path588","_path589","_path590","_path591","_path592","_path593","_path594","_path595","_path596","_path597","_path598","_path599","_path600","_path601","_path602","_path603","_path604","_path605","_path606","_path607","_path608","_path609","_path610","_path611","_path612","_path613","_path614","_path615","_path616","_path617","_path618","_path619","_path620","_path621","_path622","_path623","_path624","_path625","_path626","_path627","_path628","_path629","_path630","_path631","_path632","_path633","_path634","_path635","_path636","_path637","_path638","_path639","_path640","_path641","_path642","_path643","_path644","_path645","_path646","_path647","_path648","_path649","_path650","_path651","_path652","_path653","_path654","_path655","_path656","_path657","_path658","_path659","_path660","_path661","_path662","_path663","_path664","_path665","_path666","_path667","_path668","_path669","_path670","_path671","_path672","_path673","_path674","_path675","_path676","_path677","_path678","_path679","_path680","_path681","_path682","_path683","_path684","_path685","_path686","_path687","_path688","_path689","_path690","_path691","_path692","_path693","_path694","_path695","_path696","_path697","_path698","_path699","_path700","_path701","_path702","_path703","_path704","_path705","_path706","_path707","_path708","_path709","_path710","_path711","_path712","_path713","_path714","_path715","_path716","_path717","_path718","_path719","_path720","_path721","_path722","_path723","_path724","_path725","_path726","_path727","_path728","_path729","_path730","_path731","_path732","_path733","_path734","_path735","_path736","_path737","_path738","_path739","_path740","_path741","_path742","_path743","_path744","_path745","_path746","_path747","_path748","_path749","_path750","_path751","_path752","_path753","_path754","_path755","_path756","_path757","_path758","_path759","_path760","_path761","_path762","_path763","_path764","_path765","_path766","_path767","_path768","_path769","_path770","_path771","_path772","_path773","_path774","_path775","_path776","_path777","_path778","_path779","_path780","_path781","_path782","_path783","_path784","_path785","_path786","_path787","_path788","_path789","_path790","_path791","_path792","_path793","_path794","_path795","_path796","_path797","_path798","_path799","_path800","_path801","_path802","_path803","_path804","_path805","_path806","_path807","_path808","_path809","_path810","_path811","_path812","_path813","_path814","_path815","_path816","_path817","_path818","_path819","_path820","_path821","_path822","_path823","_path824","_path825","_path826","_path827","_path828","_path829","_path830","_path831","_path832","_path833","_path834","_path835","_path836","_path837","_path838","_path839","_path840","_path841","_path842","_path843","_path844","_path845","_path846","_path847","_path848","_path849","_path850","_path851","_path852","_path853","_path854","_path855","_path856","_path857","_path858","_path859","_path860","_path861","_path862","_path863","_path864","_path865","_path866","_path867","_path868","_path869","_path870","_path871","_path872","_path873","_path874","_path875","_path876","_path877","_path878","_path879","_path880","_path881","_path882","_path883","_path884","_path885","_path886","_path887","_path888","_path889","_path890","_path891","_path892","_path893","_path894","_path895","_path896","_path897","_path898","_path899","_path900","_path901","_path902","_path903","_path904","_path905","_path906","_path907","_path908","_path909","_path910","_path911","_path912","_path913","_path914","_path915","_path916","_path917","_path918","_path919","_path920","_path921","_path922","_path923","_path924","_path925","_path926","_path927","_path928","_path929","_path930","_path931","_path932","_path933","_path934","_path935","_path936","_path937","_path938","_path939","_path940","_path941","_path942","_path943","_path944","_path945","_path946","_path947","_path948","_path949","_path950","_path951","_path952","_path953","_path954","_path955","_path956","_path957","_path958","_path959","_path960","_path961","_path962","_path963","_path964","_path965","_path966","_path967","_path968","_path969","_path970","_path971","_path972","_path973","_path974","_path975","_path976","_path977","_path978","_path979","_path980","_path981","_path982","_path983","_path984","_path985","_path986","_path987","_path988","_path989","_path990","_path991","_path992","_path993","_path994","_path995","_path996","_path997","_path998","_path999","_path1000","_path1001","_path1002","_path1003","_path1004","_path1005","_path1006","_path1007","_path1008","_path1009","_path1010","_path1011","_path1012","_path1013","_path1014","_path1015","_path1016","_path1017","_path1018","_path1019","_path1020","_path1021","_path1022","_path1023","_path1024","_path1025","_path1026","_path1027","_path1028","_path1029","_path1030","_path1031","_path1032","_path1033","_path1034","_path1035","_path1036","_path1037","_path1038","_path1039","_path1040","_path1041","_path1042","_path1043","_path1044","_path1045","_path1046","_path1047","_path1048","_path1049","_path1050","_path1051","_path1052","_path1053","_path1054","_path1055","_path1056","_path1057","_path1058","_path1059","_path1060","_path1061","_path1062","_path1063","_path1064","_path1065","_path1066","_path1067","_path1068","_path1069","_path1070","_path1071","_path1072","_path1073","_path1074","_path1075","_path1076","_path1077","_path1078","_path1079","_path1080","_path1081","_path1082","_path1083","_path1084","_path1085","_path1086","_path1087","_path1088","_path1089","_path1090","_path1091","_path1092","_path1093","_path1094","_path1095","_path1096","_path1097","_path1098","_path1099","_path1100","_path1101","_path1102","_path1103","_path1104","_path1105","_path1106","_path1107","_path1108","_path1109","_path1110","_path1111","_path1112","_path1113","_path1114","_path1115","_path1116","_path1117","_path1118","_path1119","_path1120","_path1121","_path1122","_path1123","_path1124","_path1125","_path1126","_path1127","_path1128","_path1129","_path1130","_path1131","_path1132","_path1133","_path1134","_path1135","_path1136","_path1137","_path1138","_path1139","_path1140","_path1141","_path1142","_path1143","_path1144","_path1145","_path1146","_path1147","_path1148","_path1149","_path1150","_path1151","_path1152","_path1153","_path1154","_path1155","_path1156","_path1157","_path1158","_path1159","_path1160","_path1161","_path1162","_path1163","_path1164","_path1165","_path1166","_path1167","_path1168","_path1169","_path1170","_path1171","_path1172","_path1173","_path1174","_path1175","_path1176","_path1177","_path1178","_path1179","_path1180","_path1181","_path1182","_path1183","_path1184","_path1185","_path1186","_path1187","_path1188","_path1189","_path1190","_path1191","_path1192","_path1193","_path1194","_path1195","_path1196","_path1197","_path1198","_path1199","_path1200","_path1201","_path1202","_path1203","_path1204","_path1205","_path1206","_path1207","_path1208","_path1209","_path1210","_path1211","_path1212","_path1213","_path1214","_path1215","_path1216","_path1217","_path1218","_path1219","_path1220","_path1221","_path1222","_path1223","_path1224","_path1225","_path1226","_path1227","_path1228","_path1229","_path1230","_path1231","_path1232","_path1233","_path1234","_path1235","_path1236","_path1237","_path1238","_path1239","_path1240","_path1241","_path1242","_path1243","_path1244","_path1245","_path1246","_path1247","_path1248","_path1249","_path1250","_path1251","_path1252","_path1253","_path1254","_path1255","_path1256","_path1257","_path1258","_path1259","_path1260","_path1261","_path1262","_path1263","_path1264","_path1265","_path1266","_path1267","_path1268","_path1269","_path1270","_path1271","_path1272","_path1273","_path1274","_path1275","_path1276","_path1277","_path1278","_path1279","_path1280","_path1281","_path1282","_path1283","_path1284","_path1285","_path1286","_path1287","_path1288","_path1289","_path1290","_path1291","_path1292","_path1293","_path1294","_path1295","_path1296","_path1297","_path1298","_path1299","_path1300","_path1301","_path1302","_path1303","_path1304","_path1305","_path1306","_path1307","_path1308","_path1309","_path1310","_path1311","_path1312","_path1313","_path1314","_path1315","_path1316","_path1317","_path1318","_path1319","_path1320","_path1321","_path1322","_path1323","_path1324","_path1325","_path1326","_path1327","_path1328","_path1329","_path1330","_path1331","_path1332","_path1333","_path1334","_path1335","_path1336","_path1337","_path1338","_path1339","_path1340","_path1341","_path1342","_path1343","_path1344","_path1345","_path1346","_path1347","_path1348","_path1349","_path1350","_path1351","_path1352","_path1353","_path1354","_path1355","_path1356","_path1357","_path1358","_path1359","_path1360","_path1361","_path1362","_path1363","_path1364","_path1365","_path1366","_path1367","_path1368","_path1369","_path1370","_path1371","_path1372","_path1373","_path1374","_path1375","_path1376","_path1377","_path1378","_path1379","_path1380","_path1381","_path1382","_path1383","_path1384","_path1385","_path1386","_path1387","_path1388","_path1389","_path1390","_path1391","_path1392","_path1393","_path1394","_path1395","_path1396","_path1397","_path1398","_path1399","_path1400","_path1401","_path1402","_path1403","_path1404","_path1405","_path1406","_path1407","_path1408","_path1409","_path1410","_path1411","_path1412","_path1413","_path1414","_path1415","_path1416","_path1417","_path1418","_path1419","_path1420","_path1421","_path1422","_path1423","_path1424","_path1425","_path1426","_path1427","_path1428","_path1429","_path1430","_path1431","_path1432","_path1433","_path1434","_path1435","_path1436","_path1437","_path1438","_path1439","_path1440","_path1441","_path1442","_path1443","_path1444","_path1445","_path1446","_path1447","_path1448","_path1449","_path1450","_path1451","_path1452","_path1453","_path1454","_path1455","_path1456","_path1457","_path1458","_path1459","_path1460","_path1461","_path1462","_path1463","_path1464","_path1465","_path1466","_path1467","_path1468","_path1469","_path1470","_path1471","_path1472","_path1473","_path1474","_path1475","_path1476","_path1477","_path1478","_path1479","_path1480","_path1481","_path1482","_path1483","_path1484","_path1485","_path1486","_path1487","_path1488","_path1489","_path1490","_path1491","_path1492","_path1493","_path1494","_path1495","_path1496","_path1497","_path1498","_path1499","_path1500","_path1501","_path1502","_path1503","_path1504","_path1505","_path1506","_path1507","_path1508","_path1509","_path1510","_path1511","_path1512","_path1513","_path1514","_path1515","_path1516","_path1517","_path1518","_path1519","_path1520","_path1521","_path1522","_path1523","_path1524","_path1525","_path1526","_path1527","_path1528","_path1529","_path1530","_path1531","_path1532","_path1533","_path1534","_path1535","_path1536","_path1537","_path1538","_path1539","_path1540","_path1541","_path1542","_path1543","_path1544","_path1545","_path1546","_path1547","_path1548","_path1549","_path1550","_path1551","_path1552","_path1553","_path1554","_path1555","_path1556","_path1557","_path1558","_path1559","_path1560","_path1561","_path1562","_path1563","_path1564","_path1565","_path1566","_path1567","_path1568","_path1569","_path1570","_path1571","_path1572","_path1573","_path1574","_path1575","_path1576","_path1577","_path1578","_path1579","_path1580","_path1581","_path1582","_path1583","_path1584","_path1585","_path1586","_path1587","_path1588","_path1589","_path1590","_path1591","_path1592","_path1593","_path1594","_path1595","_path1596","_path1597","_path1598","_path1599","_path1600","_path1601","_path1602","_path1603","_path1604","_path1605","_path1606","_path1607","_path1608","_path1609","_path1610","_path1611","_path1612","_path1613","_path1614","_path1615","_path1616","_path1617","_path1618","_path1619","_path1620","_path1621","_path1622","_path1623","_path1624","_path1625","_path1626","_path1627","_path1628","_path1629","_path1630","_path1631","_path1632","_path1633","_path1634","_path1635","_path1636","_path1637","_path1638","_path1639","_path1640","_path1641","_path1642","_path1643","_path1644","_path1645","_path1646","_path1647","_path1648","_path1649","_path1650","_path1651","_path1652","_path1653","_path1654","_path1655","_path1656","_path1657","_path1658","_path1659","_path1660","_path1661","_path1662","_path1663","_path1664","_path1665","_path1666","_path1667","_path1668","_path1669","_path1670","_path1671","_path1672","_path1673","_path1674","_path1675","_path1676","_path1677","_path1678","_path1679","_path1680","_path1681","_path1682","_path1683","_path1684","_path1685","_path1686","_path1687","_path1688","_path1689","_path1690","_path1691","_path1692","_path1693","_path1694","_path1695","_path1696","_path1697","_path1698","_path1699","_path1700","_path1701","_path1702","_path1703","_path1704","_path1705","_path1706","_path1707","_path1708","_path1709","_path1710","_path1711","_path1712","_path1713","_path1714","_path1715","_path1716","_path1717","_path1718","_path1719","_path1720","_path1721","_path1722","_path1723","_path1724","_path1725","_path1726","_path1727","_path1728","_path1729","_path1730","_path1731","_path1732","_path1733","_path1734","_path1735","_path1736","_path1737","_path1738","_path1739","_path1740","_path1741","_path1742","_path1743","_path1744","_path1745","_path1746","_path1747","_path1748","_path1749","_path1750","_path1751","_path1752","_path1753","_path1754","_path1755","_path1756","_path1757","_path1758","_path1759","_path1760","_path1761","_path1762","_path1763","_path1764","_path1765","_path1766","_path1767","_path1768","_path1769","_path1770","_path1771","_path1772","_path1773","_path1774","_path1775","_path1776","_path1777","_path1778","_path1779","_path1780","_path1781","_path1782","_path1783","_path1784","_path1785","_path1786","_path1787","_path1788","_path1789","_path1790","_path1791","_path1792","_path1793","_path1794","_path1795","_path1796","_path1797","_path1798","_path1799","_path1800","_path1801","_path1802","_path1803","_path1804","_path1805","_path1806","_path1807","_path1808","_path1809","_path1810","_path1811","_path1812","_path1813","_path1814","_path1815","_path1816","_path1817","_path1818","_path1819","_path1820","_path1821","_path1822","_path1823","_path1824","_path1825","_path1826","_path1827","_path1828","_path1829","_path1830","_path1831","_path1832","_path1833","_path1834","_path1835","_path1836","_path1837","_path1838","_path1839","_path1840","_path1841","_path1842","_path1843","_path1844","_path1845","_path1846","_path1847","_path1848","_path1849","_path1850","_path1851","_path1852","_path1853","_path1854","_path1855","_path1856","_path1857","_path1858","_path1859","_path1860","_path1861","_path1862","_path1863","_path1864","_path1865","_path1866","_path1867","_path1868","_path1869","_path1870","_path1871","_path1872","_path1873","_path1874","_path1875","_path1876","_path1877","_path1878","_path1879","_path1880","_path1881","_path1882","_path1883","_path1884","_path1885","_path1886","_path1887","_path1888","_path1889","_path1890","_path1891","_path1892","_path1893","_path1894","_path1895","_path1896","_path1897","_path1898","_path1899","_path1900","_path1901","_path1902","_path1903","_path1904","_path1905","_path1906","_path1907","_path1908","_path1909","_path1910","_path1911","_path1912","_path1913","_path1914","_path1915","_path1916","_path1917","_path1918","_path1919","_path1920","_path1921","_path1922","_path1923","_path1924","_path1925","_path1926","_path1927","_path1928","_path1929","_path1930","_path1931","_path1932","_path1933","_path1934","_path1935","_path1936","_path1937","_path1938","_path1939","_path1940","_path1941","_path1942","_path1943","_path1944","_path1945","_path1946","_path1947","_path1948","_path1949","_path1950","_path1951","_path1952","_path1953","_path1954","_path1955","_path1956","_path1957","_path1958","_path1959","_path1960","_path1961","_path1962","_path1963","_path1964","_path1965","_path1966","_path1967","_path1968","_path1969","_path1970","_path1971","_path1972","_path1973","_path1974","_path1975","_path1976","_path1977","_path1978","_path1979","_path1980","_path1981","_path1982","_path1983","_path1984","_path1985","_path1986","_path1987","_path1988","_path1989","_path1990","_path1991","_path1992","_path1993","_path1994","_path1995","_path1996","_path1997","_path1998","_path1999","_path2000","_path2001","_path2002","_path2003","_path2004","_path2005","_path2006","_path2007","_path2008","_path2009","_path2010","_path2011","_path2012","_path2013","_path2014","_path2015","_path2016","_path2017","_path2018","_path2019","_path2020","_path2021","_path2022","_path2023","_path2024","_path2025","_path2026","_path2027","_path2028","_path2029","_path2030","_path2031","_path2032","_path2033","_path2034","_path2035","_path2036","_path2037","_path2038","_path2039","_path2040","_path2041","_path2042","_path2043","_path2044","_path2045","_path2046","_path2047","_path2048","_path2049","_path2050","_path2051","_path2052","_path2053","_path2054","_path2055","_path2056","_path2057","_path2058","_path2059","_path2060","_path2061","_path2062","_path2063","_path2064","_path2065","_path2066","_path2067","_path2068","_path2069","_path2070","_path2071","_path2072","_path2073","_path2074","_path2075","_path2076","_path2077","_path2078","_path2079","_path2080","_path2081","_path2082","_path2083","_path2084","_path2085","_path2086","_path2087","_path2088","_path2089","_path2090","_path2091","_path2092","_path2093","_path2094","_path2095","_path2096","_path2097","_path2098","_path2099","_path2100","_path2101","_path2102","_path2103","_path2104","_path2105","_path2106","_path2107","_path2108","_path2109","_path2110","_path2111","_path2112","_path2113","_path2114","_path2115","_path2116","_path2117","_path2118","_path2119","_path2120","_path2121","_path2122","_path2123","_path2124","_path2125","_path2126","_path2127","_path2128","_path2129","_path2130","_path2131","_path2132","_path2133","_path2134","_path2135","_path2136","_path2137","_path2138","_path2139","_path2140","_path2141","_path2142","_path2143","_path2144","_path2145","_path2146","_path2147","_path2148","_path2149","_path2150","_path2151","_path2152","_path2153","_path2154","_path2155","_path2156","_path2157","_path2158","_path2159","_path2160","_path2161","_path2162","_path2163","_path2164","_path2165","_path2166","_path2167","_path2168","_path2169","_path2170","_path2171","_path2172","_path2173","_path2174","_path2175","_path2176","_path2177","_path2178","_path2179","_path2180","_path2181","_path2182","_path2183","_path2184","_path2185","_path2186","_path2187","_path2188","_path2189","_path2190","_path2191","_path2192","_path2193","_path2194","_path2195","_path2196","_path2197","_path2198","_path2199","_path2200","_path2201","_path2202","_path2203","_path2204","_path2205","_path2206","_path2207","_path2208","_path2209","_path2210","_path2211","_path2212","_path2213","_path2214","_path2215","_path2216","_path2217","_path2218","_path2219","_path2220","_path2221","_path2222","_path2223","_path2224","_path2225","_path2226","_path2227","_path2228","_path2229","_path2230","_path2231","_path2232","_path2233","_path2234","_path2235","_path2236","_path2237","_path2238","_path2239","_path2240","_path2241","_path2242","_path2243","_path2244","_path2245","_path2246","_path2247","_path2248","_path2249","_path2250","_path2251","_path2252","_path2253","_path2254","_path2255","_path2256","_path2257","_path2258","_path2259","_path2260","_path2261","_path2262","_path2263","_path2264","_path2265","_path2266","_path2267","_path2268","_path2269","_path2270","_path2271","_path2272","_path2273","_path2274","_path2275","_path2276","_path2277","_path2278","_path2279","_path2280","_path2281","_path2282","_path2283","_path2284","_path2285","_path2286","_path2287","_path2288","_path2289","_path2290","_path2291","_path2292","_path2293","_path2294","_path2295","_path2296","_path2297","_path2298","_path2299","_path2300","_path2301","_path2302","_path2303","_path2304","_path2305","_path2306","_path2307","_path2308","_path2309","_path2310","_path2311","_path2312","_path2313","_path2314","_path2315","_path2316","_path2317","_path2318","_path2319","_path2320","_path2321","_path2322","_path2323","_path2324","_path2325","_path2326","_path2327","_path2328","_path2329","_path2330","_path2331","_path2332","_path2333","_path2334","_path2335","_path2336","_path2337","_path2338","_path2339","_path2340","_path2341","_path2342","_path2343","_path2344","_path2345","_path2346","_path2347","_path2348","_path2349","_path2350","_path2351","_path2352","_path2353","_path2354","_path2355","_path2356","_path2357","_path2358","_path2359","_path2360","_path2361","_path2362","_path2363","_path2364","_path2365","_path2366","_path2367","_path2368","_path2369","_path2370","_path2371","_path2372","_path2373","_path2374","_path2375","_path2376","_path2377","_path2378","_path2379","_path2380","_path2381","_path2382","_path2383","_path2384","_path2385","_path2386","_path2387","_path2388","_path2389","_path2390","_path2391","_path2392","_path2393","_path2394","_path2395","_path2396","_path2397","_path2398","_path2399","_path2400","_path2401","_path2402","_path2403","_path2404","_path2405","_path2406","_path2407","_path2408","_path2409","_path2410","_path2411","_path2412","_path2413","_path2414","_path2415","_path2416","_path2417","_path2418","_path2419","_path2420","_path2421","_path2422","_path2423","_path2424","_path2425","_path2426","_path2427","_path2428","_path2429","_path2430","_path2431","_path2432","_path2433","_path2434","_path2435","_path2436","_path2437","_path2438","_path2439","_path2440","_path2441","_path2442","_path2443","_path2444","_path2445","_path2446","_path2447","_path2448","_path2449","_path2450","_path2451","_path2452","_path2453","_path2454","_path2455","_path2456","_path2457","_path2458","_path2459","_path2460","_path2461","_path2462","_path2463","_path2464","_path2465","_path2466","_path2467","_path2468","_path2469","_path2470","_path2471","_path2472","_path2473","_path2474","_path2475","_path2476","_path2477","_path2478","_path2479","_path2480","_path2481","_path2482","_path2483","_path2484","_path2485","_path2486","_path2487","_path2488","_path2489","_path2490","_path2491","_path2492","_path2493","_path2494","_path2495","_path2496","_path2497","_path2498","_path2499","_path2500","_path2501","_path2502","_path2503","_path2504","_path2505","_path2506","_path2507","_path2508","_path2509","_path2510","_path2511","_path2512","_path2513","_path2514","_path2515","_path2516","_path2517","_path2518","_path2519","_path2520","_path2521","_path2522","_path2523","_path2524","_path2525","_path2526","_path2527","_path2528","_path2529","_path2530","_path2531","_path2532","_path2533","_path2534","_path2535","_path2536","_path2537","_path2538","_path2539","_path2540","_path2541","_path2542","_path2543","_path2544","_path2545","_path2546","_path2547","_path2548","_path2549","_path2550","_path2551","_path2552","_path2553","_path2554","_path2555","_path2556","_path2557","_path2558","_path2559","_path2560","_path2561","_path2562","_path2563","_path2564","_path2565","_path2566","_path2567","_path2568","_path2569","_path2570","_path2571","_path2572","_path2573","_path2574","_path2575","_path2576","_path2577","_path2578","_path2579","_path2580","_path2581","_path2582","_path2583","_path2584","_path2585","_path2586","_path2587","_path2588","_path2589","_path2590","_path2591","_path2592","_path2593","_path2594","_path2595","_path2596","_path2597","_path2598","_path2599","_path2600","_path2601","_path2602","_path2603","_path2604","_path2605","_path2606","_path2607","_path2608","_path2609","_path2610","_path2611","_path2612","_path2613","_path2614","_path2615","_path2616","_path2617","_path2618","_path2619","_path2620","_path2621","_path2622","_path2623","_path2624","_path2625","_path2626","_path2627","_path2628","_path2629","_path2630","_path2631","_path2632","_path2633","_path2634","_path2635","_path2636","_path2637","_path2638","_path2639","_path2640","_path2641","_path2642","_path2643","_path2644","_path2645","_path2646","_path2647","_path2648","_path2649","_path2650","_path2651","_path2652","_path2653","_path2654","_path2655","_path2656","_path2657","_path2658","_path2659","_path2660","_path2661","_path2662","_path2663","_path2664","_path2665","_path2666","_path2667","_path2668","_path2669","_path2670","_path2671","_path2672","_path2673","_path2674","_path2675","_path2676","_path2677","_path2678","_path2679","_path2680","_path2681","_path2682","_path2683","_path2684","_path2685","_path2686","_path2687","_path2688","_path2689","_path2690","_path2691","_path2692","_path2693","_path2694","_path2695","_path2696","_path2697","_path2698","_path2699","_path2700","_path2701","_path2702","_path2703","_path2704","_path2705","_path2706","_path2707","_path2708","_path2709","_path2710","_path2711","_path2712","_path2713","_path2714","_path2715","_path2716","_path2717","_path2718","_path2719","_path2720","_path2721","_path2722","_path2723","_path2724","_path2725","_path2726","_path2727","_path2728","_path2729","_path2730","_path2731","_path2732","_path2733","_path2734","_path2735","_path2736","_path2737","_path2738","_path2739","_path2740","_path2741","_path2742","_path2743","_path2744","_path2745","_path2746","_path2747","_path2748","_path2749","_path2750","_path2751","_path2752","_path2753","_path2754","_path2755","_path2756","_path2757","_path2758","_path2759","_path2760","_path2761","_path2762","_path2763","_path2764","_path2765","_path2766","_path2767","_path2768","_path2769","_path2770","_path2771","_path2772","_path2773","_path2774","_path2775","_path2776","_path2777","_path2778","_path2779","_path2780","_path2781","_path2782","_path2783","_path2784","_path2785","_path2786","_path2787","_path2788","_path2789","_path2790","_path2791","_path2792","_path2793","_path2794","_path2795","_path2796","_path2797","_path2798","_path2799","_path2800","_path2801","_path2802","_path2803","_path2804","_path2805","_path2806","_path2807","_path2808","_path2809","_path2810","_path2811","_path2812","_path2813","_path2814","_path2815","_path2816","_path2817","_path2818","_path2819","_path2820","_path2821","_path2822","_path2823","_path2824","_path2825","_path2826","_path2827","_path2828","_path2829","_path2830","_path2831","_path2832","_path2833","_path2834","_path2835","_path2836","_path2837","_path2838","_path2839","_path2840","_path2841","_path2842","_path2843","_path2844","_path2845","_path2846","_path2847","_path2848","_path2849","_path2850","_path2851","_path2852","_path2853","_path2854","_path2855","_path2856","_path2857","_path2858","_path2859","_path2860","_path2861","_path2862","_path2863","_path2864","_path2865","_path2866","_path2867","_path2868","_path2869","_path2870","_path2871","_path2872","_path2873","_path2874","_path2875","_path2876","_path2877","_path2878","_path2879","_path2880","_path2881","_path2882","_path2883","_path2884","_path2885","_path2886","_path2887","_path2888","_path2889","_path2890","_path2891","_path2892","_path2893","_path2894","_path2895","_path2896","_path2897","_path2898","_path2899","_path2900","_path2901","_path2902","_path2903","_path2904","_path2905","_path2906","_path2907","_path2908","_path2909","_path2910","_path2911","_path2912","_path2913","_path2914","_path2915","_path2916","_path2917","_path2918","_path2919","_path2920","_path2921","_path2922","_path2923","_path2924","_path2925","_path2926","_path2927","_path2928","_path2929","_path2930","_path2931","_path2932","_path2933","_path2934","_path2935","_path2936","_path2937","_path2938","_path2939","_path2940","_path2941","_path2942","_path2943","_path2944","_path2945","_path2946","_path2947","_path2948","_path2949","_path2950","_path2951","_path2952","_path2953","_path2954","_path2955","_path2956","_path2957","_path2958","_path2959","_path2960","_path2961","_path2962","_path2963","_path2964","_path2965","_path2966","_path2967","_path2968","_path2969","_path2970","_path2971","_path2972","_path2973","_path2974","_path2975","_path2976","_path2977","_path2978","_path2979","_path2980","_path2981","_path2982","_path2983","_path2984","_path2985","_path2986","_path2987","_path2988","_path2989","_path2990","_path2991","_path2992","_path2993","_path2994","_path2995","_path2996","_path2997","_path2998","_path2999","_path3000","_path3001","_path3002","_path3003","_path3004","_path3005","_path3006","_path3007","_path3008","_path3009","_path3010","_path3011","_path3012","_path3013","_path3014","_path3015","_path3016","_path3017","_path3018","_path3019","_path3020","_path3021","_path3022","_path3023","_path3024","_path3025","_path3026","_path3027","_path3028","_path3029","_path3030","_path3031","_path3032","_path3033","_path3034","_path3035","_path3036","_path3037","_path3038","_path3039","_path3040","_path3041","_path3042","_path3043","_path3044","_path3045","_path3046","_path3047","_path3048","_path3049","_path3050","_path3051","_path3052","_path3053","_path3054","_path3055","_path3056","_path3057","_path3058","_path3059","_path3060","_path3061","_path3062","_path3063","_path3064","_path3065","_path3066","_path3067","_path3068","_path3069","_path3070","_path3071","_path3072","_path3073","_path3074","_path3075","_path3076","_path3077","_path3078","_path3079","_path3080","_path3081","_path3082","_path3083","_path3084","_path3085","_path3086","_path3087","_path3088","_path3089","_path3090","_path3091","_path3092","_path3093","_path3094","_path3095","_path3096","_rect","_rect2","_rect3","Card","Profile","setData","database","currTeam","members","getTeamMembers","flexDirection","rowGap","_extends","t","Svg3F1Cars","svgRef","titleId","xmlns","transform","ForwardRef","ProfileV2","teamData","setTeamData","memberID","setMemberID","mousePosition","setMousePosition","handleMouseEnter","handleMouseLeave","svgElement","car","F13cars","onMouseMove","handleMouseMove","position","border","boxShadow","zIndex","exact","getElementById","App"],"sourceRoot":""}